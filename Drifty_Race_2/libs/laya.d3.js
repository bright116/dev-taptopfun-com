!function(e, t, n) {
    n.un, n.uns;
    var i = n.static, r = n.class, a = n.getset, o = n.__newvec, s = laya.webgl.resource.BaseTexture, l = laya.utils.Browser, h = laya.webgl.utils.Buffer, c = laya.webgl.BufferStateBase, u = laya.utils.Byte, _ = laya.utils.ClassUtils, d = laya.layagl.CommandEncoder, f = laya.components.Component, m = n.Config, p = (laya.resource.Context, 
    laya.events.Event, laya.events.EventDispatcher), T = laya.utils.Handler, E = (laya.webgl.utils.InlcudeFile, 
    laya.layagl.LayaGL), v = laya.layagl.LayaGLRunner, g = laya.net.Loader, S = laya.net.LoaderManager, R = laya.maths.MathUtil, A = laya.display.Node, I = laya.maths.Point, D = laya.renders.Render, y = (laya.webgl.resource.RenderTexture2D, 
    laya.resource.Resource), M = laya.utils.RunDriver, C = (laya.webgl.shader.Shader, 
    laya.webgl.utils.ShaderCompile), x = laya.webgl.utils.ShaderNode, O = laya.display.Sprite, L = (laya.display.SpriteConst, 
    laya.utils.Stat), N = laya.webgl.submit.Submit, V = laya.webgl.submit.SubmitKey, P = laya.webgl.resource.Texture2D, w = (laya.utils.Timer, 
    laya.net.URL), F = laya.webgl.WebGL, b = laya.webgl.WebGLContext, B = laya.webgl.canvas.WebGLContext2D;
    n.interface("laya.d3.core.IClone"), n.interface("laya.d3.graphics.IVertex");
    var U = function() {
        function e(e) {
            void 0 === e && (e = !1), this.isTransparent = e, this.elements = [];
        }
        r(e, "laya.d3.core.render.RenderQueue");
        var t = e.prototype;
        return t._compare = function(e, t) {
            var n = e.material.renderQueue - t.material.renderQueue;
            if (0 === n) {
                return (this.isTransparent ? t.render._distanceForSort - e.render._distanceForSort : e.render._distanceForSort - t.render._distanceForSort) + e.render.sortingFudge - t.render.sortingFudge;
            }
            return n;
        }, t._partitionRenderObject = function(e, t) {
            for (var n = this.elements[Math.floor((t + e) / 2)]; e <= t; ) {
                for (;this._compare(this.elements[e], n) < 0; ) e++;
                for (;this._compare(this.elements[t], n) > 0; ) t--;
                if (e < t) {
                    var i = this.elements[e];
                    this.elements[e] = this.elements[t], this.elements[t] = i, e++, t--;
                } else if (e === t) {
                    e++;
                    break;
                }
            }
            return e;
        }, t._quickSort = function(e, t) {
            if (this.elements.length > 1) {
                var n = this._partitionRenderObject(e, t), i = n - 1;
                e < i && this._quickSort(e, i), n < t && this._quickSort(n, t);
            }
        }, t._render = function(e, t, n, i) {
            for (var r, a, o = L.loopCount, s = e.scene, l = e.camera, h = 0, c = this.elements.length; h < c; h++) {
                var u = this.elements[h], _ = u._transform, d = u.render, f = u._geometry, m = u.material;
                if (e.renderElement = u, o !== d._updateLoopCount ? (d._renderUpdate(e, _), d._renderUpdateWithCamera(e, _), 
                d._updateLoopCount = o, d._updateCamera = l) : l !== d._updateCamera && (d._renderUpdateWithCamera(e, _), 
                d._updateCamera = l), f._prepareRender(e)) {
                    var p, T = m._shader.getSubShaderAt(0), v = m._renderStates;
                    if (n) if (i) {
                        var g = T.getFlag(i);
                        if (!g) continue;
                        for (var S = n._subShaders, R = 0, A = S.length; R < A; R++) {
                            var I = S[R];
                            if (g === I.getFlag(i)) {
                                p = I._passes;
                                break;
                            }
                        }
                        if (!p) continue;
                    } else p = n.getSubShaderAt(0)._passes; else p = T._passes;
                    for (var D = 0, y = p.length; D < y; D++) {
                        var M = e.shader = p[D].withCompile(s._defineDatas.value & ~m._disablePublicDefineDatas.value, d._defineDatas.value, m._defineDatas.value), C = M.bind(), x = o !== M._uploadLoopCount, O = M._uploadScene !== s || x;
                        (O || C) && (M.uploadUniforms(M._sceneUniformParamsMap, s._shaderValues, O), M._uploadScene = s);
                        var N = M._uploadCamera !== l, V = N || M._uploadRender !== d || x;
                        (V || C) && (M.uploadUniforms(M._spriteUniformParamsMap, d._shaderValues, V), M._uploadRender = d);
                        var P = N || x;
                        (P || C) && (M.uploadUniforms(M._cameraUniformParamsMap, l._shaderValues, P), M._uploadCamera = l);
                        var w = M._uploadMaterial !== m || x;
                        (w || C) && (M.uploadUniforms(M._materialUniformParamsMap, m._shaderValues, w), 
                        M._uploadMaterial = m);
                        var F = v[D];
                        r !== F ? (F._setRenderStateBlendDepth(), F._setRenderStateFrontFace(t, _), r = F, 
                        a = d) : a !== d && (F._setRenderStateFrontFace(t, _), a = d), n && b.setBlend(E.instance, !1), 
                        f._render(e), M._uploadLoopCount = o;
                    }
                }
            }
        }, t.clear = function() {
            this.elements.length = 0, this.lastTransparentRenderElement = null, this.lastTransparentBatched = !1;
        }, e;
    }(), G = function() {
        function e(t, n) {
            this._id = 0, this._vertexStride = 0, this._vertexElementsDic = null, this._shaderValues = null, 
            this._defineDatas = null, this.vertexElements = null, this._id = ++e._uniqueIDCounter, 
            this._defineDatas = new le(), this._vertexElementsDic = {}, this._vertexStride = t, 
            this.vertexElements = n;
            var i = n.length;
            this._shaderValues = new vt(null);
            for (var r = 0; r < i; r++) {
                var a = n[r], o = a.elementUsage;
                this._vertexElementsDic[o] = a;
                var s = new Int32Array(5), l = xt.getElementInfos(a.elementFormat);
                s[0] = l[0], s[1] = l[1], s[2] = l[2], s[3] = this._vertexStride, s[4] = a.offset, 
                this._shaderValues.setAttribute(o, s);
            }
        }
        r(e, "laya.d3.graphics.VertexDeclaration");
        var t = e.prototype;
        return t.getVertexElementByUsage = function(e) {
            return this._vertexElementsDic[e];
        }, t.unBinding = function() {}, a(0, t, "id", function() {
            return this._id;
        }), a(0, t, "vertexStride", function() {
            return this._vertexStride;
        }), e._uniqueIDCounter = 1, e;
    }(), H = function() {
        function e() {}
        r(e, "laya.d3.core.render.RenderElement");
        var t = e.prototype;
        return t.setTransform = function(e) {
            this._transform = e;
        }, t.setGeometry = function(e) {
            this._geometry = e;
        }, t.addToOpaqueRenderQueue = function(e, t) {
            t.elements.push(this);
        }, t.addToTransparentRenderQueue = function(e, t) {
            t.elements.push(this), t.lastTransparentBatched = !1, t.lastTransparentRenderElement = this;
        }, t.destroy = function() {
            this._transform = null, this._geometry = null, this.material = null, this.render = null;
        }, e;
    }(), z = function() {
        function e(e, t) {
            this._exactBox = null, this._relaxBox = null, this._scene = null, this._parent = null, 
            this._depth = 0, this._boundingSphere = new k(new dn(), 0), this._corners = [ new dn(), new dn(), new dn(), new dn(), new dn(), new dn(), new dn(), new dn() ], 
            this._boundingBoxCenter = new dn(), this._children = o(8), this._objects = [], this._scene = e, 
            this._depth = t;
        }
        r(e, "laya.d3.core.scene.OctreeNode");
        var t = e.prototype;
        return t.initRoot = function(e, t) {
            var n = new dn(), i = new dn();
            dn.scale(t, -.5, n), dn.scale(t, .5, i), dn.add(n, e, n), dn.add(i, e, i), this.exactBox = new ne(n, i), 
            this.relaxBox = new ne(n, i);
        }, t.addTreeNode = function(e) {
            1 === Ne.boxContainsBox(this._relaxBox, e.boundingBox) ? this.addNodeDown(e, 0) : this.addObject(e);
        }, t.addChild = function(t) {
            var n = this._children[t];
            if (null == n) {
                n = new e(this._scene, this._depth + 1), this._children[t] = n, n._parent = this, 
                dn.subtract(this._exactBox.max, this._exactBox.min, e._tempSize), dn.multiply(e._tempSize, e._octreeSplit[t], e._tempCenter), 
                dn.add(this._exactBox.min, e._tempCenter, e._tempCenter), dn.scale(e._tempSize, .25, e._tempSize);
                var i = new dn(), r = new dn();
                dn.subtract(e._tempCenter, e._tempSize, i), dn.add(e._tempCenter, e._tempSize, r), 
                n.exactBox = new ne(i, r), dn.scale(e._tempSize, e.relax, e._tempSize);
                var a = new dn(), o = new dn();
                dn.subtract(e._tempCenter, e._tempSize, a), dn.add(e._tempCenter, e._tempSize, o), 
                n.relaxBox = new ne(a, o);
            }
            return n;
        }, t.addObject = function(e) {
            e._treeNode = this, this._objects.push(e);
        }, t.removeObject = function(e) {
            if (e._treeNode != this) return console.log("OctreeNode::removeObject error"), !1;
            var t = this._objects.indexOf(e);
            return -1 !== t && (this._objects.splice(t, 1), !0);
        }, t.clearObject = function() {
            this._objects.length = 0;
        }, t.addNodeUp = function(e, t) {
            this._parent && 1 !== Ne.boxContainsBox(this._exactBox, e.boundingBox) ? this._parent.addNodeUp(e, t - 1) : this.addNodeDown(e, t);
        }, t.addNodeDown = function(e, t) {
            if (t < this._scene.treeLevel) {
                var n = this.inChildIndex(e.boundingBoxCenter), i = this.addChild(n);
                1 === Ne.boxContainsBox(i._relaxBox, e.boundingBox) ? i.addNodeDown(e, ++t) : this.addObject(e);
            } else this.addObject(e);
        }, t.inChildIndex = function(e) {
            return 4 * (e.z < this._boundingBoxCenter.z ? 0 : 1) + 2 * (e.y < this._boundingBoxCenter.y ? 0 : 1) + (e.x < this._boundingBoxCenter.x ? 0 : 1);
        }, t.updateObject = function(e) {
            1 === Ne.boxContainsBox(this._relaxBox, e.boundingBox) ? (this.removeObject(e), 
            e._treeNode = null, this.addNodeDown(e, this._depth)) : this._parent && (this.removeObject(e), 
            e._treeNode = null, this._parent.addNodeUp(e, this._depth - 1));
        }, t.cullingObjects = function(e, t, n, i, r) {
            var a = 0, o = 0, s = 0, l = 0;
            for (a = 0, s = this._objects.length; a < s; a++) {
                var h = this._objects[a];
                if (this._scene.isLayerVisible(h._owner.layer, n) && h._enable) {
                    if (r && 0 === t.containsBoundBox(h.boundingBox)) continue;
                    h._distanceForSort = dn.distance(h.boundingSphere.center, i);
                    var c = h._renderElements;
                    for (o = 0, l = c.length; o < l; o++) {
                        var u = c[o], _ = this._scene._getRenderQueue(u.material.renderQueue);
                        _.isTransparent ? u.addToTransparentRenderQueue(e, _) : u.addToOpaqueRenderQueue(e, _);
                    }
                }
            }
            for (a = 0; a < 8; a++) {
                var d = this._children[a], f = r;
                if (r) {
                    var m = t.containsBoundBox(d._relaxBox);
                    if (0 === m) continue;
                    f = 2 === m;
                }
                d.cullingObjects(e, t, n, i, f);
            }
        }, t.buildAllChild = function(e) {
            if (e < this._scene.treeLevel) for (var t = 0; t < 8; t++) {
                this.addChild(t).buildAllChild(e + 1);
            }
        }, t._renderBoudingBox = function(e) {}, a(0, t, "exactBox", function() {
            return this._exactBox;
        }, function(e) {
            this._exactBox = e, dn.add(e.min, e.max, this._boundingBoxCenter), dn.scale(this._boundingBoxCenter, .5, this._boundingBoxCenter);
        }), a(0, t, "relaxBox", function() {
            return this._relaxBox;
        }, function(e) {
            this._relaxBox = e, e.getCorners(this._corners), k.createfromPoints(this._corners, this._boundingSphere);
        }), e.CHILDNUM = 8, e.debugMode = !1, e.relax = 1.15, i(e, [ "_tempVector0", function() {
            return this._tempVector0 = new dn();
        }, "_tempSize", function() {
            return this._tempSize = new dn();
        }, "_tempCenter", function() {
            return this._tempCenter = new dn();
        }, "_octreeSplit", function() {
            return this._octreeSplit = [ new dn(.25, .25, .25), new dn(.75, .25, .25), new dn(.25, .75, .25), new dn(.75, .75, .25), new dn(.25, .25, .75), new dn(.75, .25, .75), new dn(.25, .75, .75), new dn(.75, .75, .75) ];
        } ]), e;
    }(), k = function() {
        function e(e, t) {
            this.center = null, this.radius = NaN, this.center = e, this.radius = t;
        }
        r(e, "laya.d3.math.BoundSphere");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.toDefault = function() {
            this.center.toDefault(), this.radius = 0;
        }, t.intersectsRayDistance = function(e) {
            return Ne.intersectsRayAndSphereRD(e, this);
        }, t.intersectsRayPoint = function(e, t) {
            return Ne.intersectsRayAndSphereRP(e, this, t);
        }, t.cloneTo = function(e) {
            var t = e;
            this.center.cloneTo(t.center), t.radius = this.radius;
        }, t.clone = function() {
            var e = new this.constructor(new dn(), new dn());
            return this.cloneTo(e), e;
        }, e.createFromSubPoints = function(t, n, i, r) {
            if (null == t) throw new Error("points");
            if (n < 0 || n >= t.length) throw new Error("start" + n + "Must be in the range [0, " + (t.length - 1) + "]");
            if (i < 0 || n + i > t.length) throw new Error("count" + i + "Must be in the range <= " + t.length + "}");
            var a = n + i, o = e._tempVector3;
            o.elements[0] = 0, o.elements[1] = 0, o.elements[2] = 0;
            for (var s = n; s < a; ++s) dn.add(t[s], o, o);
            var l = r.center;
            dn.scale(o, 1 / i, l);
            var h = 0;
            for (s = n; s < a; ++s) {
                var c = dn.distanceSquared(l, t[s]);
                c > h && (h = c);
            }
            r.radius = Math.sqrt(h);
        }, e.createfromPoints = function(t, n) {
            if (null == t) throw new Error("points");
            e.createFromSubPoints(t, 0, t.length, n);
        }, i(e, [ "_tempVector3", function() {
            return this._tempVector3 = new dn();
        } ]), e;
    }(), X = function() {
        function e() {}
        return r(e, "laya.d3.loaders.MeshReader"), e.read = function(e, t, n) {
            var i = new u(e);
            i.pos = 0;
            var r = i.readUTFString();
            switch (r) {
              case "LAYAMODEL:0301":
              case "LAYAMODEL:0400":
              case "LAYAMODEL:0401":
                Ye.parse(i, r, t, n);
                break;

              case "LAYAMODEL:05":
              case "LAYAMODEL:COMPRESSION_05":
                Xe.parse(i, r, t, n);
                break;

              default:
                throw new Error("MeshReader: unknown mesh version.");
            }
            t._setSubMeshes(n);
        }, e;
    }(), W = function() {
        function e() {
            this.time = NaN, this.eventName = null, this.params = null;
        }
        return r(e, "laya.d3.animation.AnimationEvent"), e;
    }(), Y = function() {
        function e() {
            this.enable = !1, this.randomDirection = !1;
        }
        r(e, "laya.d3.core.particleShuriKen.module.shape.BaseShape");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t._getShapeBoundBox = function(e) {
            throw new Error("BaseShape: must override it.");
        }, t._getSpeedBoundBox = function(e) {
            throw new Error("BaseShape: must override it.");
        }, t.generatePositionAndDirection = function(e, t, n, i) {
            throw new Error("BaseShape: must override it.");
        }, t._calculateProceduralBounds = function(e, t, n) {
            this._getShapeBoundBox(e);
            var i = e.min, r = e.max;
            dn.multiply(i, t, i), dn.multiply(r, t, r);
            var a = new ne(new dn(), new dn());
            this.randomDirection ? (a.min = new dn(-1, -1, -1), a.max = new dn(1, 1, 1)) : this._getSpeedBoundBox(a);
            var o = new ne(new dn(), new dn()), s = o.min, l = o.max;
            dn.scale(a.min, n.y, s), dn.scale(a.max, n.y, l), dn.add(e.min, s, s), dn.add(e.max, l, l), 
            dn.min(e.min, s, e.min), dn.max(e.max, s, e.max);
            var h = new ne(new dn(), new dn()), c = h.min, u = h.max;
            dn.scale(a.min, n.x, c), dn.scale(a.max, n.x, u), dn.min(h.min, u, s), dn.max(h.min, u, l), 
            dn.min(e.min, s, e.min), dn.max(e.max, s, e.max);
        }, t.cloneTo = function(e) {
            e.enable = this.enable;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, e;
    }(), Z = function() {
        function e() {}
        return r(e, "laya.d3.core.particleShuriKen.ShurikenParticleData"), e._getStartLifetimeFromGradient = function(e, t) {
            for (var n = 1, i = e.gradientCount; n < i; n++) {
                var r = e.getKeyByIndex(n);
                if (r >= t) {
                    var a = e.getKeyByIndex(n - 1), o = (t - a) / (r - a);
                    return R.lerp(e.getValueByIndex(n - 1), e.getValueByIndex(n), o);
                }
            }
            throw new Error("ShurikenParticleData: can't get value foam startLifeTimeGradient.");
        }, e._randomInvertRoationArray = function(e, t, n, i, r) {
            var a = NaN;
            i ? (i.seed = r[6], a = i.getFloat(), r[6] = i.seed) : a = Math.random(), a < n ? (t[0] = -e[0], 
            t[1] = -e[1], t[2] = -e[2]) : (t[0] = e[0], t[1] = e[1], t[2] = e[2]);
        }, e._randomInvertRoation = function(e, t, n, i) {
            var r = NaN;
            return n ? (n.seed = i[6], r = n.getFloat(), i[6] = n.seed) : r = Math.random(), 
            r < t && (e = -e), e;
        }, e.create = function(t, n, i) {
            var r = t.autoRandomSeed, a = t._rand, o = t._randomSeeds;
            switch (t.startColorType) {
              case 0:
                var s = t.startColorConstant.elements;
                e.startColor[0] = s[0], e.startColor[1] = s[1], e.startColor[2] = s[2], e.startColor[3] = s[3];
                break;

              case 2:
                r ? R.lerpVector4(t.startColorConstantMin.elements, t.startColorConstantMax.elements, Math.random(), e.startColor) : (a.seed = o[3], 
                R.lerpVector4(t.startColorConstantMin.elements, t.startColorConstantMax.elements, a.getFloat(), e.startColor), 
                o[3] = a.seed);
            }
            var l = t.colorOverLifetime;
            if (l && l.enbale) {
                var h = l.color;
                switch (h.type) {
                  case 0:
                    e.startColor[0] = e.startColor[0] * h.constant.x, e.startColor[1] = e.startColor[1] * h.constant.y, 
                    e.startColor[2] = e.startColor[2] * h.constant.z, e.startColor[3] = e.startColor[3] * h.constant.w;
                    break;

                  case 2:
                    var c = NaN;
                    r ? c = Math.random() : (a.seed = o[10], c = a.getFloat(), o[10] = a.seed);
                    var u = h.constantMin, _ = h.constantMax;
                    e.startColor[0] = e.startColor[0] * R.lerp(u.x, _.x, c), e.startColor[1] = e.startColor[1] * R.lerp(u.y, _.y, c), 
                    e.startColor[2] = e.startColor[2] * R.lerp(u.z, _.z, c), e.startColor[3] = e.startColor[3] * R.lerp(u.w, _.w, c);
                }
            }
            var d = e.startSize;
            switch (t.startSizeType) {
              case 0:
                if (t.threeDStartSize) {
                    var f = t.startSizeConstantSeparate;
                    d[0] = f.x, d[1] = f.y, d[2] = f.z;
                } else d[0] = d[1] = d[2] = t.startSizeConstant;
                break;

              case 2:
                if (t.threeDStartSize) {
                    var m = t.startSizeConstantMinSeparate, p = t.startSizeConstantMaxSeparate;
                    r ? (d[0] = R.lerp(m.x, p.x, Math.random()), d[1] = R.lerp(m.y, p.y, Math.random()), 
                    d[2] = R.lerp(m.z, p.z, Math.random())) : (a.seed = o[4], d[0] = R.lerp(m.x, p.x, a.getFloat()), 
                    d[1] = R.lerp(m.y, p.y, a.getFloat()), d[2] = R.lerp(m.z, p.z, a.getFloat()), o[4] = a.seed);
                } else r ? d[0] = d[1] = d[2] = R.lerp(t.startSizeConstantMin, t.startSizeConstantMax, Math.random()) : (a.seed = o[4], 
                d[0] = d[1] = d[2] = R.lerp(t.startSizeConstantMin, t.startSizeConstantMax, a.getFloat()), 
                o[4] = a.seed);
            }
            var T = t.sizeOverLifetime;
            if (T && T.enbale && 1 === T.size.type) {
                var E = T.size;
                if (E.separateAxes) r ? (d[0] = d[0] * R.lerp(E.constantMinSeparate.x, E.constantMaxSeparate.x, Math.random()), 
                d[1] = d[1] * R.lerp(E.constantMinSeparate.y, E.constantMaxSeparate.y, Math.random()), 
                d[2] = d[2] * R.lerp(E.constantMinSeparate.z, E.constantMaxSeparate.z, Math.random())) : (a.seed = o[11], 
                d[0] = d[0] * R.lerp(E.constantMinSeparate.x, E.constantMaxSeparate.x, a.getFloat()), 
                d[1] = d[1] * R.lerp(E.constantMinSeparate.y, E.constantMaxSeparate.y, a.getFloat()), 
                d[2] = d[2] * R.lerp(E.constantMinSeparate.z, E.constantMaxSeparate.z, a.getFloat()), 
                o[11] = a.seed); else {
                    var v = NaN;
                    r ? v = R.lerp(E.constantMin, E.constantMax, Math.random()) : (a.seed = o[11], v = R.lerp(E.constantMin, E.constantMax, a.getFloat()), 
                    o[11] = a.seed), d[0] = d[0] * v, d[1] = d[1] * v, d[2] = d[2] * v;
                }
            }
            var g = n.renderMode;
            if (1 !== g) switch (t.startRotationType) {
              case 0:
                if (t.threeDStartRotation) {
                    var S = t.startRotationConstantSeparate, A = e._tempVector30.elements;
                    e._randomInvertRoationArray(S.elements, A, t.randomizeRotationDirection, r ? null : a, o), 
                    e.startRotation[0] = A[0], e.startRotation[1] = A[1], e.startRotation[2] = 4 !== g ? -A[2] : A[2];
                } else e.startRotation[0] = e._randomInvertRoation(t.startRotationConstant, t.randomizeRotationDirection, r ? null : a, o);
                break;

              case 2:
                if (t.threeDStartRotation) {
                    var I = t.startRotationConstantMinSeparate, D = t.startRotationConstantMaxSeparate, y = e._tempVector30.elements;
                    r ? (y[0] = R.lerp(I.x, D.x, Math.random()), y[1] = R.lerp(I.y, D.y, Math.random()), 
                    y[2] = R.lerp(I.z, D.z, Math.random())) : (a.seed = o[5], y[0] = R.lerp(I.x, D.x, a.getFloat()), 
                    y[1] = R.lerp(I.y, D.y, a.getFloat()), y[2] = R.lerp(I.z, D.z, a.getFloat()), o[5] = a.seed), 
                    e._randomInvertRoationArray(y, y, t.randomizeRotationDirection, r ? null : a, o), 
                    e.startRotation[0] = y[0], e.startRotation[1] = y[1], e.startRotation[2] = 4 !== g ? -y[2] : y[2];
                } else r ? e.startRotation[0] = e._randomInvertRoation(R.lerp(t.startRotationConstantMin, t.startRotationConstantMax, Math.random()), t.randomizeRotationDirection, r ? null : a, o) : (a.seed = o[5], 
                e.startRotation[0] = e._randomInvertRoation(R.lerp(t.startRotationConstantMin, t.startRotationConstantMax, a.getFloat()), t.randomizeRotationDirection, r ? null : a, o), 
                o[5] = a.seed);
            }
            switch (t.startLifetimeType) {
              case 0:
                e.startLifeTime = t.startLifetimeConstant;
                break;

              case 1:
                e.startLifeTime = e._getStartLifetimeFromGradient(t.startLifeTimeGradient, t.emissionTime);
                break;

              case 2:
                r ? e.startLifeTime = R.lerp(t.startLifetimeConstantMin, t.startLifetimeConstantMax, Math.random()) : (a.seed = o[7], 
                e.startLifeTime = R.lerp(t.startLifetimeConstantMin, t.startLifetimeConstantMax, a.getFloat()), 
                o[7] = a.seed);
                break;

              case 3:
                var M = t.emissionTime;
                r ? e.startLifeTime = R.lerp(e._getStartLifetimeFromGradient(t.startLifeTimeGradientMin, M), e._getStartLifetimeFromGradient(t.startLifeTimeGradientMax, M), Math.random()) : (a.seed = o[7], 
                e.startLifeTime = R.lerp(e._getStartLifetimeFromGradient(t.startLifeTimeGradientMin, M), e._getStartLifetimeFromGradient(t.startLifeTimeGradientMax, M), a.getFloat()), 
                o[7] = a.seed);
            }
            switch (t.startSpeedType) {
              case 0:
                e.startSpeed = t.startSpeedConstant;
                break;

              case 2:
                r ? e.startSpeed = R.lerp(t.startSpeedConstantMin, t.startSpeedConstantMax, Math.random()) : (a.seed = o[8], 
                e.startSpeed = R.lerp(t.startSpeedConstantMin, t.startSpeedConstantMax, a.getFloat()), 
                o[8] = a.seed);
            }
            var C = t.textureSheetAnimation;
            if (C && C.enable) {
                var x = C.tiles, O = x.x, L = x.y, N = 1 / O, V = 1 / L, P = 0, w = C.startFrame;
                switch (w.type) {
                  case 0:
                    P = w.constant;
                    break;

                  case 1:
                    r ? P = R.lerp(w.constantMin, w.constantMax, Math.random()) : (a.seed = o[14], P = R.lerp(w.constantMin, w.constantMax, a.getFloat()), 
                    o[14] = a.seed);
                }
                var F = C.frame;
                switch (F.type) {
                  case 0:
                    P += F.constant;
                    break;

                  case 2:
                    r ? P += R.lerp(F.constantMin, F.constantMax, Math.random()) : (a.seed = o[15], 
                    P += R.lerp(F.constantMin, F.constantMax, a.getFloat()), o[15] = a.seed);
                }
                var b = 0;
                switch (C.type) {
                  case 0:
                    b = Math.floor(P / O);
                    break;

                  case 1:
                    C.randomRow ? r ? b = Math.floor(Math.random() * L) : (a.seed = o[13], b = Math.floor(a.getFloat() * L), 
                    o[13] = a.seed) : b = C.rowIndex;
                }
                var B = Math.floor(P % O);
                (e.startUVInfo = e.startUVInfo)[0] = N, e.startUVInfo[1] = V, e.startUVInfo[2] = B * N, 
                e.startUVInfo[3] = b * V;
            } else (e.startUVInfo = e.startUVInfo)[0] = 1, e.startUVInfo[1] = 1, e.startUVInfo[2] = 0, 
            e.startUVInfo[3] = 0;
            switch (t.simulationSpace) {
              case 0:
                var U = i.position.elements;
                e.simulationWorldPostion[0] = U[0], e.simulationWorldPostion[1] = U[1], e.simulationWorldPostion[2] = U[2];
                var G = i.rotation.elements;
                e.simulationWorldRotation[0] = G[0], e.simulationWorldRotation[1] = G[1], e.simulationWorldRotation[2] = G[2], 
                e.simulationWorldRotation[3] = G[3];
                break;

              case 1:
                break;

              default:
                throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
            }
        }, e.startLifeTime = NaN, e.startSpeed = NaN, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempQuaternion", function() {
            return this._tempQuaternion = new Ce();
        }, "startColor", function() {
            return this.startColor = new Float32Array(4);
        }, "startSize", function() {
            return this.startSize = new Float32Array(3);
        }, "startRotation", function() {
            return this.startRotation = new Float32Array(3);
        }, "startUVInfo", function() {
            return this.startUVInfo = new Float32Array(4);
        }, "simulationWorldPostion", function() {
            return this.simulationWorldPostion = new Float32Array(3);
        }, "simulationWorldRotation", function() {
            return this.simulationWorldRotation = new Float32Array(4);
        } ]), e;
    }(), K = function() {
        function e() {
            this._attatched = !1, this._indexInCompound = -1, this._compoundParent = null, this._attatchedCollisionObject = null, 
            this._referenceCount = 0, this.needsCustomCollisionCallback = !1, this._scale = new dn(1, 1, 1), 
            this._centerMatrix = new ut(), this._localOffset = new dn(0, 0, 0), this._localRotation = new Ce(0, 0, 0, 1);
        }
        r(e, "laya.d3.physics.shape.ColliderShape");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t._setScale = function(t) {
            if (this._compoundParent) this.updateLocalTransformations(); else {
                var n = t.elements;
                e._nativeScale.setValue(n[0], n[1], n[2]), this._nativeShape.setLocalScaling(e._nativeScale);
            }
        }, t._addReference = function() {
            this._referenceCount++;
        }, t._removeReference = function() {
            this._referenceCount--;
        }, t.updateLocalTransformations = function() {
            if (this._compoundParent) {
                var t = e._tempVector30;
                dn.multiply(this.localOffset, this._scale, t), e._createAffineTransformation(t.elements, this.localRotation.elements, this._centerMatrix.elements);
            } else e._createAffineTransformation(this.localOffset.elements, this.localRotation.elements, this._centerMatrix.elements);
        }, t.cloneTo = function(e) {
            var t = e;
            this._localOffset.cloneTo(t.localOffset), this._localRotation.cloneTo(t.localRotation), 
            t.localOffset = t.localOffset, t.localRotation = t.localRotation;
        }, t.clone = function() {
            return null;
        }, t.destroy = function() {
            this._nativeShape && (Dt._physics3D.destroy(this._nativeShape), this._nativeShape = null);
        }, a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "localOffset", function() {
            return this._localOffset;
        }, function(e) {
            this._localOffset = e, this._compoundParent && this._compoundParent._updateChildTransform(this);
        }), a(0, t, "localRotation", function() {
            return this._localRotation;
        }, function(e) {
            this._localRotation = e, this._compoundParent && this._compoundParent._updateChildTransform(this);
        }), e._creatShape = function(e) {
            var t;
            switch (e.type) {
              case "BoxColliderShape":
                var n = e.size;
                t = n ? new Ut(n[0], n[1], n[2]) : new Ut();
                break;

              case "SphereColliderShape":
                t = new Jt(e.radius);
                break;

              case "CapsuleColliderShape":
                t = new Wt(e.radius, e.height, e.orientation);
                break;

              case "MeshColliderShape":
                var i = new Gt();
                e.mesh && (i.mesh = g.getRes(e.mesh)), t = i;
                break;

              case "ConeColliderShape":
                t = new Yt(e.radius, e.height, e.orientation);
                break;

              case "CylinderColliderShape":
                t = new Qt(e.radius, e.height, e.orientation);
                break;

              default:
                throw "unknown shape type.";
            }
            if (e.center) {
                var r = t.localOffset;
                r.fromArray(e.center), t.localOffset = r;
            }
            return t;
        }, e._createAffineTransformation = function(e, t, n) {
            var i = t[0], r = t[1], a = t[2], o = t[3], s = i + i, l = r + r, h = a + a, c = i * s, u = i * l, _ = i * h, d = r * l, f = r * h, m = a * h, p = o * s, T = o * l, E = o * h;
            n[0] = 1 - (d + m), n[1] = u + E, n[2] = _ - T, n[3] = 0, n[4] = u - E, n[5] = 1 - (c + m), 
            n[6] = f + p, n[7] = 0, n[8] = _ + T, n[9] = f - p, n[10] = 1 - (c + d), n[11] = 0, 
            n[12] = e[0], n[13] = e[1], n[14] = e[2], n[15] = 1;
        }, e.SHAPEORIENTATION_UPX = 0, e.SHAPEORIENTATION_UPY = 1, e.SHAPEORIENTATION_UPZ = 2, 
        e.SHAPETYPES_BOX = 0, e.SHAPETYPES_SPHERE = 1, e.SHAPETYPES_CYLINDER = 2, e.SHAPETYPES_CAPSULE = 3, 
        e.SHAPETYPES_CONVEXHULL = 4, e.SHAPETYPES_COMPOUND = 5, e.SHAPETYPES_STATICPLANE = 6, 
        e.SHAPETYPES_CONE = 7, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_nativeScale", function() {
            return this._nativeScale = new Dt._physics3D.btVector3(1, 1, 1);
        }, "_nativeVector30", function() {
            return this._nativeVector30 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativQuaternion0", function() {
            return this._nativQuaternion0 = new Dt._physics3D.btQuaternion(0, 0, 0, 1);
        }, "_nativeTransform0", function() {
            return this._nativeTransform0 = new Dt._physics3D.btTransform();
        } ]), e;
    }(), j = function() {
        function e() {}
        return r(e, "laya.d3.resource.TextureGenerator"), e.lightAttenTexture = function(e, t, n, i, r, a) {
            var o = e / n, s = 1 / (1 + 25 * o);
            o >= .64 && (o > 1 ? s = 0 : s *= 1 - (o - .64) / .36), a[r] = Math.floor(255 * s + .5);
        }, e.haloTexture = function(e, t, n, i, r, a) {
            var o = (e - (n >>= 1)) / n, s = (t - (i >>= 1)) / i, l = o * o + s * s;
            l > 1 && (l = 1), a[r] = Math.floor(255 * (1 - l) + .5);
        }, e._generateTexture2D = function(e, t, n, i) {
            var r = 0, a = 0;
            switch (e.format) {
              case 0:
                a = 3;
                break;

              case 1:
                a = 4;
                break;

              case 2:
                a = 1;
                break;

              default:
                throw "GeneratedTexture._generateTexture: unkonw texture format.";
            }
            for (var o = new Uint8Array(t * n * a), s = 0; s < n; s++) for (var l = 0; l < t; l++) i(l, s, t, n, r, o), 
            r += a;
            e.setPixels(o);
        }, e;
    }(), q = function() {
        function e() {}
        return r(e, "laya.d3.graphics.FrustumCulling"), e.__init__ = function() {
            D.isConchApp && (e._cullingBufferLength = 0, e._cullingBuffer = new Float32Array(4096));
        }, e.renderObjectCulling = function(e, t, n, i) {
            var r = 0, a = 0, o = 0, s = 0, l = t._opaqueQueue, h = t._transparentQueue;
            l.clear(), h.clear();
            var c = Pe._managers;
            for (r = 0, a = c.length; r < a; r++) c[r]._clear();
            var u = ae._managers;
            for (r = 0, a = u.length; r < a; r++) u[r]._clear();
            var _ = i.length, d = i.elements, f = e.boundFrustum;
            L.spriteCount += _;
            var m = n.camera._transform.position;
            if (t.treeRoot) t.treeRoot.cullingObjects(n, f, e, m, !0); else for (r = 0; r < _; r++) {
                var p = d[r];
                if (t.isLayerVisible(p._owner._layer, e) && p._enable && p._needRender(f)) {
                    p._visible = !0, p._distanceForSort = dn.distance(p.boundingSphere.center, m);
                    var T = p._renderElements;
                    for (o = 0, s = T.length; o < s; o++) {
                        var E = T[o], v = t._getRenderQueue(E.material.renderQueue);
                        v.isTransparent ? E.addToTransparentRenderQueue(n, v) : E.addToOpaqueRenderQueue(n, v);
                    }
                } else p._visible = !1;
            }
            var g = l.elements.length;
            g > 0 && l._quickSort(0, g - 1), (g = h.elements.length) > 0 && h._quickSort(0, g - 1);
        }, e.renderObjectCullingNative = function(t, n, i, r) {
            var a = 0, o = 0, s = 0, l = 0, h = n._opaqueQueue, c = n._transparentQueue;
            h.clear(), c.clear();
            var u = Pe._managers;
            for (a = 0, o = u.length; a < o; a++) u[a]._clear();
            var _ = ae._managers;
            for (a = 0, o = _.length; a < o; a++) _[a]._clear();
            var d = r.length, f = r.elements;
            for (a = 0; a < d; a++) f[a].boundingSphere;
            t.boundFrustum;
            e.cullingNative(t._boundFrustumBuffer, e._cullingBuffer, n._cullingBufferIndices, d, n._cullingBufferResult), 
            L.spriteCount += d;
            var m = i.camera._transform.position;
            for (a = 0; a < d; a++) {
                var p = f[a];
                if (n.isLayerVisible(p._owner._layer, t) && p._enable && n._cullingBufferResult[a]) {
                    p._visible = !0, p._distanceForSort = dn.distance(p.boundingSphere.center, m);
                    var T = p._renderElements;
                    for (s = 0, l = T.length; s < l; s++) {
                        var E = T[s], v = n._getRenderQueue(E.material.renderQueue);
                        v.isTransparent ? E.addToTransparentRenderQueue(i, v) : E.addToOpaqueRenderQueue(i, v);
                    }
                } else p._visible = !1;
            }
            var g = h.elements.length;
            g > 0 && h._quickSort(0, g - 1), (g = c.elements.length) > 0 && c._quickSort(0, g - 1);
        }, e.cullingNative = function(e, t, n, i, r) {
            return E.instance.culling(e, t, n, i, r);
        }, e._cullingBufferLength = 0, e._cullingBuffer = null, e;
    }(), Q = function() {
        function e(e) {
            this._owner = e, this._batches = [], this._cacheBatchOwner = [];
        }
        r(e, "laya.d3.graphics.MeshRenderStaticBatchOwner");
        return e.prototype._getBatchRender = function(e, t, n) {
            var i = this._cacheBatchOwner[t];
            i || (i = this._cacheBatchOwner[t] = o(2, null));
            var r = i[n ? 1 : 0];
            return r || ((r = new Ln(null)).lightmapIndex = t, r.receiveShadow = n, i[n ? 1 : 0] = r, 
            r._defineDatas.add(ii.SHADERDEFINE_UV1)), r;
        }, e;
    }(), J = function() {
        function e() {
            this._destroyed = !1;
        }
        r(e, "laya.d3.core.GeometryElement");
        var t = e.prototype;
        return n.imps(t, {
            "laya.resource.IDestroy": !0
        }), t._getType = function() {
            throw "GeometryElement:must override it.";
        }, t._prepareRender = function(e) {
            return !0;
        }, t._render = function(e) {
            throw "GeometryElement:must override it.";
        }, t.destroy = function() {
            this._destroyed || (this._destroyed = !0);
        }, a(0, t, "destroyed", function() {
            return this._destroyed;
        }), e._typeCounter = 0, e;
    }(), $ = function() {
        function e() {
            this.time = NaN;
        }
        r(e, "laya.d3.core.Keyframe");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            e.time = this.time;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, e;
    }(), ee = function() {
        function e() {
            this.speed = 1, this.clipStart = 0, this.clipEnd = 1, this._nodeOwners = [];
        }
        r(e, "laya.d3.component.AnimatorState");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t._resetFrameIndices = function() {
            for (var e = 0, t = this._currentFrameIndices.length; e < t; e++) this._currentFrameIndices[e] = -1;
        }, t.addScript = function(e) {
            var t = new e();
            return this._scripts = this._scripts || [], this._scripts.push(t), t;
        }, t.getScript = function(e) {
            if (this._scripts) for (var t = 0, i = this._scripts.length; t < i; t++) {
                var r = this._scripts[t];
                if (n.__typeof(r, e)) return r;
            }
            return null;
        }, t.getScripts = function(e) {
            var t;
            if (this._scripts) for (var i = 0, r = this._scripts.length; i < r; i++) {
                var a = this._scripts[i];
                n.__typeof(a, e) && (t = t || []).push(a);
            }
            return t;
        }, t.cloneTo = function(e) {
            var t = e;
            t.name = this.name, t.speed = this.speed, t.clipStart = this.clipStart, t.clipEnd = this.clipEnd, 
            t.clip = this._clip;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "clip", function() {
            return this._clip;
        }, function(e) {
            this._clip = e, this._currentFrameIndices = new Int16Array(e._nodes.count), this._resetFrameIndices();
        }), e;
    }(), te = function() {
        function e() {
            this._material = null, this._mesh = tn.instance;
        }
        r(e, "laya.d3.resource.models.SkyRenderer");
        var t = e.prototype;
        return t._isAvailable = function() {
            return this._material && this._mesh;
        }, t._render = function(e) {
            if (this._material && this._mesh) {
                var t = E.instance, n = e.scene, i = e.camera;
                b.setCullFace(t, !1), b.setDepthFunc(t, 515), b.setDepthMask(t, !1);
                var r = e.shader = this._material._shader.getSubShaderAt(0)._passes[0].withCompile(0, 0, this._material._defineDatas.value), a = r.bind(), o = L.loopCount !== r._uploadLoopCount, s = r._uploadScene !== n || o;
                (s || a) && (r.uploadUniforms(r._sceneUniformParamsMap, n._shaderValues, s), r._uploadScene = n);
                var l = r._uploadCamera !== i || o;
                (l || a) && (r.uploadUniforms(r._cameraUniformParamsMap, i._shaderValues, l), r._uploadCamera = i);
                var h = r._uploadMaterial !== this._material || o;
                (h || a) && (r.uploadUniforms(r._materialUniformParamsMap, this._material._shaderValues, h), 
                r._uploadMaterial = this._material), this._mesh._bufferState.bind(), this._mesh._render(e), 
                b.setDepthFunc(t, 513), b.setDepthMask(t, !0);
            }
        }, t.destroy = function() {
            this._material && (this._material._removeReference(), this._material = null);
        }, a(0, t, "material", function() {
            return this._material;
        }, function(e) {
            this._material !== e && (this._material && this._material._removeReference(), e && e._addReference(), 
            this._material = e);
        }), a(0, t, "mesh", function() {
            return this._mesh;
        }, function(e) {
            this._mesh !== e && (this._mesh = e);
        }), e;
    }(), ne = (function() {
        function e() {}
        r(e, "laya.d3.resource.models.PrimitiveMesh"), e._createMesh = function(e, t, n) {
            var i = new Mn(), r = new Zt(i), a = new Kt(4 * t.length, 35044, !0);
            a.vertexDeclaration = e, a.setData(t), i._vertexBuffers.push(a), i._vertexCount += a.vertexCount;
            var o = new qt("ushort", n.length, 35044, !0);
            o.setData(n), i._indexBuffer = o;
            var s = r._bufferState;
            s.bind(), s.applyVertexBuffer(a), s.applyIndexBuffer(o), s.unBind(), r._vertexBuffer = a, 
            r._indexBuffer = o, r._indexStart = 0, r._indexCount = o.indexCount;
            var l = r._subIndexBufferStart, h = r._subIndexBufferCount, c = r._boneIndicesList;
            l.length = 1, h.length = 1, c.length = 1, l[0] = 0, h[0] = o.indexCount;
            var u = [];
            u.push(r), i._setSubMeshes(u);
            var _ = a._byteLength + o._byteLength;
            return i._setCPUMemory(_), i._setGPUMemory(_), i;
        }, e.createBox = function(t, n, i) {
            void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === i && (i = 1);
            var r = je.getVertexDeclaration("POSITION,NORMAL,UV"), a = t / 2, o = n / 2, s = i / 2, l = new Float32Array([ -a, o, -s, 0, 1, 0, 0, 0, a, o, -s, 0, 1, 0, 1, 0, a, o, s, 0, 1, 0, 1, 1, -a, o, s, 0, 1, 0, 0, 1, -a, -o, -s, 0, -1, 0, 0, 1, a, -o, -s, 0, -1, 0, 1, 1, a, -o, s, 0, -1, 0, 1, 0, -a, -o, s, 0, -1, 0, 0, 0, -a, o, -s, -1, 0, 0, 0, 0, -a, o, s, -1, 0, 0, 1, 0, -a, -o, s, -1, 0, 0, 1, 1, -a, -o, -s, -1, 0, 0, 0, 1, a, o, -s, 1, 0, 0, 1, 0, a, o, s, 1, 0, 0, 0, 0, a, -o, s, 1, 0, 0, 0, 1, a, -o, -s, 1, 0, 0, 1, 1, -a, o, s, 0, 0, 1, 0, 0, a, o, s, 0, 0, 1, 1, 0, a, -o, s, 0, 0, 1, 1, 1, -a, -o, s, 0, 0, 1, 0, 1, -a, o, -s, 0, 0, -1, 1, 0, a, o, -s, 0, 0, -1, 0, 0, a, -o, -s, 0, 0, -1, 0, 1, -a, -o, -s, 0, 0, -1, 1, 1 ]), h = new Uint16Array([ 0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 8, 9, 10, 10, 11, 8, 12, 15, 14, 14, 13, 12, 16, 17, 18, 18, 19, 16, 20, 23, 22, 22, 21, 20 ]);
            return e._createMesh(r, l, h);
        }, e.createCapsule = function(t, n, i, r) {
            void 0 === t && (t = .5), void 0 === n && (n = 2), void 0 === i && (i = 16), void 0 === r && (r = 32);
            var a = (i + 1) * (r + 1) * 2 + 2 * (r + 1), o = 3 * i * (r + 1) * 2 * 2 + 2 * r * 3, s = je.getVertexDeclaration("POSITION,NORMAL,UV"), l = s.vertexStride / 4, h = new Float32Array(a * l), c = new Uint16Array(o), u = Math.PI / 2 / i, _ = 2 * Math.PI / r, d = n / 2 - t, f = 0, m = 0, p = 0, T = 0, E = 0, v = 0, g = 0, S = 0;
            for (g = 0; g <= i; g++) for (S = 0; S <= r; S++) f = t * Math.cos(g * u) * Math.cos(S * _ + Math.PI), 
            m = t * Math.sin(g * u), p = t * Math.cos(g * u) * Math.sin(S * _ + Math.PI), h[T++] = f, 
            h[T++] = m + d, h[T++] = p, h[T++] = f, h[T++] = m, h[T++] = p, h[T++] = 1 - S / r, 
            h[T++] = (1 - g / i) * (Math.PI * t / 2 / (n + Math.PI * t)), g < i && (c[E++] = g * (r + 1) + S + (r + 1), 
            c[E++] = g * (r + 1) + S, c[E++] = g * (r + 1) + S + 1, c[E++] = g * (r + 1) + S + r, 
            c[E++] = g * (r + 1) + S, c[E++] = g * (r + 1) + S + (r + 1));
            for (v += (i + 1) * (r + 1), g = 0; g <= i; g++) for (S = 0; S <= r; S++) f = t * Math.cos(g * u) * Math.cos(S * _ + Math.PI), 
            m = t * Math.sin(-g * u), p = t * Math.cos(g * u) * Math.sin(S * _ + Math.PI), h[T++] = f, 
            h[T++] = m - d, h[T++] = p, h[T++] = f, h[T++] = m, h[T++] = p, h[T++] = 1 - S / r, 
            h[T++] = (g / i * (Math.PI * t / 2) + (n + Math.PI * t / 2)) / (n + Math.PI * t), 
            g < i && (c[E++] = v + g * (r + 1) + S, c[E++] = v + g * (r + 1) + S + (r + 1), 
            c[E++] = v + g * (r + 1) + S + 1, c[E++] = v + g * (r + 1) + S, c[E++] = v + g * (r + 1) + S + r, 
            c[E++] = v + g * (r + 1) + S + (r + 1));
            for (v += (i + 1) * (r + 1), S = 0; S <= r; S++) f = t * Math.cos(S * _ + Math.PI), 
            m = d, p = t * Math.sin(S * _ + Math.PI), h[T++] = f, h[T + 8 * (r + 1) - 1] = f, 
            h[T++] = m, h[T + 8 * (r + 1) - 1] = -m, h[T++] = p, h[T + 8 * (r + 1) - 1] = p, 
            h[T++] = f, h[T + 8 * (r + 1) - 1] = f, h[T++] = 0, h[T + 8 * (r + 1) - 1] = 0, 
            h[T++] = p, h[T + 8 * (r + 1) - 1] = p, h[T++] = 1 - 1 * S / r, h[T + 8 * (r + 1) - 1] = 1 - 1 * S / r, 
            h[T++] = Math.PI * t / 2 / (n + Math.PI * t), h[T + 8 * (r + 1) - 1] = (Math.PI * t / 2 + n) / (n + Math.PI * t);
            for (S = 0; S < r; S++) c[E++] = S + v + (r + 1), c[E++] = S + v + 1, c[E++] = S + v, 
            c[E++] = S + v + (r + 1), c[E++] = S + v + (r + 1) + 1, c[E++] = S + v + 1;
            return v += 2 * (r + 1), e._createMesh(s, h, c);
        }, e.createCone = function(t, n, i) {
            void 0 === t && (t = .5), void 0 === n && (n = 1), void 0 === i && (i = 32);
            for (var r = i + 1 + 1 + 2 * (i + 1), a = 6 * i + 3 * i, o = je.getVertexDeclaration("POSITION,NORMAL,UV"), s = o.vertexStride / 4, l = new Float32Array(r * s), h = new Uint16Array(a), c = 2 * Math.PI / i, u = n / 2, _ = 0, d = 0, f = 0, m = 0, p = 0, T = new dn(), E = new dn(0, -1, 0), v = new dn(0, u, 0), g = new dn(), S = new dn(), R = new Ce(), A = new dn(), I = NaN, D = 0, y = 0, M = 0; M <= i; M++) _ = M * c, 
            f = Math.cos(_ + Math.PI) * t, m = u, p = Math.sin(_ + Math.PI) * t, l[D++] = 0, 
            l[D + 8 * (i + 1) - 1] = f, l[D++] = m, l[D + 8 * (i + 1) - 1] = -m, l[D++] = 0, 
            l[D + 8 * (i + 1) - 1] = p, T.x = f, T.y = 0, T.z = p, g.x = f, g.y = -m, g.z = p, 
            dn.subtract(g, v, S), dn.normalize(S, S), I = Math.acos(dn.dot(E, S)), dn.cross(E, S, A), 
            dn.normalize(A, A), Ce.createFromAxisAngle(A, I, R), dn.normalize(T, T), dn.transformQuat(T, R, T), 
            dn.normalize(T, T), l[D++] = T.x, l[D + 8 * (i + 1) - 1] = T.x, l[D++] = T.y, l[D + 8 * (i + 1) - 1] = T.y, 
            l[D++] = T.z, l[D + 8 * (i + 1) - 1] = T.z, l[D++] = 1 - 1 * M / i, l[D + 8 * (i + 1) - 1] = 1 - 1 * M / i, 
            l[D++] = 0, l[D + 8 * (i + 1) - 1] = 1;
            D += 8 * (i + 1);
            for (var C = 0; C < i; C++) h[y++] = C + d + (i + 1), h[y++] = C + d + 1, h[y++] = C + d, 
            h[y++] = C + d + (i + 1), h[y++] = C + d + (i + 1) + 1, h[y++] = C + d + 1;
            d += 2 * (i + 1);
            for (var x = 0; x <= i; x++) 0 === x && (l[D++] = 0, l[D++] = -u, l[D++] = 0, l[D++] = 0, 
            l[D++] = -1, l[D++] = 0, l[D++] = .5, l[D++] = .5), _ = x * c, f = Math.cos(_ + Math.PI) * t, 
            m = -u, p = Math.sin(_ + Math.PI) * t, l[D++] = f, l[D++] = m, l[D++] = p, l[D++] = 0, 
            l[D++] = -1, l[D++] = 0, l[D++] = .5 + .5 * Math.cos(_), l[D++] = .5 + .5 * Math.sin(_);
            for (var O = 0; O < i; O++) h[y++] = 0 + d, h[y++] = O + 2 + d, h[y++] = O + 1 + d;
            return d += i + 1 + 1, e._createMesh(o, l, h);
        }, e.createCylinder = function(t, n, i) {
            void 0 === t && (t = .5), void 0 === n && (n = 2), void 0 === i && (i = 32);
            for (var r = i + 1 + 1 + 2 * (i + 1) + (i + 1 + 1), a = 3 * i + 6 * i + 3 * i, o = je.getVertexDeclaration("POSITION,NORMAL,UV"), s = o.vertexStride / 4, l = new Float32Array(r * s), h = new Uint16Array(a), c = 2 * Math.PI / i, u = n / 2, _ = 0, d = 0, f = 0, m = 0, p = 0, T = 0, E = 0, v = 0; v <= i; v++) 0 === v && (l[T++] = 0, 
            l[T++] = u, l[T++] = 0, l[T++] = 0, l[T++] = 1, l[T++] = 0, l[T++] = .5, l[T++] = .5), 
            _ = v * c, f = Math.cos(_) * t, m = u, p = Math.sin(_) * t, l[T++] = f, l[T++] = m, 
            l[T++] = p, l[T++] = 0, l[T++] = 1, l[T++] = 0, l[T++] = .5 + .5 * Math.cos(_), 
            l[T++] = .5 + .5 * Math.sin(_);
            for (var g = 0; g < i; g++) h[E++] = 0, h[E++] = g + 1, h[E++] = g + 2;
            d += i + 1 + 1;
            for (var S = 0; S <= i; S++) _ = S * c, f = Math.cos(_ + Math.PI) * t, m = u, p = Math.sin(_ + Math.PI) * t, 
            l[T++] = f, l[T + 8 * (i + 1) - 1] = f, l[T++] = m, l[T + 8 * (i + 1) - 1] = -m, 
            l[T++] = p, l[T + 8 * (i + 1) - 1] = p, l[T++] = f, l[T + 8 * (i + 1) - 1] = f, 
            l[T++] = 0, l[T + 8 * (i + 1) - 1] = 0, l[T++] = p, l[T + 8 * (i + 1) - 1] = p, 
            l[T++] = 1 - 1 * S / i, l[T + 8 * (i + 1) - 1] = 1 - 1 * S / i, l[T++] = 0, l[T + 8 * (i + 1) - 1] = 1;
            T += 8 * (i + 1);
            for (var R = 0; R < i; R++) h[E++] = R + d + (i + 1), h[E++] = R + d + 1, h[E++] = R + d, 
            h[E++] = R + d + (i + 1), h[E++] = R + d + (i + 1) + 1, h[E++] = R + d + 1;
            d += 2 * (i + 1);
            for (var A = 0; A <= i; A++) 0 === A && (l[T++] = 0, l[T++] = -u, l[T++] = 0, l[T++] = 0, 
            l[T++] = -1, l[T++] = 0, l[T++] = .5, l[T++] = .5), _ = A * c, f = Math.cos(_ + Math.PI) * t, 
            m = -u, p = Math.sin(_ + Math.PI) * t, l[T++] = f, l[T++] = m, l[T++] = p, l[T++] = 0, 
            l[T++] = -1, l[T++] = 0, l[T++] = .5 + .5 * Math.cos(_), l[T++] = .5 + .5 * Math.sin(_);
            for (var I = 0; I < i; I++) h[E++] = 0 + d, h[E++] = I + 2 + d, h[E++] = I + 1 + d;
            return d += i + 1 + 1, e._createMesh(o, l, h);
        }, e.createPlane = function(t, n, i, r) {
            void 0 === t && (t = 10), void 0 === n && (n = 10), void 0 === i && (i = 10), void 0 === r && (r = 10);
            for (var a = (i + 1) * (r + 1), o = i * r * 2 * 3, s = new Uint16Array(o), l = je.getVertexDeclaration("POSITION,NORMAL,UV"), h = l.vertexStride / 4, c = new Float32Array(a * h), u = t / 2, _ = n / 2, d = t / i, f = n / r, m = 0, p = 0; p <= r; p++) for (var T = 0; T <= i; T++) c[m++] = T * d - u, 
            c[m++] = 0, c[m++] = p * f - _, c[m++] = 0, c[m++] = 1, c[m++] = 0, c[m++] = 1 * T / i, 
            c[m++] = 1 * p / r;
            var E = 0;
            for (p = 0; p < r; p++) for (T = 0; T < i; T++) s[E++] = (p + 1) * (i + 1) + T, 
            s[E++] = p * (i + 1) + T, s[E++] = (p + 1) * (i + 1) + T + 1, s[E++] = p * (i + 1) + T, 
            s[E++] = p * (i + 1) + T + 1, s[E++] = (p + 1) * (i + 1) + T + 1;
            return e._createMesh(l, c, s);
        }, e.createQuad = function(t, n) {
            void 0 === t && (t = 1), void 0 === n && (n = 1);
            var i = je.getVertexDeclaration("POSITION,NORMAL,UV"), r = (i.vertexStride, t / 2), a = n / 2, o = new Float32Array([ -r, a, 0, 0, 0, 1, 0, 0, r, a, 0, 0, 0, 1, 1, 0, -r, -a, 0, 0, 0, 1, 0, 1, r, -a, 0, 0, 0, 1, 1, 1 ]), s = new Uint16Array([ 0, 1, 2, 3, 2, 1 ]);
            return e._createMesh(i, o, s);
        }, e.createSphere = function(t, n, i) {
            void 0 === t && (t = .5), void 0 === n && (n = 32), void 0 === i && (i = 32);
            var r = (n + 1) * (i + 1), a = 3 * n * (i + 1) * 2, o = new Uint16Array(a), s = je.getVertexDeclaration("POSITION,NORMAL,UV"), l = s.vertexStride / 4, h = new Float32Array(r * l), c = Math.PI / n, u = 2 * Math.PI / i, _ = 0;
            r = 0, a = 0;
            for (var d = 0; d < n + 1; d++) for (var f = Math.sin(d * c), m = Math.cos(d * c), p = 0; p < i + 1; p++) {
                var T = f * Math.sin(p * u + 1 * Math.PI / 2), E = f * Math.cos(p * u + 1 * Math.PI / 2);
                h[r + 0] = T * t, h[r + 1] = m * t, h[r + 2] = E * t, h[r + 3] = T, h[r + 4] = m, 
                h[r + 5] = E, h[r + 6] = p / i, h[r + 7] = d / n, r += l, d != n - 1 && (o[a++] = _ + (i + 1), 
                o[a++] = _, o[a++] = _ + 1, o[a++] = _ + i, o[a++] = _, o[a++] = _ + (i + 1), _++);
            }
            return e._createMesh(s, h, o);
        };
    }(), function() {
        function e(e, t) {
            this.min = null, this.max = null, this.min = e, this.max = t;
        }
        r(e, "laya.d3.math.BoundBox");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.getCorners = function(e) {
            e.length = 8;
            var t = this.min.elements, n = this.max.elements, i = t[0], r = t[1], a = t[2], o = n[0], s = n[1], l = n[2];
            e[0] = new dn(i, s, l), e[1] = new dn(o, s, l), e[2] = new dn(o, r, l), e[3] = new dn(i, r, l), 
            e[4] = new dn(i, s, a), e[5] = new dn(o, s, a), e[6] = new dn(o, r, a), e[7] = new dn(i, r, a);
        }, t.toDefault = function() {
            this.min.toDefault(), this.max.toDefault();
        }, t.cloneTo = function(e) {
            var t = e;
            this.min.cloneTo(t.min), this.max.cloneTo(t.max);
        }, t.clone = function() {
            var e = new this.constructor(new dn(), new dn());
            return this.cloneTo(e), e;
        }, e.createfromPoints = function(e, t) {
            if (null == e) throw new Error("points");
            var n = t.min, i = t.max, r = n.elements;
            r[0] = Number.MAX_VALUE, r[1] = Number.MAX_VALUE, r[2] = Number.MAX_VALUE;
            var a = i.elements;
            a[0] = -Number.MAX_VALUE, a[1] = -Number.MAX_VALUE, a[2] = -Number.MAX_VALUE;
            for (var o = 0, s = e.length; o < s; ++o) dn.min(n, e[o], n), dn.max(i, e[o], i);
        }, e.merge = function(e, t, n) {
            dn.min(e.min, t.min, n.min), dn.max(e.max, t.max, n.max);
        }, e;
    }()), ie = function() {
        function e() {
            this.textureID = -1;
        }
        return r(e, "laya.d3.shader.ShaderVariable"), e;
    }(), re = (function() {
        function e() {
            this._vertices = null, this._vertexBuffer = null, this._text = null, this._fontSize = 0, 
            this._color = null;
        }
        r(e, "laya.d3.text.TextMesh");
        var t = e.prototype;
        t._createVertexBuffer = function(e) {}, t._resizeVertexBuffer = function(e) {}, 
        t._addChar = function() {}, a(0, t, "text", function() {
            return this._text;
        }, function(e) {
            this._text = e;
        }), a(0, t, "fontSize", function() {
            return this._fontSize;
        }, function(e) {
            this._fontSize = e;
        }), a(0, t, "color", function() {
            return this._color;
        }, function(e) {
            this._color = e;
        }), e._indexBuffer = null;
    }(), function() {
        function e() {
            this._type = 0, this._separateAxes = !1, this._constant = NaN, this._constantSeparate = null, 
            this._gradient = null, this._gradientX = null, this._gradientY = null, this._gradientZ = null, 
            this._gradientW = null, this._constantMin = NaN, this._constantMax = NaN, this._constantMinSeparate = null, 
            this._constantMaxSeparate = null, this._gradientMin = null, this._gradientMax = null, 
            this._gradientXMin = null, this._gradientXMax = null, this._gradientYMin = null, 
            this._gradientYMax = null, this._gradientZMin = null, this._gradientZMax = null, 
            this._gradientWMin = null, this._gradientWMax = null;
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientAngularVelocity");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            t._type = this._type, t._separateAxes = this._separateAxes, t._constant = this._constant, 
            this._constantSeparate.cloneTo(t._constantSeparate), this._gradient.cloneTo(t._gradient), 
            this._gradientX.cloneTo(t._gradientX), this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), 
            t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(t._constantMinSeparate), 
            this._constantMaxSeparate.cloneTo(t._constantMaxSeparate), this._gradientMin.cloneTo(t._gradientMin), 
            this._gradientMax.cloneTo(t._gradientMax), this._gradientXMin.cloneTo(t._gradientXMin), 
            this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin), 
            this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin), 
            this._gradientZMax.cloneTo(t._gradientZMax);
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradientZ", function() {
            return this._gradientZ;
        }), a(0, t, "constant", function() {
            return this._constant;
        }), a(0, t, "gradient", function() {
            return this._gradient;
        }), a(0, t, "separateAxes", function() {
            return this._separateAxes;
        }), a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "constantSeparate", function() {
            return this._constantSeparate;
        }), a(0, t, "gradientX", function() {
            return this._gradientX;
        }), a(0, t, "gradientY", function() {
            return this._gradientY;
        }), a(0, t, "gradientW", function() {
            return this._gradientW;
        }), a(0, t, "gradientMin", function() {
            return this._gradientMin;
        }), a(0, t, "constantMin", function() {
            return this._constantMin;
        }), a(0, t, "gradientMax", function() {
            return this._gradientMax;
        }), a(0, t, "constantMax", function() {
            return this._constantMax;
        }), a(0, t, "gradientWMin", function() {
            return this._gradientWMin;
        }), a(0, t, "constantMinSeparate", function() {
            return this._constantMinSeparate;
        }), a(0, t, "constantMaxSeparate", function() {
            return this._constantMaxSeparate;
        }), a(0, t, "gradientXMin", function() {
            return this._gradientXMin;
        }), a(0, t, "gradientXMax", function() {
            return this._gradientXMax;
        }), a(0, t, "gradientWMax", function() {
            return this._gradientWMax;
        }), a(0, t, "gradientYMin", function() {
            return this._gradientYMin;
        }), a(0, t, "gradientYMax", function() {
            return this._gradientYMax;
        }), a(0, t, "gradientZMin", function() {
            return this._gradientZMin;
        }), a(0, t, "gradientZMax", function() {
            return this._gradientZMax;
        }), e.createByConstant = function(t) {
            var n = new e();
            return n._type = 0, n._separateAxes = !1, n._constant = t, n;
        }, e.createByConstantSeparate = function(t) {
            var n = new e();
            return n._type = 0, n._separateAxes = !0, n._constantSeparate = t, n;
        }, e.createByGradient = function(t) {
            var n = new e();
            return n._type = 1, n._separateAxes = !1, n._gradient = t, n;
        }, e.createByGradientSeparate = function(t, n, i) {
            var r = new e();
            return r._type = 1, r._separateAxes = !0, r._gradientX = t, r._gradientY = n, r._gradientZ = i, 
            r;
        }, e.createByRandomTwoConstant = function(t, n) {
            var i = new e();
            return i._type = 2, i._separateAxes = !1, i._constantMin = t, i._constantMax = n, 
            i;
        }, e.createByRandomTwoConstantSeparate = function(t, n) {
            var i = new e();
            return i._type = 2, i._separateAxes = !0, i._constantMinSeparate = t, i._constantMaxSeparate = n, 
            i;
        }, e.createByRandomTwoGradient = function(t, n) {
            var i = new e();
            return i._type = 3, i._separateAxes = !1, i._gradientMin = t, i._gradientMax = n, 
            i;
        }, e.createByRandomTwoGradientSeparate = function(t, n, i, r, a, o, s, l) {
            var h = new e();
            return h._type = 3, h._separateAxes = !0, h._gradientXMin = t, h._gradientXMax = n, 
            h._gradientYMin = i, h._gradientYMax = r, h._gradientZMin = a, h._gradientZMax = o, 
            h._gradientWMin = s, h._gradientWMax = l, h;
        }, e;
    }()), ae = function() {
        function e() {
            this._batchRenderElementPool = [];
        }
        r(e, "laya.d3.graphics.DynamicBatchManager");
        var t = e.prototype;
        return t._clear = function() {
            this._batchRenderElementPoolIndex = 0;
        }, t._getBatchRenderElementFromPool = function() {
            throw "StaticBatch:must override this function.";
        }, t.dispose = function() {}, e._registerManager = function(t) {
            e._managers.push(t);
        }, e._managers = [], e;
    }(), oe = function() {
        function e(e, t, n, i) {
            this._datas = null, this._w = 0, this._h = 0, this._minHeight = NaN, this._maxHeight = NaN, 
            this._datas = [], this._w = e, this._h = t, this._minHeight = n, this._maxHeight = i;
        }
        r(e, "laya.d3.core.HeightMap");
        var t = e.prototype;
        return t._inBounds = function(e, t) {
            return e >= 0 && e < this._h && t >= 0 && t < this._w;
        }, t.getHeight = function(e, t) {
            return this._inBounds(e, t) ? this._datas[e][t] : NaN;
        }, a(0, t, "width", function() {
            return this._w;
        }), a(0, t, "height", function() {
            return this._h;
        }), a(0, t, "maxHeight", function() {
            return this._maxHeight;
        }), a(0, t, "minHeight", function() {
            return this._minHeight;
        }), e.creatFromMesh = function(t, n, i, r) {
            for (var a = [], o = [], s = t.subMeshCount, l = 0; l < s; l++) {
                for (var h = t._getSubMesh(l), c = h._vertexBuffer, u = c.getData(), _ = [], d = 0; d < u.length; d += c.vertexDeclaration.vertexStride / 4) {
                    var f = new dn(u[d + 0], u[d + 1], u[d + 2]);
                    _.push(f);
                }
                a.push(_);
                var m = h._indexBuffer;
                o.push(m.getData());
            }
            var p = t.boundingBox, T = p.min.x, E = p.min.z, v = p.max.x, g = p.max.z, S = p.min.y, R = p.max.y, A = v - T, I = g - E, D = r.elements[0] = A / (n - 1), y = r.elements[1] = I / (i - 1), M = new e(n, i, S, R), C = e._tempRay, x = C.direction.elements;
            x[0] = 0, x[1] = -1, x[2] = 0;
            var O = R + .1;
            C.origin.elements[1] = O;
            for (var L = 0; L < i; L++) {
                var N = E + L * y;
                M._datas[L] = [];
                for (var V = 0; V < n; V++) {
                    var P = T + V * D, w = C.origin.elements;
                    w[0] = P, w[2] = N;
                    var F = e._getPosition(C, a, o);
                    M._datas[L][V] = F === Number.MAX_VALUE ? NaN : O - F;
                }
            }
            return M;
        }, e.createFromImage = function(t, n, i) {
            for (var r = t.width, a = t.height, o = new e(r, a, n, i), s = (i - n) / 254, l = t.getPixels(), h = 0, c = 0; c < a; c++) for (var u = o._datas[c] = [], _ = 0; _ < r; _++) {
                var d = l[h++], f = l[h++], m = l[h++], p = l[h++];
                u[_] = 255 == d && 255 == f && 255 == m && 255 == p ? NaN : (d + f + m) / 3 * s + n;
            }
            return o;
        }, e._getPosition = function(e, t, n) {
            for (var i = Number.MAX_VALUE, r = 0; r < t.length; r++) for (var a = t[r], o = n[r], s = 0; s < o.length; s += 3) {
                var l = a[o[s + 0]], h = a[o[s + 1]], c = a[o[s + 2]], u = ue.rayIntersectsTriangle(e, l, h, c);
                !isNaN(u) && u < i && (i = u);
            }
            return i;
        }, i(e, [ "_tempRay", function() {
            return this._tempRay = new Oe(new dn(), new dn());
        } ]), e;
    }(), se = function() {
        function e() {
            this.elements = null;
        }
        return r(e, "laya.d3.math.BaseVector"), e;
    }(), le = function() {
        function e() {
            this.value = 0;
        }
        r(e, "laya.d3.shader.DefineDatas");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.add = function(e) {
            this.value |= e;
        }, t.remove = function(e) {
            this.value &= ~e;
        }, t.has = function(e) {
            return (this.value & e) > 0;
        }, t.cloneTo = function(e) {
            e.value = this.value;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, e;
    }(), he = function() {
        function e() {}
        r(e, "laya.d3.core.pixelLine.PixelLineVertex");
        return a(0, e.prototype, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }), a(1, e, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }), i(e, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new G(28, [ new Re(0, "vector3", 0), new Re(12, "vector4", 1) ]);
        } ]), e;
    }(), ce = function() {
        function e(e) {
            this._size = null, this.enbale = !1, this._size = e;
        }
        r(e, "laya.d3.core.particleShuriKen.module.SizeOverLifetime");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            this._size.cloneTo(t._size), t.enbale = this.enbale;
        }, t.clone = function() {
            var e;
            switch (this._size.type) {
              case 0:
                e = this._size.separateAxes ? be.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone()) : be.createByGradient(this._size.gradient.clone());
                break;

              case 1:
                e = this._size.separateAxes ? be.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone()) : be.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);
                break;

              case 2:
                e = this._size.separateAxes ? be.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone()) : be.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());
            }
            var t = new this.constructor(e);
            return t.enbale = this.enbale, t;
        }, a(0, t, "size", function() {
            return this._size;
        }), e;
    }(), ue = function() {
        function e() {}
        return r(e, "laya.d3.utils.Picker"), e.calculateCursorRay = function(t, n, i, r, a, o) {
            var s = t.elements[0], l = t.elements[1], h = e._tempVector30, c = h.elements;
            c[0] = s, c[1] = l, c[2] = n.minDepth;
            var u = e._tempVector31, _ = u.elements;
            _[0] = s, _[1] = l, _[2] = n.maxDepth;
            var d = o.origin, f = e._tempVector32;
            n.unprojectFromWVP(h, i, r, a, d), n.unprojectFromWVP(u, i, r, a, f);
            var m = o.direction.elements;
            m[0] = f.x - d.x, m[1] = f.y - d.y, m[2] = f.z - d.z, dn.normalize(o.direction, o.direction);
        }, e.rayIntersectsTriangle = function(t, n, i, r) {
            var a = e._tempVector30, o = e._tempVector31;
            dn.subtract(i, n, a), dn.subtract(r, n, o);
            var s = e._tempVector32;
            dn.cross(t.direction, o, s);
            var l;
            if ((l = dn.dot(a, s)) > -Number.MIN_VALUE && l < Number.MIN_VALUE) return Number.NaN;
            var h = 1 / l, c = e._tempVector33;
            dn.subtract(t.origin, n, c);
            var u;
            if (u = dn.dot(c, s), (u *= h) < 0 || u > 1) return Number.NaN;
            var _ = e._tempVector34;
            dn.cross(c, a, _);
            var d;
            if (d = dn.dot(t.direction, _), (d *= h) < 0 || u + d > 1) return Number.NaN;
            var f;
            return f = dn.dot(o, _), (f *= h) < 0 ? Number.NaN : f;
        }, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempVector31", function() {
            return this._tempVector31 = new dn();
        }, "_tempVector32", function() {
            return this._tempVector32 = new dn();
        }, "_tempVector33", function() {
            return this._tempVector33 = new dn();
        }, "_tempVector34", function() {
            return this._tempVector34 = new dn();
        } ]), e;
    }(), _e = function() {
        function e() {
            this.flags = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60;
        }
        return r(e, "laya.d3.physics.PhysicsSettings"), e;
    }(), de = (function() {
        function e(e, t) {
            this.extents = null, this.transformation = null, this.extents = e, this.transformation = t;
        }
        r(e, "laya.d3.math.OrientedBoundBox");
        var t = e.prototype;
        t.getCorners = function(t) {
            var n = e._tempV30.elements, i = e._tempV31.elements, r = e._tempV32.elements, a = this.extents.elements;
            n[0] = a[0], n[1] = n[2] = 0, i[1] = a[1], i[0] = i[2] = 0, r[2] = a[2], r[0] = r[1] = 0, 
            dn.TransformNormal(e._tempV30, this.transformation, e._tempV30), dn.TransformNormal(e._tempV31, this.transformation, e._tempV31), 
            dn.TransformNormal(e._tempV32, this.transformation, e._tempV32);
            var o = e._tempV33;
            this.transformation.getTranslationVector(o), t.length = 8, dn.add(o, e._tempV30, e._tempV34), 
            dn.add(e._tempV34, e._tempV31, e._tempV34), dn.add(e._tempV34, e._tempV32, t[0]), 
            dn.add(o, e._tempV30, e._tempV34), dn.add(e._tempV34, e._tempV31, e._tempV34), dn.subtract(e._tempV34, e._tempV32, t[1]), 
            dn.subtract(o, e._tempV30, e._tempV34), dn.add(e._tempV34, e._tempV31, e._tempV34), 
            dn.subtract(e._tempV34, e._tempV32, t[2]), dn.subtract(o, e._tempV30, e._tempV34), 
            dn.add(e._tempV34, e._tempV31, e._tempV34), dn.add(e._tempV34, e._tempV32, t[3]), 
            dn.add(o, e._tempV30, e._tempV34), dn.subtract(e._tempV34, e._tempV31, e._tempV34), 
            dn.add(e._tempV34, e._tempV32, t[4]), dn.add(o, e._tempV30, e._tempV34), dn.subtract(e._tempV34, e._tempV31, e._tempV34), 
            dn.subtract(e._tempV34, e._tempV32, t[5]), dn.subtract(o, e._tempV30, e._tempV34), 
            dn.subtract(e._tempV34, e._tempV31, e._tempV34), dn.subtract(e._tempV34, e._tempV32, t[6]), 
            dn.subtract(o, e._tempV30, e._tempV34), dn.subtract(e._tempV34, e._tempV31, e._tempV34), 
            dn.add(e._tempV34, e._tempV32, t[7]);
        }, t.transform = function(e) {
            ut.multiply(this.transformation, e, this.transformation);
        }, t.scale = function(e) {
            dn.multiply(this.extents, e, this.extents);
        }, t.translate = function(t) {
            this.transformation.getTranslationVector(e._tempV30), dn.add(e._tempV30, t, e._tempV31), 
            this.transformation.setTranslationVector(e._tempV31);
        }, t.Size = function(e) {
            dn.scale(this.extents, 2, e);
        }, t.getSize = function(t) {
            var n = this.extents.elements;
            e._tempV30.x = n[0], e._tempV31.y = n[1], e._tempV32.z = n[2], dn.TransformNormal(e._tempV30, this.transformation, e._tempV30), 
            dn.TransformNormal(e._tempV31, this.transformation, e._tempV31), dn.TransformNormal(e._tempV31, this.transformation, e._tempV32);
            var i = t.elements;
            i[0] = dn.scalarLength(e._tempV30), i[1] = dn.scalarLength(e._tempV31), i[2] = dn.scalarLength(e._tempV32);
        }, t.getSizeSquared = function(t) {
            var n = this.extents.elements;
            e._tempV30.x = n[0], e._tempV31.y = n[1], e._tempV32.z = n[2], dn.TransformNormal(e._tempV30, this.transformation, e._tempV30), 
            dn.TransformNormal(e._tempV31, this.transformation, e._tempV31), dn.TransformNormal(e._tempV31, this.transformation, e._tempV32);
            var i = t.elements;
            i[0] = dn.scalarLengthSquared(e._tempV30), i[1] = dn.scalarLengthSquared(e._tempV31), 
            i[2] = dn.scalarLengthSquared(e._tempV32);
        }, t.getCenter = function(e) {
            this.transformation.getTranslationVector(e);
        }, t.containsPoint = function(t) {
            var n = this.extents.elements, i = n[0], r = n[1], a = n[2];
            this.transformation.invert(e._tempM0), dn.transformCoordinate(t, e._tempM0, e._tempV30);
            var o = e._tempV30.elements, s = Math.abs(o[0]), l = Math.abs(o[1]), h = Math.abs(o[2]);
            return Tt.nearEqual(s, i) && Tt.nearEqual(l, r) && Tt.nearEqual(h, a) ? 2 : s < i && l < r && h < a ? 1 : 0;
        }, t.containsPoints = function(t) {
            var n = this.extents.elements, i = n[0], r = n[1], a = n[2];
            this.transformation.invert(e._tempM0);
            for (var o = !0, s = !1, l = 0; l < t.length; l++) {
                dn.transformCoordinate(t[l], e._tempM0, e._tempV30);
                var h = e._tempV30.elements, c = Math.abs(h[0]), u = Math.abs(h[1]), _ = Math.abs(h[2]);
                Tt.nearEqual(c, i) && Tt.nearEqual(u, r) && Tt.nearEqual(_, a) && (s = !0), c < i && u < r && _ < a ? s = !0 : o = !1;
            }
            return o ? 1 : s ? 2 : 0;
        }, t.containsSphere = function(t, n) {
            void 0 === n && (n = !1);
            var i = this.extents.elements, r = i[0], a = i[1], o = i[2], s = t.radius;
            this.transformation.invert(e._tempM0), dn.transformCoordinate(t.center, e._tempM0, e._tempV30);
            var l = NaN;
            n ? l = s : (dn.scale(dn.UnitX, s, e._tempV31), dn.TransformNormal(e._tempV31, e._tempM0, e._tempV31), 
            l = dn.scalarLength(e._tempV31)), dn.scale(this.extents, -1, e._tempV32), dn.Clamp(e._tempV30, e._tempV32, this.extents, e._tempV33);
            if (dn.distanceSquared(e._tempV30, e._tempV33) > l * l) return 0;
            var h = e._tempV30.elements, c = h[0], u = h[1], _ = h[2], d = e._tempV32.elements, f = d[0], m = d[1], p = d[2];
            return f + l <= c && c <= r - l && r - f > l && m + l <= u && u <= a - l && a - m > l && p + l <= _ && _ <= o - l && o - p > l ? 1 : 2;
        }, t.containsOrientedBoundBox = function(t) {
            var n = 0, i = 0;
            t.getCorners(e._corners);
            var r = this.containsPoints(e._corners);
            if (0 != r) return r;
            var a = this.extents.elements;
            t.extents.cloneTo(e._tempV35);
            var o = e._tempV35.elements;
            e._getRows(this.transformation, e._rows1), e._getRows(t.transformation, e._rows2);
            var s = NaN, l = NaN, h = NaN;
            for (n = 0; n < 4; n++) for (i = 0; i < 4; i++) 3 == n || 3 == i ? (e._tempM0.setElementByRowColumn(n, i, 0), 
            e._tempM1.setElementByRowColumn(n, i, 0)) : (h = dn.dot(e._rows1[n], e._rows2[i]), 
            e._tempM0.setElementByRowColumn(n, i, h), e._tempM1.setElementByRowColumn(n, i, Math.abs(h)));
            t.getCenter(e._tempV34), this.getCenter(e._tempV36), dn.subtract(e._tempV34, e._tempV36, e._tempV30);
            var c = e._tempV31.elements;
            c[0] = dn.dot(e._tempV30, e._rows1[0]), c[1] = dn.dot(e._tempV30, e._rows1[1]), 
            c[2] = dn.dot(e._tempV30, e._rows1[2]);
            var u = e._tempV32.elements, _ = e._tempV33.elements;
            for (n = 0; n < 3; n++) if (u[0] = e._tempM1.getElementByRowColumn(n, 0), u[1] = e._tempM1.getElementByRowColumn(n, 1), 
            u[2] = e._tempM1.getElementByRowColumn(n, 2), s = a[n], l = dn.dot(e._tempV35, e._tempV32), 
            Math.abs(c[n]) > s + l) return 0;
            for (i = 0; i < 3; i++) if (u[0] = e._tempM1.getElementByRowColumn(0, i), u[1] = e._tempM1.getElementByRowColumn(1, i), 
            u[2] = e._tempM1.getElementByRowColumn(2, i), _[0] = e._tempM0.getElementByRowColumn(0, i), 
            _[1] = e._tempM0.getElementByRowColumn(1, i), _[2] = e._tempM0.getElementByRowColumn(2, i), 
            s = dn.dot(this.extents, e._tempV32), l = o[i], Math.abs(dn.dot(e._tempV31, e._tempV33)) > s + l) return 0;
            for (n = 0; n < 3; n++) for (i = 0; i < 3; i++) {
                var d = (n + 1) % 3, f = (n + 2) % 3, m = (i + 1) % 3, p = (i + 2) % 3;
                if (s = a[d] * e._tempM1.getElementByRowColumn(f, i) + a[f] * e._tempM1.getElementByRowColumn(d, i), 
                l = o[m] * e._tempM1.getElementByRowColumn(n, p) + o[p] * e._tempM1.getElementByRowColumn(n, m), 
                Math.abs(c[f] * e._tempM0.getElementByRowColumn(d, i) - c[d] * e._tempM0.getElementByRowColumn(f, i)) > s + l) return 0;
            }
            return 2;
        }, t.containsLine = function(t, n) {
            e._corners[0] = t, e._corners[1] = n;
            var i = this.containsPoints(e._corners);
            if (0 != i) return i;
            var r = this.extents.elements, a = r[0], o = r[1], s = r[2];
            this.transformation.invert(e._tempM0), dn.transformCoordinate(t, e._tempM0, e._tempV30), 
            dn.transformCoordinate(n, e._tempM0, e._tempV31), dn.add(e._tempV30, e._tempV31, e._tempV32), 
            dn.scale(e._tempV32, .5, e._tempV32), dn.subtract(e._tempV30, e._tempV32, e._tempV33);
            var l = e._tempV33.elements, h = l[0], c = l[1], u = l[2], _ = e._tempV34.elements, d = _[0] = Math.abs(l[0]), f = _[1] = Math.abs(l[1]), m = _[2] = Math.abs(l[2]), p = e._tempV32.elements, T = p[0], E = p[1], v = p[2];
            return Math.abs(T) > a + d ? 0 : Math.abs(E) > o + f ? 0 : Math.abs(v) > s + m ? 0 : Math.abs(E * u - v * c) > o * m + s * f ? 0 : Math.abs(T * u - v * h) > a * m + s * d ? 0 : Math.abs(T * c - E * h) > a * f + o * d ? 0 : 2;
        }, t.containsBoundBox = function(t) {
            var n = 0, i = 0, r = t.min, a = t.max;
            t.getCorners(e._corners);
            var o = this.containsPoints(e._corners);
            if (0 != o) return o;
            dn.subtract(a, r, e._tempV30), dn.scale(e._tempV30, .5, e._tempV30), dn.add(r, e._tempV30, e._tempV30), 
            dn.subtract(a, e._tempV30, e._tempV31);
            var s = this.extents.elements, l = e._tempV31.elements;
            e._getRows(this.transformation, e._rows1), this.transformation.invert(e._tempM0);
            var h = NaN, c = NaN;
            for (n = 0; n < 3; n++) for (i = 0; i < 3; i++) e._tempM1.setElementByRowColumn(n, i, Math.abs(e._tempM0.getElementByRowColumn(n, i)));
            this.getCenter(e._tempV35), dn.subtract(e._tempV30, e._tempV35, e._tempV32);
            var u = e._tempV31.elements;
            u[0] = dn.dot(e._tempV32, e._rows1[0]), u[1] = dn.dot(e._tempV32, e._rows1[1]), 
            u[2] = dn.dot(e._tempV32, e._rows1[2]);
            var _ = e._tempV33.elements, d = e._tempV34.elements;
            for (n = 0; n < 3; n++) if (_[0] = e._tempM1.getElementByRowColumn(n, 0), _[1] = e._tempM1.getElementByRowColumn(n, 1), 
            _[2] = e._tempM1.getElementByRowColumn(n, 2), h = s[n], c = dn.dot(e._tempV31, e._tempV33), 
            Math.abs(u[n]) > h + c) return 0;
            for (i = 0; i < 3; i++) if (_[0] = e._tempM1.getElementByRowColumn(0, i), _[1] = e._tempM1.getElementByRowColumn(1, i), 
            _[2] = e._tempM1.getElementByRowColumn(2, i), d[0] = e._tempM0.getElementByRowColumn(0, i), 
            d[1] = e._tempM0.getElementByRowColumn(1, i), d[2] = e._tempM0.getElementByRowColumn(2, i), 
            h = dn.dot(this.extents, e._tempV33), c = l[i], Math.abs(dn.dot(e._tempV31, e._tempV34)) > h + c) return 0;
            for (n = 0; n < 3; n++) for (i = 0; i < 3; i++) {
                var f = (n + 1) % 3, m = (n + 2) % 3, p = (i + 1) % 3, T = (i + 2) % 3;
                if (h = s[f] * e._tempM1.getElementByRowColumn(m, i) + s[m] * e._tempM1.getElementByRowColumn(f, i), 
                c = l[p] * e._tempM1.getElementByRowColumn(n, T) + l[T] * e._tempM1.getElementByRowColumn(n, p), 
                Math.abs(u[m] * e._tempM0.getElementByRowColumn(f, i) - u[f] * e._tempM0.getElementByRowColumn(m, i)) > h + c) return 0;
            }
            return 2;
        }, t.intersectsRay = function(t, n) {
            dn.scale(this.extents, -1, e._tempV30), this.transformation.invert(e._tempM0), dn.TransformNormal(t.direction, e._tempM0, e._ray.direction), 
            dn.transformCoordinate(t.origin, e._tempM0, e._ray.origin), e._boxBound1.min = e._tempV30, 
            e._boxBound1.max = this.extents;
            var i = Ne.intersectsRayAndBoxRP(e._ray, e._boxBound1, n);
            return -1 !== i && dn.transformCoordinate(n, this.transformation, n), i;
        }, t._getLocalCorners = function(t) {
            t.length = 8;
            var n = this.extents.elements;
            e._tempV30.x = n[0], e._tempV31.y = n[1], e._tempV32.z = n[2], dn.add(e._tempV30, e._tempV31, e._tempV33), 
            dn.add(e._tempV33, e._tempV32, t[0]), dn.add(e._tempV30, e._tempV31, e._tempV33), 
            dn.subtract(e._tempV33, e._tempV32, t[1]), dn.subtract(e._tempV31, e._tempV30, e._tempV33), 
            dn.subtract(e._tempV33, e._tempV30, t[2]), dn.subtract(e._tempV31, e._tempV30, e._tempV33), 
            dn.add(e._tempV33, e._tempV32, t[3]), dn.subtract(e._tempV30, e._tempV31, e._tempV33), 
            dn.add(e._tempV33, e._tempV32, t[4]), dn.subtract(e._tempV30, e._tempV31, e._tempV33), 
            dn.subtract(e._tempV33, e._tempV32, t[5]), dn.scale(t[0], -1, t[6]), dn.subtract(e._tempV32, e._tempV30, e._tempV33), 
            dn.subtract(e._tempV33, e._tempV31, t[7]);
        }, t.equals = function(e) {
            return this.extents == e.extents && this.transformation == e.transformation;
        }, t.cloneTo = function(e) {
            var t = e;
            this.extents.cloneTo(t.extents), this.transformation.cloneTo(t.transformation);
        }, e.createByBoundBox = function(t, n) {
            var i = t.min, r = t.max;
            dn.subtract(r, i, e._tempV30), dn.scale(e._tempV30, .5, e._tempV30), dn.add(i, e._tempV30, e._tempV31), 
            dn.subtract(r, e._tempV31, e._tempV32), ut.translation(e._tempV31, e._tempM0);
            var a = e._tempV32.clone(), o = e._tempM0.clone();
            n.extents = a, n.transformation = o;
        }, e.createByMinAndMaxVertex = function(t, n) {
            dn.subtract(n, t, e._tempV30), dn.scale(e._tempV30, .5, e._tempV30), dn.add(t, e._tempV30, e._tempV31), 
            dn.subtract(n, e._tempV31, e._tempV32), ut.translation(e._tempV31, e._tempM0);
            return new e(e._tempV32, e._tempM0);
        }, e._getRows = function(e, t) {
            t.length = 3;
            var n = e.elements, i = t[0].elements;
            i[0] = n[0], i[1] = n[1], i[2] = n[2];
            var r = t[1].elements;
            r[0] = n[4], r[1] = n[5], r[2] = n[6];
            var a = t[2].elements;
            a[0] = n[8], a[1] = n[9], a[2] = n[10];
        }, e.getObbtoObbMatrix4x4 = function(t, n, i, r) {
            var a = t.transformation, o = n.transformation;
            if (i) {
                e._getRows(a, e._rows1), e._getRows(o, e._rows2);
                for (var s = 0; s < 3; s++) for (var l = 0; l < 3; l++) r.setElementByRowColumn(s, l, dn.dot(e._rows2[s], e._rows1[l]));
                n.getCenter(e._tempV30), t.getCenter(e._tempV31), dn.subtract(e._tempV30, e._tempV31, e._tempV32);
                var h = r.elements;
                h[12] = dn.dot(e._tempV32, e._rows1[0]), h[13] = dn.dot(e._tempV32, e._rows1[1]), 
                h[14] = dn.dot(e._tempV32, e._rows1[2]), h[15] = 1;
            } else a.invert(e._tempM0), ut.multiply(o, e._tempM0, r);
        }, e.merge = function(t, n, i) {
            var r = t.extents, a = t.transformation;
            e.getObbtoObbMatrix4x4(t, n, i, e._tempM0), n._getLocalCorners(e._corners), dn.transformCoordinate(e._corners[0], e._tempM0, e._corners[0]), 
            dn.transformCoordinate(e._corners[1], e._tempM0, e._corners[1]), dn.transformCoordinate(e._corners[2], e._tempM0, e._corners[2]), 
            dn.transformCoordinate(e._corners[3], e._tempM0, e._corners[3]), dn.transformCoordinate(e._corners[4], e._tempM0, e._corners[4]), 
            dn.transformCoordinate(e._corners[5], e._tempM0, e._corners[5]), dn.transformCoordinate(e._corners[6], e._tempM0, e._corners[6]), 
            dn.transformCoordinate(e._corners[7], e._tempM0, e._corners[7]), dn.scale(r, -1, e._boxBound1.min), 
            r.cloneTo(e._boxBound1.max), ne.createfromPoints(e._corners, e._boxBound2), ne.merge(e._boxBound2, e._boxBound1, e._boxBound3);
            var o = e._boxBound3.min, s = e._boxBound3.max;
            dn.subtract(s, o, e._tempV30), dn.scale(e._tempV30, .5, e._tempV30), dn.add(o, e._tempV30, e._tempV32), 
            dn.subtract(s, e._tempV32, r), dn.transformCoordinate(e._tempV32, a, e._tempV33);
        }, i(e, [ "_tempV30", function() {
            return this._tempV30 = new dn();
        }, "_tempV31", function() {
            return this._tempV31 = new dn();
        }, "_tempV32", function() {
            return this._tempV32 = new dn();
        }, "_tempV33", function() {
            return this._tempV33 = new dn();
        }, "_tempV34", function() {
            return this._tempV34 = new dn();
        }, "_tempV35", function() {
            return this._tempV35 = new dn();
        }, "_tempV36", function() {
            return this._tempV36 = new dn();
        }, "_tempM0", function() {
            return this._tempM0 = new ut();
        }, "_tempM1", function() {
            return this._tempM1 = new ut();
        }, "_corners", function() {
            return this._corners = [ new dn(), new dn(), new dn(), new dn(), new dn(), new dn(), new dn(), new dn() ];
        }, "_rows1", function() {
            return this._rows1 = [ new dn(), new dn(), new dn() ];
        }, "_rows2", function() {
            return this._rows2 = [ new dn(), new dn(), new dn() ];
        }, "_ray", function() {
            return this._ray = new Oe(new dn(), new dn());
        }, "_boxBound1", function() {
            return this._boxBound1 = new ne(new dn(), new dn());
        }, "_boxBound2", function() {
            return this._boxBound2 = new ne(new dn(), new dn());
        }, "_boxBound3", function() {
            return this._boxBound3 = new ne(new dn(), new dn());
        } ]);
    }(), function() {
        function e(e, t, n, i) {
            this._attributeMap = null, this._uniformMap = null, this._publicDefines = null, 
            this._publicDefinesMap = null, this._spriteDefines = null, this._spriteDefinesMap = null, 
            this._materialDefines = null, this._materialDefinesMap = null, this._owner = null, 
            this._flags = {}, this._passes = [], this._publicDefines = [], this._publicDefinesMap = {}, 
            this._spriteDefines = [], this._spriteDefinesMap = {}, this._materialDefines = [], 
            this._materialDefinesMap = {}, this._addDefines(this._publicDefines, this._publicDefinesMap, $e._globleDefines), 
            n && this._addDefines(this._spriteDefines, this._spriteDefinesMap, n.defines), i && this._addDefines(this._materialDefines, this._materialDefinesMap, i.defines), 
            this._attributeMap = e, this._uniformMap = t;
        }
        r(e, "laya.d3.shader.SubShader");
        var t = e.prototype;
        return t._addDefines = function(e, t, n) {
            for (var i in n) {
                var r = n[i], a = parseInt(i);
                e[a] = r, t[r] = a;
            }
        }, t.getMaterialDefineByName = function(e) {
            return this._materialDefinesMap[e];
        }, t.setFlag = function(e, t) {
            t ? this._flags[e] = t : delete this._flags[e];
        }, t.getFlag = function(e) {
            return this._flags[e];
        }, t.addShaderPass = function(e, t) {
            this._passes.push(new Ft(this, e, t));
        }, e;
    }()), fe = function() {
        function e() {}
        return r(e, "laya.d3.utils.Physics3DUtils"), e.setColliderCollision = function(e, t, n) {}, 
        e.getIColliderCollision = function(e, t) {
            return !1;
        }, e.COLLISIONFILTERGROUP_DEFAULTFILTER = 1, e.COLLISIONFILTERGROUP_STATICFILTER = 2, 
        e.COLLISIONFILTERGROUP_KINEMATICFILTER = 4, e.COLLISIONFILTERGROUP_DEBRISFILTER = 8, 
        e.COLLISIONFILTERGROUP_SENSORTRIGGER = 16, e.COLLISIONFILTERGROUP_CHARACTERFILTER = 32, 
        e.COLLISIONFILTERGROUP_CUSTOMFILTER1 = 64, e.COLLISIONFILTERGROUP_CUSTOMFILTER2 = 128, 
        e.COLLISIONFILTERGROUP_CUSTOMFILTER3 = 256, e.COLLISIONFILTERGROUP_CUSTOMFILTER4 = 512, 
        e.COLLISIONFILTERGROUP_CUSTOMFILTER5 = 1024, e.COLLISIONFILTERGROUP_CUSTOMFILTER6 = 2048, 
        e.COLLISIONFILTERGROUP_CUSTOMFILTER7 = 4096, e.COLLISIONFILTERGROUP_CUSTOMFILTER8 = 8192, 
        e.COLLISIONFILTERGROUP_CUSTOMFILTER9 = 16384, e.COLLISIONFILTERGROUP_CUSTOMFILTER10 = 32768, 
        e.COLLISIONFILTERGROUP_ALLFILTER = -1, i(e, [ "gravity", function() {
            return this.gravity = new dn(0, -9.81, 0);
        } ]), e;
    }(), me = function() {
        function e() {
            this._scene = null, this._eventList = [], this._multiTouchEnabled = !0, this._mouseTouch = new Rt(), 
            this._touchPool = [], this._touches = new gn();
        }
        r(e, "laya.d3.Input3D");
        var t = e.prototype;
        return t.__init__ = function(e, t) {
            this._scene = t;
            var n = this._eventList;
            e.oncontextmenu = function(e) {
                return !1;
            }, e.addEventListener("mousedown", function(e) {
                e.preventDefault(), n.push(e);
            }), e.addEventListener("mouseup", function(e) {
                e.preventDefault(), n.push(e);
            }, !0), e.addEventListener("mousemove", function(e) {
                e.preventDefault(), n.push(e);
            }, !0), e.addEventListener("touchstart", function(e) {
                e.preventDefault(), n.push(e);
            }), e.addEventListener("touchend", function(e) {
                e.preventDefault(), n.push(e);
            }, !0), e.addEventListener("touchmove", function(e) {
                e.preventDefault(), n.push(e);
            }, !0), e.addEventListener("touchcancel", function(e) {
                n.push(e);
            }, !0);
        }, t.touchCount = function() {
            return this._touches.length;
        }, t._getTouch = function(e) {
            var t = this._touchPool[e];
            return t || (t = new Ze(), this._touchPool[e] = t, t._identifier = e), t;
        }, t._mouseTouchDown = function() {
            var e = this._mouseTouch, t = e.sprite;
            if (e._pressedSprite = t, e._pressedLoopCount = L.loopCount, t) {
                var n = t._scripts;
                if (n) for (var i = 0, r = n.length; i < r; i++) n[i].onMouseDown();
            }
        }, t._mouseTouchUp = function() {
            var e = 0, t = 0, n = this._mouseTouch, i = n._pressedSprite;
            n._pressedSprite = null, n._pressedLoopCount = -1;
            var r = n.sprite;
            if (r && r === i) {
                var a = r._scripts;
                if (a) for (e = 0, t = a.length; e < t; e++) a[e].onMouseClick();
            }
            if (i) {
                var o = i._scripts;
                if (o) for (e = 0, t = o.length; e < t; e++) o[e].onMouseUp();
            }
        }, t._mouseTouchRayCast = function(t) {
            var n = e._tempHitResult0, i = e._tempVector20, r = e._tempRay0;
            n.succeeded = !1;
            var a = this._mouseTouch.mousePositionX, o = this._mouseTouch.mousePositionY, s = i.elements;
            s[0] = a, s[1] = o;
            for (var l = t.length - 1; l >= 0; l--) {
                var h = t[l], c = h.viewport;
                if (i.x >= c.x && i.y >= c.y && i.x <= c.width && i.y <= c.height) {
                    h.viewportPointToRay(i, r);
                    if (this._scene._physicsSimulation.rayCast(r, n) || 0 === h.clearFlag || 1 === h.clearFlag) break;
                }
            }
            var u = this._mouseTouch, _ = u.sprite;
            if (n.succeeded) {
                var d = n.collider.owner;
                u.sprite = d;
                var f = d._scripts;
                if (_ !== d && f) for (var m = 0, p = f.length; m < p; m++) f[m].onMouseEnter();
            } else u.sprite = null;
            if (_ && _ !== d) {
                var T = _._scripts;
                if (T) for (m = 0, p = T.length; m < p; m++) T[m].onMouseOut();
            }
        }, t._changeTouches = function(t, i) {
            for (var r = 0, a = 0, o = this._touches.length, s = 0, l = t.length; s < l; s++) {
                var h = t[s], c = h.identifier;
                if (this._multiTouchEnabled || 0 === c) {
                    var u = this._getTouch(c), _ = u._position.elements, d = e._tempPoint;
                    d.setTo(h.pageX, h.pageY), n.stage._canvasTransform.invertTransformPoint(d);
                    var f = d.x, m = d.y;
                    switch (i) {
                      case 0:
                        this._touches.add(u), r += f, a += m;
                        break;

                      case 1:
                        this._touches.remove(u), r -= f, a -= m;
                        break;

                      case 2:
                        r = f - _[0], a = m - _[1];
                    }
                    _[0] = f, _[1] = m;
                }
            }
            var p = this._touches.length;
            0 === p ? (this._mouseTouch.mousePositionX = 0, this._mouseTouch.mousePositionY = 0) : (this._mouseTouch.mousePositionX = (this._mouseTouch.mousePositionX * o + r) / p, 
            this._mouseTouch.mousePositionY = (this._mouseTouch.mousePositionY * o + a) / p);
        }, t._update = function() {
            var t = 0, i = 0, r = 0, a = 0;
            i = this._eventList.length;
            var o = this._scene._cameraPool;
            if (i > 0) {
                for (t = 0; t < i; t++) {
                    var s = this._eventList[t];
                    switch (s.type) {
                      case "mousedown":
                        this._mouseTouchDown();
                        break;

                      case "mouseup":
                        this._mouseTouchUp();
                        break;

                      case "mousemove":
                        var l = e._tempPoint;
                        l.setTo(s.pageX, s.pageY), n.stage._canvasTransform.invertTransformPoint(l), this._mouseTouch.mousePositionX = l.x, 
                        this._mouseTouch.mousePositionY = l.y, this._mouseTouchRayCast(o);
                        break;

                      case "touchstart":
                        var h = this._touches.length;
                        this._changeTouches(s.changedTouches, 0), this._mouseTouchRayCast(o), 0 === h && this._mouseTouchDown();
                        break;

                      case "touchend":
                      case "touchcancel":
                        this._changeTouches(s.changedTouches, 1), 0 === this._touches.length && this._mouseTouchUp();
                        break;

                      case "touchmove":
                        this._changeTouches(s.changedTouches, 2), this._mouseTouchRayCast(o);
                        break;

                      default:
                        throw "Input3D:unkonwn event type.";
                    }
                }
                this._eventList.length = 0;
            }
            var c = this._mouseTouch, u = c._pressedSprite;
            if (u && L.loopCount > c._pressedLoopCount) {
                var _ = u._scripts;
                if (_) for (r = 0, a = _.length; r < a; r++) _[r].onMouseDrag();
            }
            var d = c.sprite;
            if (d) {
                var f = d._scripts;
                if (f) for (r = 0, a = f.length; r < a; r++) f[r].onMouseOver();
            }
        }, t.getTouch = function(e) {
            return e < this._touches.length ? this._touches.elements[e] : null;
        }, a(0, t, "multiTouchEnabled", function() {
            return this._multiTouchEnabled;
        }, function(e) {
            this._multiTouchEnabled = e;
        }), i(e, [ "_tempPoint", function() {
            return this._tempPoint = new I();
        }, "_tempVector20", function() {
            return this._tempVector20 = new fn();
        }, "_tempRay0", function() {
            return this._tempRay0 = new Oe(new dn(), new dn());
        }, "_tempHitResult0", function() {
            return this._tempHitResult0 = new ge();
        } ]), e;
    }(), pe = function() {
        function e(e, t) {
            this._mode = 0, this._maxColorRGBKeysCount = 0, this._maxColorAlphaKeysCount = 0, 
            this._colorRGBKeysCount = 0, this._colorAlphaKeysCount = 0, this._alphaElements = null, 
            this._rgbElements = null, this._maxColorRGBKeysCount = e, this._maxColorAlphaKeysCount = t, 
            this._rgbElements = new Float32Array(4 * e), this._alphaElements = new Float32Array(2 * t);
        }
        r(e, "laya.d3.core.Gradient");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.addColorRGB = function(e, t) {
            if (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {
                var n = 4 * this._colorRGBKeysCount;
                this._rgbElements[n] = e, this._rgbElements[n + 1] = t.r, this._rgbElements[n + 2] = t.g, 
                this._rgbElements[n + 3] = t.b, this._colorRGBKeysCount++;
            } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorRGBKeysCount);
        }, t.addColorAlpha = function(e, t) {
            if (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {
                var n = 2 * this._colorAlphaKeysCount;
                this._alphaElements[n] = e, this._alphaElements[n + 1] = t, this._colorAlphaKeysCount++;
            } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorAlphaKeysCount);
        }, t.updateColorRGB = function(e, t, n) {
            if (e < this._colorRGBKeysCount) {
                var i = 4 * e;
                this._rgbElements[i] = t, this._rgbElements[i + 1] = n.r, this._rgbElements[i + 2] = n.g, 
                this._rgbElements[i + 3] = n.b;
            } else console.warn("Gradient:warning:index must lessEqual than colorRGBKeysCount:" + this._colorRGBKeysCount);
        }, t.updateColorAlpha = function(e, t, n) {
            if (e < this._colorAlphaKeysCount) {
                var i = 2 * e;
                this._alphaElements[i] = t, this._alphaElements[i + 1] = n;
            } else console.warn("Gradient:warning:index must lessEqual than colorAlphaKeysCount:" + this._colorAlphaKeysCount);
        }, t.cloneTo = function(e) {
            var t = e, n = 0, i = 0;
            t._colorAlphaKeysCount = this._colorAlphaKeysCount;
            var r = t._alphaElements;
            for (r.length = this._alphaElements.length, n = 0, i = this._alphaElements.length; n < i; n++) r[n] = this._alphaElements[n];
            t._colorRGBKeysCount = this._colorRGBKeysCount;
            var a = t._rgbElements;
            for (a.length = this._rgbElements.length, n = 0, i = this._rgbElements.length; n < i; n++) a[n] = this._rgbElements[n];
        }, t.clone = function() {
            var t = new e(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);
            return this.cloneTo(t), t;
        }, a(0, t, "colorRGBKeysCount", function() {
            return this._colorRGBKeysCount / 4;
        }), a(0, t, "mode", function() {
            return this._mode;
        }, function(e) {
            this._mode = e;
        }), a(0, t, "colorAlphaKeysCount", function() {
            return this._colorAlphaKeysCount / 2;
        }), a(0, t, "maxColorRGBKeysCount", function() {
            return this._maxColorRGBKeysCount;
        }), a(0, t, "maxColorAlphaKeysCount", function() {
            return this._maxColorAlphaKeysCount;
        }), e;
    }(), Te = function() {
        function e() {
            this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = null;
        }
        r(e, "laya.d3.resource.models.SkyMesh");
        return e.prototype._render = function(e) {}, e;
    }(), Ee = function() {
        function e() {
            this._lastUpdateFrame = -2147483648, this._updateFrame = -2147483648, this._isTrigger = !1, 
            this.contacts = [];
        }
        r(e, "laya.d3.physics.Collision");
        return e.prototype._setUpdateFrame = function(e) {
            this._lastUpdateFrame = this._updateFrame, this._updateFrame = e;
        }, e;
    }(), ve = function() {
        function e() {
            this.indexInList = -1, this.referenceCount = 0, this.updateMark = -1, this.type = -1, 
            this.fullPath = null, this.propertyOwner = null, this.property = null, this.defaultValue = null, 
            this.crossFixedValue = null;
        }
        r(e, "laya.d3.component.KeyframeNodeOwner");
        return e.prototype.saveCrossFixedValue = function() {
            var e = this.propertyOwner;
            if (e) switch (this.type) {
              case 0:
                for (var t = this.property, n = t.length - 1, i = 0; i < n && (e = e[t[i]]); i++) ;
                this.crossFixedValue = e[t[n]];
                break;

              case 1:
                var r = e.localPosition.elements;
                this.crossFixedValue || (this.crossFixedValue = new Float32Array(3)), this.crossFixedValue[0] = r[0], 
                this.crossFixedValue[1] = r[1], this.crossFixedValue[2] = r[2];
                break;

              case 2:
                var a = e.localRotation.elements;
                this.crossFixedValue || (this.crossFixedValue = new Float32Array(4)), this.crossFixedValue[0] = a[0], 
                this.crossFixedValue[1] = a[1], this.crossFixedValue[2] = a[2], this.crossFixedValue[3] = a[3];
                break;

              case 3:
                var o = e.localScale.elements;
                this.crossFixedValue || (this.crossFixedValue = new Float32Array(3)), this.crossFixedValue[0] = o[0], 
                this.crossFixedValue[1] = o[1], this.crossFixedValue[2] = o[2];
                break;

              case 4:
                var s = e.localRotationEuler.elements;
                this.crossFixedValue || (this.crossFixedValue = new Float32Array(3)), this.crossFixedValue[0] = s[0], 
                this.crossFixedValue[1] = s[1], this.crossFixedValue[2] = s[2];
                break;

              default:
                throw "Animator:unknown type.";
            }
        }, e;
    }(), ge = (function() {
        function e() {}
        r(e, "laya.d3.core.scene.SceneManager");
    }(), function() {
        function e() {
            this.succeeded = !1, this.collider = null, this.hitFraction = 0, this.point = new dn(), 
            this.normal = new dn();
        }
        return r(e, "laya.d3.physics.HitResult"), e;
    }()), Se = function() {
        function e() {
            this._currentLength = 0, this._elements = null, this._elements = new Float32Array(8);
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientDataInt");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.add = function(e, t) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("Warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t) : console.log("Warning:data count must lessEqual than 4");
        }, t.cloneTo = function(e) {
            var t = e;
            t._currentLength = this._currentLength;
            var n = t._elements;
            n.length = this._elements.length;
            for (var i = 0, r = this._elements.length; i < r; i++) n[i] = this._elements[i];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradientCount", function() {
            return this._currentLength / 2;
        }), e;
    }(), Re = function() {
        function e(e, t, n) {
            this.offset = 0, this.elementFormat = null, this.elementUsage = 0, this.offset = e, 
            this.elementFormat = t, this.elementUsage = n;
        }
        return r(e, "laya.d3.graphics.VertexElement"), e;
    }(), Ae = function() {
        function e(e) {
            this._statesMap = {}, this.playOnWake = !0, this._playType = -1, this._crossMark = 0, 
            this._crossDuration = -1, this._crossNodesOwnersIndicesMap = {}, this._crossNodesOwnersCount = 0, 
            this._crossNodesOwners = [], this._defaultState = null, this._currentPlayState = null, 
            this._states = [], this._playStateInfo = new Je(), this._crossPlayStateInfo = new Je(), 
            this._srcCrossClipNodeIndices = [], this._destCrossClipNodeIndices = [], this.name = e, 
            this.defaultWeight = 1, this.blendingMode = laya.d3.component.AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;
        }
        r(e, "laya.d3.component.AnimatorControllerLayer");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.getAnimatorState = function(e) {
            var t = this._statesMap[e];
            return t || null;
        }, t.destroy = function() {
            this._statesMap = null, this._states = null, this._playStateInfo = null, this._crossPlayStateInfo = null;
        }, t.cloneTo = function(e) {
            var t = e;
            t.name = this.name, t.blendingMode = this.blendingMode, t.defaultWeight = this.defaultWeight, 
            t.playOnWake = this.playOnWake;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, e.BLENDINGMODE_OVERRIDE = 0, e.BLENDINGMODE_ADDTIVE = 1, e;
    }(), Ie = function() {
        function e() {
            this._currentLength = 0, this._elements = null, this._elements = new Float32Array(8);
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientDataNumber");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.add = function(e, t) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("GradientDataNumber warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t) : console.log("GradientDataNumber warning:data count must lessEqual than 4");
        }, t.getKeyByIndex = function(e) {
            return this._elements[2 * e];
        }, t.getValueByIndex = function(e) {
            return this._elements[2 * e + 1];
        }, t.getAverageValue = function() {
            for (var e = 0, t = this._currentLength - 2; e < t; e += 2) {
                this._elements[e + 1];
                this._elements[e + 3], this._elements[e + 2] - this._elements[e];
            }
            return 0;
        }, t.cloneTo = function(e) {
            var t = e;
            t._currentLength = this._currentLength;
            var n = t._elements;
            n.length = this._elements.length;
            for (var i = 0, r = this._elements.length; i < r; i++) n[i] = this._elements[i];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradientCount", function() {
            return this._currentLength / 2;
        }), e;
    }(), De = function() {
        function e() {
            this._destroyed = !1, this._emissionRate = 0, this._bursts = null, this.enbale = !1, 
            this._destroyed = !1, this.emissionRate = 10, this._bursts = [];
        }
        r(e, "laya.d3.core.particleShuriKen.module.Emission");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0,
            "laya.resource.IDestroy": !0
        }), t.destroy = function() {
            this._bursts = null, this._destroyed = !0;
        }, t.getBurstsCount = function() {
            return this._bursts.length;
        }, t.getBurstByIndex = function(e) {
            return this._bursts[e];
        }, t.addBurst = function(e) {
            var t = this._bursts.length;
            if (t > 0) for (var n = 0; n < t; n++) this._bursts[n].time > e.time && this._bursts.splice(n, 0, e);
            this._bursts.push(e);
        }, t.removeBurst = function(e) {
            var t = this._bursts.indexOf(e);
            -1 !== t && this._bursts.splice(t, 1);
        }, t.removeBurstByIndex = function(e) {
            this._bursts.splice(e, 1);
        }, t.clearBurst = function() {
            this._bursts.length = 0;
        }, t.cloneTo = function(e) {
            var t = e, n = t._bursts;
            n.length = this._bursts.length;
            for (var i = 0, r = this._bursts.length; i < r; i++) {
                var a = n[i];
                a ? this._bursts[i].cloneTo(a) : n[i] = this._bursts[i].clone();
            }
            t._emissionRate = this._emissionRate, t.enbale = this.enbale;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "destroyed", function() {
            return this._destroyed;
        }), a(0, t, "emissionRate", function() {
            return this._emissionRate;
        }, function(e) {
            if (e < 0) throw new Error("ParticleBaseShape:emissionRate value must large or equal than 0.");
            this._emissionRate = e;
        }), e;
    }(), ye = function() {
        function e() {
            this._defaultPhysicsMemory = 16, this._editerEnvironment = !1, this.isAntialias = !0, 
            this.isAlpha = !1, this.premultipliedAlpha = !0, this.isStencil = !0;
        }
        r(e, "Config3D");
        return a(0, e.prototype, "defaultPhysicsMemory", function() {
            return this._defaultPhysicsMemory;
        }, function(e) {
            if (e < 16) throw "defaultPhysicsMemory must large than 16M";
            this._defaultPhysicsMemory = e;
        }), i(e, [ "_defaultConfig", function() {
            return this._defaultConfig = new e();
        } ]), e;
    }(), Me = function() {
        function e() {
            this._idCounter = 0, this.colliderA = null, this.colliderB = null, this.distance = 0, 
            this.normal = new dn(), this.positionOnA = new dn(), this.positionOnB = new dn(), 
            this._id = ++this._idCounter;
        }
        return r(e, "laya.d3.physics.ContactPoint"), e;
    }(), Ce = (function() {
        function e() {}
        r(e, "laya.d3.animation.AnimatorStateScript");
        var t = e.prototype;
        t.onStateEnter = function() {}, t.onStateUpdate = function() {}, t.onStateExit = function() {};
    }(), function() {
        function e(e, t, n, i, r) {
            void 0 === e && (e = 0), void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 1);
            var a;
            (a = r || new Float32Array(4))[0] = e, a[1] = t, a[2] = n, a[3] = i, this.elements = a;
        }
        r(e, "laya.d3.math.Quaternion");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.scaling = function(e, t) {
            var n = t.elements, i = this.elements;
            n[0] = i[0] * e, n[1] = i[1] * e, n[2] = i[2] * e, n[3] = i[3] * e;
        }, t.normalize = function(t) {
            e._normalizeArray(this.elements, t.elements);
        }, t.length = function() {
            var e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3];
            return Math.sqrt(t * t + n * n + i * i + r * r);
        }, t.rotateX = function(e, t) {
            var n = t.elements, i = this.elements;
            e *= .5;
            var r = i[0], a = i[1], o = i[2], s = i[3], l = Math.sin(e), h = Math.cos(e);
            n[0] = r * h + s * l, n[1] = a * h + o * l, n[2] = o * h - a * l, n[3] = s * h - r * l;
        }, t.rotateY = function(e, t) {
            var n = t.elements, i = this.elements;
            e *= .5;
            var r = i[0], a = i[1], o = i[2], s = i[3], l = Math.sin(e), h = Math.cos(e);
            n[0] = r * h - o * l, n[1] = a * h + s * l, n[2] = o * h + r * l, n[3] = s * h - a * l;
        }, t.rotateZ = function(e, t) {
            var n = t.elements, i = this.elements;
            e *= .5;
            var r = i[0], a = i[1], o = i[2], s = i[3], l = Math.sin(e), h = Math.cos(e);
            n[0] = r * h + a * l, n[1] = a * h - r * l, n[2] = o * h + s * l, n[3] = s * h - o * l;
        }, t.getYawPitchRoll = function(t) {
            dn.transformQuat(dn.ForwardRH, this, e.TEMPVector31), dn.transformQuat(dn.Up, this, e.TEMPVector32);
            var n = e.TEMPVector32.elements;
            e.angleTo(dn.ZERO, e.TEMPVector31, e.TEMPVector33);
            var i = e.TEMPVector33.elements;
            i[0] == Math.PI / 2 ? (i[1] = e.arcTanAngle(n[2], n[0]), i[2] = 0) : i[0] == -Math.PI / 2 ? (i[1] = e.arcTanAngle(-n[2], -n[0]), 
            i[2] = 0) : (ut.createRotationY(-i[1], e.TEMPMatrix0), ut.createRotationX(-i[0], e.TEMPMatrix1), 
            dn.transformCoordinate(e.TEMPVector32, e.TEMPMatrix0, e.TEMPVector32), dn.transformCoordinate(e.TEMPVector32, e.TEMPMatrix1, e.TEMPVector32), 
            i[2] = e.arcTanAngle(n[1], -n[0])), i[1] <= -Math.PI && (i[1] = Math.PI), i[2] <= -Math.PI && (i[2] = Math.PI), 
            i[1] >= Math.PI && i[2] >= Math.PI && (i[1] = 0, i[2] = 0, i[0] = Math.PI - i[0]);
            var r = t.elements;
            r[0] = i[1], r[1] = i[0], r[2] = i[2];
        }, t.invert = function(e) {
            var t = e.elements, n = this.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = i * i + r * r + a * a + o * o, l = s ? 1 / s : 0;
            t[0] = -i * l, t[1] = -r * l, t[2] = -a * l, t[3] = o * l;
        }, t.identity = function() {
            var e = this.elements;
            e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1;
        }, t.fromArray = function(e, t) {
            void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1], 
            this.elements[2] = e[t + 2], this.elements[3] = e[t + 3];
        }, t.cloneTo = function(e) {
            var t, n, i;
            if (n = this.elements, i = e.elements, n !== i) for (t = 0; t < 4; ++t) i[t] = n[t];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, t.equals = function(e) {
            var t = this.elements, n = e.elements;
            return Tt.nearEqual(t[0], n[0]) && Tt.nearEqual(t[1], n[1]) && Tt.nearEqual(t[2], n[2]) && Tt.nearEqual(t[3], n[3]);
        }, t.lengthSquared = function() {
            var e = this.elements[0], t = this.elements[1], n = this.elements[2], i = this.elements[3];
            return e * e + t * t + n * n + i * i;
        }, a(0, t, "x", function() {
            return this.elements[0];
        }), a(0, t, "y", function() {
            return this.elements[1];
        }), a(0, t, "z", function() {
            return this.elements[2];
        }), a(0, t, "w", function() {
            return this.elements[3];
        }), e._dotArray = function(e, t) {
            return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
        }, e._normalizeArray = function(e, t) {
            var n = e[0], i = e[1], r = e[2], a = e[3], o = n * n + i * i + r * r + a * a;
            o > 0 && (o = 1 / Math.sqrt(o), t[0] = n * o, t[1] = i * o, t[2] = r * o, t[3] = a * o);
        }, e._lerpArray = function(t, n, i, r) {
            var a = 1 - i;
            e._dotArray(t, n) >= 0 ? (r[0] = a * t[0] + i * n[0], r[1] = a * t[1] + i * n[1], 
            r[2] = a * t[2] + i * n[2], r[3] = a * t[3] + i * n[3]) : (r[0] = a * t[0] - i * n[0], 
            r[1] = a * t[1] - i * n[1], r[2] = a * t[2] - i * n[2], r[3] = a * t[3] - i * n[3]), 
            e._normalizeArray(r, r);
        }, e.createFromYawPitchRoll = function(e, t, n, i) {
            var r = .5 * n, a = .5 * t, o = .5 * e, s = Math.sin(r), l = Math.cos(r), h = Math.sin(a), c = Math.cos(a), u = Math.sin(o), _ = Math.cos(o), d = i.elements;
            d[0] = _ * h * l + u * c * s, d[1] = u * c * l - _ * h * s, d[2] = _ * c * s - u * h * l, 
            d[3] = _ * c * l + u * h * s;
        }, e.multiply = function(e, t, n) {
            var i = e.elements, r = t.elements, a = n.elements, o = i[0], s = i[1], l = i[2], h = i[3], c = r[0], u = r[1], _ = r[2], d = r[3], f = s * _ - l * u, m = l * c - o * _, p = o * u - s * c, T = o * c + s * u + l * _;
            a[0] = o * d + c * h + f, a[1] = s * d + u * h + m, a[2] = l * d + _ * h + p, a[3] = h * d - T;
        }, e.arcTanAngle = function(e, t) {
            return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : e < 0 ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
        }, e.angleTo = function(t, n, i) {
            dn.subtract(n, t, e.TEMPVector30), dn.normalize(e.TEMPVector30, e.TEMPVector30), 
            i.elements[0] = Math.asin(e.TEMPVector30.y), i.elements[1] = e.arcTanAngle(-e.TEMPVector30.z, -e.TEMPVector30.x);
        }, e.createFromAxisAngle = function(e, t, n) {
            var i = n.elements, r = e.elements;
            t *= .5;
            var a = Math.sin(t);
            i[0] = a * r[0], i[1] = a * r[1], i[2] = a * r[2], i[3] = Math.cos(t);
        }, e.createFromMatrix3x3 = function(e, t) {
            var n, i = t.elements, r = e.elements, a = r[0] + r[4] + r[8];
            if (a > 0) n = Math.sqrt(a + 1), i[3] = .5 * n, n = .5 / n, i[0] = (r[5] - r[7]) * n, 
            i[1] = (r[6] - r[2]) * n, i[2] = (r[1] - r[3]) * n; else {
                var o = 0;
                r[4] > r[0] && (o = 1), r[8] > r[3 * o + o] && (o = 2);
                var s = (o + 1) % 3, l = (o + 2) % 3;
                n = Math.sqrt(r[3 * o + o] - r[3 * s + s] - r[3 * l + l] + 1), i[o] = .5 * n, n = .5 / n, 
                i[3] = (r[3 * s + l] - r[3 * l + s]) * n, i[s] = (r[3 * s + o] + r[3 * o + s]) * n, 
                i[l] = (r[3 * l + o] + r[3 * o + l]) * n;
            }
        }, e.createFromMatrix4x4 = function(e, t) {
            var n, i, r = e.elements, a = t.elements, o = r[0] + r[5] + r[10];
            o > 0 ? (n = Math.sqrt(o + 1), a[3] = .5 * n, n = .5 / n, a[0] = (r[6] - r[9]) * n, 
            a[1] = (r[8] - r[2]) * n, a[2] = (r[1] - r[4]) * n) : r[0] >= r[5] && r[0] >= r[10] ? (i = .5 / (n = Math.sqrt(1 + r[0] - r[5] - r[10])), 
            a[0] = .5 * n, a[1] = (r[1] + r[4]) * i, a[2] = (r[2] + r[8]) * i, a[3] = (r[6] - r[9]) * i) : r[5] > r[10] ? (i = .5 / (n = Math.sqrt(1 + r[5] - r[0] - r[10])), 
            a[0] = (r[4] + r[1]) * i, a[1] = .5 * n, a[2] = (r[9] + r[6]) * i, a[3] = (r[8] - r[2]) * i) : (i = .5 / (n = Math.sqrt(1 + r[10] - r[0] - r[5])), 
            a[0] = (r[8] + r[2]) * i, a[1] = (r[9] + r[6]) * i, a[2] = .5 * n, a[3] = (r[1] - r[4]) * i);
        }, e.slerp = function(e, t, n, i) {
            var r, a, o, s, l, h = e.elements, c = t.elements, u = i.elements, _ = h[0], d = h[1], f = h[2], m = h[3], p = c[0], T = c[1], E = c[2], v = c[3];
            return (a = _ * p + d * T + f * E + m * v) < 0 && (a = -a, p = -p, T = -T, E = -E, 
            v = -v), 1 - a > 1e-6 ? (r = Math.acos(a), o = Math.sin(r), s = Math.sin((1 - n) * r) / o, 
            l = Math.sin(n * r) / o) : (s = 1 - n, l = n), u[0] = s * _ + l * p, u[1] = s * d + l * T, 
            u[2] = s * f + l * E, u[3] = s * m + l * v, u;
        }, e.lerp = function(t, n, i, r) {
            e._lerpArray(t.elements, n.elements, i, r.elements);
        }, e.add = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2], i[3] = r[3] + a[3];
        }, e.dot = function(t, n) {
            return e._dotArray(t.elements, n.elements);
        }, e.rotationLookAt = function(t, n, i) {
            e.lookAt(dn.ZERO, t, n, i);
        }, e.lookAt = function(t, n, i, r) {
            st.lookAt(t, n, i, e._tempMatrix3x3), e.rotationMatrix(e._tempMatrix3x3, r);
        }, e.invert = function(e, t) {
            var n = e.elements, i = t.elements, r = e.lengthSquared();
            Tt.isZero(r) || (r = 1 / r, i[0] = -n[0] * r, i[1] = -n[1] * r, i[2] = -n[2] * r, 
            i[3] = n[3] * r);
        }, e.rotationMatrix = function(e, t) {
            var n = e.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = n[4], l = n[5], h = n[6], c = n[7], u = n[8], _ = t.elements, d = NaN, f = NaN, m = i + s + u;
            m > 0 ? (d = Math.sqrt(m + 1), _[3] = .5 * d, d = .5 / d, _[0] = (l - c) * d, _[1] = (h - a) * d, 
            _[2] = (r - o) * d) : i >= s && i >= u ? (f = .5 / (d = Math.sqrt(1 + i - s - u)), 
            _[0] = .5 * d, _[1] = (r + o) * f, _[2] = (a + h) * f, _[3] = (l - c) * f) : s > u ? (f = .5 / (d = Math.sqrt(1 + s - i - u)), 
            _[0] = (o + r) * f, _[1] = .5 * d, _[2] = (c + l) * f, _[3] = (h - a) * f) : (f = .5 / (d = Math.sqrt(1 + u - i - s)), 
            _[0] = (h + a) * f, _[1] = (c + l) * f, _[2] = .5 * d, _[3] = (r - o) * f);
        }, e.DEFAULT = new e(), i(e, [ "TEMPVector30", function() {
            return this.TEMPVector30 = new dn();
        }, "TEMPVector31", function() {
            return this.TEMPVector31 = new dn();
        }, "TEMPVector32", function() {
            return this.TEMPVector32 = new dn();
        }, "TEMPVector33", function() {
            return this.TEMPVector33 = new dn();
        }, "TEMPMatrix0", function() {
            return this.TEMPMatrix0 = new ut();
        }, "TEMPMatrix1", function() {
            return this.TEMPMatrix1 = new ut();
        }, "_tempMatrix3x3", function() {
            return this._tempMatrix3x3 = new st();
        }, "NAN", function() {
            return this.NAN = new e(NaN, NaN, NaN, NaN);
        } ]), e;
    }()), xe = (function() {
        function e(e, t) {
            this._width = 0, this._height = 0, this._width = e, this._height = t;
        }
        r(e, "laya.d3.utils.Size");
        var t = e.prototype;
        a(0, t, "width", function() {
            return -1 === this._width ? we.clientWidth : this._width;
        }), a(0, t, "height", function() {
            return -1 === this._height ? we.clientHeight : this._height;
        }), a(1, e, "fullScreen", function() {
            return new e(-1, -1);
        });
    }(), function() {
        function e(e, t) {
            this.normal = null, this.distance = NaN, void 0 === t && (t = 0), this.normal = e, 
            this.distance = t;
        }
        r(e, "laya.d3.math.Plane");
        return e.prototype.normalize = function() {
            var e = this.normal.elements, t = e[0], n = e[1], i = e[2], r = 1 / Math.sqrt(t * t + n * n + i * i);
            e[0] = t * r, e[1] = n * r, e[2] = i * r, this.distance *= r;
        }, e.createPlaneBy3P = function(t, n, i) {
            var r = t.elements, a = n.elements, o = i.elements, s = a[0] - r[0], l = a[1] - r[1], h = a[2] - r[2], c = o[0] - r[0], u = o[1] - r[1], _ = o[2] - r[2], d = l * _ - h * u, f = h * c - s * _, m = s * u - l * c, p = 1 / Math.sqrt(d * d + f * f + m * m), T = d * p, E = f * p, v = m * p, g = e._TEMPVec3.elements;
            g[0] = T, g[1] = E, g[2] = v;
            var S = -(T * r[0] + E * r[1] + v * r[2]);
            return new e(e._TEMPVec3, S);
        }, e.PlaneIntersectionType_Back = 0, e.PlaneIntersectionType_Front = 1, e.PlaneIntersectionType_Intersecting = 2, 
        i(e, [ "_TEMPVec3", function() {
            return this._TEMPVec3 = new dn();
        } ]), e;
    }()), Oe = (function() {
        function e() {}
        r(e, "laya.d3.physics.shape.HeightfieldColliderShape");
    }(), function() {
        function e(e, t) {
            this.origin = null, this.direction = null, this.origin = e, this.direction = t;
        }
        return r(e, "laya.d3.math.Ray"), e;
    }()), Le = function() {
        function e() {}
        return r(e, "laya.d3.graphics.Vertex.VertexShuriKenParticle"), e.PARTICLE_CORNERTEXTURECOORDINATE0 = 0, 
        e.PARTICLE_POSITION0 = 1, e.PARTICLE_COLOR0 = 2, e.PARTICLE_TEXTURECOORDINATE0 = 3, 
        e.PARTICLE_SHAPEPOSITIONSTARTLIFETIME = 4, e.PARTICLE_DIRECTIONTIME = 5, e.PARTICLE_STARTCOLOR0 = 6, 
        e.PARTICLE_ENDCOLOR0 = 7, e.PARTICLE_STARTSIZE = 8, e.PARTICLE_STARTROTATION = 9, 
        e.PARTICLE_STARTSPEED = 10, e.PARTICLE_RANDOM0 = 11, e.PARTICLE_RANDOM1 = 12, e.PARTICLE_SIMULATIONWORLDPOSTION = 13, 
        e.PARTICLE_SIMULATIONWORLDROTATION = 14, e;
    }(), Ne = function() {
        function e() {}
        return r(e, "laya.d3.math.CollisionUtils"), e.distancePlaneToPoint = function(e, t) {
            return dn.dot(e.normal, t) - e.distance;
        }, e.distanceBoxToPoint = function(e, t) {
            var n = e.min.elements, i = n[0], r = n[1], a = n[2], o = e.max.elements, s = o[0], l = o[1], h = o[2], c = t.elements, u = c[0], _ = c[1], d = c[2], f = 0;
            return u < i && (f += (i - u) * (i - u)), u > s && (f += (s - u) * (s - u)), _ < r && (f += (r - _) * (r - _)), 
            _ > l && (f += (l - _) * (l - _)), d < a && (f += (a - d) * (a - d)), d > h && (f += (h - d) * (h - d)), 
            Math.sqrt(f);
        }, e.distanceBoxToBox = function(e, t) {
            var n = e.min.elements, i = n[0], r = n[1], a = n[2], o = e.max.elements, s = o[0], l = o[1], h = o[2], c = t.min.elements, u = c[0], _ = c[1], d = c[2], f = t.max.elements, m = f[0], p = f[1], T = f[2], E = 0, v = NaN;
            return i > m ? E += (v = i - m) * v : u > s && (E += (v = u - s) * v), r > p ? E += (v = r - p) * v : _ > l && (E += (v = _ - l) * v), 
            a > T ? E += (v = a - T) * v : d > h && (E += (v = d - h) * v), Math.sqrt(E);
        }, e.distanceSphereToPoint = function(e, t) {
            var n = Math.sqrt(dn.distanceSquared(e.center, t));
            return n -= e.radius, Math.max(n, 0);
        }, e.distanceSphereToSphere = function(e, t) {
            var n = Math.sqrt(dn.distanceSquared(e.center, t.center));
            return n -= e.radius + t.radius, Math.max(n, 0);
        }, e.intersectsRayAndTriangleRD = function(t, n, i, r, a) {
            var o = t.origin.elements, s = o[0], l = o[1], h = o[2], c = t.direction.elements, u = c[0], _ = c[1], d = c[2], f = n.elements, m = f[0], p = f[1], T = f[2], E = i.elements, v = E[0], g = E[1], S = E[2], R = r.elements, A = R[0], I = R[1], D = R[2], y = e._tempV30.elements, M = y[0], C = y[1], x = y[2];
            M = v - m, C = g - p, x = S - T;
            var O = e._tempV31.elements, L = O[0], N = O[1], V = O[2];
            L = A - m, N = I - p, V = D - T;
            var P = e._tempV32.elements, w = P[0], F = P[1], b = P[2], B = M * (w = _ * V - d * N) + C * (F = d * L - u * V) + x * (b = u * N - _ * L);
            if (Tt.isZero(B)) return 0, !1;
            var U = 1 / B, G = e._tempV33.elements, H = G[0], z = G[1], k = G[2], X = (H = s - m) * w + (z = l - p) * F + (k = h - T) * b;
            if ((X *= U) < 0 || X > 1) return 0, !1;
            var W = e._tempV34.elements, Y = W[0], Z = W[1], K = W[2], j = u * (Y = z * x - k * C) + _ * (Z = k * M - H * x) + d * (K = H * C - z * M);
            if ((j *= U) < 0 || X + j > 1) return 0, !1;
            var q = L * Y + N * Z + V * K;
            return (q *= U) < 0 ? (0, !1) : (q, !0);
        }, e.intersectsRayAndTriangleRP = function(t, n, i, r, a) {
            return e.intersectsRayAndTriangleRD(t, n, i, r, NaN) ? (dn.scale(t.direction, NaN, e._tempV30), 
            dn.add(t.origin, e._tempV30, a), !0) : (a = dn.ZERO, !1);
        }, e.intersectsRayAndPoint = function(t, n) {
            dn.subtract(t.origin, n, e._tempV30);
            var i = dn.dot(e._tempV30, t.direction), r = dn.dot(e._tempV30, e._tempV30) - Tt.zeroTolerance;
            if (r > 0 && i > 0) return !1;
            return !(i * i - r < 0);
        }, e.intersectsRayAndRay = function(t, n, i) {
            var r = t.origin, a = r.elements, o = a[0], s = a[1], l = a[2], h = t.direction, c = h.elements, u = c[0], _ = c[1], d = c[2], f = n.origin, m = f.elements, p = m[0], T = m[1], E = m[2], v = n.direction, g = v.elements, S = g[0], R = g[1], A = g[2];
            dn.cross(h, v, e._tempV30);
            var I = e._tempV30.elements, D = dn.scalarLength(e._tempV30);
            if (Tt.isZero(D) && Tt.nearEqual(p, o) && Tt.nearEqual(T, s) && Tt.nearEqual(E, l)) return dn.ZERO, 
            !0;
            D *= D;
            var y = p - o, M = T - s, C = E - l, x = S, O = R, L = A, N = I[0], V = I[1], P = I[2], w = (y * O * P + M * L * N + C * x * V - y * L * V - M * x * P - C * O * N) / D;
            O = _, L = d, x = u;
            dn.scale(h, w, e._tempV30), dn.scale(v, w, e._tempV31), dn.add(r, e._tempV30, e._tempV32), 
            dn.add(f, e._tempV31, e._tempV33);
            var F = e._tempV32.elements, b = e._tempV33.elements;
            return Tt.nearEqual(b[0], F[0]) && Tt.nearEqual(b[1], F[1]) && Tt.nearEqual(b[2], F[2]) ? (e._tempV32, 
            !0) : (dn.ZERO, !1);
        }, e.intersectsPlaneAndTriangle = function(t, n, i, r) {
            var a = e.intersectsPlaneAndPoint(t, n), o = e.intersectsPlaneAndPoint(t, i), s = e.intersectsPlaneAndPoint(t, r);
            return a == xe.PlaneIntersectionType_Front && o == xe.PlaneIntersectionType_Front && s == xe.PlaneIntersectionType_Front ? xe.PlaneIntersectionType_Front : a == xe.PlaneIntersectionType_Back && o == xe.PlaneIntersectionType_Back && s == xe.PlaneIntersectionType_Back ? xe.PlaneIntersectionType_Back : xe.PlaneIntersectionType_Intersecting;
        }, e.intersectsRayAndPlaneRD = function(e, t, n) {
            var i = t.normal, r = dn.dot(i, e.direction);
            if (Tt.isZero(r)) return 0, !1;
            var a = dn.dot(i, e.origin);
            return !((-t.distance - a) / r < 0);
        }, e.intersectsRayAndPlaneRP = function(t, n, i) {
            return e.intersectsRayAndPlaneRD(t, n, NaN) ? (dn.scale(t.direction, NaN, e._tempV30), 
            dn.add(t.origin, e._tempV30, e._tempV31), e._tempV31, !0) : (dn.ZERO, !1);
        }, e.intersectsRayAndBoxRD = function(e, t) {
            var n = e.origin.elements, i = n[0], r = n[1], a = n[2], o = e.direction.elements, s = o[0], l = o[1], h = o[2], c = t.min.elements, u = c[0], _ = c[1], d = c[2], f = t.max.elements, m = f[0], p = f[1], T = f[2], E = 0, v = Tt.MaxValue;
            if (Tt.isZero(s)) {
                if (i < u || i > m) return -1;
            } else {
                var g = 1 / s, S = (u - i) * g, R = (m - i) * g;
                if (S > R) {
                    var A = S;
                    S = R, R = A;
                }
                if (E = Math.max(S, E), v = Math.min(R, v), E > v) return -1;
            }
            if (Tt.isZero(l)) {
                if (r < _ || r > p) return -1;
            } else {
                var I = 1 / l, D = (_ - r) * I, y = (p - r) * I;
                if (D > y) {
                    var M = D;
                    D = y, y = M;
                }
                if (E = Math.max(D, E), v = Math.min(y, v), E > v) return -1;
            }
            if (Tt.isZero(h)) {
                if (a < d || a > T) return -1;
            } else {
                var C = 1 / h, x = (d - a) * C, O = (T - a) * C;
                if (x > O) {
                    var L = x;
                    x = O, O = L;
                }
                if (E = Math.max(x, E), v = Math.min(O, v), E > v) return -1;
            }
            return E;
        }, e.intersectsRayAndBoxRP = function(t, n, i) {
            var r = e.intersectsRayAndBoxRD(t, n);
            return -1 === r ? (dn.ZERO.cloneTo(i), r) : (dn.scale(t.direction, r, e._tempV30), 
            dn.add(t.origin, e._tempV30, e._tempV31), e._tempV31.cloneTo(i), r);
        }, e.intersectsRayAndSphereRD = function(t, n) {
            var i = n.radius;
            dn.subtract(t.origin, n.center, e._tempV30);
            var r = dn.dot(e._tempV30, t.direction), a = dn.dot(e._tempV30, e._tempV30) - i * i;
            if (a > 0 && r > 0) return -1;
            var o = r * r - a;
            if (o < 0) return -1;
            var s = -r - Math.sqrt(o);
            return s < 0 && (s = 0), s;
        }, e.intersectsRayAndSphereRP = function(t, n, i) {
            var r = e.intersectsRayAndSphereRD(t, n);
            return -1 === r ? (dn.ZERO.cloneTo(i), r) : (dn.scale(t.direction, r, e._tempV30), 
            dn.add(t.origin, e._tempV30, e._tempV31), e._tempV31.cloneTo(i), r);
        }, e.intersectsSphereAndTriangle = function(t, n, i, r) {
            var a = t.center, o = t.radius;
            e.closestPointPointTriangle(a, n, i, r, e._tempV30), dn.subtract(e._tempV30, a, e._tempV31);
            return dn.dot(e._tempV31, e._tempV31) <= o * o;
        }, e.intersectsPlaneAndPoint = function(e, t) {
            var n = dn.dot(e.normal, t) + e.distance;
            return n > 0 ? xe.PlaneIntersectionType_Front : n < 0 ? xe.PlaneIntersectionType_Back : xe.PlaneIntersectionType_Intersecting;
        }, e.intersectsPlaneAndPlane = function(t, n) {
            dn.cross(t.normal, n.normal, e._tempV30);
            var i = dn.dot(e._tempV30, e._tempV30);
            return !Tt.isZero(i);
        }, e.intersectsPlaneAndPlaneRL = function(t, n, i) {
            var r = t.normal, a = n.normal;
            dn.cross(r, a, e._tempV34);
            var o = dn.dot(e._tempV34, e._tempV34);
            return !Tt.isZero(o) && (dn.scale(a, t.distance, e._tempV30), dn.scale(r, n.distance, e._tempV31), 
            dn.subtract(e._tempV30, e._tempV31, e._tempV32), dn.cross(e._tempV32, e._tempV34, e._tempV33), 
            dn.normalize(e._tempV34, e._tempV34), new Oe(e._tempV33, e._tempV34), !0);
        }, e.intersectsPlaneAndBox = function(t, n) {
            var i = t.distance, r = t.normal, a = r.elements, o = a[0], s = a[1], l = a[2], h = n.min.elements, c = h[0], u = h[1], _ = h[2], d = n.max.elements, f = d[0], m = d[1], p = d[2];
            e._tempV30.elements[0] = o > 0 ? c : f, e._tempV30.elements[1] = s > 0 ? u : m, 
            e._tempV30.elements[2] = l > 0 ? _ : p, e._tempV31.elements[0] = o > 0 ? f : c, 
            e._tempV31.elements[1] = s > 0 ? m : u, e._tempV31.elements[2] = l > 0 ? p : _;
            var T = dn.dot(r, e._tempV30);
            return T + i > 0 ? xe.PlaneIntersectionType_Front : (T = dn.dot(r, e._tempV31)) + i < 0 ? xe.PlaneIntersectionType_Back : xe.PlaneIntersectionType_Intersecting;
        }, e.intersectsPlaneAndSphere = function(e, t) {
            var n = t.radius, i = dn.dot(e.normal, t.center) + e.distance;
            return i > n ? xe.PlaneIntersectionType_Front : i < -n ? xe.PlaneIntersectionType_Back : xe.PlaneIntersectionType_Intersecting;
        }, e.intersectsBoxAndBox = function(e, t) {
            var n = e.min.elements, i = e.max.elements, r = t.min.elements, a = t.max.elements;
            return !(n[0] > a[0] || r[0] > i[0]) && (!(n[1] > a[1] || r[1] > i[1]) && !(n[2] > a[2] || r[2] > i[2]));
        }, e.intersectsBoxAndSphere = function(t, n) {
            var i = n.center, r = n.radius;
            dn.Clamp(i, t.min, t.max, e._tempV30);
            return dn.distanceSquared(i, e._tempV30) <= r * r;
        }, e.intersectsSphereAndSphere = function(e, t) {
            var n = e.radius + t.radius;
            return dn.distanceSquared(e.center, t.center) <= n * n;
        }, e.boxContainsPoint = function(e, t) {
            var n = e.min.elements, i = e.max.elements, r = t.elements;
            return n[0] <= r[0] && i[0] >= r[0] && n[1] <= r[1] && i[1] >= r[1] && n[2] <= r[2] && i[2] >= r[2] ? 1 : 0;
        }, e.boxContainsBox = function(e, t) {
            var n = e.min.elements, i = n[0], r = n[1], a = n[2], o = e.max.elements, s = o[0], l = o[1], h = o[2], c = t.min.elements, u = c[0], _ = c[1], d = c[2], f = t.max.elements, m = f[0], p = f[1], T = f[2];
            return s < u || i > m ? 0 : l < _ || r > p ? 0 : h < d || a > T ? 0 : i <= u && m <= m && r <= _ && p <= l && a <= d && T <= h ? 1 : 2;
        }, e.boxContainsSphere = function(t, n) {
            var i = t.min, r = i.elements, a = r[0], o = r[1], s = r[2], l = t.max, h = l.elements, c = h[0], u = h[1], _ = h[2], d = n.center, f = d.elements, m = f[0], p = f[1], T = f[2], E = n.radius;
            dn.Clamp(d, i, l, e._tempV30);
            return dn.distanceSquared(d, e._tempV30) > E * E ? 0 : a + E <= m && m <= c - E && c - a > E && o + E <= p && p <= u - E && u - o > E && s + E <= T && T <= _ - E && _ - s > E ? 1 : 2;
        }, e.sphereContainsPoint = function(e, t) {
            return dn.distanceSquared(t, e.center) <= e.radius * e.radius ? 1 : 0;
        }, e.sphereContainsTriangle = function(t, n, i, r) {
            var a = e.sphereContainsPoint(t, n), o = e.sphereContainsPoint(t, i), s = e.sphereContainsPoint(t, r);
            return 1 == a && 1 == o && 1 == s ? 1 : e.intersectsSphereAndTriangle(t, n, i, r) ? 2 : 0;
        }, e.sphereContainsBox = function(t, n) {
            var i = t.center.elements, r = i[0], a = i[1], o = i[2], s = t.radius, l = n.min.elements, h = l[0], c = l[1], u = l[2], _ = n.max.elements, d = _[0], f = _[1], m = _[2], p = e._tempV30.elements;
            p[0], p[1], p[2];
            if (!e.intersectsBoxAndSphere(n, t)) return 0;
            var T = s * s;
            return r - h, a - f, o - m, dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - d, 
            a - f, o - m, dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - d, a - c, o - m, 
            dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - h, a - c, o - m, dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - h, 
            a - f, o - u, dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - d, a - f, o - u, 
            dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - d, a - c, o - u, dn.scalarLengthSquared(e._tempV30) > T ? 2 : (r - h, 
            a - c, o - u, dn.scalarLengthSquared(e._tempV30) > T ? 2 : 1)))))));
        }, e.sphereContainsSphere = function(e, t) {
            var n = e.radius, i = t.radius, r = dn.distance(e.center, t.center);
            return n + i < r ? 0 : n - i < r ? 2 : 1;
        }, e.closestPointPointTriangle = function(t, n, i, r, a) {
            dn.subtract(i, n, e._tempV30), dn.subtract(r, n, e._tempV31), dn.subtract(t, n, e._tempV32), 
            dn.subtract(t, i, e._tempV33), dn.subtract(t, r, e._tempV34);
            var o = dn.dot(e._tempV30, e._tempV32), s = dn.dot(e._tempV31, e._tempV32), l = dn.dot(e._tempV30, e._tempV33), h = dn.dot(e._tempV31, e._tempV33), c = dn.dot(e._tempV30, e._tempV34), u = dn.dot(e._tempV31, e._tempV34);
            if (o <= 0 && s <= 0) n.cloneTo(a); else if (l >= 0 && h <= l) i.cloneTo(a); else {
                var _ = o * h - l * s;
                if (_ <= 0 && o >= 0 && l <= 0) {
                    var d = o / (o - l);
                    return dn.scale(e._tempV30, d, a), void dn.add(n, a, a);
                }
                if (u >= 0 && c <= u) r.cloneTo(a); else {
                    var f = c * s - o * u;
                    if (f <= 0 && s >= 0 && u <= 0) {
                        var m = s / (s - u);
                        return dn.scale(e._tempV31, m, a), void dn.add(n, a, a);
                    }
                    var p = l * u - c * h;
                    if (p <= 0 && h - l >= 0 && c - u >= 0) {
                        var T = (h - l) / (h - l + (c - u));
                        return dn.subtract(r, i, a), dn.scale(a, T, a), void dn.add(i, a, a);
                    }
                    var E = 1 / (p + f + _), v = f * E, g = _ * E;
                    dn.scale(e._tempV30, v, e._tempV35), dn.scale(e._tempV31, g, e._tempV36), dn.add(e._tempV35, e._tempV36, a), 
                    dn.add(n, a, a);
                }
            }
        }, e.closestPointPlanePoint = function(t, n, i) {
            var r = t.normal, a = dn.dot(r, n) - t.distance;
            dn.scale(r, a, e._tempV30), dn.subtract(n, e._tempV30, i);
        }, e.closestPointBoxPoint = function(t, n, i) {
            dn.max(n, t.min, e._tempV30), dn.min(e._tempV30, t.max, i);
        }, e.closestPointSpherePoint = function(e, t, n) {
            var i = e.center;
            dn.subtract(t, i, n), dn.normalize(n, n), dn.scale(n, e.radius, n), dn.add(n, i, n);
        }, e.closestPointSphereSphere = function(e, t, n) {
            var i = e.center;
            dn.subtract(t.center, i, n), dn.normalize(n, n), dn.scale(n, e.radius, n), dn.add(n, i, n);
        }, i(e, [ "_tempV30", function() {
            return this._tempV30 = new dn();
        }, "_tempV31", function() {
            return this._tempV31 = new dn();
        }, "_tempV32", function() {
            return this._tempV32 = new dn();
        }, "_tempV33", function() {
            return this._tempV33 = new dn();
        }, "_tempV34", function() {
            return this._tempV34 = new dn();
        }, "_tempV35", function() {
            return this._tempV35 = new dn();
        }, "_tempV36", function() {
            return this._tempV36 = new dn();
        } ]), e;
    }(), Ve = function() {
        function e(e) {
            this._minVertexDistance = NaN, this._widthMultiplier = NaN, this._time = NaN, this._widthCurve = null, 
            this._colorGradient = null, this._textureMode = 0, this._trialGeometry = null, this._totalLength = 0, 
            this._owner = null, this._curtime = 0, this._trailRenderElementIndex = 0, this._lastPosition = new dn(), 
            this.alignment = 0, this._owner = e, this._initDefaultData(), this.addRenderElement();
        }
        r(e, "laya.d3.core.trail.TrailFilter");
        var t = e.prototype;
        return t.addRenderElement = function() {
            var e = this._owner._render, t = e._renderElements, n = e.sharedMaterials[0];
            n || (n = Xn.defaultMaterial);
            var i = new H();
            i.setTransform(this._owner._transform), i.render = e, i.material = n, this._trialGeometry = new an(this), 
            i.setGeometry(this._trialGeometry), t.push(i);
        }, t._update = function(e) {
            var t = this._owner._render;
            this._curtime += e.scene.timer._delta / 1e3, t._shaderValues.setNumber(ei.CURTIME, this._curtime);
            var n = this._owner.transform.position, i = t._renderElements[0]._geometry;
            i._updateDisappear(), i._updateTrail(e.camera, this._lastPosition, n), i._updateVertexBufferUV(), 
            n.cloneTo(this._lastPosition);
        }, t._initDefaultData = function() {
            this.time = 5, this.minVertexDistance = .1, this.widthMultiplier = 1, this.textureMode = 0;
            var e = [], t = new Ht();
            t.time = 0, t.inTangent = 0, t.outTangent = 0, t.value = 1, e.push(t);
            var n = new Ht();
            n.time = 1, n.inTangent = 0, n.outTangent = 0, n.value = 1, e.push(n), this.widthCurve = e;
            var i = new pe(2, 2);
            i.mode = 0, i.addColorRGB(0, Ge.WHITE), i.addColorRGB(1, Ge.WHITE), i.addColorAlpha(0, 1), 
            i.addColorAlpha(1, 1), this.colorGradient = i;
        }, t.destroy = function() {
            this._trialGeometry.destroy(), this._trialGeometry._destroy && this._trialGeometry._destroy(), 
            this._trialGeometry = null, this._widthCurve = null, this._colorGradient = null;
        }, a(0, t, "widthMultiplier", function() {
            return this._widthMultiplier;
        }, function(e) {
            this._widthMultiplier = e;
        }), a(0, t, "time", function() {
            return this._time;
        }, function(e) {
            this._time = e, this._owner._render._shaderValues.setNumber(ei.LIFETIME, e);
        }), a(0, t, "widthCurve", function() {
            return this._widthCurve;
        }, function(e) {
            this._widthCurve = e;
            var t = new Float32Array(4 * e.length), n = 0, i = 0, r = 0;
            for (n = 0, i = e.length; n < i; n++) t[r++] = e[n].time, t[r++] = e[n].inTangent, 
            t[r++] = e[n].outTangent, t[r++] = e[n].value;
            this._owner._render._shaderValues.setBuffer(ei.WIDTHCURVE, t), this._owner._render._shaderValues.setInt(ei.WIDTHCURVEKEYLENGTH, e.length);
        }), a(0, t, "minVertexDistance", function() {
            return this._minVertexDistance;
        }, function(e) {
            this._minVertexDistance = e;
        }), a(0, t, "colorGradient", function() {
            return this._colorGradient;
        }, function(e) {
            this._colorGradient = e, this._owner._render._shaderValues.setBuffer(ei.GRADIENTCOLORKEY, e._rgbElements), 
            this._owner._render._shaderValues.setBuffer(ei.GRADIENTALPHAKEY, e._alphaElements), 
            0 == e.mode ? this._owner._render._defineDatas.add(ei.SHADERDEFINE_GRADIENTMODE_BLEND) : this._owner._render._defineDatas.remove(ei.SHADERDEFINE_GRADIENTMODE_BLEND);
        }), a(0, t, "textureMode", function() {
            return this._textureMode;
        }, function(e) {
            this._textureMode = e;
        }), e.ALIGNMENT_VIEW = 0, e.ALIGNMENT_TRANSFORM_Z = 1, e;
    }(), Pe = function() {
        function e() {
            this._initBatchSprites = [], this._staticBatches = {}, this._batchRenderElementPoolIndex = 0, 
            this._batchRenderElementPool = [];
        }
        r(e, "laya.d3.graphics.StaticBatchManager");
        var t = e.prototype;
        return t._partition = function(e, t, n) {
            for (var i = e[Math.floor((n + t) / 2)]; t <= n; ) {
                for (;this._compare(e[t], i) < 0; ) t++;
                for (;this._compare(e[n], i) > 0; ) n--;
                if (t < n) {
                    var r = e[t];
                    e[t] = e[n], e[n] = r, t++, n--;
                } else if (t === n) {
                    t++;
                    break;
                }
            }
            return t;
        }, t._quickSort = function(e, t, n) {
            if (e.length > 1) {
                var i = this._partition(e, t, n), r = i - 1;
                t < r && this._quickSort(e, t, r), i < n && this._quickSort(e, i, n);
            }
        }, t._compare = function(e, t) {
            throw "StaticBatch:must override this function.";
        }, t._initStaticBatchs = function(e) {
            throw "StaticBatch:must override this function.";
        }, t._getBatchRenderElementFromPool = function() {
            throw "StaticBatch:must override this function.";
        }, t._addBatchSprite = function(e) {
            this._initBatchSprites.push(e);
        }, t._clear = function() {
            this._batchRenderElementPoolIndex = 0;
        }, t._garbageCollection = function() {
            throw "StaticBatchManager: must override it.";
        }, t.dispose = function() {
            this._staticBatches = null;
        }, e._registerManager = function(t) {
            e._managers.push(t);
        }, e._addToStaticBatchQueue = function(t) {
            t instanceof laya.d3.core.RenderableSprite3D && t.isStatic && t._addToInitStaticBatchManager();
            for (var n = 0, i = t.numChildren; n < i; n++) e._addToStaticBatchQueue(t._children[n]);
        }, e.combine = function(t, n) {
            var i = 0, r = 0;
            if (n) for (i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                a.isStatic && a._addToInitStaticBatchManager();
            } else t && e._addToStaticBatchQueue(t);
            for (i = 0, r = e._managers.length; i < r; i++) {
                e._managers[i]._initStaticBatchs(t);
            }
        }, e._managers = [], e;
    }(), we = function() {
        function e() {}
        return r(e, "laya.d3.core.render.RenderContext3D"), e.clientWidth = 0, e.clientHeight = 0, 
        i(e, [ "_instance", function() {
            return this._instance = new e();
        } ]), e;
    }(), Fe = function() {
        function e() {}
        r(e, "laya.d3.core.trail.VertexTrail");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.graphics.IVertex": !0
        }), a(0, t, "vertexDeclaration", function() {
            return e._vertexDeclaration1;
        }), a(1, e, "vertexDeclaration1", function() {
            return e._vertexDeclaration1;
        }), a(1, e, "vertexDeclaration2", function() {
            return e._vertexDeclaration2;
        }), e.TRAIL_POSITION0 = 0, e.TRAIL_OFFSETVECTOR = 1, e.TRAIL_TIME0 = 2, e.TRAIL_TEXTURECOORDINATE0Y = 3, 
        e.TRAIL_TEXTURECOORDINATE0X = 4, i(e, [ "_vertexDeclaration1", function() {
            return this._vertexDeclaration1 = new G(32, [ new Re(0, "vector3", 0), new Re(12, "vector3", 1), new Re(24, "single", 2), new Re(28, "single", 3) ]);
        }, "_vertexDeclaration2", function() {
            return this._vertexDeclaration2 = new G(4, [ new Re(0, "single", 4) ]);
        } ]), e;
    }(), be = function() {
        function e() {
            this._type = 0, this._separateAxes = !1, this._gradient = null, this._gradientX = null, 
            this._gradientY = null, this._gradientZ = null, this._constantMin = NaN, this._constantMax = NaN, 
            this._constantMinSeparate = null, this._constantMaxSeparate = null, this._gradientMin = null, 
            this._gradientMax = null, this._gradientXMin = null, this._gradientXMax = null, 
            this._gradientYMin = null, this._gradientYMax = null, this._gradientZMin = null, 
            this._gradientZMax = null;
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientSize");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.getMaxSizeInGradient = function() {
            var e = 0, t = 0, n = -Number.MAX_VALUE;
            switch (this._type) {
              case 0:
                if (this._separateAxes) {
                    for (e = 0, t = this._gradientX.gradientCount; e < t; e++) n = Math.max(n, this._gradientX.getValueByIndex(e));
                    for (e = 0, t = this._gradientY.gradientCount; e < t; e++) n = Math.max(n, this._gradientY.getValueByIndex(e));
                } else for (e = 0, t = this._gradient.gradientCount; e < t; e++) n = Math.max(n, this._gradient.getValueByIndex(e));
                break;

              case 1:
                this._separateAxes ? (n = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x), 
                n = Math.max(n, this._constantMinSeparate.y), n = Math.max(n, this._constantMaxSeparate.y)) : n = Math.max(this._constantMin, this._constantMax);
                break;

              case 2:
                if (this._separateAxes) {
                    for (e = 0, t = this._gradientXMin.gradientCount; e < t; e++) n = Math.max(n, this._gradientXMin.getValueByIndex(e));
                    for (e = 0, t = this._gradientXMax.gradientCount; e < t; e++) n = Math.max(n, this._gradientXMax.getValueByIndex(e));
                    for (e = 0, t = this._gradientYMin.gradientCount; e < t; e++) n = Math.max(n, this._gradientYMin.getValueByIndex(e));
                    for (e = 0, t = this._gradientZMax.gradientCount; e < t; e++) n = Math.max(n, this._gradientZMax.getValueByIndex(e));
                } else {
                    for (e = 0, t = this._gradientMin.gradientCount; e < t; e++) n = Math.max(n, this._gradientMin.getValueByIndex(e));
                    for (e = 0, t = this._gradientMax.gradientCount; e < t; e++) n = Math.max(n, this._gradientMax.getValueByIndex(e));
                }
            }
            return n;
        }, t.cloneTo = function(e) {
            var t = e;
            t._type = this._type, t._separateAxes = this._separateAxes, this._gradient.cloneTo(t._gradient), 
            this._gradientX.cloneTo(t._gradientX), this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), 
            t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(t._constantMinSeparate), 
            this._constantMaxSeparate.cloneTo(t._constantMaxSeparate), this._gradientMin.cloneTo(t._gradientMin), 
            this._gradientMax.cloneTo(t._gradientMax), this._gradientXMin.cloneTo(t._gradientXMin), 
            this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin), 
            this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin), 
            this._gradientZMax.cloneTo(t._gradientZMax);
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradientZ", function() {
            return this._gradientZ;
        }), a(0, t, "gradient", function() {
            return this._gradient;
        }), a(0, t, "separateAxes", function() {
            return this._separateAxes;
        }), a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "gradientMin", function() {
            return this._gradientMin;
        }), a(0, t, "constantMin", function() {
            return this._constantMin;
        }), a(0, t, "gradientX", function() {
            return this._gradientX;
        }), a(0, t, "gradientY", function() {
            return this._gradientY;
        }), a(0, t, "gradientMax", function() {
            return this._gradientMax;
        }), a(0, t, "constantMax", function() {
            return this._constantMax;
        }), a(0, t, "constantMinSeparate", function() {
            return this._constantMinSeparate;
        }), a(0, t, "constantMaxSeparate", function() {
            return this._constantMaxSeparate;
        }), a(0, t, "gradientXMin", function() {
            return this._gradientXMin;
        }), a(0, t, "gradientXMax", function() {
            return this._gradientXMax;
        }), a(0, t, "gradientYMin", function() {
            return this._gradientYMin;
        }), a(0, t, "gradientYMax", function() {
            return this._gradientYMax;
        }), a(0, t, "gradientZMin", function() {
            return this._gradientZMin;
        }), a(0, t, "gradientZMax", function() {
            return this._gradientZMax;
        }), e.createByGradient = function(t) {
            var n = new e();
            return n._type = 0, n._separateAxes = !1, n._gradient = t, n;
        }, e.createByGradientSeparate = function(t, n, i) {
            var r = new e();
            return r._type = 0, r._separateAxes = !0, r._gradientX = t, r._gradientY = n, r._gradientZ = i, 
            r;
        }, e.createByRandomTwoConstant = function(t, n) {
            var i = new e();
            return i._type = 1, i._separateAxes = !1, i._constantMin = t, i._constantMax = n, 
            i;
        }, e.createByRandomTwoConstantSeparate = function(t, n) {
            var i = new e();
            return i._type = 1, i._separateAxes = !0, i._constantMinSeparate = t, i._constantMaxSeparate = n, 
            i;
        }, e.createByRandomTwoGradient = function(t, n) {
            var i = new e();
            return i._type = 2, i._separateAxes = !1, i._gradientMin = t, i._gradientMax = n, 
            i;
        }, e.createByRandomTwoGradientSeparate = function(t, n, i, r, a, o) {
            var s = new e();
            return s._type = 2, s._separateAxes = !0, s._gradientXMin = t, s._gradientXMax = n, 
            s._gradientYMin = i, s._gradientYMax = r, s._gradientZMin = a, s._gradientZMax = o, 
            s;
        }, e;
    }(), Be = function() {
        function e(e) {
            this._counter = 0, this.defines = null, e ? (this._counter = e._counter, this.defines = e.defines.slice()) : (this._counter = 0, 
            this.defines = []);
        }
        r(e, "laya.d3.shader.ShaderDefines");
        return e.prototype.registerDefine = function(e) {
            var t = Math.pow(2, this._counter++);
            return this.defines[t] = e, t;
        }, e;
    }(), Ue = (function() {
        function e() {}
        r(e, "laya.d3.core.TextureMode"), e.Stretch = 0, e.Tile = 1;
    }(), function() {
        function e(t) {
            this._matrix = null, this._near = null, this._far = null, this._left = null, this._right = null, 
            this._top = null, this._bottom = null, this._matrix = t, this._near = new xe(new dn()), 
            this._far = new xe(new dn()), this._left = new xe(new dn()), this._right = new xe(new dn()), 
            this._top = new xe(new dn()), this._bottom = new xe(new dn()), e._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
        }
        r(e, "laya.d3.math.BoundFrustum");
        var t = e.prototype;
        return t.equalsBoundFrustum = function(e) {
            return this._matrix.equalsOtherMatrix(e.matrix);
        }, t.equalsObj = function(e) {
            if (e instanceof laya.d3.math.BoundFrustum) {
                var t = e;
                return this.equalsBoundFrustum(t);
            }
            return !1;
        }, t.getPlane = function(e) {
            switch (e) {
              case 0:
                return this._near;

              case 1:
                return this._far;

              case 2:
                return this._left;

              case 3:
                return this._right;

              case 4:
                return this._top;

              case 5:
                return this._bottom;

              default:
                return null;
            }
        }, t.getCorners = function(t) {
            e._get3PlaneInterPoint(this._near, this._bottom, this._right).cloneTo(t[0]), e._get3PlaneInterPoint(this._near, this._top, this._right).cloneTo(t[1]), 
            e._get3PlaneInterPoint(this._near, this._top, this._left).cloneTo(t[2]), e._get3PlaneInterPoint(this._near, this._bottom, this._left).cloneTo(t[3]), 
            e._get3PlaneInterPoint(this._far, this._bottom, this._right).cloneTo(t[4]), e._get3PlaneInterPoint(this._far, this._top, this._right).cloneTo(t[5]), 
            e._get3PlaneInterPoint(this._far, this._top, this._left).cloneTo(t[6]), e._get3PlaneInterPoint(this._far, this._bottom, this._left).cloneTo(t[7]);
        }, t.containsPoint = function(e) {
            for (var t = xe.PlaneIntersectionType_Front, n = xe.PlaneIntersectionType_Front, i = 0; i < 6; i++) {
                switch (i) {
                  case 0:
                    n = Ne.intersectsPlaneAndPoint(this._near, e);
                    break;

                  case 1:
                    n = Ne.intersectsPlaneAndPoint(this._far, e);
                    break;

                  case 2:
                    n = Ne.intersectsPlaneAndPoint(this._left, e);
                    break;

                  case 3:
                    n = Ne.intersectsPlaneAndPoint(this._right, e);
                    break;

                  case 4:
                    n = Ne.intersectsPlaneAndPoint(this._top, e);
                    break;

                  case 5:
                    n = Ne.intersectsPlaneAndPoint(this._bottom, e);
                }
                switch (n) {
                  case xe.PlaneIntersectionType_Back:
                    return 0;

                  case xe.PlaneIntersectionType_Intersecting:
                    t = xe.PlaneIntersectionType_Intersecting;
                }
            }
            switch (t) {
              case xe.PlaneIntersectionType_Intersecting:
                return 2;

              default:
                return 1;
            }
        }, t.containsBoundBox = function(t) {
            for (var n, i = e._tempV30, r = e._tempV31, a = 1, o = 0; o < 6; o++) {
                if (n = this.getPlane(o), this._getBoxToPlanePVertexNVertex(t, n.normal, i, r), 
                Ne.intersectsPlaneAndPoint(n, i) === xe.PlaneIntersectionType_Back) return 0;
                Ne.intersectsPlaneAndPoint(n, r) === xe.PlaneIntersectionType_Back && (a = 2);
            }
            return a;
        }, t.containsBoundSphere = function(e) {
            for (var t = xe.PlaneIntersectionType_Front, n = xe.PlaneIntersectionType_Front, i = 0; i < 6; i++) {
                switch (i) {
                  case 0:
                    n = Ne.intersectsPlaneAndSphere(this._near, e);
                    break;

                  case 1:
                    n = Ne.intersectsPlaneAndSphere(this._far, e);
                    break;

                  case 2:
                    n = Ne.intersectsPlaneAndSphere(this._left, e);
                    break;

                  case 3:
                    n = Ne.intersectsPlaneAndSphere(this._right, e);
                    break;

                  case 4:
                    n = Ne.intersectsPlaneAndSphere(this._top, e);
                    break;

                  case 5:
                    n = Ne.intersectsPlaneAndSphere(this._bottom, e);
                }
                switch (n) {
                  case xe.PlaneIntersectionType_Back:
                    return 0;

                  case xe.PlaneIntersectionType_Intersecting:
                    t = xe.PlaneIntersectionType_Intersecting;
                }
            }
            switch (t) {
              case xe.PlaneIntersectionType_Intersecting:
                return 2;

              default:
                return 1;
            }
        }, t._getBoxToPlanePVertexNVertex = function(e, t, n, i) {
            var r = e.min, a = r.elements, o = e.max, s = o.elements, l = t.elements, h = l[0], c = l[1], u = l[2];
            r.cloneTo(n);
            var _ = n.elements;
            h >= 0 && (_[0] = s[0]), c >= 0 && (_[1] = s[1]), u >= 0 && (_[2] = s[2]), o.cloneTo(i);
            var d = i.elements;
            h >= 0 && (d[0] = a[0]), c >= 0 && (d[1] = a[1]), u >= 0 && (d[2] = a[2]);
        }, a(0, t, "top", function() {
            return this._top;
        }), a(0, t, "matrix", function() {
            return this._matrix;
        }, function(t) {
            this._matrix = t, e._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
        }), a(0, t, "near", function() {
            return this._near;
        }), a(0, t, "far", function() {
            return this._far;
        }), a(0, t, "left", function() {
            return this._left;
        }), a(0, t, "right", function() {
            return this._right;
        }), a(0, t, "bottom", function() {
            return this._bottom;
        }), e._getPlanesFromMatrix = function(e, t, n, i, r, a, o) {
            var s = e.elements, l = s[0], h = s[1], c = s[2], u = s[3], _ = s[4], d = s[5], f = s[6], m = s[7], p = s[8], T = s[9], E = s[10], v = s[11], g = s[12], S = s[13], R = s[14], A = s[15], I = t.normal.elements;
            I[0] = u + c, I[1] = m + f, I[2] = v + E, t.distance = A + R, t.normalize();
            var D = n.normal.elements;
            D[0] = u - c, D[1] = m - f, D[2] = v - E, n.distance = A - R, n.normalize();
            var y = i.normal.elements;
            y[0] = u + l, y[1] = m + _, y[2] = v + p, i.distance = A + g, i.normalize();
            var M = r.normal.elements;
            M[0] = u - l, M[1] = m - _, M[2] = v - p, r.distance = A - g, r.normalize();
            var C = a.normal.elements;
            C[0] = u - h, C[1] = m - d, C[2] = v - T, a.distance = A - S, a.normalize();
            var x = o.normal.elements;
            x[0] = u + h, x[1] = m + d, x[2] = v + T, o.distance = A + S, o.normalize();
        }, e._get3PlaneInterPoint = function(t, n, i) {
            var r = t.normal, a = n.normal, o = i.normal;
            dn.cross(a, o, e._tempV30), dn.cross(o, r, e._tempV31), dn.cross(r, a, e._tempV32);
            var s = dn.dot(r, e._tempV30), l = dn.dot(a, e._tempV31), h = dn.dot(o, e._tempV32);
            dn.scale(e._tempV30, -t.distance / s, e._tempV33), dn.scale(e._tempV31, -n.distance / l, e._tempV34), 
            dn.scale(e._tempV32, -i.distance / h, e._tempV35), dn.add(e._tempV33, e._tempV34, e._tempV36), 
            dn.add(e._tempV35, e._tempV36, e._tempV37);
            return e._tempV37;
        }, i(e, [ "_tempV30", function() {
            return this._tempV30 = new dn();
        }, "_tempV31", function() {
            return this._tempV31 = new dn();
        }, "_tempV32", function() {
            return this._tempV32 = new dn();
        }, "_tempV33", function() {
            return this._tempV33 = new dn();
        }, "_tempV34", function() {
            return this._tempV34 = new dn();
        }, "_tempV35", function() {
            return this._tempV35 = new dn();
        }, "_tempV36", function() {
            return this._tempV36 = new dn();
        }, "_tempV37", function() {
            return this._tempV37 = new dn();
        } ]), e;
    }()), Ge = function() {
        function e(e, t, n, i) {
            this.elements = null, void 0 === e && (e = 1), void 0 === t && (t = 1), void 0 === n && (n = 1), 
            void 0 === i && (i = 1);
            var r = this.elements = new Float32Array(4);
            r[0] = e, r[1] = t, r[2] = n, r[3] = i;
        }
        r(e, "laya.d3.math.Color");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e.elements, n = this.elements;
            t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "b", function() {
            return this.elements[2];
        }, function(e) {
            this.elements[2] = e;
        }), a(0, t, "r", function() {
            return this.elements[0];
        }, function(e) {
            this.elements[0] = e;
        }), a(0, t, "g", function() {
            return this.elements[1];
        }, function(e) {
            this.elements[1] = e;
        }), a(0, t, "a", function() {
            return this.elements[3];
        }, function(e) {
            this.elements[3] = e;
        }), i(e, [ "RED", function() {
            return this.RED = new e(1, 0, 0, 1);
        }, "GREEN", function() {
            return this.GREEN = new e(0, 1, 0, 1);
        }, "BLUE", function() {
            return this.BLUE = new e(0, 0, 1, 1);
        }, "CYAN", function() {
            return this.CYAN = new e(0, 1, 1, 1);
        }, "YELLOW", function() {
            return this.YELLOW = new e(1, .92, .016, 1);
        }, "MAGENTA", function() {
            return this.MAGENTA = new e(1, 0, 1, 1);
        }, "GRAY", function() {
            return this.GRAY = new e(.5, .5, .5, 1);
        }, "WHITE", function() {
            return this.WHITE = new e(1, 1, 1, 1);
        }, "BLACK", function() {
            return this.BLACK = new e(0, 0, 0, 1);
        } ]), e;
    }(), He = function() {
        function e(e, t, n) {
            this._time = NaN, this._minCount = 0, this._maxCount = 0, this._time = e, this._minCount = t, 
            this._maxCount = n;
        }
        r(e, "laya.d3.core.particleShuriKen.module.Burst");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            t._time = this._time, t._minCount = this._minCount, t._maxCount = this._maxCount;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "time", function() {
            return this._time;
        }), a(0, t, "minCount", function() {
            return this._minCount;
        }), a(0, t, "maxCount", function() {
            return this._maxCount;
        }), e;
    }(), ze = function() {
        function e() {
            this.diffuseTexture = null, this.normalTexture = null, this.scale = null, this.offset = null;
        }
        return r(e, "laya.d3.terrain.unit.DetailTextureInfo"), e;
    }(), ke = function() {
        function e() {}
        return r(e, "laya.d3.utils.Utils3D"), e._convertToLayaVec3 = function(e, t, n) {
            var i = t.elements;
            i[0] = n ? -e.x() : e.x(), i[1] = e.y(), i[2] = e.z();
        }, e._convertToBulletVec3 = function(e, t, n) {
            var i = e.elements;
            t.setValue(n ? -i[0] : i[0], i[1], i[2]);
        }, e._rotationTransformScaleSkinAnimation = function(t, n, i, r, a, o, s, l, h, c, u, _) {
            var d = e._tempArray16_0, f = e._tempArray16_1, m = e._tempArray16_2, p = r + r, T = a + a, E = o + o, v = r * p, g = a * p, S = a * T, R = o * p, A = o * T, I = o * E, D = s * p, y = s * T, M = s * E;
            d[15] = 1, d[0] = 1 - S - I, d[1] = g + M, d[2] = R - y, d[4] = g - M, d[5] = 1 - v - I, 
            d[6] = A + D, d[8] = R + y, d[9] = A - D, d[10] = 1 - v - S, f[15] = 1, f[0] = l, 
            f[5] = h, f[10] = c;
            var C, x, O, L, N;
            for (C = 0; C < 4; C++) x = d[C], O = d[C + 4], L = d[C + 8], N = d[C + 12], m[C] = x, 
            m[C + 4] = O, m[C + 8] = L, m[C + 12] = x * t + O * n + L * i + N;
            for (C = 0; C < 4; C++) x = m[C], O = m[C + 4], L = m[C + 8], N = m[C + 12], u[C + _] = x * f[0] + O * f[1] + L * f[2] + N * f[3], 
            u[C + _ + 4] = x * f[4] + O * f[5] + L * f[6] + N * f[7], u[C + _ + 8] = x * f[8] + O * f[9] + L * f[10] + N * f[11], 
            u[C + _ + 12] = x * f[12] + O * f[13] + L * f[14] + N * f[15];
        }, e._createSceneByJsonForMaker = function(t, n, i) {
            var r = e._createNodeByJsonForMaker(t, n, i);
            return e._addComponentByJsonForMaker(t, n, i), r;
        }, e._createNodeByJsonForMaker = function(t, n, i) {
            var r;
            switch (t.type) {
              case "Scene3D":
                r = new Pn();
                break;

              case "Sprite3D":
                r = new Sn();
                break;

              case "MeshSprite3D":
                r = new ii(), n && n.push(r);
                break;

              case "SkinnedMeshSprite3D":
                r = new ai();
                break;

              case "ShuriKenParticle3D":
                r = new ni();
                break;

              case "Terrain":
                r = new Gn();
                break;

              case "Camera":
                r = new li();
                break;

              case "DirectionLight":
                r = new ri();
                break;

              case "PointLight":
                r = new ti();
                break;

              case "SpotLight":
                r = new si();
                break;

              case "TrailSprite3D":
                r = new ei();
                break;

              default:
                var a = _.getClass(t.props.runtime);
                r = new a();
            }
            var o = t.child;
            if (o) for (var s = 0, h = o.length; s < h; s++) {
                var c = e._createNodeByJsonForMaker(o[s], n, i);
                r.addChild(c);
            }
            var u = t.compId;
            r.compId = u, r._parse(t.props), i && (i._idMap[u] = r), e._compIdToNode[u] = r;
            var d = t.components;
            if (d) for (var f = 0, m = d.length; f < m; f++) {
                var p = d[f];
                if (!(a = l.window.Laya[p.type])) {
                    a = l.window;
                    p.type.split(".").forEach(function(e) {
                        a = a[e];
                    });
                }
                if ("function" == typeof a) {
                    var T = new a();
                    i && (i._idMap[p.compId] = T, console.log(p.compId));
                } else console.warn("Utils3D:Unkown component type.");
            }
            return r;
        }, e._addComponentByJsonForMaker = function(t, n, i) {
            var r = t.compId, a = e._compIdToNode[r], o = t.child;
            if (o) for (var s = 0, h = o.length; s < h; s++) e._addComponentByJsonForMaker(o[s], n, i);
            var c = t.components;
            if (c) for (var u = 0, _ = c.length; u < _; u++) {
                var d = c[u];
                if (!(m = l.window.Laya[d.type])) {
                    var f = d.type.split("."), m = l.window;
                    f.forEach(function(e) {
                        m = m[e];
                    });
                }
                if ("function" == typeof m) {
                    var p = i._idMap[d.compId];
                    a.addComponentIntance(p), p._parse(d);
                } else console.warn("Utils3D:Unkown component type.");
            }
        }, e._createNodeByJson = function(t, n) {
            var i;
            switch (t.type) {
              case "Scene3D":
                i = new Pn();
                break;

              case "Sprite3D":
                i = new Sn();
                break;

              case "MeshSprite3D":
                i = new ii(), n && n.push(i);
                break;

              case "SkinnedMeshSprite3D":
                i = new ai();
                break;

              case "ShuriKenParticle3D":
                i = new ni();
                break;

              case "Terrain":
                i = new Gn();
                break;

              case "Camera":
                i = new li();
                break;

              case "DirectionLight":
                i = new ri();
                break;

              case "PointLight":
                i = new ti();
                break;

              case "SpotLight":
                i = new si();
                break;

              case "TrailSprite3D":
                i = new ei();
                break;

              default:
                throw new Error("Utils3D:unidentified class type in (.lh) file.");
            }
            var r = t.child;
            if (r) for (var a = 0, o = r.length; a < o; a++) {
                var s = e._createNodeByJson(r[a], n);
                i.addChild(s);
            }
            var h = t.components;
            if (h) for (var c = 0, u = h.length; c < u; c++) {
                var _ = h[c];
                if (!(f = l.window.Laya[_.type])) {
                    var d = _.type.split("."), f = l.window;
                    d.forEach(function(e) {
                        f = f[e];
                    });
                }
                if ("function" == typeof f) {
                    i.addComponent(f)._parse(_);
                } else console.warn("Unkown component type.");
            }
            return i._parse(t.props), i;
        }, e._computeBoneAndAnimationDatasByBindPoseMatrxix = function(e, t, n, i, r, a) {
            var o, s, l = 0, h = 0, c = e.length;
            for (o = 0; o < c; l += e[o].keyframeWidth, h += 16, o++) laya.d3.utils.Utils3D._rotationTransformScaleSkinAnimation(t[l + 0], t[l + 1], t[l + 2], t[l + 3], t[l + 4], t[l + 5], t[l + 6], t[l + 7], t[l + 8], t[l + 9], i, h), 
            0 != o && (s = 16 * e[o].parentIndex, laya.d3.utils.Utils3D.mulMatrixByArray(i, s, i, h, i, h));
            var u = n.length;
            for (o = 0; o < u; o++) laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(i, 16 * a[o], n[o], r, 16 * o);
        }, e._computeAnimationDatasByArrayAndMatrixFast = function(e, t, n, i) {
            for (var r = 0, a = e.length; r < a; r++) laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(t, 16 * i[r], e[r], n, 16 * r);
        }, e._computeBoneAndAnimationDatasByBindPoseMatrxixOld = function(e, t, n, i, r) {
            var a, o, s = 0, l = 0, h = e.length;
            for (a = 0; a < h; s += e[a].keyframeWidth, l += 16, a++) laya.d3.utils.Utils3D._rotationTransformScaleSkinAnimation(t[s + 7], t[s + 8], t[s + 9], t[s + 3], t[s + 4], t[s + 5], t[s + 6], t[s + 0], t[s + 1], t[s + 2], i, l), 
            0 != a && (o = 16 * e[a].parentIndex, laya.d3.utils.Utils3D.mulMatrixByArray(i, o, i, l, i, l));
            var c = n.length;
            for (a = 0; a < c; a++) {
                var u = 16 * a;
                laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(i, u, n[a], r, u);
            }
        }, e._computeAnimationDatasByArrayAndMatrixFastOld = function(e, t, n) {
            for (var i = e.length, r = 0; r < i; r++) {
                var a = 16 * r;
                laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(t, a, e[r], n, a);
            }
        }, e._computeRootAnimationData = function(e, t, n) {
            for (var i = 0, r = 0, a = 0, o = e.length; i < o; r += e[i].keyframeWidth, a += 16, 
            i++) laya.d3.utils.Utils3D.createAffineTransformationArray(t[r + 0], t[r + 1], t[r + 2], t[r + 3], t[r + 4], t[r + 5], t[r + 6], t[r + 7], t[r + 8], t[r + 9], n, a);
        }, e.transformVector3ArrayByQuat = function(e, t, n, i, r) {
            var a = n.elements, o = e[t], s = e[t + 1], l = e[t + 2], h = a[0], c = a[1], u = a[2], _ = a[3], d = _ * o + c * l - u * s, f = _ * s + u * o - h * l, m = _ * l + h * s - c * o, p = -h * o - c * s - u * l;
            i[r] = d * _ + p * -h + f * -u - m * -c, i[r + 1] = f * _ + p * -c + m * -h - d * -u, 
            i[r + 2] = m * _ + p * -u + d * -c - f * -h;
        }, e.mulMatrixByArray = function(t, n, i, r, a, o) {
            var s, l, h, c, u;
            if (a === i) {
                for (i = e._tempArray16_3, s = 0; s < 16; ++s) i[s] = a[o + s];
                r = 0;
            }
            for (s = 0; s < 4; s++) l = t[n + s], h = t[n + s + 4], c = t[n + s + 8], u = t[n + s + 12], 
            a[o + s] = l * i[r + 0] + h * i[r + 1] + c * i[r + 2] + u * i[r + 3], a[o + s + 4] = l * i[r + 4] + h * i[r + 5] + c * i[r + 6] + u * i[r + 7], 
            a[o + s + 8] = l * i[r + 8] + h * i[r + 9] + c * i[r + 10] + u * i[r + 11], a[o + s + 12] = l * i[r + 12] + h * i[r + 13] + c * i[r + 14] + u * i[r + 15];
        }, e.mulMatrixByArrayFast = function(e, t, n, i, r, a) {
            var o, s, l, h, c;
            for (o = 0; o < 4; o++) s = e[t + o], l = e[t + o + 4], h = e[t + o + 8], c = e[t + o + 12], 
            r[a + o] = s * n[i + 0] + l * n[i + 1] + h * n[i + 2] + c * n[i + 3], r[a + o + 4] = s * n[i + 4] + l * n[i + 5] + h * n[i + 6] + c * n[i + 7], 
            r[a + o + 8] = s * n[i + 8] + l * n[i + 9] + h * n[i + 10] + c * n[i + 11], r[a + o + 12] = s * n[i + 12] + l * n[i + 13] + h * n[i + 14] + c * n[i + 15];
        }, e.mulMatrixByArrayAndMatrixFast = function(e, t, n, i, r) {
            var a, o, s, l, h, c = n.elements, u = c[0], _ = c[1], d = c[2], f = c[3], m = c[4], p = c[5], T = c[6], E = c[7], v = c[8], g = c[9], S = c[10], R = c[11], A = c[12], I = c[13], D = c[14], y = c[15], M = t, C = t + 4, x = t + 8, O = t + 12, L = r, N = r + 4, V = r + 8, P = r + 12;
            for (a = 0; a < 4; a++) o = e[M + a], s = e[C + a], l = e[x + a], h = e[O + a], 
            i[L + a] = o * u + s * _ + l * d + h * f, i[N + a] = o * m + s * p + l * T + h * E, 
            i[V + a] = o * v + s * g + l * S + h * R, i[P + a] = o * A + s * I + l * D + h * y;
        }, e.createAffineTransformationArray = function(e, t, n, i, r, a, o, s, l, h, c, u) {
            var _ = i + i, d = r + r, f = a + a, m = i * _, p = i * d, T = i * f, E = r * d, v = r * f, g = a * f, S = o * _, R = o * d, A = o * f;
            c[u + 0] = (1 - (E + g)) * s, c[u + 1] = (p + A) * s, c[u + 2] = (T - R) * s, c[u + 3] = 0, 
            c[u + 4] = (p - A) * l, c[u + 5] = (1 - (m + g)) * l, c[u + 6] = (v + S) * l, c[u + 7] = 0, 
            c[u + 8] = (T + R) * h, c[u + 9] = (v - S) * h, c[u + 10] = (1 - (m + E)) * h, c[u + 11] = 0, 
            c[u + 12] = e, c[u + 13] = t, c[u + 14] = n, c[u + 15] = 1;
        }, e.transformVector3ArrayToVector3ArrayCoordinate = function(e, t, n, i, r) {
            var a = e[t + 0], o = e[t + 1], s = e[t + 2], l = n.elements, h = a * l[3] + o * l[7] + s * l[11] + l[15];
            i[r] = a * l[0] + o * l[4] + s * l[8] + l[12] / h, i[r + 1] = a * l[1] + o * l[5] + s * l[9] + l[13] / h, 
            i[r + 2] = a * l[2] + o * l[6] + s * l[10] + l[14] / h;
        }, e.transformLightingMapTexcoordArray = function(e, t, n, i, r) {
            var a = n.elements;
            i[r + 0] = e[t + 0] * a[0] + a[2], i[r + 1] = 1 - ((1 - e[t + 1]) * a[1] + a[3]);
        }, e.getURLVerion = function(e) {
            var t = e.indexOf("?");
            return t >= 0 ? e.substr(t) : null;
        }, e._quaternionCreateFromYawPitchRollArray = function(e, t, n, i) {
            var r = .5 * n, a = .5 * t, o = .5 * e, s = Math.sin(r), l = Math.cos(r), h = Math.sin(a), c = Math.cos(a), u = Math.sin(o), _ = Math.cos(o);
            i[0] = _ * h * l + u * c * s, i[1] = u * c * l - _ * h * s, i[2] = _ * c * s - u * h * l, 
            i[3] = _ * c * l + u * h * s;
        }, e._createAffineTransformationArray = function(e, t, n, i) {
            var r = t[0], a = t[1], o = t[2], s = t[3], l = r + r, h = a + a, c = o + o, u = r * l, _ = r * h, d = r * c, f = a * h, m = a * c, p = o * c, T = s * l, E = s * h, v = s * c, g = n[0], S = n[1], R = n[2];
            i[0] = (1 - (f + p)) * g, i[1] = (_ + v) * g, i[2] = (d - E) * g, i[3] = 0, i[4] = (_ - v) * S, 
            i[5] = (1 - (u + p)) * S, i[6] = (m + T) * S, i[7] = 0, i[8] = (d + E) * R, i[9] = (m - T) * R, 
            i[10] = (1 - (u + f)) * R, i[11] = 0, i[12] = e[0], i[13] = e[1], i[14] = e[2], 
            i[15] = 1;
        }, e._mulMatrixArray = function(e, t, n, i) {
            var r, a, o, s, l, h = t.elements, c = h[0], u = h[1], _ = h[2], d = h[3], f = h[4], m = h[5], p = h[6], T = h[7], E = h[8], v = h[9], g = h[10], S = h[11], R = h[12], A = h[13], I = h[14], D = h[15], y = i, M = i + 4, C = i + 8, x = i + 12;
            for (r = 0; r < 4; r++) a = e[r], o = e[r + 4], s = e[r + 8], l = e[r + 12], n[y + r] = a * c + o * u + s * _ + l * d, 
            n[M + r] = a * f + o * m + s * p + l * T, n[C + r] = a * E + o * v + s * g + l * S, 
            n[x + r] = a * R + o * A + s * I + l * D;
        }, e.getYawPitchRoll = function(t, n) {
            e.transformQuat(dn.ForwardRH, t, Ce.TEMPVector31), e.transformQuat(dn.Up, t, Ce.TEMPVector32);
            var i = Ce.TEMPVector32.elements;
            e.angleTo(dn.ZERO, Ce.TEMPVector31, Ce.TEMPVector33);
            var r = Ce.TEMPVector33.elements;
            r[0] == Math.PI / 2 ? (r[1] = e.arcTanAngle(i[2], i[0]), r[2] = 0) : r[0] == -Math.PI / 2 ? (r[1] = e.arcTanAngle(-i[2], -i[0]), 
            r[2] = 0) : (ut.createRotationY(-r[1], Ce.TEMPMatrix0), ut.createRotationX(-r[0], Ce.TEMPMatrix1), 
            dn.transformCoordinate(Ce.TEMPVector32, Ce.TEMPMatrix0, Ce.TEMPVector32), dn.transformCoordinate(Ce.TEMPVector32, Ce.TEMPMatrix1, Ce.TEMPVector32), 
            r[2] = e.arcTanAngle(i[1], -i[0])), r[1] <= -Math.PI && (r[1] = Math.PI), r[2] <= -Math.PI && (r[2] = Math.PI), 
            r[1] >= Math.PI && r[2] >= Math.PI && (r[1] = 0, r[2] = 0, r[0] = Math.PI - r[0]), 
            n[0] = r[1], n[1] = r[0], n[2] = r[2];
        }, e.arcTanAngle = function(e, t) {
            return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : e < 0 ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
        }, e.angleTo = function(t, n, i) {
            dn.subtract(n, t, Ce.TEMPVector30), dn.normalize(Ce.TEMPVector30, Ce.TEMPVector30), 
            i.elements[0] = Math.asin(Ce.TEMPVector30.y), i.elements[1] = e.arcTanAngle(-Ce.TEMPVector30.z, -Ce.TEMPVector30.x);
        }, e.transformQuat = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t, o = r[0], s = r[1], l = r[2], h = a[0], c = a[1], u = a[2], _ = a[3], d = _ * o + c * l - u * s, f = _ * s + u * o - h * l, m = _ * l + h * s - c * o, p = -h * o - c * s - u * l;
            i[0] = d * _ + p * -h + f * -u - m * -c, i[1] = f * _ + p * -c + m * -h - d * -u, 
            i[2] = m * _ + p * -u + d * -c - f * -h;
        }, e.quaterionNormalize = function(e, t) {
            var n = e[0], i = e[1], r = e[2], a = e[3], o = n * n + i * i + r * r + a * a;
            o > 0 && (o = 1 / Math.sqrt(o), t[0] = n * o, t[1] = i * o, t[2] = r * o, t[3] = a * o);
        }, e.quaterionSlerp = function(e, t, n, i) {
            var r, a, o, s, l, h = e[0], c = e[1], u = e[2], _ = e[3], d = t[0], f = t[1], m = t[2], p = t[3];
            (a = h * d + c * f + u * m + _ * p) < 0 && (a = -a, d = -d, f = -f, m = -m, p = -p), 
            1 - a > 1e-6 ? (r = Math.acos(a), o = Math.sin(r), s = Math.sin((1 - n) * r) / o, 
            l = Math.sin(n * r) / o) : (s = 1 - n, l = n), i[0] = s * h + l * d, i[1] = s * c + l * f, 
            i[2] = s * u + l * m, i[3] = s * _ + l * p;
        }, e.quaternionMultiply = function(e, t, n) {
            var i = e[0], r = e[1], a = e[2], o = e[3], s = t[0], l = t[1], h = t[2], c = t[3], u = r * h - a * l, _ = a * s - i * h, d = i * l - r * s, f = i * s + r * l + a * h;
            n[0] = i * c + s * o + u, n[1] = r * c + l * o + _, n[2] = a * c + h * o + d, n[3] = o * c - f;
        }, e.quaternionWeight = function(e, t, n) {
            n[0] = e[0] * t, n[1] = e[1] * t, n[2] = e[2] * t, n[3] = e[3];
        }, e.quaternionInvert = function(e, t) {
            var n = e[0], i = e[1], r = e[2], a = e[3], o = n * n + i * i + r * r + a * a, s = o ? 1 / o : 0;
            t[0] = -n * s, t[1] = -i * s, t[2] = -r * s, t[3] = a * s;
        }, e.quaternionConjugate = function(e, t, n) {
            n[0] = -e[t], n[1] = -e[t + 1], n[2] = -e[t + 2], n[3] = e[t + 3];
        }, e.scaleWeight = function(e, t, n) {
            var i = e[0], r = e[1], a = e[2];
            n[0] = i > 0 ? Math.pow(Math.abs(i), t) : -Math.pow(Math.abs(i), t), n[1] = r > 0 ? Math.pow(Math.abs(r), t) : -Math.pow(Math.abs(r), t), 
            n[2] = a > 0 ? Math.pow(Math.abs(a), t) : -Math.pow(Math.abs(a), t);
        }, e.scaleBlend = function(t, n, i, r) {
            var a = e._tempVector3Array0, o = e._tempVector3Array1;
            e.scaleWeight(t, 1 - i, a), e.scaleWeight(n, i, o);
            var s = i > .5 ? n : t;
            r[0] = s[0] > 0 ? Math.abs(a[0] * o[0]) : -Math.abs(a[0] * o[0]), r[1] = s[1] > 0 ? Math.abs(a[1] * o[1]) : -Math.abs(a[1] * o[1]), 
            r[2] = s[2] > 0 ? Math.abs(a[2] * o[2]) : -Math.abs(a[2] * o[2]);
        }, e.matrix4x4MultiplyFFF = function(e, t, n) {
            var i, r, a, o, s;
            if (n === t) for (t = new Float32Array(16), i = 0; i < 16; ++i) t[i] = n[i];
            var l = t[0], h = t[1], c = t[2], u = t[3], _ = t[4], d = t[5], f = t[6], m = t[7], p = t[8], T = t[9], E = t[10], v = t[11], g = t[12], S = t[13], R = t[14], A = t[15];
            for (i = 0; i < 4; i++) r = e[i], a = e[i + 4], o = e[i + 8], s = e[i + 12], n[i] = r * l + a * h + o * c + s * u, 
            n[i + 4] = r * _ + a * d + o * f + s * m, n[i + 8] = r * p + a * T + o * E + s * v, 
            n[i + 12] = r * g + a * S + o * R + s * A;
        }, e.matrix4x4MultiplyFFFForNative = function(e, t, n) {
            E.instance.matrix4x4Multiply(e, t, n);
        }, e.matrix4x4MultiplyMFM = function(t, n, i) {
            e.matrix4x4MultiplyFFF(t.elements, n, i.elements);
        }, e._buildTexture2D = function(e, t, n, i, r) {
            void 0 === r && (r = !1);
            var a = new P(e, t, n, r, !0);
            return a.anisoLevel = 1, a.filterMode = 0, j._generateTexture2D(a, e, t, i), a;
        }, e._tempVector3Array0 = new Float32Array(3), e._tempVector3Array1 = new Float32Array(3), 
        e._tempArray4_0 = new Float32Array(4), e._tempArray16_0 = new Float32Array(16), 
        e._tempArray16_1 = new Float32Array(16), e._tempArray16_2 = new Float32Array(16), 
        e._tempArray16_3 = new Float32Array(16), i(e, [ "_tempVector3_0", function() {
            return this._tempVector3_0 = new dn();
        }, "_tempVector3_1", function() {
            return this._tempVector3_1 = new dn();
        }, "_tempVector3_2", function() {
            return this._tempVector3_2 = new dn();
        }, "_tempVector3_3", function() {
            return this._tempVector3_3 = new dn();
        }, "_tempVector3_4", function() {
            return this._tempVector3_4 = new dn();
        }, "_tempVector3_5", function() {
            return this._tempVector3_5 = new dn();
        }, "_tempVector3_6", function() {
            return this._tempVector3_6 = new dn();
        }, "_compIdToNode", function() {
            return this._compIdToNode = new Object();
        } ]), e;
    }(), Xe = (function() {
        function e() {}
        r(e, "laya.d3.math.ContainmentType"), e.Disjoint = 0, e.Contains = 1, e.Intersects = 2;
    }(), function() {
        function e() {}
        return r(e, "laya.d3.loaders.LoadModelV05"), e.parse = function(t, n, i, r) {
            e._mesh = i, e._subMeshes = r, e._version = n, e._readData = t, e.READ_DATA(), e.READ_BLOCK(), 
            e.READ_STRINGS();
            for (var a = 0, o = e._BLOCK.count; a < o; a++) {
                e._readData.pos = e._BLOCK.blockStarts[a];
                var s = e._readData.getUint16(), l = e._strings[s], h = e["READ_" + l];
                if (null == h) throw new Error("model file err,no this function:" + s + " " + l);
                h.call();
            }
            e._mesh._bindPoseIndices = new Uint16Array(e._bindPoseIndices), e._bindPoseIndices.length = 0, 
            e._strings.length = 0, e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null;
        }, e._readString = function() {
            return e._strings[e._readData.getUint16()];
        }, e.READ_DATA = function() {
            e._DATA.offset = e._readData.getUint32(), e._DATA.size = e._readData.getUint32();
        }, e.READ_BLOCK = function() {
            for (var t = e._BLOCK.count = e._readData.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; r < t; r++) n.push(e._readData.getUint32()), 
            i.push(e._readData.getUint32());
        }, e.READ_STRINGS = function() {
            var t = e._readData.getUint32(), n = e._readData.getUint16(), i = e._readData.pos;
            e._readData.pos = t + e._DATA.offset;
            for (var r = 0; r < n; r++) e._strings[r] = e._readData.readUTFString();
            e._readData.pos = i;
        }, e.READ_MESH = function() {
            var t = 0, n = 0, i = (e._readString(), e._readData.__getBuffer()), r = e._readData.getInt16(), a = e._DATA.offset;
            for (t = 0; t < r; t++) {
                var s = a + e._readData.getUint32(), l = e._readData.getUint32(), h = e._readString(), c = je.getVertexDeclaration(h, !1), u = c.vertexStride, _ = new ArrayBuffer(u * l), d = new Float32Array(_), f = h.split(","), m = f.length;
                switch (e._version) {
                  case "LAYAMODEL:05":
                    d = new Float32Array(i.slice(s, s + l * u));
                    break;

                  case "LAYAMODEL:COMPRESSION_05":
                    var p = e._readData.pos;
                    d = new Float32Array(_);
                    var T = new Uint8Array(_);
                    e._readData.pos = s;
                    for (var E = 0; E < l; E++) for (var v = 0, g = E * u, S = 0; S < m; S++) switch (f[S]) {
                      case "POSITION":
                        d[v = g / 4] = St.convertToNumber(e._readData.getUint16()), d[v + 1] = St.convertToNumber(e._readData.getUint16()), 
                        d[v + 2] = St.convertToNumber(e._readData.getUint16()), g += 12;
                        break;

                      case "NORMAL":
                        d[v = g / 4] = e._readData.getUint8() / 127.5 - 1, d[v + 1] = e._readData.getUint8() / 127.5 - 1, 
                        d[v + 2] = e._readData.getUint8() / 127.5 - 1, g += 12;
                        break;

                      case "COLOR":
                        d[v = g / 4] = e._readData.getUint8() / 255, d[v + 1] = e._readData.getUint8() / 255, 
                        d[v + 2] = e._readData.getUint8() / 255, d[v + 3] = e._readData.getUint8() / 255, 
                        g += 16;
                        break;

                      case "UV":
                      case "UV1":
                        d[v = g / 4] = St.convertToNumber(e._readData.getUint16()), d[v + 1] = St.convertToNumber(e._readData.getUint16()), 
                        g += 8;
                        break;

                      case "BLENDWEIGHT":
                        d[v = g / 4] = e._readData.getUint8() / 255, d[v + 1] = e._readData.getUint8() / 255, 
                        d[v + 2] = e._readData.getUint8() / 255, d[v + 3] = e._readData.getUint8() / 255, 
                        g += 16;
                        break;

                      case "BLENDINDICES":
                        T[g] = e._readData.getUint8(), T[g + 1] = e._readData.getUint8(), T[g + 2] = e._readData.getUint8(), 
                        T[g + 3] = e._readData.getUint8(), g += 4;
                        break;

                      case "TANGENT":
                        d[v = g / 4] = e._readData.getUint8() / 127.5 - 1, d[v + 1] = e._readData.getUint8() / 127.5 - 1, 
                        d[v + 2] = e._readData.getUint8() / 127.5 - 1, d[v + 3] = e._readData.getUint8() / 127.5 - 1, 
                        g += 16;
                    }
                    e._readData.pos = p;
                }
                var R = new Kt(_.byteLength, 35044, !0);
                R.vertexDeclaration = c, R.setData(d), e._mesh._vertexBuffers.push(R), e._mesh._vertexCount += R.vertexCount, 
                n += 4 * d.length;
            }
            var A = a + e._readData.getUint32(), I = e._readData.getUint32(), D = new Uint16Array(i.slice(A, A + I)), y = new qt("ushort", I / 2, 35044, !0);
            y.setData(D), e._mesh._indexBuffer = y, n += 2 * y.indexCount, e._mesh._setCPUMemory(n), 
            e._mesh._setGPUMemory(n);
            var M = e._mesh._boneNames = [], C = e._readData.getUint16();
            for (M.length = C, t = 0; t < C; t++) M[t] = e._strings[e._readData.getUint16()];
            var x = e._readData.getUint32(), O = e._readData.getUint32(), L = new Float32Array(i.slice(a + x, a + x + O)), N = L.length, V = N / 16, P = e._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * N);
            for (e._mesh._inverseBindPoses = o(V), t = 0; t < N; t += 16) {
                var w = new ut(L[t + 0], L[t + 1], L[t + 2], L[t + 3], L[t + 4], L[t + 5], L[t + 6], L[t + 7], L[t + 8], L[t + 9], L[t + 10], L[t + 11], L[t + 12], L[t + 13], L[t + 14], L[t + 15], new Float32Array(P, 4 * t, 16));
                e._mesh._inverseBindPoses[t / 16] = w;
            }
            return !0;
        }, e.READ_SUBMESH = function() {
            var t = e._readData.__getBuffer(), n = new Zt(e._mesh), i = e._readData.getInt16(), r = e._readData.getUint32(), a = e._readData.getUint32(), o = e._mesh._indexBuffer;
            n._indexBuffer = o, n._indexStart = r, n._indexCount = a, n._indices = new Uint16Array(o.getData().buffer, 2 * r, a);
            var s = e._mesh._vertexBuffers[i];
            n._vertexBuffer = s;
            var l = n._bufferState;
            l.bind(), l.applyVertexBuffer(s), l.applyIndexBuffer(o), l.unBind();
            var h = e._DATA.offset, c = n._subIndexBufferStart, u = n._subIndexBufferCount, _ = n._boneIndicesList, d = e._readData.getUint16();
            c.length = d, u.length = d, _.length = d;
            for (var f = e._mesh._skinDataPathMarks, m = e._bindPoseIndices, p = e._subMeshes.length, T = 0; T < d; T++) {
                c[T] = e._readData.getUint32(), u[T] = e._readData.getUint32();
                for (var E = e._readData.getUint32(), v = e._readData.getUint32(), g = _[T] = new Uint16Array(t.slice(h + E, h + E + v)), S = 0, R = g.length; S < R; S++) {
                    var A = g[S], I = m.indexOf(A);
                    -1 === I ? (g[S] = m.length, m.push(A), f.push([ p, T, S ])) : g[S] = I;
                }
            }
            return e._subMeshes.push(n), !0;
        }, e._strings = [], e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null, 
        e._bindPoseIndices = [], i(e, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), e;
    }()), We = function() {
        function e() {
            this._type = 0, this._constant = NaN, this._constantMin = NaN, this._constantMax = NaN;
        }
        r(e, "laya.d3.core.particleShuriKen.module.StartFrame");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            t._type = this._type, t._constant = this._constant, t._constantMin = this._constantMin, 
            t._constantMax = this._constantMax;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "constant", function() {
            return this._constant;
        }), a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "constantMin", function() {
            return this._constantMin;
        }), a(0, t, "constantMax", function() {
            return this._constantMax;
        }), e.createByConstant = function(t) {
            var n = new e();
            return n._type = 0, n._constant = t, n;
        }, e.createByRandomTwoConstant = function(t, n) {
            var i = new e();
            return i._type = 1, i._constantMin = t, i._constantMax = n, i;
        }, e;
    }(), Ye = function() {
        function e() {}
        return r(e, "laya.d3.loaders.LoadModelV04"), e.parse = function(t, n, i, r) {
            e._mesh = i, e._subMeshes = r, e._version = n, e._readData = t, e.READ_DATA(), e.READ_BLOCK(), 
            e.READ_STRINGS();
            for (var a = 0, o = e._BLOCK.count; a < o; a++) {
                e._readData.pos = e._BLOCK.blockStarts[a];
                var s = e._readData.getUint16(), l = e._strings[s], h = e["READ_" + l];
                if (null == h) throw new Error("model file err,no this function:" + s + " " + l);
                h.call();
            }
            e._mesh._bindPoseIndices = new Uint16Array(e._bindPoseIndices), e._bindPoseIndices.length = 0, 
            e._strings.length = 0, e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null;
        }, e._readString = function() {
            return e._strings[e._readData.getUint16()];
        }, e.READ_DATA = function() {
            e._DATA.offset = e._readData.getUint32(), e._DATA.size = e._readData.getUint32();
        }, e.READ_BLOCK = function() {
            for (var t = e._BLOCK.count = e._readData.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; r < t; r++) n.push(e._readData.getUint32()), 
            i.push(e._readData.getUint32());
        }, e.READ_STRINGS = function() {
            var t = e._readData.getUint32(), n = e._readData.getUint16(), i = e._readData.pos;
            e._readData.pos = t + e._DATA.offset;
            for (var r = 0; r < n; r++) e._strings[r] = e._readData.readUTFString();
            e._readData.pos = i;
        }, e.READ_MESH = function() {
            e._readString();
            var t = e._readData.__getBuffer(), n = 0, i = 0, r = e._readData.getInt16(), a = e._DATA.offset;
            for (n = 0; n < r; n++) {
                var s, l = a + e._readData.getUint32(), h = e._readData.getUint32(), c = new Float32Array(t.slice(l, l + h)), u = e._readString();
                switch (e._version) {
                  case "LAYAMODEL:0301":
                  case "LAYAMODEL:0400":
                    s = je.getVertexDeclaration(u);
                    break;

                  case "LAYAMODEL:0401":
                    s = je.getVertexDeclaration(u, !1);
                    break;

                  default:
                    throw new Error("LoadModelV03: unknown version.");
                }
                if (!s) throw new Error("LoadModelV03: unknown vertexDeclaration.");
                var _ = new Kt(4 * c.length, 35044, !0);
                _.vertexDeclaration = s, _.setData(c), e._mesh._vertexBuffers.push(_), e._mesh._vertexCount += _.vertexCount, 
                i += 4 * c.length;
            }
            var d = a + e._readData.getUint32(), f = e._readData.getUint32(), m = new Uint16Array(t.slice(d, d + f)), p = new qt("ushort", f / 2, 35044, !0);
            p.setData(m), e._mesh._indexBuffer = p, i += 2 * p.indexCount, e._mesh._setCPUMemory(i), 
            e._mesh._setGPUMemory(i);
            var T = e._mesh._boneNames = [], E = e._readData.getUint16();
            for (T.length = E, n = 0; n < E; n++) T[n] = e._strings[e._readData.getUint16()];
            e._readData.pos += 8;
            var v = e._readData.getUint32(), g = e._readData.getUint32(), S = new Float32Array(t.slice(a + v, a + v + g)), R = S.length, A = R / 16, I = e._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * R);
            for (e._mesh._inverseBindPoses = o(A), n = 0; n < R; n += 16) {
                var D = new ut(S[n + 0], S[n + 1], S[n + 2], S[n + 3], S[n + 4], S[n + 5], S[n + 6], S[n + 7], S[n + 8], S[n + 9], S[n + 10], S[n + 11], S[n + 12], S[n + 13], S[n + 14], S[n + 15], new Float32Array(I, 4 * n, 16));
                e._mesh._inverseBindPoses[n / 16] = D;
            }
            return !0;
        }, e.READ_SUBMESH = function() {
            var t = e._readData.__getBuffer(), n = new Zt(e._mesh), i = e._readData.getInt16();
            e._readData.getUint32(), e._readData.getUint32();
            var r = e._readData.getUint32(), a = e._readData.getUint32(), o = e._mesh._indexBuffer;
            n._indexBuffer = o, n._indexStart = r, n._indexCount = a, n._indices = new Uint16Array(o.getData().buffer, 2 * r, a);
            var s = e._mesh._vertexBuffers[i];
            n._vertexBuffer = s;
            var l = n._bufferState;
            l.bind(), l.applyVertexBuffer(s), l.applyIndexBuffer(o), l.unBind();
            var h = e._DATA.offset, c = n._subIndexBufferStart, u = n._subIndexBufferCount, _ = n._boneIndicesList, d = e._readData.getUint16();
            c.length = d, u.length = d, _.length = d;
            for (var f = e._mesh._skinDataPathMarks, m = e._bindPoseIndices, p = e._subMeshes.length, T = 0; T < d; T++) {
                c[T] = e._readData.getUint32(), u[T] = e._readData.getUint32();
                for (var E = e._readData.getUint32(), v = e._readData.getUint32(), g = _[T] = new Uint16Array(t.slice(h + E, h + E + v)), S = 0, R = g.length; S < R; S++) {
                    var A = g[S], I = m.indexOf(A);
                    -1 === I ? (g[S] = m.length, m.push(A), f.push([ p, T, S ])) : g[S] = I;
                }
            }
            return e._subMeshes.push(n), !0;
        }, e._strings = [], e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null, 
        e._bindPoseIndices = [], i(e, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), e;
    }(), Ze = function() {
        function e() {
            this._indexInList = -1, this._identifier = -1, this._position = new fn();
        }
        r(e, "laya.d3.Touch");
        var t = e.prototype;
        return n.imps(t, {
            "laya.resource.ISingletonElement": !0
        }), t._getIndexInList = function() {
            return this._indexInList;
        }, t._setIndexInList = function(e) {
            this._indexInList = e;
        }, a(0, t, "identifier", function() {
            return this._identifier;
        }), a(0, t, "position", function() {
            return this._position;
        }), e;
    }(), Ke = function() {
        function e() {
            this._type = 0, this._constant = 0, this._overTime = null, this._constantMin = 0, 
            this._constantMax = 0, this._overTimeMin = null, this._overTimeMax = null;
        }
        r(e, "laya.d3.core.particleShuriKen.module.FrameOverTime");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            t._type = this._type, t._constant = this._constant, this._overTime.cloneTo(t._overTime), 
            t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._overTimeMin.cloneTo(t._overTimeMin), 
            this._overTimeMax.cloneTo(t._overTimeMax);
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "frameOverTimeData", function() {
            return this._overTime;
        }), a(0, t, "constant", function() {
            return this._constant;
        }), a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "frameOverTimeDataMin", function() {
            return this._overTimeMin;
        }), a(0, t, "constantMin", function() {
            return this._constantMin;
        }), a(0, t, "frameOverTimeDataMax", function() {
            return this._overTimeMax;
        }), a(0, t, "constantMax", function() {
            return this._constantMax;
        }), e.createByConstant = function(t) {
            var n = new e();
            return n._type = 0, n._constant = t, n;
        }, e.createByOverTime = function(t) {
            var n = new e();
            return n._type = 1, n._overTime = t, n;
        }, e.createByRandomTwoConstant = function(t, n) {
            var i = new e();
            return i._type = 2, i._constantMin = t, i._constantMax = n, i;
        }, e.createByRandomTwoOverTime = function(t, n) {
            var i = new e();
            return i._type = 3, i._overTimeMin = t, i._overTimeMax = n, i;
        }, e;
    }(), je = function() {
        function e() {}
        return r(e, "laya.d3.graphics.Vertex.VertexMesh"), e.getVertexDeclaration = function(t, n) {
            void 0 === n && (n = !0);
            var i = e._vertexDeclarationMap[t];
            if (!i) {
                for (var r = t.split(","), a = 0, o = [], s = 0, l = r.length; s < l; s++) {
                    var h;
                    switch (r[s]) {
                      case "POSITION":
                        h = new Re(a, "vector3", 0), a += 12;
                        break;

                      case "NORMAL":
                        h = new Re(a, "vector3", 3), a += 12;
                        break;

                      case "COLOR":
                        h = new Re(a, "vector4", 1), a += 16;
                        break;

                      case "UV":
                        h = new Re(a, "vector2", 2), a += 8;
                        break;

                      case "UV1":
                        h = new Re(a, "vector2", 8), a += 8;
                        break;

                      case "BLENDWEIGHT":
                        h = new Re(a, "vector4", 7), a += 16;
                        break;

                      case "BLENDINDICES":
                        n ? (h = new Re(a, "vector4", 6), a += 16) : (h = new Re(a, "byte4", 6), a += 4);
                        break;

                      case "TANGENT":
                        h = new Re(a, "vector4", 5), a += 16;
                        break;

                      default:
                        throw "VertexMesh: unknown vertex flag.";
                    }
                    o.push(h);
                }
                i = new G(a, o), e._vertexDeclarationMap[t] = i;
            }
            return i;
        }, e.MESH_POSITION0 = 0, e.MESH_COLOR0 = 1, e.MESH_TEXTURECOORDINATE0 = 2, e.MESH_NORMAL0 = 3, 
        e.MESH_TANGENT0 = 5, e.MESH_BLENDINDICES0 = 6, e.MESH_BLENDWEIGHT0 = 7, e.MESH_TEXTURECOORDINATE1 = 8, 
        e._vertexDeclarationMap = {}, e;
    }(), qe = function() {
        function e(e) {
            this._angularVelocity = null, this.enbale = !1, this._angularVelocity = e;
        }
        r(e, "laya.d3.core.particleShuriKen.module.RotationOverLifetime");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            this._angularVelocity.cloneTo(t._angularVelocity), t.enbale = this.enbale;
        }, t.clone = function() {
            var e;
            switch (this._angularVelocity.type) {
              case 0:
                e = this._angularVelocity.separateAxes ? re.createByConstantSeparate(this._angularVelocity.constantSeparate.clone()) : re.createByConstant(this._angularVelocity.constant);
                break;

              case 1:
                e = this._angularVelocity.separateAxes ? re.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone()) : re.createByGradient(this._angularVelocity.gradient.clone());
                break;

              case 2:
                e = this._angularVelocity.separateAxes ? re.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone()) : re.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);
                break;

              case 3:
                e = this._angularVelocity.separateAxes ? re.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone()) : re.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());
            }
            var t = new this.constructor(e);
            return t.enbale = this.enbale, t;
        }, a(0, t, "angularVelocity", function() {
            return this._angularVelocity;
        }), e;
    }(), Qe = function() {
        function e(e, t, n, i) {
            this._position = null, this._normal = null, this._textureCoord0 = null, this._textureCoord1 = null, 
            this._position = e, this._normal = t, this._textureCoord0 = n, this._textureCoord1 = i;
        }
        r(e, "laya.d3.graphics.Vertex.VertexPositionTerrain");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.graphics.IVertex": !0
        }), a(0, t, "normal", function() {
            return this._normal;
        }), a(0, t, "position", function() {
            return this._position;
        }), a(0, t, "textureCoord0", function() {
            return this._textureCoord0;
        }), a(0, t, "textureCoord1", function() {
            return this._textureCoord1;
        }), a(0, t, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }), a(1, e, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }), e.TERRAIN_POSITION0 = 0, e.TERRAIN_NORMAL0 = 1, e.TERRAIN_TEXTURECOORDINATE0 = 2, 
        e.TERRAIN_TEXTURECOORDINATE1 = 3, i(e, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new G(40, [ new Re(0, "vector3", 0), new Re(12, "vector3", 1), new Re(24, "vector2", 2), new Re(32, "vector2", 3) ]);
        } ]), e;
    }(), Je = function() {
        function e() {}
        r(e, "laya.d3.component.AnimatorPlayState");
        var t = e.prototype;
        return t._resetPlayState = function(e) {
            this._finish = !1, this._startPlayTime = e, this._elapsedTime = e, this._playEventIndex = 0;
        }, t._cloneTo = function(e) {
            e._finish = this._finish, e._startPlayTime = this._startPlayTime, e._elapsedTime = this._elapsedTime, 
            e._playEventIndex = this._playEventIndex;
        }, a(0, t, "normalizedTime", function() {
            return this._normalizedTime;
        }), a(0, t, "duration", function() {
            return this._duration;
        }), e;
    }(), $e = function() {
        function e(e) {
            this._subShaders = [], this._name = e;
        }
        r(e, "laya.d3.shader.Shader3D");
        var t = e.prototype;
        return t.addSubShader = function(e) {
            this._subShaders.push(e), e._owner = this;
        }, t.getSubShaderAt = function(e) {
            return this._subShaders[e];
        }, e.propertyNameToID = function(t) {
            if (null != e._propertyNameMap[t]) return e._propertyNameMap[t];
            var n = e._propertyNameCounter++;
            return e._propertyNameMap[t] = n, n;
        }, e.addInclude = function(e, t) {
            C.addInclude(e, t);
        }, e.registerPublicDefine = function(t) {
            var n = Math.pow(2, e._publicCounter++);
            return e._globleDefines[n] = t, n;
        }, e.compileShader = function(e, t, n, i, r, a) {
            var o = laya.d3.shader.Shader3D.find(e);
            if (o) {
                var s = o.getSubShaderAt(t);
                if (s) {
                    var l = s._passes[n];
                    l ? F.shaderHighPrecision ? l.withCompile(i, r, a) : l.withCompile(i - laya.d3.shader.Shader3D.SHADERDEFINE_HIGHPRECISION, r, a) : console.warn("Shader3D: unknown passIndex.");
                } else console.warn("Shader3D: unknown subShaderIndex.");
            } else console.warn("Shader3D: unknown shader name.");
        }, e.add = function(t) {
            return laya.d3.shader.Shader3D._preCompileShader[t] = new e(t);
        }, e.find = function(e) {
            return laya.d3.shader.Shader3D._preCompileShader[e];
        }, e.PERIOD_CUSTOM = 0, e.PERIOD_MATERIAL = 1, e.PERIOD_SPRITE = 2, e.PERIOD_CAMERA = 3, 
        e.PERIOD_SCENE = 4, e.SHADERDEFINE_HIGHPRECISION = 0, e._propertyNameCounter = 0, 
        e._propertyNameMap = {}, e._publicCounter = 0, e._globleDefines = [], e._preCompileShader = {}, 
        e.debugMode = !1, e;
    }(), et = function() {
        function e() {
            this.length = 0, this.elements = [];
        }
        r(e, "laya.d3.component.SingletonList");
        return e.prototype._add = function(e) {
            this.length === this.elements.length ? this.elements.push(e) : this.elements[this.length] = e;
        }, e;
    }(), tt = function() {
        function e() {
            this.alphaMap = null, this.detailID = null, this.normalMap = null;
        }
        return r(e, "laya.d3.terrain.unit.ChunkInfo"), e;
    }(), nt = function() {
        function e() {
            this._type = 0, this._constant = null, this._constantMin = null, this._constantMax = null, 
            this._gradient = null, this._gradientMin = null, this._gradientMax = null;
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientColor");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            t._type = this._type, this._constant.cloneTo(t._constant), this._constantMin.cloneTo(t._constantMin), 
            this._constantMax.cloneTo(t._constantMax), this._gradient.cloneTo(t._gradient), 
            this._gradientMin.cloneTo(t._gradientMin), this._gradientMax.cloneTo(t._gradientMax);
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradient", function() {
            return this._gradient;
        }), a(0, t, "constant", function() {
            return this._constant;
        }), a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "gradientMin", function() {
            return this._gradientMin;
        }), a(0, t, "constantMin", function() {
            return this._constantMin;
        }), a(0, t, "gradientMax", function() {
            return this._gradientMax;
        }), a(0, t, "constantMax", function() {
            return this._constantMax;
        }), e.createByConstant = function(t) {
            var n = new e();
            return n._type = 0, n._constant = t, n;
        }, e.createByGradient = function(t) {
            var n = new e();
            return n._type = 1, n._gradient = t, n;
        }, e.createByRandomTwoConstant = function(t, n) {
            var i = new e();
            return i._type = 2, i._constantMin = t, i._constantMax = n, i;
        }, e.createByRandomTwoGradient = function(t, n) {
            var i = new e();
            return i._type = 3, i._gradientMin = t, i._gradientMax = n, i;
        }, e;
    }(), it = function() {
        function e(e, t) {
            this._nativeDiscreteDynamicsWorld = null, this._nativeCollisionWorld = null, this._nativeDispatcher = null, 
            this._nativeCollisionConfiguration = null, this._nativeBroadphase = null, this._nativeSolverInfo = null, 
            this._nativeDispatchInfo = null, this._nativeClosestRayResultCallback = null, this._nativeAllHitsRayResultCallback = null, 
            this._nativeClosestConvexResultCallback = null, this._nativeAllConvexResultCallback = null, 
            this._updatedRigidbodies = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60, 
            this._gravity = new dn(0, -10, 0), this._nativeVector3Zero = new Dt._physics3D.btVector3(0, 0, 0), 
            this._nativeDefaultQuaternion = new Dt._physics3D.btQuaternion(0, 0, 0, -1), this._collisionsUtils = new At(), 
            this._previousFrameCollisions = [], this._currentFrameCollisions = [], this._physicsUpdateList = new vn(), 
            this._characters = [], void 0 === t && (t = 0), this.maxSubSteps = e.maxSubSteps, 
            this.fixedTimeStep = e.fixedTimeStep;
            var n = Dt._physics3D;
            this._nativeCollisionConfiguration = new n.btDefaultCollisionConfiguration(), this._nativeDispatcher = new n.btCollisionDispatcher(this._nativeCollisionConfiguration), 
            this._nativeBroadphase = new n.btDbvtBroadphase(), this._nativeBroadphase.getOverlappingPairCache().setInternalGhostPairCallback(new n.btGhostPairCallback());
            var i = e.flags;
            if (1 & i) this._nativeCollisionWorld = new n.btCollisionWorld(this._nativeDispatcher, this._nativeBroadphase, this._nativeCollisionConfiguration); else {
                if (2 & i) throw "PhysicsSimulation:SoftBody processing is not yet available";
                var r = new n.btSequentialImpulseConstraintSolver();
                this._nativeDiscreteDynamicsWorld = new n.btDiscreteDynamicsWorld(this._nativeDispatcher, this._nativeBroadphase, r, this._nativeCollisionConfiguration), 
                this._nativeCollisionWorld = this._nativeDiscreteDynamicsWorld;
            }
            this._nativeDiscreteDynamicsWorld && (this._nativeSolverInfo = this._nativeDiscreteDynamicsWorld.getSolverInfo(), 
            this._nativeDispatchInfo = this._nativeDiscreteDynamicsWorld.getDispatchInfo()), 
            this._nativeClosestRayResultCallback = new n.ClosestRayResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            this._nativeAllHitsRayResultCallback = new n.AllHitsRayResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            this._nativeClosestConvexResultCallback = new n.ClosestConvexResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            this._nativeAllConvexResultCallback = new n.AllConvexResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            n._btGImpactCollisionAlgorithm_RegisterAlgorithm(this._nativeDispatcher.a);
        }
        r(e, "laya.d3.physics.PhysicsSimulation");
        var t = e.prototype;
        return t._simulate = function(e) {
            this._updatedRigidbodies = 0, this._nativeDiscreteDynamicsWorld ? this._nativeDiscreteDynamicsWorld.stepSimulation(e, this.maxSubSteps, this.fixedTimeStep) : this._nativeCollisionWorld.PerformDiscreteCollisionDetection();
        }, t._destroy = function() {
            var e = Dt._physics3D;
            this._nativeDiscreteDynamicsWorld ? (e.destroy(this._nativeDiscreteDynamicsWorld), 
            this._nativeDiscreteDynamicsWorld = null) : (e.destroy(this._nativeCollisionWorld), 
            this._nativeCollisionWorld = null), e.destroy(this._nativeBroadphase), this._nativeBroadphase = null, 
            e.destroy(this._nativeDispatcher), this._nativeDispatcher = null, e.destroy(this._nativeCollisionConfiguration), 
            this._nativeCollisionConfiguration = null;
        }, t._addPhysicsCollider = function(e, t, n) {
            this._nativeCollisionWorld.addCollisionObject(e._nativeColliderObject, t, n);
        }, t._removePhysicsCollider = function(e) {
            this._nativeCollisionWorld.removeCollisionObject(e._nativeColliderObject);
        }, t._addRigidBody = function(e, t, n) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.addRigidBody(e._nativeColliderObject, t, n);
        }, t._removeRigidBody = function(e) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.removeRigidBody(e._nativeColliderObject);
        }, t._addCharacter = function(e, t, n) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.addCollisionObject(e._nativeColliderObject, t, n), this._nativeCollisionWorld.addAction(e._nativeKinematicCharacter);
        }, t._removeCharacter = function(e) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.removeCollisionObject(e._nativeColliderObject), this._nativeCollisionWorld.removeAction(e._nativeKinematicCharacter);
        }, t.raycastFromTo = function(t, n, i, r, a) {
            void 0 === r && (r = fe.COLLISIONFILTERGROUP_ALLFILTER), void 0 === a && (a = fe.COLLISIONFILTERGROUP_ALLFILTER);
            var o = this._nativeClosestRayResultCallback, s = e._nativeTempVector30, l = e._nativeTempVector31, h = t.elements, c = n.elements;
            if (s.setValue(-h[0], h[1], h[2]), l.setValue(-c[0], c[1], c[2]), o.set_m_rayFromWorld(s), 
            o.set_m_rayToWorld(l), o.set_m_collisionFilterGroup(r), o.set_m_collisionFilterMask(a), 
            o.set_m_collisionObject(null), o.set_m_closestHitFraction(1), this._nativeCollisionWorld.rayTest(s, l, o), 
            o.hasHit()) {
                if (i) {
                    i.succeeded = !0, i.collider = Pt._physicObjectsMap[o.get_m_collisionObject().getUserIndex()], 
                    i.hitFraction = o.get_m_closestHitFraction();
                    var u = o.get_m_hitPointWorld(), _ = i.point.elements;
                    _[0] = -u.x(), _[1] = u.y(), _[2] = u.z();
                    var d = o.get_m_hitNormalWorld(), f = i.normal.elements;
                    f[0] = -d.x(), f[1] = d.y(), f[2] = d.z();
                }
                return !0;
            }
            return i && (i.succeeded = !1), !1;
        }, t.raycastAllFromTo = function(t, n, i, r, a) {
            void 0 === r && (r = fe.COLLISIONFILTERGROUP_ALLFILTER), void 0 === a && (a = fe.COLLISIONFILTERGROUP_ALLFILTER);
            var o = this._nativeAllHitsRayResultCallback, s = e._nativeTempVector30, l = e._nativeTempVector31;
            i.length = 0;
            var h = t.elements, c = n.elements;
            s.setValue(-h[0], h[1], h[2]), l.setValue(-c[0], c[1], c[2]), o.set_m_rayFromWorld(s), 
            o.set_m_rayToWorld(l), o.set_m_collisionFilterGroup(r), o.set_m_collisionFilterMask(a);
            var u = o.get_m_collisionObjects(), _ = o.get_m_hitPointWorld(), d = o.get_m_hitNormalWorld(), f = o.get_m_hitFractions();
            u.clear(), _.clear(), d.clear(), f.clear(), this._nativeCollisionWorld.rayTest(s, l, o);
            var m = u.size();
            if (m > 0) {
                this._collisionsUtils.recoverAllHitResultsPool();
                for (var p = 0; p < m; p++) {
                    var T = this._collisionsUtils.getHitResult();
                    i.push(T), T.succeeded = !0, T.collider = Pt._physicObjectsMap[u.at(p).getUserIndex()], 
                    T.hitFraction = f.at(p);
                    var E = _.at(p), v = T.point.elements;
                    v[0] = -E.x(), v[1] = E.y(), v[2] = E.z();
                    var g = d.at(p), S = T.normal.elements;
                    S[0] = -g.x(), S[1] = g.y(), S[2] = g.z();
                }
                return !0;
            }
            return !1;
        }, t.rayCast = function(t, n, i, r, a) {
            void 0 === i && (i = 2147483647), void 0 === r && (r = fe.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === a && (a = fe.COLLISIONFILTERGROUP_ALLFILTER);
            var o = t.origin, s = e._tempVector30;
            return dn.normalize(t.direction, s), dn.scale(s, i, s), dn.add(o, s, s), this.raycastFromTo(o, s, n, r, a);
        }, t.rayCastAll = function(t, n, i, r, a) {
            void 0 === i && (i = 2147483647), void 0 === r && (r = fe.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === a && (a = fe.COLLISIONFILTERGROUP_ALLFILTER);
            var o = t.origin, s = e._tempVector30;
            return dn.normalize(t.direction, s), dn.scale(s, i, s), dn.add(o, s, s), this.raycastAllFromTo(o, s, n, r, a);
        }, t.shapeCast = function(t, n, i, r, a, o, s, l, h) {
            void 0 === s && (s = fe.COLLISIONFILTERGROUP_ALLFILTER), void 0 === l && (l = fe.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === h && (h = 0);
            var c = this._nativeClosestConvexResultCallback, u = e._nativeTempVector30, _ = e._nativeTempVector31, d = e._nativeTempVector30, f = e._nativeTempVector31, m = e._nativeTempTransform0, p = e._nativeTempTransform1, T = t._nativeShape, E = n.elements, v = i.elements;
            if (u.setValue(-E[0], E[1], E[2]), _.setValue(-v[0], v[1], v[2]), c.set_m_collisionFilterGroup(s), 
            c.set_m_collisionFilterMask(l), m.setOrigin(u), p.setOrigin(_), a) {
                var g = a.elements;
                d.setValue(-g[0], g[1], g[2], -g[3]), m.setRotation(d);
            } else m.setRotation(this._nativeDefaultQuaternion);
            if (o) {
                var S = o.elements;
                f.setValue(-S[0], S[1], S[2], -S[2]), p.setRotation(f);
            } else p.setRotation(this._nativeDefaultQuaternion);
            if (c.set_m_hitCollisionObject(null), c.set_m_closestHitFraction(1), this._nativeCollisionWorld.convexSweepTest(T, m, p, c, h), 
            c.hasHit()) {
                if (r) {
                    r.succeeded = !0, r.collider = Pt._physicObjectsMap[c.get_m_hitCollisionObject().getUserIndex()], 
                    r.hitFraction = c.get_m_closestHitFraction();
                    var R = c.get_m_hitPointWorld(), A = c.get_m_hitNormalWorld(), I = r.point.elements, D = r.normal.elements;
                    I[0] = -R.x(), I[1] = R.y(), I[2] = R.z(), D[0] = -A.x(), D[1] = A.y(), D[2] = A.z();
                }
                return !0;
            }
            return r && (r.succeeded = !1), !1;
        }, t.shapeCastAll = function(t, n, i, r, a, o, s, l, h) {
            void 0 === s && (s = fe.COLLISIONFILTERGROUP_ALLFILTER), void 0 === l && (l = fe.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === h && (h = 0);
            var c = this._nativeAllConvexResultCallback, u = e._nativeTempVector30, _ = e._nativeTempVector31, d = e._nativeTempVector30, f = e._nativeTempVector31, m = e._nativeTempTransform0, p = e._nativeTempTransform1, T = t._nativeShape;
            r.length = 0;
            var E = n.elements, v = i.elements;
            if (u.setValue(-E[0], E[1], E[2]), _.setValue(-v[0], v[1], v[2]), c.set_m_collisionFilterGroup(s), 
            c.set_m_collisionFilterMask(l), m.setOrigin(u), p.setOrigin(_), a) {
                var g = a.elements;
                d.setValue(-g[0], g[1], g[2], -g[3]), m.setRotation(d);
            } else m.setRotation(this._nativeDefaultQuaternion);
            if (o) {
                var S = o.elements;
                f.setValue(-S[0], S[1], S[2], -S[2]), p.setRotation(f);
            } else p.setRotation(this._nativeDefaultQuaternion);
            var R = c.get_m_collisionObjects();
            R.clear(), this._nativeCollisionWorld.convexSweepTest(T, m, p, c, h);
            var A = R.size();
            if (A > 0) {
                for (var I = c.get_m_hitPointWorld(), D = c.get_m_hitNormalWorld(), y = c.get_m_hitFractions(), M = 0; M < A; M++) {
                    var C = this._collisionsUtils.getHitResult();
                    r.push(C), C.succeeded = !0, C.collider = Pt._physicObjectsMap[R.at(M).getUserIndex()], 
                    C.hitFraction = y.at(M);
                    var x = I.at(M), O = C.point.elements;
                    O[0] = -x.x(), O[1] = x.y(), O[2] = x.z();
                    var L = D.at(M), N = C.normal.elements;
                    N[0] = -L.x(), N[1] = L.y(), N[2] = L.z();
                }
                return !0;
            }
            return !1;
        }, t.addConstraint = function(e, t) {
            if (void 0 === t && (t = !1), !this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.addConstraint(e._nativeConstraint, t), e._simulation = this;
        }, t.removeConstraint = function(e) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.removeConstraint(e._nativeConstraint);
        }, t._updatePhysicsTransformFromRender = function() {
            for (var e = this._physicsUpdateList.elements, t = 0, n = this._physicsUpdateList.length; t < n; t++) {
                var i = e[t];
                i._derivePhysicsTransformation(!1), i._inPhysicUpdateListIndex = -1;
            }
            this._physicsUpdateList.length = 0;
        }, t._updateCharacters = function() {
            for (var e = 0, t = this._characters.length; e < t; e++) {
                var n = this._characters[e];
                n._updateTransformComponent(n._nativeColliderObject.getWorldTransform());
            }
        }, t._updateCollisions = function() {
            this._collisionsUtils.recoverAllContactPointsPool();
            var e = this._currentFrameCollisions;
            this._currentFrameCollisions = this._previousFrameCollisions, this._currentFrameCollisions.length = 0, 
            this._previousFrameCollisions = e;
            for (var t = L.loopCount, n = this._nativeDispatcher.getNumManifolds(), i = 0; i < n; i++) {
                var r = this._nativeDispatcher.getManifoldByIndexInternal(i), a = Pt._physicObjectsMap[r.getBody0().getUserIndex()], o = Pt._physicObjectsMap[r.getBody1().getUserIndex()], s = null, l = !1, h = null;
                if ((a.isTrigger || o.isTrigger) && (a.owner._needProcessTriggers || o.owner._needProcessTriggers)) for (var c = r.getNumContacts(), u = 0; u < c; u++) {
                    var _ = r.getContactPoint(u), d = _.getDistance();
                    if (d <= 0) {
                        h = (s = this._collisionsUtils.getCollision(a, o)).contacts, (l = s._updateFrame !== t) && (s._isTrigger = !0, 
                        h.length = 0);
                        break;
                    }
                } else if ((a.owner._needProcessCollisions || o.owner._needProcessCollisions) && (a._enableProcessCollisions || o._enableProcessCollisions)) for (c = r.getNumContacts(), 
                u = 0; u < c; u++) if (_ = r.getContactPoint(u), (d = _.getDistance()) <= 0) {
                    var f = this._collisionsUtils.getContactPoints();
                    f.colliderA = a, f.colliderB = o, f.distance = d;
                    var m = _.get_m_normalWorldOnB(), p = f.normal.elements;
                    p[0] = -m.x(), p[1] = m.y(), p[2] = m.z();
                    var T = _.get_m_positionWorldOnA(), E = f.positionOnA.elements;
                    E[0] = -T.x(), E[1] = T.y(), E[2] = T.z();
                    var v = _.get_m_positionWorldOnB(), g = f.positionOnB.elements;
                    g[0] = -v.x(), g[1] = v.y(), g[2] = v.z(), s || (h = (s = this._collisionsUtils.getCollision(a, o)).contacts, 
                    (l = s._updateFrame !== t) && (s._isTrigger = !1, h.length = 0)), h.push(f);
                }
                s && l && (this._currentFrameCollisions.push(s), s._setUpdateFrame(t));
            }
        }, t._eventScripts = function() {
            for (var e = L.loopCount, t = 0, n = this._currentFrameCollisions.length; t < n; t++) {
                var i = this._currentFrameCollisions[t], r = i._colliderA, a = i._colliderB;
                if (!r.destroyed && !a.destroyed) if (e - i._lastUpdateFrame == 1) {
                    var o = r.owner, s = o._scripts;
                    if (s) if (i._isTrigger) {
                        if (o._needProcessTriggers) for (var l = 0, h = s.length; l < h; l++) s[l].onTriggerStay(a);
                    } else if (o._needProcessCollisions) for (l = 0, h = s.length; l < h; l++) i.other = a, 
                    s[l].onCollisionStay(i);
                    var c = a.owner, u = c._scripts;
                    if (u) if (i._isTrigger) {
                        if (c._needProcessTriggers) for (l = 0, h = u.length; l < h; l++) u[l].onTriggerStay(r);
                    } else if (c._needProcessCollisions) for (l = 0, h = u.length; l < h; l++) i.other = r, 
                    u[l].onCollisionStay(i);
                } else {
                    if (o = r.owner, s = o._scripts) if (i._isTrigger) {
                        if (o._needProcessTriggers) for (l = 0, h = s.length; l < h; l++) s[l].onTriggerEnter(a);
                    } else if (o._needProcessCollisions) for (l = 0, h = s.length; l < h; l++) i.other = a, 
                    s[l].onCollisionEnter(i);
                    if (c = a.owner, u = c._scripts) if (i._isTrigger) {
                        if (c._needProcessTriggers) for (l = 0, h = u.length; l < h; l++) u[l].onTriggerEnter(r);
                    } else if (c._needProcessCollisions) for (l = 0, h = u.length; l < h; l++) i.other = r, 
                    u[l].onCollisionEnter(i);
                }
            }
            for (t = 0, n = this._previousFrameCollisions.length; t < n; t++) {
                var _ = this._previousFrameCollisions[t], d = _._colliderA, f = _._colliderB;
                if (!d.destroyed && !f.destroyed && e - _._updateFrame == 1) {
                    if (this._collisionsUtils.recoverCollision(_), o = d.owner, s = o._scripts) if (_._isTrigger) {
                        if (o._needProcessTriggers) for (l = 0, h = s.length; l < h; l++) s[l].onTriggerExit(f);
                    } else if (o._needProcessCollisions) for (l = 0, h = s.length; l < h; l++) _.other = f, 
                    s[l].onCollisionExit(_);
                    if (c = f.owner, u = c._scripts) if (_._isTrigger) {
                        if (c._needProcessTriggers) for (l = 0, h = u.length; l < h; l++) u[l].onTriggerExit(d);
                    } else if (c._needProcessCollisions) for (l = 0, h = u.length; l < h; l++) _.other = d, 
                    u[l].onCollisionExit(_);
                }
            }
        }, t.clearForces = function() {
            if (!this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.clearForces();
        }, a(0, t, "gravity", function() {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            return this._gravity;
        }, function(t) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._gravity = t;
            var n = t.elements, i = e._nativeTempVector30;
            i.setValue(-n[0], n[1], n[2]), this._nativeDiscreteDynamicsWorld.setGravity(i);
        }), a(0, t, "continuousCollisionDetection", function() {
            return this._nativeDispatchInfo.get_m_useContinuous();
        }, function(e) {
            this._nativeDispatchInfo.set_m_useContinuous(e);
        }), a(0, t, "speculativeContactRestitution", function() {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
            return this._nativeDiscreteDynamicsWorld.getApplySpeculativeContactRestitution();
        }, function(e) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.setApplySpeculativeContactRestitution(e);
        }), e.createConstraint = function() {}, e.PHYSICSENGINEFLAGS_NONE = 0, e.PHYSICSENGINEFLAGS_COLLISIONSONLY = 1, 
        e.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 2, e.PHYSICSENGINEFLAGS_MULTITHREADED = 4, 
        e.PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 8, e.SOLVERMODE_RANDMIZE_ORDER = 1, 
        e.SOLVERMODE_FRICTION_SEPARATE = 2, e.SOLVERMODE_USE_WARMSTARTING = 4, e.SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16, 
        e.SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32, e.SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64, 
        e.SOLVERMODE_CACHE_FRIENDLY = 128, e.SOLVERMODE_SIMD = 256, e.SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512, 
        e.SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024, e.disableSimulation = !1, 
        i(e, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector31", function() {
            return this._nativeTempVector31 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempQuaternion0", function() {
            return this._nativeTempQuaternion0 = new Dt._physics3D.btQuaternion(0, 0, 0, 1);
        }, "_nativeTempQuaternion1", function() {
            return this._nativeTempQuaternion1 = new Dt._physics3D.btQuaternion(0, 0, 0, 1);
        }, "_nativeTempTransform0", function() {
            return this._nativeTempTransform0 = new Dt._physics3D.btTransform();
        }, "_nativeTempTransform1", function() {
            return this._nativeTempTransform1 = new Dt._physics3D.btTransform();
        }, "_tempVector30", function() {
            return this._tempVector30 = new dn();
        } ]), e;
    }(), rt = function() {
        function e() {
            this._currentPSSM = -1, this._shadowMapCount = 3, this._maxDistance = 200, this._ratioOfDistance = 1 / this._shadowMapCount, 
            this._statesDirty = !0, this._shadowMapTextureSize = 1024, this._scene = null, this._PCFType = 0, 
            this._shaderValueLightVP = null, this._spiltDistance = new Array(4), this._globalParallelLightDir = new dn(0, -1, 0), 
            this._boundingSphere = new Array(4), this._boundingBox = new Array(4), this._frustumPos = new Array(16), 
            this._uniformDistance = new Array(4), this._logDistance = new Array(4), this._dimension = new Array(4), 
            this._tempLookAt3 = new dn(), this._tempLookAt4 = new _n(), this._tempValue = new _n(), 
            this._tempPos = new dn(), this._tempLightUp = new dn(), this._tempMin = new _n(), 
            this._tempMax = new _n(), this._tempMatrix44 = new ut(), this._splitFrustumCulling = new Ue(ut.DEFAULT), 
            this._tempScaleMatrix44 = new ut(), this._shadowPCFOffset = new fn(1 / 1024, 1 / 1024), 
            this._shaderValueDistance = new _n(), this.cameras = [], this._shaderValueVPs = [];
            var e = 0;
            for (e = 0; e < this._spiltDistance.length; e++) this._spiltDistance[e] = 0;
            for (e = 0; e < this._dimension.length; e++) this._dimension[e] = new fn();
            for (e = 0; e < this._frustumPos.length; e++) this._frustumPos[e] = new dn();
            for (e = 0; e < this._boundingBox.length; e++) this._boundingBox[e] = new ne(new dn(), new dn());
            for (e = 0; e < this._boundingSphere.length; e++) this._boundingSphere[e] = new k(new dn(), 0);
            ut.createScaling(new dn(.5, .5, 1), this._tempScaleMatrix44), this._tempScaleMatrix44.elements[12] = .5, 
            this._tempScaleMatrix44.elements[13] = .5;
        }
        r(e, "laya.d3.shadowMap.ParallelSplitShadowMap");
        var t = e.prototype;
        return t.setInfo = function(e, t, n, i, r, a) {
            r > 3 && (this._shadowMapCount = 3), this._scene = e, this._maxDistance = t, this.shadowMapCount = r, 
            this._globalParallelLightDir = n, this._ratioOfDistance = 1 / this._shadowMapCount;
            for (var o = 0; o < this._spiltDistance.length; o++) this._spiltDistance[o] = 0;
            this._shadowMapTextureSize = i, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize, 
            this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this.setPCFType(a), this._statesDirty = !0;
        }, t.setPCFType = function(e) {
            this._PCFType = e;
            var t = this._scene._defineDatas;
            switch (this._PCFType) {
              case 0:
                t.add(Pn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Pn.SHADERDEFINE_SHADOW_PCF1), t.remove(Pn.SHADERDEFINE_SHADOW_PCF2), 
                t.remove(Pn.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 1:
                t.add(Pn.SHADERDEFINE_SHADOW_PCF1), t.remove(Pn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Pn.SHADERDEFINE_SHADOW_PCF2), 
                t.remove(Pn.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 2:
                t.add(Pn.SHADERDEFINE_SHADOW_PCF2), t.remove(Pn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Pn.SHADERDEFINE_SHADOW_PCF1), 
                t.remove(Pn.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 3:
                t.add(Pn.SHADERDEFINE_SHADOW_PCF3), t.remove(Pn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Pn.SHADERDEFINE_SHADOW_PCF1), 
                t.remove(Pn.SHADERDEFINE_SHADOW_PCF2);
            }
        }, t.getPCFType = function() {
            return this._PCFType;
        }, t.setFarDistance = function(e) {
            this._maxDistance != e && (this._maxDistance = e, this._statesDirty = !0);
        }, t.getFarDistance = function() {
            return this._maxDistance;
        }, t._beginSampler = function(e, t) {
            if (e < 0 || e > this._shadowMapCount) throw new Error("ParallelSplitShadowMap: beginSample invalid index");
            this._currentPSSM = e, this._update(t);
        }, t.endSampler = function(e) {
            this._currentPSSM = -1;
        }, t._calcAllLightCameraInfo = function(e) {
            if (1 === this._shadowMapCount) this._beginSampler(0, e), this.endSampler(e); else for (var t = 0, n = this._shadowMapCount + 1; t < n; t++) this._beginSampler(t, e), 
            this.endSampler(e);
        }, t._recalculate = function(e, t, n) {
            this._calcSplitDistance(e), this._calcBoundingBox(t, n), this._rebuildRenderInfo();
        }, t._update = function(e) {
            var t = e.nearPlane, n = e.fieldOfView, i = e.aspectRatio;
            (this._statesDirty || this.lastNearPlane !== t || this.lastFieldOfView !== n || this.lastAspectRatio !== i) && (this._recalculate(t, n, i), 
            this._uploadShaderValue(), this._statesDirty = !1, this.lastNearPlane = t, this.lastFieldOfView = n, 
            this.lastAspectRatio = i), this._calcLightViewProject(e);
        }, t._uploadShaderValue = function() {
            var e = this._scene._defineDatas;
            switch (this._shadowMapCount) {
              case 1:
                e.add(Pn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM2), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM3);
                break;

              case 2:
                e.add(Pn.SHADERDEFINE_SHADOW_PSSM2), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM3);
                break;

              case 3:
                e.add(Pn.SHADERDEFINE_SHADOW_PSSM3), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM2);
            }
            var t = this._scene._shaderValues;
            switch (t.setVector(Pn.SHADOWDISTANCE, this._shaderValueDistance), t.setBuffer(Pn.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP), 
            t.setVector(Pn.SHADOWMAPPCFOFFSET, this._shadowPCFOffset), this._shadowMapCount) {
              case 3:
                t.setTexture(Pn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), t.setTexture(Pn.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget), 
                t.setTexture(Pn.SHADOWMAPTEXTURE3, this.cameras[3].renderTarget);
                break;

              case 2:
                t.setTexture(Pn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), t.setTexture(Pn.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget);
                break;

              case 1:
                t.setTexture(Pn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget);
            }
        }, t._calcSplitDistance = function(e) {
            var t = this._maxDistance, n = 1 / this._shadowMapCount, i = 0;
            for (i = 0; i <= this._shadowMapCount; i++) this._uniformDistance[i] = e + (t - e) * i * n;
            var r = t / e;
            for (i = 0; i <= this._shadowMapCount; i++) {
                var a = Math.pow(r, i * n);
                this._logDistance[i] = e * a;
            }
            for (i = 0; i <= this._shadowMapCount; i++) this._spiltDistance[i] = this._uniformDistance[i] * this._ratioOfDistance + this._logDistance[i] * (1 - this._ratioOfDistance);
            this._shaderValueDistance.x = this._spiltDistance[1], this._shaderValueDistance.y = this._spiltDistance[2], 
            this._shaderValueDistance.z = this._spiltDistance[3], this._shaderValueDistance.w = this._spiltDistance[4];
        }, t._calcBoundingBox = function(e, t) {
            var n = 3.1415926 * e / 180, i = Math.tan(n / 2), r = NaN, a = NaN, o = NaN, s = 0;
            for (s = 0; s <= this._shadowMapCount; s++) {
                a = (r = (o = this._spiltDistance[s]) * i) * t;
                var l = this._frustumPos[4 * s + 0].elements;
                l[0] = -a, l[1] = -r, l[2] = -o, (l = this._frustumPos[4 * s + 1].elements)[0] = a, 
                l[1] = -r, l[2] = -o, (l = this._frustumPos[4 * s + 2].elements)[0] = -a, l[1] = r, 
                l[2] = -o, (l = this._frustumPos[4 * s + 3].elements)[0] = a, l[1] = r, l[2] = -o, 
                (l = this._dimension[s].elements)[0] = a, l[1] = r;
            }
            var h, c, u, _;
            for (s = 1; s <= this._shadowMapCount; s++) h = this._dimension[s].elements, (c = this._boundingBox[s].min.elements)[0] = -h[0], 
            c[1] = -h[1], c[2] = -this._spiltDistance[s], (u = this._boundingBox[s].max.elements)[0] = h[0], 
            u[1] = h[1], u[2] = -this._spiltDistance[s - 1], (_ = this._boundingSphere[s].center.elements)[0] = .5 * (c[0] + u[0]), 
            _[1] = .5 * (c[1] + u[1]), _[2] = .5 * (c[2] + u[2]), this._boundingSphere[s].radius = .5 * Math.sqrt(Math.pow(u[0] - c[0], 2) + Math.pow(u[1] - c[1], 2) + Math.pow(u[2] - c[2], 2));
            c = this._boundingBox[0].min.elements, h = this._dimension[this._shadowMapCount].elements, 
            c[0] = -h[0], c[1] = -h[1], c[2] = -this._spiltDistance[this._shadowMapCount], (u = this._boundingBox[0].max.elements)[0] = h[0], 
            u[1] = h[1], u[2] = -this._spiltDistance[0], (_ = this._boundingSphere[0].center.elements)[0] = .5 * (c[0] + u[0]), 
            _[1] = .5 * (c[1] + u[1]), _[2] = .5 * (c[2] + u[2]), this._boundingSphere[0].radius = .5 * Math.sqrt(Math.pow(u[0] - c[0], 2) + Math.pow(u[1] - c[1], 2) + Math.pow(u[2] - c[2], 2));
        }, t.calcSplitFrustum = function(e) {
            this._currentPSSM > 0 ? ut.createPerspective(3.1416 * e.fieldOfView / 180, e.aspectRatio, this._spiltDistance[this._currentPSSM - 1], this._spiltDistance[this._currentPSSM], this._tempMatrix44) : ut.createPerspective(3.1416 * e.fieldOfView / 180, e.aspectRatio, this._spiltDistance[0], this._spiltDistance[this._shadowMapCount], this._tempMatrix44), 
            ut.multiply(this._tempMatrix44, e.viewMatrix, this._tempMatrix44), this._splitFrustumCulling.matrix = this._tempMatrix44;
        }, t._rebuildRenderInfo = function() {
            var e = this._shadowMapCount + 1, t = 0;
            for (this.cameras.length = e, t = 0; t < e; t++) {
                if (!this.cameras[t]) {
                    var n = new li();
                    n.name = "lightCamera" + t, n.clearColor = new _n(1, 1, 1, 1), this.cameras[t] = n;
                }
                var i = this.cameras[t].renderTarget;
                null != i && i.width == this._shadowMapTextureSize && i.height == this._shadowMapTextureSize || (i && i.destroy(), 
                (i = new Jn(this._shadowMapTextureSize, this._shadowMapTextureSize, 1, 0)).filterMode = 0, 
                this.cameras[t].renderTarget = i);
            }
        }, t._calcLightViewProject = function(t) {
            var n = this._boundingSphere[this._currentPSSM], i = t.transform.worldMatrix;
            n.radius;
            n.center.cloneTo(this._tempLookAt3), dn.transformV3ToV4(this._tempLookAt3, i, this._tempLookAt4);
            var r = this._tempLookAt3.elements, a = this._tempLookAt4.elements;
            r[0] = a[0], r[1] = a[1], r[2] = a[2];
            var o = this._tempLightUp.elements;
            t.transform.worldMatrix.getForward(e._tempVector30);
            var s = e._tempVector30.elements;
            o[0] = s[0], o[1] = 1, o[2] = s[2], dn.normalize(this._tempLightUp, this._tempLightUp), 
            dn.scale(this._globalParallelLightDir, 4 * n.radius, this._tempPos), dn.subtract(this._tempLookAt3, this._tempPos, this._tempPos);
            var l = this.cameras[this._currentPSSM];
            l.transform.position = this._tempPos, l.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1);
            var h = this._tempMax.elements, c = this._tempMin.elements;
            h[0] = h[1] = h[2] = -1e5, h[3] = 1, c[0] = c[1] = c[2] = 1e5, c[3] = 1, ut.multiply(l.viewMatrix, i, this._tempMatrix44);
            var u = this._tempValue.elements, _ = [];
            _.length = 8, this._boundingBox[this._currentPSSM].getCorners(_);
            for (var d = 0; d < 8; d++) {
                var f = _[d].elements;
                u[0] = f[0], u[1] = f[1], u[2] = f[2], u[3] = 1, _n.transformByM4x4(this._tempValue, this._tempMatrix44, this._tempValue), 
                c[0] = u[0] < c[0] ? u[0] : c[0], c[1] = u[1] < c[1] ? u[1] : c[1], c[2] = u[2] < c[2] ? u[2] : c[2], 
                h[0] = u[0] > h[0] ? u[0] : h[0], h[1] = u[1] > h[1] ? u[1] : h[1], h[2] = u[2] > h[2] ? u[2] : h[2];
            }
            _n.add(this._tempMax, this._tempMin, this._tempValue), u[0] *= .5, u[1] *= .5, u[2] *= .5, 
            u[3] = 1, _n.transformByM4x4(this._tempValue, l.transform.worldMatrix, this._tempValue);
            var m = Math.abs(-this._tempMax.z), p = m > this._maxDistance ? m : this._maxDistance;
            dn.scale(this._globalParallelLightDir, p, this._tempPos);
            var T = this._tempPos.elements;
            T[0] = u[0] - T[0], T[1] = u[1] - T[1], T[2] = u[2] - T[2], l.transform.position = this._tempPos, 
            l.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1), ut.createOrthoOffCenterRH(c[0], h[0], c[1], h[1], 1, p + .5 * (h[2] - c[2]), l.projectionMatrix);
            var E = l.projectionViewMatrix;
            e.multiplyMatrixOutFloat32Array(this._tempScaleMatrix44, E, this._shaderValueVPs[this._currentPSSM]), 
            this._scene._shaderValues.setBuffer(Pn.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP);
        }, t.setShadowMapTextureSize = function(e) {
            e !== this._shadowMapTextureSize && (this._shadowMapTextureSize = e, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize, 
            this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this._statesDirty = !0);
        }, t.disposeAllRenderTarget = function() {
            for (var e = 0, t = this._shadowMapCount + 1; e < t; e++) this.cameras[e].renderTarget && (this.cameras[e].renderTarget.destroy(), 
            this.cameras[e].renderTarget = null);
        }, a(0, t, "shadowMapCount", function() {
            return this._shadowMapCount;
        }, function(e) {
            if (e = e > 0 ? e : 1, e = e <= 3 ? e : 3, this._shadowMapCount != e) {
                this._shadowMapCount = e, this._ratioOfDistance = 1 / this._shadowMapCount, this._statesDirty = !0, 
                this._shaderValueLightVP = new Float32Array(16 * e), this._shaderValueVPs.length = e;
                for (var t = 0; t < e; t++) this._shaderValueVPs[t] = new Float32Array(this._shaderValueLightVP.buffer, 64 * t);
            }
        }), e.multiplyMatrixOutFloat32Array = function(e, t, n) {
            var i, r, a, o, s, l, h;
            for (r = e.elements, a = t.elements, i = 0; i < 4; i++) o = r[i], s = r[i + 4], 
            l = r[i + 8], h = r[i + 12], n[i] = o * a[0] + s * a[1] + l * a[2] + h * a[3], n[i + 4] = o * a[4] + s * a[5] + l * a[6] + h * a[7], 
            n[i + 8] = o * a[8] + s * a[9] + l * a[10] + h * a[11], n[i + 12] = o * a[12] + s * a[13] + l * a[14] + h * a[15];
        }, e.MAX_PSSM_COUNT = 3, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        } ]), e;
    }(), at = function() {
        function e(e) {
            this._color = null, this.enbale = !1, this._color = e;
        }
        r(e, "laya.d3.core.particleShuriKen.module.ColorOverLifetime");
        var t = e.prototype;
        return t.cloneTo = function(e) {
            var t = e;
            this._color.cloneTo(t._color), t.enbale = this.enbale;
        }, t.clone = function() {
            var e;
            switch (this._color.type) {
              case 0:
                e = nt.createByConstant(this._color.constant.clone());
                break;

              case 1:
                e = nt.createByGradient(this._color.gradient.clone());
                break;

              case 2:
                e = nt.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());
                break;

              case 3:
                e = nt.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());
            }
            var t = new this.constructor(e);
            return t.enbale = this.enbale, t;
        }, a(0, t, "color", function() {
            return this._color;
        }), e;
    }(), ot = function() {
        function e() {
            this._indexInList = 0, this.type = 0, this.fullPath = null, this.propertyOwner = null, 
            this.data = null, this._ownerPath = [], this._propertys = [], this._keyFrames = [];
        }
        r(e, "laya.d3.animation.KeyframeNode");
        var t = e.prototype;
        return t._setOwnerPathCount = function(e) {
            this._ownerPath.length = e;
        }, t._setOwnerPathByIndex = function(e, t) {
            this._ownerPath[e] = t;
        }, t._joinOwnerPath = function(e) {
            return this._ownerPath.join(e);
        }, t._setPropertyCount = function(e) {
            this._propertys.length = e;
        }, t._setPropertyByIndex = function(e, t) {
            this._propertys[e] = t;
        }, t._joinProperty = function(e) {
            return this._propertys.join(e);
        }, t._setKeyframeCount = function(e) {
            this._keyFrames.length = e;
        }, t._setKeyframeByIndex = function(e, t) {
            this._keyFrames[e] = t;
        }, t.getOwnerPathByIndex = function(e) {
            return this._ownerPath[e];
        }, t.getPropertyByIndex = function(e) {
            return this._propertys[e];
        }, t.getKeyframeByIndex = function(e) {
            return this._keyFrames[e];
        }, a(0, t, "ownerPathCount", function() {
            return this._ownerPath.length;
        }), a(0, t, "propertyCount", function() {
            return this._propertys.length;
        }), a(0, t, "keyFramesCount", function() {
            return this._keyFrames.length;
        }), e;
    }(), st = function() {
        function e() {
            var e = this.elements = new Float32Array(9);
            e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, 
            e[8] = 1;
        }
        r(e, "laya.d3.math.Matrix3x3");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.determinant = function() {
            var e = this.elements, t = e[0], n = e[1], i = e[2], r = e[3], a = e[4], o = e[5], s = e[6], l = e[7], h = e[8];
            return t * (h * a - o * l) + n * (-h * r + o * s) + i * (l * r - a * s);
        }, t.translate = function(e, t) {
            var n = t.elements, i = this.elements, r = e.elements, a = i[0], o = i[1], s = i[2], l = i[3], h = i[4], c = i[5], u = i[6], _ = i[7], d = i[8], f = r[0], m = r[1];
            n[0] = a, n[1] = o, n[2] = s, n[3] = l, n[4] = h, n[5] = c, n[6] = f * a + m * l + u, 
            n[7] = f * o + m * h + _, n[8] = f * s + m * c + d;
        }, t.rotate = function(e, t) {
            var n = t.elements, i = this.elements, r = i[0], a = i[1], o = i[2], s = i[3], l = i[4], h = i[5], c = i[6], u = i[7], _ = i[8], d = Math.sin(e), f = Math.cos(e);
            n[0] = f * r + d * s, n[1] = f * a + d * l, n[2] = f * o + d * h, n[3] = f * s - d * r, 
            n[4] = f * l - d * a, n[5] = f * h - d * o, n[6] = c, n[7] = u, n[8] = _;
        }, t.scale = function(e, t) {
            var n = t.elements, i = this.elements, r = e.elements, a = r[0], o = r[1];
            n[0] = a * i[0], n[1] = a * i[1], n[2] = a * i[2], n[3] = o * i[3], n[4] = o * i[4], 
            n[5] = o * i[5], n[6] = i[6], n[7] = i[7], n[8] = i[8];
        }, t.invert = function(e) {
            var t = e.elements, n = this.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = n[4], l = n[5], h = n[6], c = n[7], u = n[8], _ = u * s - l * c, d = -u * o + l * h, f = c * o - s * h, m = i * _ + r * d + a * f;
            m || (e = null), m = 1 / m, t[0] = _ * m, t[1] = (-u * r + a * c) * m, t[2] = (l * r - a * s) * m, 
            t[3] = d * m, t[4] = (u * i - a * h) * m, t[5] = (-l * i + a * o) * m, t[6] = f * m, 
            t[7] = (-c * i + r * h) * m, t[8] = (s * i - r * o) * m;
        }, t.transpose = function(e) {
            var t = e.elements, n = this.elements;
            if (e === this) {
                var i = n[1], r = n[2], a = n[5];
                t[1] = n[3], t[2] = n[6], t[3] = i, t[5] = n[7], t[6] = r, t[7] = a;
            } else t[0] = n[0], t[1] = n[3], t[2] = n[6], t[3] = n[1], t[4] = n[4], t[5] = n[7], 
            t[6] = n[2], t[7] = n[5], t[8] = n[8];
        }, t.identity = function() {
            var e = this.elements;
            e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, 
            e[8] = 1;
        }, t.cloneTo = function(e) {
            var t, n, i;
            if (n = this.elements, i = e.elements, n !== i) for (t = 0; t < 9; ++t) i[t] = n[t];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, e.createFromTranslation = function(e, t) {
            t.elements;
            var n = e.elements;
            t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 1, t[5] = 0, t[6] = n[0], t[7] = n[1], 
            t[8] = 1;
        }, e.createFromRotation = function(e, t) {
            var n = t.elements, i = Math.sin(e), r = Math.cos(e);
            n[0] = r, n[1] = i, n[2] = 0, n[3] = -i, n[4] = r, n[5] = 0, n[6] = 0, n[7] = 0, 
            n[8] = 1;
        }, e.createFromScaling = function(e, t) {
            var n = t.elements, i = e.elements;
            n[0] = i[0], n[1] = 0, n[2] = 0, n[3] = 0, n[4] = i[1], n[5] = 0, n[6] = 0, n[7] = 0, 
            n[8] = 1;
        }, e.createFromMatrix4x4 = function(e, t) {
            t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[4], t[4] = e[5], t[5] = e[6], t[6] = e[8], 
            t[7] = e[9], t[8] = e[10];
        }, e.multiply = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements, o = r[0], s = r[1], l = r[2], h = r[3], c = r[4], u = r[5], _ = r[6], d = r[7], f = r[8], m = a[0], p = a[1], T = a[2], E = a[3], v = a[4], g = a[5], S = a[6], R = a[7], A = a[8];
            i[0] = m * o + p * h + T * _, i[1] = m * s + p * c + T * d, i[2] = m * l + p * u + T * f, 
            i[3] = E * o + v * h + g * _, i[4] = E * s + v * c + g * d, i[5] = E * l + v * u + g * f, 
            i[6] = S * o + R * h + A * _, i[7] = S * s + R * c + A * d, i[8] = S * l + R * u + A * f;
        }, e.lookAt = function(t, n, i, r) {
            dn.subtract(t, n, e._tempV30), dn.normalize(e._tempV30, e._tempV30), dn.cross(i, e._tempV30, e._tempV31), 
            dn.normalize(e._tempV31, e._tempV31), dn.cross(e._tempV30, e._tempV31, e._tempV32);
            var a = e._tempV30.elements, o = e._tempV31.elements, s = e._tempV32.elements, l = r.elements;
            l[0] = o[0], l[3] = o[1], l[6] = o[2], l[1] = s[0], l[4] = s[1], l[7] = s[2], l[2] = a[0], 
            l[5] = a[1], l[8] = a[2];
        }, e.DEFAULT = new e(), i(e, [ "_tempV30", function() {
            return this._tempV30 = new dn();
        }, "_tempV31", function() {
            return this._tempV31 = new dn();
        }, "_tempV32", function() {
            return this._tempV32 = new dn();
        } ]), e;
    }(), lt = function() {
        function e(e, t) {
            this._position = null, this._textureCoordinate0 = null, this._position = e, this._textureCoordinate0 = t;
        }
        r(e, "laya.d3.graphics.Vertex.VertexPositionTexture0");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.graphics.IVertex": !0
        }), a(0, t, "position", function() {
            return this._position;
        }), a(0, t, "textureCoordinate0", function() {
            return this._textureCoordinate0;
        }), a(0, t, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }), a(1, e, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }), i(e, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new G(20, [ new Re(0, "vector3", 0), new Re(12, "vector2", 2) ]);
        } ]), e;
    }(), ht = function() {
        function e() {}
        return r(e, "laya.d3.animation.AnimationClipParser03"), e.READ_DATA = function() {
            e._DATA.offset = e._reader.getUint32(), e._DATA.size = e._reader.getUint32();
        }, e.READ_BLOCK = function() {
            for (var t = e._BLOCK.count = e._reader.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; r < t; r++) n.push(e._reader.getUint32()), 
            i.push(e._reader.getUint32());
        }, e.READ_STRINGS = function() {
            var t = e._reader.getUint32(), n = e._reader.getUint16(), i = e._reader.pos;
            e._reader.pos = t + e._DATA.offset;
            for (var r = 0; r < n; r++) e._strings[r] = e._reader.readUTFString();
            e._reader.pos = i;
        }, e.parse = function(t, n) {
            e._animationClip = t, e._reader = n;
            n.__getBuffer();
            e.READ_DATA(), e.READ_BLOCK(), e.READ_STRINGS();
            for (var i = 0, r = e._BLOCK.count; i < r; i++) {
                var a = n.getUint16(), o = e._strings[a], s = e["READ_" + o];
                if (null == s) throw new Error("model file err,no this function:" + a + " " + o);
                s.call();
            }
        }, e.READ_ANIMATIONS = function() {
            var t, n = 0, i = 0, r = e._reader, a = (r.__getBuffer(), []), o = r.getUint16();
            for (a.length = o, n = 0; n < o; n++) a[n] = r.getFloat32();
            var s = e._animationClip;
            s.name = e._strings[r.getUint16()];
            s._duration = r.getFloat32();
            s.islooping = !!r.getByte(), s._frameRate = r.getInt16();
            var l = r.getInt16(), h = s._nodes;
            h.count = l;
            var c = s._nodesMap = {}, u = s._nodesDic = {};
            for (n = 0; n < l; n++) {
                t = new ot(), h.setNodeByIndex(n, t), t._indexInList = n;
                var _ = t.type = r.getUint8(), d = r.getUint16();
                for (t._setOwnerPathCount(d), i = 0; i < d; i++) t._setOwnerPathByIndex(i, e._strings[r.getUint16()]);
                var f = t._joinOwnerPath("/"), m = c[f];
                m || (c[f] = m = []), m.push(t), t.propertyOwner = e._strings[r.getUint16()];
                var p = r.getUint16();
                for (t._setPropertyCount(p), i = 0; i < p; i++) t._setPropertyByIndex(i, e._strings[r.getUint16()]);
                var T = f + "." + t.propertyOwner + "." + t._joinProperty(".");
                u[T] = t, t.fullPath = T;
                var E = r.getUint16();
                t._setKeyframeCount(E);
                switch (_) {
                  case 0:
                    break;

                  case 1:
                  case 3:
                  case 4:
                    t.data = new Float32Array(3);
                    break;

                  case 2:
                    t.data = new Float32Array(4);
                    break;

                  default:
                    throw "AnimationClipParser03:unknown type.";
                }
                for (i = 0; i < E; i++) switch (_) {
                  case 0:
                    var v = new Ht();
                    t._setKeyframeByIndex(i, v), v.time = a[r.getUint16()], v.inTangent = r.getFloat32(), 
                    v.outTangent = r.getFloat32(), v.value = r.getFloat32();
                    break;

                  case 1:
                  case 3:
                  case 4:
                    var g = new cn();
                    t._setKeyframeByIndex(i, g), g.time = a[r.getUint16()];
                    for (var S = g.data = new Float32Array(9), R = 0; R < 3; R++) S[R] = r.getFloat32();
                    for (R = 0; R < 3; R++) S[3 + R] = r.getFloat32();
                    for (R = 0; R < 3; R++) S[6 + R] = r.getFloat32();
                    break;

                  case 2:
                    for (g = new cn(), t._setKeyframeByIndex(i, g), g.time = a[r.getUint16()], S = g.data = new Float32Array(12), 
                    R = 0; R < 4; R++) S[R] = r.getFloat32();
                    for (R = 0; R < 4; R++) S[4 + R] = r.getFloat32();
                    for (R = 0; R < 4; R++) S[8 + R] = r.getFloat32();
                    break;

                  default:
                    throw "AnimationClipParser03:unknown type.";
                }
            }
            var A = r.getUint16();
            for (n = 0; n < A; n++) {
                var I = new W();
                I.time = r.getFloat32(), I.eventName = e._strings[r.getUint16()];
                var D, y = r.getUint16();
                for (y > 0 && (I.params = D = []), i = 0; i < y; i++) {
                    switch (r.getByte()) {
                      case 0:
                        D.push(!!r.getByte());
                        break;

                      case 1:
                        D.push(r.getInt32());
                        break;

                      case 2:
                        D.push(r.getFloat32());
                        break;

                      case 3:
                        D.push(e._strings[r.getUint16()]);
                        break;

                      default:
                        throw new Error("unknown type.");
                    }
                }
                s.addEvent(I);
            }
        }, e._animationClip = null, e._reader = null, e._strings = [], i(e, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), e;
    }(), ct = function() {
        function e() {
            this._boundingSphere = null, this._boundingBox = null, this._sizeOfY = null, this._currentLODLevel = 0, 
            this._lastDistanceToEye = NaN, this._originalBoundingSphere = null, this._originalBoundingBox = null, 
            this._originalBoundingBoxCorners = null, this._bUseStrip = !1, this._gridSize = NaN, 
            this._beginGridX = 0, this._beginGridZ = 0, this._LODError = null, e.__init__(), 
            this._currentLODLevel = 0;
        }
        r(e, "laya.d3.terrain.TerrainLeaf");
        var t = e.prototype;
        return t.calcVertextNorml = function(t, n, i, r, a, o) {
            var s = 0, l = 0;
            l = -1 * e.getHeightFromTerrainHeightData(t - 1, n - 1, i, r, a), l += -1 * e.getHeightFromTerrainHeightData(t - 1, n, i, r, a), 
            l += -1 * e.getHeightFromTerrainHeightData(t - 1, n + 1, i, r, a), l += 1 * e.getHeightFromTerrainHeightData(t + 1, n - 1, i, r, a), 
            l += 1 * e.getHeightFromTerrainHeightData(t + 1, n, i, r, a), l += 1 * e.getHeightFromTerrainHeightData(t + 1, n + 1, i, r, a), 
            s = -1 * e.getHeightFromTerrainHeightData(t - 1, n - 1, i, r, a), s += -1 * e.getHeightFromTerrainHeightData(t, n - 1, i, r, a), 
            s += -1 * e.getHeightFromTerrainHeightData(t + 1, n - 1, i, r, a), s += 1 * e.getHeightFromTerrainHeightData(t - 1, n + 1, i, r, a), 
            s += 1 * e.getHeightFromTerrainHeightData(t, n + 1, i, r, a), s += 1 * e.getHeightFromTerrainHeightData(t + 1, n + 1, i, r, a), 
            o.x = -l, o.y = 6, o.z = -s, dn.normalize(o, o);
        }, t.calcVertextNormlUV = function(e, t, n, i, r) {
            r.x = e / n, r.y = t / i, r.z = t / i;
        }, t.calcVertextBuffer = function(t, n, i, r, a, o, s, l, h, c, u, _) {
            if (1 == _ && !e.__ADAPT_MATRIX__) {
                e.__ADAPT_MATRIX__ = new ut();
                var d = new ut();
                ut.createRotationY(Math.PI, e.__ADAPT_MATRIX__), ut.createTranslate(new dn(0, 0, (u - 1) * a), d), 
                ut.multiply(d, e.__ADAPT_MATRIX__, e.__ADAPT_MATRIX__), e.__ADAPT_MATRIX_INV__ = new ut(), 
                e.__ADAPT_MATRIX__.invert(e.__ADAPT_MATRIX_INV__);
            }
            this._gridSize = a, this._beginGridX = t * e.CHUNK_GRID_NUM + i, this._beginGridZ = n * e.CHUNK_GRID_NUM + r;
            for (var f = s * l, m = 2147483647, p = -2147483648, T = new dn(), E = 0, v = e.LEAF_GRID_NUM + 1; E < v; E++) for (var g = 0, S = e.LEAF_GRID_NUM + 1; g < S; g++) e.__VECTOR3__.x = (this._beginGridX + g) * this._gridSize, 
            e.__VECTOR3__.z = (this._beginGridZ + E) * this._gridSize, e.__VECTOR3__.y = h[(this._beginGridZ + E) * c + (this._beginGridX + g)], 
            m = e.__VECTOR3__.y < m ? e.__VECTOR3__.y : m, p = e.__VECTOR3__.y > p ? e.__VECTOR3__.y : p, 
            e.__ADAPT_MATRIX__ && dn.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__), 
            o[f] = e.__VECTOR3__.x, o[++f] = e.__VECTOR3__.y, o[++f] = e.__VECTOR3__.z, f++, 
            this.calcVertextNormlUV(this._beginGridX + g, this._beginGridZ + E, c, u, T), o[f] = T.x, 
            o[++f] = T.y, o[++f] = T.z, o[++f] = (i + g) / e.CHUNK_GRID_NUM, o[++f] = (r + E) / e.CHUNK_GRID_NUM, 
            o[++f] = this._beginGridX + g, o[++f] = this._beginGridZ + E, f++;
            this._sizeOfY = new fn(m - 1, p + 1), this.calcLODErrors(h, c, u), this.calcOriginalBoudingBoxAndSphere();
        }, t.calcSkirtVertextBuffer = function(t, n, i, r, a, o, s, l, h, c, u) {
            this._gridSize = a, this._beginGridX = t * e.CHUNK_GRID_NUM + i, this._beginGridZ = n * e.CHUNK_GRID_NUM + r;
            var _ = s * l, d = 0, f = 0, m = e.LEAF_GRID_NUM + 1, p = new dn(), T = 0, E = 0;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) e.__VECTOR3__.x = (this._beginGridX + f) * this._gridSize, 
            e.__VECTOR3__.y = 1 == d ? h[this._beginGridZ * c + (this._beginGridX + f)] : -this._gridSize, 
            e.__VECTOR3__.z = (this._beginGridZ + 0) * this._gridSize, e.__ADAPT_MATRIX__ && dn.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__), 
            o[_] = e.__VECTOR3__.x, o[++_] = e.__VECTOR3__.y, o[++_] = e.__VECTOR3__.z, _++, 
            T = 0 == d ? this._beginGridZ - 1 : this._beginGridZ, this.calcVertextNormlUV(this._beginGridX + f, T, c, u, p), 
            o[_] = p.x, o[++_] = p.y, o[++_] = p.z, o[++_] = (i + f) / e.CHUNK_GRID_NUM, o[++_] = (r + 0) / e.CHUNK_GRID_NUM, 
            o[++_] = this._beginGridX + f, o[++_] = T, _++;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) e.__VECTOR3__.x = (this._beginGridX + f) * this._gridSize, 
            e.__VECTOR3__.y = 0 == d ? h[(this._beginGridZ + e.LEAF_GRID_NUM) * c + (this._beginGridX + f)] : -this._gridSize, 
            e.__VECTOR3__.z = (this._beginGridZ + e.LEAF_GRID_NUM) * this._gridSize, e.__ADAPT_MATRIX__ && dn.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__), 
            o[_] = e.__VECTOR3__.x, o[++_] = e.__VECTOR3__.y, o[++_] = e.__VECTOR3__.z, _++, 
            T = 0 == d ? this._beginGridZ + e.LEAF_GRID_NUM : this._beginGridZ + e.LEAF_GRID_NUM + 1, 
            this.calcVertextNormlUV(this._beginGridX + f, T, c, u, p), o[_] = p.x, o[++_] = p.y, 
            o[++_] = p.z, o[++_] = (i + f) / e.CHUNK_GRID_NUM, o[++_] = (r + e.LEAF_GRID_NUM) / e.CHUNK_GRID_NUM, 
            o[++_] = this._beginGridX + f, o[++_] = T, _++;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) e.__VECTOR3__.x = (this._beginGridX + 0) * this._gridSize, 
            e.__VECTOR3__.y = 0 == d ? h[(this._beginGridZ + f) * c + (this._beginGridX + 0)] : -this._gridSize, 
            e.__VECTOR3__.z = (this._beginGridZ + f) * this._gridSize, e.__ADAPT_MATRIX__ && dn.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__), 
            o[_] = e.__VECTOR3__.x, o[++_] = e.__VECTOR3__.y, o[++_] = e.__VECTOR3__.z, _++, 
            E = 0 == d ? this._beginGridX : this._beginGridX - 1, this.calcVertextNormlUV(E, this._beginGridZ + f, c, u, p), 
            o[_] = p.x, o[++_] = p.y, o[++_] = p.z, o[++_] = (i + 0) / e.CHUNK_GRID_NUM, o[++_] = (r + f) / e.CHUNK_GRID_NUM, 
            o[++_] = E, o[++_] = this._beginGridZ + f, _++;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) e.__VECTOR3__.x = (this._beginGridX + e.LEAF_GRID_NUM) * this._gridSize, 
            e.__VECTOR3__.y = 1 == d ? h[(this._beginGridZ + f) * c + (this._beginGridX + e.LEAF_GRID_NUM)] : -this._gridSize, 
            e.__VECTOR3__.z = (this._beginGridZ + f) * this._gridSize, e.__ADAPT_MATRIX__ && dn.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__), 
            o[_] = e.__VECTOR3__.x, o[++_] = e.__VECTOR3__.y, o[++_] = e.__VECTOR3__.z, _++, 
            E = 0 == d ? this._beginGridX + e.LEAF_GRID_NUM + 1 : this._beginGridX + e.LEAF_GRID_NUM, 
            this.calcVertextNormlUV(E, this._beginGridZ + f, c, u, p), o[_] = p.x, o[++_] = p.y, 
            o[++_] = p.z, o[++_] = (i + e.LEAF_GRID_NUM) / e.CHUNK_GRID_NUM, o[++_] = (r + f) / e.CHUNK_GRID_NUM, 
            o[++_] = E, o[++_] = this._beginGridZ + f, _++;
        }, t.calcOriginalBoudingBoxAndSphere = function() {
            var t = new dn(this._beginGridX * this._gridSize, this._sizeOfY.x, this._beginGridZ * this._gridSize), n = new dn((this._beginGridX + e.LEAF_GRID_NUM) * this._gridSize, this._sizeOfY.y, (this._beginGridZ + e.LEAF_GRID_NUM) * this._gridSize);
            e.__ADAPT_MATRIX__ && (dn.transformV3ToV3(t, e.__ADAPT_MATRIX__, t), dn.transformV3ToV3(n, e.__ADAPT_MATRIX__, n)), 
            this._originalBoundingBox = new ne(t, n);
            var i = new dn();
            dn.subtract(n, t, i), dn.scale(i, .5, i);
            var r = new dn();
            dn.add(t, i, r), this._originalBoundingSphere = new k(r, dn.scalarLength(i)), this._originalBoundingBoxCorners = o(8, null), 
            this._originalBoundingBox.getCorners(this._originalBoundingBoxCorners), this._boundingBox = new ne(new dn(-.5, -.5, -.5), new dn(.5, .5, .5)), 
            this._boundingSphere = new k(new dn(0, 0, 0), 1);
        }, t.calcLeafBoudingBox = function(e) {
            for (var t = 0; t < 8; t++) dn.transformCoordinate(this._originalBoundingBoxCorners[t], e, Lt._tempBoundBoxCorners[t]);
            ne.createfromPoints(Lt._tempBoundBoxCorners, this._boundingBox);
        }, t.calcLeafBoudingSphere = function(e, t) {
            dn.transformCoordinate(this._originalBoundingSphere.center, e, this._boundingSphere.center), 
            this._boundingSphere.radius = this._originalBoundingSphere.radius * t;
        }, t.calcLODErrors = function(t, n, i) {
            this._LODError = new Float32Array(e._maxLODLevel + 1);
            for (var r = 1, a = 0, o = e._maxLODLevel + 1; a < o; a++) {
                for (var s = 0, l = 0, h = e.LEAF_GRID_NUM; l < h; l += r) for (var c = 0, u = e.LEAF_GRID_NUM; c < u; c += r) for (var _ = t[(this._beginGridZ + l) * n + (this._beginGridX + c)], d = t[(this._beginGridZ + l) * n + (this._beginGridX + c) + r], f = t[(this._beginGridZ + l + r) * n + (this._beginGridX + c)], m = t[(this._beginGridZ + l + r) * n + (this._beginGridX + c) + r], p = 0; p < r; p++) for (var T = p / r, E = 0; E < r; E++) {
                    var v = E / r, g = t[(this._beginGridZ + l + p) * n + (this._beginGridX + c) + E], S = v + T <= 1 ? _ + (d - _) * v + (f - _) * T : m + (f - m) * (1 - v) + (d - m) * (1 - T), R = Math.abs(S - g);
                    s = Math.max(s, R);
                }
                r *= 2, this._LODError[a] = s;
            }
        }, t.determineLod = function(t, n, i, r) {
            var a = dn.distance(t, this._boundingSphere.center), o = e._maxLODLevel;
            if (!r) {
                if (this._lastDistanceToEye == a) return this._currentLODLevel;
                this._lastDistanceToEye > a && (o = this._currentLODLevel);
            }
            for (var s = o; s >= 1; s--) if (Gn.LOD_DISTANCE_FACTOR * this._LODError[s] / a * n < i) {
                this._currentLODLevel = s;
                break;
            }
            return this._lastDistanceToEye = a, this._currentLODLevel;
        }, e.__init__ = function() {
            if (!e._bInit) {
                var t = e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM * (e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM);
                e._planeLODIndex = o(t);
                var n = 0, i = 0, r = 0, a = 0, s = 0, l = 0, h = null, c = null;
                for (n = 0; n < t; n++) e._planeLODIndex[n] = new Array(e._maxLODLevel + 1);
                for (n = 0, a = e._maxLODLevel + 1; n < a; n++) e._planeLODIndex[0][n] = e.calcPlaneLODIndex(n);
                for (n = 1; n < t; n++) for (l = n * e.LEAF_PLANE_VERTEXT_COUNT, i = 0, s = e._maxLODLevel + 1; i < s; i++) {
                    for (h = e._planeLODIndex[0][i], c = new Uint16Array(h.length), r = 0; r < h.length; r++) c[r] = h[r] + l;
                    e._planeLODIndex[n][i] = c;
                }
                for (e._skirtLODIndex = o(t), n = 0; n < t; n++) e._skirtLODIndex[n] = new Array(e._maxLODLevel + 1);
                for (n = 0, a = e._maxLODLevel + 1; n < a; n++) e._skirtLODIndex[0][n] = e.calcSkirtLODIndex(n);
                for (n = 1; n < t; n++) for (l = n * e.LEAF_SKIRT_VERTEXT_COUNT, i = 0, s = e._maxLODLevel + 1; i < s; i++) {
                    for (h = e._skirtLODIndex[0][i], c = new Uint16Array(h.length), r = 0; r < h.length; r++) c[r] = h[r] + l;
                    e._skirtLODIndex[n][i] = c;
                }
                e._bInit = !0;
            }
        }, e.getPlaneLODIndex = function(t, n) {
            return e._planeLODIndex[t][n];
        }, e.getSkirtLODIndex = function(t, n) {
            return e._skirtLODIndex[t][n];
        }, e.calcPlaneLODIndex = function(t) {
            t > e._maxLODLevel && (t = e._maxLODLevel);
            var n = e.LEAF_GRID_NUM + 1, i = 0, r = null, a = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / Math.pow(2, t);
            r = new Uint16Array(a * a * 6);
            for (var o = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / a, s = 0; s < e.LEAF_GRID_NUM; s += o) for (var l = 0; l < e.LEAF_GRID_NUM; l += o) r[i] = (s + o) * n + l, 
            r[++i] = s * n + l, r[++i] = s * n + l + o, r[++i] = s * n + l + o, r[++i] = (s + o) * n + l + o, 
            r[++i] = (s + o) * n + l, i++;
            return r;
        }, e.calcSkirtLODIndex = function(t) {
            t > e._maxLODLevel && (t = e._maxLODLevel);
            var n = e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM * (e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM) * e.LEAF_PLANE_VERTEXT_COUNT, i = e.LEAF_GRID_NUM + 1, r = 0, a = null, o = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / Math.pow(2, t);
            a = new Uint16Array(4 * o * 6);
            for (var s = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / o, l = 0; l < 4; l++) {
                for (var h = 0; h < e.LEAF_GRID_NUM; h += s) a[r] = n + i + h, a[++r] = n + h, a[++r] = n + h + s, 
                a[++r] = n + h + s, a[++r] = n + i + h + s, a[++r] = n + i + h, r++;
                n += 2 * i;
            }
            return a;
        }, e.getHeightFromTerrainHeightData = function(e, t, n, i, r) {
            return e = e < 0 ? 0 : e, e = e >= i ? i - 1 : e, t = t < 0 ? 0 : t, t = t >= r ? r - 1 : t, 
            n[t * i + e];
        }, e.CHUNK_GRID_NUM = 64, e.LEAF_GRID_NUM = 32, e.__ADAPT_MATRIX__ = null, e.__ADAPT_MATRIX_INV__ = null, 
        e._planeLODIndex = null, e._skirtLODIndex = null, e._bInit = !1, i(e, [ "LEAF_PLANE_VERTEXT_COUNT", function() {
            return this.LEAF_PLANE_VERTEXT_COUNT = (e.LEAF_GRID_NUM + 1) * (e.LEAF_GRID_NUM + 1);
        }, "LEAF_SKIRT_VERTEXT_COUNT", function() {
            return this.LEAF_SKIRT_VERTEXT_COUNT = 2 * (e.LEAF_GRID_NUM + 1) * 4;
        }, "LEAF_VERTEXT_COUNT", function() {
            return this.LEAF_VERTEXT_COUNT = e.LEAF_PLANE_VERTEXT_COUNT + e.LEAF_SKIRT_VERTEXT_COUNT;
        }, "LEAF_PLANE_MAX_INDEX_COUNT", function() {
            return this.LEAF_PLANE_MAX_INDEX_COUNT = e.LEAF_GRID_NUM * e.LEAF_GRID_NUM * 6;
        }, "LEAF_SKIRT_MAX_INDEX_COUNT", function() {
            return this.LEAF_SKIRT_MAX_INDEX_COUNT = 4 * e.LEAF_GRID_NUM * 6;
        }, "LEAF_MAX_INDEX_COUNT", function() {
            return this.LEAF_MAX_INDEX_COUNT = e.LEAF_PLANE_MAX_INDEX_COUNT + e.LEAF_SKIRT_MAX_INDEX_COUNT;
        }, "__VECTOR3__", function() {
            return this.__VECTOR3__ = new dn();
        }, "_maxLODLevel", function() {
            return this._maxLODLevel = Math.log2(e.LEAF_GRID_NUM);
        } ]), e;
    }(), ut = (function() {
        function e() {
            this.startPosition = new dn(), this.endPosition = new dn(), this.startColor = new Ge(), 
            this.endColor = new Ge();
        }
        r(e, "laya.d3.core.pixelLine.PixelLineData");
        e.prototype.cloneTo = function(e) {
            this.startPosition.cloneTo(e.startPosition), this.endPosition.cloneTo(e.endPosition), 
            this.startColor.cloneTo(e.startColor), this.endColor.cloneTo(e.endColor);
        };
    }(), function() {
        function e(e, t, n, i, r, a, o, s, l, h, c, u, _, d, f, m, p) {
            void 0 === e && (e = 1), void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), 
            void 0 === r && (r = 0), void 0 === a && (a = 1), void 0 === o && (o = 0), void 0 === s && (s = 0), 
            void 0 === l && (l = 0), void 0 === h && (h = 0), void 0 === c && (c = 1), void 0 === u && (u = 0), 
            void 0 === _ && (_ = 0), void 0 === d && (d = 0), void 0 === f && (f = 0), void 0 === m && (m = 1);
            var T = this.elements = p || new Float32Array(16);
            T[0] = e, T[1] = t, T[2] = n, T[3] = i, T[4] = r, T[5] = a, T[6] = o, T[7] = s, 
            T[8] = l, T[9] = h, T[10] = c, T[11] = u, T[12] = _, T[13] = d, T[14] = f, T[15] = m;
        }
        r(e, "laya.d3.math.Matrix4x4");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.setRotation = function(e) {
            var t = e.elements, n = t[0], i = t[1], r = t[2], a = t[3], o = n * n, s = i * i, l = r * r, h = n * i, c = r * a, u = r * n, _ = i * a, d = i * r, f = n * a, m = this.elements;
            m[0] = 1 - 2 * (s + l), m[1] = 2 * (h + c), m[2] = 2 * (u - _), m[4] = 2 * (h - c), 
            m[5] = 1 - 2 * (l + o), m[6] = 2 * (d + f), m[8] = 2 * (u + _), m[9] = 2 * (d - f), 
            m[10] = 1 - 2 * (s + o);
        }, t.setPosition = function(e) {
            var t = e.elements, n = this.elements;
            n[12] = t[0], n[13] = t[1], n[14] = t[2];
        }, t.getElementByRowColumn = function(e, t) {
            if (e < 0 || e > 3) throw new Error("row", "Rows and columns for matrices run from 0 to 3, inclusive.");
            if (t < 0 || t > 3) throw new Error("column", "Rows and columns for matrices run from 0 to 3, inclusive.");
            return this.elements[4 * e + t];
        }, t.setElementByRowColumn = function(e, t, n) {
            if (e < 0 || e > 3) throw new Error("row", "Rows and columns for matrices run from 0 to 3, inclusive.");
            if (t < 0 || t > 3) throw new Error("column", "Rows and columns for matrices run from 0 to 3, inclusive.");
            this.elements[4 * e + t] = n;
        }, t.equalsOtherMatrix = function(e) {
            var t = this.elements, n = e.elements;
            return Tt.nearEqual(t[0], n[0]) && Tt.nearEqual(t[1], n[1]) && Tt.nearEqual(t[2], n[2]) && Tt.nearEqual(t[3], n[3]) && Tt.nearEqual(t[4], n[4]) && Tt.nearEqual(t[5], n[5]) && Tt.nearEqual(t[6], n[6]) && Tt.nearEqual(t[7], n[7]) && Tt.nearEqual(t[8], n[8]) && Tt.nearEqual(t[9], n[9]) && Tt.nearEqual(t[10], n[10]) && Tt.nearEqual(t[11], n[11]) && Tt.nearEqual(t[12], n[12]) && Tt.nearEqual(t[13], n[13]) && Tt.nearEqual(t[14], n[14]) && Tt.nearEqual(t[15], n[15]);
        }, t.decomposeTransRotScale = function(t, n, i) {
            var r = e._tempMatrix4x4;
            return this.decomposeTransRotMatScale(t, r, i) ? (Ce.createFromMatrix4x4(r, n), 
            !0) : (n.identity(), !1);
        }, t.decomposeTransRotMatScale = function(t, n, i) {
            var r = this.elements, a = t.elements, o = n.elements, s = i.elements;
            a[0] = r[12], a[1] = r[13], a[2] = r[14];
            var l = r[0], h = r[1], c = r[2], u = r[4], _ = r[5], d = r[6], f = r[8], m = r[9], p = r[10], T = s[0] = Math.sqrt(l * l + h * h + c * c), E = s[1] = Math.sqrt(u * u + _ * _ + d * d), v = s[2] = Math.sqrt(f * f + m * m + p * p);
            if (Tt.isZero(T) || Tt.isZero(E) || Tt.isZero(v)) return o[1] = o[2] = o[3] = o[4] = o[6] = o[7] = o[8] = o[9] = o[11] = o[12] = o[13] = o[14] = 0, 
            o[0] = o[5] = o[10] = o[15] = 1, !1;
            var g = e._tempVector0, S = g.elements;
            S[0] = f / v, S[1] = m / v, S[2] = p / v;
            var R = e._tempVector1, A = R.elements;
            A[0] = l / T, A[1] = h / T, A[2] = c / T;
            var I = e._tempVector2;
            dn.cross(g, R, I);
            var D = e._tempVector1;
            return dn.cross(I, g, D), o[3] = o[7] = o[11] = o[12] = o[13] = o[14] = 0, o[15] = 1, 
            o[0] = D.x, o[1] = D.y, o[2] = D.z, o[4] = I.x, o[5] = I.y, o[6] = I.z, o[8] = g.x, 
            o[9] = g.y, o[10] = g.z, o[0] * l + o[1] * h + o[2] * c < 0 && (s[0] = -T), o[4] * u + o[5] * _ + o[6] * d < 0 && (s[1] = -E), 
            o[8] * f + o[9] * m + o[10] * p < 0 && (s[2] = -v), !0;
        }, t.decomposeYawPitchRoll = function(e) {
            var t = e.elements, n = Math.asin(-this.elements[9]);
            t[1] = n;
            Math.cos(n) > Tt.zeroTolerance ? (t[2] = Math.atan2(this.elements[1], this.elements[5]), 
            t[0] = Math.atan2(this.elements[8], this.elements[10])) : (t[2] = Math.atan2(-this.elements[4], this.elements[0]), 
            t[0] = 0);
        }, t.normalize = function() {
            var e = this.elements, t = e[0], n = e[1], i = e[2], r = Math.sqrt(t * t + n * n + i * i);
            if (!r) return e[0] = 0, e[1] = 0, void (e[2] = 0);
            1 != r && (r = 1 / r, e[0] = t * r, e[1] = n * r, e[2] = i * r);
        }, t.transpose = function() {
            var e, t;
            return e = this.elements, t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], 
            e[8] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[7], 
            e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
        }, t.invert = function(e) {
            var t = this.elements, n = e.elements, i = t[0], r = t[1], a = t[2], o = t[3], s = t[4], l = t[5], h = t[6], c = t[7], u = t[8], _ = t[9], d = t[10], f = t[11], m = t[12], p = t[13], T = t[14], E = t[15], v = i * l - r * s, g = i * h - a * s, S = i * c - o * s, R = r * h - a * l, A = r * c - o * l, I = a * c - o * h, D = u * p - _ * m, y = u * T - d * m, M = u * E - f * m, C = _ * T - d * p, x = _ * E - f * p, O = d * E - f * T, L = v * O - g * x + S * C + R * M - A * y + I * D;
            0 !== Math.abs(L) && (L = 1 / L, n[0] = (l * O - h * x + c * C) * L, n[1] = (a * x - r * O - o * C) * L, 
            n[2] = (p * I - T * A + E * R) * L, n[3] = (d * A - _ * I - f * R) * L, n[4] = (h * M - s * O - c * y) * L, 
            n[5] = (i * O - a * M + o * y) * L, n[6] = (T * S - m * I - E * g) * L, n[7] = (u * I - d * S + f * g) * L, 
            n[8] = (s * x - l * M + c * D) * L, n[9] = (r * M - i * x - o * D) * L, n[10] = (m * A - p * S + E * v) * L, 
            n[11] = (_ * S - u * A - f * v) * L, n[12] = (l * y - s * C - h * D) * L, n[13] = (i * C - r * y + a * D) * L, 
            n[14] = (p * g - m * R - T * v) * L, n[15] = (u * R - _ * g + d * v) * L);
        }, t.identity = function() {
            var e = this.elements;
            e[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0, 
            e[0] = e[5] = e[10] = e[15] = 1;
        }, t.cloneTo = function(e) {
            var t, n, i;
            if (n = this.elements, i = e.elements, n !== i) for (t = 0; t < 16; ++t) i[t] = n[t];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, t.getTranslationVector = function(e) {
            var t = this.elements, n = e.elements;
            n[0] = t[12], n[1] = t[13], n[2] = t[14];
        }, t.setTranslationVector = function(e) {
            var t = this.elements, n = e.elements;
            t[12] = n[0], t[13] = n[1], t[14] = n[2];
        }, t.getForward = function(e) {
            var t = this.elements, n = e.elements;
            n[0] = -t[8], n[1] = -t[9], n[2] = -t[10];
        }, t.setForward = function(e) {
            var t = this.elements, n = e.elements;
            t[8] = -n[0], t[9] = -n[1], t[10] = -n[2];
        }, e.createRotationX = function(e, t) {
            var n = t.elements, i = Math.sin(e), r = Math.cos(e);
            n[1] = n[2] = n[3] = n[4] = n[7] = n[8] = n[11] = n[12] = n[13] = n[14] = 0, n[0] = n[15] = 1, 
            n[5] = n[10] = r, n[6] = i, n[9] = -i;
        }, e.createRotationY = function(e, t) {
            var n = t.elements, i = Math.sin(e), r = Math.cos(e);
            n[1] = n[3] = n[4] = n[6] = n[7] = n[9] = n[11] = n[12] = n[13] = n[14] = 0, n[5] = n[15] = 1, 
            n[0] = n[10] = r, n[2] = -i, n[8] = i;
        }, e.createRotationZ = function(e, t) {
            var n = t.elements, i = Math.sin(e), r = Math.cos(e);
            n[2] = n[3] = n[6] = n[7] = n[8] = n[9] = n[11] = n[12] = n[13] = n[14] = 0, n[10] = n[15] = 1, 
            n[0] = n[5] = r, n[1] = i, n[4] = -i;
        }, e.createRotationYawPitchRoll = function(t, n, i, r) {
            Ce.createFromYawPitchRoll(t, n, i, e._tempQuaternion), e.createRotationQuaternion(e._tempQuaternion, r);
        }, e.createRotationAxis = function(e, t, n) {
            var i = e.elements, r = i[0], a = i[1], o = i[2], s = Math.cos(t), l = Math.sin(t), h = r * r, c = a * a, u = o * o, _ = r * a, d = r * o, f = a * o, m = n.elements;
            m[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0, m[15] = 1, m[0] = h + s * (1 - h), 
            m[1] = _ - s * _ + l * o, m[2] = d - s * d - l * a, m[4] = _ - s * _ - l * o, m[5] = c + s * (1 - c), 
            m[6] = f - s * f + l * r, m[8] = d - s * d + l * a, m[9] = f - s * f - l * r, m[10] = u + s * (1 - u);
        }, e.createRotationQuaternion = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0], a = n[1], o = n[2], s = n[3], l = r * r, h = a * a, c = o * o, u = r * a, _ = o * s, d = o * r, f = a * s, m = a * o, p = r * s;
            i[3] = i[7] = i[11] = i[12] = i[13] = i[14] = 0, i[15] = 1, i[0] = 1 - 2 * (h + c), 
            i[1] = 2 * (u + _), i[2] = 2 * (d - f), i[4] = 2 * (u - _), i[5] = 1 - 2 * (c + l), 
            i[6] = 2 * (m + p), i[8] = 2 * (d + f), i[9] = 2 * (m - p), i[10] = 1 - 2 * (h + l);
        }, e.createTranslate = function(e, t) {
            var n = e.elements, i = t.elements;
            i[4] = i[8] = i[1] = i[9] = i[2] = i[6] = i[3] = i[7] = i[11] = 0, i[0] = i[5] = i[10] = i[15] = 1, 
            i[12] = n[0], i[13] = n[1], i[14] = n[2];
        }, e.createScaling = function(e, t) {
            var n = e.elements, i = t.elements;
            i[0] = n[0], i[5] = n[1], i[10] = n[2], i[1] = i[4] = i[8] = i[12] = i[9] = i[13] = i[2] = i[6] = i[14] = i[3] = i[7] = i[11] = 0, 
            i[15] = 1;
        }, e.multiply = function(e, t, n) {
            var i, r, a, o, s, l, h, c;
            if (r = n.elements, a = e.elements, o = t.elements, r === o) for (o = new Float32Array(16), 
            i = 0; i < 16; ++i) o[i] = r[i];
            var u = o[0], _ = o[1], d = o[2], f = o[3], m = o[4], p = o[5], T = o[6], E = o[7], v = o[8], g = o[9], S = o[10], R = o[11], A = o[12], I = o[13], D = o[14], y = o[15];
            for (i = 0; i < 4; i++) s = a[i], l = a[i + 4], h = a[i + 8], c = a[i + 12], r[i] = s * u + l * _ + h * d + c * f, 
            r[i + 4] = s * m + l * p + h * T + c * E, r[i + 8] = s * v + l * g + h * S + c * R, 
            r[i + 12] = s * A + l * I + h * D + c * y;
        }, e.multiplyForNative = function(e, t, n) {
            E.instance.matrix4x4Multiply(e.elements, t.elements, n.elements);
        }, e.createFromQuaternion = function(e, t) {
            var n = t.elements, i = e.elements, r = i[0], a = i[1], o = i[2], s = i[3], l = r + r, h = a + a, c = o + o, u = r * l, _ = a * l, d = a * h, f = o * l, m = o * h, p = o * c, T = s * l, E = s * h, v = s * c;
            n[0] = 1 - d - p, n[1] = _ + v, n[2] = f - E, n[3] = 0, n[4] = _ - v, n[5] = 1 - u - p, 
            n[6] = m + T, n[7] = 0, n[8] = f + E, n[9] = m - T, n[10] = 1 - u - d, n[11] = 0, 
            n[12] = 0, n[13] = 0, n[14] = 0, n[15] = 1;
        }, e.createAffineTransformation = function(e, t, n, i) {
            var r = e.elements, a = t.elements, o = n.elements, s = i.elements, l = a[0], h = a[1], c = a[2], u = a[3], _ = l + l, d = h + h, f = c + c, m = l * _, p = l * d, T = l * f, E = h * d, v = h * f, g = c * f, S = u * _, R = u * d, A = u * f, I = o[0], D = o[1], y = o[2];
            s[0] = (1 - (E + g)) * I, s[1] = (p + A) * I, s[2] = (T - R) * I, s[3] = 0, s[4] = (p - A) * D, 
            s[5] = (1 - (m + g)) * D, s[6] = (v + S) * D, s[7] = 0, s[8] = (T + R) * y, s[9] = (v - S) * y, 
            s[10] = (1 - (m + E)) * y, s[11] = 0, s[12] = r[0], s[13] = r[1], s[14] = r[2], 
            s[15] = 1;
        }, e.createLookAt = function(t, n, i, r) {
            var a = r.elements, o = e._tempVector0, s = e._tempVector1, l = e._tempVector2;
            dn.subtract(t, n, l), dn.normalize(l, l), dn.cross(i, l, o), dn.normalize(o, o), 
            dn.cross(l, o, s), r.identity(), a[0] = o.x, a[4] = o.y, a[8] = o.z, a[1] = s.x, 
            a[5] = s.y, a[9] = s.z, a[2] = l.x, a[6] = l.y, a[10] = l.z, a[12] = -dn.dot(o, t), 
            a[13] = -dn.dot(s, t), a[14] = -dn.dot(l, t);
        }, e.createPerspective = function(e, t, n, i, r) {
            var a = r.elements, o = 1 / Math.tan(e / 2), s = 1 / (n - i);
            a[0] = o / t, a[5] = o, a[10] = (i + n) * s, a[11] = -1, a[14] = 2 * i * n * s, 
            a[1] = a[2] = a[3] = a[4] = a[6] = a[7] = a[8] = a[9] = a[12] = a[13] = a[15] = 0;
        }, e.createOrthoOffCenterRH = function(e, t, n, i, r, a, o) {
            var s = o.elements, l = 1 / (e - t), h = 1 / (n - i), c = 1 / (r - a);
            s[1] = s[2] = s[3] = s[4] = s[6] = s[7] = s[8] = s[9] = s[11] = 0, s[15] = 1, s[0] = -2 * l, 
            s[5] = -2 * h, s[10] = 2 * c, s[12] = (e + t) * l, s[13] = (i + n) * h, s[14] = (a + r) * c;
        }, e.billboard = function(t, n, i, r, a, o) {
            dn.subtract(t, n, e._tempVector0);
            var s = dn.scalarLengthSquared(e._tempVector0);
            Tt.isZero(s) ? (dn.scale(a, -1, e._tempVector1), e._tempVector1.cloneTo(e._tempVector0)) : dn.scale(e._tempVector0, 1 / Math.sqrt(s), e._tempVector0), 
            dn.cross(r, e._tempVector0, e._tempVector2), dn.normalize(e._tempVector2, e._tempVector2), 
            dn.cross(e._tempVector0, e._tempVector2, e._tempVector3);
            var l = e._tempVector2.elements, h = e._tempVector3.elements, c = e._tempVector0.elements, u = t.elements, _ = o.elements;
            _[0] = l[0], _[1] = l[1], _[2] = l[2], _[3] = 0, _[4] = h[0], _[5] = h[1], _[6] = h[2], 
            _[7] = 0, _[8] = c[0], _[9] = c[1], _[10] = c[2], _[11] = 0, _[12] = u[0], _[13] = u[1], 
            _[14] = u[2], _[15] = 1;
        }, e.translation = function(e, t) {
            var n = e.elements, i = t.elements;
            i[0] = i[5] = i[10] = i[15] = 1, i[12] = n[0], i[13] = n[1], i[14] = n[2];
        }, i(e, [ "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new e();
        }, "_tempVector0", function() {
            return this._tempVector0 = new dn();
        }, "_tempVector1", function() {
            return this._tempVector1 = new dn();
        }, "_tempVector2", function() {
            return this._tempVector2 = new dn();
        }, "_tempVector3", function() {
            return this._tempVector3 = new dn();
        }, "_tempQuaternion", function() {
            return this._tempQuaternion = new Ce();
        }, "DEFAULT", function() {
            return this.DEFAULT = new e();
        }, "ZERO", function() {
            return this.ZERO = new e(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        } ]), e;
    }()), _t = (function() {
        function e() {}
        r(e, "laya.d3.core.GradientMode"), e.Blend = 0, e.Fixed = 1;
    }(), function() {
        function e(e, t) {
            this._frame = null, this._startFrame = null, this.tiles = null, this.type = 0, this.randomRow = !1, 
            this.rowIndex = 0, this.cycles = 0, this.enableUVChannels = 0, this.enable = !1, 
            this.tiles = new fn(1, 1), this.type = 0, this.randomRow = !0, this.rowIndex = 0, 
            this.cycles = 1, this.enableUVChannels = 1, this._frame = e, this._startFrame = t;
        }
        r(e, "laya.d3.core.particleShuriKen.module.TextureSheetAnimation");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            this.tiles.cloneTo(t.tiles), t.type = this.type, t.randomRow = this.randomRow, this._frame.cloneTo(t._frame), 
            this._startFrame.cloneTo(t._startFrame), t.cycles = this.cycles, t.enableUVChannels = this.enableUVChannels, 
            t.enable = this.enable;
        }, t.clone = function() {
            var e;
            switch (this._frame.type) {
              case 0:
                e = Ke.createByConstant(this._frame.constant);
                break;

              case 1:
                e = Ke.createByOverTime(this._frame.frameOverTimeData.clone());
                break;

              case 2:
                e = Ke.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);
                break;

              case 3:
                e = Ke.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());
            }
            var t;
            switch (this._startFrame.type) {
              case 0:
                t = We.createByConstant(this._startFrame.constant);
                break;

              case 1:
                t = We.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);
            }
            var n = new this.constructor(e, t);
            return this.tiles.cloneTo(n.tiles), n.type = this.type, n.randomRow = this.randomRow, 
            n.cycles = this.cycles, n.enableUVChannels = this.enableUVChannels, n.enable = this.enable, 
            n;
        }, a(0, t, "frame", function() {
            return this._frame;
        }), a(0, t, "startFrame", function() {
            return this._startFrame;
        }), e;
    }()), dt = function() {
        function e(e) {
            this._temp = new Uint32Array(1), this.seeds = new Uint32Array(4), this.seeds[0] = e, 
            this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1, 
            this.seeds[3] = 1812433253 * this.seeds[2] + 1;
        }
        r(e, "laya.d3.math.Rand");
        var t = e.prototype;
        return t.getUint = function() {
            return this._temp[0] = this.seeds[0] ^ this.seeds[0] << 11, this.seeds[0] = this.seeds[1], 
            this.seeds[1] = this.seeds[2], this.seeds[2] = this.seeds[3], this.seeds[3] = this.seeds[3] ^ this.seeds[3] >>> 19 ^ this._temp[0] ^ this._temp[0] >>> 8, 
            this.seeds[3];
        }, t.getFloat = function() {
            return this.getUint(), (8388607 & this.seeds[3]) * (1 / 8388607);
        }, t.getSignedFloat = function() {
            return 2 * this.getFloat() - 1;
        }, a(0, t, "seed", function() {
            return this.seeds[0];
        }, function(e) {
            this.seeds[0] = e, this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1, 
            this.seeds[3] = 1812433253 * this.seeds[2] + 1;
        }), e.getFloatFromInt = function(e) {
            return 1 / 8388607 * (8388607 & e);
        }, e.getByteFromInt = function(e) {
            return (8388607 & e) >>> 15;
        }, e;
    }(), ft = function() {
        function e() {
            this.cull = 0, this.blend = 0, this.srcBlend = 0, this.dstBlend = 0, this.srcBlendRGB = 0, 
            this.dstBlendRGB = 0, this.srcBlendAlpha = 0, this.dstBlendAlpha = 0, this.blendConstColor = null, 
            this.blendEquation = 0, this.blendEquationRGB = 0, this.blendEquationAlpha = 0, 
            this.depthTest = 0, this.depthWrite = !1, this.cull = 2, this.blend = 0, this.srcBlend = 1, 
            this.dstBlend = 0, this.srcBlendRGB = 1, this.dstBlendRGB = 0, this.srcBlendAlpha = 1, 
            this.dstBlendAlpha = 0, this.blendConstColor = new _n(1, 1, 1, 1), this.blendEquation = 0, 
            this.blendEquationRGB = 0, this.blendEquationAlpha = 0, this.depthTest = 515, this.depthWrite = !0;
        }
        r(e, "laya.d3.core.material.RenderState");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t._setRenderStateBlendDepth = function() {
            var e = E.instance;
            switch (b.setDepthMask(e, this.depthWrite), 0 === this.depthTest ? b.setDepthTest(e, !1) : (b.setDepthTest(e, !0), 
            b.setDepthFunc(e, this.depthTest)), this.blend) {
              case 0:
                b.setBlend(e, !1);
                break;

              case 1:
                b.setBlend(e, !0), b.setBlendFunc(e, this.srcBlend, this.dstBlend);
                break;

              case 2:
                b.setBlend(e, !0);
            }
        }, t._setRenderStateFrontFace = function(e, t) {
            var n = E.instance, i = 0;
            switch (this.cull) {
              case 0:
                b.setCullFace(n, !1);
                break;

              case 1:
                b.setCullFace(n, !0), i = e ? t && t._isFrontFaceInvert ? 2305 : 2304 : t && t._isFrontFaceInvert ? 2304 : 2305, 
                b.setFrontFace(n, i);
                break;

              case 2:
                b.setCullFace(n, !0), i = e ? t && t._isFrontFaceInvert ? 2304 : 2305 : t && t._isFrontFaceInvert ? 2305 : 2304, 
                b.setFrontFace(n, i);
            }
        }, t.cloneTo = function(e) {
            var t = e;
            t.cull = this.cull, t.blend = this.blend, t.srcBlend = this.srcBlend, t.dstBlend = this.dstBlend, 
            t.srcBlendRGB = this.srcBlendRGB, t.dstBlendRGB = this.dstBlendRGB, t.srcBlendAlpha = this.srcBlendAlpha, 
            t.dstBlendAlpha = this.dstBlendAlpha, this.blendConstColor.cloneTo(t.blendConstColor), 
            t.blendEquation = this.blendEquation, t.blendEquationRGB = this.blendEquationRGB, 
            t.blendEquationAlpha = this.blendEquationAlpha, t.depthTest = this.depthTest, t.depthWrite = this.depthWrite;
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, e.CULL_NONE = 0, e.CULL_FRONT = 1, e.CULL_BACK = 2, e.BLEND_DISABLE = 0, e.BLEND_ENABLE_ALL = 1, 
        e.BLEND_ENABLE_SEPERATE = 2, e.BLENDPARAM_ZERO = 0, e.BLENDPARAM_ONE = 1, e.BLENDPARAM_SRC_COLOR = 768, 
        e.BLENDPARAM_ONE_MINUS_SRC_COLOR = 769, e.BLENDPARAM_DST_COLOR = 774, e.BLENDPARAM_ONE_MINUS_DST_COLOR = 775, 
        e.BLENDPARAM_SRC_ALPHA = 770, e.BLENDPARAM_ONE_MINUS_SRC_ALPHA = 771, e.BLENDPARAM_DST_ALPHA = 772, 
        e.BLENDPARAM_ONE_MINUS_DST_ALPHA = 773, e.BLENDPARAM_SRC_ALPHA_SATURATE = 776, e.BLENDEQUATION_ADD = 0, 
        e.BLENDEQUATION_SUBTRACT = 1, e.BLENDEQUATION_REVERSE_SUBTRACT = 2, e.DEPTHTEST_OFF = 0, 
        e.DEPTHTEST_NEVER = 512, e.DEPTHTEST_LESS = 513, e.DEPTHTEST_EQUAL = 514, e.DEPTHTEST_LEQUAL = 515, 
        e.DEPTHTEST_GREATER = 516, e.DEPTHTEST_NOTEQUAL = 517, e.DEPTHTEST_GEQUAL = 518, 
        e.DEPTHTEST_ALWAYS = 519, e;
    }(), mt = function() {
        function e() {
            this._type = 0, this._constant = null, this._gradientX = null, this._gradientY = null, 
            this._gradientZ = null, this._constantMin = null, this._constantMax = null, this._gradientXMin = null, 
            this._gradientXMax = null, this._gradientYMin = null, this._gradientYMax = null, 
            this._gradientZMin = null, this._gradientZMax = null;
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientVelocity");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            t._type = this._type, this._constant.cloneTo(t._constant), this._gradientX.cloneTo(t._gradientX), 
            this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), this._constantMin.cloneTo(t._constantMin), 
            this._constantMax.cloneTo(t._constantMax), this._gradientXMin.cloneTo(t._gradientXMin), 
            this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin), 
            this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin), 
            this._gradientZMax.cloneTo(t._gradientZMax);
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradientZ", function() {
            return this._gradientZ;
        }), a(0, t, "constant", function() {
            return this._constant;
        }), a(0, t, "type", function() {
            return this._type;
        }), a(0, t, "gradientXMax", function() {
            return this._gradientXMax;
        }), a(0, t, "constantMin", function() {
            return this._constantMin;
        }), a(0, t, "gradientX", function() {
            return this._gradientX;
        }), a(0, t, "gradientY", function() {
            return this._gradientY;
        }), a(0, t, "gradientXMin", function() {
            return this._gradientXMin;
        }), a(0, t, "constantMax", function() {
            return this._constantMax;
        }), a(0, t, "gradientYMin", function() {
            return this._gradientYMin;
        }), a(0, t, "gradientYMax", function() {
            return this._gradientYMax;
        }), a(0, t, "gradientZMin", function() {
            return this._gradientZMin;
        }), a(0, t, "gradientZMax", function() {
            return this._gradientZMax;
        }), e.createByConstant = function(t) {
            var n = new e();
            return n._type = 0, n._constant = t, n;
        }, e.createByGradient = function(t, n, i) {
            var r = new e();
            return r._type = 1, r._gradientX = t, r._gradientY = n, r._gradientZ = i, r;
        }, e.createByRandomTwoConstant = function(t, n) {
            var i = new e();
            return i._type = 2, i._constantMin = t, i._constantMax = n, i;
        }, e.createByRandomTwoGradient = function(t, n, i, r, a, o) {
            var s = new e();
            return s._type = 3, s._gradientXMin = t, s._gradientXMax = n, s._gradientYMin = i, 
            s._gradientYMax = r, s._gradientZMin = a, s._gradientZMax = o, s;
        }, e;
    }(), pt = function() {
        function e(e) {
            this._owner = null, this._sharedMesh = null, this._owner = e;
        }
        r(e, "laya.d3.core.MeshFilter");
        var t = e.prototype;
        return t._getMeshDefine = function(e) {
            for (var t = 0, n = 0, i = e._subMeshCount; n < i; n++) for (var r = e._getSubMesh(n)._vertexBuffer._vertexDeclaration.vertexElements, a = 0, o = r.length; a < o; a++) {
                switch (r[a].elementUsage) {
                  case 1:
                    t |= ii.SHADERDEFINE_COLOR;
                    break;

                  case 2:
                    t |= ii.SHADERDEFINE_UV0;
                    break;

                  case 8:
                    t |= ii.SHADERDEFINE_UV1;
                }
            }
            return t;
        }, t._changeRenderObjectsByMesh = function() {
            var e = this._sharedMesh.subMeshCount;
            this._owner._render._renderElements.length = e;
            for (var t = 0; t < e; t++) {
                var n = this._owner._render, i = n._renderElements, r = i[t];
                if (r) r.setGeometry(this._sharedMesh._getSubMesh(t)); else {
                    var a = n.sharedMaterials[t];
                    a || (a = Un.defaultMaterial), (r = i[t] = new bt()).setTransform(this._owner._transform), 
                    r.render = n, r.material = a, r.setGeometry(this._sharedMesh._getSubMesh(t));
                }
            }
        }, t.destroy = function() {
            this._owner = null, this._sharedMesh && (this._sharedMesh._removeReference(), this._sharedMesh = null);
        }, a(0, t, "sharedMesh", function() {
            return this._sharedMesh;
        }, function(e) {
            if (this._sharedMesh !== e) {
                var t = this._owner._render._defineDatas, n = this._sharedMesh;
                n && (n._removeReference(), t.remove(this._getMeshDefine(n))), e._addReference(), 
                this._sharedMesh = e, t.add(this._getMeshDefine(e)), this._changeRenderObjectsByMesh();
            }
            this._owner._render._onMeshChange(e);
        }), e;
    }(), Tt = function() {
        function e() {}
        return r(e, "laya.d3.math.MathUtils3D"), e.isZero = function(t) {
            return Math.abs(t) < e.zeroTolerance;
        }, e.nearEqual = function(t, n) {
            return !!e.isZero(t - n);
        }, e.fastInvSqrt = function(t) {
            return e.isZero(t) ? t : 1 / Math.sqrt(t);
        }, i(e, [ "zeroTolerance", function() {
            return this.zeroTolerance = 1e-6;
        }, "MaxValue", function() {
            return this.MaxValue = 3.40282347e38;
        }, "MinValue", function() {
            return this.MinValue = -3.40282347e38;
        } ]), e;
    }(), Et = function() {
        function e() {
            this.ambientColor = null, this.diffuseColor = null, this.specularColor = null;
        }
        return r(e, "laya.d3.terrain.unit.MaterialInfo"), e;
    }(), vt = function() {
        function e(e) {
            this._runtimeCopyValues = [], this._ownerResource = e, this._initData();
        }
        r(e, "laya.d3.shader.ShaderData");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t._initData = function() {
            this._data = new Object();
        }, t.getBool = function(e) {
            return this._data[e];
        }, t.setBool = function(e, t) {
            this._data[e] = t;
        }, t.getInt = function(e) {
            return this._data[e];
        }, t.setInt = function(e, t) {
            this._data[e] = t;
        }, t.getNumber = function(e) {
            return this._data[e];
        }, t.setNumber = function(e, t) {
            this._data[e] = t;
        }, t.getVector = function(e) {
            return this._data[e];
        }, t.setVector = function(e, t) {
            this._data[e] = t;
        }, t.getQuaternion = function(e) {
            return this._data[e];
        }, t.setQuaternion = function(e, t) {
            this._data[e] = t;
        }, t.getMatrix4x4 = function(e) {
            return this._data[e];
        }, t.setMatrix4x4 = function(e, t) {
            this._data[e] = t;
        }, t.getBuffer = function(e) {
            return this._data[e];
        }, t.setBuffer = function(e, t) {
            this._data[e] = t;
        }, t.setTexture = function(e, t) {
            var n = this._data[e];
            this._data[e] = t, this._ownerResource && this._ownerResource.referenceCount > 0 && (n && n._removeReference(), 
            t && t._addReference());
        }, t.getTexture = function(e) {
            return this._data[e];
        }, t.setAttribute = function(e, t) {
            this._data[e] = t;
        }, t.getAttribute = function(e) {
            return this._data[e];
        }, t.getLength = function() {
            return this._data.length;
        }, t.setLength = function(e) {
            this._data.length = e;
        }, t.cloneTo = function(e) {
            var t = e._data;
            for (var n in this._data) {
                var i = this._data[n];
                if (i) if ("number" == typeof i) t[n] = i; else if ("number" == typeof i && Math.floor(i) == i) t[n] = i; else if ("boolean" == typeof i) t[n] = i; else if (i instanceof laya.d3.math.Vector2) {
                    var r = t[n] || (t[n] = new fn());
                    i.cloneTo(r), t[n] = r;
                } else if (i instanceof laya.d3.math.Vector3) {
                    var a = t[n] || (t[n] = new dn());
                    i.cloneTo(a), t[n] = a;
                } else if (i instanceof laya.d3.math.Vector4) {
                    var o = t[n] || (t[n] = new _n());
                    i.cloneTo(o), t[n] = o;
                } else if (i instanceof laya.d3.math.Matrix4x4) {
                    var s = t[n] || (t[n] = new ut());
                    i.cloneTo(s), t[n] = s;
                } else i instanceof laya.webgl.resource.BaseTexture && (t[n] = i);
            }
        }, t.cloneToForNative = function(e) {
            var t = e;
            this._int32Data.length - t._int32Data.length > 0 && t.needRenewArrayBufferForNative(this._int32Data.length), 
            t._int32Data.set(this._int32Data, 0);
            var n = t._nativeArray, i = this._nativeArray.length;
            n.length = i;
            for (var r = 0; r < i; r++) {
                var a = this._nativeArray[r];
                if (a) if ("number" == typeof a) n[r] = a, t.setNumber(r, a); else if ("number" == typeof a && Math.floor(a) == a) n[r] = a, 
                t.setInt(r, a); else if ("boolean" == typeof a) n[r] = a, t.setBool(r, a); else if (a instanceof laya.d3.math.Vector2) {
                    var o = n[r] || (n[r] = new fn());
                    a.cloneTo(o), n[r] = o, t.setVector(r, o);
                } else if (a instanceof laya.d3.math.Vector3) {
                    var s = n[r] || (n[r] = new dn());
                    a.cloneTo(s), n[r] = s, t.setVector(r, s);
                } else if (a instanceof laya.d3.math.Vector4) {
                    var l = n[r] || (n[r] = new _n());
                    a.cloneTo(l), n[r] = l, t.setVector(r, l);
                } else if (a instanceof laya.d3.math.Matrix4x4) {
                    var h = n[r] || (n[r] = new ut());
                    a.cloneTo(h), n[r] = h, t.setMatrix4x4(r, h);
                } else a instanceof laya.webgl.resource.BaseTexture && (n[r] = a, t.setTexture(r, a));
            }
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, t._initDataForNative = function() {
            this._frameCount = -1, this._runtimeCopyValues.length = 0, this._nativeArray = [], 
            this._data = new ArrayBuffer(32), this._int32Data = new Int32Array(this._data), 
            this._float32Data = new Float32Array(this._data), E.createArrayBufferRef(this._data, 0, !0);
        }, t.needRenewArrayBufferForNative = function(e) {
            if (e >= this._int32Data.length) {
                var t = 4 * (e + 1), n = this._int32Data, i = this._data.conchRef, r = this._data._ptrID;
                this._data = new ArrayBuffer(t), this._int32Data = new Int32Array(this._data), this._float32Data = new Float32Array(this._data), 
                this._data.conchRef = i, this._data._ptrID = r, n && this._int32Data.set(n, 0), 
                conch.updateArrayBufferRef(this._data._ptrID, i.isSyncToRender(), this._data);
            }
        }, t.getIntForNative = function(e) {
            return this._int32Data[e];
        }, t.setIntForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._int32Data[e] = t;
        }, t.getBoolForNative = function(e) {
            return 1 == this._int32Data[e];
        }, t.setBoolForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._int32Data[e] = t;
        }, t.getNumberForNative = function(e) {
            return this._float32Data[e];
        }, t.setNumberForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._float32Data[e] = t;
        }, t.getMatrix4x4ForNative = function(e) {
            return alert("ShaderData getMatrix4x4 can't support"), null;
        }, t.setMatrix4x4ForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
            var n = this.setReferenceForNative(t.elements);
            this._int32Data[e] = n;
        }, t.getVectorForNative = function(e) {
            return this._nativeArray[e];
        }, t.setVectorForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
            var n = this.setReferenceForNative(t.elements);
            this._int32Data[e] = n;
        }, t.getQuaternionForNative = function(e) {
            return alert("ShaderData getQuaternion can't support"), null;
        }, t.setQuaternionForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
            var n = this.setReferenceForNative(t.elements);
            this._int32Data[e] = n;
        }, t.getBufferForNative = function(e) {
            return alert("ShaderData getBuffer can't support"), null;
        }, t.setBufferForNative = function(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
            var n = this.setReferenceForNative(t);
            this._int32Data[e] = n;
        }, t.getAttributeForNative = function(e) {
            return alert("ShaderData  getAttribute can't support"), null;
        }, t.setAttributeForNative = function(e, t) {
            this._nativeArray[e] = t, t._ptrID || E.createArrayBufferRef(t, 0, !0), E.syncBufferToRenderThread(t), 
            this._int32Data[e] = t._ptrID;
        }, t.getTextureForNative = function(e) {
            return alert("ShaderData getTexture can't support"), null;
        }, t.setTextureForNative = function(e, t) {
            if (t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
                var n = this._nativeArray[e];
                this._int32Data[e] = t._getSource().id, this._ownerResource && this._ownerResource.referenceCount > 0 && (n && n._removeReference(), 
                t && t._addReference());
            }
        }, t.setReferenceForNative = function(t) {
            this.clearRuntimeCopyArray();
            var n = 0, i = 0;
            return e._SET_RUNTIME_VALUE_MODE_REFERENCE_ ? (E.createArrayBufferRefs(t, 0, !0, 0), 
            n = 0, i = t.getPtrID(n)) : (E.createArrayBufferRefs(t, 0, !0, 1), n = t.getRefNum() - 1, 
            i = t.getPtrID(n), this._runtimeCopyValues.push({
                obj: t,
                refID: n,
                ptrID: i
            })), E.syncBufferToRenderThread(t, n), i;
        }, t.clearRuntimeCopyArray = function() {
            var e = E.getFrameCount();
            if (this._frameCount != e) {
                this._frameCount = e;
                for (var t = 0, n = this._runtimeCopyValues.length; t < n; t++) {
                    this._runtimeCopyValues[t].obj.clearRefNum();
                }
                this._runtimeCopyValues.length = 0;
            }
        }, e.setRuntimeValueMode = function(t) {
            e._SET_RUNTIME_VALUE_MODE_REFERENCE_ = t;
        }, e._SET_RUNTIME_VALUE_MODE_REFERENCE_ = !0, e;
    }(), gt = function() {
        function e() {
            this._nodes = [];
        }
        r(e, "laya.d3.animation.KeyframeNodeList");
        var t = e.prototype;
        return t.getNodeByIndex = function(e) {
            return this._nodes[e];
        }, t.setNodeByIndex = function(e, t) {
            this._nodes[e] = t;
        }, a(0, t, "count", function() {
            return this._nodes.length;
        }, function(e) {
            this._nodes.length = e;
        }), e;
    }(), St = function() {
        function e() {}
        return r(e, "laya.d3.math.HalfFloatUtils"), e.__init__ = function() {
            for (var t = 0; t < 256; ++t) {
                var n = t - 127;
                n < -27 ? (e._baseTable[0 | t] = 0, e._baseTable[256 | t] = 32768, e._shiftTable[0 | t] = 24, 
                e._shiftTable[256 | t] = 24) : n < -14 ? (e._baseTable[0 | t] = 1024 >> -n - 14, 
                e._baseTable[256 | t] = 1024 >> -n - 14 | 32768, e._shiftTable[0 | t] = -n - 1, 
                e._shiftTable[256 | t] = -n - 1) : n <= 15 ? (e._baseTable[0 | t] = n + 15 << 10, 
                e._baseTable[256 | t] = n + 15 << 10 | 32768, e._shiftTable[0 | t] = 13, e._shiftTable[256 | t] = 13) : n < 128 ? (e._baseTable[0 | t] = 31744, 
                e._baseTable[256 | t] = 64512, e._shiftTable[0 | t] = 24, e._shiftTable[256 | t] = 24) : (e._baseTable[0 | t] = 31744, 
                e._baseTable[256 | t] = 64512, e._shiftTable[0 | t] = 13, e._shiftTable[256 | t] = 13);
            }
            for (e._mantissaTable[0] = 0, t = 1; t < 1024; ++t) {
                var i = t << 13;
                for (n = 0; 0 == (8388608 & i); ) n -= 8388608, i <<= 1;
                i &= -8388609, n += 947912704, e._mantissaTable[t] = i | n;
            }
            for (t = 1024; t < 2048; ++t) e._mantissaTable[t] = 939524096 + (t - 1024 << 13);
            for (e._exponentTable[0] = 0, t = 1; t < 31; ++t) e._exponentTable[t] = t << 23;
            for (e._exponentTable[31] = 1199570944, e._exponentTable[32] = 2147483648, t = 33; t < 63; ++t) e._exponentTable[t] = 2147483648 + (t - 32 << 23);
            for (e._exponentTable[63] = 3347054592, e._offsetTable[0] = 0, t = 1; t < 64; ++t) e._offsetTable[t] = 32 === t ? 0 : 1024;
        }, e.roundToFloat16Bits = function(t) {
            e._floatView[0] = t;
            var n = e._uint32View[0], i = n >> 23 & 511;
            return e._baseTable[i] + ((8388607 & n) >> e._shiftTable[i]);
        }, e.convertToNumber = function(t) {
            var n = t >> 10;
            return e._uint32View[0] = e._mantissaTable[e._offsetTable[n] + (1023 & t)] + e._exponentTable[n], 
            e._floatView[0];
        }, i(e, [ "_buffer", function() {
            return this._buffer = new ArrayBuffer(4);
        }, "_floatView", function() {
            return this._floatView = new Float32Array(e._buffer);
        }, "_uint32View", function() {
            return this._uint32View = new Uint32Array(e._buffer);
        }, "_baseTable", function() {
            return this._baseTable = new Uint32Array(512);
        }, "_shiftTable", function() {
            return this._shiftTable = new Uint32Array(512);
        }, "_mantissaTable", function() {
            return this._mantissaTable = new Uint32Array(2048);
        }, "_exponentTable", function() {
            return this._exponentTable = new Uint32Array(64);
        }, "_offsetTable", function() {
            return this._offsetTable = new Uint32Array(64);
        } ]), e;
    }(), Rt = (function() {
        function e() {
            this._nativeConstraint = null, this._simulation = null, this.rigidbodyA = null, 
            this.rigidbodyB = null;
        }
        r(e, "laya.d3.physics.Constraint3D");
    }(), function() {
        function e() {
            this._pressedSprite = null, this._pressedLoopCount = -1, this.sprite = null, this.mousePositionX = 0, 
            this.mousePositionY = 0;
        }
        return r(e, "laya.d3.MouseTouch"), e;
    }()), At = function() {
        function e() {
            this._hitResultsPoolIndex = 0, this._contactPonintsPoolIndex = 0, this._collisions = {}, 
            this._hitResultsPool = [], this._contactPointsPool = [], this._collisionsPool = [];
        }
        r(e, "laya.d3.physics.CollisionTool");
        var t = e.prototype;
        return t.getHitResult = function() {
            var e = this._hitResultsPool[this._hitResultsPoolIndex++];
            return e || (e = new ge(), this._hitResultsPool.push(e)), e;
        }, t.recoverAllHitResultsPool = function() {
            this._hitResultsPoolIndex = 0;
        }, t.getContactPoints = function() {
            var e = this._contactPointsPool[this._contactPonintsPoolIndex++];
            return e || (e = new Me(), this._contactPointsPool.push(e)), e;
        }, t.recoverAllContactPointsPool = function() {
            this._contactPonintsPoolIndex = 0;
        }, t.getCollision = function(e, t) {
            var n, i = e.id, r = t.id, a = this._collisions[i];
            return a && (n = a[r]), n || (a || (a = {}, this._collisions[i] = a), (n = 0 === this._collisionsPool.length ? new Ee() : this._collisionsPool.pop())._colliderA = e, 
            n._colliderB = t, a[r] = n), n;
        }, t.recoverCollision = function(e) {
            var t = e._colliderA.id, n = e._colliderB.id;
            this._collisions[t][n] = null, this._collisionsPool.push(e);
        }, t.garbageCollection = function() {
            this._hitResultsPoolIndex = 0, this._hitResultsPool.length = 0, this._contactPonintsPoolIndex = 0, 
            this._contactPointsPool.length = 0, this._collisionsPool.length = 0;
            for (var e in this._collisionsPool) {
                var t = this._collisionsPool[e], n = !0;
                for (var i in t) t[i] ? n = !1 : delete t[i];
                n && delete this._collisionsPool[e];
            }
        }, e;
    }(), It = function() {
        function e(e, t, n, i) {
            this._children = [], this.transform = new Vt(this, e, t, n, i);
        }
        r(e, "laya.d3.animation.AnimationNode");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.addChild = function(e) {
            e._parent = this, e.transform.setParent(this.transform), this._children.push(e);
        }, t.removeChild = function(e) {
            var t = this._children.indexOf(e);
            -1 !== t && this._children.splice(t, 1);
        }, t.getChildByName = function(e) {
            for (var t = 0, n = this._children.length; t < n; t++) {
                var i = this._children[t];
                if (i.name === e) return i;
            }
            return null;
        }, t.getChildByIndex = function(e) {
            return this._children[e];
        }, t.getChildCount = function() {
            return this._children.length;
        }, t.cloneTo = function(e) {
            var t = e;
            t.name = this.name;
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n], a = r.clone();
                t.addChild(a);
                var o = r.transform, s = a.transform, l = s.localPosition, h = s.localRotation, c = s.localScale;
                o.localPosition.cloneTo(l), o.localRotation.cloneTo(h), o.localScale.cloneTo(c), 
                s.localPosition = l, s.localRotation = h, s.localScale = c;
            }
        }, t.clone = function() {
            var t = new e();
            return this.cloneTo(t), t;
        }, t._cloneNative = function(t, n, i, r, a, o, s) {
            var l = s._nativeCurCloneCount;
            a[l] = o;
            var h = new e(new Float32Array(t.buffer, 3 * l * 4, 3), new Float32Array(n.buffer, 4 * l * 4, 4), new Float32Array(i.buffer, 3 * l * 4, 3), new Float32Array(r.buffer, 16 * l * 4, 16));
            return h._worldMatrixIndex = l, this._cloneToNative(h, t, n, i, r, a, l, s), h;
        }, t._cloneToNative = function(e, t, n, i, r, a, o, s) {
            var l = e;
            l.name = this.name;
            for (var h = 0, c = this._children.length; h < c; h++) {
                var u = this._children[h];
                s._nativeCurCloneCount++;
                var _ = u._cloneNative(t, n, i, r, a, o, s);
                l.addChild(_);
                var d = u.transform, f = _.transform, m = f.localPosition, p = f.localRotation, T = f.localScale;
                d.localPosition.cloneTo(m), d.localRotation.cloneTo(p), d.localScale.cloneTo(T), 
                f.localPosition = m, f.localRotation = p, f.localScale = T;
            }
        }, e;
    }(), Dt = function() {
        function t() {}
        return r(t, "Laya3D"), a(1, t, "enbalePhysics", function() {
            return t._enbalePhysics;
        }), t._cancelLoadByUrl = function(e) {
            n.loader.cancelLoadByUrl(e), t._innerFirstLevelLoaderManager.cancelLoadByUrl(e), 
            t._innerSecondLevelLoaderManager.cancelLoadByUrl(e), t._innerThirdLevelLoaderManager.cancelLoadByUrl(e), 
            t._innerFourthLevelLoaderManager.cancelLoadByUrl(e);
        }, t._changeWebGLSize = function(e, t) {
            F.onStageResize(e, t), we.clientWidth = e, we.clientHeight = t;
        }, t.__init__ = function(e, i, r) {
            if (m.isAntialias = r.isAntialias, m.isAlpha = r.isAlpha, m.premultipliedAlpha = r.premultipliedAlpha, 
            m.isStencil = r.isStencil, F.enable()) {
                M.changeWebGLSize = t._changeWebGLSize, D.is3DMode = !0, n.init(e, i), D.isConchApp || (E.instance = F.mainContext, 
                E.instance.createCommandEncoder = function(e, t, n) {
                    return void 0 === e && (e = 128), void 0 === t && (t = 64), void 0 === n && (n = !1), 
                    new d(this, e, t, n);
                }), D.isConchApp && t.enableNative3D(), Sn.__init__(), wn.__init__(), ii.__init__(), 
                ai.__init__(), ni.__init__(), Rn.__init__(), Un.__init__(), qn.__init__(), Hn.__init__(), 
                Bn.__init__(), zn.__init__(), ei.__init__(), Xn.__init__(), Zn.__init__(), Kn.__init__(), 
                bn.__init__(), Yn.__init__(), jn.__init__(), Ot.__init__(), P.__init__(), $n.__init__(), 
                tn.__init__(), hn.__init__(), q.__init__(), St.__init__();
                var a = S.createMap;
                a.lh = [ "HIERARCHY", Sn._parse ], a.ls = [ "HIERARCHY", Pn._parse ], a.lm = [ "MESH", Mn._parse ], 
                a.lmat = [ "MATERIAL", Rn._parse ], a.ltc = [ "TEXTURECUBE", $n._parse ], a.jpg = [ "TEXTURE2D", P._parse ], 
                a.jpeg = [ "TEXTURE2D", P._parse ], a.bmp = [ "TEXTURE2D", P._parse ], a.gif = [ "TEXTURE2D", P._parse ], 
                a.png = [ "TEXTURE2D", P._parse ], a.dds = [ "TEXTURE2D", P._parse ], a.ktx = [ "TEXTURE2D", P._parse ], 
                a.pvr = [ "TEXTURE2D", P._parse ], a.lani = [ "ANIMATIONCLIP", yn._parse ], a.lav = [ "AVATAR", In._parse ], 
                a.thdata = [ "TERRAINHEIGHTDATA", An._pharse ];
                var o = g.parserMap;
                o.HIERARCHY = t._loadHierarchy, o.MESH = t._loadMesh, o.MATERIAL = t._loadMaterial, 
                o.TEXTURECUBE = t._loadTextureCube, o.TEXTURE2D = t._loadTexture2D, o.ANIMATIONCLIP = t._loadAnimationClip, 
                o.AVATAR = t._loadAvatar, t._innerFirstLevelLoaderManager.on("error", null, t._eventLoadManagerError), 
                t._innerSecondLevelLoaderManager.on("error", null, t._eventLoadManagerError), t._innerThirdLevelLoaderManager.on("error", null, t._eventLoadManagerError), 
                t._innerFourthLevelLoaderManager.on("error", null, t._eventLoadManagerError);
            } else alert("Laya3D init error,must support webGL!");
        }, t.enableNative3D = function() {
            if (D.isConchApp) {
                E = e.LayaGLContext;
                var t = vt, n = Dn, i = In, r = q;
                t.prototype._initData = t.prototype._initDataForNative, t.prototype.setBool = t.prototype.setBoolForNative, 
                t.prototype.getBool = t.prototype.getBoolForNative, t.prototype.setInt = t.prototype.setIntForNative, 
                t.prototype.getInt = t.prototype.getIntForNative, t.prototype.setNumber = t.prototype.setNumberForNative, 
                t.prototype.getNumber = t.prototype.getNumberForNative, t.prototype.setVector = t.prototype.setVectorForNative, 
                t.prototype.getVector = t.prototype.getVectorForNative, t.prototype.setQuaternion = t.prototype.setQuaternionForNative, 
                t.prototype.getQuaternion = t.prototype.getQuaternionForNative, t.prototype.setMatrix4x4 = t.prototype.setMatrix4x4ForNative, 
                t.prototype.getMatrix4x4 = t.prototype.getMatrix4x4ForNative, t.prototype.setBuffer = t.prototype.setBufferForNative, 
                t.prototype.getBuffer = t.prototype.getBufferForNative, t.prototype.setTexture = t.prototype.setTextureForNative, 
                t.prototype.getTexture = t.prototype.getTextureForNative, t.prototype.setAttribute = t.prototype.setAttributeForNative, 
                t.prototype.getAttribute = t.prototype.getAttributeForNative, t.prototype.cloneTo = t.prototype.cloneToForNative, 
                n.prototype._uniformMatrix2fv = n.prototype._uniformMatrix2fvForNative, n.prototype._uniformMatrix3fv = n.prototype._uniformMatrix3fvForNative, 
                n.prototype._uniformMatrix4fv = n.prototype._uniformMatrix4fvForNative, i.prototype._cloneDatasToAnimator = i.prototype._cloneDatasToAnimatorNative, 
                r.renderObjectCulling = q.renderObjectCullingNative, Ht = e.conchFloatKeyframe, 
                cn = e.conchFloatArrayKeyframe, ot = e.conchKeyframeNode, gt = e.conchKeyframeNodeList;
                var a = yn;
                a.prototype._evaluateClipDatasRealTime = a.prototype._evaluateClipDatasRealTimeForNative;
            }
            F.shaderHighPrecision = !1;
            E.instance.getShaderPrecisionFormat(35632, 36338).precision ? F.shaderHighPrecision = !0 : F.shaderHighPrecision = !1;
        }, t.formatRelativePath = function(e, t) {
            var n;
            n = e + t;
            if ("." === t.charAt(0)) {
                for (var i = n.split("/"), r = 0, a = i.length; r < a; r++) if (".." == i[r]) {
                    var o = r - 1;
                    o > 0 && ".." !== i[o] && (i.splice(o, 2), r -= 2);
                }
                n = i.join("/");
            }
            return null != w.customFormat && (n = w.customFormat(n, null)), n;
        }, t._endLoad = function(e, t, n) {
            if (n) for (var i = 0, r = n.length; i < r; i++) {
                var a = g.getRes(n[i]);
                a && a._removeReference();
            }
            e.endLoad(t);
        }, t._eventLoadManagerError = function(e) {
            n.loader.event("error", e);
        }, t._addHierarchyInnerUrls = function(e, n, i, r, a, o, s, l) {
            var h = t.formatRelativePath(r, a);
            return i && (h += i), e.push({
                url: h,
                type: o,
                constructParams: s,
                propertyParams: l
            }), n.push(h), h;
        }, t._getSprite3DHierarchyInnerUrls = function(e, n, i, r, a, o, s, l) {
            var h = 0, c = 0, u = e.props;
            switch (e.type) {
              case "Scene3D":
                var _ = u.lightmaps;
                for (h = 0, c = _.length; h < c; h++) {
                    var d = _[h];
                    d.path = t._addHierarchyInnerUrls(a, o, s, l, d.path, "TEXTURE2D", d.constructParams, d.propertyParams);
                }
                var f = u.reflectionTexture;
                if (f && (u.reflectionTexture = t._addHierarchyInnerUrls(r, o, s, l, f, "TEXTURECUBE")), 
                u.sky) {
                    var m = u.sky.material;
                    m && (m.path = t._addHierarchyInnerUrls(i, o, s, l, m.path, "MATERIAL"));
                }
                break;

              case "Camera":
                var p = u.skyboxMaterial;
                p && (p.path = t._addHierarchyInnerUrls(i, o, s, l, p.path, "MATERIAL"));
                break;

              case "TrailSprite3D":
              case "MeshSprite3D":
              case "SkinnedMeshSprite3D":
                var T = u.meshPath;
                T && (u.meshPath = t._addHierarchyInnerUrls(n, o, s, l, T, "MESH"));
                var E = u.materials;
                if (E) for (h = 0, c = E.length; h < c; h++) E[h].path = t._addHierarchyInnerUrls(i, o, s, l, E[h].path, "MATERIAL");
                break;

              case "ShuriKenParticle3D":
                var v = u.meshPath;
                v && (u.meshPath = t._addHierarchyInnerUrls(n, o, s, l, v, "MESH")), u.material.path = t._addHierarchyInnerUrls(i, o, s, l, u.material.path, "MATERIAL");
                break;

              case "Terrain":
                t._addHierarchyInnerUrls(a, o, s, l, u.dataPath, "TERRAIN");
            }
            var g = e.components;
            if (g) for (var S = 0, R = g.length; S < R; S++) {
                var A = g[S];
                switch (A.type) {
                  case "Animator":
                    A.avatarPath;
                    var I = A.avatar;
                    I && (I.path = t._addHierarchyInnerUrls(a, o, s, l, I.path, "AVATAR"));
                    var D = A.clipPaths;
                    if (D) for (h = 0, c = D.length; h < c; h++) D[h] = t._addHierarchyInnerUrls(a, o, s, l, D[h], "ANIMATIONCLIP"); else {
                        var y = A.layers;
                        for (h = 0; h < y.length; h++) for (var M = y[h].states, C = 0, x = M.length; C < x; C++) {
                            var O = M[C].clipPath;
                            O && (M[C].clipPath = t._addHierarchyInnerUrls(a, o, s, l, O, "ANIMATIONCLIP"));
                        }
                    }
                    break;

                  case "PhysicsCollider":
                  case "Rigidbody3D":
                  case "CharacterController":
                    var L = A.shapes;
                    for (h = 0; h < L.length; h++) {
                        var N = L[h];
                        if ("MeshColliderShape" === N.type) {
                            var V = N.mesh;
                            V && (N.mesh = t._addHierarchyInnerUrls(n, o, s, l, V, "MESH"));
                        }
                    }
                }
            }
            var P = e.child;
            for (h = 0, c = P.length; h < c; h++) t._getSprite3DHierarchyInnerUrls(P[h], n, i, r, a, o, s, l);
        }, t._loadHierarchy = function(e) {
            e.on("loaded", null, t._onHierarchylhLoaded, [ e ]), e.load(e.url, "json", !1, null, !0);
        }, t._onHierarchylhLoaded = function(e, n) {
            var i = e.url, r = ke.getURLVerion(i), a = w.getPath(i), o = [], s = [], l = [], h = [], c = [];
            t._getSprite3DHierarchyInnerUrls(n.data, o, s, l, h, c, r, a);
            var u = o.length + s.length + h.length, _ = u + 1, d = 1 / _;
            if (t._onProcessChange(e, 0, d, 1), h.length > 0) {
                var f = u / _, m = T.create(null, t._onProcessChange, [ e, d, f ], !1);
                t._innerFourthLevelLoaderManager._create(h, !1, T.create(null, t._onHierarchyInnerForthLevResouLoaded, [ e, m, n, c, o, s, l, d + f * h.length, f ]), m, null, null, null, 1, !0);
            } else t._onHierarchyInnerForthLevResouLoaded(e, null, n, c, o, s, l, d, f);
        }, t._onHierarchyInnerForthLevResouLoaded = function(e, n, i, r, a, o, s, l, h) {
            if (n && n.recover(), s.length > 0) {
                var c = T.create(null, t._onProcessChange, [ e, l, h ], !1);
                t._innerThirdLevelLoaderManager._create(s, !1, T.create(null, t._onHierarchyInnerThirdLevResouLoaded, [ e, c, i, r, a, o, l + h * o.length, h ]), n, null, null, null, 1, !0);
            } else t._onHierarchyInnerThirdLevResouLoaded(e, null, i, r, a, o, l, h);
        }, t._onHierarchyInnerThirdLevResouLoaded = function(e, n, i, r, a, o, s, l) {
            if (n && n.recover(), o.length > 0) {
                var h = T.create(null, t._onProcessChange, [ e, s, l ], !1);
                t._innerSecondLevelLoaderManager._create(o, !1, T.create(null, t._onHierarchyInnerSecondLevResouLoaded, [ e, h, i, r, a, s + l * o.length, l ]), n, null, null, null, 1, !0);
            } else t._onHierarchyInnerSecondLevResouLoaded(e, null, i, r, a, s, l);
        }, t._onHierarchyInnerSecondLevResouLoaded = function(e, n, i, r, a, o, s) {
            if (n && n.recover(), a.length > 0) {
                var l = T.create(null, t._onProcessChange, [ e, o, s ], !1);
                t._innerFirstLevelLoaderManager._create(a, !1, T.create(null, t._onHierarchyInnerFirstLevResouLoaded, [ e, l, i, r ]), n, null, null, null, 1, !0);
            } else t._onHierarchyInnerFirstLevResouLoaded(e, null, i, r);
        }, t._onHierarchyInnerFirstLevResouLoaded = function(e, n, i, r) {
            n && n.recover(), e._cache = e._createCache;
            var a = "Scene3D" === i.data.type ? Pn._parse(i, e._propertyParams, e._constructParams) : Sn._parse(i, e._propertyParams, e._constructParams);
            t._endLoad(e, a, r);
        }, t._loadMesh = function(e) {
            e.on("loaded", null, t._onMeshLmLoaded, [ e ]), e.load(e.url, "arraybuffer", !1, null, !0);
        }, t._onMeshLmLoaded = function(e, n) {
            e._cache = e._createCache;
            var i = Mn._parse(n, e._propertyParams, e._constructParams);
            t._endLoad(e, i);
        }, t._loadMaterial = function(e) {
            e.on("loaded", null, t._onMaterilLmatLoaded, [ e ]), e.load(e.url, "json", !1, null, !0);
        }, t._onMaterilLmatLoaded = function(e, n) {
            var i, r = e.url, a = ke.getURLVerion(r), o = w.getPath(r), s = [], l = [];
            n.customProps;
            switch (n.version) {
              case "LAYAMATERIAL:01":
              case "LAYAMATERIAL:02":
                var h = 0, c = 0, u = n.props.textures;
                if (u) for (h = 0, c = u.length; h < c; h++) {
                    var _ = u[h], d = _.path;
                    d && (i = t.formatRelativePath(o, d), a && (i += a), s.push({
                        url: i,
                        constructParams: _.constructParams,
                        propertyParams: _.propertyParams
                    }), l.push(i), _.path = i);
                }
                break;

              default:
                throw new Error("Laya3D:unkonwn version.");
            }
            var f = s.length, m = f + 1, p = 1 / m;
            if (t._onProcessChange(e, 0, p, 1), f > 0) {
                var E = T.create(null, t._onProcessChange, [ e, p, f / m ], !1);
                t._innerFourthLevelLoaderManager._create(s, !1, T.create(null, t._onMateialTexturesLoaded, [ e, E, n, l ]), E, null, null, null, 1, !0);
            } else t._onMateialTexturesLoaded(e, null, n, null);
        }, t._onMateialTexturesLoaded = function(e, n, i, r) {
            e._cache = e._createCache;
            var a = Rn._parse(i, e._propertyParams, e._constructParams);
            t._endLoad(e, a, r), n && n.recover();
        }, t._loadAvatar = function(e) {
            e.load(e.url, "json", !1, null, !0), e.on("loaded", null, function(n) {
                e._cache = e._createCache;
                var i = In._parse(n, e._propertyParams, e._constructParams);
                t._endLoad(e, i);
            });
        }, t._loadAnimationClip = function(e) {
            e.load(e.url, "arraybuffer", !1, null, !0), e.on("loaded", null, function(n) {
                e._cache = e._createCache;
                var i = yn._parse(n, e._propertyParams, e._constructParams);
                t._endLoad(e, i);
            });
        }, t._loadTexture2D = function(e) {
            var n, i = e.url, r = i.lastIndexOf(".") + 1, a = i.indexOf("?"), o = -1 == a ? i.length : a;
            switch (i.substr(r, o - r)) {
              case "jpg":
              case "jpeg":
              case "bmp":
              case "gif":
              case "png":
                n = "nativeimage";
                break;

              case "dds":
              case "ktx":
              case "pvr":
                n = "arraybuffer";
            }
            e.load(e.url, n, !1, null, !0), e.on("loaded", null, function(n) {
                e._cache = e._createCache;
                var i = P._parse(n, e._propertyParams, e._constructParams);
                t._endLoad(e, i);
            });
        }, t._loadTextureCube = function(e) {
            e.load(e.url, "json", !1, null, !0), e.on("loaded", null, t._onTextureCubeLtcLoaded, [ e ]);
        }, t._onTextureCubeLtcLoaded = function(e, n) {
            var i = w.getPath(e.url), r = [ t.formatRelativePath(i, n.front), t.formatRelativePath(i, n.back), t.formatRelativePath(i, n.left), t.formatRelativePath(i, n.right), t.formatRelativePath(i, n.up), t.formatRelativePath(i, n.down) ];
            t._onProcessChange(e, 0, 1 / 7, 1);
            var a = T.create(null, t._onProcessChange, [ e, 1 / 7, 6 / 7 ], !1);
            t._innerFourthLevelLoaderManager.load(r, T.create(null, t._onTextureCubeImagesLoaded, [ e, r, a ]), a, "nativeimage");
        }, t._onTextureCubeImagesLoaded = function(e, n, i) {
            for (var r = new Array(6), a = 0; a < 6; a++) r[a] = g.getRes(n[a]);
            e._cache = e._createCache;
            var o = $n._parse(r, e._propertyParams, e._constructParams);
            for (i.recover(), a = 0; a < 6; a++) g.clearRes(n[a]);
            t._endLoad(e, o);
        }, t._onProcessChange = function(e, t, n, i) {
            (i = t + i * n) < 1 && e.event("progress", i);
        }, t.init = function(n, i, r, a) {
            if (!t._isInit) {
                t._isInit = !0, r = r || ye._defaultConfig, t._editerEnvironment = r._editerEnvironment;
                var o = e.Physics3D;
                null == o ? (t._enbalePhysics = !1, t.__init__(n, i, r), a && a.run()) : (t._enbalePhysics = !0, 
                o(1024 * r.defaultPhysicsMemory * 1024).then(function() {
                    t.__init__(n, i, r), a && a.run();
                }));
            }
        }, t.HIERARCHY = "HIERARCHY", t.MESH = "MESH", t.MATERIAL = "MATERIAL", t.TEXTURE2D = "TEXTURE2D", 
        t.TEXTURECUBE = "TEXTURECUBE", t.ANIMATIONCLIP = "ANIMATIONCLIP", t.AVATAR = "AVATAR", 
        t.TERRAINHEIGHTDATA = "TERRAINHEIGHTDATA", t.TERRAINRES = "TERRAIN", t._isInit = !1, 
        t._enbalePhysics = !1, t._editerEnvironment = !1, t.debugMode = !1, i(t, [ "_innerFirstLevelLoaderManager", function() {
            return this._innerFirstLevelLoaderManager = new S();
        }, "_innerSecondLevelLoaderManager", function() {
            return this._innerSecondLevelLoaderManager = new S();
        }, "_innerThirdLevelLoaderManager", function() {
            return this._innerThirdLevelLoaderManager = new S();
        }, "_innerFourthLevelLoaderManager", function() {
            return this._innerFourthLevelLoaderManager = new S();
        }, "_physics3D", function() {
            return this._physics3D = e.Physics3D;
        }, "physicsSettings", function() {
            return this.physicsSettings = new _e();
        } ]), t;
    }(), yt = function() {
        function e() {}
        return r(e, "laya.d3.core.particleShuriKen.module.shape.ShapeUtils"), e._randomPointUnitArcCircle = function(e, t, n) {
            var i = t.elements, r = NaN;
            r = n ? n.getFloat() * e : Math.random() * e, i[0] = Math.cos(r), i[1] = Math.sin(r);
        }, e._randomPointInsideUnitArcCircle = function(t, n, i) {
            var r = n.elements;
            e._randomPointUnitArcCircle(t, n, i);
            var a = NaN;
            a = i ? Math.pow(i.getFloat(), .5) : Math.pow(Math.random(), .5), r[0] = r[0] * a, 
            r[1] = r[1] * a;
        }, e._randomPointUnitCircle = function(e, t) {
            var n = e.elements, i = NaN;
            i = t ? t.getFloat() * Math.PI * 2 : Math.random() * Math.PI * 2, n[0] = Math.cos(i), 
            n[1] = Math.sin(i);
        }, e._randomPointInsideUnitCircle = function(t, n) {
            var i = t.elements;
            e._randomPointUnitCircle(t);
            var r = NaN;
            r = n ? Math.pow(n.getFloat(), .5) : Math.pow(Math.random(), .5), i[0] = i[0] * r, 
            i[1] = i[1] * r;
        }, e._randomPointUnitSphere = function(e, t) {
            var n = e.elements, i = NaN, r = NaN;
            t ? (i = n[2] = 2 * t.getFloat() - 1, r = t.getFloat() * Math.PI * 2) : (i = n[2] = 2 * Math.random() - 1, 
            r = Math.random() * Math.PI * 2);
            var a = Math.sqrt(1 - i * i);
            n[0] = a * Math.cos(r), n[1] = a * Math.sin(r);
        }, e._randomPointInsideUnitSphere = function(t, n) {
            var i = t.elements;
            e._randomPointUnitSphere(t);
            var r = NaN;
            r = n ? Math.pow(n.getFloat(), 1 / 3) : Math.pow(Math.random(), 1 / 3), i[0] = i[0] * r, 
            i[1] = i[1] * r, i[2] = i[2] * r;
        }, e._randomPointInsideHalfUnitBox = function(e, t) {
            var n = e.elements;
            t ? (n[0] = t.getFloat() - .5, n[1] = t.getFloat() - .5, n[2] = t.getFloat() - .5) : (n[0] = Math.random() - .5, 
            n[1] = Math.random() - .5, n[2] = Math.random() - .5);
        }, e;
    }(), Mt = function() {
        function e(e) {
            this._velocity = null, this.enbale = !1, this.space = 0, this._velocity = e;
        }
        r(e, "laya.d3.core.particleShuriKen.module.VelocityOverLifetime");
        var t = e.prototype;
        return n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.cloneTo = function(e) {
            var t = e;
            this._velocity.cloneTo(t._velocity), t.enbale = this.enbale, t.space = this.space;
        }, t.clone = function() {
            var e;
            switch (this._velocity.type) {
              case 0:
                e = mt.createByConstant(this._velocity.constant.clone());
                break;

              case 1:
                e = mt.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());
                break;

              case 2:
                e = mt.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());
                break;

              case 3:
                e = mt.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMax.clone());
            }
            var t = new this.constructor(e);
            return t.enbale = this.enbale, t.space = this.space, t;
        }, a(0, t, "velocity", function() {
            return this._velocity;
        }), e;
    }(), Ct = (function() {
        function e() {
            this._currentLength = 0, this._elements = null, this._elements = new Float32Array(12);
        }
        r(e, "laya.d3.core.particleShuriKen.module.GradientDataVector2");
        var t = e.prototype;
        n.imps(t, {
            "laya.d3.core.IClone": !0
        }), t.add = function(e, t) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("GradientDataVector2 warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t.x, 
            this._elements[this._currentLength++] = t.y) : console.log("GradientDataVector2 warning:data count must lessEqual than 4");
        }, t.cloneTo = function(e) {
            var t = e;
            t._currentLength = this._currentLength;
            var n = t._elements;
            n.length = this._elements.length;
            for (var i = 0, r = this._elements.length; i < r; i++) n[i] = this._elements[i];
        }, t.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, t, "gradientCount", function() {
            return this._currentLength / 3;
        });
    }(), function() {
        function e() {
            this._damping = NaN, this._impulseClamp = NaN, this._tau = NaN, this._pivotInA = new dn(), 
            this._pivotInB = new dn();
        }
        r(e, "laya.d3.physics.constraints.Point2PointConstraint");
        var t = e.prototype;
        a(0, t, "pivotInA", function() {
            return this._pivotInA;
        }, function(e) {
            this._pivotInA = e;
        }), a(0, t, "pivotInB", function() {
            return this._pivotInB;
        }, function(e) {
            this._pivotInB = e;
        }), a(0, t, "damping", function() {
            return this._damping;
        }, function(e) {
            this._damping = e;
        }), a(0, t, "impulseClamp", function() {
            return this._impulseClamp;
        }, function(e) {
            this._impulseClamp = e;
        }), a(0, t, "tau", function() {
            return this._tau;
        }, function(e) {
            this._tau = e;
        });
    }(), function() {
        function e(e, t, n, i) {
            this.minDepth = 0, this.maxDepth = 1, this.x = e, this.y = t, this.width = n, this.height = i;
        }
        r(e, "laya.d3.math.Viewport");
        var t = e.prototype;
        return t.project = function(e, t, n) {
            dn.transformV3ToV3(e, t, n);
            var i = e.elements, r = t.elements, a = n.elements, o = i[0] * r[3] + i[1] * r[7] + i[2] * r[11] + r[15];
            1 !== o && (a[0] = a[0] / o, a[1] = a[1] / o, a[2] = a[2] / o), a[0] = .5 * (a[0] + 1) * this.width + this.x, 
            a[1] = .5 * (1 - a[1]) * this.height + this.y, a[2] = a[2] * (this.maxDepth - this.minDepth) + this.minDepth;
        }, t.project1 = function(e, t, n) {
            var i = dn._tempVector4;
            dn.transformV3ToV4(e, t, i);
            var r = i.elements, a = r[3];
            a < .1 && a > -1e-6 && (a = 1e-6), r[0] /= a, r[1] /= a, r[2] /= a;
            var o = n.elements;
            o[0] = (r[0] + 1) * this.width / 2 + this.x, o[1] = (1 - r[1]) * this.height / 2 + this.y, 
            o[2] = r[3];
        }, t.unprojectFromMat = function(e, t, n) {
            var i = e.elements, r = t.elements, a = n.elements;
            a[0] = (i[0] - this.x) / this.width * 2 - 1, a[1] = -((i[1] - this.y) / this.height * 2 - 1);
            var o = (this.maxDepth - this.minDepth) / 2;
            a[2] = (i[2] - this.minDepth - o) / o;
            var s = a[0] * r[3] + a[1] * r[7] + a[2] * r[11] + r[15];
            dn.transformV3ToV3(n, t, n), 1 !== s && (a[0] = a[0] / s, a[1] = a[1] / s, a[2] = a[2] / s);
        }, t.unprojectFromWVP = function(t, n, i, r, a) {
            ut.multiply(n, i, e._tempMatrix4x4), r && ut.multiply(e._tempMatrix4x4, r, e._tempMatrix4x4), 
            e._tempMatrix4x4.invert(e._tempMatrix4x4), this.unprojectFromMat(t, e._tempMatrix4x4, a);
        }, t.cloneTo = function(e) {
            e.x = this.x, e.y = this.y, e.width = this.width, e.height = this.height, e.minDepth = this.minDepth, 
            e.maxDepth = this.maxDepth;
        }, i(e, [ "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new ut();
        } ]), e;
    }()), xt = (function() {
        function e(e) {
            if (this._state0U = NaN, this._state0L = NaN, this._state1U = NaN, this._state1L = NaN, 
            !(e instanceof Array) || 4 !== e.length) throw new Error("Rand:Seed must be an array with 4 numbers");
            this._state0U = 0 | e[0], this._state0L = 0 | e[1], this._state1U = 0 | e[2], this._state1L = 0 | e[3];
        }
        r(e, "laya.d3.math.RandX");
        var t = e.prototype;
        t.randomint = function() {
            var e = this._state0U, t = this._state0L, n = this._state1U, i = this._state1L, r = (i >>> 0) + (t >>> 0), a = n + e + (r / 2 >>> 31) >>> 0, o = r >>> 0;
            this._state0U = n, this._state0L = i;
            var s = 0, l = 0, h = 0, c = 0;
            s = (e ^= s = e << 23 | (-512 & t) >>> 9) ^ n, l = (t ^= l = t << 23) ^ i;
            s ^= h = e >>> 18, l ^= c = t >>> 18 | (262143 & e) << 14;
            return h = n >>> 5, c = i >>> 5 | (31 & n) << 27, s ^= h, l ^= c, this._state1U = s, 
            this._state1L = l, [ a, o ];
        }, t.random = function() {
            var t = this.randomint(), n = t[0], i = 1023 << 20 | n >>> 12, r = 0 | (t[1] >>> 12 | (4095 & n) << 20);
            e._CONVERTION_BUFFER.setUint32(0, i, !1), e._CONVERTION_BUFFER.setUint32(4, r, !1);
            return dt._CONVERTION_BUFFER.getFloat64(0, !1) - 1;
        }, i(e, [ "_CONVERTION_BUFFER", function() {
            return this._CONVERTION_BUFFER = new DataView(new ArrayBuffer(8));
        }, "defaultRand", function() {
            return this.defaultRand = new dt([ 0, Date.now() / 65536, 0, Date.now() % 65536 ]);
        } ]);
    }(), function() {
        function e() {}
        return r(e, "laya.d3.graphics.VertexElementFormat"), e.getElementInfos = function(t) {
            var n = e._elementInfos[t];
            if (n) return n;
            throw "VertexElementFormat: this vertexElementFormat is not implement.";
        }, e.Single = "single", e.Vector2 = "vector2", e.Vector3 = "vector3", e.Vector4 = "vector4", 
        e.Color = "color", e.Byte4 = "byte4", e.Short2 = "short2", e.Short4 = "short4", 
        e.NormalizedShort2 = "normalizedshort2", e.NormalizedShort4 = "normalizedshort4", 
        e.HalfVector2 = "halfvector2", e.HalfVector4 = "halfvector4", i(e, [ "_elementInfos", function() {
            return this._elementInfos = {
                single: [ 1, 5126, 0 ],
                vector2: [ 2, 5126, 0 ],
                vector3: [ 3, 5126, 0 ],
                vector4: [ 4, 5126, 0 ],
                color: [ 4, 5126, 0 ],
                byte4: [ 4, 5121, 0 ],
                short2: [ 2, 5126, 0 ],
                short4: [ 4, 5126, 0 ],
                normalizedshort2: [ 2, 5126, 0 ],
                normalizedshort4: [ 4, 5126, 0 ],
                halfvector2: [ 2, 5126, 0 ],
                halfvector4: [ 4, 5126, 0 ]
            };
        } ]), e;
    }()), Ot = function() {
        function e() {}
        return r(e, "laya.d3.shader.ShaderInit3D"), e.__init__ = function() {
            (e._rangeAttenTex = ke._buildTexture2D(1024, 1, 2, j.lightAttenTexture)).wrapModeU = 1, 
            e._rangeAttenTex.wrapModeV = 1, e._rangeAttenTex.lock = !0, $e.SHADERDEFINE_HIGHPRECISION = $e.registerPublicDefine("HIGHPRECISION"), 
            Pn.SHADERDEFINE_FOG = $e.registerPublicDefine("FOG"), Pn.SHADERDEFINE_DIRECTIONLIGHT = $e.registerPublicDefine("DIRECTIONLIGHT"), 
            Pn.SHADERDEFINE_POINTLIGHT = $e.registerPublicDefine("POINTLIGHT"), Pn.SHADERDEFINE_SPOTLIGHT = $e.registerPublicDefine("SPOTLIGHT"), 
            Pn.SHADERDEFINE_CAST_SHADOW = $e.registerPublicDefine("CASTSHADOW"), Pn.SHADERDEFINE_SHADOW_PSSM1 = $e.registerPublicDefine("SHADOWMAP_PSSM1"), 
            Pn.SHADERDEFINE_SHADOW_PSSM2 = $e.registerPublicDefine("SHADOWMAP_PSSM2"), Pn.SHADERDEFINE_SHADOW_PSSM3 = $e.registerPublicDefine("SHADOWMAP_PSSM3"), 
            Pn.SHADERDEFINE_SHADOW_PCF_NO = $e.registerPublicDefine("SHADOWMAP_PCF_NO"), Pn.SHADERDEFINE_SHADOW_PCF1 = $e.registerPublicDefine("SHADOWMAP_PCF1"), 
            Pn.SHADERDEFINE_SHADOW_PCF2 = $e.registerPublicDefine("SHADOWMAP_PCF2"), Pn.SHADERDEFINE_SHADOW_PCF3 = $e.registerPublicDefine("SHADOWMAP_PCF3"), 
            Pn.SHADERDEFINE_REFLECTMAP = $e.registerPublicDefine("REFLECTMAP"), $e.addInclude("Lighting.glsl", "\nstruct DirectionLight {\n\tvec3 Color;\n\tvec3 Direction;\n};\n\nstruct PointLight {\n\tvec3 Color;\n\tvec3 Position;\n\tfloat Range;\n};\n\nstruct SpotLight {\n\tvec3 Color;\n\tvec3 Position;\n\tvec3 Direction;\n\tfloat Spot;\n\tfloat Range;\n};\n\n// Laya中使用衰减纹理\nfloat LayaAttenuation(in vec3 L,in float invLightRadius) {\n\tfloat fRatio = clamp(length(L) * invLightRadius,0.0,1.0);\n\tfRatio *= fRatio;\n\treturn 1.0 / (1.0 + 25.0 * fRatio)* clamp(4.0*(1.0 - fRatio),0.0,1.0); //fade to black as if 4 pixel texture\n}\n\n// Same as Just Cause 2 and Crysis 2 (you can read GPU Pro 1 book for more information)\nfloat BasicAttenuation(in vec3 L,in float invLightRadius) {\n\tvec3 distance = L * invLightRadius;\n\tfloat attenuation = clamp(1.0 - dot(distance, distance),0.0,1.0); // Equals float attenuation = saturate(1.0f - dot(L, L) / (lightRadius *  lightRadius));\n\treturn attenuation * attenuation;\n}\n\n// Inspired on http://fools.slindev.com/viewtopic.php?f=11&t=21&view=unread#unread\nfloat NaturalAttenuation(in vec3 L,in float invLightRadius) {\n\tfloat attenuationFactor = 30.0;\n\tvec3 distance = L * invLightRadius;\n\tfloat attenuation = dot(distance, distance); // Equals float attenuation = dot(L, L) / (lightRadius *  lightRadius);\n\tattenuation = 1.0 / (attenuation * attenuationFactor + 1.0);\n\t// Second we move down the function therewith it reaches zero at abscissa 1:\n\tattenuationFactor = 1.0 / (attenuationFactor + 1.0); //attenuationFactor contains now the value we have to subtract\n\tattenuation = max(attenuation - attenuationFactor, 0.0); // The max fixes a bug.\n\t// Finally we expand the equation along the y-axis so that it starts with a function value of 1 again.\n\tattenuation /= 1.0 - attenuationFactor;\n\treturn attenuation;\n}\n\nvoid LayaAirBlinnPhongLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir,in vec3 lightColor, in vec3 lightVec,out vec3 diffuseColor,out vec3 specularColor) {\n\tmediump vec3 h = normalize(viewDir-lightVec);\n\tlowp float ln = max (0.0, dot (-lightVec,normal));\n\tfloat nh = max (0.0, dot (h,normal));\n\tdiffuseColor=lightColor * ln;\n\tspecularColor=lightColor *specColor*pow (nh, specColorIntensity*128.0) * gloss;\n}\n\nvoid LayaAirBlinnPhongDiectionLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in DirectionLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec=normalize(light.Direction);\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,lightVec,diffuseColor,specularColor);\n}\n\nvoid LayaAirBlinnPhongPointLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in PointLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec =  pos-light.Position;\n\t//if( length(lightVec) > light.Range )\n\t//\treturn;\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,lightVec/length(lightVec),diffuseColor,specularColor);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range);\n\tdiffuseColor *= attenuate;\n\tspecularColor*= attenuate;\n}\n\nvoid LayaAirBlinnPhongSpotLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in SpotLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec =  pos-light.Position;\n\t//if( length(lightVec) > light.Range)\n\t//\treturn;\n\n\tvec3 normalLightVec=lightVec/length(lightVec);\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,normalLightVec,diffuseColor,specularColor);\n\tvec2 cosAngles=cos(vec2(light.Spot,light.Spot*0.5)*0.5);//ConeAttenuation\n\tfloat dl=dot(normalize(light.Direction),normalLightVec);\n\tdl*=smoothstep(cosAngles[0],cosAngles[1],dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range)*dl;\n\tdiffuseColor *=attenuate;\n\tspecularColor *=attenuate;\n}\n\nvec3 NormalSampleToWorldSpace(vec3 normalMapSample, vec3 unitNormal, vec3 tangent,vec3 binormal) {\n\tvec3 normalT =vec3(2.0*normalMapSample.x - 1.0,1.0-2.0*normalMapSample.y,2.0*normalMapSample.z - 1.0);\n\n\t// Build orthonormal basis.\n\tvec3 N = normalize(unitNormal);\n\tvec3 T = normalize(tangent);\n\tvec3 B = normalize(binormal);\n\tmat3 TBN = mat3(T, B, N);\n\n\t// Transform from tangent space to world space.\n\tvec3 bumpedNormal = TBN*normalT;\n\n\treturn bumpedNormal;\n}\n\nvec3 NormalSampleToWorldSpace1(vec4 normalMapSample, vec3 tangent, vec3 binormal, vec3 unitNormal) {\n\tvec3 normalT;\n\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\n\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\n\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\n\n\tvec3 T = normalize(tangent);\n\tvec3 B = normalize(binormal);\n\tvec3 N = normalize(unitNormal);\n\tmat3 TBN = mat3(T, B, N);\n\n\t// Transform from tangent space to world space.\n\tvec3 bumpedNormal = TBN * normalize(normalT);\n\n\treturn bumpedNormal;\n}\n\nvec3 DecodeLightmap(vec4 color) {\n\treturn color.rgb*color.a*5.0;\n}\n\nvec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\n\tvec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\n\ttransTexcoord.y+=1.0;\n\treturn transTexcoord;\n}\n\n"), 
            $e.addInclude("ShadowHelper.glsl", "uniform sampler2D u_shadowMap1;\nuniform sampler2D u_shadowMap2;\nuniform sampler2D u_shadowMap3;\nuniform vec2\t  u_shadowPCFoffset;\nuniform vec4     u_shadowPSSMDistance;\nvec4 packDepth(const in float depth)\n{\n\tconst vec4 bitShift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n\tconst vec4 bitMask\t= vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n\tvec4 res = mod(depth*bitShift*vec4(255), vec4(256))/vec4(255);\n\tres -= res.xxyz * bitMask;\n\treturn res;\n}\nfloat unpackDepth(const in vec4 rgbaDepth)\n{\n\tconst vec4 bitShift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n\tfloat depth = dot(rgbaDepth, bitShift);\n\treturn depth;\n}\nfloat tex2DPCF( sampler2D shadowMap,vec2 texcoord,vec2 invsize,float zRef )\n{\n\tvec2 texelpos =texcoord / invsize;\n\tvec2 lerps = fract( texelpos );\n\tfloat sourcevals[4];\n\tsourcevals[0] = float( unpackDepth(texture2D(shadowMap,texcoord)) > zRef );\n\tsourcevals[1] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x,0))) > zRef );\n\tsourcevals[2] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(0,invsize.y))) > zRef );\n\tsourcevals[3] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x, invsize.y) )) > zRef );\n\treturn mix( mix(sourcevals[0],sourcevals[2],lerps.y),mix(sourcevals[1],sourcevals[3],lerps.y),lerps.x );\n}\nfloat getShadowPSSM3( sampler2D shadowMap1,sampler2D shadowMap2,sampler2D shadowMap3,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tint nPSNum = int(posViewZ>pssmDistance.x);\n\tnPSNum += int(posViewZ>pssmDistance.y);\n\tnPSNum += int(posViewZ>pssmDistance.z);\n\t//真SB,webgl不支持在PS中直接访问数组\n\tmat4 lightVP;\n\tif( nPSNum == 0 )\n\t{\n\t\tlightVP = lightShadowVP[1];\n\t}\n\telse if( nPSNum == 1 )\n\t{\n\t\tlightVP = lightShadowVP[2];\n\t}\n\telse if( nPSNum == 2 )\n\t{\n\t\tlightVP = lightShadowVP[3];\n\t}\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\n\t//为了效率，在CPU计算/2.0 + 0.5\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\n\tfloat fMyZ = vText.z - zBias;\n\t/*\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\tbool bInFrustum = all( bInFrustumVec );\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\tbool bFrustumTest = all( bFrustumTestVec );\n\tif ( bFrustumTest ) \n\t*/\n\tif( fMyZ <= 1.0 )\n\t{\n\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue = value/4.0;\n\t\t} \n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF2\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF_NO\n\t\tvec4 color;\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap3,vText.xy );\n\t\t}\n\t\tzdepth = unpackDepth(color);\n\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t}\n\treturn value;\n}\nfloat getShadowPSSM2( sampler2D shadowMap1,sampler2D shadowMap2,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tint nPSNum = int(posViewZ>pssmDistance.x);\n\tnPSNum += int(posViewZ>pssmDistance.y);\n\t//真SB,webgl不支持在PS中直接访问数组\n\tmat4 lightVP;\n\tif( nPSNum == 0 )\n\t{\n\t\tlightVP = lightShadowVP[1];\n\t}\n\telse if( nPSNum == 1 )\n\t{\n\t\tlightVP = lightShadowVP[2];\n\t}\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\n\t//为了效率，在CPU计算/2.0 + 0.5\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\n\tfloat fMyZ = vText.z - zBias;\n\t/*\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\tbool bInFrustum = all( bInFrustumVec );\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\tbool bFrustumTest = all( bFrustumTestVec );\n\tif ( bFrustumTest ) \n\t*/\n\tif( fMyZ <= 1.0 )\n\t{\n\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue = value/4.0;\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF2\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF_NO\n\t\tvec4 color;\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\n\t\t}\n\t\tzdepth = unpackDepth(color);\n\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t}\n\treturn value;\n}\nfloat getShadowPSSM1( sampler2D shadowMap1,vec4 lightMVPPos,vec4 pssmDistance,vec2 shadowPCFOffset,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tif( posViewZ < pssmDistance.x )\n\t{\n\t\tvec3 vText = lightMVPPos.xyz / lightMVPPos.w;\n\t\tfloat fMyZ = vText.z - zBias;\n\t\t/*\n\t\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\t\tbool bInFrustum = all( bInFrustumVec );\n\t\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\t\tbool bFrustumTest = all( bFrustumTestVec );\n\t\t*/\n\t\tif ( fMyZ <= 1.0 ) \n\t\t{\n\t\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,fMyZ );\n\t\t\tvalue = value/4.0;\n#endif\n#ifdef SHADOWMAP_PCF2\t\t\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n#endif\n#ifdef SHADOWMAP_PCF_NO\t\t\n\t\t\tvec4 color = texture2D( shadowMap1,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t\t}\n\t}\n\treturn value;\n}"), 
            $e.addInclude("BRDF.glsl", "struct LayaGI\n{\n\tvec3 diffuse;\n\tvec3 specular;\n};\n\nvec4 LayaAirBRDF(in vec3 diffuseColor, in vec3 specularColor, in float oneMinusReflectivity, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);\n\tvec3 halfDir = SafeNormalize(viewDir - lightDir);\n\t\n\tfloat nv = abs(dot(normal, viewDir));\n\t\n\tfloat nl = clamp(dot(normal,   -lightDir),  0.0, 1.0);\n\tfloat nh = clamp(dot(normal,     halfDir),  0.0, 1.0);\n\tfloat lv = clamp(dot(lightDir,   viewDir),  0.0, 1.0);\n\tfloat lh = clamp(dot(lightDir,  -halfDir),  0.0, 1.0);\n\t\n\tfloat diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;\n\t\n\tfloat roughness = PerceptualRoughnessToRoughness(perceptualRoughness);\n\t\n\t//#if UNITY_BRDF_GGX\n\tfloat V = SmithJointGGXVisibilityTerm(nl, nv, roughness);\n\tfloat D = GGXTerm(nh, roughness);\n\t\n\tfloat specularTerm = V * D * PI;\n\t\n\tspecularTerm = sqrt(max(0.0001, specularTerm));\n\tspecularTerm = max(0.0, specularTerm * nl);\n\t\n\tfloat surfaceReduction = 1.0 - 0.28 * roughness * perceptualRoughness;\n\tfloat grazingTerm = clamp(smoothness + (1.0 - oneMinusReflectivity), 0.0, 1.0);\n\t\n\tvec4 color;\n\tcolor.rgb = diffuseColor * (gi.diffuse + lightColor * diffuseTerm) \n\t\t\t  + specularTerm * lightColor * FresnelTerm (specularColor, lh)\n\t\t\t  + surfaceReduction * gi.specular * FresnelLerp(specularColor, vec3(grazingTerm), nv);\n\t\n\treturn color;\n}"), 
            $e.addInclude("PBRUtils.glsl", "struct DirectionLight\n{\n\tvec3 Color;\n\tvec3 Direction;\n};\n\nstruct PointLight\n{\n\tvec3 Color;\n\tvec3 Position;\n\tfloat Range;\n};\n\nstruct SpotLight\n{\n\tvec3 Color;\n\tvec3 Position;\n\tvec3 Direction;\n\tfloat SpotAngle;\n\tfloat Range;\n};\n\nvec3 UnpackScaleNormal(in vec2 uv0)\n{\n\t#ifdef NORMALTEXTURE\n\t\tvec3 normalT;\n\t\tvec4 normalMapSample = texture2D(u_NormalTexture, uv0);\n\t\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\n\t\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\n\t\tnormalT.xy *= u_normalScale;\n\t\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\n\t\t\n\t\tvec3 T = normalize(v_Tangent);\n\t\tvec3 B = normalize(v_Binormal);\n\t\tvec3 N = normalize(v_Normal);\n\t\tmat3 TBN = mat3(T, B, N);\n\t\t\n\t\tvec3 bumpedNormal = TBN * normalize(normalT);\n\t\treturn bumpedNormal;\n\t#else\n\t\treturn normalize(v_Normal);\n\t#endif\n}\n\nvec4 DielectricSpecularColor = vec4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301);\n\nfloat PI = 3.14159265359;\n\nvec3 FresnelTerm (in vec3 F0, in float cosA)\n{\n\treturn F0 + (vec3(1.0) - F0) * pow(1.0 - cosA, 5.0);\n}\n\nvec3 FresnelLerp (in vec3 F0, in vec3 F90, float cosA)\n{\n    float t = pow(1.0 - cosA, 5.0);\n    return mix(F0, F90, t);\n}\n\nfloat PerceptualRoughnessToRoughness(in float perceptualRoughness)\n{\n\treturn perceptualRoughness * perceptualRoughness;\n}\n\nfloat PerceptualRoughnessToSpecularPower(in float perceptualRoughness)\n{\n\tfloat m = PerceptualRoughnessToRoughness(perceptualRoughness);\n\tfloat sq = max(0.0001, m * m);\n\tfloat n = (2.0 / sq) - 2.0;\n\tn = max(n, 0.0001);\n\treturn n;\n}\n\nfloat RoughnessToPerceptualRoughness(in float roughness)\n{\n\treturn sqrt(roughness);\n}\n\nfloat SmoothnessToRoughness(in float smoothness)\n{\n\treturn (1.0 - smoothness) * (1.0 - smoothness);\n}\n\nfloat SmoothnessToPerceptualRoughness(in float smoothness)\n{\n\treturn (1.0 - smoothness);\n}\n\nvec3 SafeNormalize(in vec3 inVec)\n{\n\tfloat dp3 = max(0.001,dot(inVec,inVec));\n\treturn inVec * (1.0 / sqrt(dp3));\n}\n\nfloat DisneyDiffuse(in float NdotV, in float NdotL, in float LdotH, in float perceptualRoughness)\n{\n\tfloat fd90 = 0.5 + 2.0 * LdotH * LdotH * perceptualRoughness;\n\tfloat lightScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotL,5.0));\n\tfloat viewScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotV,5.0));\n\n\treturn lightScatter * viewScatter;\n}\n\nfloat SmithJointGGXVisibilityTerm (float NdotL, float NdotV, float roughness)\n{\n\tfloat a = roughness;\n\tfloat lambdaV = NdotL * (NdotV * (1.0 - a) + a);\n\tfloat lambdaL = NdotV * (NdotL * (1.0 - a) + a);\n\n\treturn 0.5 / (lambdaV + lambdaL + 0.00001);\n}\n\nfloat GGXTerm (float NdotH, float roughness)\n{\n\tfloat a2 = roughness * roughness;\n\tfloat d = (NdotH * a2 - NdotH) * NdotH + 1.0;\n\treturn 0.31830988618 * a2 / (d * d + 0.0000001);\n}\n\nfloat OneMinusReflectivityFromMetallic(in float metallic)\n{\n\tfloat oneMinusDielectricSpec = DielectricSpecularColor.a;\n\treturn oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;\n}\n\nfloat SpecularStrength(vec3 specular)\n{\n    //(SHADER_TARGET < 30)return specular.r; \n    return max (max (specular.r, specular.g), specular.b);\n}\n\nvec3 DiffuseAndSpecularFromMetallic(in vec3 diffuseColor, in float metallic, out vec3 specularColor, out float oneMinusReflectivity)\n{\n\tspecularColor = mix(DielectricSpecularColor.rgb, diffuseColor, metallic);\n\toneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);\n\treturn diffuseColor * oneMinusReflectivity;\n}\n\nvec3 EnergyConservationBetweenDiffuseAndSpecular(in vec3 diffuseColor, in vec3 specularColor, out float oneMinusReflectivity)\n{\n\toneMinusReflectivity = 1.0 - SpecularStrength(specularColor);\n\treturn diffuseColor * oneMinusReflectivity;\n}\n\nvec4 Occlusion(in vec2 uv0){\n\t#ifdef OCCLUSIONTEXTURE\n\t\tvec4 occlusionTextureColor = texture2D(u_OcclusionTexture, uv0);\n\t\tfloat occ = occlusionTextureColor.g;\n\t\tfloat oneMinusT = 1.0 - u_occlusionStrength;\n\t\tfloat lerpOneTo = oneMinusT + occ * u_occlusionStrength;\n\t\treturn occlusionTextureColor * lerpOneTo;\n\t#else\n\t\treturn vec4(1.0);\n\t#endif\n}\n\nvec2 ParallaxOffset(in vec3 viewDir){\n\t#ifdef PARALLAXTEXTURE\n\t\tfloat h = texture2D(u_ParallaxTexture, v_Texcoord0).g;\n\t\th = h * u_parallaxScale - u_parallaxScale / 2.0;\n\t\tvec3 v = viewDir;\n\t\tv.z += 0.42;\n\t\tvec2 offset = h * (v.xy / v.z);\n\t\treturn v_Texcoord0 + offset;\n\t#else\n\t\treturn v_Texcoord0;\n\t#endif\n}\n\nvec3 ReflectCubeMap(in vec3 viewDir, in vec3 normal){\n\t#ifdef REFLECTMAP\n\t\tvec3 incident = -viewDir;\n\t\tvec3 reflectionVector = reflect(incident, normal);\n\t\tvec3 reflectionColor = textureCube(u_ReflectTexture, vec3(-reflectionVector.x, reflectionVector.yz)).rgb;\n\t\treturn reflectionColor * u_ReflectIntensity;\n\t#else\n\t\treturn vec3(0.0);\n\t#endif\n}\n\nfloat LayaAttenuation(in vec3 L, in float invLightRadius)\n{\n\tfloat fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\n\tfRatio *= fRatio;\n\treturn 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0*(1.0 - fRatio), 0.0, 1.0); //fade to black as if 4 pixel texture\n}\n\nvec3 LayaPreMultiplyAlpha(vec3 diffColor, float alpha, float oneMinusReflectivity, out float outModifiedAlpha)\n{\n\t#ifdef ALPHAPREMULTIPLY\n\t\tdiffColor *= alpha;\n\t\toutModifiedAlpha = 1.0 - oneMinusReflectivity + alpha * oneMinusReflectivity;\n\t#else\n\t\toutModifiedAlpha = alpha;\n\t#endif\n\treturn diffColor;\n}\n\n"), 
            $e.addInclude("PBRStandardLighting.glsl", '#include "PBRUtils.glsl"\n#include "BRDF.glsl"\n\nvec4 PBRStandardLight(in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat oneMinusReflectivity;\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat alpha;\n\t\n\tdiffuseColor = DiffuseAndSpecularFromMetallic (albedoColor.rgb, metallic, specularColor, oneMinusReflectivity);\n\t\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\n\t\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\n\tcolor.a = alpha;\n\treturn color;\n}\n\nvec4 PBRStandardDiectionLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi)\n{\n\tvec3 lightVec = normalize(light.Direction);\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi);\n}\n\nvec4 PBRStandardPointLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightCoord = (u_PointLightMatrix * vec4(pos, 1.0)).xyz;\n\tfloat distance = dot(lightCoord, lightCoord);\n\tfloat attenuate = texture2D(u_RangeTexture, vec2(distance)).w;\n\tvec3 lightVec = normalize(pos - light.Position);\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\nvec4 PBRStandardSpotLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightVec =  pos - light.Position;\n\tvec3 normalLightVec = normalize(lightVec);\n\tvec2 cosAngles = cos(vec2(light.SpotAngle, light.SpotAngle*0.5) * 0.5);//ConeAttenuation\n\tfloat dl = dot(normalize(light.Direction), normalLightVec);\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range) * dl;\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n//{\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\n//\t\n//\tfloat distance = dot(lightCoord, lightCoord);\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\n//\tvec3 lightVec = normalize(pos - light.Position);\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n//}\n\nvec2 MetallicGloss(in float albedoTextureAlpha, in vec2 uv0)\n{\n\tvec2 mg;\n\t\n\t#ifdef METALLICGLOSSTEXTURE\n\t\tvec4 metallicGlossTextureColor = texture2D(u_MetallicGlossTexture, uv0);\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tmg.r = metallicGlossTextureColor.r;\n\t\t\tmg.g = albedoTextureAlpha;\n\t\t#else\n\t\t    mg = metallicGlossTextureColor.ra;\n\t\t#endif\n\t\tmg.g *= u_smoothnessScale;\n\t#else\n\t\tmg.r = u_metallic;\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tmg.g = albedoTextureAlpha * u_smoothnessScale;\n\t\t#else\n\t\t\tmg.g = u_smoothness;\n\t\t#endif\n\t#endif\n\t\n\treturn mg;\n}\n\n'), 
            $e.addInclude("PBRSpecularLighting.glsl", '#include "PBRUtils.glsl"\n#include "BRDF.glsl"\n\nvec4 PBRSpecularLight(in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat oneMinusReflectivity;\n\tvec3 diffuseColor;\n\tfloat alpha;\n\t\n\tdiffuseColor = EnergyConservationBetweenDiffuseAndSpecular (albedoColor.rgb, specularColor, oneMinusReflectivity);\n\t\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\n\t\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\n\tcolor.a = alpha;\n\treturn color;\n}\n\nvec4 PBRSpecularDiectionLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi)\n{\n\tvec3 lightVec = normalize(light.Direction);\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi);\n}\n\nvec4 PBRSpecularPointLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightCoord = (u_PointLightMatrix * vec4(pos, 1.0)).xyz;\n\tfloat distance = dot(lightCoord, lightCoord);\n\tfloat attenuate = texture2D(u_RangeTexture, vec2(distance)).w;\n\tvec3 lightVec = normalize(pos - light.Position);\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\nvec4 PBRSpecularSpotLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightVec =  pos - light.Position;\n\tvec3 normalLightVec = normalize(lightVec);\n\tvec2 cosAngles = cos(vec2(light.SpotAngle, light.SpotAngle*0.5) * 0.5);//ConeAttenuation\n\tfloat dl = dot(normalize(light.Direction), normalLightVec);\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range) * dl;\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n//{\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\n//\t\n//\tfloat distance = dot(lightCoord, lightCoord);\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\n//\tvec3 lightVec = normalize(pos - light.Position);\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n//}\n\nvec4 SpecularGloss(float albedoTextureAlpha, in vec2 uv0)\n{\n    vec4 sg;\n\t\n\t#ifdef SPECULARTEXTURE\n\t\tvec4 specularTextureColor = texture2D(u_SpecularTexture, uv0);\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tsg.rgb = specularTextureColor.rgb;\n\t\t\tsg.a = albedoTextureAlpha;\n\t\t#else\n\t\t\tsg = specularTextureColor;\n\t\t#endif\n\t\tsg.a *= u_smoothnessScale;\n\t#else\n\t\tsg.rgb = u_SpecularColor.rgb;\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tsg.a = albedoTextureAlpha * u_smoothnessScale;\n\t\t#else\n\t\t\tsg.a = u_smoothness;\n\t\t#endif\n\t#endif\n\t\n    return sg;\n}\n\n');
            var t, n, i = {
                a_Position: 0,
                a_Color: 1,
                a_Normal: 3,
                a_Texcoord0: 2,
                a_Texcoord1: 8,
                a_BoneWeights: 7,
                a_BoneIndices: 6,
                a_Tangent0: 5
            }, r = {
                u_Bones: 0,
                u_DiffuseTexture: 1,
                u_SpecularTexture: 1,
                u_NormalTexture: 1,
                u_AlphaTestValue: 1,
                u_DiffuseColor: 1,
                u_MaterialSpecular: 1,
                u_Shininess: 1,
                u_TilingOffset: 1,
                u_WorldMat: 2,
                u_MvpMatrix: 2,
                u_LightmapScaleOffset: 2,
                u_LightMap: 2,
                u_CameraPos: 3,
                u_ReflectTexture: 4,
                u_ReflectIntensity: 4,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4,
                "u_DirectionLight.Color": 4,
                "u_DirectionLight.Direction": 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.Spot": 4,
                "u_SpotLight.Color": 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4
            };
            t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\n\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\n\tattribute vec2 a_Texcoord0;\n\tvarying vec2 v_Texcoord0;\n#endif\n\n#if defined(LIGHTMAP)&&defined(UV1)\n\tattribute vec2 a_Texcoord1;\n#endif\n\n#ifdef LIGHTMAP\n\tuniform vec4 u_LightmapScaleOffset;\n\tvarying vec2 v_LightMapUV;\n#endif\n\n#ifdef COLOR\n\tattribute vec4 a_Color;\n\tvarying vec4 v_Color;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\n\tattribute vec3 a_Normal;\n\tvarying vec3 v_Normal; \n\tuniform vec3 u_CameraPos;\n\tvarying vec3 v_ViewDir; \n#endif\n\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\tattribute vec4 a_Tangent0;\n\tvarying vec3 v_Tangent;\n\tvarying vec3 v_Binormal;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)||defined(RECEIVESHADOW)\n\tuniform mat4 u_WorldMat;\n\tvarying vec3 v_PositionWorld;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n  varying vec4 v_lightMVPPos;\n  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvoid main_castShadow()\n{\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position=skinTransform*a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\t\tv_posViewZ = gl_Position.z;\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\nvoid main_normal()\n{\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position=skinTransform*a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(u_WorldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(u_WorldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)||defined(RECEIVESHADOW)\n\t\t#ifdef BONE\n\t\t\tv_PositionWorld=(u_WorldMat*position).xyz;\n\t\t#else\n\t\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t\t#endif\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n\t\tv_Texcoord0=a_Texcoord0;\n\t\t#ifdef TILINGOFFSET\n\t\t\tv_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n\t\t#endif\n\t#endif\n\n\t#ifdef LIGHTMAP\n\t\t#ifdef SCALEOFFSETLIGHTINGMAPUV\n\t\t\t#ifdef UV1\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t#else\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t#endif \n\t\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\n\t\t#else\n\t\t\t#ifdef UV1\n\t\t\t\tv_LightMapUV=a_Texcoord1;\n\t\t\t#else\n\t\t\t\tv_LightMapUV=a_Texcoord0;\n\t\t\t#endif \n\t\t#endif \n\t#endif\n\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tv_Color=a_Color;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}', 
            n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\nuniform vec4 u_DiffuseColor;\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\tvarying vec4 v_Color;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tvarying vec3 v_ViewDir; \n#endif\n\n#ifdef ALPHATEST\n\tuniform float u_AlphaTestValue;\n#endif\n\n#ifdef DIFFUSEMAP\n\tuniform sampler2D u_DiffuseTexture;\n#endif\n\n\n\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n\tvarying vec2 v_Texcoord0;\n#endif\n\n#ifdef LIGHTMAP\n\tvarying vec2 v_LightMapUV;\n\tuniform sampler2D u_LightMap;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tuniform vec3 u_MaterialSpecular;\n\tuniform float u_Shininess;\n\t#ifdef SPECULARMAP \n\t\tuniform sampler2D u_SpecularTexture;\n\t#endif\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tvarying vec3 v_Normal;\n#endif\n\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\tuniform sampler2D u_NormalTexture;\n\tvarying vec3 v_Tangent;\n\tvarying vec3 v_Binormal;\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\nuniform vec3 u_AmbientColor;\n\n\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#include "ShadowHelper.glsl"\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\nvoid main_castShadow()\n{\n\t//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\nvoid main_normal()\n{\n\tvec3 globalDiffuse=u_AmbientColor;\n\t#ifdef LIGHTMAP\t\n\t\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tvec3 normal;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\t\t\tvec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;\n\t\t\tnormal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));\n\t\t#else\n\t\t\tnormal = normalize(v_Normal);\n\t\t#endif\n\t\tvec3 viewDir= normalize(v_ViewDir);\n\t#endif\n\t\n\tvec4 mainColor=u_DiffuseColor;\n\t#ifdef DIFFUSEMAP\n\t\tvec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);\n\t\tmainColor=mainColor*difTexColor;\n\t#endif \n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tmainColor=mainColor*v_Color;\n\t#endif \n    \n\t#ifdef ALPHATEST\n\t\tif(mainColor.a<u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n  \n\t\n\tvec3 diffuse = vec3(0.0);\n\tvec3 specular= vec3(0.0);\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tvec3 dif,spe;\n\t\t#ifdef SPECULARMAP\n\t\t\tvec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;\n\t\t#else\n\t\t\t#ifdef DIFFUSEMAP\n\t\t\t\tvec3 gloss=vec3(difTexColor.a);\n\t\t\t#else\n\t\t\t\tvec3 gloss=vec3(1.0);\n\t\t\t#endif\n\t\t#endif\n\t#endif\n\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n\n\t#ifdef SPOTLIGHT\n\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse)*shadowValue,mainColor.a);\n\t#else\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\t#ifdef RECEIVESHADOW\n\t\t\tgl_FragColor.rgb+=specular*shadowValue;\n\t\t#else\n\t\t\tgl_FragColor.rgb+=specular;\n\t\t#endif\n\t#endif\n\t  \n\t#ifdef FOG\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\n\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}\n\n';
            var a = $e.add("BLINNPHONG"), o = new de(i, r, ai.shaderDefines, Un.shaderDefines);
            a.addSubShader(o), o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_Color: 1
            }, r = {
                u_MvpMatrix: 2,
                u_Color: 1
            }, t = "attribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\nattribute vec4 a_Color;\nvarying vec4 v_Color;\n\n\nvoid main()\n{\n  gl_Position = u_MvpMatrix * a_Position;\n  v_Color=a_Color;\n}", 
            n = "#ifdef HIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec4 v_Color;\nuniform vec4 u_Color;\n\nvoid main()\n{\n  gl_FragColor = v_Color * u_Color; \n}\n\n", 
            a = $e.add("LineShader"), o = new de(i, r), a.addSubShader(o), o.addShaderPass(t, n), 
            i = {
                a_Position: 0,
                a_Normal: 3,
                a_Tangent0: 5,
                a_Texcoord0: 2,
                a_BoneWeights: 7,
                a_BoneIndices: 6
            }, r = {
                u_Bones: 0,
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_AlphaTestValue: 1,
                u_AlbedoColor: 1,
                u_EmissionColor: 1,
                u_AlbedoTexture: 1,
                u_NormalTexture: 1,
                u_ParallaxTexture: 1,
                u_MetallicGlossTexture: 1,
                u_OcclusionTexture: 1,
                u_EmissionTexture: 1,
                u_metallic: 1,
                u_smoothness: 1,
                u_smoothnessScale: 1,
                u_occlusionStrength: 1,
                u_normalScale: 1,
                u_parallaxScale: 1,
                u_TilingOffset: 1,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4,
                u_PointLightMatrix: 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.SpotAngle": 4,
                "u_SpotLight.Color": 4,
                u_RangeTexture: 4,
                u_ReflectTexture: 4,
                u_ReflectIntensity: 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\nuniform mat4 u_WorldMat;\nuniform vec3 u_CameraPos;\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n\t  varying vec4 v_lightMVPPos;\n\t  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main_castShadow()\n{\n\t#ifdef BONE\n\t\tmat4 skinTransform=mat4(0.0);\n\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position = skinTransform * a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0 = a_Texcoord0;\n\t#endif\n\t\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tmat3 worldMat;\n\t#ifdef BONE\n\t\tmat4 skinTransform = mat4(0.0);\n\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position = skinTransform * a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t\tworldMat=mat3(u_WorldMat*skinTransform);\n\t\tv_PositionWorld = (u_WorldMat * position).xyz;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t\tworldMat = mat3(u_WorldMat);\n\t\tv_PositionWorld = (u_WorldMat * a_Position).xyz;\n\t#endif\n\t\n\tv_Normal = worldMat * a_Normal;\n\tv_Tangent = worldMat * a_Tangent0.xyz;\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\n  \n\tv_Texcoord0 = a_Texcoord0;\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n\t#endif\n  \n\tv_ViewDir = u_CameraPos - v_PositionWorld;\n  \n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}', 
            n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\nuniform vec3 u_AmbientColor;\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n#ifdef METALLICGLOSSTEXTURE\n\tuniform sampler2D u_MetallicGlossTexture;\n#endif\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n\tuniform float u_normalScale;\n#endif\n#ifdef PARALLAXTEXTURE\n\tuniform sampler2D u_ParallaxTexture;\n\tuniform float u_parallaxScale;\n#endif\n#ifdef OCCLUSIONTEXTURE\n\tuniform sampler2D u_OcclusionTexture;\n\tuniform float u_occlusionStrength;\n#endif\n#ifdef EMISSION\n\t#ifdef EMISSIONTEXTURE\n\t\tuniform sampler2D u_EmissionTexture;\n\t#endif\n\tuniform vec4 u_EmissionColor;\n#endif\n#ifdef REFLECTMAP\n\tuniform samplerCube u_ReflectTexture;\n\tuniform float u_ReflectIntensity;\n#endif\n\nuniform float u_AlphaTestValue;\nuniform float u_metallic;\nuniform float u_smoothness;\nuniform float u_smoothnessScale;\n\nuniform sampler2D u_RangeTexture;\n//uniform sampler2D u_AngleTexture;\nuniform mat4 u_PointLightMatrix;\n//uniform mat4 u_SpotLightMatrix;\n\n#include "PBRStandardLighting.glsl"\n#include "ShadowHelper.glsl"\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\nvoid main_castShadow()\n{\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\n\nvoid main_normal()\n{\t\n\tvec3 viewDir = normalize(v_ViewDir);\n\t\n\tvec2 uv0 = ParallaxOffset(viewDir);\n\t\n\tvec2 mg;\n\tvec4 albedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tvec4 abledoTextureColor = texture2D(u_AlbedoTexture, uv0);\n\t\talbedoColor = abledoTextureColor * u_AlbedoColor;\n\t\tmg = MetallicGloss(abledoTextureColor.a, uv0);\n\t#else\n\t\talbedoColor = u_AlbedoColor;\n\t\tmg = MetallicGloss(1.0, uv0);\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(albedoColor.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n\t\n\tvec3 normal = UnpackScaleNormal(uv0);\n  \n\tLayaGI gi;\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\n\tgi.specular = ReflectCubeMap(viewDir, normal);\n  \n\tvec4 color = vec4(0.0);\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tcolor += PBRStandardDiectionLight(albedoColor, mg.r, mg.g, normal, viewDir, u_DirectionLight, gi);\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRStandardPointLight(albedoColor, mg.r, mg.g, normal, viewDir, u_PointLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef SPOTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRStandardSpotLight(albedoColor, mg.r, mg.g, normal, viewDir, u_SpotLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef EMISSION\n\t\tvec4 emissionColor = u_EmissionColor;\n\t\t#ifdef EMISSIONTEXTURE\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\n\t\t#endif\n\t\tcolor.rgb += emissionColor.rgb;\n\t#endif\n\t\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor = vec4(color.rgb * shadowValue, color.a);\n\t#else\n\t\tgl_FragColor = color;\n\t#endif\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}', 
            a = $e.add("PBRStandard"), o = new de(i, r, ai.shaderDefines, qn.shaderDefines), 
            a.addSubShader(o), o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_Normal: 3,
                a_Tangent0: 5,
                a_Texcoord0: 2,
                a_BoneWeights: 7,
                a_BoneIndices: 6
            }, r = {
                u_Bones: 0,
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_AlphaTestValue: 1,
                u_AlbedoColor: 1,
                u_SpecularColor: 1,
                u_EmissionColor: 1,
                u_AlbedoTexture: 1,
                u_NormalTexture: 1,
                u_ParallaxTexture: 1,
                u_SpecularTexture: 1,
                u_OcclusionTexture: 1,
                u_EmissionTexture: 1,
                u_smoothness: 1,
                u_smoothnessScale: 1,
                u_occlusionStrength: 1,
                u_normalScale: 1,
                u_parallaxScale: 1,
                u_TilingOffset: 1,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4,
                u_PointLightMatrix: 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.SpotAngle": 4,
                "u_SpotLight.Color": 4,
                u_RangeTexture: 4,
                u_ReflectTexture: 4,
                u_ReflectIntensity: 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\nuniform mat4 u_WorldMat;\nuniform vec3 u_CameraPos;\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n\t  varying vec4 v_lightMVPPos;\n\t  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main_castShadow()\n{\n\t#ifdef BONE\n\t\tmat4 skinTransform=mat4(0.0);\n\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position = skinTransform * a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0 = a_Texcoord0;\n\t#endif\n\t\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tmat3 worldMat;\n\t#ifdef BONE\n\t\tmat4 skinTransform = mat4(0.0);\n\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position = skinTransform * a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t\tworldMat=mat3(u_WorldMat*skinTransform);\n\t\tv_PositionWorld = (u_WorldMat * position).xyz;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t\tworldMat = mat3(u_WorldMat);\n\t\tv_PositionWorld = (u_WorldMat * a_Position).xyz;\n\t#endif\n\t\n\tv_Normal = worldMat * a_Normal;\n\tv_Tangent = worldMat * a_Tangent0.xyz;\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\n  \n\tv_Texcoord0 = a_Texcoord0;\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n\t#endif\n  \n\tv_ViewDir = u_CameraPos - v_PositionWorld;\n  \n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}', 
            n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\nuniform vec3 u_AmbientColor;\nuniform vec4 u_AlbedoColor;\nuniform vec4 u_SpecularColor;\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n#ifdef SPECULARTEXTURE\n\tuniform sampler2D u_SpecularTexture;\n#endif\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n\tuniform float u_normalScale;\n#endif\n#ifdef PARALLAXTEXTURE\n\tuniform sampler2D u_ParallaxTexture;\n\tuniform float u_parallaxScale;\n#endif\n#ifdef OCCLUSIONTEXTURE\n\tuniform sampler2D u_OcclusionTexture;\n\tuniform float u_occlusionStrength;\n#endif\n#ifdef EMISSION\n\t#ifdef EMISSIONTEXTURE\n\t\tuniform sampler2D u_EmissionTexture;\n\t#endif\n\tuniform vec4 u_EmissionColor;\n#endif\n#ifdef REFLECTMAP\n\tuniform samplerCube u_ReflectTexture;\n\tuniform float u_ReflectIntensity;\n#endif\n\nuniform float u_AlphaTestValue;\nuniform float u_metallic;\nuniform float u_smoothness;\nuniform float u_smoothnessScale;\n\nuniform sampler2D u_RangeTexture;\n//uniform sampler2D u_AngleTexture;\nuniform mat4 u_PointLightMatrix;\n//uniform mat4 u_SpotLightMatrix;\n\n#include "PBRSpecularLighting.glsl"\n#include "ShadowHelper.glsl"\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\nvoid main_castShadow()\n{\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\n\nvoid main_normal()\n{\t\n\tvec3 viewDir = normalize(v_ViewDir);\n\t\n\tvec2 uv0 = ParallaxOffset(viewDir);\n\t\n\tvec4 sg;\n\tvec4 albedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tvec4 albedoTextureColor = texture2D(u_AlbedoTexture, uv0);\n\t\talbedoColor = albedoTextureColor * u_AlbedoColor;\n\t\tsg = SpecularGloss(albedoTextureColor.a, uv0);\n\t#else\n\t\talbedoColor = u_AlbedoColor;\n\t\tsg = SpecularGloss(1.0, uv0);\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(albedoColor.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n  \n\tvec3 normal = UnpackScaleNormal(uv0);\n\t\n\tLayaGI gi;\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\n\tgi.specular = ReflectCubeMap(viewDir, normal);\n\t\n\t//float a = (sg.r+sg.g+sg.b) / 3.0;\n  \n\tvec4 color = vec4(0.0);\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tcolor += PBRSpecularDiectionLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_DirectionLight, gi);\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRSpecularPointLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_PointLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef SPOTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRSpecularSpotLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_SpotLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef EMISSION\n\t\tvec4 emissionColor = u_EmissionColor;\n\t\t#ifdef EMISSIONTEXTURE\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\n\t\t#endif\n\t\tcolor.rgb += emissionColor.rgb;\n\t#endif\n\t\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor = vec4(color.rgb * shadowValue, color.a);\n\t#else\n\t\tgl_FragColor = color;\n\t#endif\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}\n\n', 
            a = $e.add("PBRSpecular"), o = new de(i, r, ai.shaderDefines, Hn.shaderDefines), 
            a.addSubShader(o), o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_Color: 1,
                a_Texcoord0: 2,
                a_BoneWeights: 7,
                a_BoneIndices: 6
            }, r = {
                u_Bones: 0,
                u_AlbedoTexture: 1,
                u_AlbedoColor: 1,
                u_TilingOffset: 1,
                u_AlphaTestValue: 1,
                u_MvpMatrix: 2,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\n\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main() {\n\t#ifdef BONE\n\t\tmat4 skinTransform = mat4(0.0);\n\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position = skinTransform * a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t#endif\n\n\tv_Texcoord0 = a_Texcoord0;\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n\t#endif\n\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tv_Color = a_Color;\n\t#endif\n}', 
            n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\tvarying vec4 v_Color;\n#endif\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n\tvarying vec2 v_Texcoord0;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALPHATEST\n\tuniform float u_AlphaTestValue;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\nvoid main()\n{\n\tvec4 color =  u_AlbedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\n\t#endif\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tcolor *= v_Color;\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(color.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n\t\n\tgl_FragColor = color;\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t\t#endif\n\t#endif\n\t\n}\n\n", 
            a = $e.add("Unlit"), o = new de(i, r, ai.shaderDefines, zn.shaderDefines), a.addSubShader(o), 
            o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_Texcoord0: 2,
                a_BoneWeights: 7,
                a_BoneIndices: 6
            }, r = {
                u_Bones: 0,
                u_AlbedoTexture: 1,
                u_AlbedoColor: 1,
                u_TilingOffset: 1,
                u_AlphaTestValue: 1,
                u_MvpMatrix: 2,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec4 a_Color;\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\n\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main()\n{\n\t#ifdef BONE\n\t\tmat4 skinTransform = mat4(0.0);\n\t\tskinTransform += u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tvec4 position = skinTransform * a_Position;\n\t\tgl_Position = u_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * a_Position;\n\t#endif\n\t\n\tv_Texcoord0 = a_Texcoord0;\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(v_Texcoord0,u_TilingOffset);\n\t#endif\n\t\t\n\tv_Color = a_Color;\n}', 
            n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#ifdef COLOR\n\tvarying vec4 v_Color;\n#endif\nvarying vec2 v_Texcoord0;\n\n#ifdef MAINTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\nvoid main()\n{\n\tvec4 color =  2.0 * u_AlbedoColor;\n\t#ifdef COLOR\n\t\tcolor *= v_Color;\n\t#endif\n\t#ifdef MAINTEXTURE\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\n\t#endif\n\t\n\tgl_FragColor = color;\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t\t#endif\n\t#endif\n}\n\n", 
            a = $e.add("Effect"), o = new de(i, r, ai.shaderDefines, Zn.shaderDefines), a.addSubShader(o), 
            o.addShaderPass(t, n), i = {
                a_CornerTextureCoordinate: 0,
                a_MeshPosition: 1,
                a_MeshColor: 2,
                a_MeshTextureCoordinate: 3,
                a_ShapePositionStartLifeTime: 4,
                a_DirectionTime: 5,
                a_StartColor: 6,
                a_EndColor: 7,
                a_StartSize: 8,
                a_StartRotation0: 9,
                a_StartSpeed: 10,
                a_Random0: 11,
                a_Random1: 12,
                a_SimulationWorldPostion: 13,
                a_SimulationWorldRotation: 14
            }, r = {
                u_Tintcolor: 1,
                u_TilingOffset: 1,
                u_texture: 1,
                u_WorldPosition: 2,
                u_WorldRotation: 2,
                u_PositionScale: 2,
                u_SizeScale: 2,
                u_ScalingMode: 2,
                u_Gravity: 2,
                u_ThreeDStartRotation: 2,
                u_StretchedBillboardLengthScale: 2,
                u_StretchedBillboardSpeedScale: 2,
                u_SimulationSpace: 2,
                u_CurrentTime: 2,
                u_ColorOverLifeGradientAlphas: 2,
                u_ColorOverLifeGradientColors: 2,
                u_MaxColorOverLifeGradientAlphas: 2,
                u_MaxColorOverLifeGradientColors: 2,
                u_VOLVelocityConst: 2,
                u_VOLVelocityGradientX: 2,
                u_VOLVelocityGradientY: 2,
                u_VOLVelocityGradientZ: 2,
                u_VOLVelocityConstMax: 2,
                u_VOLVelocityGradientMaxX: 2,
                u_VOLVelocityGradientMaxY: 2,
                u_VOLVelocityGradientMaxZ: 2,
                u_VOLSpaceType: 2,
                u_SOLSizeGradient: 2,
                u_SOLSizeGradientX: 2,
                u_SOLSizeGradientY: 2,
                u_SOLSizeGradientZ: 2,
                u_SOLSizeGradientMax: 2,
                u_SOLSizeGradientMaxX: 2,
                u_SOLSizeGradientMaxY: 2,
                u_SOLSizeGradientMaxZ: 2,
                u_ROLAngularVelocityConst: 2,
                u_ROLAngularVelocityConstSeprarate: 2,
                u_ROLAngularVelocityGradient: 2,
                u_ROLAngularVelocityGradientX: 2,
                u_ROLAngularVelocityGradientY: 2,
                u_ROLAngularVelocityGradientZ: 2,
                u_ROLAngularVelocityConstMax: 2,
                u_ROLAngularVelocityConstMaxSeprarate: 2,
                u_ROLAngularVelocityGradientMax: 2,
                u_ROLAngularVelocityGradientMaxX: 2,
                u_ROLAngularVelocityGradientMaxY: 2,
                u_ROLAngularVelocityGradientMaxZ: 2,
                u_ROLAngularVelocityGradientMaxW: 2,
                u_TSACycles: 2,
                u_TSASubUVLength: 2,
                u_TSAGradientUVs: 2,
                u_TSAMaxGradientUVs: 2,
                u_CameraPosition: 3,
                u_CameraDirection: 3,
                u_CameraUp: 3,
                u_View: 3,
                u_Projection: 3,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, t = "#ifdef HIGHPRECISION\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\n#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\tattribute vec4 a_CornerTextureCoordinate;\n#endif\n#ifdef RENDERMODE_MESH\n\tattribute vec3 a_MeshPosition;\n\tattribute vec4 a_MeshColor;\n\tattribute vec2 a_MeshTextureCoordinate;\n\tvarying vec4 v_MeshColor;\n#endif\n\nattribute vec4 a_ShapePositionStartLifeTime;\nattribute vec4 a_DirectionTime;\nattribute vec4 a_StartColor;\nattribute vec3 a_StartSize;\nattribute vec3 a_StartRotation0;\nattribute float a_StartSpeed;\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n  attribute vec4 a_Random0;\n#endif\n#if defined(TEXTURESHEETANIMATIONRANDOMCURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  attribute vec4 a_Random1;\n#endif\nattribute vec3 a_SimulationWorldPostion;\nattribute vec4 a_SimulationWorldRotation;\n\nvarying float v_Discard;\nvarying vec4 v_Color;\n#ifdef DIFFUSEMAP\n\tvarying vec2 v_TextureCoordinate;\n#endif\n\nuniform float u_CurrentTime;\nuniform vec3 u_Gravity;\n\nuniform vec3 u_WorldPosition;\nuniform vec4 u_WorldRotation;\nuniform bool u_ThreeDStartRotation;\nuniform int u_ScalingMode;\nuniform vec3 u_PositionScale;\nuniform vec3 u_SizeScale;\nuniform mat4 u_View;\nuniform mat4 u_Projection;\n\n#ifdef STRETCHEDBILLBOARD\n\tuniform vec3 u_CameraPosition;\n#endif\nuniform vec3 u_CameraDirection;//TODO:只有几种广告牌模式需要用\nuniform vec3 u_CameraUp;\n\nuniform  float u_StretchedBillboardLengthScale;\nuniform  float u_StretchedBillboardSpeedScale;\nuniform int u_SimulationSpace;\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  uniform  int  u_VOLSpaceType;\n#endif\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\n  uniform  vec3 u_VOLVelocityConst;\n#endif\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  uniform  vec2 u_VOLVelocityGradientX[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientY[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientZ[4];//x为key,y为速度\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n  uniform  vec3 u_VOLVelocityConstMax;\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n  uniform  vec2 u_VOLVelocityGradientMaxX[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientMaxY[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientMaxZ[4];//x为key,y为速度\n#endif\n\n#ifdef COLOROVERLIFETIME\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n#endif\n#ifdef RANDOMCOLOROVERLIFETIME\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n  uniform  vec4 u_MaxColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_MaxColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n#endif\n\n\n#if defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMERANDOMCURVES)\n  uniform  vec2 u_SOLSizeGradient[4];//x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\n  uniform  vec2 u_SOLSizeGradientMax[4];//x为key,y为尺寸\n#endif\n#if defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\n  uniform  vec2 u_SOLSizeGradientX[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientY[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientZ[4];//x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n  uniform  vec2 u_SOLSizeGradientMaxX[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientMaxY[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientMaxZ[4];//x为key,y为尺寸\n#endif\n\n\n#ifdef ROTATIONOVERLIFETIME\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\n    uniform  float u_ROLAngularVelocityConst;\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    uniform  float u_ROLAngularVelocityConstMax;\n  #endif\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n    uniform  vec2 u_ROLAngularVelocityGradient[4];//x为key,y为旋转\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    uniform  vec2 u_ROLAngularVelocityGradientMax[4];//x为key,y为旋转\n  #endif\n#endif\n#ifdef ROTATIONOVERLIFETIMESEPERATE\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\n    uniform  vec3 u_ROLAngularVelocityConstSeprarate;\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    uniform  vec3 u_ROLAngularVelocityConstMaxSeprarate;\n  #endif\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n    uniform  vec2 u_ROLAngularVelocityGradientX[4];\n    uniform  vec2 u_ROLAngularVelocityGradientY[4];\n    uniform  vec2 u_ROLAngularVelocityGradientZ[4];\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    uniform  vec2 u_ROLAngularVelocityGradientMaxX[4];\n    uniform  vec2 u_ROLAngularVelocityGradientMaxY[4];\n    uniform  vec2 u_ROLAngularVelocityGradientMaxZ[4];\n\tuniform  vec2 u_ROLAngularVelocityGradientMaxW[4];\n  #endif\n#endif\n\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\n  uniform  float u_TSACycles;\n  uniform  vec2 u_TSASubUVLength;\n  uniform  vec2 u_TSAGradientUVs[4];//x为key,y为frame\n#endif\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n  uniform  vec2 u_TSAMaxGradientUVs[4];//x为key,y为frame\n#endif\n\n#ifdef FOG\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvec3 rotationByEuler(in vec3 vector,in vec3 rot)\n{\n\tfloat halfRoll = rot.z * 0.5;\n    float halfPitch = rot.x * 0.5;\n\tfloat halfYaw = rot.y * 0.5;\n\n\tfloat sinRoll = sin(halfRoll);\n\tfloat cosRoll = cos(halfRoll);\n\tfloat sinPitch = sin(halfPitch);\n\tfloat cosPitch = cos(halfPitch);\n\tfloat sinYaw = sin(halfYaw);\n\tfloat cosYaw = cos(halfYaw);\n\n\tfloat quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\n\tfloat quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\n\tfloat quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\n\tfloat quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\n\t\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\t\n\tfloat x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n\tfloat xx = quaX * x;\n    float xy = quaX * y;\n\tfloat xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n\t\n}\n\n//假定axis已经归一化\nvec3 rotationByAxis(in vec3 vector,in vec3 axis, in float angle)\n{\n\tfloat halfAngle = angle * 0.5;\n\tfloat sin = sin(halfAngle);\n\t\n\tfloat quaX = axis.x * sin;\n\tfloat quaY = axis.y * sin;\n\tfloat quaZ = axis.z * sin;\n\tfloat quaW = cos(halfAngle);\n\t\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\t\n\tfloat x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n\tfloat xx = quaX * x;\n    float xy = quaX * y;\n\tfloat xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n\t\n}\n\nvec3 rotationByQuaternions(in vec3 v,in vec4 q) \n{\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\n \n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\nfloat getCurValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\n{\n\tfloat curValue;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientNumber=gradientNumbers[i];\n\t\tfloat key=gradientNumber.x;\n\t\tif(key>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\n\t\t\tfloat lastKey=lastGradientNumber.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\tcurValue=mix(lastGradientNumber.y,gradientNumber.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn curValue;\n}\n#endif\n\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\n{\n\tfloat totalValue=0.0;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientNumber=gradientNumbers[i];\n\t\tfloat key=gradientNumber.x;\n\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\n\t\tfloat lastValue=lastGradientNumber.y;\n\t\t\n\t\tif(key>=normalizedAge){\n\t\t\tfloat lastKey=lastGradientNumber.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\ttotalValue+=(lastValue+mix(lastValue,gradientNumber.y,age))/2.0*a_ShapePositionStartLifeTime.w*(normalizedAge-lastKey);\n\t\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\ttotalValue+=(lastValue+gradientNumber.y)/2.0*a_ShapePositionStartLifeTime.w*(key-lastGradientNumber.x);\n\t\t}\n\t}\n\treturn totalValue;\n}\n#endif\n\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)\nvec4 getColorFromGradient(in vec2 gradientAlphas[4],in vec4 gradientColors[4],in float normalizedAge)\n{\n\tvec4 overTimeColor;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientAlpha=gradientAlphas[i];\n\t\tfloat alphaKey=gradientAlpha.x;\n\t\tif(alphaKey>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientAlpha=gradientAlphas[i-1];\n\t\t\tfloat lastAlphaKey=lastGradientAlpha.x;\n\t\t\tfloat age=(normalizedAge-lastAlphaKey)/(alphaKey-lastAlphaKey);\n\t\t\toverTimeColor.a=mix(lastGradientAlpha.y,gradientAlpha.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec4 gradientColor=gradientColors[i];\n\t\tfloat colorKey=gradientColor.x;\n\t\tif(colorKey>=normalizedAge)\n\t\t{\n\t\t\tvec4 lastGradientColor=gradientColors[i-1];\n\t\t\tfloat lastColorKey=lastGradientColor.x;\n\t\t\tfloat age=(normalizedAge-lastColorKey)/(colorKey-lastColorKey);\n\t\t\toverTimeColor.rgb=mix(gradientColors[i-1].yzw,gradientColor.yzw,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn overTimeColor;\n}\n#endif\n\n\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\nfloat getFrameFromGradient(in vec2 gradientFrames[4],in float normalizedAge)\n{\n\tfloat overTimeFrame;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientFrame=gradientFrames[i];\n\t\tfloat key=gradientFrame.x;\n\t\tif(key>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientFrame=gradientFrames[i-1];\n\t\t\tfloat lastKey=lastGradientFrame.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\toverTimeFrame=mix(lastGradientFrame.y,gradientFrame.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn floor(overTimeFrame);\n}\n#endif\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\nvec3 computeParticleLifeVelocity(in float normalizedAge)\n{\n  vec3 outLifeVelocity;\n  #ifdef VELOCITYOVERLIFETIMECONSTANT\n\t outLifeVelocity=u_VOLVelocityConst; \n  #endif\n  #ifdef VELOCITYOVERLIFETIMECURVE\n     outLifeVelocity= vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\n  #endif\n  #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n\t outLifeVelocity=mix(u_VOLVelocityConst,u_VOLVelocityConstMax,vec3(a_Random1.y,a_Random1.z,a_Random1.w)); \n  #endif\n  #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n     outLifeVelocity=vec3(mix(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y),\n\t                 mix(getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z),\n\t\t\t\t\t mix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\n  #endif\n\t\t\t\t\t\n  return outLifeVelocity;\n} \n#endif\n\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity,in float age,in float normalizedAge,vec3 gravityVelocity,vec4 worldRotation)\n{\n   vec3 startPosition;\n   vec3 lifePosition;\n   #if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t#ifdef VELOCITYOVERLIFETIMECONSTANT\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=lifeVelocity*age;\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMECURVE\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=lifeVelocity*age;\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=vec3(mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y)\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z)\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\n\t#endif\n\t\n\tvec3 finalPosition;\n\tif(u_VOLSpaceType==0){\n\t  if(u_ScalingMode!=2)\n\t   finalPosition =rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition),worldRotation);\n\t  else\n\t   finalPosition =rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition,worldRotation);\n\t}\n\telse{\n\t  if(u_ScalingMode!=2)\n\t    finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation)+lifePosition;\n\t  else\n\t    finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation)+lifePosition;\n\t}\n  #else\n\t startPosition=startVelocity*age;\n\t vec3 finalPosition;\n\t if(u_ScalingMode!=2)\n\t   finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation);\n\t else\n\t   finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation);\n  #endif\n  \n  if(u_SimulationSpace==0)\n    finalPosition=finalPosition+a_SimulationWorldPostion;\n  else if(u_SimulationSpace==1) \n    finalPosition=finalPosition+u_WorldPosition;\n  \n  finalPosition+=0.5*gravityVelocity*age;\n \n  return  finalPosition;\n}\n\n\nvec4 computeParticleColor(in vec4 color,in float normalizedAge)\n{\n\t#ifdef COLOROVERLIFETIME\n\t  color*=getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge);\n\t#endif\n\t\n\t#ifdef RANDOMCOLOROVERLIFETIME\n\t  color*=mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge),getColorFromGradient(u_MaxColorOverLifeGradientAlphas,u_MaxColorOverLifeGradientColors,normalizedAge),a_Random0.y);\n\t#endif\n\n    return color;\n}\n\nvec2 computeParticleSizeBillbard(in vec2 size,in float normalizedAge)\n{\n\t#ifdef SIZEOVERLIFETIMECURVE\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \n\t#endif\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\n\t\tsize*=vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge));\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n\t    size*=vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z));\n\t#endif\n\treturn size;\n}\n\n#ifdef RENDERMODE_MESH\nvec3 computeParticleSizeMesh(in vec3 size,in float normalizedAge)\n{\n\t#ifdef SIZEOVERLIFETIMECURVE\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \n\t#endif\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\n\t\tsize*=vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge));\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n\t    size*=vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z)\n\t\t,mix(getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ,normalizedAge),a_Random0.z));\n\t#endif\n\treturn size;\n}\n#endif\n\nfloat computeParticleRotationFloat(in float rotation,in float age,in float normalizedAge)\n{ \n\t#ifdef ROTATIONOVERLIFETIME\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\n\t\t#endif\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConstSeprarate.z*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConstSeprarate.z,u_ROLAngularVelocityConstMaxSeprarate.z,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\n\t\t#endif\n\t#endif\n\treturn rotation;\n}\n\n#if defined(RENDERMODE_MESH)&&(defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE))\nvec3 computeParticleRotationVec3(in vec3 rotation,in float age,in float normalizedAge)\n{ \n\t#ifdef ROTATIONOVERLIFETIME\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\n\t\t#endif\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tvec3 ageRot=u_ROLAngularVelocityConstSeprarate*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge));\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tvec3 ageRot=mix(u_ROLAngularVelocityConstSeprarate,u_ROLAngularVelocityConstMaxSeprarate,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,normalizedAge),a_Random0.w)\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,normalizedAge),a_Random0.w)\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\n\t\t#endif\n\t#endif\n\treturn rotation;\n}\n#endif\n\nvec2 computeParticleUV(in vec2 uv,in float normalizedAge)\n{ \n\t#ifdef TEXTURESHEETANIMATIONCURVE\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\n\t\tfloat frame=getFrameFromGradient(u_TSAGradientUVs,cycleNormalizedAge-floor(cycleNormalizedAge));\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\n\t\tfloat floorTotalULength=floor(totalULength);\n\t    uv.x+=totalULength-floorTotalULength;\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\n    #endif\n\t#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\n\t\tfloat uvNormalizedAge=cycleNormalizedAge-floor(cycleNormalizedAge);\n\t    float frame=floor(mix(getFrameFromGradient(u_TSAGradientUVs,uvNormalizedAge),getFrameFromGradient(u_TSAMaxGradientUVs,uvNormalizedAge),a_Random1.x));\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\n\t\tfloat floorTotalULength=floor(totalULength);\n\t    uv.x+=totalULength-floorTotalULength;\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\n    #endif\n\treturn uv;\n}\n\nvoid main()\n{\n\tfloat age = u_CurrentTime - a_DirectionTime.w;\n\tfloat normalizedAge = age/a_ShapePositionStartLifeTime.w;\n\tvec3 lifeVelocity;\n\tif(normalizedAge<1.0){ \n\tvec3 startVelocity=a_DirectionTime.xyz*a_StartSpeed;\n\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t\tlifeVelocity= computeParticleLifeVelocity(normalizedAge);//计算粒子生命周期速度\n\t#endif \n\tvec3 gravityVelocity=u_Gravity*age;\n\t\n\tvec4 worldRotation;\n\tif(u_SimulationSpace==0)\n\t\tworldRotation=a_SimulationWorldRotation;\n\telse\n\t\tworldRotation=u_WorldRotation;\n\t\n\tvec3 center=computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge,gravityVelocity,worldRotation);//计算粒子位置\n   \n   \n   #ifdef SPHERHBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        vec3 cameraUpVector =normalize(u_CameraUp);//TODO:是否外面归一化\n        vec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\n        vec3 upVector = normalize(cross(sideVector,u_CameraDirection));\n\t    corner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z,age,normalizedAge));\n\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,rotation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n\t\t\t\tfloat c = cos(rot);\n\t\t\t\tfloat s = sin(rot);\n\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\n\t\t\t\tcorner=rotation*corner;\n\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\n\t\t\t}\n\t\t#else\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,a_StartRotation0);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfloat c = cos(a_StartRotation0.x);\n\t\t\t\tfloat s = sin(a_StartRotation0.x);\n\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\n\t\t\t\tcorner=rotation*corner;\n\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\n\t\t\t}\n\t\t#endif\n   #endif\n   \n   #ifdef STRETCHEDBILLBOARD\n\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n\tvec3 velocity;\n\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t    if(u_VOLSpaceType==0)\n\t\t  velocity=rotationByQuaternions(u_SizeScale*(startVelocity+lifeVelocity),worldRotation)+gravityVelocity;\n\t    else\n\t\t  velocity=rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+lifeVelocity+gravityVelocity;\n    #else\n\t    velocity= rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+gravityVelocity;\n    #endif\t\n\t\tvec3 cameraUpVector = normalize(velocity);\n\t\tvec3 direction = normalize(center-u_CameraPosition);\n        vec3 sideVector = normalize(cross(direction,normalize(velocity)));\n\t\t\n\t\tsideVector=u_SizeScale.xzy*sideVector;\n\t\tcameraUpVector=length(vec3(u_SizeScale.x,0.0,0.0))*cameraUpVector;\n\t\t\n\t    vec2 size=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n\t\t\n\t    const mat2 rotaionZHalfPI=mat2(0.0, -1.0, 1.0, 0.0);\n\t    corner=rotaionZHalfPI*corner;\n\t    corner.y=corner.y-abs(corner.y);\n\t\t\n\t    float speed=length(velocity);//TODO:\n\t    center +=sign(u_SizeScale.x)*(sign(u_StretchedBillboardLengthScale)*size.x*corner.x*sideVector+(speed*u_StretchedBillboardSpeedScale+size.y*u_StretchedBillboardLengthScale)*corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef HORIZONTALBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        const vec3 cameraUpVector=vec3(0.0,0.0,1.0);\n\t    const vec3 sideVector = vec3(-1.0,0.0,0.0);\n\t\t\n\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n        float c = cos(rot);\n        float s = sin(rot);\n        mat2 rotation= mat2(c, -s, s, c);\n\t    corner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\n\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n        center +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef VERTICALBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        const vec3 cameraUpVector =vec3(0.0,1.0,0.0);\n        vec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\n\t\t\n\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n        float c = cos(rot);\n        float s = sin(rot);\n        mat2 rotation= mat2(c, -s, s, c);\n\t    corner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\n\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n        center +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef RENDERMODE_MESH\n\t    vec3 size=computeParticleSizeMesh(a_StartSize,normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z, age,normalizedAge));\n\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,rotation),worldRotation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t#ifdef ROTATIONOVERLIFETIME\n\t\t\t\t\tfloat angle=computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),angle),worldRotation));//已验证\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t#ifdef SHAPE\n\t\t\t\t\t\t\tcenter+= u_SizeScale.xzy*(rotationByQuaternions(rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),angle),worldRotation));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\t\tcenter+=rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle);//已验证\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\t\tcenter+=rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle),worldRotation);//已验证\n\t\t\t\t\t\t#endif\n\t\t\t\t\t}\n\t\t\t\t#endif\n\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t\t\t\t//TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\n\t\t\t\t\tvec3 angle=computeParticleRotationVec3(vec3(0.0,0.0,a_StartRotation0.z), age,normalizedAge);\n\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByEuler(u_SizeScale*a_MeshPosition*size,vec3(angle.x,angle.y,angle.z)),worldRotation));//已验证\n\t\t\t\t#endif\t\t\n\t\t\t}\n\t\t#else\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,a_StartRotation0),worldRotation);//已验证\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\n\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x);\n\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x),worldRotation));//已验证\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t#ifdef SHAPE\n\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\tcenter+= u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x);\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x),worldRotation);\t\n\t\t\t\t\t#else\n\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x);\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x),worldRotation);//已验证\n\t\t\t\t\t#endif\n\t\t\t\t}\n\t\t\t}\n\t\t#endif\n\t\tv_MeshColor=a_MeshColor;\n   #endif\n   \n    gl_Position=u_Projection*u_View*vec4(center,1.0);\n    v_Color = computeParticleColor(a_StartColor, normalizedAge);\n\t#ifdef DIFFUSEMAP\n\t\t#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\t\t\tv_TextureCoordinate =computeParticleUV(a_CornerTextureCoordinate.zw, normalizedAge);\n\t\t#endif\n\t\t#ifdef RENDERMODE_MESH\n\t\t\tv_TextureCoordinate =computeParticleUV(a_MeshTextureCoordinate, normalizedAge);\n\t\t#endif\n\t\t\n\t\t#ifdef TILINGOFFSET\n\t\t\tv_TextureCoordinate=vec2(v_TextureCoordinate.x,1.0-v_TextureCoordinate.y)*u_TilingOffset.xy+vec2(u_TilingOffset.z,-u_TilingOffset.w);//需要特殊处理\n\t\t\tv_TextureCoordinate=vec2(v_TextureCoordinate.x,1.0-v_TextureCoordinate.y);//需要特殊处理\n\t\t#endif\n\t#endif\n    v_Discard=0.0;\n\t  \n\t#ifdef FOG\n\t\tv_PositionWorld=center;\n\t#endif\n   }\n   else\n\t{\n\t\tv_Discard=1.0;\n\t}\n}\n\n", 
            n = "#ifdef HIGHPRECISION\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\nvarying float v_Discard;\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\nuniform sampler2D u_texture;\nuniform vec4 u_Tintcolor;\n\n#ifdef RENDERMODE_MESH\n\tvarying vec4 v_MeshColor;\n#endif\n\n#ifdef FOG\n\tvarying vec3 v_PositionWorld;\n\tuniform vec3 u_CameraPosition;\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\n\nvoid main()\n{\t\n\t#ifdef RENDERMODE_MESH\n\t\tgl_FragColor=v_MeshColor;\n\t#else\n\t\tgl_FragColor=vec4(1.0);\t\n\t#endif\n\t\t\n\t#ifdef DIFFUSEMAP\n\t\tif(v_Discard!=0.0)\n\t\t\tdiscard;\n\t\t#ifdef TINTCOLOR\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*u_Tintcolor*2.0*v_Color;\n\t\t#else\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*v_Color;\n\t\t#endif\n\t#else\n\t\t#ifdef TINTCOLOR\n\t\t\tgl_FragColor*=u_Tintcolor*2.0*v_Color;\n\t\t#else\n\t\t\tgl_FragColor*=v_Color;\n\t\t#endif\n\t#endif\n\t}", 
            a = $e.add("PARTICLESHURIKEN"), o = new de(i, r, ni.shaderDefines, bn.shaderDefines), 
            a.addSubShader(o), o.addShaderPass(t, n), i = {
                a_Position: 0
            }, r = {
                u_TintColor: 1,
                u_Exposure: 1,
                u_Rotation: 1,
                u_CubeTexture: 1,
                u_MvpMatrix: 3
            }, t = "attribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\nuniform float u_Rotation;\nvarying vec3 v_Texcoord;\n\n\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\n{\n\tfloat angle = degrees * 3.141593 / 180.0;\n\tfloat sina=sin(angle);\n\tfloat cosa=cos(angle);\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\n}\n\t\t\nvoid main()\n{\n\tvec4 position=rotateAroundYInDegrees(a_Position,u_Rotation);\n\tgl_Position = (u_MvpMatrix*position).xyww;\n\tv_Texcoord=vec3(-a_Position.x,a_Position.yz);//转换坐标系\n}\n", 
            n = "#ifdef HIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec3 v_Texcoord;\n\nuniform samplerCube u_CubeTexture;\nuniform float u_Exposure;\nuniform vec4 u_TintColor;\n\n\nvoid main()\n{\t\n\tvec3 color=textureCube(u_CubeTexture, v_Texcoord).rgb*u_TintColor.rgb*u_Exposure*2.0;\n\tgl_FragColor=vec4(color,1.0);\n}\n\n", 
            a = $e.add("SkyBox"), o = new de(i, r), a.addSubShader(o), o.addShaderPass(t, n), 
            i = {
                a_Position: 0
            }, r = {
                u_SunSize: 1,
                u_SunSizeConvergence: 1,
                u_AtmosphereThickness: 1,
                u_SkyTint: 1,
                u_GroundTint: 1,
                u_Exposure: 1,
                u_MvpMatrix: 3,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4
            }, t = "#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include \"Lighting.glsl\";\n\n#define OUTER_RADIUS 1.025\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\n#define MIE 0.0010             // Mie constant 米氏散射\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\n\nconst float SKY_GROUND_THRESHOLD = 0.02;\nconst float outerRadius = OUTER_RADIUS;\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\nconst float innerRadius = 1.0;\nconst float innerRadius2 = 1.0;\nconst float cameraHeight = 0.0001;\n\nconst float HDSundiskIntensityFactor = 15.0;\nconst float simpleSundiskIntensityFactor = 27.0;\n\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\nconst float kmESun = MIE * SUN_BRIGHTNESS;\nconst float km4PI = MIE * 4.0 * 3.14159265;\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\nconst float scaleDepth = 0.25;\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\n\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\n\nattribute vec4 a_Position;\n\nuniform mat4 u_MvpMatrix;\nuniform vec3 u_SkyTint;\nuniform vec3 u_GroundTint;\nuniform float u_Exposure;\nuniform float u_AtmosphereThickness;\nuniform DirectionLight u_DirectionLight;\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Rayleigh phase function\nfloat getRayleighPhase(vec3 light, vec3 ray) \n{\n\tfloat eyeCos = dot(light, ray);\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\n}\n\nfloat scaleAngle(float inCos)\n{\n\tfloat x = 1.0 - inCos;\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\n\nvoid main () {\n\tgl_Position = (u_MvpMatrix*a_Position).xyww;\n\n\tvec3 skyTintInGammaSpace = u_SkyTint;//支持非GAMMA空间后要调整\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\n\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\n\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\n\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n\tvec3 eyeRay = normalize(a_Position.xyz);\n\n\tfloat far = 0.0;\n\tvec3 cIn, cOut;\n\tif (eyeRay.y >= 0.0) {// Sky\n\t\t// Calculate the length of the \"atmosphere\"\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat height = innerRadius + cameraHeight;\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\tvec3 frontColor = vec3(0.0);\n\t\t//unrolling this manually to avoid some platform for loop slow\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n\t\tcIn = frontColor * (invWavelength * krESun);\n\t\tcOut = frontColor * kmESun;\n\t} else {// Ground\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\n\t\tvec3 pos = cameraPos + far * eyeRay;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\n\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, pos);\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\n\t\tfloat lightScale = scaleAngle(lightAngle);\n\t\tfloat cameraOffset = depth*cameraScale;\n\t\tfloat temp = lightScale + cameraScale;\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\t// Now loop through the sample rays\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\n\t\tvec3 attenuate;\n\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat scatter = depth*temp - cameraOffset;\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\n\t}\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tv_Vertex = -a_Position.xyz;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_RayDir = -eyeRay;\n\t#else\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\n\t#endif\n\n\t// if we want to calculate color in vprog:\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint*u_GroundTint * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_DirectionLight.Direction, -eyeRay));\n\n\t\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\n\tfloat lightColorIntensity = clamp(length(u_DirectionLight.Color), 0.25, 1.0);\n\n\t#ifdef SUN_HIGH_QUALITY \n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_DirectionLight.Color / lightColorIntensity;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_DirectionLight.Color / lightColorIntensity;\n\t#endif\n}\n", 
            n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\nconst float MIE_G = -0.990;\nconst float MIE_G2 = 0.9801;\nconst float SKY_GROUND_THRESHOLD = 0.02;\n\nuniform float u_SunSize;\nuniform float u_SunSizeConvergence;\nuniform DirectionLight u_DirectionLight;\n\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Mie phase function\nfloat getMiePhase(float eyeCos, float eyeCos2) {\n\tfloat temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\n\ttemp = pow(temp, pow(u_SunSize,0.65) * 10.0);\n\ttemp = max(temp,1.0e-4); // prevent division by zero, esp. in half precision\n\ttemp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\n\treturn temp;\n}\n\n// Calculates the sun shape\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray) {\n\t#ifdef SUN_HIGH_QUALITY\n\t\tfloat focusedEyeCos = pow(clamp(dot(lightPos, ray),0.0,1.0), u_SunSizeConvergence);\n\t\treturn getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\n\t#else //SUN_SIMPLE\n\t\tvec3 delta = lightPos - ray;\n\t\tfloat dist = length(delta);\n\t\tfloat spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\n\t\treturn spot * spot;\n\t#endif\n}\n\nvoid main() {\n\t// if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\n\t// if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\n\t// if y < 0 [eyeRay.y > 0] - sky\n\tvec3 col = vec3(0.0, 0.0, 0.0);\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tvec3 ray = normalize(v_Vertex);\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\n\t#elif defined(SUN_SIMPLE) \n\t\tvec3 ray = v_RayDir;\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\t\n\t#else\n\t\tfloat y = v_SkyGroundFactor;\n\t#endif\n\n\t// if we did precalculate color in vprog: just do lerp between them\n\tcol = mix(v_SkyColor, v_GroundColor, clamp(y,0.0,1.0));\n\n\t#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\t\tif (y < 0.0)\n\t\t\tcol += v_SunColor * calcSunAttenuation(-u_DirectionLight.Direction, -ray);\n\t#endif\n\n\tcol = sqrt(col);//linear space convert to gamma space\n\tgl_FragColor=vec4(col,1.0);\n}\n\n', 
            a = $e.add("SkyBoxProcedural"), o = new de(i, r, null, Bn.shaderDefines), a.addSubShader(o), 
            o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_Normal: 3,
                a_Texcoord0: 2
            }, r = {
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_LightmapScaleOffset: 2,
                u_LightMap: 2,
                u_SplatAlphaTexture: 1,
                u_DiffuseTexture1: 1,
                u_DiffuseTexture2: 1,
                u_DiffuseTexture3: 1,
                u_DiffuseTexture4: 1,
                u_DiffuseTexture5: 1,
                u_DiffuseScaleOffset1: 1,
                u_DiffuseScaleOffset2: 1,
                u_DiffuseScaleOffset3: 1,
                u_DiffuseScaleOffset4: 1,
                u_DiffuseScaleOffset5: 1,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Attenuation": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.Spot": 4,
                "u_SpotLight.Color": 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4
            }, t = "attribute vec4 a_Position;\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\n\nvarying vec2 v_Texcoord0;\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(LIGHTMAP)\n\tattribute vec3 a_Normal;\n\tvarying vec3 v_Normal;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\n\tuniform mat4 u_WorldMat;\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef LIGHTMAP\n\tvarying vec2 v_LightMapUV;\n\tuniform vec4 u_LightmapScaleOffset;\n#endif\n\n#ifdef RECEIVESHADOW\n\tvarying float v_posViewZ;\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n#endif\n\nvoid main()\n{\n\tgl_Position = u_MvpMatrix * a_Position;\n  \n\tv_Texcoord0 = a_Texcoord0;\n  \n\t#ifdef LIGHTMAP\n\t\tv_LightMapUV = vec2(a_Texcoord0.x, 1.0 - a_Texcoord0.y) * u_LightmapScaleOffset.xy + u_LightmapScaleOffset.zw;\n\t\tv_LightMapUV.y = 1.0 - v_LightMapUV.y;\n\t#endif\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_Normal = a_Normal;\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\n\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n}", 
            n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\n\tuniform vec3 u_CameraPos;\n\tvarying vec3 v_Normal;\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#include "ShadowHelper.glsl"\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\nvarying float v_posViewZ;\n\nuniform vec3 u_AmbientColor;\n\nuniform sampler2D u_SplatAlphaTexture;\n\nuniform sampler2D u_DiffuseTexture1;\nuniform sampler2D u_DiffuseTexture2;\nuniform sampler2D u_DiffuseTexture3;\nuniform sampler2D u_DiffuseTexture4;\nuniform sampler2D u_DiffuseTexture5;\n\nuniform vec4 u_DiffuseScaleOffset1;\nuniform vec4 u_DiffuseScaleOffset2;\nuniform vec4 u_DiffuseScaleOffset3;\nuniform vec4 u_DiffuseScaleOffset4;\nuniform vec4 u_DiffuseScaleOffset5;\n\nvarying vec2 v_Texcoord0;\n\n#ifdef LIGHTMAP\n\tuniform sampler2D u_LightMap;\n\tvarying vec2 v_LightMapUV;\n#endif\n\nvoid main()\n{\n\tvec4 splatAlpha = vec4(1.0);\n\t#ifdef ExtendTerrain_DETAIL_NUM1\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r;\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM2\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r + color2.xyz * (1.0 - splatAlpha.r);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM3\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * (1.0 - splatAlpha.r - splatAlpha.g);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM4\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM5\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\n\t\tvec4 color5 = texture2D(u_DiffuseTexture5, v_Texcoord0 * u_DiffuseScaleOffset5.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * splatAlpha.a + color5.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b - splatAlpha.a);\n\t#endif\n\t\tgl_FragColor.w = splatAlpha.a;\n\t\t\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n    vec3 normal = v_Normal;\n\tvec3 dif, spe;\n#endif\n\nvec3 diffuse = vec3(0.0);\nvec3 specular= vec3(0.0);\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\n\tvec3 toEye;\n\t#ifdef FOG\n\t\ttoEye=u_CameraPos-v_PositionWorld;\n\t\tfloat toEyeLength=length(toEye);\n\t\ttoEye/=toEyeLength;\n\t#else\n\t\ttoEye=normalize(u_CameraPos-v_PositionWorld);\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tLayaAirBlinnPhongDiectionLight(vec3(0.0), 1.0, normal, vec3(1.0), toEye,u_DirectionLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n \n#ifdef POINTLIGHT\n\tLayaAirBlinnPhongPointLight(v_PositionWorld, vec3(0.0), 1.0, normal, vec3(1.0), toEye, u_PointLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n\n#ifdef SPOTLIGHT\n\tLayaAirBlinnPhongSpotLight(v_PositionWorld, vec3(0.0), 1.0, normal, vec3(1.0), toEye, u_SpotLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n\nvec3 globalDiffuse = u_AmbientColor;\n#ifdef LIGHTMAP\n\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n#endif\n\n#ifdef RECEIVESHADOW\n\tfloat shadowValue = 1.0;\n\t#ifdef SHADOWMAP_PSSM3\n\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t#endif\n\t#ifdef SHADOWMAP_PSSM2\n\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t#endif \n\t#ifdef SHADOWMAP_PSSM1\n\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t#endif\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse) * shadowValue, gl_FragColor.a);\n#else\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse), gl_FragColor.a);\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t#ifdef RECEIVESHADOW\n\t\tgl_FragColor.rgb += specular * shadowValue;\n\t#else\n\t\tgl_FragColor.rgb += specular;\n\t#endif\n#endif\n\n#ifdef FOG\n\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\n\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n#endif\n}\n\n\n\n\n\n', 
            a = $e.add("ExtendTerrain"), o = new de(i, r, wn.shaderDefines, jn.shaderDefines), 
            a.addSubShader(o), o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_OffsetVector: 1,
                a_Texcoord0X: 4,
                a_Texcoord0Y: 3,
                a_BirthTime: 2
            }, r = {
                u_MvpMatrix: 2,
                u_View: 3,
                u_Projection: 3,
                u_TilingOffset: 1,
                u_MainTexture: 1,
                u_MainColor: 1,
                u_CurTime: 2,
                u_LifeTime: 2,
                u_WidthCurve: 2,
                u_WidthCurveKeyLength: 2,
                u_GradientColorkey: 2,
                u_GradientAlphakey: 2
            }, t = "attribute vec3 a_Position;\nattribute vec3 a_OffsetVector;\nattribute vec4 a_Color;\nattribute float a_Texcoord0X;\nattribute float a_Texcoord0Y;\nattribute float a_BirthTime;\n\nuniform mat4 u_View;\nuniform mat4 u_Projection;\n\nuniform vec4 u_TilingOffset;\n\nuniform float u_CurTime;\nuniform float u_LifeTime;\nuniform vec4 u_WidthCurve[10];\nuniform int u_WidthCurveKeyLength;\n\nuniform vec4 u_GradientColorkey[10];\nuniform vec2 u_GradientAlphakey[10];\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\n{\n\tfloat t2 = t * t;\n\tfloat t3 = t2 * t;\n\tfloat a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\tfloat b = t3 - 2.0 * t2 + t;\n\tfloat c = t3 - t2;\n\tfloat d = -2.0 * t3 + 3.0 * t2;\n\treturn a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\n}\n\nfloat getCurWidth(in float normalizeTime)\n{\n\tfloat width;\n\tif(normalizeTime == 0.0){\n\t\twidth=u_WidthCurve[0].w;\n\t}\n\telse if(normalizeTime >= 1.0){\n\t\twidth=u_WidthCurve[u_WidthCurveKeyLength - 1].w;\n\t}\n\telse{\n\t\tfor(int i = 0; i < 10; i ++ )\n\t\t{\n\t\t\tif(normalizeTime == u_WidthCurve[i].x){\n\t\t\t\twidth=u_WidthCurve[i].w;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tvec4 lastFrame = u_WidthCurve[i];\n\t\t\tvec4 nextFrame = u_WidthCurve[i + 1];\n\t\t\tif(normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\n\t\t\t{\n\t\t\t\tfloat duration = nextFrame.x - lastFrame.x;\n\t\t\t\tfloat t = (normalizeTime - lastFrame.x) / duration;\n\t\t\t\tfloat outTangent = lastFrame.z;\n\t\t\t\tfloat inTangent = nextFrame.y;\n\t\t\t\tfloat value1 = lastFrame.w;\n\t\t\t\tfloat value2 = nextFrame.w;\n\t\t\t\twidth=hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn width;\n}\t\n\nvec4 getColorFromGradientByBlend(in vec4 gradientColors[10], in vec2 gradientAlphas[10], in float normalizeTime)\n{\n\tvec4 color;\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec4 gradientColor = gradientColors[i];\n\t\tfloat colorKey = gradientColor.x;\n\t\tif(colorKey >= normalizeTime)\n\t\t{\n\t\t\tvec4 lastGradientColor = gradientColors[i-1];\n\t\t\tfloat lastColorKey = lastGradientColor.x;\n\t\t\tfloat age = (normalizeTime - lastColorKey) / (colorKey - lastColorKey);\n\t\t\tcolor.rgb = mix(gradientColors[i-1].yzw, gradientColor.yzw, age);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec2 gradientAlpha = gradientAlphas[i];\n\t\tfloat alphaKey = gradientAlpha.x;\n\t\tif(alphaKey >= normalizeTime)\n\t\t{\n\t\t\tvec2 lastGradientAlpha = gradientAlphas[i-1];\n\t\t\tfloat lastAlphaKey = lastGradientAlpha.x;\n\t\t\tfloat age = (normalizeTime - lastAlphaKey) / (alphaKey - lastAlphaKey);\n\t\t\tcolor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn color;\n}\n\nvec4 getColorFromGradientByFixed(in vec4 gradientColors[10], in vec2 gradientAlphas[10], in float normalizeTime)\n{\n\tvec4 color;\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec4 gradientColor = gradientColors[i];\n\t\tif(gradientColor.w >= normalizeTime)\n\t\t{\n\t\t\tcolor.rgb = gradientColor.xyz;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec2 gradientAlpha = gradientAlphas[i];\n\t\tif(gradientAlpha.y >= normalizeTime)\n\t\t{\n\t\t\tcolor.a = gradientAlpha.x;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn color;\n}\n\nvoid main()\n{\n\tfloat normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\n\t\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\n\t#else\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, a_Texcoord0Y);\n\t#endif\n\t\n\t#ifdef GRADIENTMODE_BLEND\n\t\tv_Color = getColorFromGradientByBlend(u_GradientColorkey, u_GradientAlphakey, normalizeTime);\n\t#else\n\t\tv_Color = getColorFromGradientByFixed(u_GradientColorkey, u_GradientAlphakey, normalizeTime);\n\t#endif\n\t\n\tgl_Position = u_Projection * u_View * vec4(a_Position + a_OffsetVector * getCurWidth(normalizeTime),1.0);\n}\n", 
            n = "#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nuniform sampler2D u_MainTexture;\nuniform vec4 u_MainColor;\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nvoid main()\n{\t\n\tvec4 color = 2.0 * u_MainColor * v_Color;\n\t#ifdef MAINTEXTURE\n\t\tvec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\n\t\tcolor *= mainTextureColor;\n\t#endif\n\tgl_FragColor = color;\n}\n\n", 
            a = $e.add("Trail"), o = new de(i, r, ei.shaderDefines, Xn.shaderDefines), a.addSubShader(o), 
            o.addShaderPass(t, n), i = {
                a_Position: 0,
                a_Normal: 3,
                a_Tangent0: 5
            }, r = {
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_Time: 4,
                u_MainTexture: 1,
                u_NormalTexture: 1,
                u_HorizonColor: 1,
                u_WaveScale: 1,
                u_WaveSpeed: 1
            }, t = "attribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\n\nuniform mat4 u_MvpMatrix;\nuniform mat4 u_WorldMat;\nuniform vec3 u_CameraPos;\nuniform float u_WaveScale;\nuniform vec4 u_WaveSpeed;\nuniform float u_Time;\n\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec2 v_Texcoord0;\nvarying vec2 v_Texcoord1;\n\nvoid main()\n{\n\tvec4 positionWorld = u_WorldMat * a_Position;\n\tvec4 position = u_MvpMatrix * a_Position;\n\t\n\tvec4 temp = vec4(positionWorld.x, positionWorld.z, positionWorld.x, positionWorld.z) * u_WaveScale + u_WaveSpeed * u_WaveScale * u_Time;\n\t\n\tv_Texcoord0 = temp.xy * vec2(0.4, 0.45);\n\tv_Texcoord1 = temp.wz;\n\t\n\tmat3 worldMat = mat3(u_WorldMat);\n\tv_Normal = worldMat * a_Normal;\n\tv_Tangent = worldMat * a_Tangent0.xyz;\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\n\t\n\tv_ViewDir = u_CameraPos - positionWorld.xyz;\n\tgl_Position = position;\n}", 
            n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#ifdef MAINTEXTURE\n\tuniform sampler2D u_MainTexture;\n#endif\n\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n#endif\n\nuniform vec4 u_HorizonColor;\n\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec2 v_Texcoord0;\nvarying vec2 v_Texcoord1;\n\n#include "Lighting.glsl"\n\nvoid main()\n{\n\tvec4 bumpColor1 = texture2D(u_NormalTexture, v_Texcoord0);\n\tvec4 bumpColor2 = texture2D(u_NormalTexture, v_Texcoord1);\n\t\n\tvec3 normal1 = NormalSampleToWorldSpace1(bumpColor1, v_Tangent, v_Binormal, v_Normal);\n\tvec3 normal2 = NormalSampleToWorldSpace1(bumpColor2, v_Tangent, v_Binormal, v_Normal);\n\t\n\tvec3 normal = normalize((normal1 + normal2) * 0.5);\n\tvec3 viewDir = normalize(v_ViewDir);\n\tfloat fresnel = dot(viewDir, normal);\n\t\n\tvec4 waterColor = texture2D(u_MainTexture, vec2(fresnel, fresnel));\n\t\n\tvec4 color;\n\tcolor.rgb = mix(waterColor.rgb, u_HorizonColor.rgb, vec3(waterColor.a));\n\tcolor.a = u_HorizonColor.a;\n\t\n\tgl_FragColor = color;\n}\n\n', 
            a = $e.add("WaterPrimary"), o = new de(i, r, null, Kn.shaderDefines), a.addSubShader(o), 
            o.addShaderPass(t, n);
        }, e._rangeAttenTex = null, e;
    }(), Lt = function(e) {
        function t(e) {
            if (this._indexInList = -1, this._indexInCastShadowList = -1, this._visible = !0, 
            this._isPartOfStaticBatch = !1, this._staticBatch = null, t.__super.call(this), 
            this._id = ++t._uniqueIDCounter, this._indexInCastShadowList = -1, this._boundingBox = new ne(new dn(), new dn()), 
            this._boundingBoxCenter = new dn(), this._boundingSphere = new k(new dn(), 0), D.isConchApp) {
                var n = q._cullingBufferLength;
                this._cullingBufferIndex = n;
                var i = q._cullingBuffer, r = n + 5;
                if (r >= i.length) {
                    var a = i;
                    (i = q._cullingBuffer = new Float32Array(i.length + 4096)).set(a, 0);
                }
                i[n] = 1, q._cullingBufferLength = r;
            }
            this._boundingSphereNeedChange = !0, this._boundingBoxNeedChange = !0, this._boundingBoxCenterNeedChange = !0, 
            this._octreeNodeNeedChange = !0, this._materials = [], this._renderElements = [], 
            this._owner = e, this._enable = !0, this._materialsInstance = [], this._shaderValues = new vt(null), 
            this._defineDatas = new le(), this.lightmapIndex = -1, this._castShadow = !1, this.receiveShadow = !1, 
            this.sortingFudge = 0, e && this._owner.transform.on("transformchanged", this, this._onWorldMatNeedChange);
        }
        r(t, "laya.d3.core.render.BaseRender", p);
        var o = t.prototype;
        return n.imps(o, {
            "laya.resource.ISingletonElement": !0
        }), o._changeMaterialReference = function(e, t) {
            e && e._removeReference(), t._addReference();
        }, o._getInstanceMaterial = function(e, t) {
            var n = new e.constructor();
            return e.cloneTo(n), n.name = n.name + "(Instance)", this._materialsInstance[t] = !0, 
            this._changeMaterialReference(this._materials[t], n), this._materials[t] = n, n;
        }, o._applyLightMapParams = function() {
            if (this._scene && this._lightmapIndex >= 0) {
                var e = this._scene.getlightmaps();
                this._lightmapIndex < e.length ? (this._defineDatas.add(wn.SAHDERDEFINE_LIGHTMAP), 
                this._shaderValues.setTexture(wn.LIGHTMAP, e[this._lightmapIndex])) : this._defineDatas.remove(wn.SAHDERDEFINE_LIGHTMAP);
            } else this._defineDatas.remove(wn.SAHDERDEFINE_LIGHTMAP);
        }, o._onWorldMatNeedChange = function() {
            this._boundingSphereNeedChange = !0, this._boundingBoxNeedChange = !0, this._boundingBoxCenterNeedChange = !0, 
            this._octreeNodeNeedChange = !0;
        }, o._renderRenderableBoundBox = function() {}, o._calculateBoundingSphere = function() {
            throw "BaseRender: must override it.";
        }, o._calculateBoundingBox = function() {
            throw "BaseRender: must override it.";
        }, o._getIndexInList = function() {
            return this._indexInList;
        }, o._setIndexInList = function(e) {
            this._indexInList = e;
        }, o._setBelongScene = function(e) {
            this._scene !== e && (this._scene = e, this._applyLightMapParams());
        }, o._needRender = function(e) {
            return !0;
        }, o._renderUpdate = function(e, t) {}, o._renderUpdateWithCamera = function(e, t) {}, 
        o._updateOctreeNode = function() {
            var e = this._treeNode;
            e && this._octreeNodeNeedChange && (e.updateObject(this), this._octreeNodeNeedChange = !1);
        }, o._destroy = function() {
            this.offAll();
            var e = 0, t = 0;
            for (e = 0, t = this._renderElements.length; e < t; e++) this._renderElements[e].destroy();
            for (e = 0, t = this._materials.length; e < t; e++) this._materials[e].destroyed || this._materials[e]._removeReference();
            this._renderElements = null, this._owner = null, this._materials = null, this._boundingBox = null, 
            this._boundingBoxCenter = null, this._boundingSphere = null, this._lightmapScaleOffset = null;
        }, a(0, o, "boundingSphere", function() {
            return this._boundingSphereNeedChange && (this._calculateBoundingSphere(), this._boundingSphereNeedChange = !1), 
            this._boundingSphere;
        }), a(0, o, "id", function() {
            return this._id;
        }), a(0, o, "material", function() {
            var e = this._materials[0];
            if (e && !this._materialsInstance[0]) {
                var t = this._getInstanceMaterial(e, 0), n = this._renderElements[0];
                n && (n.material = t);
            }
            return this._materials[0];
        }, function(e) {
            this.sharedMaterial = e;
        }), a(0, o, "isPartOfStaticBatch", function() {
            return this._isPartOfStaticBatch;
        }), a(0, o, "sharedMaterial", function() {
            return this._materials[0];
        }, function(e) {
            var t = this._materials[0];
            if (t !== e) {
                this._materials[0] = e, this._materialsInstance[0] = !1, this._changeMaterialReference(t, e);
                var n = this._renderElements[0];
                n && (n.material = e);
            }
        }), a(0, o, "lightmapIndex", function() {
            return this._lightmapIndex;
        }, function(e) {
            this._lightmapIndex !== e && (this._lightmapIndex = e, this._applyLightMapParams());
        }), a(0, o, "lightmapScaleOffset", function() {
            return this._lightmapScaleOffset;
        }, function(e) {
            this._lightmapScaleOffset = e, this._shaderValues.setVector(wn.LIGHTMAPSCALEOFFSET, e), 
            this._defineDatas.add(wn.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
        }), a(0, o, "castShadow", function() {
            return this._castShadow;
        }, function(e) {
            this._castShadow !== e && (this._owner.activeInHierarchy && (e ? this._scene._addShadowCastRenderObject(this) : this._scene._removeShadowCastRenderObject(this)), 
            this._castShadow = e);
        }), a(0, o, "enable", function() {
            return this._enable;
        }, function(e) {
            this._enable = !!e;
        }), a(0, o, "materials", function() {
            for (var e = 0, t = this._materials.length; e < t; e++) if (!this._materialsInstance[e]) {
                var n = this._getInstanceMaterial(this._materials[e], e), i = this._renderElements[e];
                i && (i.material = n);
            }
            return this._materials.slice();
        }, function(e) {
            this.sharedMaterials = e;
        }), a(0, o, "sharedMaterials", function() {
            return this._materials.slice();
        }, function(e) {
            if (!e) throw new Error("BaseRender: shadredMaterials value can't be null.");
            var t = e.length;
            this._materialsInstance.length = t;
            for (var n = 0; n < t; n++) {
                var i = this._materials[n];
                if (i !== e[n]) {
                    this._materialsInstance[n] = !1, this._changeMaterialReference(i, e[n]);
                    var r = this._renderElements[n];
                    r && (r.material = e[n]);
                }
            }
            this._materials = e;
        }), a(0, o, "boundingBox", function() {
            return this._boundingBoxNeedChange && (this._calculateBoundingBox(), this._boundingBoxNeedChange = !1), 
            this._boundingBox;
        }), a(0, o, "boundingBoxCenter", function() {
            if (this._boundingBoxCenterNeedChange) {
                var e = this.boundingBox;
                dn.add(e.min, e.max, this._boundingBoxCenter), dn.scale(this._boundingBoxCenter, .5, this._boundingBoxCenter), 
                this._boundingBoxCenterNeedChange = !1;
            }
            return this._boundingBoxCenter;
        }), a(0, o, "receiveShadow", function() {
            return this._receiveShadow;
        }, function(e) {
            this._receiveShadow !== e && (this._receiveShadow = e, e ? this._defineDatas.add(wn.SHADERDEFINE_RECEIVE_SHADOW) : this._defineDatas.remove(wn.SHADERDEFINE_RECEIVE_SHADOW));
        }), t._uniqueIDCounter = 0, i(t, [ "_tempBoundBoxCorners", function() {
            return this._tempBoundBoxCorners = [ new dn(), new dn(), new dn(), new dn(), new dn(), new dn(), new dn(), new dn() ];
        }, "_greenColor", function() {
            return this._greenColor = new _n(0, 1, 0, 1);
        } ]), t;
    }(), Nt = function(e) {
        function t(e) {
            this._owner = null, this._children = null, this._parent = null, this._dummy = null, 
            this._transformFlag = 0, this.pivot = null, t.__super.call(this), this._localPosition = new dn(0, 0, 0), 
            this._localRotation = new Ce(0, 0, 0, 1), this._localScale = new dn(1, 1, 1), this._localRotationEuler = new dn(0, 0, 0), 
            this._localMatrix = new ut(), this._position = new dn(0, 0, 0), this._rotation = new Ce(0, 0, 0, 1), 
            this._scale = new dn(1, 1, 1), this._rotationEuler = new dn(0, 0, 0), this._worldMatrix = new ut(), 
            this._forward = new dn(), this._up = new dn(), this._right = new dn(), this._owner = e, 
            this._children = [], this._setTransformFlag(7, !1), this._setTransformFlag(248, !0);
        }
        r(t, "laya.d3.core.Transform3D", p);
        var n = t.prototype;
        return n._setTransformFlag = function(e, t) {
            t ? this._transformFlag |= e : this._transformFlag &= ~e;
        }, n._getTransformFlag = function(e) {
            return 0 != (this._transformFlag & e);
        }, n._setParent = function(e) {
            if (this._parent !== e) {
                if (this._parent) {
                    var t = this._parent._children, n = t.indexOf(this);
                    t.splice(n, 1);
                }
                e && (e._children.push(this), e && this._onWorldTransform()), this._parent = e;
            }
        }, n._updateLocalMatrix = function() {
            if (!this.pivot || 0 === this.pivot.x && 0 === this.pivot.y && 0 === this.pivot.z) ut.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix); else {
                var e = t._tempVector30;
                dn.multiply(this.pivot, this._localScale, e);
                var n = t._tempVector31;
                dn.subtract(e, this.pivot, n);
                var i = t._tempVector32, r = this.localRotation;
                dn.transformQuat(e, r, i), dn.subtract(i, e, i);
                var a = t._tempVector33;
                dn.subtract(this._localPosition, n, a), dn.subtract(a, i, a), ut.createAffineTransformation(a, r, this._localScale, this._localMatrix);
            }
        }, n._onWorldPositionRotationTransform = function() {
            if (!(this._getTransformFlag(64) && this._getTransformFlag(8) && this._getTransformFlag(16) && this._getTransformFlag(128))) {
                this._setTransformFlag(216, !0), this.event("transformchanged", this._transformFlag);
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldPositionRotationTransform();
            }
        }, n._onWorldPositionScaleTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(8) || !this._getTransformFlag(32)) {
                this._setTransformFlag(104, !0), this.event("transformchanged", this._transformFlag);
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldPositionScaleTransform();
            }
        }, n._onWorldPositionTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(8)) {
                this._setTransformFlag(72, !0), this.event("transformchanged", this._transformFlag);
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldPositionTransform();
            }
        }, n._onWorldRotationTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(16) || !this._getTransformFlag(128)) {
                this._setTransformFlag(208, !0), this.event("transformchanged", this._transformFlag);
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldPositionRotationTransform();
            }
        }, n._onWorldScaleTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(32)) {
                this._setTransformFlag(96, !0), this.event("transformchanged", this._transformFlag);
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldPositionScaleTransform();
            }
        }, n._onWorldTransform = function() {
            if (!(this._getTransformFlag(64) && this._getTransformFlag(8) && this._getTransformFlag(16) && this._getTransformFlag(128) && this._getTransformFlag(32))) {
                this._setTransformFlag(248, !0), this.event("transformchanged", this._transformFlag);
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldTransform();
            }
        }, n.translate = function(e, n) {
            void 0 === n && (n = !0), n ? (ut.createFromQuaternion(this.localRotation, t._tempMatrix0), 
            dn.transformCoordinate(e, t._tempMatrix0, t._tempVector30), dn.add(this.localPosition, t._tempVector30, this._localPosition), 
            this.localPosition = this._localPosition) : (dn.add(this.position, e, this._position), 
            this.position = this._position);
        }, n.rotate = function(e, n, i) {
            void 0 === n && (n = !0), void 0 === i && (i = !0);
            var r;
            i ? r = e : (dn.scale(e, Math.PI / 180, t._tempVector30), r = t._tempVector30), 
            Ce.createFromYawPitchRoll(r.y, r.x, r.z, t._tempQuaternion0), n ? (Ce.multiply(this._localRotation, t._tempQuaternion0, this._localRotation), 
            this.localRotation = this._localRotation) : (Ce.multiply(t._tempQuaternion0, this.rotation, this._rotation), 
            this.rotation = this._rotation);
        }, n.lookAt = function(e, t, n) {
            void 0 === n && (n = !1);
            var i, r = e.elements;
            if (n) {
                if (i = this._localPosition.elements, Math.abs(i[0] - r[0]) < Tt.zeroTolerance && Math.abs(i[1] - r[1]) < Tt.zeroTolerance && Math.abs(i[2] - r[2]) < Tt.zeroTolerance) return;
                Ce.lookAt(this._localPosition, e, t, this._localRotation), this._localRotation.invert(this._localRotation), 
                this.localRotation = this._localRotation;
            } else {
                var a = this.position;
                if (i = a.elements, Math.abs(i[0] - r[0]) < Tt.zeroTolerance && Math.abs(i[1] - r[1]) < Tt.zeroTolerance && Math.abs(i[2] - r[2]) < Tt.zeroTolerance) return;
                Ce.lookAt(a, e, t, this._rotation), this._rotation.invert(this._rotation), this.rotation = this._rotation;
            }
        }, a(0, n, "_isFrontFaceInvert", function() {
            var e = this.scale, t = e.x < 0;
            return e.y < 0 && (t = !t), e.z < 0 && (t = !t), t;
        }), a(0, n, "owner", function() {
            return this._owner;
        }), a(0, n, "localPositionY", function() {
            return this._localPosition.elements[1];
        }, function(e) {
            this._localPosition.elements[1] = e, this.localPosition = this._localPosition;
        }), a(0, n, "localScaleX", function() {
            return this._localScale.elements[0];
        }, function(e) {
            this._localScale.elements[0] = e, this.localScale = this._localScale;
        }), a(0, n, "worldNeedUpdate", function() {
            return this._getTransformFlag(64);
        }), a(0, n, "localPositionX", function() {
            return this._localPosition.elements[0];
        }, function(e) {
            this._localPosition.elements[0] = e, this.localPosition = this._localPosition;
        }), a(0, n, "localPosition", function() {
            return this._localPosition;
        }, function(e) {
            this._localPosition !== e && e.cloneTo(this._localPosition), this._setTransformFlag(4, !0), 
            this._onWorldPositionTransform();
        }), a(0, n, "localPositionZ", function() {
            return this._localPosition.elements[2];
        }, function(e) {
            this._localPosition.elements[2] = e, this.localPosition = this._localPosition;
        }), a(0, n, "localRotationX", function() {
            return this.localRotation.elements[0];
        }, function(e) {
            this._localRotation.elements[0] = e, this.localRotation = this._localRotation;
        }), a(0, n, "localRotationY", function() {
            return this.localRotation.elements[1];
        }, function(e) {
            this._localRotation.elements[1] = e, this.localRotation = this._localRotation;
        }), a(0, n, "localRotationZ", function() {
            return this.localRotation.elements[2];
        }, function(e) {
            this._localRotation.elements[2] = e, this.localRotation = this._localRotation;
        }), a(0, n, "localRotationW", function() {
            return this.localRotation.elements[3];
        }, function(e) {
            this._localRotation.elements[3] = e, this.localRotation = this._localRotation;
        }), a(0, n, "localRotation", function() {
            if (this._getTransformFlag(1)) {
                var e = this._localRotationEuler.elements;
                Ce.createFromYawPitchRoll(e[1] / t._angleToRandin, e[0] / t._angleToRandin, e[2] / t._angleToRandin, this._localRotation), 
                this._setTransformFlag(1, !1);
            }
            return this._localRotation;
        }, function(e) {
            this._localRotation !== e && e.cloneTo(this._localRotation), this._localRotation.normalize(this._localRotation), 
            this._setTransformFlag(6, !0), this._setTransformFlag(1, !1), !this.pivot || 0 === this.pivot.x && 0 === this.pivot.y && 0 === this.pivot.z ? this._onWorldRotationTransform() : this._onWorldPositionRotationTransform();
        }), a(0, n, "localScaleY", function() {
            return this._localScale.elements[1];
        }, function(e) {
            this._localScale.elements[1] = e, this.localScale = this._localScale;
        }), a(0, n, "localScaleZ", function() {
            return this._localScale.elements[2];
        }, function(e) {
            this._localScale.elements[2] = e, this.localScale = this._localScale;
        }), a(0, n, "position", function() {
            if (this._getTransformFlag(8)) {
                if (null != this._parent) {
                    var e = this._parent.position;
                    dn.multiply(this._localPosition, this._parent.scale, t._tempVector30), dn.transformQuat(t._tempVector30, this._parent.rotation, t._tempVector30), 
                    dn.add(e, t._tempVector30, this._position);
                } else this._localPosition.cloneTo(this._position);
                this._setTransformFlag(8, !1);
            }
            return this._position;
        }, function(e) {
            if (null != this._parent) {
                dn.subtract(e, this._parent.position, this._localPosition);
                var n = this._parent.scale.elements, i = n[0], r = n[1], a = n[2];
                if (1 !== i || 1 !== r || 1 !== a) {
                    var o = t._tempVector30, s = o.elements;
                    s[0] = 1 / i, s[1] = 1 / r, s[2] = 1 / a, dn.multiply(this._localPosition, o, this._localPosition);
                }
                this._parent.rotation.invert(t._tempQuaternion0), dn.transformQuat(this._localPosition, t._tempQuaternion0, this._localPosition);
            } else e.cloneTo(this._localPosition);
            this.localPosition = this._localPosition, this._position !== e && e.cloneTo(this._position), 
            this._setTransformFlag(8, !1);
        }), a(0, n, "localRotationEulerY", function() {
            return this.localRotationEuler.elements[1];
        }, function(e) {
            this._localRotationEuler.elements[1] = e, this.localRotationEuler = this._localRotationEuler;
        }), a(0, n, "localScale", function() {
            return this._localScale;
        }, function(e) {
            this._localScale !== e && e.cloneTo(this._localScale), this._setTransformFlag(4, !0), 
            !this.pivot || 0 === this.pivot.x && 0 === this.pivot.y && 0 === this.pivot.z ? this._onWorldScaleTransform() : this._onWorldPositionScaleTransform();
        }), a(0, n, "localRotationEulerX", function() {
            return this.localRotationEuler.elements[0];
        }, function(e) {
            this._localRotationEuler.elements[0] = e, this.localRotationEuler = this._localRotationEuler;
        }), a(0, n, "localRotationEulerZ", function() {
            return this.localRotationEuler.elements[2];
        }, function(e) {
            this._localRotationEuler.elements[2] = e, this.localRotationEuler = this._localRotationEuler;
        }), a(0, n, "localRotationEuler", function() {
            if (this._getTransformFlag(2)) {
                this._localRotation.getYawPitchRoll(t._tempVector30);
                var e = t._tempVector30.elements, n = this._localRotationEuler.elements;
                n[0] = e[1] * t._angleToRandin, n[1] = e[0] * t._angleToRandin, n[2] = e[2] * t._angleToRandin, 
                this._setTransformFlag(2, !1);
            }
            return this._localRotationEuler;
        }, function(e) {
            this._localRotationEuler !== e && e.cloneTo(this._localRotationEuler), this._setTransformFlag(2, !1), 
            this._setTransformFlag(5, !0), !this.pivot || 0 === this.pivot.x && 0 === this.pivot.y && 0 === this.pivot.z ? this._onWorldRotationTransform() : this._onWorldPositionRotationTransform();
        }), a(0, n, "localMatrix", function() {
            return this._getTransformFlag(4) && (this._updateLocalMatrix(), this._setTransformFlag(4, !1)), 
            this._localMatrix;
        }, function(e) {
            this._localMatrix !== e && e.cloneTo(this._localMatrix), this._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale), 
            this._setTransformFlag(4, !1), this._onWorldTransform();
        }), a(0, n, "rotation", function() {
            return this._getTransformFlag(16) && (null != this._parent ? Ce.multiply(this._parent.rotation, this.localRotation, this._rotation) : this.localRotation.cloneTo(this._rotation), 
            this._setTransformFlag(16, !1)), this._rotation;
        }, function(e) {
            null != this._parent ? (this._parent.rotation.invert(t._tempQuaternion0), Ce.multiply(t._tempQuaternion0, e, this._localRotation)) : e.cloneTo(this._localRotation), 
            this.localRotation = this._localRotation, e !== this._rotation && e.cloneTo(this._rotation), 
            this._setTransformFlag(16, !1);
        }), a(0, n, "scale", function() {
            return this._getTransformFlag(32) ? (null !== this._parent ? dn.multiply(this._parent.scale, this._localScale, this._scale) : this._localScale.cloneTo(this._scale), 
            this._setTransformFlag(32, !1), this._scale) : this._scale;
        }, function(e) {
            if (null !== this._parent) {
                var n = this._parent.scale.elements, i = t._tempVector30.elements;
                i[0] = 1 / n[0], i[1] = 1 / n[1], i[2] = 1 / n[2], dn.multiply(e, t._tempVector30, this._localScale);
            } else e.cloneTo(this._localScale);
            this.localScale = this._localScale, this._scale !== e && e.cloneTo(this._scale), 
            this._setTransformFlag(32, !1);
        }), a(0, n, "rotationEuler", function() {
            if (this._getTransformFlag(128)) {
                this.rotation.getYawPitchRoll(t._tempVector30);
                var e = t._tempVector30.elements, n = this._rotationEuler.elements;
                n[0] = e[1] * t._angleToRandin, n[1] = e[0] * t._angleToRandin, n[2] = e[2] * t._angleToRandin, 
                this._setTransformFlag(128, !1);
            }
            return this._rotationEuler;
        }, function(e) {
            Ce.createFromYawPitchRoll(e.y / t._angleToRandin, e.x / t._angleToRandin, e.z / t._angleToRandin, this._rotation), 
            this.rotation = this._rotation, this._rotationEuler !== e && e.cloneTo(this._rotationEuler), 
            this._setTransformFlag(128, !1);
        }), a(0, n, "worldMatrix", function() {
            return this._getTransformFlag(64) && (null != this._parent ? ut.multiply(this._parent.worldMatrix, this.localMatrix, this._worldMatrix) : this.localMatrix.cloneTo(this._worldMatrix), 
            this._setTransformFlag(64, !1)), this._worldMatrix;
        }, function(e) {
            null === this._parent ? e.cloneTo(this._localMatrix) : (this._parent.worldMatrix.invert(this._localMatrix), 
            ut.multiply(this._localMatrix, e, this._localMatrix)), this.localMatrix = this._localMatrix, 
            this._worldMatrix !== e && e.cloneTo(this._worldMatrix), this._setTransformFlag(64, !1);
        }), a(0, n, "forward", function() {
            var e = this.worldMatrix.elements;
            return this._forward.elements[0] = -e[8], this._forward.elements[1] = -e[9], this._forward.elements[2] = -e[10], 
            this._forward;
        }), a(0, n, "up", function() {
            var e = this.worldMatrix.elements;
            return this._up.elements[0] = e[4], this._up.elements[1] = e[5], this._up.elements[2] = e[6], 
            this._up;
        }), a(0, n, "right", function() {
            var e = this.worldMatrix.elements;
            return this._right.elements[0] = e[0], this._right.elements[1] = e[1], this._right.elements[2] = e[2], 
            this._right;
        }), t.TRANSFORM_LOCALQUATERNION = 1, t.TRANSFORM_LOCALEULER = 2, t.TRANSFORM_LOCALMATRIX = 4, 
        t.TRANSFORM_WORLDPOSITION = 8, t.TRANSFORM_WORLDQUATERNION = 16, t.TRANSFORM_WORLDSCALE = 32, 
        t.TRANSFORM_WORLDMATRIX = 64, t.TRANSFORM_WORLDEULER = 128, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempVector31", function() {
            return this._tempVector31 = new dn();
        }, "_tempVector32", function() {
            return this._tempVector32 = new dn();
        }, "_tempVector33", function() {
            return this._tempVector33 = new dn();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new Ce();
        }, "_tempMatrix0", function() {
            return this._tempMatrix0 = new ut();
        }, "_angleToRandin", function() {
            return this._angleToRandin = 180 / Math.PI;
        } ]), t;
    }(), Vt = function(e) {
        function t(e, n, i, r, a) {
            t.__super.call(this), this._owner = e, this._children = [], this._localMatrix = new Float32Array(16), 
            D.isConchApp ? (this._localPosition = new dn(0, 0, 0, n), this._localRotation = new Ce(0, 0, 0, 1, i), 
            this._localScale = new dn(0, 0, 0, r), this._worldMatrix = a) : (this._localPosition = new dn(), 
            this._localRotation = new Ce(), this._localScale = new dn(), this._worldMatrix = new Float32Array(16)), 
            this._localQuaternionUpdate = !1, this._locaEulerlUpdate = !1, this._localUpdate = !1, 
            this._worldUpdate = !0;
        }
        r(t, "laya.d3.animation.AnimationTransform3D", p);
        var n = t.prototype;
        return n._getlocalMatrix = function() {
            return this._localUpdate && (ke._createAffineTransformationArray(this._localPosition.elements, this._localRotation.elements, this._localScale.elements, this._localMatrix), 
            this._localUpdate = !1), this._localMatrix;
        }, n._onWorldTransform = function() {
            if (!this._worldUpdate) {
                this._worldUpdate = !0;
                for (var e = 0, t = this._children.length; e < t; e++) this._children[e]._onWorldTransform();
            }
        }, n.getWorldMatrix = function() {
            if (!D.isConchApp && this._worldUpdate) {
                if (null != this._parent) ke.matrix4x4MultiplyFFF(this._parent.getWorldMatrix(), this._getlocalMatrix(), this._worldMatrix); else for (var e = this._getlocalMatrix(), t = 0; t < 16; ++t) this._worldMatrix[t] = e[t];
                this._worldUpdate = !1;
            }
            return this._worldMatrix;
        }, n.setParent = function(e) {
            if (this._parent !== e) {
                if (this._parent) {
                    var t = this._parent._children, n = t.indexOf(this);
                    t.splice(n, 1);
                }
                e && (e._children.push(this), e && this._onWorldTransform()), this._parent = e;
            }
        }, a(0, n, "localPosition", function() {
            return this._localPosition;
        }, function(e) {
            this._localPosition = e, this._localUpdate = !0, this._onWorldTransform();
        }), a(0, n, "localRotation", function() {
            if (this._localQuaternionUpdate) {
                var e = this._localRotationEuler.elements;
                Ce.createFromYawPitchRoll(e[1] / t._angleToRandin, e[0] / t._angleToRandin, e[2] / t._angleToRandin, this._localRotation), 
                this._localQuaternionUpdate = !1;
            }
            return this._localRotation;
        }, function(e) {
            this._localRotation = e, this._locaEulerlUpdate = !0, this._localQuaternionUpdate = !1, 
            this._localUpdate = !0, this._onWorldTransform();
        }), a(0, n, "localScale", function() {
            return this._localScale;
        }, function(e) {
            this._localScale = e, this._localUpdate = !0, this._onWorldTransform();
        }), a(0, n, "localRotationEuler", function() {
            if (this._locaEulerlUpdate) {
                this._localRotation.getYawPitchRoll(t._tempVector3);
                var e = t._tempVector3.elements, n = this._localRotationEuler.elements;
                n[0] = e[1] * t._angleToRandin, n[1] = e[0] * t._angleToRandin, n[2] = e[2] * t._angleToRandin, 
                this._locaEulerlUpdate = !1;
            }
            return this._localRotationEuler;
        }, function(e) {
            this._localRotationEuler = e, this._locaEulerlUpdate = !1, this._localQuaternionUpdate = !0, 
            this._localUpdate = !0, this._onWorldTransform();
        }), i(t, [ "_tempVector3", function() {
            return this._tempVector3 = new dn();
        }, "_angleToRandin", function() {
            return this._angleToRandin = 180 / Math.PI;
        } ]), t;
    }(), Pt = (function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.component.Script3D", f);
        var i = t.prototype;
        i._checkProcessTriggers = function() {
            var e = laya.d3.component.Script3D.prototype;
            return this.onTriggerEnter !== e.onTriggerEnter || (this.onTriggerStay !== e.onTriggerStay || this.onTriggerExit !== e.onTriggerExit);
        }, i._checkProcessCollisions = function() {
            var e = laya.d3.component.Script3D.prototype;
            return this.onCollisionEnter !== e.onCollisionEnter || (this.onCollisionStay !== e.onCollisionStay || this.onCollisionExit !== e.onCollisionExit);
        }, i._onAwake = function() {
            this.onAwake(), this.onStart !== laya.d3.component.Script3D.prototype.onStart && n.startTimer.callLater(this, this.onStart);
        }, i._onEnable = function() {
            this.owner._scene._scriptPool.add(this);
            var e = laya.d3.component.Script3D.prototype;
            this.onKeyDown !== e.onKeyDown && n.stage.on("keydown", this, this.onKeyDown), this.onKeyPress !== e.onKeyPress && n.stage.on("keypress", this, this.onKeyUp), 
            this.onKeyUp !== e.onKeyUp && n.stage.on("keyup", this, this.onKeyUp);
        }, i._onDisable = function() {
            this.owner._scene._scriptPool.remove(this), this.owner.offAllCaller(this), n.stage.offAllCaller(this);
        }, i._isScript = function() {
            return !0;
        }, i._onAdded = function() {
            var e = this.owner, t = e._scripts;
            t || (e._scripts = t = []), t.push(this), e._needProcessCollisions || (e._needProcessCollisions = this._checkProcessCollisions()), 
            e._needProcessTriggers || (e._needProcessTriggers = this._checkProcessTriggers());
        }, i._onDestroy = function() {
            var e = this.owner._scripts;
            e.splice(e.indexOf(this), 1);
            var t = this.owner;
            t._needProcessTriggers = !1;
            for (var n = 0, i = e.length; n < i; n++) if (e[n]._checkProcessTriggers()) {
                t._needProcessTriggers = !0;
                break;
            }
            for (t._needProcessCollisions = !1, n = 0, i = e.length; n < i; n++) if (e[n]._checkProcessCollisions()) {
                t._needProcessCollisions = !0;
                break;
            }
            this.onDestroy();
        }, i.onAwake = function() {}, i.onEnable = function() {}, i.onStart = function() {}, 
        i.onTriggerEnter = function(e) {}, i.onTriggerStay = function(e) {}, i.onTriggerExit = function(e) {}, 
        i.onCollisionEnter = function(e) {}, i.onCollisionStay = function(e) {}, i.onCollisionExit = function(e) {}, 
        i.onMouseDown = function() {}, i.onMouseDrag = function() {}, i.onMouseClick = function() {}, 
        i.onMouseUp = function() {}, i.onMouseEnter = function() {}, i.onMouseOver = function() {}, 
        i.onMouseOut = function() {}, i.onKeyDown = function(e) {}, i.onKeyPress = function(e) {}, 
        i.onKeyUp = function(e) {}, i.onUpdate = function() {}, i.onLateUpdate = function() {}, 
        i.onPreRender = function() {}, i.onPostRender = function() {}, i.onDisable = function() {}, 
        i.onDestroy = function() {}, a(0, i, "isSingleton", function() {
            return !1;
        });
    }(), function(e) {
        function t(e, n) {
            this._restitution = 0, this._friction = .5, this._rollingFriction = 0, this._ccdMotionThreshold = 0, 
            this._ccdSweptSphereRadius = 0, this._colliderShape = null, this._transformFlag = 2147483647, 
            this._enableProcessCollisions = !0, this._inPhysicUpdateListIndex = -1, this.canScaleShape = !0, 
            t.__super.call(this), this._collisionGroup = 1, this._canCollideWith = fe.COLLISIONFILTERGROUP_ALLFILTER, 
            this._collisionGroup = e, this._canCollideWith = n, t._physicObjectsMap[this.id] = this;
        }
        r(t, "laya.d3.physics.PhysicsComponent", e);
        var o = t.prototype;
        return o._parse = function(e) {
            null != e.collisionGroup && (this.collisionGroup = e.collisionGroup), null != e.canCollideWith && (this.canCollideWith = e.canCollideWith), 
            null != e.ccdMotionThreshold && (this.ccdMotionThreshold = e.ccdMotionThreshold), 
            null != e.ccdSweptSphereRadius && (this.ccdSweptSphereRadius = e.ccdSweptSphereRadius);
        }, o._parseShape = function(e) {
            var t = e.length;
            if (1 === t) {
                var n = K._creatShape(e[0]);
                this.colliderShape = n;
            } else {
                for (var i = new jt(), r = 0; r < t; r++) n = K._creatShape(e[r]), i.addChildShape(n);
                this.colliderShape = i;
            }
        }, o._onScaleChange = function(e) {
            this._colliderShape._setScale(e);
        }, o._setTransformFlag = function(e, t) {
            t ? this._transformFlag |= e : this._transformFlag &= ~e;
        }, o._getTransformFlag = function(e) {
            return 0 != (this._transformFlag & e);
        }, o._addToSimulation = function() {}, o._removeFromSimulation = function() {}, 
        o._derivePhysicsTransformation = function(e) {
            this._innerDerivePhysicsTransformation(this._nativeColliderObject.getWorldTransform(), e);
        }, o._innerDerivePhysicsTransformation = function(e, n) {
            var i = this.owner._transform, r = i.rotation.elements;
            if (n || this._getTransformFlag(8)) {
                var a = this._colliderShape.localOffset, o = a.elements, s = i.position, l = s.elements, h = t._nativeVector30;
                if (0 !== o[0] || 0 !== o[1] || 0 !== o[2]) {
                    var c = t._tempVector30, u = c.elements;
                    t.physicVector3TransformQuat(a, r[0], r[1], r[2], r[3], c), dn.add(s, c, c), h.setValue(-u[0], u[1], u[2]);
                } else h.setValue(-l[0], l[1], l[2]);
                e.setOrigin(h), this._setTransformFlag(8, !1);
            }
            if (n || this._getTransformFlag(16)) {
                var _ = this._colliderShape.localRotation, d = _.elements, f = t._nativeQuaternion0;
                if (0 !== d[0] || 0 !== d[1] || 0 !== d[2] || 1 !== d[3]) {
                    var m = t._tempQuaternion0;
                    t.physicQuaternionMultiply(r[0], r[1], r[2], r[3], _, m);
                    var p = m.elements;
                    f.setValue(-p[0], p[1], p[2], -p[3]);
                } else f.setValue(-r[0], r[1], r[2], -r[3]);
                e.setRotation(f), this._setTransformFlag(16, !1);
            }
            (n || this._getTransformFlag(32)) && (this._onScaleChange(i.scale), this._setTransformFlag(32, !1));
        }, o._updateTransformComponent = function(e) {
            var n = this._colliderShape.localOffset, i = this._colliderShape.localRotation, r = n.elements, a = i.elements, o = this.owner._transform, s = o.position, l = o.rotation, h = s.elements, c = e.getOrigin(), u = e.getRotation(), _ = -u.x(), d = u.y(), f = u.z(), m = -u.w();
            if (0 !== r[0] || 0 !== r[1] || 0 !== r[2]) {
                var p = t._tempVector30;
                t.physicVector3TransformQuat(n, _, d, f, m, p);
                var T = p.elements;
                h[0] = -c.x() - T[0], h[1] = c.y() - T[1], h[2] = c.z() - T[2];
            } else h[0] = -c.x(), h[1] = c.y(), h[2] = c.z();
            if (o.position = s, 0 !== a[0] || 0 !== a[1] || 0 !== a[2] || 1 !== a[3]) {
                var E = t._tempQuaternion0;
                i.invert(E), t.physicQuaternionMultiply(_, d, f, m, E, l);
            } else {
                var v = l.elements;
                v[0] = _, v[1] = d, v[2] = f, v[3] = m;
            }
            o.rotation = l;
        }, o._onEnable = function() {
            this._simulation = this.owner._scene.physicsSimulation, this._nativeColliderObject.setContactProcessingThreshold(1e30), 
            this._colliderShape && this._enabled && (this._derivePhysicsTransformation(!0), 
            this._addToSimulation());
        }, o._onDisable = function() {
            this._colliderShape && this._enabled && this._removeFromSimulation(), this._simulation = null;
        }, o._onShapeChange = function(e) {
            var t = this._nativeColliderObject, n = t.getCollisionFlags();
            e.needsCustomCollisionCallback ? 0 == (8 & n) && t.setCollisionFlags(8 | n) : (8 & n) > 0 && t.setCollisionFlags(8 ^ n);
        }, o._onAdded = function() {
            this.enabled = this._enabled, this.restitution = this._restitution, this.friction = this._friction, 
            this.rollingFriction = this._rollingFriction, this.ccdMotionThreshold = this._ccdMotionThreshold, 
            this.ccdSweptSphereRadius = this._ccdSweptSphereRadius, this.owner.transform.on("transformchanged", this, this._onTransformChanged);
        }, o._onDestroy = function() {
            var n = Dt._physics3D;
            delete t._physicObjectsMap[this.id], n.destroy(this._nativeColliderObject), this._colliderShape.destroy(), 
            e.prototype._onDestroy.call(this), this._nativeColliderObject = null, this._colliderShape = null, 
            this._simulation = null, this.owner.transform.off("transformchanged", this, this._onTransformChanged);
        }, o._onTransformChanged = function(e) {
            t._addUpdateList && (e &= 56) && (this._transformFlag |= e, this._simulation && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
        }, o._cloneTo = function(e) {
            var t = e;
            t.restitution = this._restitution, t.friction = this._friction, t.rollingFriction = this._rollingFriction, 
            t.ccdMotionThreshold = this._ccdMotionThreshold, t.ccdSweptSphereRadius = this._ccdSweptSphereRadius, 
            t.collisionGroup = this._collisionGroup, t.canCollideWith = this._canCollideWith, 
            t.canScaleShape = this.canScaleShape, this._colliderShape && (t.colliderShape = this._colliderShape.clone());
        }, a(0, o, "isActive", function() {
            return !!this._nativeColliderObject && this._nativeColliderObject.isActive();
        }), a(0, o, "restitution", function() {
            return this._restitution;
        }, function(e) {
            this._restitution = e, this._nativeColliderObject && this._nativeColliderObject.setRestitution(e);
        }), a(0, o, "friction", function() {
            return this._friction;
        }, function(e) {
            this._friction = e, this._nativeColliderObject && this._nativeColliderObject.setFriction(e);
        }), a(0, o, "rollingFriction", function() {
            return this._nativeColliderObject.getRollingFriction();
        }, function(e) {
            this._rollingFriction = e, this._nativeColliderObject && this._nativeColliderObject.setRollingFriction(e);
        }), a(0, o, "ccdMotionThreshold", function() {
            return this._ccdMotionThreshold;
        }, function(e) {
            this._ccdMotionThreshold = e, this._nativeColliderObject && this._nativeColliderObject.setCcdMotionThreshold(e);
        }), a(0, o, "ccdSweptSphereRadius", function() {
            return this._ccdSweptSphereRadius;
        }, function(e) {
            this._ccdSweptSphereRadius = e, this._nativeColliderObject && this._nativeColliderObject.setCcdSweptSphereRadius(e);
        }), a(0, o, "collisionGroup", function() {
            return this._collisionGroup;
        }, function(e) {
            this._collisionGroup !== e && (this._collisionGroup = e, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
            this._addToSimulation()));
        }), a(0, o, "simulation", function() {
            return this._simulation;
        }), a(0, o, "colliderShape", function() {
            return this._colliderShape;
        }, function(e) {
            var t = this._colliderShape;
            if (t && (t._attatched = !1, t._attatchedCollisionObject = null), this._colliderShape = e, 
            e) {
                if (e._attatched) throw "PhysicsComponent: this shape has attatched to other entity.";
                if (e._attatched = !0, e._attatchedCollisionObject = this, this._nativeColliderObject) {
                    this._nativeColliderObject.setCollisionShape(e._nativeShape);
                    var n = this._simulation && this._enabled;
                    n && t && this._removeFromSimulation(), this._onShapeChange(e), n && (this._derivePhysicsTransformation(!0), 
                    this._addToSimulation());
                }
            } else this._simulation && this._enabled && t && this._removeFromSimulation();
        }), a(0, o, "enabled", e.prototype._$get_enabled, function(e) {
            this._simulation && this._colliderShape && (e ? (this._derivePhysicsTransformation(!0), 
            this._addToSimulation()) : this._removeFromSimulation()), n.superSet(f, this, "enabled", e);
        }), a(0, o, "canCollideWith", function() {
            return this._canCollideWith;
        }, function(e) {
            this._canCollideWith !== e && (this._canCollideWith = e, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
            this._addToSimulation()));
        }), t._createAffineTransformationArray = function(e, t, n, i, r, a, o, s, l) {
            var h = i + i, c = r + r, u = a + a, _ = i * h, d = i * c, f = i * u, m = r * c, p = r * u, T = a * u, E = o * h, v = o * c, g = o * u, S = s[0], R = s[1], A = s[2];
            l[0] = (1 - (m + T)) * S, l[1] = (d + g) * S, l[2] = (f - v) * S, l[3] = 0, l[4] = (d - g) * R, 
            l[5] = (1 - (_ + T)) * R, l[6] = (p + E) * R, l[7] = 0, l[8] = (f + v) * A, l[9] = (p - E) * A, 
            l[10] = (1 - (_ + m)) * A, l[11] = 0, l[12] = e, l[13] = t, l[14] = n, l[15] = 1;
        }, t.physicVector3TransformQuat = function(e, t, n, i, r, a) {
            var o = a.elements, s = e.elements, l = s[0], h = s[1], c = s[2], u = r * l + n * c - i * h, _ = r * h + i * l - t * c, d = r * c + t * h - n * l, f = -t * l - n * h - i * c;
            o[0] = u * r + f * -t + _ * -i - d * -n, o[1] = _ * r + f * -n + d * -t - u * -i, 
            o[2] = d * r + f * -i + u * -n - _ * -t;
        }, t.physicQuaternionMultiply = function(e, t, n, i, r, a) {
            var o = r.elements, s = a.elements, l = o[0], h = o[1], c = o[2], u = o[3], _ = t * c - n * h, d = n * l - e * c, f = e * h - t * l, m = e * l + t * h + n * c;
            s[0] = e * u + l * i + _, s[1] = t * u + h * i + d, s[2] = n * u + c * i + f, s[3] = i * u - m;
        }, t.ACTIVATIONSTATE_ACTIVE_TAG = 1, t.ACTIVATIONSTATE_ISLAND_SLEEPING = 2, t.ACTIVATIONSTATE_WANTS_DEACTIVATION = 3, 
        t.ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4, t.ACTIVATIONSTATE_DISABLE_SIMULATION = 5, 
        t.COLLISIONFLAGS_STATIC_OBJECT = 1, t.COLLISIONFLAGS_KINEMATIC_OBJECT = 2, t.COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4, 
        t.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8, t.COLLISIONFLAGS_CHARACTER_OBJECT = 16, 
        t.COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32, t.COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64, 
        t._physicObjectsMap = {}, t._addUpdateList = !0, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new Ce();
        }, "_tempQuaternion1", function() {
            return this._tempQuaternion1 = new Ce();
        }, "_tempMatrix4x40", function() {
            return this._tempMatrix4x40 = new ut();
        }, "_nativeVector30", function() {
            return this._nativeVector30 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeQuaternion0", function() {
            return this._nativeQuaternion0 = new Dt._physics3D.btQuaternion(0, 0, 0, 1);
        } ]), t;
    }(f)), wt = function(e) {
        function t() {
            this._linkAvatarSpritesData = {}, this._keyframeNodeOwners = [], this._linkAvatarSprites = [], 
            this._renderableSprites = [], this.cullingMode = 2, t.__super.call(this), this._controllerLayers = [], 
            this._linkSprites = {}, this._speed = 1, this._keyframeNodeOwnerMap = {}, this._updateMark = 0;
        }
        r(t, "laya.d3.component.Animator", e);
        var n = t.prototype;
        return n._linkToSprites = function(e) {
            for (var t in e) {
                for (var n = this.owner, i = e[t], r = 0, a = i.length; r < a; r++) {
                    var o = i[r];
                    if ("" === o) break;
                    if (!(n = n.getChildByName(o))) break;
                }
                n && this.linkSprite3DToAvatarNode(t, n);
            }
        }, n._addKeyframeNodeOwner = function(e, t, n) {
            var i = t._indexInList, r = t.fullPath, a = this._keyframeNodeOwnerMap[r];
            if (a) a.referenceCount++, e[i] = a; else {
                for (var s = n, l = 0, h = t.propertyCount; l < h && (s = s[t.getPropertyByIndex(l)]); l++) ;
                (a = this._keyframeNodeOwnerMap[r] = new ve()).fullPath = r, a.indexInList = this._keyframeNodeOwners.length, 
                a.referenceCount = 1, a.propertyOwner = n;
                var c = t.propertyCount, u = o(c);
                for (l = 0; l < c; l++) u[l] = t.getPropertyByIndex(l);
                a.property = u, a.type = t.type, s && (0 === t.type ? a.defaultValue = s : a.defaultValue = s.elements.slice()), 
                this._keyframeNodeOwners.push(a), e[i] = a;
            }
        }, n._removeKeyframeNodeOwner = function(e, t) {
            var n = t.fullPath, i = this._keyframeNodeOwnerMap[n];
            i && (i.referenceCount--, 0 === i.referenceCount && (delete this._keyframeNodeOwnerMap[n], 
            this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(i), 1)), e[t._indexInList] = null);
        }, n._getOwnersByClip = function(e) {
            var t = e._clip._nodes, n = t.count, i = e._nodeOwners;
            i.length = n;
            for (var r = 0; r < n; r++) {
                for (var a = t.getNodeByIndex(r), o = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name] : this.owner, s = 0, l = a.ownerPathCount; s < l; s++) {
                    var h = a.getOwnerPathByIndex(s);
                    if ("" === h) break;
                    if (!(o = o.getChildByName(h))) break;
                }
                if (o) {
                    var c = a.propertyOwner;
                    c && (o = o[c]), o && this._addKeyframeNodeOwner(i, a, o);
                }
            }
        }, n._getOwnersByClipAsync = function(e) {
            e._clip;
            this._getOwnersByClip(e);
        }, n._getAvatarOwnersAndInitDatasAsync = function() {
            for (var e = 0, t = this._controllerLayers.length; e < t; e++) for (var n = this._controllerLayers[e]._states, i = 0, r = n.length; i < r; i++) this._getOwnersByClipAsync(n[i]);
            this._avatar._cloneDatasToAnimator(this);
            for (var a in this._linkAvatarSpritesData) {
                var o = this._linkAvatarSpritesData[a];
                if (o) for (var s = 0, l = o.length; s < l; s++) this._isLinkSpriteToAnimationNode(o[s], a, !0);
            }
        }, n._eventScript = function(e, t, n, i, r) {
            for (var a = t._clip._events, o = n._playEventIndex, s = a.length; o < s; o++) {
                var l = a[o], h = l.time;
                if (!(i <= h && h < r)) break;
                for (var c = 0, u = e.length; c < u; c++) {
                    var _ = e[c], d = _[l.eventName];
                    d && d.apply(_, l.params);
                }
            }
            n._playEventIndex = o;
        }, n._updatePlayer = function(e, t, n, i) {
            var r = e._clip._duration * (e.clipEnd - e.clipStart), a = t._elapsedTime, o = a + n;
            t._lastElapsedTime = a, t._elapsedTime = o;
            var s = o / r;
            t._normalizedTime = s;
            var l = s % 1;
            t._normalizedPlayTime = l < 0 ? l + 1 : l, t._duration = r;
            var h = e._scripts;
            if (!i && o >= r) {
                if (t._finish = !0, t._elapsedTime = r, t._normalizedPlayTime = 1, h) for (var c = 0, u = h.length; c < u; c++) h[c].onStateExit();
            } else {
                if (r > 0) {
                    if (o >= r) do {
                        o -= r, t._playEventIndex = 0;
                    } while (o >= r);
                } else t._resetPlayState(0);
                if (h) for (c = 0, u = h.length; c < u; c++) h[c].onStateUpdate();
            }
        }, n._updateEventScript = function(e, t, n) {
            var i = this.owner._scripts;
            if (i) {
                var r = e._clip._duration, a = t._lastElapsedTime, o = t._elapsedTime, s = Math.floor(a / r), l = a % r, h = o % r, c = Math.floor(o / r) - s;
                if (n) if (c > 0) {
                    this._eventScript(i, e, t, l, r);
                    for (var u = 0, _ = c - 1; u < _; u++) this._eventScript(i, e, t, 0, r);
                    this._eventScript(i, e, t, 0, h);
                } else this._eventScript(i, e, t, l, h); else c > 0 ? this._eventScript(i, e, t, l, r) : this._eventScript(i, e, t, l, h);
            }
        }, n._updateClipDatas = function(e, t, n, i) {
            var r = e._clip, a = r._duration, o = e.clipStart * a + n._normalizedPlayTime * n._duration, s = e._currentFrameIndices, l = n._elapsedTime > n._lastElapsedTime;
            r._evaluateClipDatasRealTime(r._nodes, o, s, t, l);
        }, n._applyFloat = function(e, t, n, i, r, a, o) {
            if (n.updateMark === this._updateMark) if (i) e[t] += r * o; else {
                var s = e[t];
                e[t] = s + r * (o - s);
            } else if (a) e[t] = i ? n.defaultValue + o : o; else if (i) e[t] = n.defaultValue + r * o; else {
                var l = n.defaultValue;
                e[t] = l + r * (o - l);
            }
        }, n._applyPositionAndRotationEuler = function(e, t, n, i, r, a) {
            if (e.updateMark === this._updateMark) if (t) a[0] += n * r[0], a[1] += n * r[1], 
            a[2] += n * r[2]; else {
                var o = a[0], s = a[1], l = a[2];
                a[0] = o + n * (r[0] - o), a[1] = s + n * (r[1] - s), a[2] = l + n * (r[2] - l);
            } else if (i) if (t) {
                var h = e.defaultValue;
                a[0] = h[0] + r[0], a[1] = h[1] + r[1], a[2] = h[2] + r[2];
            } else a[0] = r[0], a[1] = r[1], a[2] = r[2]; else if (h = e.defaultValue, t) a[0] = h[0] + n * r[0], 
            a[1] = h[1] + n * r[1], a[2] = h[2] + n * r[2]; else {
                var c = h[0], u = h[1], _ = h[2];
                a[0] = c + n * (r[0] - c), a[1] = u + n * (r[1] - u), a[2] = _ + n * (r[2] - _);
            }
        }, n._applyRotation = function(e, n, i, r, a, o) {
            if (e.updateMark === this._updateMark) if (n) {
                var s = t._tempQuaternionArray1;
                ke.quaternionWeight(a, i, s), ke.quaterionNormalize(s, s), ke.quaternionMultiply(o, s, o);
            } else Ce._lerpArray(o, a, i, o); else if (r) if (n) {
                var l = e.defaultValue;
                ke.quaternionMultiply(l, a, o);
            } else o[0] = a[0], o[1] = a[1], o[2] = a[2], o[3] = a[3]; else l = e.defaultValue, 
            n ? (s = t._tempQuaternionArray1, ke.quaternionWeight(a, i, s), ke.quaterionNormalize(s, s), 
            ke.quaternionMultiply(l, s, o)) : Ce._lerpArray(l, a, i, o);
        }, n._applyScale = function(e, n, i, r, a, o) {
            if (e.updateMark === this._updateMark) if (n) {
                var s = t._tempVector3Array1;
                ke.scaleWeight(a, i, s), o[0] = o[0] * s[0], o[1] = o[1] * s[1], o[2] = o[2] * s[2];
            } else ke.scaleBlend(o, a, i, o); else if (r) if (n) {
                var l = e.defaultValue;
                o[0] = l[0] * a[0], o[1] = l[1] * a[1], o[2] = l[2] * a[2];
            } else o[0] = a[0], o[1] = a[1], o[2] = a[2]; else l = e.defaultValue, n ? (s = t._tempVector3Array1, 
            ke.scaleWeight(a, i, s), o[0] = l[0] * s[0], o[1] = l[1] * s[1], o[2] = l[2] * s[2]) : ke.scaleBlend(l, a, i, o);
        }, n._applyCrossData = function(e, n, i, r, a, o, s) {
            var l = e.propertyOwner;
            if (l) {
                switch (e.type) {
                  case 0:
                    for (var h = e.property, c = h.length - 1, u = 0; u < c && (l = l[h[u]]); u++) ;
                    var _ = a + s * (o - a);
                    this._applyFloat(l, h[c], e, n, i, r, _);
                    break;

                  case 1:
                    var d = l.localPosition, f = t._tempVector3Array0, m = a[0], p = a[1], T = a[2];
                    f[0] = m + s * (o[0] - m), f[1] = p + s * (o[1] - p), f[2] = T + s * (o[2] - T), 
                    this._applyPositionAndRotationEuler(e, n, i, r, f, d.elements), l.localPosition = d;
                    break;

                  case 2:
                    var E = l.localRotation, v = t._tempQuaternionArray0;
                    Ce._lerpArray(a, o, s, v), this._applyRotation(e, n, i, r, v, E.elements), l.localRotation = E;
                    break;

                  case 3:
                    var g = l.localScale, S = t._tempVector3Array0;
                    ke.scaleBlend(a, o, s, S), this._applyScale(e, n, i, r, S, g.elements), l.localScale = g;
                    break;

                  case 4:
                    var R = l.localRotationEuler, A = t._tempVector3Array0;
                    m = a[0], p = a[1], T = a[2], A[0] = m + s * (o[0] - m), A[1] = p + s * (o[1] - p), 
                    A[2] = T + s * (o[2] - T), this._applyPositionAndRotationEuler(e, n, i, r, A, R.elements), 
                    l.localRotationEuler = R;
                }
                e.updateMark = this._updateMark;
            }
        }, n._setClipDatasToNode = function(e, t, n, i) {
            for (var r = e._clip._nodes, a = e._nodeOwners, o = 0, s = r.count; o < s; o++) {
                var l = a[o];
                if (l) {
                    var h = l.propertyOwner;
                    if (h) {
                        switch (l.type) {
                          case 0:
                            for (var c = l.property, u = c.length - 1, _ = 0; _ < u && (h = h[c[_]]); _++) ;
                            this._applyFloat(h, c[u], l, t, n, i, r.getNodeByIndex(o).data);
                            break;

                          case 1:
                            var d = h.localPosition;
                            this._applyPositionAndRotationEuler(l, t, n, i, r.getNodeByIndex(o).data, d.elements), 
                            h.localPosition = d;
                            break;

                          case 2:
                            var f = h.localRotation;
                            this._applyRotation(l, t, n, i, r.getNodeByIndex(o).data, f.elements), h.localRotation = f;
                            break;

                          case 3:
                            var m = h.localScale;
                            this._applyScale(l, t, n, i, r.getNodeByIndex(o).data, m.elements), h.localScale = m;
                            break;

                          case 4:
                            var p = h.localRotationEuler;
                            this._applyPositionAndRotationEuler(l, t, n, i, r.getNodeByIndex(o).data, p.elements), 
                            h.localRotationEuler = p;
                        }
                        l.updateMark = this._updateMark;
                    }
                }
            }
        }, n._setCrossClipDatasToNode = function(e, t, n, i, r) {
            for (var a = e._crossNodesOwners, o = e._crossNodesOwnersCount, s = e.blendingMode !== Ae.BLENDINGMODE_OVERRIDE, l = e.defaultWeight, h = e._destCrossClipNodeIndices, c = n._clip._nodes, u = n._nodeOwners, _ = e._srcCrossClipNodeIndices, d = t._nodeOwners, f = t._clip._nodes, m = 0; m < o; m++) {
                var p = a[m];
                if (p) {
                    var T = _[m], E = h[m], v = -1 !== T ? f.getNodeByIndex(T).data : u[E].defaultValue, g = -1 !== E ? c.getNodeByIndex(E).data : d[T].defaultValue;
                    this._applyCrossData(p, s, l, r, v, g, i);
                }
            }
        }, n._setFixedCrossClipDatasToNode = function(e, t, n, i) {
            for (var r = e._crossNodesOwners, a = e._crossNodesOwnersCount, o = e.blendingMode !== Ae.BLENDINGMODE_OVERRIDE, s = e.defaultWeight, l = e._destCrossClipNodeIndices, h = t._clip._nodes, c = 0; c < a; c++) {
                var u = r[c];
                if (u) {
                    var _ = l[c], d = u.crossFixedValue, f = -1 !== _ ? h.getNodeByIndex(_).data : u.defaultValue;
                    this._applyCrossData(u, o, s, i, d, f, n);
                }
            }
        }, n._revertDefaultKeyframeNodes = function(e) {
            for (var t = e._nodeOwners, n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                if (r) {
                    var a = r.propertyOwner;
                    if (a) switch (r.type) {
                      case 0:
                        for (var o = r.property, s = o.length - 1, l = 0; l < s && (a = a[o[l]]); l++) ;
                        a[o[s]] = r.defaultValue;
                        break;

                      case 1:
                        var h = a.localPosition, c = h.elements, u = r.defaultValue;
                        c[0] = u[0], c[1] = u[1], c[2] = u[2], a.localPosition = h;
                        break;

                      case 2:
                        var _ = a.localRotation, d = _.elements;
                        u = r.defaultValue, d[0] = u[0], d[1] = u[1], d[2] = u[2], d[3] = u[3], a.localRotation = _;
                        break;

                      case 3:
                        var f = a.localScale, m = f.elements;
                        u = r.defaultValue, m[0] = u[0], m[1] = u[1], m[2] = u[2], a.localScale = f;
                        break;

                      case 4:
                        var p = a.localRotationEuler, T = p.elements;
                        u = r.defaultValue, T[0] = u[0], T[1] = u[1], T[2] = u[2], a.localRotationEuler = p;
                        break;

                      default:
                        throw "Animator:unknown type.";
                    }
                }
            }
        }, n._removeClip = function(e, t, n, i) {
            var r = i._clip;
            r._removeReference(), e.splice(n, 1), delete t[i.name];
            for (var a = e[n], o = r._nodes, s = a._nodeOwners, l = 0, h = o.count; l < h; l++) this._removeKeyframeNodeOwner(s, o.getNodeByIndex(l));
        }, n._isLinkSpriteToAnimationNodeData = function(e, t, n) {
            var i = this._linkAvatarSpritesData[t];
            n ? (i || (this._linkAvatarSpritesData[t] = i = []), i.push(e)) : i.splice(e, 1);
        }, n._isLinkSpriteToAnimationNode = function(e, t, n) {
            if (this._avatar) {
                var i = this._avatarNodeMap[t];
                if (i) if (n) {
                    e._transform._dummy = i.transform, this._linkAvatarSprites.push(e);
                    var r = i.transform, a = e.transform;
                    if (!a.owner.isStatic && r) {
                        var o = a.worldMatrix, s = this.owner._transform._parent;
                        if (s) ke.matrix4x4MultiplyMFM(s.worldMatrix, r.getWorldMatrix(), o); else for (var l = o.elements, h = r.getWorldMatrix(), c = 0; c < 16; c++) l[c] = h[c];
                        a.worldMatrix = o;
                    }
                } else e._transform._dummy = null, this._linkAvatarSprites.splice(this._linkAvatarSprites.indexOf(e), 1);
            }
        }, n._onAdded = function() {
            var e = this.owner._parent;
            this.owner._setHierarchyAnimator(this, e ? e._hierarchyAnimator : null), this.owner._changeAnimatorToLinkSprite3DNoAvatar(this, !0, []);
        }, n._onDestroy = function() {
            var e = this.owner._parent;
            this.owner._clearHierarchyAnimator(this, e ? e._hierarchyAnimator : null), this.owner._changeAnimatorToLinkSprite3DNoAvatar(this, !1, []);
        }, n._onEnableInScene = function() {
            this.owner._scene._animatorPool.add(this);
        }, n._onDisableInScene = function() {
            this.owner._scene._animatorPool.remove(this);
        }, n._onEnable = function() {
            for (var e = 0, t = this._controllerLayers.length; e < t; e++) if (this._controllerLayers[e].playOnWake) {
                this.getDefaultState(e) && this.play(null, e, 0);
            }
        }, n._handleSpriteOwnersBySprite = function(e, t, n) {
            for (var i = 0, r = this._controllerLayers.length; i < r; i++) for (var a = this._controllerLayers[i]._states, o = 0, s = a.length; o < s; o++) {
                var l = a[o], h = l._clip, c = t.join("/"), u = h._nodesMap[c];
                if (u) for (var _ = l._nodeOwners, d = 0, f = u.length; d < f; d++) e ? this._addKeyframeNodeOwner(_, u[d], n) : this._removeKeyframeNodeOwner(_, u[d]);
            }
        }, n._updateAvatarNodesToSprite = function() {
            for (var e = 0, t = this._linkAvatarSprites.length; e < t; e++) {
                var n = this._linkAvatarSprites[e], i = n.transform._dummy, r = n.transform;
                if (!r.owner.isStatic && i) {
                    var a = r.worldMatrix, o = this.owner._transform._parent;
                    if (o) ke.matrix4x4MultiplyMFM(o.worldMatrix, i.getWorldMatrix(), a); else for (var s = a.elements, l = i.getWorldMatrix(), h = 0; h < 16; h++) s[h] = l[h];
                    r.worldMatrix = a;
                }
            }
        }, n._parse = function(e) {
            var t = e.avatar;
            if (t) {
                this.avatar = g.getRes(t.path);
                var n = t.linkSprites;
                this._linkSprites = n, this._linkToSprites(n);
            }
            e.clipPaths;
            for (var i = e.playOnWake, r = e.layers, a = 0; a < r.length; a++) {
                var o = r[a], s = new Ae(o.name);
                s.defaultWeight = 0 === a ? 1 : o.weight;
                var l = o.blendingMode;
                l && (s.blendingMode = l), this.addControllerLayer(s);
                for (var h = o.states, c = 0, u = h.length; c < u; c++) {
                    var _ = h[c], d = _.clipPath;
                    if (d) {
                        var f, m = _.name;
                        if (f = g.getRes(d)) {
                            var p = new ee();
                            p.name = m, p.clip = f, f._addReference(), this.addState(p, a), 0 === c && this.setDefaultClip(m, a);
                        }
                    }
                }
                void 0 !== i && (s.playOnWake = i);
            }
            var T = e.cullingMode;
            void 0 !== T && (this.cullingMode = T);
        }, n._update = function() {
            if (0 !== this._speed) {
                var e = !1;
                if (2 === this.cullingMode) {
                    e = !1;
                    for (var t = 0, n = this._renderableSprites.length; t < n; t++) if (this._renderableSprites[t]._render._visible) {
                        e = !0;
                        break;
                    }
                } else e = !0;
                this._updateMark++;
                var i = this.owner._scene.timer, r = i._delta / 1e3, a = i.scale;
                for (t = 0, n = this._controllerLayers.length; t < n; t++) {
                    var o = this._controllerLayers[t], s = o._playStateInfo, l = o._crossPlayStateInfo;
                    switch (d = o.blendingMode !== Ae.BLENDINGMODE_OVERRIDE, o._playType) {
                      case 0:
                        var h = o._currentPlayState, c = h._clip, u = this._speed * h.speed, _ = s._finish;
                        if (_ || this._updatePlayer(h, s, r * u, c.islooping), e) {
                            var d = o.blendingMode !== Ae.BLENDINGMODE_OVERRIDE;
                            this._updateClipDatas(h, d, s, a * u), this._setClipDatasToNode(h, d, o.defaultWeight, 0 === t), 
                            _ || this._updateEventScript(h, s, c.islooping);
                        }
                        break;

                      case 1:
                        c = (h = o._currentPlayState)._clip;
                        var f = o._crossPlayState, m = f._clip, p = o._crossDuration, T = l._startPlayTime, E = m._duration - T, v = p > E ? E / p : 1, g = this._speed * f.speed;
                        this._updatePlayer(f, l, r * v * g, m.islooping);
                        var S = (l._elapsedTime - T) / v / p;
                        S >= 1 ? e && (this._updateClipDatas(f, d, l, a * g), this._setClipDatasToNode(f, d, o.defaultWeight, 0 === t), 
                        o._playType = 0, o._currentPlayState = f, l._cloneTo(s)) : (s._finish || (u = this._speed * h.speed, 
                        this._updatePlayer(h, s, r * u, c.islooping), e && this._updateClipDatas(h, d, s, a * u)), 
                        e && (this._updateClipDatas(f, d, l, a * v * g), this._setCrossClipDatasToNode(o, h, f, S, 0 === t))), 
                        e && (this._updateEventScript(h, s, !1), this._updateEventScript(f, l, m.islooping));
                        break;

                      case 2:
                        m = (f = o._crossPlayState)._clip, p = o._crossDuration, T = l._startPlayTime, v = p > (E = m._duration - T) ? E / p : 1, 
                        g = this._speed * f.speed, this._updatePlayer(f, l, r * v * g, m.islooping), e && ((S = (l._elapsedTime - T) / v / p) >= 1 ? (this._updateClipDatas(f, d, l, a * g), 
                        this._setClipDatasToNode(f, d, 1, 0 === t), o._playType = 0, o._currentPlayState = f, 
                        l._cloneTo(s)) : (this._updateClipDatas(f, d, l, a * v * g), this._setFixedCrossClipDatasToNode(o, f, S, 0 === t)), 
                        this._updateEventScript(f, l, m.islooping));
                    }
                }
                e && this._avatar && (D.isConchApp && this._updateAnimationNodeWorldMatix(this._animationNodeLocalPositions, this._animationNodeLocalRotations, this._animationNodeLocalScales, this._animationNodeWorldMatrixs, this._animationNodeParentIndices), 
                this._updateAvatarNodesToSprite());
            }
        }, n._cloneTo = function(e) {
            var t = e;
            t.avatar = this.avatar;
            for (var n = 0, i = this._controllerLayers.length; n < i; n++) {
                var r = this._controllerLayers[n];
                t.addControllerLayer(r.clone());
                for (var a = r._states, o = 0, s = a.length; o < s; o++) {
                    var l = a[o];
                    t.addState(l.clone(), n), 0 == o && t.setDefaultClip(l.name, n);
                }
            }
            t._linkSprites = this._linkSprites, t._linkToSprites(this._linkSprites);
        }, n.getDefaultState = function(e) {
            void 0 === e && (e = 0);
            return this._controllerLayers[e]._defaultState;
        }, n.setDefaultClip = function(e, t) {
            void 0 === t && (t = 0);
            var n = this._controllerLayers[t];
            n._defaultState = n._statesMap[e];
        }, n.addState = function(e, t) {
            void 0 === t && (t = 0);
            var n = e.name, i = this._controllerLayers[t], r = i._statesMap, a = i._states;
            if (r[n]) throw "Animator:this stat's name has exist.";
            r[n] = e, a.push(e), e._clip._addReference(), this._avatar, this._getOwnersByClipAsync(e);
        }, n.removeState = function(e, t) {
            void 0 === t && (t = 0);
            for (var n = this._controllerLayers[t], i = n._states, r = n._statesMap, a = -1, o = 0, s = i.length; o < s; o++) if (i[o] === e) {
                a = o;
                break;
            }
            -1 !== a && this._removeClip(i, r, a, e);
        }, n.addControllerLayer = function(e) {
            this._controllerLayers.push(e);
        }, n.getControllerLayer = function(e) {
            return void 0 === e && (e = 0), this._controllerLayers[e];
        }, n.getCurrentAnimatorPlayState = function(e) {
            return void 0 === e && (e = 0), this._controllerLayers[e]._playStateInfo;
        }, n.play = function(e, t, n) {
            void 0 === t && (t = 0), void 0 === n && (n = Number.NEGATIVE_INFINITY);
            var i = this._controllerLayers[t], r = i._defaultState;
            if (!e && !r) throw new Error("Animator:must have  default clip value,please set clip property.");
            var a = i._currentPlayState, o = i._playStateInfo, s = e ? i._statesMap[e] : r, l = s._clip._duration;
            a !== s ? (n !== Number.NEGATIVE_INFINITY ? o._resetPlayState(l * n) : o._resetPlayState(0), 
            null !== a && a !== s && this._revertDefaultKeyframeNodes(a), i._playType = 0, i._currentPlayState = s) : n !== Number.NEGATIVE_INFINITY && (o._resetPlayState(l * n), 
            i._playType = 0);
            var h = s._scripts;
            if (h) for (var c = 0, u = h.length; c < u; c++) h[c].onStateEnter();
        }, n.crossFade = function(e, t, n, i) {
            void 0 === n && (n = 0), void 0 === i && (i = Number.NEGATIVE_INFINITY);
            var r = this._controllerLayers[n], a = r._statesMap[e];
            if (a) {
                var o = r._playType;
                if (-1 === o) return void this.play(e, n, i);
                var s = r._crossPlayStateInfo, l = r._crossNodesOwners, h = r._crossNodesOwnersIndicesMap, c = r._currentPlayState, u = a._nodeOwners, _ = r._destCrossClipNodeIndices, d = a._clip, f = d._nodes, m = d._nodesDic;
                switch (o) {
                  case 0:
                    var p = c._nodeOwners, T = r._srcCrossClipNodeIndices, E = c._clip, v = E._nodes, g = E._nodesDic;
                    r._playType = 1;
                    for (var S = ++r._crossMark, R = r._crossNodesOwnersCount = 0, A = 0, I = v.count; A < I; A++) {
                        var D = v.getNodeByIndex(A), y = D._indexInList, M = p[y];
                        if (M) {
                            var C = D.fullPath;
                            T[R] = y;
                            var x = m[C];
                            _[R] = x ? x._indexInList : -1, h[C] = S, l[R] = M, R++;
                        }
                    }
                    for (A = 0, I = f.count; A < I; A++) {
                        var O = (x = f.getNodeByIndex(A))._indexInList, L = u[O];
                        if (L) {
                            var N = x.fullPath;
                            g[N] || (T[R] = -1, _[R] = O, h[N] = S, l[R] = L, R++);
                        }
                    }
                    break;

                  case 1:
                  case 2:
                    for (r._playType = 2, A = 0, I = l.length; A < I; A++) {
                        var V = l[A];
                        V.saveCrossFixedValue(), x = m[V.fullPath], _[A] = x ? x._indexInList : -1;
                    }
                    for (R = r._crossNodesOwnersCount, S = r._crossMark, A = 0, I = f.count; A < I; A++) (L = u[O = (x = f.getNodeByIndex(A))._indexInList]) && h[N = x.fullPath] !== S && (_[R] = O, 
                    h[N] = S, V = u[O], l[R] = V, V.saveCrossFixedValue(), R++);
                }
                r._crossNodesOwnersCount = R, r._crossPlayState = a, r._crossDuration = c._clip._duration * t, 
                i !== Number.NEGATIVE_INFINITY ? s._resetPlayState(d._duration * i) : s._resetPlayState(0);
            }
            var P = a._scripts;
            if (P) for (A = 0, I = P.length; A < I; A++) P[A].onStateEnter();
        }, n.linkSprite3DToAvatarNode = function(e, t) {
            if (t._hierarchyAnimator === this) return this._isLinkSpriteToAnimationNodeData(t, e, !0), 
            this._isLinkSpriteToAnimationNode(t, e, !0), !0;
            throw "Animator:sprite3D must belong to this Animator";
        }, n.unLinkSprite3DToAvatarNode = function(e) {
            if (e._hierarchyAnimator === this) {
                var t = e.transform._dummy;
                if (t) {
                    var n = t._owner.name;
                    return this._isLinkSpriteToAnimationNodeData(e, n, !1), this._isLinkSpriteToAnimationNode(e, n, !1), 
                    !0;
                }
                return !1;
            }
            throw "Animator:sprite3D must belong to this Animator";
        }, n.destroy = function() {
            e.prototype.destroy.call(this);
            for (var t = 0, n = this._controllerLayers.length; t < n; t++) for (var i = this._controllerLayers[t]._states, r = 0, a = i.length; r < a; r++) i[r]._clip._removeReference();
        }, n._updateAnimationNodeWorldMatix = function(e, t, n, i, r) {
            E.instance.updateAnimationNodeWorldMatix(e, t, n, r, i);
        }, a(0, n, "avatar", function() {
            return this._avatar;
        }, function(e) {
            if (this._avatar !== e) if (this._avatar = e, e) this._getAvatarOwnersAndInitDatasAsync(), 
            this.owner._changeHierarchyAnimatorAvatar(this, e); else {
                var t = this.owner._parent;
                this.owner._changeHierarchyAnimatorAvatar(this, t ? t._hierarchyAnimator._avatar : null);
            }
        }), a(0, n, "speed", function() {
            return this._speed;
        }, function(e) {
            this._speed = e;
        }), t._update = function(e) {
            for (var t = e._animatorPool, n = t.elements, i = 0, r = t.length; i < r; i++) {
                var a = n[i];
                a && a.enabled && a._update();
            }
        }, t._tempVector3Array0 = new Float32Array(3), t._tempVector3Array1 = new Float32Array(3), 
        t._tempQuaternionArray0 = new Float32Array(4), t._tempQuaternionArray1 = new Float32Array(4), 
        t.CULLINGMODE_ALWAYSANIMATE = 0, t.CULLINGMODE_CULLCOMPLETELY = 2, t;
    }(f), Ft = (function(e) {
        function t() {
            this._nativeConstraint = null, this._breakingImpulseThreshold = NaN, this._connectedBody = null, 
            this._feedbackEnabled = !1, t.__super.call(this);
        }
        r(t, "laya.d3.physics.constraints.ConstraintComponent", f);
        var i = t.prototype;
        i._onDestroy = function() {
            Dt._physics3D.destroy(this._nativeConstraint), this._nativeConstraint = null;
        }, a(0, i, "breakingImpulseThreshold", function() {
            return this._breakingImpulseThreshold;
        }, function(e) {
            this._nativeConstraint.BreakingImpulseThreshold = e, this._breakingImpulseThreshold = e;
        }), a(0, i, "enabled", function() {
            return n.superGet(f, this, "enabled");
        }, function(e) {
            this._nativeConstraint.IsEnabled = e, n.superSet(f, this, "enabled", e);
        }), a(0, i, "appliedImpulse", function() {
            return this._feedbackEnabled || (this._nativeConstraint.EnableFeedback(!0), this._feedbackEnabled = !0), 
            this._nativeConstraint.AppliedImpulse;
        }), a(0, i, "connectedBody", function() {
            return this._connectedBody;
        }, function(e) {
            this._connectedBody = e;
        });
    }(), function(e) {
        function t(e, n, i) {
            this._renderState = new ft(), this._owner = e, this._cacheSharders = [], this._publicValidDefine = 0, 
            this._spriteValidDefine = 0, this._materialValidDefine = 0, this._validDefineMap = {}, 
            t.__super.call(this, n, i, null, this._validDefineMap);
            var r = this._owner._publicDefinesMap, a = this._owner._spriteDefinesMap, o = this._owner._materialDefinesMap;
            for (var s in this._validDefineMap) null != r[s] ? this._publicValidDefine |= r[s] : null != a[s] ? this._spriteValidDefine |= a[s] : null != o[s] && (this._materialValidDefine |= o[s]);
        }
        r(t, "laya.d3.shader.ShaderPass", C);
        var n = t.prototype;
        return n._definesToNameDic = function(e, t) {
            for (var n = {}, i = 1, r = 0; r < 32 && !((i = 1 << r) > e); r++) if (e & i) {
                n[t[i]] = "";
            }
            return n;
        }, n._compileToTree = function(e, t, n, i, r) {
            var a, o, s, l, h, c, u, _ = 0, d = 0, f = 0, m = 0;
            for (d = n; d < t.length; d++) if (!((s = t[d]).length < 1) && 0 !== (_ = s.indexOf("//"))) {
                if (_ >= 0 && (s = s.substr(0, _)), a = u || new x(i), u = null, a.text = s, (_ = s.indexOf("#")) >= 0) {
                    for (l = "#", m = _ + 1, f = s.length; m < f; m++) {
                        var p = s.charAt(m);
                        if (" " === p || "\t" === p || "?" === p) break;
                        l += p;
                    }
                    switch (a.name = l, l) {
                      case "#ifdef":
                      case "#ifndef":
                        if (a.setParent(e), e = a, r) for (c = s.substr(m).split(C._splitToWordExps3), m = 0; m < c.length; m++) (s = c[m]).length && (r[s] = !0);
                        continue;

                      case "#if":
                      case "#elif":
                        if (a.setParent(e), e = a, r) for (c = s.substr(m).split(C._splitToWordExps3), m = 0; m < c.length; m++) (s = c[m]).length && "defined" != s && (r[s] = !0);
                        continue;

                      case "#else":
                        o = (e = e.parent).childs[e.childs.length - 1], a.setParent(e), e = a;
                        continue;

                      case "#endif":
                        o = (e = e.parent).childs[e.childs.length - 1], a.setParent(e);
                        continue;

                      case "#include":
                        c = C.splitToWords(s, null);
                        var T = C.includes[c[1]];
                        if (!T) throw "ShaderCompile error no this include file:" + c[1];
                        if ((_ = c[0].indexOf("?")) < 0) {
                            a.setParent(e), s = T.getWith("with" == c[2] ? c[3] : null), this._compileToTree(a, s.split("\n"), 0, i, r), 
                            a.text = "";
                            continue;
                        }
                        a.setCondition(c[0].substr(_ + 1), 1), a.text = T.getWith("with" == c[2] ? c[3] : null);
                        break;

                      case "#import":
                        h = (c = C.splitToWords(s, null))[1], i.push({
                            node: a,
                            file: C.includes[h],
                            ofs: a.text.length
                        });
                        continue;
                    }
                } else {
                    if ((o = e.childs[e.childs.length - 1]) && !o.name) {
                        i.length > 0 && C.splitToWords(s, o), u = a, o.text += "\n" + s;
                        continue;
                    }
                    i.length > 0 && C.splitToWords(s, a);
                }
                a.setParent(e);
            }
        }, n.withCompile = function(e, t, n) {
            e &= this._publicValidDefine, t &= this._spriteValidDefine, n &= this._materialValidDefine;
            var i, r, a;
            if (r = this._cacheSharders[e]) if (a = r[t]) {
                if (i = a[n]) return i;
            } else a = r[t] = []; else a = (r = this._cacheSharders[e] = [])[t] = [];
            var o, s = this._definesToNameDic(e, this._owner._publicDefines), l = this._definesToNameDic(t, this._owner._spriteDefines), h = this._definesToNameDic(n, this._owner._materialDefines);
            if ($e.debugMode) {
                var c = "";
                for (o in s) c += o + " ";
                var u = "";
                for (o in l) u += o + " ";
                var _ = "";
                for (o in h) _ += o + " ";
                F.shaderHighPrecision || (e += $e.SHADERDEFINE_HIGHPRECISION), console.log("%cShader3DDebugMode---(Name:" + this._owner._owner._name + " PassIndex:" + this._owner._passes.indexOf(this) + " PublicDefine:" + e + " SpriteDefine:" + t + " MaterialDefine:" + n + " PublicDefineGroup:" + c + " SpriteDefineGroup:" + u + "MaterialDefineGroup: " + _ + ")---ShaderCompile3DDebugMode", "color:green");
            }
            var d = {}, f = "";
            if (s) for (o in s) f += "#define " + o + "\n", d[o] = !0;
            if (l) for (o in l) f += "#define " + o + "\n", d[o] = !0;
            if (h) for (o in h) f += "#define " + o + "\n", d[o] = !0;
            var m = this._VS.toscript(d, []), p = "";
            0 == m[0].indexOf("#version") && (p = m[0] + "\n", m.shift());
            var T = this._PS.toscript(d, []), E = "";
            return 0 == T[0].indexOf("#version") && (E = T[0] + "\n", T.shift()), i = new Dn(p + f + m.join("\n"), E + f + T.join("\n"), this._owner._attributeMap, this._owner._uniformMap), 
            a[n] = i, i;
        }, a(0, n, "renderState", function() {
            return this._renderState;
        }), t;
    }()), bt = function(e) {
        function t() {
            t.__super.call(this), this._dynamicWorldPositionNormalNeedUpdate = !0;
        }
        r(t, "laya.d3.core.render.SubMeshRenderElement", e);
        var n = t.prototype;
        return n._onWorldMatrixChanged = function() {
            this._dynamicWorldPositionNormalNeedUpdate = !0;
        }, n._computeWorldPositionsAndNormals = function(e, t, n, i) {
            if (this._dynamicWorldPositionNormalNeedUpdate) {
                for (var r = this._geometry, a = r._vertexBuffer, o = a.vertexDeclaration.vertexStride / 4, s = a.getData(), l = this._transform.worldMatrix, h = this._transform.rotation, c = r._indices, u = 0; u < i; u++) {
                    var _ = (n ? c[u] : u) * o, d = 3 * u;
                    ke.transformVector3ArrayToVector3ArrayCoordinate(s, _ + e, l, this._dynamicWorldPositions, d), 
                    -1 !== t && ke.transformVector3ArrayByQuat(s, _ + t, h, this._dynamicWorldNormals, d);
                }
                this._dynamicWorldPositionNormalNeedUpdate = !1;
            }
        }, n.setTransform = function(e) {
            this._transform !== e && (this._transform && this._transform.off("transformchanged", this, this._onWorldMatrixChanged), 
            e && e.on("transformchanged", this, this._onWorldMatrixChanged), this._dynamicWorldPositionNormalNeedUpdate = !0, 
            this._transform = e);
        }, n.setGeometry = function(e) {
            if (this._geometry !== e) {
                var t = e, n = t._mesh;
                if (n) {
                    var i = n._subMeshCount > 1, r = i ? t._indexCount : n._vertexCount;
                    if (r <= 10) {
                        var a = 3 * r;
                        this._dynamicBatch = !0, this._dynamicWorldPositions = new Float32Array(a), this._dynamicWorldNormals = new Float32Array(a), 
                        this._dynamicVertexCount = r, this._dynamicMultiSubMesh = i;
                    } else this._dynamicBatch = !1;
                }
                this._geometry = e;
            }
        }, n.addToOpaqueRenderQueue = function(e, t) {
            var n = this.staticBatch, i = t.elements;
            if (n) {
                var r = mn.instance, a = this.render.lightmapIndex + 1, o = r._opaqueBatchMarks[a] || (r._opaqueBatchMarks[a] = []), s = o[this.render.receiveShadow ? 0 : 1] || (o[this.render.receiveShadow ? 0 : 1] = []), l = s[this.material.id] || (s[this.material.id] = []), h = l[n._batchID] || (l[n._batchID] = new Array(3));
                if (r._updateCountMark === h[0]) {
                    var c = h[1];
                    if (h[2]) i[c].staticBatchElementList.push(this); else {
                        var u = i[c], _ = u.render, d = r._getBatchRenderElementFromPool();
                        d.setGeometry(n), d.material = u.material;
                        var f = n.batchOwner._owner, m = f ? f._transform : null;
                        d.setTransform(m);
                        var p = n.batchOwner._getBatchRender(e, _.lightmapIndex, _.receiveShadow);
                        p._setBelongScene(e.scene), p._distanceForSort = _._distanceForSort, d.render = p;
                        var T = d.staticBatchElementList;
                        T.length = 0, T.push(u), T.push(this), i[c] = d, h[2] = !0;
                    }
                } else h[0] = r._updateCountMark, h[1] = i.length, h[2] = !1, i.push(this);
            } else if (this._dynamicBatch) {
                var E = this._geometry._vertexBuffer.vertexDeclaration, v = un.instance, g = this.render.lightmapIndex + 1, S = v._opaqueBatchMarks[g] || (v._opaqueBatchMarks[g] = []), R = S[this.render.receiveShadow ? 0 : 1] || (S[this.render.receiveShadow ? 0 : 1] = []), A = R[this.material.id] || (R[this.material.id] = []), I = A[E.id] || (A[E.id] = new Array(3));
                if (v._updateCountMark === I[0]) {
                    var D = I[1];
                    if (I[2]) i[D].dynamicBatchElementList.push(this); else {
                        var y = i[D], M = y.render, C = v._getBatchRenderElementFromPool();
                        C.setGeometry(en.instance), C.material = y.material, C.setTransform(null);
                        var x = v._getBatchRender(M.lightmapIndex, M.receiveShadow);
                        x._setBelongScene(e.scene), x._distanceForSort = M._distanceForSort, C.render = x, 
                        C.dynamicVertexDeclaration = E;
                        var O = C.dynamicBatchElementList;
                        O.length = 0, O.push(y), O.push(this), i[D] = C, I[2] = !0;
                    }
                } else I[0] = v._updateCountMark, I[1] = i.length, I[2] = !1, i.push(this);
            } else i.push(this);
        }, n.addToTransparentRenderQueue = function(e, t) {
            var n = this.staticBatch, i = t.elements;
            if (n) {
                var r = mn.instance, a = t.lastTransparentRenderElement;
                if (a) {
                    var o = a.render;
                    if (a._geometry._getType() !== this._geometry._getType() || a.staticBatch !== n || a.material !== this.material || o.receiveShadow !== this.render.receiveShadow || o.lightmapIndex !== this.render.lightmapIndex) i.push(this), 
                    t.lastTransparentBatched = !1; else {
                        if (t.lastTransparentBatched) i[i.length - 1].staticBatchElementList.push(this); else {
                            var s = r._getBatchRenderElementFromPool();
                            s.setGeometry(n), s.material = a.material;
                            var l = n.batchOwner._owner, h = l ? l._transform : null;
                            s.setTransform(h);
                            var c = n.batchOwner._getBatchRender(e, o.lightmapIndex, o.receiveShadow);
                            c._setBelongScene(e.scene), c._distanceForSort = o._distanceForSort, s.render = c;
                            var u = s.staticBatchElementList;
                            u.length = 0, u.push(a), u.push(this), i[i.length - 1] = s;
                        }
                        t.lastTransparentBatched = !0;
                    }
                } else i.push(this), t.lastTransparentBatched = !1;
            } else if (this._dynamicBatch) {
                var _ = this._geometry._vertexBuffer.vertexDeclaration, d = un.instance, f = t.lastTransparentRenderElement;
                if (f) {
                    var m = f.render;
                    if (f._geometry._getType() !== this._geometry._getType() || f._geometry._vertexBuffer._vertexDeclaration !== _ || f.material !== this.material || m.receiveShadow !== this.render.receiveShadow || m.lightmapIndex !== this.render.lightmapIndex) i.push(this), 
                    t.lastTransparentBatched = !1; else {
                        if (t.lastTransparentBatched) i[i.length - 1].dynamicBatchElementList.push(this); else {
                            var p = d._getBatchRenderElementFromPool();
                            p.setGeometry(en.instance), p.material = f.material, p.setTransform(null);
                            var T = d._getBatchRender(m.lightmapIndex, m.receiveShadow);
                            T._setBelongScene(e.scene), T._distanceForSort = m._distanceForSort, p.render = T, 
                            p.dynamicVertexDeclaration = _;
                            var E = p.dynamicBatchElementList;
                            E.length = 0, E.push(f), E.push(this), i[i.length - 1] = p;
                        }
                        t.lastTransparentBatched = !0;
                    }
                } else i.push(this), t.lastTransparentBatched = !1;
            } else i.push(this);
            t.lastTransparentRenderElement = this;
        }, n.destroy = function() {
            e.prototype.destroy.call(this), this._dynamicWorldPositions = null, this._dynamicWorldNormals = null, 
            this.skinnedDatas = null, this.staticBatch = null, this.staticBatchElementList = null, 
            this.dynamicBatchElementList = null, this.dynamicVertexDeclaration = null;
        }, t;
    }(H), Bt = function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.core.BufferState", c);
        var n = t.prototype;
        return n.applyVertexBuffer = function(e) {
            if (c._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            var t = E.instance, n = e.vertexDeclaration, i = null;
            i = D.isConchApp ? n._shaderValues._nativeArray : n._shaderValues._data, e.bind();
            for (var r in i) {
                var a = parseInt(r), o = i[r];
                t.enableVertexAttribArray(a), t.vertexAttribPointer(a, o[0], o[1], !!o[2], o[3], o[4]);
            }
        }, n.applyVertexBuffers = function(e) {
            if (c._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            for (var t = E.instance, n = 0, i = e.length; n < i; n++) {
                var r = e[n], a = r.vertexDeclaration, o = null;
                o = D.isConchApp ? a._shaderValues._nativeArray : a._shaderValues._data, r.bind();
                for (var s in o) {
                    var l = parseInt(s), h = o[s];
                    t.enableVertexAttribArray(l), t.vertexAttribPointer(l, h[0], h[1], !!h[2], h[3], h[4]);
                }
            }
        }, n.applyIndexBuffer = function(e) {
            if (c._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            this._bindedIndexBuffer !== e && (e._bindForVAO(), this._bindedIndexBuffer = e);
        }, t;
    }(), Ut = function(e) {
        function t(e, n, i) {
            t.__super.call(this), void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === i && (i = 1), 
            this._sizeX = e, this._sizeY = n, this._sizeZ = i, this._type = 0, t._nativeSize.setValue(e / 2, n / 2, i / 2), 
            this._nativeShape = new Dt._physics3D.btBoxShape(t._nativeSize);
        }
        r(t, "laya.d3.physics.shape.BoxColliderShape", K);
        var n = t.prototype;
        return n.clone = function() {
            var e = new t(this._sizeX, this._sizeY, this._sizeZ);
            return this.cloneTo(e), e;
        }, a(0, n, "sizeX", function() {
            return this._sizeX;
        }), a(0, n, "sizeY", function() {
            return this._sizeY;
        }), a(0, n, "sizeZ", function() {
            return this._sizeZ;
        }), i(t, [ "_nativeSize", function() {
            return this._nativeSize = new Dt._physics3D.btVector3(0, 0, 0);
        } ]), t;
    }(), Gt = function(e) {
        function t() {
            this._mesh = null, this._convex = !1, t.__super.call(this);
        }
        r(t, "laya.d3.physics.shape.MeshColliderShape", e);
        var n = t.prototype;
        return n._setScale = function(e) {
            if (this._compoundParent) this.updateLocalTransformations(); else {
                var t = e.elements;
                K._nativeScale.setValue(t[0], t[1], t[2]), this._nativeShape.setLocalScaling(K._nativeScale), 
                this._nativeShape.updateBound();
            }
        }, n.cloneTo = function(t) {
            var n = t;
            n.convex = this._convex, n.mesh = this._mesh, e.prototype.cloneTo.call(this, t);
        }, n.clone = function() {
            var e = new t();
            return this.cloneTo(e), e;
        }, n.destroy = function() {
            if (this._nativeShape) {
                Dt._physics3D.destroy(this._nativeShape), this._nativeShape = null;
            }
        }, a(0, n, "mesh", function() {
            return this._mesh;
        }, function(e) {
            if (this._mesh !== e) {
                var t = Dt._physics3D;
                this._mesh && t.destroy(this._nativeShape), e && (this._nativeShape = new t.btGImpactMeshShape(e._getPhysicMesh()), 
                this._nativeShape.updateBound()), this._mesh = e;
            }
        }), a(0, n, "convex", function() {
            return this._convex;
        }, function(e) {
            this._convex = e;
        }), t;
    }(K), Ht = function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.core.FloatKeyframe", e);
        return t.prototype.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n.inTangent = this.inTangent, n.outTangent = this.outTangent, n.value = this.value;
        }, t;
    }($), zt = function(e) {
        function t(e, n, i, r, a, s, l, h) {
            this._owner = null, this._gridSize = NaN, this.memorySize = 0, this._numberVertices = 0, 
            this._maxNumberIndices = 0, this._currentNumberIndices = 0, this._numberTriangle = 0, 
            this._vertexBuffer = null, this._indexBuffer = null, this._indexArrayBuffer = null, 
            this._boundingBoxCorners = null, this._leafs = null, this._leafNum = 0, this._terrainHeightData = null, 
            this._terrainHeightDataWidth = 0, this._terrainHeightDataHeight = 0, this._chunkOffsetX = 0, 
            this._chunkOffsetZ = 0, this._cameraCoordinateInverse = !1, this._cameraPos = null, 
            this._currentLOD = 0, this._perspectiveFactor = NaN, this._LODTolerance = 0, this._boundingSphere = null, 
            this._boundingBox = null, t.__super.call(this), this._bufferState = new Bt(), this._owner = e, 
            this._cameraPos = new dn(), this._chunkOffsetX = n, this._chunkOffsetZ = i, this._gridSize = r, 
            this._terrainHeightData = a, this._terrainHeightDataWidth = s, this._terrainHeightDataHeight = l, 
            this._leafNum = ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM * (ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM), 
            this._leafs = o(this._leafNum), this._cameraCoordinateInverse = h;
            for (var c = 0; c < this._leafNum; c++) this._leafs[c] = new ct();
            this.recreateResource();
        }
        r(t, "laya.d3.terrain.TerrainFilter", J);
        var n = t.prototype;
        return n.recreateResource = function() {
            this._currentNumberIndices = 0, this._numberTriangle = 0;
            var e = ct.LEAF_VERTEXT_COUNT, t = ct.LEAF_MAX_INDEX_COUNT;
            this._numberVertices = e * this._leafNum, this._maxNumberIndices = t * this._leafNum, 
            this._indexArrayBuffer = new Uint16Array(this._maxNumberIndices);
            var n = Qe.vertexDeclaration, i = n.vertexStride / 4, r = new Float32Array(this._numberVertices * i), a = ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM, o = 0, s = 0, l = 0;
            for (o = 0; o < this._leafNum; o++) s = o % a, l = Math.floor(o / a), this._leafs[o].calcVertextBuffer(this._chunkOffsetX, this._chunkOffsetZ, s * ct.LEAF_GRID_NUM, l * ct.LEAF_GRID_NUM, this._gridSize, r, o * ct.LEAF_PLANE_VERTEXT_COUNT, i, this._terrainHeightData, this._terrainHeightDataWidth, this._terrainHeightDataHeight, this._cameraCoordinateInverse);
            for (o = 0; o < this._leafNum; o++) s = o % a, l = Math.floor(o / a), this._leafs[o].calcSkirtVertextBuffer(this._chunkOffsetX, this._chunkOffsetZ, s * ct.LEAF_GRID_NUM, l * ct.LEAF_GRID_NUM, this._gridSize, r, this._leafNum * ct.LEAF_PLANE_VERTEXT_COUNT + o * ct.LEAF_SKIRT_VERTEXT_COUNT, i, this._terrainHeightData, this._terrainHeightDataWidth, this._terrainHeightDataHeight);
            this.assembleIndexInit(), this._vertexBuffer = new Kt(n.vertexStride * this._numberVertices, 35044, !1), 
            this._vertexBuffer.vertexDeclaration = n, this._indexBuffer = new qt("ushort", this._maxNumberIndices, 35044, !1), 
            this._vertexBuffer.setData(r), this._indexBuffer.setData(this._indexArrayBuffer), 
            this.memorySize = 2 * (this._vertexBuffer._byteLength + this._indexBuffer._byteLength), 
            this.calcOriginalBoudingBoxAndSphere(), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
        }, n.setLODLevel = function(e) {
            if (4 != e.length) return !0;
            var t = (e[0] + 1 << 24) + (e[1] + 1 << 16) + (e[2] + 1 << 8) + (e[3] + 1);
            return this._currentLOD != t && (this._currentLOD = t, !0);
        }, n.assembleIndexInit = function() {
            this._currentNumberIndices = 0, this._numberTriangle = 0;
            for (var e = 0, t = 0; t < this._leafNum; t++) {
                var n = ct.getPlaneLODIndex(t, 0);
                this._indexArrayBuffer.set(n, e), e += n.length;
                var i = ct.getSkirtLODIndex(t, 0);
                this._indexArrayBuffer.set(i, e), e += i.length, this._currentNumberIndices += n.length + i.length;
            }
            this._numberTriangle = this._currentNumberIndices / 3;
        }, n.isNeedAssemble = function(e, t) {
            var n = Math.min(e.viewport.width, e.viewport.height) / (2 * Math.tan(Math.PI * e.fieldOfView / 180));
            return this._perspectiveFactor != n ? (this._perspectiveFactor = n, 1) : this._LODTolerance != Gn.LOD_TOLERANCE_VALUE ? (this._LODTolerance = Gn.LOD_TOLERANCE_VALUE, 
            1) : 0 == dn.equals(t, this._cameraPos) ? (this._cameraPos.x = t.x, this._cameraPos.y = t.y, 
            this._cameraPos.z = t.z, 2) : 0;
        }, n.assembleIndex = function(e, n) {
            var i = this.isNeedAssemble(e, n);
            if (i > 0) {
                for (var r = 0; r < this._leafNum; r++) t._TEMP_ARRAY_BUFFER[r] = this._leafs[r].determineLod(n, this._perspectiveFactor, Gn.LOD_TOLERANCE_VALUE, 1 == i);
                if (this.setLODLevel(t._TEMP_ARRAY_BUFFER)) {
                    this._currentNumberIndices = 0, this._numberTriangle = 0;
                    var a = 0;
                    for (r = 0; r < this._leafNum; r++) {
                        var o = t._TEMP_ARRAY_BUFFER[r], s = ct.getPlaneLODIndex(r, o);
                        this._indexArrayBuffer.set(s, a), a += s.length;
                        var l = ct.getSkirtLODIndex(r, o);
                        this._indexArrayBuffer.set(l, a), a += l.length, this._currentNumberIndices += s.length + l.length;
                    }
                    return this._numberTriangle = this._currentNumberIndices / 3, !0;
                }
            }
            return !1;
        }, n.calcOriginalBoudingBoxAndSphere = function() {
            for (var e = new fn(2147483647, -2147483647), t = 0; t < this._leafNum; t++) e.x = this._leafs[t]._sizeOfY.x < e.x ? this._leafs[t]._sizeOfY.x : e.x, 
            e.y = this._leafs[t]._sizeOfY.y > e.y ? this._leafs[t]._sizeOfY.y : e.y;
            var n = new dn(this._chunkOffsetX * ct.CHUNK_GRID_NUM * this._gridSize, e.x, this._chunkOffsetZ * ct.CHUNK_GRID_NUM * this._gridSize), i = new dn((this._chunkOffsetX + 1) * ct.CHUNK_GRID_NUM * this._gridSize, e.y, (this._chunkOffsetZ + 1) * ct.CHUNK_GRID_NUM * this._gridSize);
            ct.__ADAPT_MATRIX__ && (dn.transformV3ToV3(n, ct.__ADAPT_MATRIX__, n), dn.transformV3ToV3(i, ct.__ADAPT_MATRIX__, i)), 
            this._boundingBox = new ne(n, i);
            var r = new dn();
            dn.subtract(i, n, r), dn.scale(r, .5, r);
            var a = new dn();
            dn.add(n, r, a), this._boundingSphere = new k(a, dn.scalarLength(r)), this._boundingBoxCorners = o(8, null), 
            this._boundingBox.getCorners(this._boundingBoxCorners);
        }, n.calcLeafBoudingBox = function(e) {
            for (var t = 0; t < this._leafNum; t++) this._leafs[t].calcLeafBoudingBox(e);
        }, n.calcLeafBoudingSphere = function(e, t) {
            for (var n = 0; n < this._leafNum; n++) this._leafs[n].calcLeafBoudingSphere(e, t);
        }, n._getVertexBuffer = function(e) {
            return void 0 === e && (e = 0), 0 == e ? this._vertexBuffer : null;
        }, n._getIndexBuffer = function() {
            return this._indexBuffer;
        }, n._getType = function() {
            return t._type;
        }, n._prepareRender = function(e) {
            if (0 == e.renderElement.material.getRenderState(0).blend) {
                var t = e.camera;
                this.assembleIndex(t, t.transform.position) && this._indexBuffer.setData(this._indexArrayBuffer);
            }
            return !0;
        }, n._render = function(e) {
            this._bufferState.bind(), E.instance.drawElements(Gn.RENDER_LINE_MODEL ? 1 : 4, this._currentNumberIndices, 5123, 0), 
            L.trianglesFaces += this._numberTriangle, L.renderBatch++;
        }, n.destroy = function() {
            this._owner = null, this._bufferState.destroy(), this._vertexBuffer && this._vertexBuffer.destroy(), 
            this._indexBuffer && this._indexBuffer.destroy();
        }, i(t, [ "_TEMP_ARRAY_BUFFER", function() {
            return this._TEMP_ARRAY_BUFFER = new Uint32Array(ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM * ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM);
        }, "_type", function() {
            return this._type = J._typeCounter++;
        } ]), t;
    }(), kt = function(e) {
        function t(e, n) {
            this._floatCountPerVertices = 7, this._owner = null, this._vertexBuffer = null, 
            this._vertices = null, this._maxLineCount = 0, this._lineCount = 0, t.__super.call(this), 
            this._bufferState = new Bt();
            var i = 2 * n;
            this._owner = e, this._maxLineCount = n, this._vertices = new Float32Array(i * this._floatCountPerVertices), 
            this._vertexBuffer = new Kt(he.vertexDeclaration.vertexStride * i, 35044, !1), this._vertexBuffer.vertexDeclaration = he.vertexDeclaration, 
            this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind();
        }
        r(t, "laya.d3.core.pixelLine.PixelLineFilter", e);
        var n = t.prototype;
        return n._resizeLineData = function(e) {
            var t = 2 * e, n = this._vertices;
            this._vertexBuffer.destroy(), this._maxLineCount = e;
            var i = t * this._floatCountPerVertices;
            this._vertices = new Float32Array(i), this._vertexBuffer = new Kt(he.vertexDeclaration.vertexStride * t, 35044, !1), 
            this._vertexBuffer.vertexDeclaration = he.vertexDeclaration, i < n.length ? (this._vertices.set(new Float32Array(n.buffer, 0, i)), 
            this._vertexBuffer.setData(this._vertices, 0, 0, i)) : (this._vertices.set(n), this._vertexBuffer.setData(this._vertices, 0, 0, n.length)), 
            this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind();
        }, n._updateLineVertices = function(e, t, n, i, r) {
            var a = t.elements, o = n.elements, s = i.elements, l = r.elements;
            this._vertices[e + 0] = a[0], this._vertices[e + 1] = a[1], this._vertices[e + 2] = a[2], 
            this._vertices[e + 3] = s[0], this._vertices[e + 4] = s[1], this._vertices[e + 5] = s[2], 
            this._vertices[e + 6] = s[3], this._vertices[e + 7] = o[0], this._vertices[e + 8] = o[1], 
            this._vertices[e + 9] = o[2], this._vertices[e + 10] = l[0], this._vertices[e + 11] = l[1], 
            this._vertices[e + 12] = l[2], this._vertices[e + 13] = l[3];
        }, n._removeLineData = function(e) {
            var t = 2 * this._floatCountPerVertices, n = e + 1, i = e * t, r = new Float32Array(this._vertices.buffer, n * t * 4, (this._lineCount - n) * t);
            this._vertexBuffer.setData(r, i), this._vertices.set(r, i), this._lineCount--;
        }, n._updateLineData = function(e, t, n, i, r) {
            var a = 2 * this._floatCountPerVertices, o = e * a;
            this._updateLineVertices(o, t, n, i, r), this._vertexBuffer.setData(this._vertices, o, o, a);
        }, n._updateLineDatas = function(e, t) {
            for (var n = 2 * this._floatCountPerVertices, i = e * n, r = t.length, a = 0; a < r; a++) {
                var o = t[a];
                this._updateLineVertices((e + a) * n, o.startPosition, o.endPosition, o.startColor, o.endColor);
            }
            this._vertexBuffer.setData(this._vertices, i, i, n * r);
        }, n._getLineData = function(e, t) {
            var n = t.startPosition.elements, i = t.startColor.elements, r = t.endPosition.elements, a = t.endColor.elements, o = this._vertices, s = e * this._floatCountPerVertices * 2;
            n[0] = o[s + 0], n[1] = o[s + 1], n[2] = o[s + 2], i[0] = o[s + 0], i[1] = o[s + 1], 
            i[2] = o[s + 2], i[3] = o[s + 3], r[0] = o[s + 0], r[1] = o[s + 1], r[2] = o[s + 2], 
            a[0] = o[s + 0], a[1] = o[s + 1], a[2] = o[s + 2], a[3] = o[s + 3];
        }, n._prepareRender = function(e) {
            return !0;
        }, n._render = function(e) {
            this._lineCount > 0 && (this._bufferState.bind(), E.instance.drawArrays(1, 0, 2 * this._lineCount), 
            L.renderBatch++);
        }, n.destroy = function() {
            this._destroyed || (e.prototype.destroy.call(this), this._bufferState.destroy(), 
            this._vertexBuffer.destroy(), this._bufferState = null, this._vertexBuffer = null, 
            this._vertices = null);
        }, t;
    }(J), Xt = function(e) {
        function t() {
            this.radius = NaN, this.emitFromShell = !1, t.__super.call(this), this.radius = 1, 
            this.emitFromShell = !1, this.randomDirection = !1;
        }
        r(t, "laya.d3.core.particleShuriKen.module.shape.HemisphereShape", e);
        var n = t.prototype;
        return n._getShapeBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = t[1] = t[2] = -this.radius;
            var n = e.max.elements;
            n[0] = n[1] = this.radius, n[2] = 0;
        }, n._getSpeedBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = t[1] = -1, t[2] = 0;
            var n = e.max.elements;
            n[0] = n[1] = n[2] = 1;
        }, n.generatePositionAndDirection = function(e, t, n, i) {
            var r = e.elements;
            n ? (n.seed = i[16], this.emitFromShell ? yt._randomPointUnitSphere(e, n) : yt._randomPointInsideUnitSphere(e, n), 
            i[16] = n.seed) : this.emitFromShell ? yt._randomPointUnitSphere(e) : yt._randomPointInsideUnitSphere(e), 
            dn.scale(e, this.radius, e);
            var a = r[2];
            a < 0 && (r[2] = -1 * a), this.randomDirection ? n ? (n.seed = i[17], yt._randomPointUnitSphere(t, n), 
            i[17] = n.seed) : yt._randomPointUnitSphere(t) : e.cloneTo(t);
        }, n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n.radius = this.radius, n.emitFromShell = this.emitFromShell, n.randomDirection = this.randomDirection;
        }, t;
    }(Y), Wt = function(e) {
        function t(e, n, i) {
            switch (t.__super.call(this), void 0 === e && (e = .5), void 0 === n && (n = 1.25), 
            void 0 === i && (i = 1), this._radius = e, this._length = n, this._orientation = i, 
            this._type = 3, i) {
              case 0:
                this._nativeShape = new Dt._physics3D.btCapsuleShapeX(e, n - 2 * e);
                break;

              case 1:
                this._nativeShape = new Dt._physics3D.btCapsuleShape(e, n - 2 * e);
                break;

              case 2:
                this._nativeShape = new Dt._physics3D.btCapsuleShapeZ(e, n - 2 * e);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
        }
        r(t, "laya.d3.physics.shape.CapsuleColliderShape", e);
        var n = t.prototype;
        return n._setScale = function(n) {
            var i = t._tempVector30, r = n.elements, a = i.elements;
            switch (this.orientation) {
              case 0:
                a[0] = r[0], a[1] = a[2] = Math.max(r[1], r[2]);
                break;

              case 1:
                a[1] = r[1], a[0] = a[2] = Math.max(r[0], r[2]);
                break;

              case 2:
                a[2] = r[2], a[0] = a[1] = Math.max(r[0], r[1]);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
            e.prototype._setScale.call(this, i);
        }, n.clone = function() {
            var e = new t(this._radius, this._length, this._orientation);
            return this.cloneTo(e), e;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), a(0, n, "length", function() {
            return this._length;
        }), a(0, n, "orientation", function() {
            return this._orientation;
        }), i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        } ]), t;
    }(K), Yt = function(e) {
        function t(e, n, i) {
            switch (this._radius = 1, this._height = .5, t.__super.call(this), void 0 === e && (e = .5), 
            void 0 === n && (n = 1), void 0 === i && (i = 1), this._radius = e, this._height = n, 
            this._orientation = i, this._type = 2, i) {
              case 0:
                this._nativeShape = new Dt._physics3D.btConeShapeX(e, n);
                break;

              case 1:
                this._nativeShape = new Dt._physics3D.btConeShape(e, n);
                break;

              case 2:
                this._nativeShape = new Dt._physics3D.btConeShapeZ(e, n);
                break;

              default:
                throw "ConeColliderShape:unknown orientation.";
            }
        }
        r(t, "laya.d3.physics.shape.ConeColliderShape", K);
        var n = t.prototype;
        return n.clone = function() {
            var e = new t(this._radius, this._height, this._orientation);
            return this.cloneTo(e), e;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), a(0, n, "height", function() {
            return this._height;
        }), a(0, n, "orientation", function() {
            return this._orientation;
        }), t;
    }(), Zt = function(e) {
        function t(e) {
            this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null, 
            this._subIndexBufferCount = null, this._skinAnimationDatas = null, this._indexInMesh = 0, 
            this._vertexStart = 0, this._indexStart = 0, this._indexCount = 0, this._indices = null, 
            this._vertexBuffer = null, this._indexBuffer = null, t.__super.call(this), this._bufferState = new Bt(), 
            this._mesh = e, this._boneIndicesList = [], this._subIndexBufferStart = [], this._subIndexBufferCount = [];
        }
        r(t, "laya.d3.resource.models.SubMesh", e);
        var n = t.prototype;
        return n._getType = function() {
            return t._type;
        }, n._render = function(e) {
            this._bufferState.bind();
            for (var t = e.renderElement.skinnedDatas, n = this._boneIndicesList.length, i = e.shader, r = 0; r < n; r++) t && i.uploadCustomUniform(ai.BONES, t[r]), 
            E.instance.drawElements(4, this._subIndexBufferCount[r], 5123, 2 * this._subIndexBufferStart[r]);
            L.renderBatch++, L.trianglesFaces += this._indexCount / 3;
        }, n.getIndices = function() {
            return this._indices;
        }, n.destroy = function() {
            this._destroyed || (e.prototype.destroy.call(this), this._bufferState.destroy(), 
            this._indexBuffer.destroy(), this._bufferState = null, this._indexBuffer = null, 
            this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null, 
            this._subIndexBufferCount = null, this._skinAnimationDatas = null);
        }, i(t, [ "_type", function() {
            return this._type = J._typeCounter++;
        } ]), t;
    }(J), Kt = function(e) {
        function t(e, n, i, r) {
            if (this._vertexCount = 0, this._canRead = !1, this._dataType = 0, this._vertexDeclaration = null, 
            void 0 === i && (i = !1), void 0 === r && (r = 0), t.__super.call(this), this._vertexCount = -1, 
            this._bufferUsage = n, this._bufferType = 34962, this._canRead = i, this._dataType = r, 
            this._byteLength = e, this.bind(), E.instance.bufferData(this._bufferType, this._byteLength, this._bufferUsage), 
            i) switch (r) {
              case 0:
                this._buffer = new Float32Array(e / 4);
                break;

              case 1:
                this._buffer = new Uint8Array(e);
            }
        }
        r(t, "laya.d3.graphics.VertexBuffer3D", e);
        var n = t.prototype;
        return n.bind = function() {
            return h._bindedVertexBuffer !== this._glBuffer && (E.instance.bindBuffer(34962, this._glBuffer), 
            h._bindedVertexBuffer = this._glBuffer, !0);
        }, n.setData = function(e, t, n, i) {
            void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 4294967295), 
            this.bind();
            if (0 !== n || 4294967295 !== i) switch (this._dataType) {
              case 0:
                e = new Float32Array(e.buffer, 4 * n, i);
                break;

              case 1:
                e = new Uint8Array(e.buffer, n, i);
            }
            switch (this._dataType) {
              case 0:
                E.instance.bufferSubData(this._bufferType, 4 * t, e);
                break;

              case 1:
                E.instance.bufferSubData(this._bufferType, t, e);
            }
            this._canRead && this._buffer.set(e, t);
        }, n.getData = function() {
            if (this._canRead) return this._buffer;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }, n.destroy = function() {
            e.prototype.destroy.call(this), this._buffer = null, this._vertexDeclaration = null;
        }, a(0, n, "vertexDeclaration", function() {
            return this._vertexDeclaration;
        }, function(e) {
            this._vertexDeclaration !== e && (this._vertexDeclaration = e, this._vertexCount = e ? this._byteLength / e.vertexStride : -1);
        }), a(0, n, "vertexCount", function() {
            return this._vertexCount;
        }), a(0, n, "canRead", function() {
            return this._canRead;
        }), t.DATATYPE_FLOAT32ARRAY = 0, t.DATATYPE_UINT8ARRAY = 1, t;
    }(h), jt = function(e) {
        function t() {
            t.__super.call(this), this._childColliderShapes = [], this._type = 5, this._nativeShape = new Dt._physics3D.btCompoundShape();
        }
        r(t, "laya.d3.physics.shape.CompoundColliderShape", e);
        var n = t.prototype;
        return n._clearChildShape = function(e) {
            e._attatched = !1, e._compoundParent = null, e._indexInCompound = -1;
        }, n._addReference = function() {}, n._removeReference = function() {}, n._updateChildTransform = function(e) {
            var t = e.localOffset.elements, n = e.localRotation.elements, i = K._nativeVector30, r = K._nativQuaternion0, a = K._nativeTransform0;
            i.setValue(-t[0], t[1], t[2]), r.setValue(-n[0], n[1], n[2], -n[3]), a.setOrigin(i), 
            a.setRotation(r), this._nativeShape.updateChildTransform(e._indexInCompound, a, !0);
        }, n.addChildShape = function(e) {
            if (e._attatched) throw "CompoundColliderShape: this shape has attatched to other entity.";
            e._attatched = !0, e._compoundParent = this, e._indexInCompound = this._childColliderShapes.length, 
            this._childColliderShapes.push(e);
            var n = e.localOffset.elements, i = e.localRotation.elements;
            t._nativeOffset.setValue(-n[0], n[1], n[2]), t._nativRotation.setValue(-i[0], i[1], i[2], -i[3]), 
            t._nativeTransform.setOrigin(t._nativeOffset), t._nativeTransform.setRotation(t._nativRotation);
            var r = this._nativeShape.getLocalScaling();
            this._nativeShape.setLocalScaling(t._nativeVector3One), this._nativeShape.addChildShape(t._nativeTransform, e._nativeShape), 
            this._nativeShape.setLocalScaling(r), this._attatchedCollisionObject && (this._attatchedCollisionObject.colliderShape = this);
        }, n.removeChildShape = function(e) {
            if (e._compoundParent === this) {
                var t = e._indexInCompound;
                this._clearChildShape(e);
                var n = this._childColliderShapes[this._childColliderShapes.length - 1];
                n._indexInCompound = t, this._childColliderShapes[t] = n, this._childColliderShapes.pop(), 
                this._nativeShape.removeChildShapeByIndex(t);
            }
        }, n.clearChildShape = function() {
            for (var e = 0, t = this._childColliderShapes.length; e < t; e++) this._clearChildShape(this._childColliderShapes[e]), 
            this._nativeShape.removeChildShapeByIndex(0);
            this._childColliderShapes.length = 0;
        }, n.getChildShapeCount = function() {
            return this._childColliderShapes.length;
        }, n.cloneTo = function(e) {
            var t = e;
            t.clearChildShape();
            for (var n = 0, i = this._childColliderShapes.length; n < i; n++) t.addChildShape(this._childColliderShapes[n].clone());
        }, n.clone = function() {
            var e = new t();
            return this.cloneTo(e), e;
        }, n.destroy = function() {
            e.prototype.destroy.call(this);
            for (var t = 0, n = this._childColliderShapes.length; t < n; t++) {
                var i = this._childColliderShapes[t];
                0 === i._referenceCount && i.destroy();
            }
        }, i(t, [ "_nativeVector3One", function() {
            return this._nativeVector3One = new Dt._physics3D.btVector3(1, 1, 1);
        }, "_nativeTransform", function() {
            return this._nativeTransform = new Dt._physics3D.btTransform();
        }, "_nativeOffset", function() {
            return this._nativeOffset = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativRotation", function() {
            return this._nativRotation = new Dt._physics3D.btQuaternion(0, 0, 0, 1);
        } ]), t;
    }(K), qt = function(e) {
        function t(e, n, i, r) {
            this._indexType = null, this._indexTypeByteCount = 0, this._indexCount = 0, this._canRead = !1, 
            void 0 === i && (i = 35044), void 0 === r && (r = !1), t.__super.call(this), this._indexType = e, 
            this._indexCount = n, this._bufferUsage = i, this._bufferType = 34963, this._canRead = r;
            var a = 0;
            if ("ushort" == e) this._indexTypeByteCount = 2; else {
                if ("ubyte" != e) throw new Error("unidentification index type.");
                this._indexTypeByteCount = 1;
            }
            a = this._indexTypeByteCount * n, this._byteLength = a;
            var o = c._curBindedBufferState;
            o ? o._bindedIndexBuffer === this ? E.instance.bufferData(this._bufferType, a, this._bufferUsage) : (o.unBind(), 
            this.bind(), E.instance.bufferData(this._bufferType, a, this._bufferUsage), o.bind()) : (this.bind(), 
            E.instance.bufferData(this._bufferType, a, this._bufferUsage)), r && ("ushort" == e ? this._buffer = new Uint16Array(n) : "ubyte" == e && (this._buffer = new Uint8Array(n)));
        }
        r(t, "laya.d3.graphics.IndexBuffer3D", e);
        var n = t.prototype;
        return n._bindForVAO = function() {
            if (!c._curBindedBufferState) throw "IndexBuffer3D: must bind current BufferState.";
            E.instance.bindBuffer(34963, this._glBuffer);
        }, n.bind = function() {
            if (c._curBindedBufferState) throw "IndexBuffer3D: must unbind current BufferState.";
            return h._bindedIndexBuffer !== this._glBuffer && (E.instance.bindBuffer(34963, this._glBuffer), 
            h._bindedIndexBuffer = this._glBuffer, !0);
        }, n.setData = function(e, t, n, i) {
            void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 4294967295);
            var r = 0;
            "ushort" == this._indexType ? (r = 2, 0 === n && 4294967295 === i || (e = new Uint16Array(e.buffer, n * r, i))) : "ubyte" == this._indexType && (r = 1, 
            0 === n && 4294967295 === i || (e = new Uint8Array(e.buffer, n * r, i)));
            var a = c._curBindedBufferState;
            if (a ? a._bindedIndexBuffer === this ? E.instance.bufferSubData(this._bufferType, t * r, e) : (a.unBind(), 
            this.bind(), E.instance.bufferSubData(this._bufferType, t * r, e), a.bind()) : (this.bind(), 
            E.instance.bufferSubData(this._bufferType, t * r, e)), this._canRead) if (0 !== t || 0 !== n || 4294967295 !== i) {
                var o = this._buffer.length - t;
                i > o && (i = o);
                for (var s = 0; s < i; s++) this._buffer[t + s] = e[s];
            } else this._buffer = e;
        }, n.getData = function() {
            if (this._canRead) return this._buffer;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }, n.destroy = function() {
            e.prototype.destroy.call(this), this._buffer = null;
        }, a(0, n, "indexType", function() {
            return this._indexType;
        }), a(0, n, "indexTypeByteCount", function() {
            return this._indexTypeByteCount;
        }), a(0, n, "indexCount", function() {
            return this._indexCount;
        }), a(0, n, "canRead", function() {
            return this._canRead;
        }), t.INDEXTYPE_UBYTE = "ubyte", t.INDEXTYPE_USHORT = "ushort", t;
    }(h), Qt = function(e) {
        function t(e, n, i) {
            switch (this._radius = 1, this._height = .5, t.__super.call(this), void 0 === e && (e = .5), 
            void 0 === n && (n = 1), void 0 === i && (i = 1), this._radius = e, this._height = n, 
            this._orientation = i, this._type = 2, i) {
              case 0:
                t._nativeSize.setValue(n / 2, e, e), this._nativeShape = new Dt._physics3D.btCylinderShapeX(t._nativeSize);
                break;

              case 1:
                t._nativeSize.setValue(e, n / 2, e), this._nativeShape = new Dt._physics3D.btCylinderShape(t._nativeSize);
                break;

              case 2:
                t._nativeSize.setValue(e, e, n / 2), this._nativeShape = new Dt._physics3D.btCylinderShapeZ(t._nativeSize);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
        }
        r(t, "laya.d3.physics.shape.CylinderColliderShape", K);
        var n = t.prototype;
        return n.clone = function() {
            var e = new t(this._radius, this._height, this._orientation);
            return this.cloneTo(e), e;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), a(0, n, "height", function() {
            return this._height;
        }), a(0, n, "orientation", function() {
            return this._orientation;
        }), i(t, [ "_nativeSize", function() {
            return this._nativeSize = new Dt._physics3D.btVector3(0, 0, 0);
        } ]), t;
    }(), Jt = function(e) {
        function t(e) {
            t.__super.call(this), void 0 === e && (e = .5), this._radius = e, this._type = 1, 
            this._nativeShape = new Dt._physics3D.btSphereShape(e);
        }
        r(t, "laya.d3.physics.shape.SphereColliderShape", K);
        var n = t.prototype;
        return n.clone = function() {
            var e = new t(this._radius);
            return this.cloneTo(e), e;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), t;
    }(), $t = function(e) {
        function t() {
            this.radius = NaN, this.emitFromShell = !1, t.__super.call(this), this.radius = 1, 
            this.emitFromShell = !1, this.randomDirection = !1;
        }
        r(t, "laya.d3.core.particleShuriKen.module.shape.SphereShape", e);
        var n = t.prototype;
        return n._getShapeBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = t[1] = t[2] = -this.radius;
            var n = e.max.elements;
            n[0] = n[1] = n[2] = this.radius;
        }, n._getSpeedBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = t[1] = t[2] = -1;
            var n = e.max.elements;
            n[0] = n[1] = n[2] = 1;
        }, n.generatePositionAndDirection = function(e, t, n, i) {
            n ? (n.seed = i[16], this.emitFromShell ? yt._randomPointUnitSphere(e, n) : yt._randomPointInsideUnitSphere(e, n), 
            i[16] = n.seed) : this.emitFromShell ? yt._randomPointUnitSphere(e) : yt._randomPointInsideUnitSphere(e), 
            dn.scale(e, this.radius, e), this.randomDirection ? n ? (n.seed = i[17], yt._randomPointUnitSphere(t, n), 
            i[17] = n.seed) : yt._randomPointUnitSphere(t) : e.cloneTo(t);
        }, n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n.radius = this.radius, n.emitFromShell = this.emitFromShell, n.randomDirection = this.randomDirection;
        }, t;
    }(Y), en = function(e) {
        function t() {
            this._vertices = null, this._indices = null, this._positionOffset = 0, this._normalOffset = 0, 
            this._colorOffset = 0, this._uv0Offset = 0, this._uv1Offset = 0, this._sTangentOffset = 0, 
            this._vertexBuffer = null, this._indexBuffer = null, t.__super.call(this), this._bufferState = new Bt();
            var e = 32e3 * je.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT").vertexStride;
            this._vertices = new Float32Array(e / 4), this._vertexBuffer = new Kt(e, 35048), 
            this._indices = new Int16Array(32e3), this._indexBuffer = new qt("ushort", this._indices.length, 35048);
            var n = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            y._addMemory(n, n);
        }
        r(t, "laya.d3.graphics.SubMeshDynamicBatch", J);
        var n = t.prototype;
        return n._getBatchVertices = function(e, t, n, i, r, a) {
            var o = e.vertexStride / 4, s = a._vertexBuffer.getData(), l = (r.render.lightmapScaleOffset, 
            r._dynamicMultiSubMesh), h = r._dynamicVertexCount;
            r._computeWorldPositionsAndNormals(this._positionOffset, this._normalOffset, l, h);
            for (var c = r._dynamicWorldPositions, u = r._dynamicWorldNormals, _ = a._indices, d = 0; d < h; d++) {
                var f = (l ? _[d] : d) * o, m = (d + n) * o, p = 3 * d, T = m + this._positionOffset;
                t[T] = c[p], t[T + 1] = c[p + 1], t[T + 2] = c[p + 2], -1 !== this._normalOffset && (t[T = m + this._normalOffset] = u[p], 
                t[T + 1] = u[p + 1], t[T + 2] = u[p + 2]), -1 !== this._colorOffset && (T = m + this._colorOffset, 
                p = f + this._colorOffset, t[T] = s[p], t[T + 1] = s[p + 1], t[T + 2] = s[p + 2], 
                t[T + 3] = s[p + 3]), -1 !== this._uv0Offset && (T = m + this._uv0Offset, p = f + this._uv0Offset, 
                t[T] = s[p], t[T + 1] = s[p + 1]), -1 !== this._sTangentOffset && (T = m + this._sTangentOffset, 
                p = f + this._sTangentOffset, t[T] = s[p], t[T + 1] = s[p + 1], t[T + 2] = s[p + 2], 
                t[T + 3] = s[p + 3], T = m + this._sTangentOffset, p = f + this._sTangentOffset, 
                t[T] = s[p], t[T + 1] = s[p + 1], t[T + 2] = s[p + 2], t[T + 3] = s[p + 3]);
            }
        }, n._getBatchIndices = function(e, t, n, i, r, a) {
            var o = r._indices, s = 0, l = 0, h = 0, c = i._isFrontFaceInvert;
            if (a) if (c) for (s = 0, l = o.length; s < l; s += 3) {
                var u = n + s;
                e[h = t + s] = u, e[h + 1] = u + 2, e[h + 2] = u + 1;
            } else for (s = l, l = o.length; s < l; s += 3) u = n + s, e[h = t + s] = u, e[h + 1] = u + 1, 
            e[h + 2] = u + 2; else if (c) for (s = 0, l = o.length; s < l; s += 3) e[h = t + s] = n + o[s], 
            e[h + 1] = n + o[s + 2], e[h + 2] = n + o[s + 1]; else for (s = l, l = o.length; s < l; s += 3) e[h = t + s] = n + o[s], 
            e[h + 1] = n + o[s + 1], e[h + 2] = n + o[s + 2];
        }, n._flush = function(e, t) {
            this._vertexBuffer.setData(this._vertices, 0, 0, e * (this._vertexBuffer.vertexDeclaration.vertexStride / 4)), 
            this._indexBuffer.setData(this._indices, 0, 0, t), E.instance.drawElements(4, t, 5123, 0), 
            L.renderBatch++, L.trianglesFaces += t / 3;
        }, n._prepareRender = function(e) {
            var t = e.renderElement.dynamicVertexDeclaration;
            this._bufferState = un.instance._getBufferState(t), this._positionOffset = t.getVertexElementByUsage(0).offset / 4;
            var n = t.getVertexElementByUsage(3);
            this._normalOffset = n ? n.offset / 4 : -1;
            var i = t.getVertexElementByUsage(1);
            this._colorOffset = i ? i.offset / 4 : -1;
            var r = t.getVertexElementByUsage(2);
            this._uv0Offset = r ? r.offset / 4 : -1;
            var a = t.getVertexElementByUsage(8);
            this._uv1Offset = a ? a.offset / 4 : -1;
            var o = t.getVertexElementByUsage(5);
            return this._sTangentOffset = o ? o.offset / 4 : -1, !0;
        }, n._render = function(e) {
            this._bufferState.bind();
            for (var t = e.renderElement, n = t.dynamicVertexDeclaration, i = t.dynamicBatchElementList, r = 0, a = 0, o = (n.vertexStride, 
            0), s = i.length; o < s; o++) {
                var l = i[o], h = l._geometry, c = h._indexCount;
                a + c > 32e3 && (this._flush(r, a), r = a = 0);
                var u = l._transform;
                this._getBatchVertices(n, this._vertices, r, u, l, h), this._getBatchIndices(this._indices, a, r, u, h, l._dynamicMultiSubMesh), 
                r += l._dynamicVertexCount, a += c;
            }
            this._flush(r, a);
        }, t.maxAllowVertexCount = 10, t.maxAllowAttribueCount = 900, t.maxIndicesCount = 32e3, 
        t.instance = null, t;
    }(), tn = function(e) {
        function t() {
            t.__super.call(this);
            var e = new Float32Array([ -.5, .5, -.5, .5, .5, -.5, .5, .5, .5, -.5, .5, .5, -.5, -.5, -.5, .5, -.5, -.5, .5, -.5, .5, -.5, -.5, .5 ]), n = new Uint8Array([ 0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 0, 3, 7, 7, 4, 0, 1, 5, 6, 6, 2, 1, 3, 2, 6, 6, 7, 3, 0, 4, 5, 5, 1, 0 ]), i = je.getVertexDeclaration("POSITION");
            this._vertexBuffer = new Kt(8 * i.vertexStride, 35044, !1), this._vertexBuffer.vertexDeclaration = i, 
            this._indexBuffer = new qt("ubyte", 36, 35044, !1), this._vertexBuffer.setData(e), 
            this._indexBuffer.setData(n);
            var r = new Bt();
            r.bind(), r.applyVertexBuffer(this._vertexBuffer), r.applyIndexBuffer(this._indexBuffer), 
            r.unBind(), this._bufferState = r;
        }
        r(t, "laya.d3.resource.models.SkyBox", Te);
        return t.prototype._render = function(e) {
            E.instance.drawElements(4, 36, 5121, 0), L.trianglesFaces += 12, L.renderBatch++;
        }, t.__init__ = function() {
            t.instance = new t();
        }, t.instance = null, t;
    }(), nn = function(e) {
        function t() {
            this.radius = NaN, this.arc = NaN, this.emitFromEdge = !1, t.__super.call(this), 
            this.radius = 1, this.arc = 2 * Math.PI, this.emitFromEdge = !1, this.randomDirection = !1;
        }
        r(t, "laya.d3.core.particleShuriKen.module.shape.CircleShape", e);
        var n = t.prototype;
        return n._getShapeBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = t[2] = -this.radius, t[1] = 0;
            var n = e.max.elements;
            n[0] = n[2] = this.radius, n[1] = 0;
        }, n._getSpeedBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = t[1] = -1, t[2] = 0;
            var n = e.max.elements;
            n[0] = n[1] = 1, n[2] = 0;
        }, n.generatePositionAndDirection = function(e, n, i, r) {
            var a = e.elements, o = t._tempPositionPoint.elements;
            i ? (i.seed = r[16], this.emitFromEdge ? yt._randomPointUnitArcCircle(this.arc, t._tempPositionPoint, i) : yt._randomPointInsideUnitArcCircle(this.arc, t._tempPositionPoint, i), 
            r[16] = i.seed) : this.emitFromEdge ? yt._randomPointUnitArcCircle(this.arc, t._tempPositionPoint) : yt._randomPointInsideUnitArcCircle(this.arc, t._tempPositionPoint), 
            a[0] = -o[0], a[1] = o[1], a[2] = 0, dn.scale(e, this.radius, e), this.randomDirection ? i ? (i.seed = r[17], 
            yt._randomPointUnitSphere(n, i), r[17] = i.seed) : yt._randomPointUnitSphere(n) : e.cloneTo(n);
        }, n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n.radius = this.radius, n.arc = this.arc, n.emitFromEdge = this.emitFromEdge, n.randomDirection = this.randomDirection;
        }, i(t, [ "_tempPositionPoint", function() {
            return this._tempPositionPoint = new fn();
        } ]), t;
    }(Y), rn = function(e) {
        function t(e, n, i) {
            t.__super.call(this), this._bufferState = new Bt(), this._batchID = t._batchIDCounter++, 
            this._batchElements = [], this._currentBatchVertexCount = 0, this._currentBatchIndexCount = 0, 
            this._vertexDeclaration = i, this.batchOwner = e, this.number = n;
        }
        r(t, "laya.d3.graphics.SubMeshStaticBatch", J);
        var a = t.prototype;
        return n.imps(a, {
            "laya.resource.IDispose": !0
        }), a._getStaticBatchBakedVertexs = function(e, n, i, r, a, o) {
            var s, l = o._vertexBuffers[0], h = l.vertexDeclaration, c = h.getVertexElementByUsage(0).offset / 4, u = h.getVertexElementByUsage(3), _ = u ? u.offset / 4 : -1, d = h.getVertexElementByUsage(1), f = d ? d.offset / 4 : -1, m = h.getVertexElementByUsage(2), p = m ? m.offset / 4 : -1, T = h.getVertexElementByUsage(8), E = T ? T.offset / 4 : -1, v = h.getVertexElementByUsage(5), g = v ? v.offset / 4 : -1, S = h.vertexStride / 4, R = l.getData();
            if (i) {
                i.worldMatrix.invert(t._tempMatrix4x40), s = t._tempMatrix4x41, ut.multiply(t._tempMatrix4x40, r.worldMatrix, s);
            } else s = r.worldMatrix;
            var A = t._tempQuaternion0;
            s.decomposeTransRotScale(t._tempVector30, A, t._tempVector31);
            for (var I = a.lightmapScaleOffset, D = o.vertexCount, y = 0; y < D; y++) {
                var M = y * S, C = 18 * (y + n);
                ke.transformVector3ArrayToVector3ArrayCoordinate(R, M + c, s, e, C + 0), -1 !== _ && ke.transformVector3ArrayByQuat(R, M + _, A, e, C + 3);
                var x = 0, O = 0, L = C + 6;
                if (-1 !== f) {
                    var N = M + f;
                    for (x = 0, O = 4; x < O; x++) e[L + x] = R[N + x];
                } else for (x = 0, O = 4; x < O; x++) e[L + x] = 1;
                if (-1 !== p) {
                    var V = M + p;
                    e[C + 10] = R[V], e[C + 11] = R[V + 1];
                }
                if (I && (-1 !== E ? ke.transformLightingMapTexcoordArray(R, M + E, I, e, C + 12) : ke.transformLightingMapTexcoordArray(R, M + p, I, e, C + 12)), 
                -1 !== g) {
                    var P = M + g;
                    e[C + 14] = R[P], e[C + 15] = R[P + 1], e[C + 16] = R[P + 2], e[C + 17] = R[P + 3];
                }
            }
            return D;
        }, a.addTest = function(e) {
            var t = e.meshFilter.sharedMesh.vertexCount;
            return !(this._currentBatchVertexCount + t > 65535);
        }, a.add = function(e) {
            var t = e._render._staticBatch;
            t && t.remove(e);
            var n = e.meshFilter.sharedMesh, i = n.vertexCount;
            this._batchElements.push(e);
            var r = e._render;
            r._isPartOfStaticBatch = !0, r._staticBatch = this;
            for (var a = r._renderElements, o = 0, s = a.length; o < s; o++) a[o].staticBatch = this;
            this._currentBatchIndexCount += n._indexBuffer.indexCount, this._currentBatchVertexCount += i;
        }, a.remove = function(e) {
            var t = e.meshFilter.sharedMesh, n = this._batchElements.indexOf(e);
            if (-1 !== n) {
                this._batchElements.splice(n, 1);
                e._render;
                for (var i = e._render._renderElements, r = 0, a = i.length; r < a; r++) i[r].staticBatch = null;
                var o = t.vertexCount;
                this._currentBatchIndexCount = this._currentBatchIndexCount - t._indexBuffer.indexCount, 
                this._currentBatchVertexCount = this._currentBatchVertexCount - o, e._render._isPartOfStaticBatch = !1;
            }
        }, a.finishInit = function() {
            this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy());
            var e = 0, t = 0, n = this.batchOwner._owner, i = this._vertexDeclaration.vertexStride / 4, r = new Float32Array(i * this._currentBatchVertexCount), a = new Uint16Array(this._currentBatchIndexCount);
            this._vertexBuffer = new Kt(this._vertexDeclaration.vertexStride * this._currentBatchVertexCount, 35044), 
            this._vertexBuffer.vertexDeclaration = this._vertexDeclaration, this._indexBuffer = new qt("ushort", this._currentBatchIndexCount, 35044);
            for (var o = 0, s = this._batchElements.length; o < s; o++) {
                for (var l = this._batchElements[o], h = l.meshFilter.sharedMesh, c = this._getStaticBatchBakedVertexs(r, e, n ? n._transform : null, l._transform, l._render, h), u = h._indexBuffer.getData(), _ = e, d = t + u.length, f = l._render._renderElements, m = 0, p = h.subMeshCount; m < p; m++) {
                    var T = h._subMeshes[m], E = t + T._indexStart, v = f[m];
                    v.staticBatchIndexStart = E, v.staticBatchIndexEnd = E + T._indexCount;
                }
                a.set(u, t);
                var g = 0;
                if (n ? l._transform._isFrontFaceInvert !== n.transform._isFrontFaceInvert : l._transform._isFrontFaceInvert) for (g = t; g < d; g += 3) {
                    a[g] = _ + a[g];
                    var S = a[g + 1], R = a[g + 2];
                    a[g + 1] = _ + R, a[g + 2] = _ + S;
                } else for (g = t; g < d; g += 3) a[g] = _ + a[g], a[g + 1] = _ + a[g + 1], a[g + 2] = _ + a[g + 2];
                t += u.length, e += c;
            }
            this._vertexBuffer.setData(r), this._indexBuffer.setData(a);
            var A = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            y._addGPUMemory(A), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
        }, a._render = function(e) {
            this._bufferState.bind();
            for (var t = e.renderElement.staticBatchElementList, n = 0, i = 0, r = 1, a = t.length; r < a; r++) {
                if (t[r - 1].staticBatchIndexEnd !== t[r].staticBatchIndexStart) {
                    var o = t[n].staticBatchIndexStart, s = t[i].staticBatchIndexEnd - o;
                    E.instance.drawElements(4, s, 5123, 2 * o), n = ++i, L.renderBatch++, L.trianglesFaces += s / 3;
                } else i++;
            }
            o = t[n].staticBatchIndexStart, s = t[i].staticBatchIndexEnd - o, E.instance.drawElements(4, s, 5123, 2 * o), 
            L.renderBatch++, L.trianglesFaces += s / 3;
        }, a.dispose = function() {
            var e = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            y._addGPUMemory(-e), this._batchElements = null, this.batchOwner = null, this._vertexDeclaration = null, 
            this._bufferState.destroy(), this._vertexBuffer.destroy(), this._indexBuffer.destroy(), 
            this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = null;
        }, t.maxBatchVertexCount = 65535, t._batchIDCounter = 0, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempVector31", function() {
            return this._tempVector31 = new dn();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new Ce();
        }, "_tempMatrix4x40", function() {
            return this._tempMatrix4x40 = new ut();
        }, "_tempMatrix4x41", function() {
            return this._tempMatrix4x41 = new ut();
        } ]), t;
    }(), an = function(e) {
        function t(e) {
            this._floatCountPerVertices1 = 8, this._floatCountPerVertices2 = 1, this._increaseSegementCount = 128, 
            this._activeIndex = 0, this._endIndex = 0, this._needAddFirstVertex = !1, this._isTempEndVertex = !1, 
            this._subBirthTime = null, this._subDistance = null, this._segementCount = 0, this._vertices1 = null, 
            this._vertices2 = null, this._vertexBuffer1 = null, this._vertexBuffer2 = null, 
            this._owner = null, t.__super.call(this), this._lastFixedVertexPosition = new dn(), 
            this._bufferState = new Bt(), this._owner = e, this._resizeData(this._increaseSegementCount, this._bufferState);
        }
        r(t, "laya.d3.core.trail.TrailGeometry", J);
        var n = t.prototype;
        return n._resizeData = function(e, t) {
            this._segementCount = this._increaseSegementCount, this._subBirthTime = new Float32Array(e), 
            this._subDistance = new Float32Array(e);
            var n = 2 * e, i = Fe.vertexDeclaration1, r = Fe.vertexDeclaration2, a = [], o = n * i.vertexStride, s = n * r.vertexStride, l = o + s;
            this._vertices1 = new Float32Array(n * this._floatCountPerVertices1), this._vertexBuffer1 = new Kt(o, 35044, !1), 
            this._vertexBuffer1.vertexDeclaration = i, this._vertices2 = new Float32Array(n * this._floatCountPerVertices2), 
            this._vertexBuffer2 = new Kt(s, 35048, !1), this._vertexBuffer2.vertexDeclaration = r, 
            a.push(this._vertexBuffer1), a.push(this._vertexBuffer2), t.bind(), t.applyVertexBuffers(a), 
            t.unBind(), y._addMemory(l, l);
        }, n._resetData = function() {
            var e = this._endIndex - this._activeIndex;
            e == this._segementCount && (this._vertexBuffer1.destroy(), this._vertexBuffer2.destroy(), 
            this._segementCount += this._increaseSegementCount, this._resizeData(this._segementCount, this._bufferState)), 
            this._vertexBuffer1.setData(this._vertices1, 0, 2 * this._floatCountPerVertices1 * this._activeIndex, 2 * this._floatCountPerVertices1 * e), 
            this._vertexBuffer2.setData(this._vertices2, 0, 2 * this._floatCountPerVertices2 * this._activeIndex, 2 * this._floatCountPerVertices2 * e);
            var t = 4 * this._activeIndex, n = new Float32Array(this._subDistance.buffer, t, e), i = new Float32Array(this._subBirthTime.buffer, t, e);
            this._subDistance.set(n, 0), this._subBirthTime.set(i, 0), this._endIndex = e, this._activeIndex = 0;
        }, n._updateTrail = function(e, t, n) {
            dn.equals(t, n) || (this._endIndex - this._activeIndex == 0 ? this._addTrailByFirstPosition(e, n) : this._addTrailByNextPosition(e, n));
        }, n._addTrailByFirstPosition = function(e, t) {
            this._endIndex === this._segementCount && this._resetData(), this._subDistance[this._endIndex] = 0, 
            this._subBirthTime[this._endIndex] = this._owner._curtime, this._endIndex++, t.cloneTo(this._lastFixedVertexPosition), 
            this._needAddFirstVertex = !0;
        }, n._addTrailByNextPosition = function(e, n) {
            var i = t._tempVector30, r = t._tempVector31;
            switch (dn.subtract(n, this._lastFixedVertexPosition, i), this._owner.alignment) {
              case 0:
                dn.cross(i, e.transform.forward, r);
                break;

              case 1:
                dn.cross(i, this._owner._owner.transform.forward, r);
            }
            dn.normalize(r, r), dn.scale(r, this._owner.widthMultiplier / 2, r);
            var a = dn.scalarLength(i), o = 0, s = NaN;
            this._needAddFirstVertex && (this._updateVerticesByPositionData(n, r, this._endIndex - 1), 
            this._needAddFirstVertex = !1), a - this._owner.minVertexDistance >= Tt.zeroTolerance ? (this._isTempEndVertex ? (o = this._endIndex - 1, 
            s = a - this._subDistance[o], this._updateVerticesByPosition(n, r, a, o), this._owner._totalLength += s) : (this._endIndex === this._segementCount && this._resetData(), 
            this._updateVerticesByPosition(n, r, a, this._endIndex), this._owner._totalLength += a, 
            this._endIndex++), n.cloneTo(this._lastFixedVertexPosition), this._isTempEndVertex = !1) : (this._isTempEndVertex ? (o = this._endIndex - 1, 
            s = a - this._subDistance[o], this._updateVerticesByPosition(n, r, a, o), this._owner._totalLength += s) : (this._endIndex === this._segementCount && this._resetData(), 
            this._updateVerticesByPosition(n, r, a, this._endIndex), this._owner._totalLength += a, 
            this._endIndex++), this._isTempEndVertex = !0);
        }, n._updateVerticesByPositionData = function(e, t, n) {
            var i = 2 * this._floatCountPerVertices1 * n, r = e.elements, a = t.elements, o = this._owner._curtime;
            this._vertices1[i] = r[0], this._vertices1[i + 1] = r[1], this._vertices1[i + 2] = r[2], 
            this._vertices1[i + 3] = -a[0], this._vertices1[i + 4] = -a[1], this._vertices1[i + 5] = -a[2], 
            this._vertices1[i + 6] = o, this._vertices1[i + 7] = 1, this._vertices1[i + 8] = r[0], 
            this._vertices1[i + 9] = r[1], this._vertices1[i + 10] = r[2], this._vertices1[i + 11] = a[0], 
            this._vertices1[i + 12] = a[1], this._vertices1[i + 13] = a[2], this._vertices1[i + 14] = o, 
            this._vertices1[i + 15] = 0;
            var s = 2 * this._floatCountPerVertices1;
            this._vertexBuffer1.setData(this._vertices1, i, i, s);
        }, n._updateVerticesByPosition = function(e, t, n, i) {
            this._updateVerticesByPositionData(e, t, i), this._subDistance[i] = n, this._subBirthTime[i] = this._owner._curtime;
        }, n._updateVertexBufferUV = function() {
            for (var e = this._endIndex, t = 0, n = this._activeIndex, i = e; n < i; n++) {
                n !== this._activeIndex && (t += this._subDistance[n]);
                var r = NaN;
                r = 0 == this._owner.textureMode ? 1 - t / this._owner._totalLength : 1 - (this._owner._totalLength - t), 
                this._vertices2[2 * n] = r, this._vertices2[2 * n + 1] = r;
            }
            var a = 2 * this._activeIndex;
            this._vertexBuffer2.setData(this._vertices2, a, a, 2 * e - a);
        }, n._updateDisappear = function() {
            for (var e = this._endIndex, t = this._activeIndex; t < e && this._owner._curtime - this._subBirthTime[t] >= this._owner.time + Tt.zeroTolerance; t++) {
                var n = t + 1;
                if (n !== e && (this._owner._totalLength -= this._subDistance[n]), this._isTempEndVertex && n === e - 1) {
                    this._floatCountPerVertices1;
                    var i = this._lastFixedVertexPosition.elements;
                    i[0] = this._vertices1[0], i[1] = this._vertices1[1], i[2] = this._vertices1[2], 
                    this._isTempEndVertex = !1;
                }
                this._activeIndex++;
            }
        }, n._getType = function() {
            return t._type;
        }, n._prepareRender = function(e) {
            return this._endIndex - this._activeIndex > 1;
        }, n._render = function(e) {
            this._bufferState.bind();
            var t = 2 * this._activeIndex, n = 2 * this._endIndex - t;
            E.instance.drawArrays(5, t, n), L.renderBatch++, L.trianglesFaces += n - 2;
        }, n._destroy = function() {
            var e = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;
            y._addMemory(-e, -e), this._bufferState.destroy(), this._vertexBuffer1.destroy(), 
            this._vertexBuffer2.destroy(), this._bufferState = null, this._vertices1 = null, 
            this._vertexBuffer1 = null, this._vertices2 = null, this._vertexBuffer2 = null, 
            this._subBirthTime = null, this._subDistance = null, this._lastFixedVertexPosition = null;
        }, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempVector31", function() {
            return this._tempVector31 = new dn();
        }, "_type", function() {
            return this._type = J._typeCounter++;
        } ]), t;
    }(), on = function(e) {
        function t() {
            this.angle = NaN, this.radius = NaN, this.length = NaN, this.emitType = 0, t.__super.call(this), 
            this.angle = 25 / 180 * Math.PI, this.radius = 1, this.length = 5, this.emitType = 0, 
            this.randomDirection = !1;
        }
        r(t, "laya.d3.core.particleShuriKen.module.shape.ConeShape", e);
        var n = t.prototype;
        return n._getShapeBoundBox = function(e) {
            var t = this.radius + this.length * Math.sin(this.angle), n = this.length * Math.cos(this.angle), i = e.min.elements;
            i[0] = i[1] = -t, i[2] = 0;
            var r = e.max.elements;
            r[0] = r[1] = t, r[2] = n;
        }, n._getSpeedBoundBox = function(e) {
            var t = Math.sin(this.angle), n = e.min.elements;
            n[0] = n[1] = -t, n[2] = 0;
            var i = e.max.elements;
            i[0] = n[1] = t, i[2] = 1;
        }, n.generatePositionAndDirection = function(e, n, i, r) {
            var a, o = e.elements, s = n.elements, l = t._tempPositionPoint.elements, h = NaN, c = NaN, u = Math.cos(this.angle), _ = Math.sin(this.angle);
            switch (this.emitType) {
              case 0:
                i ? (i.seed = r[16], yt._randomPointInsideUnitCircle(t._tempPositionPoint, i), r[16] = i.seed) : yt._randomPointInsideUnitCircle(t._tempPositionPoint), 
                h = l[0], c = l[1], o[0] = h * this.radius, o[1] = c * this.radius, o[2] = 0, this.randomDirection ? (i ? (i.seed = r[17], 
                yt._randomPointInsideUnitCircle(t._tempDirectionPoint, i), r[17] = i.seed) : yt._randomPointInsideUnitCircle(t._tempDirectionPoint), 
                a = t._tempDirectionPoint.elements, s[0] = a[0] * _, s[1] = a[1] * _) : (s[0] = h * _, 
                s[1] = c * _), s[2] = u;
                break;

              case 1:
                i ? (i.seed = r[16], yt._randomPointUnitCircle(t._tempPositionPoint, i), r[16] = i.seed) : yt._randomPointUnitCircle(t._tempPositionPoint), 
                h = l[0], c = l[1], o[0] = h * this.radius, o[1] = c * this.radius, o[2] = 0, this.randomDirection ? (i ? (i.seed = r[17], 
                yt._randomPointInsideUnitCircle(t._tempDirectionPoint, i), r[17] = i.seed) : yt._randomPointInsideUnitCircle(t._tempDirectionPoint), 
                a = t._tempDirectionPoint.elements, s[0] = a[0] * _, s[1] = a[1] * _) : (s[0] = h * _, 
                s[1] = c * _), s[2] = u;
                break;

              case 2:
                i ? (i.seed = r[16], yt._randomPointInsideUnitCircle(t._tempPositionPoint, i)) : yt._randomPointInsideUnitCircle(t._tempPositionPoint), 
                h = l[0], c = l[1], o[0] = h * this.radius, o[1] = c * this.radius, o[2] = 0, s[0] = h * _, 
                s[1] = c * _, s[2] = u, dn.normalize(n, n), i ? (dn.scale(n, this.length * i.getFloat(), n), 
                r[16] = i.seed) : dn.scale(n, this.length * Math.random(), n), dn.add(e, n, e), 
                this.randomDirection && (i ? (i.seed = r[17], yt._randomPointUnitSphere(n, i), r[17] = i.seed) : yt._randomPointUnitSphere(n));
                break;

              case 3:
                i ? (i.seed = r[16], yt._randomPointUnitCircle(t._tempPositionPoint, i)) : yt._randomPointUnitCircle(t._tempPositionPoint), 
                h = l[0], c = l[1], o[0] = h * this.radius, o[1] = c * this.radius, o[2] = 0, s[0] = h * _, 
                s[1] = c * _, s[2] = u, dn.normalize(n, n), i ? (dn.scale(n, this.length * i.getFloat(), n), 
                r[16] = i.seed) : dn.scale(n, this.length * Math.random(), n), dn.add(e, n, e), 
                this.randomDirection && (i ? (i.seed = r[17], yt._randomPointUnitSphere(n, i), r[17] = i.seed) : yt._randomPointUnitSphere(n));
                break;

              default:
                throw new Error("ConeShape:emitType is invalid.");
            }
        }, n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n.angle = this.angle, n.radius = this.radius, n.length = this.length, n.emitType = this.emitType, 
            n.randomDirection = this.randomDirection;
        }, i(t, [ "_tempPositionPoint", function() {
            return this._tempPositionPoint = new fn();
        }, "_tempDirectionPoint", function() {
            return this._tempDirectionPoint = new fn();
        } ]), t;
    }(Y), sn = function(e) {
        function t() {
            this.x = NaN, this.y = NaN, this.z = NaN, t.__super.call(this), this.x = 1, this.y = 1, 
            this.z = 1, this.randomDirection = !1;
        }
        r(t, "laya.d3.core.particleShuriKen.module.shape.BoxShape", e);
        var n = t.prototype;
        return n._getShapeBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = .5 * -this.x, t[1] = .5 * -this.y, t[2] = .5 * -this.z;
            var n = e.max.elements;
            n[0] = .5 * this.x, n[1] = .5 * this.y, n[2] = .5 * this.z;
        }, n._getSpeedBoundBox = function(e) {
            var t = e.min.elements;
            t[0] = 0, t[1] = 0, t[2] = 0;
            var n = e.max.elements;
            n[0] = 0, n[1] = 1, n[2] = 0;
        }, n.generatePositionAndDirection = function(e, t, n, i) {
            var r = e.elements, a = t.elements;
            n ? (n.seed = i[16], yt._randomPointInsideHalfUnitBox(e, n), i[16] = n.seed) : yt._randomPointInsideHalfUnitBox(e), 
            r[0] = this.x * r[0], r[1] = this.y * r[1], r[2] = this.z * r[2], this.randomDirection ? n ? (n.seed = i[17], 
            yt._randomPointUnitSphere(t, n), i[17] = n.seed) : yt._randomPointUnitSphere(t) : (a[0] = 0, 
            a[1] = 0, a[2] = 1);
        }, n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n.x = this.x, n.y = this.y, n.z = this.z, n.randomDirection = this.randomDirection;
        }, t;
    }(Y), ln = (function(e) {
        function t(e, n) {
            t.__super.call(this), this._normal = e, this._offset = n, this._type = 6, t._nativeNormal.setValue(-e.x, e.y, e.z), 
            this._nativeShape = new Dt._physics3D.btStaticPlaneShape(t._nativeNormal, n);
        }
        r(t, "laya.d3.physics.shape.StaticPlaneColliderShape", K);
        t.prototype.clone = function() {
            var e = new t(this._normal, this._offset);
            return this.cloneTo(e), e;
        }, i(t, [ "_nativeNormal", function() {
            return this._nativeNormal = new Dt._physics3D.btVector3(0, 0, 0);
        } ]);
    }(), function(e) {
        function t(e, n, i, r, a, o, s, l, h, c, u, _, d, f) {
            this._cornerTextureCoordinate = null, this._positionStartLifeTime = null, this._velocity = null, 
            this._startColor = null, this._startSize = null, this._startRotation0 = null, this._startRotation1 = null, 
            this._startRotation2 = null, this._startLifeTime = NaN, this._time = NaN, this._startSpeed = NaN, 
            this._randoms0 = null, this._randoms1 = null, this._simulationWorldPostion = null, 
            t.__super.call(this), this._cornerTextureCoordinate = e, this._positionStartLifeTime = n, 
            this._velocity = i, this._startColor = r, this._startSize = a, this._startRotation0 = o, 
            this._startRotation1 = s, this._startRotation2 = l, this._startLifeTime = h, this._time = c, 
            this._startSpeed = u, this._randoms0 = this.random0, this._randoms1 = this.random1, 
            this._simulationWorldPostion = f;
        }
        r(t, "laya.d3.graphics.Vertex.VertexShurikenParticleMesh", Le);
        var n = t.prototype;
        return a(0, n, "cornerTextureCoordinate", function() {
            return this._cornerTextureCoordinate;
        }), a(0, n, "velocity", function() {
            return this._velocity;
        }), a(0, n, "position", function() {
            return this._positionStartLifeTime;
        }), a(0, n, "random0", function() {
            return this._randoms0;
        }), a(0, n, "startSize", function() {
            return this._startSize;
        }), a(0, n, "startColor", function() {
            return this._startColor;
        }), a(0, n, "startRotation0", function() {
            return this._startRotation0;
        }), a(0, n, "startRotation1", function() {
            return this._startRotation1;
        }), a(0, n, "random1", function() {
            return this._randoms1;
        }), a(0, n, "startRotation2", function() {
            return this._startRotation2;
        }), a(0, n, "startLifeTime", function() {
            return this._startLifeTime;
        }), a(0, n, "time", function() {
            return this._time;
        }), a(0, n, "startSpeed", function() {
            return this._startSpeed;
        }), a(0, n, "simulationWorldPostion", function() {
            return this._simulationWorldPostion;
        }), a(1, t, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }, laya.d3.graphics.Vertex.VertexShuriKenParticle._$SET_vertexDeclaration), i(t, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new G(172, [ new Re(0, "vector3", 1), new Re(12, "vector4", 2), new Re(28, "vector2", 3), new Re(36, "vector4", 4), new Re(52, "vector4", 5), new Re(68, "vector4", 6), new Re(84, "vector3", 8), new Re(96, "vector3", 9), new Re(108, "single", 10), new Re(112, "vector4", 11), new Re(128, "vector4", 12), new Re(144, "vector3", 13), new Re(156, "vector4", 14) ]);
        } ]), t;
    }()), hn = function(e) {
        function t(e, n) {
            this._stacks = 0, this._slices = 0, t.__super.call(this), void 0 === e && (e = 48), 
            void 0 === n && (n = 48), this._stacks = e, this._slices = n;
            for (var i = lt.vertexDeclaration, r = i.vertexStride / 4, a = (this._stacks + 1) * (this._slices + 1), o = 3 * this._stacks * (this._slices + 1) * 2, s = new Float32Array(a * r), l = new Uint16Array(o), h = Math.PI / this._stacks, c = 2 * Math.PI / this._slices, u = 0, _ = 0, d = 0, f = 0; f < this._stacks + 1; f++) for (var m = Math.sin(f * h), p = Math.cos(f * h), T = 0; T < this._slices + 1; T++) {
                var E = m * Math.sin(T * c), v = m * Math.cos(T * c);
                s[_ + 0] = E * t._radius, s[_ + 1] = p * t._radius, s[_ + 2] = v * t._radius, s[_ + 3] = -T / this._slices + .75, 
                s[_ + 4] = f / this._stacks, _ += r, f != this._stacks - 1 && (l[d++] = u + 1, l[d++] = u, 
                l[d++] = u + (this._slices + 1), l[d++] = u + (this._slices + 1), l[d++] = u, l[d++] = u + this._slices, 
                u++);
            }
            this._vertexBuffer = new Kt(4 * s.length, 35044, !1), this._vertexBuffer.vertexDeclaration = i, 
            this._indexBuffer = new qt("ushort", l.length, 35044, !1), this._vertexBuffer.setData(s), 
            this._indexBuffer.setData(l);
            var g = new Bt();
            g.bind(), g.applyVertexBuffer(this._vertexBuffer), g.applyIndexBuffer(this._indexBuffer), 
            g.unBind(), this._bufferState = g;
        }
        r(t, "laya.d3.resource.models.SkyDome", Te);
        var n = t.prototype;
        return n._render = function(e) {
            var t = this._indexBuffer.indexCount;
            E.instance.drawElements(4, t, 5123, 0), L.trianglesFaces += t / 3, L.renderBatch++;
        }, a(0, n, "stacks", function() {
            return this._stacks;
        }), a(0, n, "slices", function() {
            return this._slices;
        }), t.__init__ = function() {
            t.instance = new t();
        }, t._radius = 1, t.instance = null, t;
    }(), cn = function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.core.FloatArrayKeyframe", e);
        return t.prototype.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            t.data = this.data.slice();
        }, t;
    }($), un = function(e) {
        function t() {
            this._cacheBatchRender = [], this._cacheBufferStates = [], this._opaqueBatchMarks = [], 
            t.__super.call(this), en.instance = new en(), this._updateCountMark = 0;
        }
        r(t, "laya.d3.graphics.MeshRenderDynamicBatchManager", e);
        var n = t.prototype;
        return n._getBufferState = function(e) {
            var t = this._cacheBufferStates[e.id];
            if (!t) {
                var n = en.instance;
                (t = new Bt()).bind();
                var i = n._vertexBuffer;
                i.vertexDeclaration = e, t.applyVertexBuffer(i), t.applyIndexBuffer(n._indexBuffer), 
                t.unBind(), this._cacheBufferStates[e.id] = t;
            }
            return t;
        }, n._getBatchRender = function(e, t) {
            var n = this._cacheBatchRender[e];
            n || (n = this._cacheBatchRender[e] = o(2, null));
            var i = n[t ? 1 : 0];
            return i || ((i = new Ln(null)).lightmapIndex = e, i.receiveShadow = t, n[t ? 1 : 0] = i), 
            i;
        }, n._getBatchRenderElementFromPool = function() {
            var e = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
            return e || (e = new bt(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = e, 
            e.dynamicBatchElementList = []), e;
        }, n._clear = function() {
            e.prototype._clear.call(this), this._updateCountMark++;
        }, i(t, [ "instance", function() {
            return this.instance = new t();
        } ]), t;
    }(ae), _n = function(e) {
        function t(e, n, i, r) {
            t.__super.call(this), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), 
            void 0 === r && (r = 0);
            var a = this.elements = new Float32Array(4);
            a[0] = e, a[1] = n, a[2] = i, a[3] = r;
        }
        r(t, "laya.d3.math.Vector4", se);
        var o = t.prototype;
        return n.imps(o, {
            "laya.d3.core.IClone": !0
        }), o.fromArray = function(e, t) {
            void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1], 
            this.elements[2] = e[t + 2], this.elements[3] = e[t + 3];
        }, o.cloneTo = function(e) {
            var t = e.elements, n = this.elements;
            t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3];
        }, o.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, o.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, o.lengthSquared = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, a(0, o, "x", function() {
            return this.elements[0];
        }, function(e) {
            this.elements[0] = e;
        }), a(0, o, "y", function() {
            return this.elements[1];
        }, function(e) {
            this.elements[1] = e;
        }), a(0, o, "z", function() {
            return this.elements[2];
        }, function(e) {
            this.elements[2] = e;
        }), a(0, o, "w", function() {
            return this.elements[3];
        }, function(e) {
            this.elements[3] = e;
        }), t.lerp = function(e, t, n, i) {
            var r = i.elements, a = e.elements, o = t.elements, s = a[0], l = a[1], h = a[2], c = a[3];
            r[0] = s + n * (o[0] - s), r[1] = l + n * (o[1] - l), r[2] = h + n * (o[2] - h), 
            r[3] = c + n * (o[3] - c);
        }, t.transformByM4x4 = function(e, t, n) {
            var i = e.elements, r = i[0], a = i[1], o = i[2], s = i[3], l = t.elements, h = n.elements;
            h[0] = r * l[0] + a * l[4] + o * l[8] + s * l[12], h[1] = r * l[1] + a * l[5] + o * l[9] + s * l[13], 
            h[2] = r * l[2] + a * l[6] + o * l[10] + s * l[14], h[3] = r * l[3] + a * l[7] + o * l[11] + s * l[15];
        }, t.equals = function(e, t) {
            var n = e.elements, i = t.elements;
            return Tt.nearEqual(Math.abs(n[0]), Math.abs(i[0])) && Tt.nearEqual(Math.abs(n[1]), Math.abs(i[1])) && Tt.nearEqual(Math.abs(n[2]), Math.abs(i[2])) && Tt.nearEqual(Math.abs(n[3]), Math.abs(i[3]));
        }, t.normalize = function(e, t) {
            var n = e.elements, i = t.elements, r = e.length();
            r > 0 && (i[0] = n[0] * r, i[1] = n[1] * r, i[2] = n[2] * r, i[3] = n[3] * r);
        }, t.add = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2], i[3] = r[3] + a[3];
        }, t.subtract = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] - a[0], i[1] = r[1] - a[1], i[2] = r[2] - a[2], i[3] = r[3] - a[3];
        }, t.multiply = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] * a[0], i[1] = r[1] * a[1], i[2] = r[2] * a[2], i[3] = r[3] * a[3];
        }, t.scale = function(e, t, n) {
            var i = n.elements, r = e.elements;
            i[0] = r[0] * t, i[1] = r[1] * t, i[2] = r[2] * t, i[3] = r[3] * t;
        }, t.Clamp = function(e, t, n, i) {
            var r = e.elements, a = r[0], o = r[1], s = r[2], l = r[3], h = t.elements, c = h[0], u = h[1], _ = h[2], d = h[3], f = n.elements, m = f[0], p = f[1], T = f[2], E = f[3], v = i.elements;
            a = (a = a > m ? m : a) < c ? c : a, o = (o = o > p ? p : o) < u ? u : o, s = (s = s > T ? T : s) < _ ? _ : s, 
            l = (l = l > E ? E : l) < d ? d : l, v[0] = a, v[1] = o, v[2] = s, v[3] = l;
        }, t.distanceSquared = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2], s = n[3] - i[3];
            return r * r + a * a + o * o + s * s;
        }, t.distance = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2], s = n[3] - i[3];
            return Math.sqrt(r * r + a * a + o * o + s * s);
        }, t.dot = function(e, t) {
            var n = e.elements, i = t.elements;
            return n[0] * i[0] + n[1] * i[1] + n[2] * i[2] + n[3] * i[3];
        }, t.min = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = Math.min(r[0], a[0]), i[1] = Math.min(r[1], a[1]), i[2] = Math.min(r[2], a[2]), 
            i[3] = Math.min(r[3], a[3]);
        }, t.max = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = Math.max(r[0], a[0]), i[1] = Math.max(r[1], a[1]), i[2] = Math.max(r[2], a[2]), 
            i[3] = Math.max(r[3], a[3]);
        }, i(t, [ "ZERO", function() {
            return this.ZERO = new t();
        }, "ONE", function() {
            return this.ONE = new t(1, 1, 1, 1);
        }, "UnitX", function() {
            return this.UnitX = new t(1, 0, 0, 0);
        }, "UnitY", function() {
            return this.UnitY = new t(0, 1, 0, 0);
        }, "UnitZ", function() {
            return this.UnitZ = new t(0, 0, 1, 0);
        }, "UnitW", function() {
            return this.UnitW = new t(0, 0, 0, 1);
        } ]), t;
    }(), dn = function(e) {
        function t(e, n, i, r) {
            t.__super.call(this), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0);
            var a;
            a = r || new Float32Array(3), this.elements = a, a[0] = e, a[1] = n, a[2] = i;
        }
        r(t, "laya.d3.math.Vector3", se);
        var o = t.prototype;
        return n.imps(o, {
            "laya.d3.core.IClone": !0
        }), o.setValue = function(e, t, n) {
            this.elements[0] = e, this.elements[1] = t, this.elements[2] = n;
        }, o.fromArray = function(e, t) {
            void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1], 
            this.elements[2] = e[t + 2];
        }, o.cloneTo = function(e) {
            var t = e.elements, n = this.elements;
            t[0] = n[0], t[1] = n[1], t[2] = n[2];
        }, o.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, o.toDefault = function() {
            this.elements[0] = 0, this.elements[1] = 0, this.elements[2] = 0;
        }, a(0, o, "x", function() {
            return this.elements[0];
        }, function(e) {
            this.elements[0] = e;
        }), a(0, o, "y", function() {
            return this.elements[1];
        }, function(e) {
            this.elements[1] = e;
        }), a(0, o, "z", function() {
            return this.elements[2];
        }, function(e) {
            this.elements[2] = e;
        }), t.distanceSquared = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2];
            return r * r + a * a + o * o;
        }, t.distance = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2];
            return Math.sqrt(r * r + a * a + o * o);
        }, t.min = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = Math.min(r[0], a[0]), i[1] = Math.min(r[1], a[1]), i[2] = Math.min(r[2], a[2]);
        }, t.max = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = Math.max(r[0], a[0]), i[1] = Math.max(r[1], a[1]), i[2] = Math.max(r[2], a[2]);
        }, t.transformQuat = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements, o = r[0], s = r[1], l = r[2], h = a[0], c = a[1], u = a[2], _ = a[3], d = _ * o + c * l - u * s, f = _ * s + u * o - h * l, m = _ * l + h * s - c * o, p = -h * o - c * s - u * l;
            i[0] = d * _ + p * -h + f * -u - m * -c, i[1] = f * _ + p * -c + m * -h - d * -u, 
            i[2] = m * _ + p * -u + d * -c - f * -h;
        }, t.scalarLength = function(e) {
            var t = e.elements, n = t[0], i = t[1], r = t[2];
            return Math.sqrt(n * n + i * i + r * r);
        }, t.scalarLengthSquared = function(e) {
            var t = e.elements, n = t[0], i = t[1], r = t[2];
            return n * n + i * i + r * r;
        }, t.normalize = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0], a = n[1], o = n[2], s = r * r + a * a + o * o;
            s > 0 && (s = 1 / Math.sqrt(s), i[0] = n[0] * s, i[1] = n[1] * s, i[2] = n[2] * s);
        }, t.multiply = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] * a[0], i[1] = r[1] * a[1], i[2] = r[2] * a[2];
        }, t.scale = function(e, t, n) {
            var i = n.elements, r = e.elements;
            i[0] = r[0] * t, i[1] = r[1] * t, i[2] = r[2] * t;
        }, t.lerp = function(e, t, n, i) {
            var r = i.elements, a = e.elements, o = t.elements, s = a[0], l = a[1], h = a[2];
            r[0] = s + n * (o[0] - s), r[1] = l + n * (o[1] - l), r[2] = h + n * (o[2] - h);
        }, t.transformV3ToV3 = function(e, n, i) {
            var r = t._tempVector4;
            t.transformV3ToV4(e, n, r);
            var a = r.elements, o = i.elements;
            o[0] = a[0], o[1] = a[1], o[2] = a[2];
        }, t.transformV3ToV4 = function(e, t, n) {
            var i = e.elements, r = i[0], a = i[1], o = i[2], s = t.elements, l = n.elements;
            l[0] = r * s[0] + a * s[4] + o * s[8] + s[12], l[1] = r * s[1] + a * s[5] + o * s[9] + s[13], 
            l[2] = r * s[2] + a * s[6] + o * s[10] + s[14], l[3] = r * s[3] + a * s[7] + o * s[11] + s[15];
        }, t.TransformNormal = function(e, t, n) {
            var i = e.elements, r = i[0], a = i[1], o = i[2], s = t.elements, l = n.elements;
            l[0] = r * s[0] + a * s[4] + o * s[8], l[1] = r * s[1] + a * s[5] + o * s[9], l[2] = r * s[2] + a * s[6] + o * s[10];
        }, t.transformCoordinate = function(e, t, n) {
            var i = e.elements, r = i[0], a = i[1], o = i[2], s = t.elements, l = r * s[3] + a * s[7] + o * s[11] + s[15], h = n.elements;
            h[0] = r * s[0] + a * s[4] + o * s[8] + s[12] / l, h[1] = r * s[1] + a * s[5] + o * s[9] + s[13] / l, 
            h[2] = r * s[2] + a * s[6] + o * s[10] + s[14] / l;
        }, t.Clamp = function(e, t, n, i) {
            var r = e.elements, a = r[0], o = r[1], s = r[2], l = t.elements, h = l[0], c = l[1], u = l[2], _ = n.elements, d = _[0], f = _[1], m = _[2], p = i.elements;
            a = (a = a > d ? d : a) < h ? h : a, o = (o = o > f ? f : o) < c ? c : o, s = (s = s > m ? m : s) < u ? u : s, 
            p[0] = a, p[1] = o, p[2] = s;
        }, t.add = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2];
        }, t.subtract = function(e, t, n) {
            var i = n.elements, r = e.elements, a = t.elements;
            i[0] = r[0] - a[0], i[1] = r[1] - a[1], i[2] = r[2] - a[2];
        }, t.cross = function(e, t, n) {
            var i = e.elements, r = t.elements, a = n.elements, o = i[0], s = i[1], l = i[2], h = r[0], c = r[1], u = r[2];
            a[0] = s * u - l * c, a[1] = l * h - o * u, a[2] = o * c - s * h;
        }, t.dot = function(e, t) {
            var n = e.elements, i = t.elements;
            return n[0] * i[0] + n[1] * i[1] + n[2] * i[2];
        }, t.equals = function(e, t) {
            var n = e.elements, i = t.elements;
            return Tt.nearEqual(n[0], i[0]) && Tt.nearEqual(n[1], i[1]) && Tt.nearEqual(n[2], i[2]);
        }, t.ZERO = new t(0, 0, 0), t.ONE = new t(1, 1, 1), t.NegativeUnitX = new t(-1, 0, 0), 
        t.UnitX = new t(1, 0, 0), t.UnitY = new t(0, 1, 0), t.UnitZ = new t(0, 0, 1), t.ForwardRH = new t(0, 0, -1), 
        t.ForwardLH = new t(0, 0, 1), t.Up = new t(0, 1, 0), t.NAN = new t(NaN, NaN, NaN), 
        i(t, [ "_tempVector4", function() {
            return this._tempVector4 = new _n();
        } ]), t;
    }(), fn = function(e) {
        function t(e, n) {
            t.__super.call(this), void 0 === e && (e = 0), void 0 === n && (n = 0);
            var i = this.elements = new Float32Array(2);
            i[0] = e, i[1] = n;
        }
        r(t, "laya.d3.math.Vector2", se);
        var o = t.prototype;
        return n.imps(o, {
            "laya.d3.core.IClone": !0
        }), o.fromArray = function(e, t) {
            void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1];
        }, o.cloneTo = function(e) {
            var t = e.elements, n = this.elements;
            t[0] = n[0], t[1] = n[1];
        }, o.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, o, "x", function() {
            return this.elements[0];
        }, function(e) {
            this.elements[0] = e;
        }), a(0, o, "y", function() {
            return this.elements[1];
        }, function(e) {
            this.elements[1] = e;
        }), t.scale = function(e, t, n) {
            var i = n.elements, r = e.elements;
            i[0] = r[0] * t, i[1] = r[1] * t;
        }, t.dot = function(e, t) {
            var n = e.elements, i = t.elements;
            return n[0] * i[0] + n[1] * i[1];
        }, t.normalize = function(e, t) {
            var n = e.elements, i = t.elements, r = n[0], a = n[1], o = r * r + a * a;
            o > 0 && (o = 1 / Math.sqrt(o), i[0] = n[0] * o, i[1] = n[1] * o);
        }, t.scalarLength = function(e) {
            var t = e.elements, n = t[0], i = t[1];
            return Math.sqrt(n * n + i * i);
        }, i(t, [ "ZERO", function() {
            return this.ZERO = new t(0, 0);
        }, "ONE", function() {
            return this.ONE = new t(1, 1);
        } ]), t;
    }(), mn = function(e) {
        function t() {
            this._opaqueBatchMarks = [], t.__super.call(this), this._updateCountMark = 0;
        }
        r(t, "laya.d3.graphics.MeshRenderStaticBatchManager", e);
        var n = t.prototype;
        return n._compare = function(e, t) {
            var n = e._render, i = t._render, r = e.meshFilter.sharedMesh, a = t.meshFilter.sharedMesh, o = n.lightmapIndex - i.lightmapIndex;
            if (0 === o) {
                var s = (n.receiveShadow ? 1 : 0) - (i.receiveShadow ? 1 : 0);
                if (0 === s) {
                    var l = n.sharedMaterial.id - i.sharedMaterial.id;
                    if (0 === l) {
                        var h = r._vertexBuffers[0].vertexDeclaration.id - a._vertexBuffers[0].vertexDeclaration.id;
                        return 0 === h ? a._indexBuffer.indexCount - r._indexBuffer.indexCount : h;
                    }
                    return l;
                }
                return s;
            }
            return o;
        }, n._getBatchRenderElementFromPool = function() {
            var e = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
            return e || (e = new bt(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = e, 
            e.staticBatchElementList = []), e;
        }, n._getStaticBatch = function(e, n) {
            var i = e ? e.id : 0, r = this._staticBatches[i];
            r || (r = this._staticBatches[i] = new Q(e));
            var a = r._batches;
            return a[n] || (a[n] = new rn(r, n, t._verDec));
        }, n._initStaticBatchs = function(e) {
            this._quickSort(this._initBatchSprites, 0, this._initBatchSprites.length - 1);
            for (var t, n = !1, i = 0, r = 0, a = this._initBatchSprites.length; r < a; r++) {
                var o = this._initBatchSprites[r];
                if (n) t.addTest(o) ? t.add(o) : (n = !1, i++); else {
                    r !== a - 1 && ((t = this._getStaticBatch(e, i)).add(o), n = !0);
                }
            }
            for (var s in this._staticBatches) {
                var l = this._staticBatches[s]._batches;
                for (r = 0, a = l.length; r < a; r++) l[r].finishInit();
            }
            this._initBatchSprites.length = 0;
        }, n._destroyRenderSprite = function(e) {
            var t = e._render._staticBatch;
            if (t.remove(e), 0 === t._batchElements.length) {
                var n = t.batchOwner._owner, i = n ? n.id : 0, r = this._staticBatches[i]._batches;
                r.splice(t.number, 1), 0 === r.length && delete this._staticBatches[i], t.dispose();
            }
        }, n._clear = function() {
            e.prototype._clear.call(this), this._updateCountMark++;
        }, n._garbageCollection = function() {
            for (var e in this._staticBatches) for (var t = this._staticBatches[e]._batches, n = 0, i = t.length; n < i; n++) {
                var r = t[n];
                0 === r._batchElements.length && (r.dispose(), t.splice(n, 1), n--, 0 === --i && delete this._staticBatches[e]);
            }
        }, i(t, [ "_verDec", function() {
            return this._verDec = je.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT");
        }, "instance", function() {
            return this.instance = new t();
        } ]), t;
    }(Pe), pn = function(e) {
        function t(e) {
            t.__super.call(this), this._tempRotationMatrix = new ut(), this._uvLength = new fn(), 
            this._bufferState = new Bt(), this._firstActiveElement = 0, this._firstNewElement = 0, 
            this._firstFreeElement = 0, this._firstRetiredElement = 0, this._owner = e, this._ownerRender = e.particleRenderer, 
            this._boundingBoxCorners = o(8, null), this._boundingSphere = new k(new dn(), Number.MAX_VALUE), 
            this._boundingBox = new ne(new dn(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new dn(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE)), 
            this._currentTime = 0, this._isEmitting = !1, this._isPlaying = !1, this._isPaused = !1, 
            this._burstsIndex = 0, this._frameRateTime = 0, this._emissionTime = 0, this._totalDelayTime = 0, 
            this._simulateUpdate = !1, this._bufferMaxParticles = 1, this.duration = 5, this.looping = !0, 
            this.prewarm = !1, this.startDelayType = 0, this.startDelay = 0, this.startDelayMin = 0, 
            this.startDelayMax = 0, this._startLifetimeType = 0, this._startLifetimeConstant = 5, 
            this._startLifeTimeGradient = new Ie(), this._startLifetimeConstantMin = 0, this._startLifetimeConstantMax = 5, 
            this._startLifeTimeGradientMin = new Ie(), this._startLifeTimeGradientMax = new Ie(), 
            this._maxStartLifetime = 5, this.startSpeedType = 0, this.startSpeedConstant = 5, 
            this.startSpeedConstantMin = 0, this.startSpeedConstantMax = 5, this.threeDStartSize = !1, 
            this.startSizeType = 0, this.startSizeConstant = 1, this.startSizeConstantSeparate = new dn(1, 1, 1), 
            this.startSizeConstantMin = 0, this.startSizeConstantMax = 1, this.startSizeConstantMinSeparate = new dn(0, 0, 0), 
            this.startSizeConstantMaxSeparate = new dn(1, 1, 1), this.threeDStartRotation = !1, 
            this.startRotationType = 0, this.startRotationConstant = 0, this.startRotationConstantSeparate = new dn(0, 0, 0), 
            this.startRotationConstantMin = 0, this.startRotationConstantMax = 0, this.startRotationConstantMinSeparate = new dn(0, 0, 0), 
            this.startRotationConstantMaxSeparate = new dn(0, 0, 0), this.randomizeRotationDirection = 0, 
            this.startColorType = 0, this.startColorConstant = new _n(1, 1, 1, 1), this.startColorConstantMin = new _n(1, 1, 1, 1), 
            this.startColorConstantMax = new _n(1, 1, 1, 1), this.gravityModifier = 0, this.simulationSpace = 1, 
            this.scaleMode = 0, this.playOnAwake = !0, this._rand = new dt(0), this.autoRandomSeed = !0, 
            this.randomSeed = new Uint32Array(1), this._randomSeeds = new Uint32Array(t._RANDOMOFFSET.length), 
            this.isPerformanceMode = !0, this._emission = new De(), this._emission.enbale = !0;
        }
        r(t, "laya.d3.core.particleShuriKen.ShurikenParticleSystem", e);
        var s = t.prototype;
        return n.imps(s, {
            "laya.d3.core.IClone": !0
        }), s._getVertexBuffer = function(e) {
            return void 0 === e && (e = 0), 0 === e ? this._vertexBuffer : null;
        }, s._getIndexBuffer = function() {
            return this._indexBuffer;
        }, s._generateBoundingSphere = function() {
            var e = this._boundingSphere.center.elements;
            e[0] = 0, e[1] = 0, e[2] = 0, this._boundingSphere.radius = Number.MAX_VALUE;
        }, s._generateBoundingBox = function() {
            var e = this._owner.particleRenderer, n = this._boundingBox.min, i = this._boundingBox.max, r = 0, a = 0, o = NaN;
            switch (this.startLifetimeType) {
              case 0:
                o = this.startLifetimeConstant;
                break;

              case 1:
                o = -Number.MAX_VALUE;
                var s = s;
                for (r = 0, a = s.gradientCount; r < a; r++) o = Math.max(o, s.getValueByIndex(r));
                break;

              case 2:
                o = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                break;

              case 3:
                o = -Number.MAX_VALUE;
                var l = l;
                for (r = 0, a = l.gradientCount; r < a; r++) o = Math.max(o, l.getValueByIndex(r));
                var h = h;
                for (r = 0, a = h.gradientCount; r < a; r++) o = Math.max(o, h.getValueByIndex(r));
            }
            var c = NaN, u = NaN;
            switch (this.startSpeedType) {
              case 0:
                c = u = this.startSpeedConstant;
                break;

              case 1:
                break;

              case 2:
                c = this.startLifetimeConstantMin, u = this.startLifetimeConstantMax;
            }
            var _, d, f, m;
            this._shape && this._shape.enable || (_ = d = dn.ZERO, f = dn.ZERO, m = dn.UnitZ);
            var p = new dn(f.x * c, f.y * c, f.z * c), T = new dn(m.x * u, m.y * u, m.z * u);
            if (this._velocityOverLifetime && this._velocityOverLifetime.enbale) {
                var E = this._velocityOverLifetime.velocity;
                switch (E.type) {
                  case 0:
                    E.constant;
                    break;

                  case 1:
                    new dn(E.gradientX.getAverageValue(), E.gradientY.getAverageValue(), E.gradientZ.getAverageValue());
                    break;

                  case 2:
                    E.constantMin, E.constantMax;
                    break;

                  case 3:
                    new dn(E.gradientXMin.getAverageValue(), E.gradientYMin.getAverageValue(), E.gradientZMin.getAverageValue()), 
                    new dn(E.gradientXMax.getAverageValue(), E.gradientYMax.getAverageValue(), E.gradientZMax.getAverageValue());
                }
            }
            var v, g, S = this._owner.transform, R = S.position, A = t._tempVector39, I = A.elements, D = e.renderMode;
            switch (this.scaleMode) {
              case 0:
                var y = S.scale;
                v = y, I[0] = y.x, I[1] = y.z, I[2] = y.y, 1 === D && (g = y);
                break;

              case 1:
                var M = S.localScale;
                v = M, I[0] = M.x, I[1] = M.z, I[2] = M.y, 1 === D && (g = M);
                break;

              case 2:
                v = S.scale, I[0] = I[1] = I[2] = 1, 1 === D && (g = dn.ONE);
            }
            var C, x;
            switch (this._velocityOverLifetime && this._velocityOverLifetime.enbale || (C = new dn(p.x * o, p.y * o, p.z * o), 
            x = new dn(T.x * o, T.y * o, T.z * o), 2 != this.scaleMode ? (dn.add(_, C, n), dn.multiply(v, n, n), 
            dn.add(d, x, i), dn.multiply(v, i, i)) : (dn.multiply(v, _, n), dn.add(n, C, n), 
            dn.multiply(v, d, i), dn.add(i, x, i))), this.simulationSpace) {
              case 0:
                break;

              case 1:
                dn.add(n, R, n), dn.add(i, R, i);
            }
            var O = NaN, L = NaN;
            switch (this.startSizeType) {
              case 0:
                if (this.threeDStartSize) {
                    var N = N;
                    O = Math.max(N.x, N.y), 1 === D && (L = N.y);
                } else O = this.startSizeConstant, 1 === D && (L = this.startSizeConstant);
                break;

              case 1:
                break;

              case 2:
                if (this.threeDStartSize) {
                    var V = V;
                    O = Math.max(V.x, V.y), 1 === D && (L = V.y);
                } else O = this.startSizeConstantMax, 1 === D && (L = this.startSizeConstantMax);
            }
            if (this._sizeOverLifetime && this._sizeOverLifetime.enbale) {
                this._sizeOverLifetime.size;
                O *= this._sizeOverLifetime.size.getMaxSizeInGradient();
            }
            var P = t._tempVector30, w = P.elements, F = NaN, b = NaN;
            switch (D) {
              case 0:
                F = O * t.halfKSqrtOf2, dn.scale(A, O, P), dn.subtract(n, P, n), dn.add(i, P, i);
                break;

              case 1:
                var B = t._tempVector31, U = t._tempVector32, G = t._tempVector33, H = t._tempVector34;
                this._velocityOverLifetime && this._velocityOverLifetime.enbale || (dn.multiply(g, T, U), 
                dn.multiply(g, p, G));
                var z = L * e.stretchedBillboardLengthScale, k = dn.scalarLength(U) * e.stretchedBillboardSpeedScale + z, X = dn.scalarLength(G) * e.stretchedBillboardSpeedScale + z, W = t._tempVector35, Y = t._tempVector36;
                dn.normalize(U, W), dn.scale(W, k, H), dn.subtract(x, H, H), dn.normalize(G, Y), 
                dn.scale(Y, X, B), dn.add(C, B, B), F = O * t.halfKSqrtOf2, dn.scale(A, F, P);
                var Z = t._tempVector37, K = t._tempVector38;
                dn.scale(W, .5, Z), dn.scale(Y, .5, K), dn.multiply(Z, A, Z), dn.multiply(K, A, K), 
                dn.add(n, K, n), dn.min(n, H, n), dn.subtract(n, P, n), dn.subtract(i, Z, i), dn.max(i, B, i), 
                dn.add(i, P, i);
                break;

              case 2:
                b = .5 * (O *= Math.cos(.7853981633974483)), w[0] = A.x * b, w[1] = A.z * b, dn.subtract(n, P, n), 
                dn.add(i, P, i);
                break;

              case 3:
                b = .5 * (O *= Math.cos(.7853981633974483)), dn.scale(A, b, P), dn.subtract(n, P, n), 
                dn.add(i, P, i);
            }
            this._boundingBox.getCorners(this._boundingBoxCorners);
        }, s._updateEmission = function() {
            if (this.isAlive) if (this._simulateUpdate) this._simulateUpdate = !1; else {
                var e = this._startUpdateLoopCount === L.loopCount || this._isPaused ? 0 : this._owner._scene.timer._delta / 1e3;
                e = Math.min(t._maxElapsedTime, e), this._updateParticles(e);
            }
        }, s._updateParticles = function(e) {
            (4 !== this._ownerRender.renderMode || this._ownerRender.mesh) && (this._currentTime += e, 
            this._retireActiveParticles(), this._freeRetiredParticles(), this._totalDelayTime += e, 
            this._totalDelayTime < this._playStartDelay || this._emission.enbale && this._isEmitting && !this._isPaused && this._advanceTime(e, this._currentTime));
        }, s._updateParticlesSimulationRestart = function(e) {
            this._firstActiveElement = 0, this._firstNewElement = 0, this._firstFreeElement = 0, 
            this._firstRetiredElement = 0, this._burstsIndex = 0, this._frameRateTime = e, this._emissionTime = 0, 
            this._totalDelayTime = 0, this._currentTime = e;
            var t = e;
            t < this._playStartDelay ? this._totalDelayTime = t : this._emission.enbale && this._advanceTime(e, e);
        }, s._retireActiveParticles = function() {
            for (;this._firstActiveElement != this._firstNewElement; ) {
                var e = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride, t = e + this._timeIndex;
                if (this._currentTime - this._vertices[t] + 1e-4 < this._vertices[e + this._startLifeTimeIndex]) break;
                this._vertices[t] = this._drawCounter, this._firstActiveElement++, this._firstActiveElement >= this._bufferMaxParticles && (this._firstActiveElement = 0);
            }
        }, s._freeRetiredParticles = function() {
            for (;this._firstRetiredElement != this._firstActiveElement; ) {
                var e = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];
                if (this.isPerformanceMode && e < 3) break;
                this._firstRetiredElement++, this._firstRetiredElement >= this._bufferMaxParticles && (this._firstRetiredElement = 0);
            }
        }, s._burst = function(e, t) {
            for (var n = 0, i = this._emission._bursts, r = i.length; this._burstsIndex < r; this._burstsIndex++) {
                var a = i[this._burstsIndex], o = a.time;
                if (!(e <= o && o < t)) break;
                var s = 0;
                this.autoRandomSeed ? s = R.lerp(a.minCount, a.maxCount, Math.random()) : (this._rand.seed = this._randomSeeds[0], 
                s = R.lerp(a.minCount, a.maxCount, this._rand.getFloat()), this._randomSeeds[0] = this._rand.seed), 
                n += s;
            }
            return n;
        }, s._advanceTime = function(e, t) {
            var n = 0, i = this._emissionTime;
            this._emissionTime += e;
            var r = 0;
            if (this._emissionTime > this.duration) {
                if (!this.looping) {
                    for (r = Math.min(this.maxParticles - this.aliveParticleCount, r), n = 0; n < r; n++) this.emit(t);
                    return this._isPlaying = !1, void this.stop();
                }
                r += this._burst(i, this._emissionTime), this._emissionTime -= this.duration, this._burstsIndex = 0, 
                r += this._burst(0, this._emissionTime);
            } else r += this._burst(i, this._emissionTime);
            for (r = Math.min(this.maxParticles - this.aliveParticleCount, r), n = 0; n < r; n++) this.emit(t);
            var a = this.emission.emissionRate;
            if (a > 0) {
                var o = 1 / a;
                for (this._frameRateTime += o, this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime; this._frameRateTime <= t && this.emit(this._frameRateTime); ) this._frameRateTime += o;
                this._frameRateTime = Math.floor(t / o) * o;
            }
        }, s._initBufferDatas = function() {
            this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy());
            var e = this._ownerRender, t = e.renderMode;
            if (-1 !== t && this.maxParticles > 0) {
                var n, i, r = 0, a = 0, o = 0, s = 0, l = 0, h = 0, c = 0, u = e.mesh;
                if (4 === t) {
                    if (u) {
                        if (u._vertexBuffers.length > 1) throw new Error("ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.");
                        i = ln.vertexDeclaration, this._floatCountPerVertex = i.vertexStride / 4, this._startLifeTimeIndex = 12, 
                        this._timeIndex = 16, this._vertexStride = u._vertexBuffers[0].vertexCount;
                        var _ = this._bufferMaxParticles * this._vertexStride, d = _ % 65535;
                        if (Math.floor(_ / 65535) + 1 > 1) throw new Error("ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.");
                        h = i.vertexStride * d, this._vertexBuffer = new Kt(h, 35048), this._vertexBuffer.vertexDeclaration = i, 
                        this._vertices = new Float32Array(this._floatCountPerVertex * d), this._indexStride = u._indexBuffer.indexCount;
                        var f = u._indexBuffer.getData(), m = this._bufferMaxParticles * this._indexStride;
                        for (this._indexBuffer = new qt("ushort", m, 35044), n = new Uint16Array(m), c = h + 2 * m, 
                        s = 0, r = 0; r < this._bufferMaxParticles; r++) {
                            var p = r * this._vertexStride;
                            for (a = 0, o = f.length; a < o; a++) n[s++] = p + f[a];
                        }
                        this._indexBuffer.setData(n), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
                        this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
                    }
                } else {
                    for (i = Tn.vertexDeclaration, this._floatCountPerVertex = i.vertexStride / 4, this._startLifeTimeIndex = 7, 
                    this._timeIndex = 11, this._vertexStride = 4, h = i.vertexStride * this._bufferMaxParticles * this._vertexStride, 
                    this._vertexBuffer = new Kt(h, 35048), this._vertexBuffer.vertexDeclaration = i, 
                    this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride), 
                    r = 0; r < this._bufferMaxParticles; r++) l = r * this._floatCountPerVertex * this._vertexStride, 
                    this._vertices[l] = -.5, this._vertices[l + 1] = -.5, this._vertices[l + 2] = 0, 
                    this._vertices[l + 3] = 1, l += this._floatCountPerVertex, this._vertices[l] = .5, 
                    this._vertices[l + 1] = -.5, this._vertices[l + 2] = 1, this._vertices[l + 3] = 1, 
                    l += this._floatCountPerVertex, this._vertices[l] = .5, this._vertices[l + 1] = .5, 
                    this._vertices[l + 2] = 1, this._vertices[l + 3] = 0, l += this._floatCountPerVertex, 
                    this._vertices[l] = -.5, this._vertices[l + 1] = .5, this._vertices[l + 2] = 0, 
                    this._vertices[l + 3] = 0;
                    for (this._indexStride = 6, this._indexBuffer = new qt("ushort", 6 * this._bufferMaxParticles, 35044), 
                    n = new Uint16Array(6 * this._bufferMaxParticles), r = 0; r < this._bufferMaxParticles; r++) {
                        s = 6 * r;
                        var T = r * this._vertexStride, E = T + 2;
                        n[s++] = T, n[s++] = E, n[s++] = T + 1, n[s++] = T, n[s++] = T + 3, n[s++] = E;
                    }
                    this._indexBuffer.setData(n), c = h + 6 * this._bufferMaxParticles * 2, this._bufferState.bind(), 
                    this._bufferState.applyVertexBuffer(this._vertexBuffer), this._bufferState.applyIndexBuffer(this._indexBuffer), 
                    this._bufferState.unBind();
                }
                y._addMemory(c, c);
            }
        }, s.destroy = function() {
            e.prototype.destroy.call(this);
            var t = this._vertexBuffer._byteLength + 2 * this._indexBuffer.indexCount;
            y._addMemory(-t, -t), this._bufferState.destroy(), this._vertexBuffer.destroy(), 
            this._indexBuffer.destroy(), this._emission.destroy(), this._bufferState = null, 
            this._vertexBuffer = null, this._indexBuffer = null, this._owner = null, this._vertices = null, 
            this._indexBuffer = null, this._emission = null, this._shape = null, this.startLifeTimeGradient = null, 
            this.startLifeTimeGradientMin = null, this.startLifeTimeGradientMax = null, this.startSizeConstantSeparate = null, 
            this.startSizeConstantMinSeparate = null, this.startSizeConstantMaxSeparate = null, 
            this.startRotationConstantSeparate = null, this.startRotationConstantMinSeparate = null, 
            this.startRotationConstantMaxSeparate = null, this.startColorConstant = null, this.startColorConstantMin = null, 
            this.startColorConstantMax = null, this._velocityOverLifetime = null, this._colorOverLifetime = null, 
            this._sizeOverLifetime = null, this._rotationOverLifetime = null, this._textureSheetAnimation = null;
        }, s.emit = function(e) {
            var n = t._tempPosition, i = t._tempDirection;
            if (this._shape && this._shape.enable) this.autoRandomSeed ? this._shape.generatePositionAndDirection(n, i) : this._shape.generatePositionAndDirection(n, i, this._rand, this._randomSeeds); else {
                var r = n.elements, a = i.elements;
                r[0] = r[1] = r[2] = 0, a[0] = a[1] = 0, a[2] = 1;
            }
            return this.addParticle(n, i, e);
        }, s.addParticle = function(e, t, n) {
            dn.normalize(t, t);
            var i = this._firstFreeElement + 1;
            if (i >= this._bufferMaxParticles && (i = 0), i === this._firstRetiredElement) return !1;
            Z.create(this, this._ownerRender, this._owner.transform);
            if (this._currentTime - n >= Z.startLifeTime) return !0;
            var r = NaN, a = NaN, o = NaN, s = NaN, l = NaN, h = NaN, c = NaN, u = this._velocityOverLifetime && this._velocityOverLifetime.enbale;
            if (u) {
                var _ = this._velocityOverLifetime.velocity.type;
                2 === _ || 3 === _ ? this.autoRandomSeed ? (r = Math.random(), a = Math.random(), 
                o = Math.random()) : (this._rand.seed = this._randomSeeds[9], r = this._rand.getFloat(), 
                a = this._rand.getFloat(), o = this._rand.getFloat(), this._randomSeeds[9] = this._rand.seed) : u = !1;
            } else u = !1;
            var d = this._colorOverLifetime && this._colorOverLifetime.enbale;
            if (d) {
                3 === this._colorOverLifetime.color.type ? this.autoRandomSeed ? s = Math.random() : (this._rand.seed = this._randomSeeds[10], 
                s = this._rand.getFloat(), this._randomSeeds[10] = this._rand.seed) : d = !1;
            } else d = !1;
            var f = this._sizeOverLifetime && this._sizeOverLifetime.enbale;
            if (f) {
                3 === this._sizeOverLifetime.size.type ? this.autoRandomSeed ? l = Math.random() : (this._rand.seed = this._randomSeeds[11], 
                l = this._rand.getFloat(), this._randomSeeds[11] = this._rand.seed) : f = !1;
            } else f = !1;
            var m = this._rotationOverLifetime && this._rotationOverLifetime.enbale;
            if (m) {
                var p = this._rotationOverLifetime.angularVelocity.type;
                2 === p || 3 === p ? this.autoRandomSeed ? h = Math.random() : (this._rand.seed = this._randomSeeds[12], 
                h = this._rand.getFloat(), this._randomSeeds[12] = this._rand.seed) : m = !1;
            } else m = !1;
            var T = this._textureSheetAnimation && this._textureSheetAnimation.enable;
            if (T) {
                3 === this._textureSheetAnimation.frame.type ? this.autoRandomSeed ? c = Math.random() : (this._rand.seed = this._randomSeeds[15], 
                c = this._rand.getFloat(), this._randomSeeds[15] = this._rand.seed) : T = !1;
            } else T = !1;
            var E, v = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride, g = Z.startUVInfo[0], S = Z.startUVInfo[1], R = Z.startUVInfo[2], A = Z.startUVInfo[3], I = e.elements, D = t.elements, y = 0, M = 0, C = 0, x = 0, O = 0, L = this._ownerRender;
            if (4 === L.renderMode) {
                var N = L.mesh._vertexBuffers[0];
                E = N.getData();
                var V = N.vertexDeclaration;
                M = V.getVertexElementByUsage(0).offset / 4;
                var P = V.getVertexElementByUsage(1);
                C = P ? P.offset / 4 : -1;
                var w = V.getVertexElementByUsage(2);
                x = w ? w.offset / 4 : -1, y = V.vertexStride / 4, O = 0;
            } else {
                this._vertices[v + 2] = R, this._vertices[v + 3] = A + S;
                var F = v + this._floatCountPerVertex;
                this._vertices[F + 2] = R + g, this._vertices[F + 3] = A + S;
                var b = F + this._floatCountPerVertex;
                this._vertices[b + 2] = R + g, this._vertices[b + 3] = A;
                var B = b + this._floatCountPerVertex;
                this._vertices[B + 2] = R, this._vertices[B + 3] = A;
            }
            for (var U = v, G = v + this._floatCountPerVertex * this._vertexStride; U < G; U += this._floatCountPerVertex) {
                var H = 0;
                if (4 === L.renderMode) {
                    H = U;
                    var z = y * O++, k = z + M;
                    this._vertices[H++] = E[k++], this._vertices[H++] = E[k++], this._vertices[H++] = E[k], 
                    -1 === C ? (this._vertices[H++] = 1, this._vertices[H++] = 1, this._vertices[H++] = 1, 
                    this._vertices[H++] = 1) : (k = z + C, this._vertices[H++] = E[k++], this._vertices[H++] = E[k++], 
                    this._vertices[H++] = E[k++], this._vertices[H++] = E[k]), -1 === x ? (this._vertices[H++] = 0, 
                    this._vertices[H++] = 0) : (k = z + x, this._vertices[H++] = R + E[k++] * g, this._vertices[H++] = A + E[k] * S);
                } else H = U + 4;
                switch (this._vertices[H++] = I[0], this._vertices[H++] = I[1], this._vertices[H++] = I[2], 
                this._vertices[H++] = Z.startLifeTime, this._vertices[H++] = D[0], this._vertices[H++] = D[1], 
                this._vertices[H++] = D[2], this._vertices[H++] = n, this._vertices[H++] = Z.startColor[0], 
                this._vertices[H++] = Z.startColor[1], this._vertices[H++] = Z.startColor[2], this._vertices[H++] = Z.startColor[3], 
                this._vertices[H++] = Z.startSize[0], this._vertices[H++] = Z.startSize[1], this._vertices[H++] = Z.startSize[2], 
                this._vertices[H++] = Z.startRotation[0], this._vertices[H++] = Z.startRotation[1], 
                this._vertices[H++] = Z.startRotation[2], this._vertices[H++] = Z.startSpeed, d && (this._vertices[H + 1] = s), 
                f && (this._vertices[H + 2] = l), m && (this._vertices[H + 3] = h), T && (this._vertices[H + 4] = c), 
                u && (this._vertices[H + 5] = r, this._vertices[H + 6] = a, this._vertices[H + 7] = o), 
                this.simulationSpace) {
                  case 0:
                    H += 8, this._vertices[H++] = Z.simulationWorldPostion[0], this._vertices[H++] = Z.simulationWorldPostion[1], 
                    this._vertices[H++] = Z.simulationWorldPostion[2], this._vertices[H++] = Z.simulationWorldRotation[0], 
                    this._vertices[H++] = Z.simulationWorldRotation[1], this._vertices[H++] = Z.simulationWorldRotation[2], 
                    this._vertices[H++] = Z.simulationWorldRotation[3];
                    break;

                  case 1:
                    break;

                  default:
                    throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
                }
            }
            return this._firstFreeElement = i, !0;
        }, s.addNewParticlesToVertexBuffer = function() {
            var e = 0;
            this._firstNewElement < this._firstFreeElement ? (e = this._firstNewElement * this._vertexStride * this._floatCountPerVertex, 
            this._vertexBuffer.setData(this._vertices, e, e, (this._firstFreeElement - this._firstNewElement) * this._vertexStride * this._floatCountPerVertex)) : (e = this._firstNewElement * this._vertexStride * this._floatCountPerVertex, 
            this._vertexBuffer.setData(this._vertices, e, e, (this._bufferMaxParticles - this._firstNewElement) * this._vertexStride * this._floatCountPerVertex), 
            this._firstFreeElement > 0 && this._vertexBuffer.setData(this._vertices, 0, 0, this._firstFreeElement * this._vertexStride * this._floatCountPerVertex)), 
            this._firstNewElement = this._firstFreeElement;
        }, s._getType = function() {
            return t._type;
        }, s._prepareRender = function(e) {
            return this._updateEmission(), this._firstNewElement != this._firstFreeElement && this.addNewParticlesToVertexBuffer(), 
            this._drawCounter++, this._firstActiveElement != this._firstFreeElement;
        }, s._render = function(e) {
            this._bufferState.bind();
            var t = 0, n = E.instance;
            this._firstActiveElement < this._firstFreeElement ? (t = (this._firstFreeElement - this._firstActiveElement) * this._indexStride, 
            n.drawElements(4, t, 5123, 2 * this._firstActiveElement * this._indexStride), L.trianglesFaces += t / 3, 
            L.renderBatch++) : (t = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride, 
            n.drawElements(4, t, 5123, 2 * this._firstActiveElement * this._indexStride), L.trianglesFaces += t / 3, 
            L.renderBatch++, this._firstFreeElement > 0 && (t = this._firstFreeElement * this._indexStride, 
            n.drawElements(4, t, 5123, 0), L.trianglesFaces += t / 3, L.renderBatch++));
        }, s.play = function() {
            if (this._burstsIndex = 0, this._isEmitting = !0, this._isPlaying = !0, this._isPaused = !1, 
            this._emissionTime = 0, this._totalDelayTime = 0, !this.autoRandomSeed) for (var e = 0, n = this._randomSeeds.length; e < n; e++) this._randomSeeds[e] = this.randomSeed[0] + t._RANDOMOFFSET[e];
            switch (this.startDelayType) {
              case 0:
                this._playStartDelay = this.startDelay;
                break;

              case 1:
                this.autoRandomSeed ? this._playStartDelay = R.lerp(this.startDelayMin, this.startDelayMax, Math.random()) : (this._rand.seed = this._randomSeeds[2], 
                this._playStartDelay = R.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat()), 
                this._randomSeeds[2] = this._rand.seed);
                break;

              default:
                throw new Error("Utils3D: startDelayType is invalid.");
            }
            this._frameRateTime = this._currentTime + this._playStartDelay, this._startUpdateLoopCount = L.loopCount;
        }, s.pause = function() {
            this._isPaused = !0;
        }, s.simulate = function(e, t) {
            void 0 === t && (t = !0), this._simulateUpdate = !0, t ? this._updateParticlesSimulationRestart(e) : (this._isPaused = !1, 
            this._updateParticles(e)), this.pause();
        }, s.stop = function() {
            this._burstsIndex = 0, this._isEmitting = !1, this._emissionTime = 0;
        }, s.cloneTo = function(e) {
            var t = e;
            t.duration = this.duration, t.looping = this.looping, t.prewarm = this.prewarm, 
            t.startDelayType = this.startDelayType, t.startDelay = this.startDelay, t.startDelayMin = this.startDelayMin, 
            t.startDelayMax = this.startDelayMax, t._maxStartLifetime = this._maxStartLifetime, 
            t.startLifetimeType = this.startLifetimeType, t.startLifetimeConstant = this.startLifetimeConstant, 
            this.startLifeTimeGradient.cloneTo(t.startLifeTimeGradient), t.startLifetimeConstantMin = this.startLifetimeConstantMin, 
            t.startLifetimeConstantMax = this.startLifetimeConstantMax, this.startLifeTimeGradientMin.cloneTo(t.startLifeTimeGradientMin), 
            this.startLifeTimeGradientMax.cloneTo(t.startLifeTimeGradientMax), t.startSpeedType = this.startSpeedType, 
            t.startSpeedConstant = this.startSpeedConstant, t.startSpeedConstantMin = this.startSpeedConstantMin, 
            t.startSpeedConstantMax = this.startSpeedConstantMax, t.threeDStartSize = this.threeDStartSize, 
            t.startSizeType = this.startSizeType, t.startSizeConstant = this.startSizeConstant, 
            this.startSizeConstantSeparate.cloneTo(t.startSizeConstantSeparate), t.startSizeConstantMin = this.startSizeConstantMin, 
            t.startSizeConstantMax = this.startSizeConstantMax, this.startSizeConstantMinSeparate.cloneTo(t.startSizeConstantMinSeparate), 
            this.startSizeConstantMaxSeparate.cloneTo(t.startSizeConstantMaxSeparate), t.threeDStartRotation = this.threeDStartRotation, 
            t.startRotationType = this.startRotationType, t.startRotationConstant = this.startRotationConstant, 
            this.startRotationConstantSeparate.cloneTo(t.startRotationConstantSeparate), t.startRotationConstantMin = this.startRotationConstantMin, 
            t.startRotationConstantMax = this.startRotationConstantMax, this.startRotationConstantMinSeparate.cloneTo(t.startRotationConstantMinSeparate), 
            this.startRotationConstantMaxSeparate.cloneTo(t.startRotationConstantMaxSeparate), 
            t.randomizeRotationDirection = this.randomizeRotationDirection, t.startColorType = this.startColorType, 
            this.startColorConstant.cloneTo(t.startColorConstant), this.startColorConstantMin.cloneTo(t.startColorConstantMin), 
            this.startColorConstantMax.cloneTo(t.startColorConstantMax), t.gravityModifier = this.gravityModifier, 
            t.simulationSpace = this.simulationSpace, t.scaleMode = this.scaleMode, t.playOnAwake = this.playOnAwake, 
            t.maxParticles = this.maxParticles, this._emission && (t._emission = this._emission.clone()), 
            this.shape && (t.shape = this.shape.clone()), this.velocityOverLifetime && (t.velocityOverLifetime = this.velocityOverLifetime.clone()), 
            this.colorOverLifetime && (t.colorOverLifetime = this.colorOverLifetime.clone()), 
            this.sizeOverLifetime && (t.sizeOverLifetime = this.sizeOverLifetime.clone()), this.rotationOverLifetime && (t.rotationOverLifetime = this.rotationOverLifetime.clone()), 
            this.textureSheetAnimation && (t.textureSheetAnimation = this.textureSheetAnimation.clone()), 
            t.isPerformanceMode = this.isPerformanceMode, t._isEmitting = this._isEmitting, 
            t._isPlaying = this._isPlaying, t._isPaused = this._isPaused, t._playStartDelay = this._playStartDelay, 
            t._frameRateTime = this._frameRateTime, t._emissionTime = this._emissionTime, t._totalDelayTime = this._totalDelayTime, 
            t._burstsIndex = this._burstsIndex;
        }, s.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, s, "maxParticles", function() {
            return this._bufferMaxParticles - 1;
        }, function(e) {
            var t = e + 1;
            t !== this._bufferMaxParticles && (this._bufferMaxParticles = t, this._initBufferDatas());
        }), a(0, s, "isEmitting", function() {
            return this._isEmitting;
        }), a(0, s, "isAlive", function() {
            return !!(this._isPlaying || this.aliveParticleCount > 0);
        }), a(0, s, "shape", function() {
            return this._shape;
        }, function(e) {
            this._shape !== e && (e && e.enable ? this._owner._render._defineDatas.add(ni.SHADERDEFINE_SHAPE) : this._owner._render._defineDatas.remove(ni.SHADERDEFINE_SHAPE), 
            this._shape = e);
        }), a(0, s, "rotationOverLifetime", function() {
            return this._rotationOverLifetime;
        }, function(e) {
            var t = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (e) {
                var i = e.angularVelocity;
                if (!i) return;
                var r = i.separateAxes, a = i.type;
                if (e.enbale) switch (r ? t.add(ni.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE) : t.add(ni.SHADERDEFINE_ROTATIONOVERLIFETIME), 
                a) {
                  case 0:
                    t.add(ni.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);
                    break;

                  case 1:
                    t.add(ni.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);
                    break;

                  case 2:
                    t.add(ni.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);
                    break;

                  case 3:
                    t.add(ni.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                } else t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIME), t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE), 
                t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE), 
                t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                switch (a) {
                  case 0:
                    r ? n.setVector(ni.ROLANGULARVELOCITYCONSTSEPRARATE, i.constantSeparate) : n.setNumber(ni.ROLANGULARVELOCITYCONST, i.constant);
                    break;

                  case 1:
                    r ? (n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTX, i.gradientX._elements), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTY, i.gradientY._elements), 
                    n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTZ, i.gradientZ._elements)) : n.setBuffer(ni.ROLANGULARVELOCITYGRADIENT, i.gradient._elements);
                    break;

                  case 2:
                    r ? (n.setVector(ni.ROLANGULARVELOCITYCONSTSEPRARATE, i.constantMinSeparate), n.setVector(ni.ROLANGULARVELOCITYCONSTMAXSEPRARATE, i.constantMaxSeparate)) : (n.setNumber(ni.ROLANGULARVELOCITYCONST, i.constantMin), 
                    n.setNumber(ni.ROLANGULARVELOCITYCONSTMAX, i.constantMax));
                    break;

                  case 3:
                    r ? (n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTX, i.gradientXMin._elements), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTXMAX, i.gradientXMax._elements), 
                    n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTY, i.gradientYMin._elements), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTYMAX, i.gradientYMax._elements), 
                    n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTZ, i.gradientZMin._elements), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTZMAX, i.gradientZMax._elements)) : (n.setBuffer(ni.ROLANGULARVELOCITYGRADIENT, i.gradientMin._elements), 
                    n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTMAX, i.gradientMax._elements));
                }
            } else t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIME), t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE), 
            t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE), 
            t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), t.remove(ni.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES), 
            n.setVector(ni.ROLANGULARVELOCITYCONSTSEPRARATE, null), n.setVector(ni.ROLANGULARVELOCITYCONSTMAXSEPRARATE, null), 
            n.setNumber(ni.ROLANGULARVELOCITYCONST, void 0), n.setNumber(ni.ROLANGULARVELOCITYCONSTMAX, void 0), 
            n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTX, null), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTXMAX, null), 
            n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTY, null), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTYMAX, null), 
            n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTZ, null), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTZMAX, null), 
            n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTWMAX, null), n.setBuffer(ni.ROLANGULARVELOCITYGRADIENT, null), 
            n.setBuffer(ni.ROLANGULARVELOCITYGRADIENTMAX, null);
            this._rotationOverLifetime = e;
        }), a(0, s, "emission", function() {
            return this._emission;
        }), a(0, s, "emissionTime", function() {
            return this._emissionTime > this.duration ? this.duration : this._emissionTime;
        }), a(0, s, "aliveParticleCount", function() {
            return this._firstNewElement >= this._firstRetiredElement ? this._firstNewElement - this._firstRetiredElement : this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;
        }), a(0, s, "isPlaying", function() {
            return this._isPlaying;
        }), a(0, s, "isPaused", function() {
            return this._isPaused;
        }), a(0, s, "startLifetimeType", function() {
            return this._startLifetimeType;
        }, function(e) {
            var t = 0, n = 0;
            switch (this.startLifetimeType) {
              case 0:
                this._maxStartLifetime = this.startLifetimeConstant;
                break;

              case 1:
                this._maxStartLifetime = -Number.MAX_VALUE;
                var i = i;
                for (t = 0, n = i.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, i.getValueByIndex(t));
                break;

              case 2:
                this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                break;

              case 3:
                this._maxStartLifetime = -Number.MAX_VALUE;
                var r = r;
                for (t = 0, n = r.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, r.getValueByIndex(t));
                var a = a;
                for (t = 0, n = a.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, a.getValueByIndex(t));
            }
            this._startLifetimeType = e;
        }), a(0, s, "startLifetimeConstant", function() {
            return this._startLifetimeConstant;
        }, function(e) {
            0 === this._startLifetimeType && (this._maxStartLifetime = e), this._startLifetimeConstant = e;
        }), a(0, s, "startLifetimeConstantMin", function() {
            return this._startLifetimeConstantMin;
        }, function(e) {
            2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(e, this._startLifetimeConstantMax)), 
            this._startLifetimeConstantMin = e;
        }), a(0, s, "startLifeTimeGradient", function() {
            return this._startLifeTimeGradient;
        }, function(e) {
            if (1 === this._startLifetimeType) {
                this._maxStartLifetime = -Number.MAX_VALUE;
                for (var t = 0, n = e.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
            }
            this._startLifeTimeGradient = e;
        }), a(0, s, "startLifetimeConstantMax", function() {
            return this._startLifetimeConstantMax;
        }, function(e) {
            2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, e)), 
            this._startLifetimeConstantMax = e;
        }), a(0, s, "startLifeTimeGradientMin", function() {
            return this._startLifeTimeGradientMin;
        }, function(e) {
            if (3 === this._startLifetimeType) {
                var t = 0, n = 0;
                for (this._maxStartLifetime = -Number.MAX_VALUE, t = 0, n = e.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
                for (t = 0, n = this._startLifeTimeGradientMax.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(t));
            }
            this._startLifeTimeGradientMin = e;
        }), a(0, s, "startLifeTimeGradientMax", function() {
            return this._startLifeTimeGradientMax;
        }, function(e) {
            if (3 === this._startLifetimeType) {
                var t = 0, n = 0;
                for (this._maxStartLifetime = -Number.MAX_VALUE, t = 0, n = this._startLifeTimeGradientMin.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(t));
                for (t = 0, n = e.gradientCount; t < n; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
            }
            this._startLifeTimeGradientMax = e;
        }), a(0, s, "velocityOverLifetime", function() {
            return this._velocityOverLifetime;
        }, function(e) {
            var t = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (e) {
                var i = e.velocity, r = i.type;
                if (e.enbale) switch (r) {
                  case 0:
                    t.add(ni.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);
                    break;

                  case 1:
                    t.add(ni.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);
                    break;

                  case 2:
                    t.add(ni.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);
                    break;

                  case 3:
                    t.add(ni.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                } else t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE), 
                t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                switch (r) {
                  case 0:
                    n.setVector(ni.VOLVELOCITYCONST, i.constant);
                    break;

                  case 1:
                    n.setBuffer(ni.VOLVELOCITYGRADIENTX, i.gradientX._elements), n.setBuffer(ni.VOLVELOCITYGRADIENTY, i.gradientY._elements), 
                    n.setBuffer(ni.VOLVELOCITYGRADIENTZ, i.gradientZ._elements);
                    break;

                  case 2:
                    n.setVector(ni.VOLVELOCITYCONST, i.constantMin), n.setVector(ni.VOLVELOCITYCONSTMAX, i.constantMax);
                    break;

                  case 3:
                    n.setBuffer(ni.VOLVELOCITYGRADIENTX, i.gradientXMin._elements), n.setBuffer(ni.VOLVELOCITYGRADIENTXMAX, i.gradientXMax._elements), 
                    n.setBuffer(ni.VOLVELOCITYGRADIENTY, i.gradientYMin._elements), n.setBuffer(ni.VOLVELOCITYGRADIENTYMAX, i.gradientYMax._elements), 
                    n.setBuffer(ni.VOLVELOCITYGRADIENTZ, i.gradientZMin._elements), n.setBuffer(ni.VOLVELOCITYGRADIENTZMAX, i.gradientZMax._elements);
                }
                n.setInt(ni.VOLSPACETYPE, e.space);
            } else t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE), 
            t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), t.remove(ni.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE), 
            n.setVector(ni.VOLVELOCITYCONST, null), n.setBuffer(ni.VOLVELOCITYGRADIENTX, null), 
            n.setBuffer(ni.VOLVELOCITYGRADIENTY, null), n.setBuffer(ni.VOLVELOCITYGRADIENTZ, null), 
            n.setVector(ni.VOLVELOCITYCONST, null), n.setVector(ni.VOLVELOCITYCONSTMAX, null), 
            n.setBuffer(ni.VOLVELOCITYGRADIENTX, null), n.setBuffer(ni.VOLVELOCITYGRADIENTXMAX, null), 
            n.setBuffer(ni.VOLVELOCITYGRADIENTY, null), n.setBuffer(ni.VOLVELOCITYGRADIENTYMAX, null), 
            n.setBuffer(ni.VOLVELOCITYGRADIENTZ, null), n.setBuffer(ni.VOLVELOCITYGRADIENTZMAX, null), 
            n.setInt(ni.VOLSPACETYPE, void 0);
            this._velocityOverLifetime = e;
        }), a(0, s, "colorOverLifetime", function() {
            return this._colorOverLifetime;
        }, function(e) {
            var t = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (e) {
                var i = e.color;
                if (e.enbale) switch (i.type) {
                  case 1:
                    t.add(ni.SHADERDEFINE_COLOROVERLIFETIME);
                    break;

                  case 3:
                    t.add(ni.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                } else t.remove(ni.SHADERDEFINE_COLOROVERLIFETIME), t.remove(ni.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                switch (i.type) {
                  case 1:
                    var r = i.gradient;
                    n.setBuffer(ni.COLOROVERLIFEGRADIENTALPHAS, r._alphaElements), n.setBuffer(ni.COLOROVERLIFEGRADIENTCOLORS, r._rgbElements);
                    break;

                  case 3:
                    var a = i.gradientMin, o = i.gradientMax;
                    n.setBuffer(ni.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), n.setBuffer(ni.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements), 
                    n.setBuffer(ni.MAXCOLOROVERLIFEGRADIENTALPHAS, o._alphaElements), n.setBuffer(ni.MAXCOLOROVERLIFEGRADIENTCOLORS, o._rgbElements);
                }
            } else t.remove(ni.SHADERDEFINE_COLOROVERLIFETIME), t.remove(ni.SHADERDEFINE_RANDOMCOLOROVERLIFETIME), 
            n.setBuffer(ni.COLOROVERLIFEGRADIENTALPHAS, r._alphaElements), n.setBuffer(ni.COLOROVERLIFEGRADIENTCOLORS, r._rgbElements), 
            n.setBuffer(ni.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), n.setBuffer(ni.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements), 
            n.setBuffer(ni.MAXCOLOROVERLIFEGRADIENTALPHAS, o._alphaElements), n.setBuffer(ni.MAXCOLOROVERLIFEGRADIENTCOLORS, o._rgbElements);
            this._colorOverLifetime = e;
        }), a(0, s, "sizeOverLifetime", function() {
            return this._sizeOverLifetime;
        }, function(e) {
            var t = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (e) {
                var i = e.size, r = i.separateAxes, a = i.type;
                if (e.enbale) switch (a) {
                  case 0:
                    r ? t.add(ni.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE) : t.add(ni.SHADERDEFINE_SIZEOVERLIFETIMECURVE);
                    break;

                  case 2:
                    r ? t.add(ni.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE) : t.add(ni.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);
                } else t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMECURVE), t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE), 
                t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);
                switch (a) {
                  case 0:
                    r ? (n.setBuffer(ni.SOLSIZEGRADIENTX, i.gradientX._elements), n.setBuffer(ni.SOLSIZEGRADIENTY, i.gradientY._elements), 
                    n.setBuffer(ni.SOLSizeGradientZ, i.gradientZ._elements)) : n.setBuffer(ni.SOLSIZEGRADIENT, i.gradient._elements);
                    break;

                  case 2:
                    r ? (n.setBuffer(ni.SOLSIZEGRADIENTX, i.gradientXMin._elements), n.setBuffer(ni.SOLSIZEGRADIENTXMAX, i.gradientXMax._elements), 
                    n.setBuffer(ni.SOLSIZEGRADIENTY, i.gradientYMin._elements), n.setBuffer(ni.SOLSIZEGRADIENTYMAX, i.gradientYMax._elements), 
                    n.setBuffer(ni.SOLSizeGradientZ, i.gradientZMin._elements), n.setBuffer(ni.SOLSizeGradientZMAX, i.gradientZMax._elements)) : (n.setBuffer(ni.SOLSIZEGRADIENT, i.gradientMin._elements), 
                    n.setBuffer(ni.SOLSizeGradientMax, i.gradientMax._elements));
                }
            } else t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMECURVE), t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE), 
            t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), t.remove(ni.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE), 
            n.setBuffer(ni.SOLSIZEGRADIENTX, null), n.setBuffer(ni.SOLSIZEGRADIENTXMAX, null), 
            n.setBuffer(ni.SOLSIZEGRADIENTY, null), n.setBuffer(ni.SOLSIZEGRADIENTYMAX, null), 
            n.setBuffer(ni.SOLSizeGradientZ, null), n.setBuffer(ni.SOLSizeGradientZMAX, null), 
            n.setBuffer(ni.SOLSIZEGRADIENT, null), n.setBuffer(ni.SOLSizeGradientMax, null);
            this._sizeOverLifetime = e;
        }), a(0, s, "textureSheetAnimation", function() {
            return this._textureSheetAnimation;
        }, function(e) {
            var t = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (e) {
                var i = e.frame, r = i.type;
                if (e.enable) switch (r) {
                  case 1:
                    t.add(ni.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);
                    break;

                  case 3:
                    t.add(ni.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                } else t.remove(ni.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), t.remove(ni.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                if (1 === r || 3 === r) {
                    n.setNumber(ni.TEXTURESHEETANIMATIONCYCLES, e.cycles);
                    var a = e.tiles, o = this._uvLength.elements;
                    o[0] = 1 / a.x, o[1] = 1 / a.y, n.setVector(ni.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);
                }
                switch (r) {
                  case 1:
                    n.setBuffer(ni.TEXTURESHEETANIMATIONGRADIENTUVS, i.frameOverTimeData._elements);
                    break;

                  case 3:
                    n.setBuffer(ni.TEXTURESHEETANIMATIONGRADIENTUVS, i.frameOverTimeDataMin._elements), 
                    n.setBuffer(ni.TEXTURESHEETANIMATIONGRADIENTMAXUVS, i.frameOverTimeDataMax._elements);
                }
            } else t.remove(ni.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), t.remove(ni.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE), 
            n.setNumber(ni.TEXTURESHEETANIMATIONCYCLES, void 0), n.setVector(ni.TEXTURESHEETANIMATIONSUBUVLENGTH, null), 
            n.setBuffer(ni.TEXTURESHEETANIMATIONGRADIENTUVS, null), n.setBuffer(ni.TEXTURESHEETANIMATIONGRADIENTMAXUVS, null);
            this._textureSheetAnimation = e;
        }), t.halfKSqrtOf2 = .71, i(t, [ "_RANDOMOFFSET", function() {
            return this._RANDOMOFFSET = new Uint32Array([ 592910910, 3276756734, 322376503, 306581307, 1793934638, 3737431713, 2527743459, 2368504881, 4085612399, 3774601268, 326370691, 1494990940, 1089181156, 3159510623, 2941263940, 2786374529, 271901988, 4233252447 ]);
        }, "_maxElapsedTime", function() {
            return this._maxElapsedTime = 1 / 3;
        }, "_tempVector30", function() {
            return this._tempVector30 = new dn();
        }, "_tempVector31", function() {
            return this._tempVector31 = new dn();
        }, "_tempVector32", function() {
            return this._tempVector32 = new dn();
        }, "_tempVector33", function() {
            return this._tempVector33 = new dn();
        }, "_tempVector34", function() {
            return this._tempVector34 = new dn();
        }, "_tempVector35", function() {
            return this._tempVector35 = new dn();
        }, "_tempVector36", function() {
            return this._tempVector36 = new dn();
        }, "_tempVector37", function() {
            return this._tempVector37 = new dn();
        }, "_tempVector38", function() {
            return this._tempVector38 = new dn();
        }, "_tempVector39", function() {
            return this._tempVector39 = new dn();
        }, "_tempPosition", function() {
            return this._tempPosition = new dn();
        }, "_tempDirection", function() {
            return this._tempDirection = new dn();
        }, "_type", function() {
            return this._type = J._typeCounter++;
        } ]), t;
    }(J), Tn = function(e) {
        function t(e, n, i, r, a, o, s, l, h, c, u, _, d, f) {
            this._cornerTextureCoordinate = null, this._positionStartLifeTime = null, this._velocity = null, 
            this._startColor = null, this._startSize = null, this._startRotation0 = null, this._startRotation1 = null, 
            this._startRotation2 = null, this._startLifeTime = NaN, this._time = NaN, this._startSpeed = NaN, 
            this._randoms0 = null, this._randoms1 = null, this._simulationWorldPostion = null, 
            t.__super.call(this), this._cornerTextureCoordinate = e, this._positionStartLifeTime = n, 
            this._velocity = i, this._startColor = r, this._startSize = a, this._startRotation0 = o, 
            this._startRotation1 = s, this._startRotation2 = l, this._startLifeTime = h, this._time = c, 
            this._startSpeed = u, this._randoms0 = this.random0, this._randoms1 = this.random1, 
            this._simulationWorldPostion = f;
        }
        r(t, "laya.d3.graphics.Vertex.VertexShurikenParticleBillboard", Le);
        var n = t.prototype;
        return a(0, n, "cornerTextureCoordinate", function() {
            return this._cornerTextureCoordinate;
        }), a(0, n, "random1", function() {
            return this._randoms1;
        }), a(0, n, "startRotation2", function() {
            return this._startRotation2;
        }), a(0, n, "positionStartLifeTime", function() {
            return this._positionStartLifeTime;
        }), a(0, n, "velocity", function() {
            return this._velocity;
        }), a(0, n, "random0", function() {
            return this._randoms0;
        }), a(0, n, "startSize", function() {
            return this._startSize;
        }), a(0, n, "startColor", function() {
            return this._startColor;
        }), a(0, n, "startRotation0", function() {
            return this._startRotation0;
        }), a(0, n, "startRotation1", function() {
            return this._startRotation1;
        }), a(0, n, "startLifeTime", function() {
            return this._startLifeTime;
        }), a(0, n, "time", function() {
            return this._time;
        }), a(0, n, "startSpeed", function() {
            return this._startSpeed;
        }), a(0, n, "simulationWorldPostion", function() {
            return this._simulationWorldPostion;
        }), a(1, t, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }, laya.d3.graphics.Vertex.VertexShuriKenParticle._$SET_vertexDeclaration), i(t, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new G(152, [ new Re(0, "vector4", 0), new Re(16, "vector4", 4), new Re(32, "vector4", 5), new Re(48, "vector4", 6), new Re(64, "vector3", 8), new Re(76, "vector3", 9), new Re(88, "single", 10), new Re(92, "vector4", 11), new Re(108, "vector4", 12), new Re(124, "vector3", 13), new Re(136, "vector4", 14) ]);
        } ]), t;
    }(), En = function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.CastShadowList", et);
        var n = t.prototype;
        return n.add = function(e) {
            if (-1 !== e._indexInCastShadowList) throw "CastShadowList:element has  in  CastShadowList.";
            this._add(e), e._indexInCastShadowList = this.length++;
        }, n.remove = function(e) {
            var t = e._indexInCastShadowList;
            if (this.length--, t !== this.length) {
                var n = this.elements[this.length];
                this.elements[t] = n, n._indexInCastShadowList = t;
            }
            e._indexInCastShadowList = -1;
        }, t;
    }(), vn = function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.physics.PhysicsUpdateList", et);
        return t.prototype.add = function(e) {
            if (-1 !== e._inPhysicUpdateListIndex) throw "PhysicsUpdateList:element has  in  PhysicsUpdateList.";
            this._add(e), e._inPhysicUpdateListIndex = this.length++;
        }, t;
    }(), gn = function(e) {
        function t() {
            t.__super.call(this);
        }
        r(t, "laya.d3.component.SimpleSingletonList", et);
        var n = t.prototype;
        return n.add = function(e) {
            if (-1 !== e._getIndexInList()) throw "SimpleSingletonList:" + e + " has  in  SingletonList.";
            this._add(e), e._setIndexInList(this.length++);
        }, n.remove = function(e) {
            var t = e._getIndexInList();
            if (this.length--, t !== this.length) {
                var n = this.elements[this.length];
                this.elements[t] = n, n._setIndexInList(t);
            }
            e._setIndexInList(-1);
        }, t;
    }(), Sn = function(e) {
        function t(e, n) {
            this._needProcessCollisions = !1, this._needProcessTriggers = !1, t.__super.call(this), 
            void 0 === n && (n = !1), this._id = ++t._uniqueIDCounter, this._transform = new Nt(this), 
            this._isStatic = n, this.layer = 0, this.name = e || "New Sprite3D";
        }
        r(t, "laya.d3.core.Sprite3D", e);
        var o = t.prototype;
        return n.imps(o, {
            "laya.resource.ICreateResource": !0,
            "laya.d3.core.IClone": !0
        }), o._setCreateURL = function(e) {
            this._url = e;
        }, o._changeAnimatorsToLinkSprite3D = function(e, t, n) {
            var i = this.getComponent(wt);
            if (i && (i.avatar || e._changeAnimatorToLinkSprite3DNoAvatar(i, t, n)), this._parent && this._parent instanceof laya.d3.core.Sprite3D) {
                n.unshift(this._parent.name);
                var r = this._parent;
                r._hierarchyAnimator && r._changeAnimatorsToLinkSprite3D(e, t, n);
            }
        }, o._setHierarchyAnimator = function(e, t) {
            this._changeHierarchyAnimator(e), this._changeAnimatorAvatar(e.avatar);
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n];
                r._hierarchyAnimator == t && r._setHierarchyAnimator(e, t);
            }
        }, o._clearHierarchyAnimator = function(e, t) {
            this._changeHierarchyAnimator(t), this._changeAnimatorAvatar(t ? t.avatar : null);
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n];
                r._hierarchyAnimator == e && r._clearHierarchyAnimator(e, t);
            }
        }, o._changeHierarchyAnimatorAvatar = function(e, t) {
            this._changeAnimatorAvatar(t);
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n];
                r._hierarchyAnimator == e && r._changeHierarchyAnimatorAvatar(e, t);
            }
        }, o._changeAnimatorToLinkSprite3DNoAvatar = function(e, t, n) {
            e._handleSpriteOwnersBySprite(t, n, this);
            for (var i = 0, r = this._children.length; i < r; i++) {
                var a = this._children[i], o = n.length;
                n.push(a.name), a._changeAnimatorToLinkSprite3DNoAvatar(e, t, n), n.splice(o, 1);
            }
        }, o._changeHierarchyAnimator = function(e) {
            this._hierarchyAnimator = e;
        }, o._changeAnimatorAvatar = function(e) {}, o._onAdded = function() {
            if (this._parent instanceof laya.d3.core.Sprite3D) {
                var t = this._parent;
                this.transform._setParent(t.transform), t._hierarchyAnimator && (!this._hierarchyAnimator && this._setHierarchyAnimator(t._hierarchyAnimator, null), 
                t._changeAnimatorsToLinkSprite3D(this, !0, [ this.name ]));
            }
            e.prototype._onAdded.call(this);
        }, o._onRemoved = function() {
            if (e.prototype._onRemoved.call(this), this._parent instanceof laya.d3.core.Sprite3D) {
                var t = this._parent;
                this.transform._setParent(null), t._hierarchyAnimator && (this._hierarchyAnimator == t._hierarchyAnimator && this._clearHierarchyAnimator(t._hierarchyAnimator, null), 
                t._changeAnimatorsToLinkSprite3D(this, !1, [ this.name ]));
            }
        }, o._parse = function(e) {
            if (void 0 !== e.isStatic && (this._isStatic = e.isStatic), void 0 !== e.active && (this.active = e.active), 
            void 0 != e.name && (this.name = e.name), void 0 !== e.position) {
                var t = this.transform.localPosition;
                t.fromArray(e.position), this.transform.localPosition = t;
            }
            if (void 0 !== e.rotationEuler) {
                var n = this.transform.localRotationEuler;
                n.fromArray(e.rotationEuler), this.transform.localRotationEuler = n;
            }
            if (void 0 !== e.rotation) {
                var i = this.transform.localRotation;
                i.fromArray(e.rotation), this.transform.localRotation = i;
            }
            if (void 0 !== e.scale) {
                var r = this.transform.localScale;
                r.fromArray(e.scale), this.transform.localScale = r;
            }
            void 0 != e.layer && (this.layer = e.layer);
        }, o.cloneTo = function(e) {
            if (this.destroyed) throw new Error("Sprite3D: Can't be cloned if the Sprite3D has destroyed.");
            for (var t = e, n = 0, i = this._children.length; n < i; n++) t.addChild(this._children[n].clone());
            t.name = this.name, t.destroyed = this.destroyed, t.active = this.active;
            var r = t.transform.localPosition;
            this.transform.localPosition.cloneTo(r), t.transform.localPosition = r;
            var a = t.transform.localRotation;
            this.transform.localRotation.cloneTo(a), t.transform.localRotation = a;
            var o = t.transform.localScale;
            this.transform.localScale.cloneTo(o), t.transform.localScale = o, t._isStatic = this._isStatic, 
            t.layer = this.layer, this._cloneTo(t);
        }, o.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, o.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._transform = null, this._scripts = null, this._url && g.clearRes(this._url));
        }, a(0, o, "id", function() {
            return this._id;
        }), a(0, o, "url", function() {
            return this._url;
        }), a(0, o, "layer", function() {
            return this._layer;
        }, function(e) {
            if (this._layer !== e) {
                if (!(e >= 0 && e <= 30)) throw new Error("Layer value must be 0-30.");
                this._layer = e;
            }
        }), a(0, o, "transform", function() {
            return this._transform;
        }), a(0, o, "isStatic", function() {
            return this._isStatic;
        }), t._parse = function(e, t, n) {
            var i = e.data, r = [], a = ke._createNodeByJson(i, r);
            return Pe.combine(a, r), a;
        }, t.__init__ = function() {}, t.instantiate = function(e, t, n, i, r) {
            void 0 === n && (n = !0);
            var a = e.clone();
            t && t.addChild(a);
            var o = a.transform;
            if (n) {
                var s = o.worldMatrix;
                e.transform.worldMatrix.cloneTo(s), o.worldMatrix = s;
            } else i && (o.position = i), r && (o.rotation = r);
            return a;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "HIERARCHY");
        }, t._uniqueIDCounter = 0, i(t, [ "WORLDMATRIX", function() {
            return this.WORLDMATRIX = $e.propertyNameToID("u_WorldMat");
        }, "MVPMATRIX", function() {
            return this.MVPMATRIX = $e.propertyNameToID("u_MvpMatrix");
        } ]), t;
    }(A), Rn = function(e) {
        function t() {
            t.__super.call(this), this._defineDatas = new le(), this._disablePublicDefineDatas = new le(), 
            this._shaderValues = new vt(this), this.renderQueue = 2e3, this._alphaTest = !1, 
            this._renderStates = [];
        }
        r(t, "laya.d3.core.material.BaseMaterial", e);
        var o = t.prototype;
        return n.imps(o, {
            "laya.d3.core.IClone": !0
        }), o._removeTetxureReference = function() {
            var e = this._shaderValues._data;
            for (var t in e) {
                var n = e[t];
                n && n instanceof laya.webgl.resource.BaseTexture && n._removeReference();
            }
        }, o._addReference = function(t) {
            void 0 === t && (t = 1), e.prototype._addReference.call(this, t);
            var n = this._shaderValues._data;
            for (var i in n) {
                var r = n[i];
                r && r instanceof laya.webgl.resource.BaseTexture && r._addReference();
            }
        }, o._removeReference = function(t) {
            void 0 === t && (t = 1), e.prototype._removeReference.call(this, t), this._removeTetxureReference();
        }, o._disposeResource = function() {
            this._referenceCount > 0 && this._removeTetxureReference(), this._shaderValues = null;
        }, o.setShaderName = function(e) {
            if (this._shader = $e._preCompileShader[e], !this._shader) throw new Error("BaseMaterial: unknown shader name.");
            var t = this._shader.getSubShaderAt(0)._passes.length;
            this._renderStates.length = t;
            for (var n = 0; n < t; n++) this._renderStates[n] || (this._renderStates[n] = new ft());
        }, o.getRenderState = function(e) {
            return void 0 === e && (e = 0), this._renderStates[e];
        }, o.cloneTo = function(e) {
            var t = e;
            t.name = this.name, t.renderQueue = this.renderQueue, this._disablePublicDefineDatas.cloneTo(t._disablePublicDefineDatas), 
            this._defineDatas.cloneTo(t._defineDatas), this._shaderValues.cloneTo(t._shaderValues);
            for (var n = e._renderStates, i = 0, r = this._renderStates.length; i < r; i++) this._renderStates[i].cloneTo(n[i]);
        }, o.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, a(0, o, "alphaTestValue", function() {
            return this._shaderValues.getNumber(t.ALPHATESTVALUE);
        }, function(e) {
            this._shaderValues.setNumber(t.ALPHATESTVALUE, e);
        }), a(0, o, "alphaTest", function() {
            return this._alphaTest;
        }, function(e) {
            this._alphaTest = e, e ? this._defineDatas.add(laya.d3.core.material.BaseMaterial.SHADERDEFINE_ALPHATEST) : this._defineDatas.remove(laya.d3.core.material.BaseMaterial.SHADERDEFINE_ALPHATEST);
        }), t.load = function(e, t) {
            n.loader.create(e, t, null, "MATERIAL");
        }, t.__init__ = function() {
            t.SHADERDEFINE_ALPHATEST = t.shaderDefines.registerDefine("ALPHATEST");
        }, t._parse = function(e, t, n) {
            var i, r = e, a = r.props, o = a.type.split("."), s = l.window;
            if (o.forEach(function(e) {
                s = s[e];
            }), "function" != typeof s) throw "_getSprite3DHierarchyInnerUrls 错误: " + e.type + " 不是类";
            switch (i = new s(), r.version) {
              case "LAYAMATERIAL:01":
                a = r.props;
                for (_ in a) switch (_) {
                  case "vectors":
                    for (c = 0, u = (d = a[_]).length; c < u; c++) switch (f = d[c], (m = f.value).length) {
                      case 2:
                        i[f.name] = new fn(m[0], m[1]);
                        break;

                      case 3:
                        i[f.name] = new dn(m[0], m[1], m[2]);
                        break;

                      case 4:
                        i[f.name] = new _n(m[0], m[1], m[2], m[3]);
                        break;

                      default:
                        throw new Error("BaseMaterial:unkonwn color length.");
                    }
                    break;

                  case "textures":
                    for (c = 0, u = (p = a[_]).length; c < u; c++) (E = (T = p[c]).path) && (i[T.name] = g.getRes(E));
                    break;

                  case "defines":
                    for (c = 0, u = (v = a[_]).length; c < u; c++) S = i._shader.getSubShaderAt(0).getMaterialDefineByName(v[c]), 
                    i._defineDatas.add(S);
                    break;

                  case "cull":
                  case "blend":
                  case "srcBlend":
                  case "dstBlend":
                  case "depthWrite":
                    var h = a[_];
                    for (c = 0, u = i._renderStates.length; c < u; c++) i._renderStates[c][_] = h;
                    break;

                  case "renderQueue":
                    switch (a[_]) {
                      case 1:
                        i.renderQueue = 2e3;
                        break;

                      case 2:
                        i.renderQueue = 3e3;
                        break;

                      default:
                        i[_] = a[_];
                    }
                    break;

                  default:
                    i[_] = a[_];
                }
                break;

              case "LAYAMATERIAL:02":
                var c = 0, u = 0;
                for (var _ in a) switch (_) {
                  case "vectors":
                    var d = a[_];
                    for (c = 0, u = d.length; c < u; c++) {
                        var f = d[c], m = f.value;
                        switch (m.length) {
                          case 2:
                            i[f.name] = new fn(m[0], m[1]);
                            break;

                          case 3:
                            i[f.name] = new dn(m[0], m[1], m[2]);
                            break;

                          case 4:
                            i[f.name] = new _n(m[0], m[1], m[2], m[3]);
                            break;

                          default:
                            throw new Error("BaseMaterial:unkonwn color length.");
                        }
                    }
                    break;

                  case "textures":
                    var p = a[_];
                    for (c = 0, u = p.length; c < u; c++) {
                        var T = p[c], E = T.path;
                        E && (i[T.name] = g.getRes(E));
                    }
                    break;

                  case "defines":
                    var v = a[_];
                    for (c = 0, u = v.length; c < u; c++) {
                        var S = i._shader.getSubShaderAt(0).getMaterialDefineByName(v[c]);
                        i._defineDatas.add(S);
                    }
                    break;

                  case "renderStates":
                    var R = a[_];
                    for (c = 0, u = R.length; c < u; c++) {
                        var A = R[c], I = i._renderStates[c];
                        for (var D in A) I[D] = A[D];
                    }
                    break;

                  default:
                    i[_] = a[_];
                }
                break;

              default:
                throw new Error("BaseMaterial:unkonwn version.");
            }
            return i;
        }, t.RENDERQUEUE_OPAQUE = 2e3, t.RENDERQUEUE_ALPHATEST = 2450, t.RENDERQUEUE_TRANSPARENT = 3e3, 
        t.SHADERDEFINE_ALPHATEST = 0, i(t, [ "ALPHATESTVALUE", function() {
            return this.ALPHATESTVALUE = $e.propertyNameToID("u_AlphaTestValue");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be();
        } ]), t;
    }(y), An = function(e) {
        function t(e, n, i, r) {
            this._terrainHeightData = null, this._width = 0, this._height = 0, this._bitType = 0, 
            this._value = NaN, t.__super.call(this), this._width = e, this._height = n, this._bitType = i, 
            this._value = r;
        }
        return r(t, "laya.d3.terrain.TerrainHeightData", y), t._pharse = function(e, n, i) {
            var r, a = new t(i[0], i[1], i[2], i[3]), o = NaN;
            8 == a._bitType ? (r = new Uint8Array(e), o = 1 / 255) : 16 == a._bitType && (r = new Int16Array(e), 
            o = 1 / 32766), a._terrainHeightData = new Float32Array(a._height * a._width);
            for (var s = 0, l = a._height * a._width; s < l; s++) a._terrainHeightData[s] = r[s] * o * a._value / 2;
        }, t.load = function(e, t, i, r, a, o) {
            n.loader.create(e, t, null, "TERRAINHEIGHTDATA", [ i, r, a, o ], null, 1, !1);
        }, t;
    }(), In = function(e) {
        function t() {
            this._rootNode = null, this._nativeNodeCount = 0, this._nativeCurCloneCount = 0, 
            t.__super.call(this);
        }
        r(t, "laya.d3.core.Avatar", y);
        var i = t.prototype;
        return n.imps(i, {
            "laya.d3.core.IClone": !0
        }), i._initCloneToAnimator = function(e, t) {
            t._avatarNodeMap[e.name] = e;
            for (var n = 0, i = e.getChildCount(); n < i; n++) this._initCloneToAnimator(e.getChildByIndex(n), t);
        }, i._parseNode = function(e, t) {
            var n = e.props.name;
            t.name = n;
            var i = e.props, r = t.transform, a = r.localPosition, o = r.localRotation, s = r.localScale;
            a.fromArray(i.translate), o.fromArray(i.rotation), s.fromArray(i.scale), r.localPosition = a, 
            r.localRotation = o, r.localScale = s;
            for (var l = e.child, h = 0, c = l.length; h < c; h++) {
                var u = l[h], _ = new It(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16));
                t.addChild(_), D.isConchApp && this._nativeNodeCount++, this._parseNode(u, _);
            }
        }, i._cloneDatasToAnimator = function(e) {
            var t;
            t = this._rootNode.clone();
            var n = this._rootNode.transform, i = t.transform, r = i.localPosition, a = i.localRotation, o = i.localScale;
            n.localPosition.cloneTo(r), n.localRotation.cloneTo(a), n.localScale.cloneTo(o), 
            i.localPosition = r, i.localRotation = a, i.localScale = o, e._avatarNodeMap = {}, 
            this._initCloneToAnimator(t, e);
        }, i.cloneTo = function(e) {
            var t = e, n = this._rootNode.clone();
            t._rootNode = n;
        }, i.clone = function() {
            var e = new this.constructor();
            return this.cloneTo(e), e;
        }, i._cloneDatasToAnimatorNative = function(e) {
            var t = new Float32Array(3 * this._nativeNodeCount), n = new Float32Array(4 * this._nativeNodeCount), i = new Float32Array(3 * this._nativeNodeCount), r = new Float32Array(16 * this._nativeNodeCount), a = new Int16Array(this._nativeNodeCount);
            e._animationNodeLocalPositions = t, e._animationNodeLocalRotations = n, e._animationNodeLocalScales = i, 
            e._animationNodeWorldMatrixs = r, e._animationNodeParentIndices = a, this._nativeCurCloneCount = 0;
            var o = this._rootNode._cloneNative(t, n, i, r, a, -1, this), s = this._rootNode.transform, l = o.transform, h = l.localPosition, c = l.localRotation, u = l.localScale;
            s.localPosition.cloneTo(h), s.localRotation.cloneTo(c), s.localScale.cloneTo(u), 
            l.localPosition = h, l.localRotation = c, l.localScale = u, e._avatarNodeMap = {}, 
            this._initCloneToAnimator(o, e);
        }, t._parse = function(e, n, i) {
            var r = new t();
            if (r._rootNode = new It(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16)), 
            D.isConchApp && r._nativeNodeCount++, e.version) {
                var a = e.rootNode;
                a && r._parseNode(a, r._rootNode);
            }
            return r;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "AVATAR");
        }, t;
    }(), Dn = function(e) {
        function t(e, n, i, r) {
            t.__super.call(this), this._vs = e, this._ps = n, this._attributeMap = i, this._uniformMap = r, 
            this._create(), this.lock = !0;
        }
        r(t, "laya.d3.shader.ShaderInstance", y);
        var n = t.prototype;
        return n._create = function() {
            var e = E.instance;
            this._program = e.createProgram(), this._vshader = this._createShader(e, this._vs, 35633), 
            this._pshader = this._createShader(e, this._ps, 35632), e.attachShader(this._program, this._vshader), 
            e.attachShader(this._program, this._pshader);
            for (var t in this._attributeMap) e.bindAttribLocation(this._program, this._attributeMap[t], t);
            if (e.linkProgram(this._program), !D.isConchApp && $e.debugMode && !e.getProgramParameter(this._program, 35714)) throw e.getProgramInfoLog(this._program);
            var n = [], i = [], r = [], a = [], o = [];
            this._customUniformParamsMap = [];
            var s = 0;
            s = D.isConchApp ? e.getProgramParameterEx(this._vs, this._ps, "", 35718) : e.getProgramParameter(this._program, 35718), 
            b.useProgram(e, this._program), this._curActTexIndex = 0;
            var l, h = 0, c = 0;
            for (h = 0; h < s; h++) {
                var u = null, _ = (u = D.isConchApp ? e.getActiveUniformEx(this._vs, this._ps, "", h) : e.getActiveUniform(this._program, h)).name;
                (l = new ie()).location = e.getUniformLocation(this._program, _), _.indexOf("[0]") > 0 ? (l.name = _ = _.substr(0, _.length - 3), 
                l.isArray = !0) : (l.name = _, l.isArray = !1), l.type = u.type, this._addShaderUnifiormFun(l);
                var d = this._uniformMap[_];
                if (null != d) switch (l.dataOffset = $e.propertyNameToID(_), d) {
                  case 0:
                    o.push(l);
                    break;

                  case 1:
                    a.push(l);
                    break;

                  case 2:
                    r.push(l);
                    break;

                  case 3:
                    i.push(l);
                    break;

                  case 4:
                    n.push(l);
                    break;

                  default:
                    throw new Error("Shader3D: period is unkonw.");
                }
            }
            for (this._sceneUniformParamsMap = E.instance.createCommandEncoder(4 * n.length * 5 + 4, 64, !0), 
            h = 0, c = n.length; h < c; h++) this._sceneUniformParamsMap.addShaderUniform(n[h]);
            for (this._cameraUniformParamsMap = E.instance.createCommandEncoder(4 * i.length * 5 + 4, 64, !0), 
            h = 0, c = i.length; h < c; h++) this._cameraUniformParamsMap.addShaderUniform(i[h]);
            for (this._spriteUniformParamsMap = E.instance.createCommandEncoder(4 * r.length * 5 + 4, 64, !0), 
            h = 0, c = r.length; h < c; h++) this._spriteUniformParamsMap.addShaderUniform(r[h]);
            for (this._materialUniformParamsMap = E.instance.createCommandEncoder(4 * a.length * 5 + 4, 64, !0), 
            h = 0, c = a.length; h < c; h++) this._materialUniformParamsMap.addShaderUniform(a[h]);
            for (this._customUniformParamsMap.length = o.length, h = 0, c = o.length; h < c; h++) {
                var f = o[h];
                this._customUniformParamsMap[f.dataOffset] = f;
            }
        }, n._disposeResource = function() {
            E.instance.deleteShader(this._vshader), E.instance.deleteShader(this._pshader), 
            E.instance.deleteProgram(this._program), this._vshader = this._pshader = this._program = null, 
            this._setGPUMemory(0), this._curActTexIndex = 0;
        }, n._addShaderUnifiormFun = function(e) {
            var t = E.instance;
            e.caller = this;
            var n = e.isArray;
            switch (e.type) {
              case 35670:
                e.fun = this._uniform1i, e.uploadedValue = new Array(1);
                break;

              case 5124:
                e.fun = n ? this._uniform1iv : this._uniform1i, e.uploadedValue = new Array(1);
                break;

              case 5126:
                e.fun = n ? this._uniform1fv : this._uniform1f, e.uploadedValue = new Array(1);
                break;

              case 35664:
                e.fun = n ? this._uniform_vec2v : this._uniform_vec2, e.uploadedValue = new Array(2);
                break;

              case 35665:
                e.fun = n ? this._uniform_vec3v : this._uniform_vec3, e.uploadedValue = new Array(3);
                break;

              case 35666:
                e.fun = n ? this._uniform_vec4v : this._uniform_vec4, e.uploadedValue = new Array(4);
                break;

              case 35674:
                e.fun = this._uniformMatrix2fv;
                break;

              case 35675:
                e.fun = this._uniformMatrix3fv;
                break;

              case 35676:
                e.fun = n ? this._uniformMatrix4fv : this._uniformMatrix4f;
                break;

              case 35678:
                t.uniform1i(e.location, this._curActTexIndex), e.textureID = b._glTextureIDs[this._curActTexIndex++], 
                e.fun = this._uniform_sampler2D;
                break;

              case 35679:
                t.uniform1i(e.location, this._curActTexIndex), e.textureID = b._glTextureIDs[this._curActTexIndex++], 
                e.fun = this._uniform_sampler3D;
                break;

              case 35680:
                t.uniform1i(e.location, this._curActTexIndex), e.textureID = b._glTextureIDs[this._curActTexIndex++], 
                e.fun = this._uniform_samplerCube;
                break;

              default:
                throw new Error("compile shader err!");
            }
        }, n._createShader = function(e, t, n) {
            var i = e.createShader(n);
            if (e.shaderSource(i, t), e.compileShader(i), $e.debugMode && !e.getShaderParameter(i, 35713)) throw e.getShaderInfoLog(i);
            return i;
        }, n._uniform1f = function(e, t) {
            var n = e.uploadedValue;
            return n[0] !== t ? (E.instance.uniform1f(e.location, n[0] = t), 1) : 0;
        }, n._uniform1fv = function(e, t) {
            if (t.length < 4) {
                var n = e.uploadedValue;
                return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] || n[3] !== t[3] ? (E.instance.uniform1fv(e.location, t), 
                n[0] = t[0], n[1] = t[1], n[2] = t[2], n[3] = t[3], 1) : 0;
            }
            return E.instance.uniform1fv(e.location, t), 1;
        }, n._uniform_vec2 = function(e, t) {
            var n = t.elements, i = e.uploadedValue;
            return i[0] !== n[0] || i[1] !== n[1] ? (E.instance.uniform2f(e.location, i[0] = n[0], i[1] = n[1]), 
            1) : 0;
        }, n._uniform_vec2v = function(e, t) {
            if (t.length < 2) {
                var n = e.uploadedValue;
                return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] || n[3] !== t[3] ? (E.instance.uniform2fv(e.location, t), 
                n[0] = t[0], n[1] = t[1], n[2] = t[2], n[3] = t[3], 1) : 0;
            }
            return E.instance.uniform2fv(e.location, t), 1;
        }, n._uniform_vec3 = function(e, t) {
            var n = t.elements, i = e.uploadedValue;
            return i[0] !== n[0] || i[1] !== n[1] || i[2] !== n[2] ? (E.instance.uniform3f(e.location, i[0] = n[0], i[1] = n[1], i[2] = n[2]), 
            1) : 0;
        }, n._uniform_vec3v = function(e, t) {
            return E.instance.uniform3fv(e.location, t), 1;
        }, n._uniform_vec4 = function(e, t) {
            var n = t.elements, i = e.uploadedValue;
            return i[0] !== n[0] || i[1] !== n[1] || i[2] !== n[2] || i[3] !== n[3] ? (E.instance.uniform4f(e.location, i[0] = n[0], i[1] = n[1], i[2] = n[2], i[3] = n[3]), 
            1) : 0;
        }, n._uniform_vec4v = function(e, t) {
            return E.instance.uniform4fv(e.location, t), 1;
        }, n._uniformMatrix2fv = function(e, t) {
            return E.instance.uniformMatrix2fv(e.location, !1, t), 1;
        }, n._uniformMatrix3fv = function(e, t) {
            return E.instance.uniformMatrix3fv(e.location, !1, t), 1;
        }, n._uniformMatrix4f = function(e, t) {
            var n = t.elements;
            return E.instance.uniformMatrix4fv(e.location, !1, n), 1;
        }, n._uniformMatrix4fv = function(e, t) {
            return E.instance.uniformMatrix4fv(e.location, !1, t), 1;
        }, n._uniform1i = function(e, t) {
            var n = e.uploadedValue;
            return n[0] !== t ? (E.instance.uniform1i(e.location, n[0] = t), 1) : 0;
        }, n._uniform1iv = function(e, t) {
            return E.instance.uniform1iv(e.location, t), 1;
        }, n._uniform_ivec2 = function(e, t) {
            var n = e.uploadedValue;
            return n[0] !== t[0] || n[1] !== t[1] ? (E.instance.uniform2i(e.location, n[0] = t[0], n[1] = t[1]), 
            1) : 0;
        }, n._uniform_ivec2v = function(e, t) {
            return E.instance.uniform2iv(e.location, t), 1;
        }, n._uniform_vec3i = function(e, t) {
            var n = e.uploadedValue;
            return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] ? (E.instance.uniform3i(e.location, n[0] = t[0], n[1] = t[1], n[2] = t[2]), 
            1) : 0;
        }, n._uniform_vec3vi = function(e, t) {
            return E.instance.uniform3iv(e.location, t), 1;
        }, n._uniform_vec4i = function(e, t) {
            var n = e.uploadedValue;
            return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] || n[3] !== t[3] ? (E.instance.uniform4i(e.location, n[0] = t[0], n[1] = t[1], n[2] = t[2], n[3] = t[3]), 
            1) : 0;
        }, n._uniform_vec4vi = function(e, t) {
            return E.instance.uniform4iv(e.location, t), 1;
        }, n._uniform_sampler2D = function(e, t) {
            var n = t._getSource() || t.defaulteTexture._getSource(), i = E.instance;
            return b.activeTexture(i, e.textureID), b.bindTexture(i, 3553, n), 0;
        }, n._uniform_sampler3D = function(e, t) {
            var n = t._getSource() || t.defaulteTexture._getSource(), i = E.instance;
            return b.activeTexture(i, e.textureID), b.bindTexture(i, 32879, n), 0;
        }, n._uniform_samplerCube = function(e, t) {
            var n = t._getSource() || t.defaulteTexture._getSource(), i = E.instance;
            return b.activeTexture(i, e.textureID), b.bindTexture(i, 34067, n), 0;
        }, n.bind = function() {
            return b.useProgram(E.instance, this._program);
        }, n.uploadUniforms = function(e, t, n) {
            L.shaderCall += v.uploadShaderUniforms(E.instance, e, t, n);
        }, n.uploadCustomUniform = function(e, t) {
            L.shaderCall += v.uploadCustomUniform(E.instance, this._customUniformParamsMap, e, t);
        }, n._uniformMatrix2fvForNative = function(e, t) {
            return E.instance.uniformMatrix2fvEx(e.location, !1, t), 1;
        }, n._uniformMatrix3fvForNative = function(e, t) {
            return E.instance.uniformMatrix3fvEx(e.location, !1, t), 1;
        }, n._uniformMatrix4fvForNative = function(e, t) {
            return E.instance.uniformMatrix4fvEx(e.location, !1, t), 1;
        }, t;
    }(), yn = function(e) {
        function t() {
            t.__super.call(this), this._nodes = new gt(), this._events = [];
        }
        r(t, "laya.d3.animation.AnimationClip", y);
        var a = t.prototype;
        return a.duration = function() {
            return this._duration;
        }, a._hermiteInterpolate = function(e, t, n, i) {
            var r = e.outTangent, a = t.inTangent;
            if (Number.isFinite(r) && Number.isFinite(a)) {
                var o = n * n, s = o * n, l = s - 2 * o + n, h = s - o, c = -2 * s + 3 * o;
                return (2 * s - 3 * o + 1) * e.value + l * r * i + h * a * i + c * t.value;
            }
            return e.value;
        }, a._hermiteInterpolateArray = function(e, t, n, i, r) {
            for (var a = e.data, o = t.data, s = r.length, l = 2 * s, h = NaN, c = NaN, u = NaN, _ = NaN, d = 0, f = r.length; d < f; d++) {
                var m = a[s + d], p = o[d];
                if (Number.isFinite(m) && Number.isFinite(p)) {
                    if (0 === d) {
                        var T = n * n, E = T * n;
                        h = 2 * E - 3 * T + 1, c = E - 2 * T + n, u = E - T, _ = -2 * E + 3 * T;
                    }
                    r[d] = h * a[l + d] + c * m * i + u * p * i + _ * o[l + d];
                } else r[d] = a[l + d];
            }
        }, a._evaluateClipDatasRealTime = function(e, n, i, r, a) {
            for (var o = 0, s = e.count; o < s; o++) {
                var l = e.getNodeByIndex(o), h = l.type, c = 0, u = l._keyFrames, _ = u.length, d = i[o];
                if (a) for (-1 !== d && n < u[d].time && (d = -1, i[o] = d), c = d + 1; c < _ && !(u[c].time > n); ) d++, 
                c++, i[o] = d; else for ((c = d + 1) !== _ && n > u[c].time && (d = _ - 1, i[o] = d), 
                c = d + 1; d > -1 && !(u[d].time < n); ) d--, c--, i[o] = d;
                var f = c === _;
                switch (h) {
                  case 0:
                    if (-1 !== d) {
                        var m = u[d];
                        if (f) l.data = m.value; else {
                            var p = u[c], T = p.time - m.time, E = NaN;
                            E = 0 !== T ? (n - m.time) / T : 0, l.data = this._hermiteInterpolate(m, p, E, T);
                        }
                    } else l.data = u[0].value;
                    r && (l.data -= u[0].value);
                    break;

                  case 1:
                  case 4:
                    var v = l.data;
                    if (this._evaluateFrameNodeArrayDatasRealTime(u, d, f, n, 3, v), r) {
                        var g = u[0].data;
                        v[0] -= g[6], v[1] -= g[7], v[2] -= g[8];
                    }
                    break;

                  case 2:
                    if (v = l.data, this._evaluateFrameNodeArrayDatasRealTime(u, d, f, n, 4, v), r) {
                        var S = t._tempQuaternionArray0;
                        g = u[0].data, ke.quaternionConjugate(g, 8, S), ke.quaternionMultiply(S, v, v);
                    }
                    break;

                  case 3:
                    v = l.data, this._evaluateFrameNodeArrayDatasRealTime(u, d, f, n, 3, v), r && (g = u[0].data, 
                    v[0] /= g[6], v[1] /= g[7], v[2] /= g[8]);
                    break;

                  default:
                    throw "AnimationClip:unknown node type.";
                }
            }
        }, a._evaluateClipDatasRealTimeForNative = function(e, t, n, i) {
            E.instance.evaluateClipDatasRealTime(e._nativeObj, t, n, i);
        }, a._evaluateFrameNodeArrayDatasRealTime = function(e, t, n, i, r, a) {
            var o = 2 * r;
            if (-1 !== t) {
                var s = e[t];
                if (n) for (var l = s.data, h = 0; h < r; h++) a[h] = l[o + h]; else {
                    var c = e[t + 1], u = NaN, _ = s.time, d = c.time - _;
                    u = 0 !== d ? (i - _) / d : 0, this._hermiteInterpolateArray(s, c, u, d, a);
                }
            } else {
                var f = e[0].data;
                for (h = 0; h < r; h++) a[h] = f[o + h];
            }
        }, a._binarySearchEventIndex = function(e) {
            for (var t = 0, n = this._events.length - 1, i = 0; t <= n; ) {
                i = Math.floor((t + n) / 2);
                var r = this._events[i].time;
                if (r == e) return i;
                r > e ? n = i - 1 : t = i + 1;
            }
            return t;
        }, a.addEvent = function(e) {
            var t = this._binarySearchEventIndex(e.time);
            this._events.splice(t, 0, e);
        }, a._disposeResource = function() {
            this._version = null, this._nodes = null, this._nodesMap = null;
        }, t._parse = function(e, n, i) {
            var r = new t(), a = new u(e);
            switch (r._version = a.readUTFString(), r._version) {
              case "LAYAANIMATION:03":
                ht.parse(r, a);
                break;

              default:
                throw "unknown animationClip version.";
            }
            return r;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "ANIMATIONCLIP");
        }, i(t, [ "_tempQuaternionArray0", function() {
            return this._tempQuaternionArray0 = new Float32Array(4);
        } ]), t;
    }(), Mn = (function(e) {
        function t() {
            this._version = NaN, this._cameraCoordinateInverse = !1, this._gridSize = NaN, this._chunkNumX = 0, 
            this._chunkNumZ = 0, this._heightDataX = 0, this._heightDataZ = 0, this._heightDataBitType = 0, 
            this._heightDataValue = NaN, this._heightDataUrl = null, this._detailTextureInfos = null, 
            this._chunkInfos = null, this._heightData = null, this._materialInfo = null, this._alphaMaps = null, 
            this._normalMaps = null, t.__super.call(this);
        }
        r(t, "laya.d3.terrain.TerrainRes", y);
        var i = t.prototype;
        i.parseData = function(e) {
            var t = e[0], n = e[1];
            if (this._version = t.version, 1 == this._version) {
                this._cameraCoordinateInverse = t.cameraCoordinateInverse, this._gridSize = t.gridSize, 
                this._chunkNumX = t.chunkNumX, this._chunkNumZ = t.chunkNumZ;
                var i = t.heightData;
                if (this._heightDataX = i.numX, this._heightDataZ = i.numZ, this._heightDataBitType = i.bitType, 
                this._heightDataValue = i.value, this._heightDataUrl = n[i.url], this._materialInfo = new Et(), 
                t.material) {
                    var r = t.material.ambient, a = t.material.diffuse, s = t.material.specular;
                    this._materialInfo.ambientColor = new dn(r[0], r[1], r[2]), this._materialInfo.diffuseColor = new dn(a[0], a[1], a[2]), 
                    this._materialInfo.specularColor = new _n(s[0], s[1], s[2], s[3]);
                }
                var l = t.detailTexture;
                this._detailTextureInfos = o(l.length);
                for (var h = 0; h < l.length; h++) {
                    var c = l[h], u = new ze();
                    u.diffuseTexture = n[c.diffuse], u.normalTexture = c.normal ? n[c.normal] : null, 
                    c.scale ? u.scale = new fn(c.scale[0], c.scale[1]) : u.scale = new fn(1, 1), c.offset ? u.offset = new fn(c.offset[0], c.offset[1]) : u.offset = new fn(0, 0), 
                    this._detailTextureInfos[h] = u;
                }
                var _ = t.alphaMap;
                for (this._alphaMaps = o(_.length), h = 0; h < this._alphaMaps.length; h++) this._alphaMaps[h] = t.alphaMap[h];
                var d = t.normalMap;
                for (this._normalMaps = o(d.length), h = 0; h < this._normalMaps.length; h++) this._normalMaps[h] = t.normalMap[h];
                var f = t.chunkInfo;
                if (this._chunkNumX * this._chunkNumZ != f.length) return alert("terrain data error"), 
                !1;
                for (this._chunkInfos = o(f.length), h = 0; h < f.length; h++) {
                    var m = f[h], p = new tt(), T = m.alphaMap.length, E = m.detailID.length;
                    if (T != E) return alert("terrain chunk data error"), !1;
                    p.alphaMap = o(T), p.detailID = o(E), p.normalMap = n[this._normalMaps[m.normalMap]];
                    for (var v = 0; v < T; v++) {
                        p.alphaMap[v] = n[this._alphaMaps[m.alphaMap[v]]];
                        var S = m.detailID[v], R = S.length;
                        p.detailID[v] = new Uint8Array(R);
                        for (var A = 0; A < R; A++) p.detailID[v][A] = S[A];
                    }
                    this._chunkInfos[h] = p;
                }
                this._heightData = g.getRes(this._heightDataUrl), this.onLoadTerrainComplete(this._heightData);
            }
            return !0;
        }, i.onLoadTerrainComplete = function(e) {}, t._parse = function(e, n, i) {
            var r = new t();
            return r.parseData(e), r;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "TERRAIN", null, null, 1, !1);
        };
    }(), function(e) {
        function t() {
            this._nativeTriangleMesh = null, this._boundingBox = null, this._boundingSphere = null, 
            this._boundingBoxCorners = null, this._subMeshCount = 0, this._positions = null, 
            this._subMeshes = null, this._vertexBuffers = null, this._indexBuffer = null, this._boneNames = null, 
            this._inverseBindPoses = null, this._inverseBindPosesBuffer = null, this._bindPoseIndices = null, 
            this._skinDataPathMarks = null, this._vertexCount = 0, t.__super.call(this), this._subMeshes = [], 
            this._vertexBuffers = [], this._skinDataPathMarks = [], this._boundingBoxCorners = o(8, null);
        }
        r(t, "laya.d3.resource.models.Mesh", y);
        var s = t.prototype;
        return s._generateBoundingObject = function() {
            this._boundingSphere = new k(new dn(), 0), k.createfromPoints(this._positions, this._boundingSphere), 
            this._boundingBox = new ne(new dn(), new dn()), ne.createfromPoints(this._positions, this._boundingBox), 
            this._boundingBox.getCorners(this._boundingBoxCorners);
        }, s._getPositions = function() {
            var e, t, n, i, r, a = [], o = 0, s = 0, l = 0, h = this._vertexBuffers.length;
            for (o = 0; o < h; o++) {
                for (n = (e = this._vertexBuffers[o]).vertexDeclaration.vertexElements, s = 0; s < n.length; s++) if ("vector3" === (i = n[s]).elementFormat && 0 === i.elementUsage) {
                    t = i;
                    break;
                }
                for (r = e.getData(), s = 0; s < r.length; s += e.vertexDeclaration.vertexStride / 4) l = s + t.offset / 4, 
                a.push(new dn(r[l + 0], r[l + 1], r[l + 2]));
            }
            return a;
        }, s._setSubMeshes = function(e) {
            this._subMeshes = e, this._subMeshCount = e.length;
            for (var t = 0; t < this._subMeshCount; t++) e[t]._indexInMesh = t;
            this._positions = this._getPositions(), this._generateBoundingObject();
        }, s._getSubMesh = function(e) {
            return this._subMeshes[e];
        }, s._disposeResource = function() {
            for (var e = 0, t = this._subMeshes.length; e < t; e++) this._subMeshes[e].destroy();
            for (this._nativeTriangleMesh && Dt._physics3D.destroy(this._nativeTriangleMesh), 
            e = 0, t = this._vertexBuffers.length; e < t; e++) this._vertexBuffers[e].destroy();
            this._indexBuffer.destroy(), this._setCPUMemory(0), this._setGPUMemory(0), this._vertexBuffers = null, 
            this._indexBuffer = null, this._subMeshes = null, this._nativeTriangleMesh = null, 
            this._vertexBuffers = null, this._indexBuffer = null, this._boneNames = null, this._inverseBindPoses = null;
        }, s._getPhysicMesh = function() {
            if (!this._nativeTriangleMesh) {
                for (var e = new Dt._physics3D.btTriangleMesh(), n = t._nativeTempVector30, i = t._nativeTempVector31, r = t._nativeTempVector32, a = this._getPositions(), o = this._indexBuffer.getData(), s = 0, l = o.length; s < l; s += 3) {
                    var h = a[o[s]], c = a[o[s + 1]], u = a[o[s + 2]];
                    ke._convertToBulletVec3(h, n, !0), ke._convertToBulletVec3(c, i, !0), ke._convertToBulletVec3(u, r, !0), 
                    e.addTriangle(n, i, r, !0);
                }
                this._nativeTriangleMesh = e;
            }
            return this._nativeTriangleMesh;
        }, a(0, s, "inverseAbsoluteBindPoses", function() {
            return this._inverseBindPoses;
        }), a(0, s, "vertexCount", function() {
            return this._vertexCount;
        }), a(0, s, "subMeshCount", function() {
            return this._subMeshCount;
        }), a(0, s, "boundingBox", function() {
            return this._boundingBox;
        }), a(0, s, "boundingBoxCorners", function() {
            return this._boundingBoxCorners;
        }), a(0, s, "boundingSphere", function() {
            return this._boundingSphere;
        }), t._parse = function(e, n, i) {
            var r = new t();
            return X.read(e, r, r._subMeshes), r;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "MESH");
        }, i(t, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector31", function() {
            return this._nativeTempVector31 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector32", function() {
            return this._nativeTempVector32 = new Dt._physics3D.btVector3(0, 0, 0);
        } ]), t;
    }()), Cn = function(e) {
        function t(e) {
            this._terrainSprite3DOwner = null, this._projectionViewWorldMatrix = null, t.__super.call(this, e), 
            this._terrainSprite3DOwner = e, this._projectionViewWorldMatrix = new ut();
        }
        r(t, "laya.d3.terrain.TerrainRender", e);
        var n = t.prototype;
        return n._calculateBoundingSphere = function() {
            var e = this._terrainSprite3DOwner.terrainFilter;
            if (null == e) this._boundingSphere.toDefault(); else {
                var t = e._boundingSphere, n = NaN, i = this._terrainSprite3DOwner.transform, r = i.scale;
                if (n = r.x >= r.y && r.x >= r.z ? r.x : r.y >= r.z ? r.y : r.z, dn.transformCoordinate(t.center, i.worldMatrix, this._boundingSphere.center), 
                this._boundingSphere.radius = t.radius * n, e.calcLeafBoudingSphere(i.worldMatrix, n), 
                D.isConchApp) {
                    var a = this._boundingSphere.center.elements, o = q._cullingBuffer;
                    o[this._cullingBufferIndex + 1] = a[0], o[this._cullingBufferIndex + 2] = a[1], 
                    o[this._cullingBufferIndex + 3] = a[2], o[this._cullingBufferIndex + 4] = this._boundingSphere.radius;
                }
            }
        }, n._needRender = function(e) {
            return !e || 0 !== e.containsBoundSphere(this.boundingSphere);
        }, n._calculateBoundingBox = function() {
            var e = this._terrainSprite3DOwner.terrainFilter;
            if (null == e) this._boundingBox.toDefault(); else {
                for (var t = this._terrainSprite3DOwner.transform.worldMatrix, n = e._boundingBoxCorners, i = 0; i < 8; i++) dn.transformCoordinate(n[i], t, Lt._tempBoundBoxCorners[i]);
                ne.createfromPoints(Lt._tempBoundBoxCorners, this._boundingBox), e.calcLeafBoudingBox(t);
            }
        }, n._renderUpdate = function(e, t) {
            this._shaderValues.setMatrix4x4(Sn.WORLDMATRIX, t.worldMatrix);
        }, n._renderUpdateWithCamera = function(e, t) {
            var n = e.projectionViewMatrix;
            ut.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Sn.MVPMATRIX, this._projectionViewWorldMatrix);
        }, n._destroy = function() {
            e.prototype._destroy.call(this), this._terrainSprite3DOwner = null;
        }, t;
    }(Lt), xn = function(e) {
        function t(e) {
            this._projectionViewWorldMatrix = null, t.__super.call(this, e), this._projectionViewWorldMatrix = new ut();
        }
        r(t, "laya.d3.core.pixelLine.PixelLineRenderer", Lt);
        var n = t.prototype;
        return n._calculateBoundingBox = function() {
            var e = this._boundingBox.min.elements;
            e[0] = -Number.MAX_VALUE, e[1] = -Number.MAX_VALUE, e[2] = -Number.MAX_VALUE;
            var t = this._boundingBox.min.elements;
            t[0] = Number.MAX_VALUE, t[1] = Number.MAX_VALUE, t[2] = Number.MAX_VALUE;
        }, n._calculateBoundingSphere = function() {
            var e = this._boundingSphere.center.elements;
            e[0] = 0, e[1] = 0, e[2] = 0, this._boundingSphere.radius = Number.MAX_VALUE;
        }, n._renderUpdateWithCamera = function(e, t) {
            var n = e.projectionViewMatrix, i = this._shaderValues;
            if (t) {
                var r = t.worldMatrix;
                i.setMatrix4x4(Sn.WORLDMATRIX, r), ut.multiply(n, r, this._projectionViewWorldMatrix), 
                i.setMatrix4x4(Sn.MVPMATRIX, this._projectionViewWorldMatrix);
            } else i.setMatrix4x4(Sn.WORLDMATRIX, ut.DEFAULT), i.setMatrix4x4(Sn.MVPMATRIX, n);
        }, t;
    }(), On = function(e) {
        function t(e) {
            this._projectionViewWorldMatrix = new ut(), t.__super.call(this, e);
        }
        r(t, "laya.d3.core.trail.TrailRenderer", e);
        var n = t.prototype;
        return n._calculateBoundingBox = function() {
            var e = this._boundingBox.min.elements;
            e[0] = -Number.MAX_VALUE, e[1] = -Number.MAX_VALUE, e[2] = -Number.MAX_VALUE;
            var t = this._boundingBox.min.elements;
            t[0] = Number.MAX_VALUE, t[1] = Number.MAX_VALUE, t[2] = Number.MAX_VALUE;
        }, n._calculateBoundingSphere = function() {
            this._owner.transform.position.cloneTo(this._boundingSphere.center), this._boundingSphere.radius = Number.MAX_VALUE;
        }, n._needRender = function(e) {
            return !0;
        }, n._renderUpdate = function(t, n) {
            e.prototype._renderUpdate.call(this, t, n), this._owner.trailFilter._update(t);
        }, n._renderUpdateWithCamera = function(e, t) {
            var n = e.projectionViewMatrix;
            t ? (ut.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Sn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Sn.MVPMATRIX, n), 
            Dt.debugMode && this._renderRenderableBoundBox();
        }, t;
    }(Lt), Ln = function(e) {
        function t(e) {
            t.__super.call(this, e), this._projectionViewWorldMatrix = new ut();
        }
        r(t, "laya.d3.core.MeshRenderer", e);
        var n = t.prototype;
        return n._onMeshChange = function(e) {
            this._boundingSphereNeedChange = !0, this._boundingBoxNeedChange = !0, this._boundingBoxCenterNeedChange = !0, 
            this._octreeNodeNeedChange = !0;
        }, n._calculateBoundingSphereByInitSphere = function(e) {
            var t = NaN, n = this._owner.transform, i = n.scale.elements, r = i[0];
            r || (r = -r);
            var a = i[1];
            a || (a = -a);
            var o = i[2];
            if (o || (o = -o), t = r >= a && r >= o ? r : a >= o ? a : o, dn.transformCoordinate(e.center, n.worldMatrix, this._boundingSphere.center), 
            this._boundingSphere.radius = e.radius * t, D.isConchApp) {
                var s = this._boundingSphere.center.elements, l = q._cullingBuffer;
                l[this._cullingBufferIndex + 1] = s[0], l[this._cullingBufferIndex + 2] = s[1], 
                l[this._cullingBufferIndex + 3] = s[2], l[this._cullingBufferIndex + 4] = this._boundingSphere.radius;
            }
        }, n._calculateBoundBoxByInitCorners = function(e) {
            for (var t = this._owner.transform.worldMatrix, n = 0; n < 8; n++) ne.createfromPoints(Lt._tempBoundBoxCorners, this._boundingBox);
            dn.transformCoordinate(e[n], t, Lt._tempBoundBoxCorners[n]);
        }, n._calculateBoundingSphere = function() {
            var e = this._owner.meshFilter.sharedMesh;
            null == e || null == e.boundingSphere ? this._boundingSphere.toDefault() : this._calculateBoundingSphereByInitSphere(e.boundingSphere);
        }, n._calculateBoundingBox = function() {
            var e = this._owner.meshFilter.sharedMesh;
            null == e || null == e.boundingBox ? this._boundingBox.toDefault() : this._calculateBoundBoxByInitCorners(e.boundingBoxCorners);
        }, n._needRender = function(e) {
            return !e || 0 !== e.containsBoundSphere(this.boundingSphere);
        }, n._renderUpdate = function(e, t) {
            t ? this._shaderValues.setMatrix4x4(Sn.WORLDMATRIX, t.worldMatrix) : this._shaderValues.setMatrix4x4(Sn.WORLDMATRIX, ut.DEFAULT);
        }, n._renderUpdateWithCamera = function(e, t) {
            var n = e.projectionViewMatrix;
            t ? (ut.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Sn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Sn.MVPMATRIX, n), 
            Dt.debugMode && this._renderRenderableBoundBox();
        }, n._destroy = function() {
            this._isPartOfStaticBatch && mn.instance._destroyRenderSprite(this._owner), e.prototype._destroy.call(this);
        }, t;
    }(Lt), Nn = function(e) {
        function t(e, n) {
            this._isTrigger = !1, t.__super.call(this, e, n);
        }
        r(t, "laya.d3.physics.PhysicsTriggerComponent", e);
        var n = t.prototype;
        return n._onAdded = function() {
            e.prototype._onAdded.call(this), this.isTrigger = this._isTrigger;
        }, n._cloneTo = function(t) {
            e.prototype._cloneTo.call(this, t), t.isTrigger = this._isTrigger;
        }, a(0, n, "isTrigger", function() {
            return this._isTrigger;
        }, function(e) {
            if (this._isTrigger = e, this._nativeColliderObject && this._enabled && e) {
                var t = this._nativeColliderObject.getCollisionFlags();
                0 == (4 & t) && this._nativeColliderObject.setCollisionFlags(4 | t);
            }
        }), t;
    }(Pt), Vn = function(e) {
        function t(e) {
            this._finalGravity = new dn(), this._tempRotationMatrix = new ut(), t.__super.call(this, e), 
            this._defaultBoundBox = new ne(new dn(), new dn()), this._renderMode = -1, this.stretchedBillboardCameraSpeedScale = 0, 
            this.stretchedBillboardSpeedScale = 0, this.stretchedBillboardLengthScale = 1;
        }
        r(t, "laya.d3.core.particleShuriKen.ShurikenParticleRenderer", e);
        var n = t.prototype;
        return n._calculateBoundingBox = function() {
            var e = this._boundingBox.min.elements;
            e[0] = -Number.MAX_VALUE, e[1] = -Number.MAX_VALUE, e[2] = -Number.MAX_VALUE;
            var t = this._boundingBox.min.elements;
            t[0] = Number.MAX_VALUE, t[1] = Number.MAX_VALUE, t[2] = Number.MAX_VALUE;
        }, n._calculateBoundingSphere = function() {
            var e = this._owner.particleSystem._boundingSphere, t = NaN, n = this._owner.transform, i = n.scale.elements, r = Math.abs(i[0]), a = Math.abs(i[1]), o = Math.abs(i[2]);
            if (t = r >= a && r >= o ? r : a >= o ? a : o, dn.transformCoordinate(e.center, n.worldMatrix, this._boundingSphere.center), 
            this._boundingSphere.radius = e.radius * t, D.isConchApp) {
                var s = this._boundingSphere.center.elements, l = q._cullingBuffer;
                l[this._cullingBufferIndex + 1] = s[0], l[this._cullingBufferIndex + 2] = s[1], 
                l[this._cullingBufferIndex + 3] = s[2], l[this._cullingBufferIndex + 4] = this._boundingSphere.radius;
            }
        }, n._needRender = function(e) {
            return !e || 0 !== e.containsBoundSphere(this.boundingSphere) && !!this._owner.particleSystem.isAlive;
        }, n._renderUpdate = function(e, t) {
            var n = this._owner.particleSystem, i = this._shaderValues, r = this._owner.transform;
            switch (n.simulationSpace) {
              case 0:
                break;

              case 1:
                i.setVector(ni.WORLDPOSITION, r.position), i.setQuaternion(ni.WORLDROTATION, r.rotation);
                break;

              default:
                throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
            }
            switch (n.scaleMode) {
              case 0:
                var a = r.scale;
                i.setVector(ni.POSITIONSCALE, a), i.setVector(ni.SIZESCALE, a);
                break;

              case 1:
                var o = r.localScale;
                i.setVector(ni.POSITIONSCALE, o), i.setVector(ni.SIZESCALE, o);
                break;

              case 2:
                i.setVector(ni.POSITIONSCALE, r.scale), i.setVector(ni.SIZESCALE, dn.ONE);
            }
            dn.scale(fe.gravity, n.gravityModifier, this._finalGravity), i.setVector(ni.GRAVITY, this._finalGravity), 
            i.setInt(ni.SIMULATIONSPACE, n.simulationSpace), i.setBool(ni.THREEDSTARTROTATION, n.threeDStartRotation), 
            i.setInt(ni.SCALINGMODE, n.scaleMode), i.setNumber(ni.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale), 
            i.setNumber(ni.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale), 
            i.setNumber(ni.CURRENTTIME, n._currentTime), Dt.debugMode && this._renderRenderableBoundBox();
        }, n._destroy = function() {
            e.prototype._destroy.call(this), this._mesh && (this._mesh._removeReference(), this._mesh = null);
        }, a(0, n, "boundingBox", function() {
            return this._owner.particleSystem.isAlive ? (this._boundingBoxNeedChange && (this._calculateBoundingBox(), 
            this._boundingBoxNeedChange = !1), this._boundingBox) : this._defaultBoundBox;
        }), a(0, n, "renderMode", function() {
            return this._renderMode;
        }, function(e) {
            if (this._renderMode !== e) {
                var t = this._defineDatas;
                switch (this._renderMode) {
                  case 0:
                    t.remove(ni.SHADERDEFINE_RENDERMODE_BILLBOARD);
                    break;

                  case 1:
                    t.remove(ni.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                    break;

                  case 2:
                    t.remove(ni.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                    break;

                  case 3:
                    t.remove(ni.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                    break;

                  case 4:
                    t.remove(ni.SHADERDEFINE_RENDERMODE_MESH);
                }
                switch (this._renderMode = e, e) {
                  case 0:
                    t.add(ni.SHADERDEFINE_RENDERMODE_BILLBOARD);
                    break;

                  case 1:
                    t.add(ni.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                    break;

                  case 2:
                    t.add(ni.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                    break;

                  case 3:
                    t.add(ni.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                    break;

                  case 4:
                    t.add(ni.SHADERDEFINE_RENDERMODE_MESH);
                    break;

                  default:
                    throw new Error("ShurikenParticleRender: unknown renderMode Value.");
                }
                this._owner.particleSystem._initBufferDatas();
            }
        }), a(0, n, "mesh", function() {
            return this._mesh;
        }, function(e) {
            this._mesh !== e && (this._mesh && this._mesh._removeReference(), this._mesh = e, 
            e && e._addReference(), this._owner.particleSystem._initBufferDatas());
        }), t;
    }(Lt), Pn = (function(e) {
        function t(e, n, i, r) {
            this._maxSlope = 45, this._jumpSpeed = 10, this._fallSpeed = 55, this._upAxis = new dn(0, 1, 0), 
            this._gravity = new dn(0, 3 * -9.8, 0), void 0 === e && (e = .1), void 0 === i && (i = 1), 
            void 0 === r && (r = fe.COLLISIONFILTERGROUP_ALLFILTER), this._stepHeight = e, n && (this._upAxis = n), 
            t.__super.call(this, i, r);
        }
        r(t, "laya.d3.physics.CharacterController", e);
        var n = t.prototype;
        n._constructCharacter = function() {
            var e = Dt._physics3D;
            this._nativeKinematicCharacter && e.destroy(this._nativeKinematicCharacter);
            var n = t._nativeTempVector30;
            n.setValue(this._upAxis.x, this._upAxis.y, this._upAxis.z), this._nativeKinematicCharacter = new e.btKinematicCharacterController(this._nativeColliderObject, this._colliderShape._nativeShape, this._stepHeight, n), 
            this.fallSpeed = this._fallSpeed, this.maxSlope = this._maxSlope, this.jumpSpeed = this._jumpSpeed, 
            this.gravity = this._gravity;
        }, n._onShapeChange = function(t) {
            e.prototype._onShapeChange.call(this, t), this._constructCharacter();
        }, n._onAdded = function() {
            var t = new Dt._physics3D.btPairCachingGhostObject();
            t.setUserIndex(this.id), t.setCollisionFlags(16), this._nativeColliderObject = t, 
            this._colliderShape && this._constructCharacter(), e.prototype._onAdded.call(this);
        }, n._addToSimulation = function() {
            this._simulation._characters.push(this), this._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);
        }, n._removeFromSimulation = function() {
            this._simulation._removeCharacter(this);
            var e = this._simulation._characters;
            e.splice(e.indexOf(this), 1);
        }, n._cloneTo = function(t) {
            e.prototype._cloneTo.call(this, t);
            var n = t;
            n.stepHeight = this._stepHeight, n.upAxis = this._upAxis, n.maxSlope = this._maxSlope, 
            n.jumpSpeed = this._jumpSpeed, n.fallSpeed = this._fallSpeed, n.gravity = this._gravity;
        }, n._onDestroy = function() {
            Dt._physics3D.destroy(this._nativeKinematicCharacter), e.prototype._onDestroy.call(this), 
            this._nativeKinematicCharacter = null;
        }, n.move = function(e) {
            var t = e.elements, n = Pt._nativeVector30;
            n.setValue(-t[0], t[1], t[2]), this._nativeKinematicCharacter.setWalkDirection(n);
        }, n.jump = function(e) {
            if (e) {
                var t = Pt._nativeVector30;
                ke._convertToBulletVec3(e, t, !0), this._nativeKinematicCharacter.jump(t);
            } else this._nativeKinematicCharacter.jump();
        }, a(0, n, "fallSpeed", function() {
            return this._fallSpeed;
        }, function(e) {
            this._fallSpeed = e, this._nativeKinematicCharacter.setFallSpeed(e);
        }), a(0, n, "stepHeight", function() {
            return this._stepHeight;
        }, function(e) {
            this._stepHeight = e, this._constructCharacter();
        }), a(0, n, "jumpSpeed", function() {
            return this._jumpSpeed;
        }, function(e) {
            this._jumpSpeed = e, this._nativeKinematicCharacter.setJumpSpeed(e);
        }), a(0, n, "gravity", function() {
            return this._gravity;
        }, function(e) {
            this._gravity = e;
            var n = t._nativeTempVector30;
            n.setValue(-e.x, e.y, e.z), this._nativeKinematicCharacter.setGravity(n);
        }), a(0, n, "maxSlope", function() {
            return this._maxSlope;
        }, function(e) {
            this._maxSlope = e, this._nativeKinematicCharacter.setMaxSlope(e / 180 * Math.PI);
        }), a(0, n, "isGrounded", function() {
            return this._nativeKinematicCharacter.onGround();
        }), a(0, n, "upAxis", function() {
            return this._upAxis;
        }, function(e) {
            this._upAxis = e, this._constructCharacter();
        }), t.UPAXIS_X = 0, t.UPAXIS_Y = 1, t.UPAXIS_Z = 2, i(t, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new Dt._physics3D.btVector3(0, 0, 0);
        } ]);
    }(Pt), function(e) {
        function t() {
            if (this._reflectionMode = 1, this._enableLightCount = 3, this.enableLight = !0, 
            this._time = 0, t.__super.call(this), this._lights = [], this._skyRenderer = new te(), 
            this._input = new me(), this._timer = n.timer, this._collsionTestList = [], this._renders = new gn(), 
            this._opaqueQueue = new U(!1), this._transparentQueue = new U(!0), this._cameraPool = [], 
            this._animatorPool = new gn(), this._scriptPool = new gn(), this._castShadowRenders = new En(), 
            this.currentCreationLayer = Math.pow(2, 0), this._key = new V(), this._pickIdToSprite = new Object(), 
            D.isConchApp) {
                this._glCommandEncoder = E.instance.createCommandEncoder(102400, 2560, !1), this._conchData._int32Data[26] = this._glCommandEncoder.getPtrID(), 
                this._renderType |= 1024, this._setRenderType(this._renderType);
                var e = this._callbackFuncObj;
                e || (e = this._callbackFuncObj = new CallbackFuncObj()), this._conchData._int32Data[54] = e.id, 
                e.addCallbackFunc(3, this.renderCallbackFromNative.bind(this)), this._conchData._int32Data[62] = 3;
            }
            Dt._enbalePhysics && (this._physicsSimulation = new it(Dt.physicsSettings)), this._lightmaps = [], 
            this._defineDatas = new le(), this._shaderValues = new vt(null), this.parallelSplitShadowMaps = [], 
            this.enableFog = !1, this.fogStart = 300, this.fogRange = 1e3, this.fogColor = new dn(.7, .7, .7), 
            this.ambientColor = new dn(.212, .227, .259), this.reflectionIntensity = 1, F.shaderHighPrecision && this._defineDatas.add($e.SHADERDEFINE_HIGHPRECISION), 
            D.isConchApp && (this._cullingBufferIndices = new Int32Array(1024), this._cullingBufferResult = new Int32Array(1024)), 
            this._shaderValues.setTexture(laya.d3.core.scene.Scene3D.RANGEATTENUATIONTEXTURE, Ot._rangeAttenTex), 
            this._scene = this, Dt._enbalePhysics && !it.disableSimulation && this._input.__init__(D.canvas, this);
        }
        r(t, "laya.d3.core.scene.Scene3D", e);
        var o = t.prototype;
        return n.imps(o, {
            "laya.webgl.submit.ISubmit": !0,
            "laya.resource.ICreateResource": !0
        }), o._allotPickColorByID = function(e, t) {
            var n = Math.floor(e / 65025);
            e -= 255 * n * 255;
            var i = Math.floor(e / 255), r = e -= 255 * i, a = t.elements;
            a[0] = n / 255, a[1] = i / 255, a[2] = r / 255, a[3] = 1;
        }, o._searchIDByPickColor = function(e) {
            var t = e.elements;
            return 255 * t[0] * 255 + 255 * t[1] + t[2];
        }, o._setLightmapToChildNode = function(e) {
            e instanceof laya.d3.core.RenderableSprite3D && e._render._applyLightMapParams();
            for (var t = e._children, n = 0, i = t.length; n < i; n++) this._setLightmapToChildNode(t[n]);
        }, o._update = function() {
            var e = this.timer._delta / 1e3;
            this._time += e, this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.TIME, this._time);
            var t = this._physicsSimulation;
            Dt._enbalePhysics && !it.disableSimulation && (t._updatePhysicsTransformFromRender(), 
            Pt._addUpdateList = !1, t._simulate(e), t._updateCharacters(), Pt._addUpdateList = !0, 
            t._updateCollisions(), t._eventScripts(), this._input._update()), this._updateScript(), 
            wt._update(this), this._lateUpdateScript();
        }, o._binarySearchIndexInCameraPool = function(e) {
            for (var t = 0, n = this._cameraPool.length - 1, i = 0; t <= n; ) {
                i = Math.floor((t + n) / 2);
                var r = this._cameraPool[i]._renderingOrder;
                if (r == e._renderingOrder) return i;
                r > e._renderingOrder ? n = i - 1 : t = i + 1;
            }
            return t;
        }, o._setCreateURL = function(e) {
            this._url = e;
        }, o._getGroup = function() {
            return this._group;
        }, o._setGroup = function(e) {
            this._group = e;
        }, o._updateScript = function() {
            for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; n < i; n++) {
                var r = t[n];
                r && r.enabled && r.onUpdate();
            }
        }, o._lateUpdateScript = function() {
            for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; n < i; n++) {
                var r = t[n];
                r && r.enabled && r.onLateUpdate();
            }
        }, o._preRenderScript = function() {
            for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; n < i; n++) {
                var r = t[n];
                r && r.enabled && r.onPreRender();
            }
        }, o._postRenderScript = function() {
            for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; n < i; n++) {
                var r = t[n];
                r && r.enabled && r.onPostRender();
            }
        }, o.initOctree = function(e, t, n, i, r) {
            void 0 === r && (r = 6), this.treeSize = new dn(e, t, n), this.treeLevel = r, this.treeRoot = new z(this, 0), 
            this.treeRoot.initRoot(i, this.treeSize);
        }, o._prepareSceneToRender = function() {
            var e = this._lights.length;
            if (e > 0) for (var t = 0, n = 0; n < e && !(this._lights[n]._prepareToScene() && ++t >= this._enableLightCount); n++) ;
        }, o._addCamera = function(e) {
            for (var t = this._binarySearchIndexInCameraPool(e), n = e._renderingOrder, i = this._cameraPool.length; t < i && this._cameraPool[t]._renderingOrder <= n; ) t++;
            this._cameraPool.splice(t, 0, e);
        }, o._removeCamera = function(e) {
            this._cameraPool.splice(this._cameraPool.indexOf(e), 1);
        }, o._preCulling = function(e, t) {
            t.useOcclusionCulling ? q.renderObjectCulling(t, this, e, this._renders) : q.renderObjectCulling(null, this, e, this._renders);
        }, o._clear = function(e, t) {
            var n = t.viewport, i = t.camera, r = i.renderTarget, a = n.width, o = n.height, s = n.x, l = i._canvasHeight - n.y - o;
            e.viewport(s, l, a, o);
            var h = 256, c = i.clearFlag;
            switch (1 !== c || i.skyRenderer._isAvailable() || this._skyRenderer._isAvailable() || (c = 0), 
            c) {
              case 0:
                var u = i.clearColor;
                if (u) {
                    e.enable(3089), e.scissor(s, l, a, o);
                    var _ = u.elements;
                    e.clearColor(_[0], _[1], _[2], _[3]), h |= 16384;
                }
                if (r) switch (u || (h = 16384), r.depthStencilFormat) {
                  case 0:
                    h |= 256;
                    break;

                  case 1:
                    h |= 1024;
                    break;

                  case 2:
                    h |= 256, h |= 1024;
                }
                e.clear(h), u && e.disable(3089);
                break;

              case 1:
              case 2:
                if (r) switch (h = 16384, r.depthStencilFormat) {
                  case 0:
                    h |= 256;
                    break;

                  case 1:
                    h |= 1024;
                    break;

                  case 2:
                    h |= 256, h |= 1024;
                }
                e.clear(h);
                break;

              case 3:
                break;

              default:
                throw new Error("BaseScene:camera clearFlag invalid.");
            }
        }, o._renderScene = function(e, t, n, i) {
            var r = t.camera;
            r.transform.position;
            r.renderTarget ? this._opaqueQueue._render(t, !0, n, i) : this._opaqueQueue._render(t, !1, n, i), 
            1 === r.clearFlag && (r.skyRenderer._isAvailable() ? r.skyRenderer._render(t) : this._skyRenderer._isAvailable() && this._skyRenderer._render(t)), 
            r.renderTarget ? this._transparentQueue._render(t, !0, n, i) : this._transparentQueue._render(t, !1, n, i);
        }, o._parse = function(e) {
            var t = e.lightmaps;
            if (t) {
                var n = t.length, i = this._lightmaps;
                i.length = n;
                for (var r = 0; r < n; r++) i[r] = g.getRes(t[r].path);
                this.setlightmaps(i);
            }
            var a = e.ambientColor;
            if (a) {
                var o = this.ambientColor;
                o.fromArray(a), this.ambientColor = o;
            }
            var s = e.sky;
            if (s) switch (this._skyRenderer.material = g.getRes(s.material.path), s.mesh) {
              case "SkyBox":
                this._skyRenderer.mesh = tn.instance;
                break;

              case "SkyDome":
                this._skyRenderer.mesh = hn.instance;
                break;

              default:
                this.skyRenderer.mesh = tn.instance;
            }
            var l = e.reflectionTexture;
            l && (this.customReflection = g.getRes(l)), this.enableFog = e.enableFog, this.fogStart = e.fogStart, 
            this.fogRange = e.fogRange;
            var h = e.fogColor;
            if (h) {
                var c = this.fogColor;
                c.fromArray(h), this.fogColor = c;
            }
        }, o._onActive = function() {
            n.stage._scene3Ds.push(this);
        }, o._onInActive = function() {
            var e = n.stage._scene3Ds;
            e.splice(e.indexOf(this), 1);
        }, o._addLight = function(e) {
            this._lights.indexOf(e) < 0 && this._lights.push(e);
        }, o._removeLight = function(e) {
            var t = this._lights.indexOf(e);
            t >= 0 && this._lights.splice(t, 1);
        }, o.isLayerVisible = function(e, t) {
            return 0 != (Math.pow(2, e) & t.cullingMask);
        }, o.addTreeNode = function(e) {
            this.treeRoot.addTreeNode(e);
        }, o.removeTreeNode = function(e) {
            this.treeSize && e._treeNode && e._treeNode.removeObject(e);
        }, o._addRenderObject = function(e) {
            if (this.treeRoot) this.addTreeNode(e); else if (this._renders.add(e), D.isConchApp) {
                var t = e._getIndexInList(), n = this._cullingBufferIndices.length;
                if (t >= n) {
                    var i = this._cullingBufferIndices, r = this._cullingBufferResult;
                    this._cullingBufferIndices = new Int32Array(n + 1024), this._cullingBufferResult = new Int32Array(n + 1024), 
                    this._cullingBufferIndices.set(i, 0), this._cullingBufferResult.set(r, 0);
                }
                this._cullingBufferIndices[t] = e._cullingBufferIndex;
            }
        }, o._removeRenderObject = function(e) {
            if (this.treeRoot) this.removeTreeNode(e); else {
                var t;
                D.isConchApp && (t = this._renders.elements[this._renders.length - 1]), this._renders.remove(e), 
                D.isConchApp && (this._cullingBufferIndices[t._getIndexInList()] = t._cullingBufferIndex);
            }
        }, o._addShadowCastRenderObject = function(e) {
            this.treeRoot ? this.addTreeNode(e) : this._castShadowRenders.add(e);
        }, o._removeShadowCastRenderObject = function(e) {
            this.treeRoot ? this.removeTreeNode(e) : this._castShadowRenders.remove(e);
        }, o._getRenderQueue = function(e) {
            return e < 3e3 ? this._opaqueQueue : this._transparentQueue;
        }, o.setlightmaps = function(e) {
            this._lightmaps = e;
            for (var t = 0, n = this._children.length; t < n; t++) this._setLightmapToChildNode(this._children[t]);
        }, o.getlightmaps = function() {
            return this._lightmaps;
        }, o.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._skyRenderer.destroy(), this._skyRenderer = null, this._lights = null, this._lightmaps = null, 
            this._renderTargetTexture = null, this._shaderValues = null, this._renders = null, 
            this._castShadowRenders = null, this._cameraPool = null, this.treeRoot = null, this.treeSize = null, 
            this.parallelSplitShadowMaps = null, this._physicsSimulation && this._physicsSimulation._destroy(), 
            g.clearRes(this.url));
        }, o.render = function(e, t, n) {
            e._curSubmit = N.RENDERBASE, this._children.length > 0 && e.addRenderObject(this);
        }, o.renderSubmit = function() {
            var e = E.instance;
            D.isConchApp && (this._glCommandEncoder && this._glCommandEncoder.clearEncoding(), 
            e.beginCommandEncoding(this._glCommandEncoder)), this._prepareSceneToRender();
            var t = 0, n = 0, i = 0;
            for (t = 0, i = (n = this._cameraPool.length) - 1; t < n; t++) {
                D.isConchApp && vt.setRuntimeValueMode(t == i);
                var r = this._cameraPool[t];
                r.enableRender && r.render();
            }
            return D.isConchApp && (e.endCommandEncoding(), h._bindedVertexBuffer = null, h._bindedIndexBuffer = null), 
            B.set2DRenderConfig(), 1;
        }, o.getRenderType = function() {
            return 0;
        }, o.releaseRender = function() {}, o.reUse = function(e, t) {
            return 0;
        }, o.renderCallbackFromNative = function() {
            this._update(), this.renderSubmit();
        }, o.renderToNative = function(e, t, n) {
            e.gl.block(this._conchData);
        }, a(0, o, "fogColor", function() {
            return this._shaderValues.getVector(laya.d3.core.scene.Scene3D.FOGCOLOR);
        }, function(e) {
            this._shaderValues.setVector(laya.d3.core.scene.Scene3D.FOGCOLOR, e);
        }), a(0, o, "enableFog", function() {
            return this._enableFog;
        }, function(e) {
            this._enableFog !== e && (this._enableFog = e, e ? this._defineDatas.add(laya.d3.core.scene.Scene3D.SHADERDEFINE_FOG) : this._defineDatas.remove(laya.d3.core.scene.Scene3D.SHADERDEFINE_FOG));
        }), a(0, o, "url", function() {
            return this._url;
        }), a(0, o, "fogStart", function() {
            return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.FOGSTART);
        }, function(e) {
            this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.FOGSTART, e);
        }), a(0, o, "reflectionIntensity", function() {
            return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.REFLETIONINTENSITY);
        }, function(e) {
            e = Math.max(Math.min(e, 1), 0), this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.REFLETIONINTENSITY, e);
        }), a(0, o, "skyRenderer", function() {
            return this._skyRenderer;
        }), a(0, o, "fogRange", function() {
            return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.FOGRANGE);
        }, function(e) {
            this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.FOGRANGE, e);
        }), a(0, o, "ambientColor", function() {
            return this._shaderValues.getVector(laya.d3.core.scene.Scene3D.AMBIENTCOLOR);
        }, function(e) {
            this._shaderValues.setVector(laya.d3.core.scene.Scene3D.AMBIENTCOLOR, e);
        }), a(0, o, "customReflection", function() {
            return this._shaderValues.getTexture(laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE);
        }, function(e) {
            this._shaderValues.setTexture(laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE, e), 
            e ? this._defineDatas.add(laya.d3.core.scene.Scene3D.SHADERDEFINE_REFLECTMAP) : this._defineDatas.remove(laya.d3.core.scene.Scene3D.SHADERDEFINE_REFLECTMAP);
        }), a(0, o, "physicsSimulation", function() {
            return this._physicsSimulation;
        }), a(0, o, "reflectionMode", function() {
            return this._reflectionMode;
        }, function(e) {
            this._reflectionMode = e;
        }), a(0, o, "timer", function() {
            return this._timer;
        }, function(e) {
            this._timer = e;
        }), a(0, o, "input", function() {
            return this._input;
        }), t._parse = function(e, t, n) {
            var i = e.data, r = [], a = ke._createNodeByJson(i, r);
            return Pe.combine(null, r), a;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "HIERARCHY");
        }, t.REFLECTIONMODE_SKYBOX = 0, t.REFLECTIONMODE_CUSTOM = 1, t.SHADERDEFINE_FOG = 0, 
        t.SHADERDEFINE_DIRECTIONLIGHT = 0, t.SHADERDEFINE_POINTLIGHT = 0, t.SHADERDEFINE_SPOTLIGHT = 0, 
        t.SHADERDEFINE_CAST_SHADOW = 0, t.SHADERDEFINE_SHADOW_PSSM1 = 0, t.SHADERDEFINE_SHADOW_PSSM2 = 0, 
        t.SHADERDEFINE_SHADOW_PSSM3 = 0, t.SHADERDEFINE_SHADOW_PCF_NO = 0, t.SHADERDEFINE_SHADOW_PCF1 = 0, 
        t.SHADERDEFINE_SHADOW_PCF2 = 0, t.SHADERDEFINE_SHADOW_PCF3 = 0, t.SHADERDEFINE_REFLECTMAP = 0, 
        i(t, [ "FOGCOLOR", function() {
            return this.FOGCOLOR = $e.propertyNameToID("u_FogColor");
        }, "FOGSTART", function() {
            return this.FOGSTART = $e.propertyNameToID("u_FogStart");
        }, "FOGRANGE", function() {
            return this.FOGRANGE = $e.propertyNameToID("u_FogRange");
        }, "LIGHTDIRECTION", function() {
            return this.LIGHTDIRECTION = $e.propertyNameToID("u_DirectionLight.Direction");
        }, "LIGHTDIRCOLOR", function() {
            return this.LIGHTDIRCOLOR = $e.propertyNameToID("u_DirectionLight.Color");
        }, "POINTLIGHTPOS", function() {
            return this.POINTLIGHTPOS = $e.propertyNameToID("u_PointLight.Position");
        }, "POINTLIGHTRANGE", function() {
            return this.POINTLIGHTRANGE = $e.propertyNameToID("u_PointLight.Range");
        }, "POINTLIGHTATTENUATION", function() {
            return this.POINTLIGHTATTENUATION = $e.propertyNameToID("u_PointLight.Attenuation");
        }, "POINTLIGHTCOLOR", function() {
            return this.POINTLIGHTCOLOR = $e.propertyNameToID("u_PointLight.Color");
        }, "SPOTLIGHTPOS", function() {
            return this.SPOTLIGHTPOS = $e.propertyNameToID("u_SpotLight.Position");
        }, "SPOTLIGHTDIRECTION", function() {
            return this.SPOTLIGHTDIRECTION = $e.propertyNameToID("u_SpotLight.Direction");
        }, "SPOTLIGHTSPOTANGLE", function() {
            return this.SPOTLIGHTSPOTANGLE = $e.propertyNameToID("u_SpotLight.Spot");
        }, "SPOTLIGHTRANGE", function() {
            return this.SPOTLIGHTRANGE = $e.propertyNameToID("u_SpotLight.Range");
        }, "SPOTLIGHTCOLOR", function() {
            return this.SPOTLIGHTCOLOR = $e.propertyNameToID("u_SpotLight.Color");
        }, "SHADOWDISTANCE", function() {
            return this.SHADOWDISTANCE = $e.propertyNameToID("u_shadowPSSMDistance");
        }, "SHADOWLIGHTVIEWPROJECT", function() {
            return this.SHADOWLIGHTVIEWPROJECT = $e.propertyNameToID("u_lightShadowVP");
        }, "SHADOWMAPPCFOFFSET", function() {
            return this.SHADOWMAPPCFOFFSET = $e.propertyNameToID("u_shadowPCFoffset");
        }, "SHADOWMAPTEXTURE1", function() {
            return this.SHADOWMAPTEXTURE1 = $e.propertyNameToID("u_shadowMap1");
        }, "SHADOWMAPTEXTURE2", function() {
            return this.SHADOWMAPTEXTURE2 = $e.propertyNameToID("u_shadowMap2");
        }, "SHADOWMAPTEXTURE3", function() {
            return this.SHADOWMAPTEXTURE3 = $e.propertyNameToID("u_shadowMap3");
        }, "AMBIENTCOLOR", function() {
            return this.AMBIENTCOLOR = $e.propertyNameToID("u_AmbientColor");
        }, "REFLECTIONTEXTURE", function() {
            return this.REFLECTIONTEXTURE = $e.propertyNameToID("u_ReflectTexture");
        }, "REFLETIONINTENSITY", function() {
            return this.REFLETIONINTENSITY = $e.propertyNameToID("u_ReflectIntensity");
        }, "TIME", function() {
            return this.TIME = $e.propertyNameToID("u_Time");
        }, "ANGLEATTENUATIONTEXTURE", function() {
            return this.ANGLEATTENUATIONTEXTURE = $e.propertyNameToID("u_AngleTexture");
        }, "RANGEATTENUATIONTEXTURE", function() {
            return this.RANGEATTENUATIONTEXTURE = $e.propertyNameToID("u_RangeTexture");
        }, "POINTLIGHTMATRIX", function() {
            return this.POINTLIGHTMATRIX = $e.propertyNameToID("u_PointLightMatrix");
        }, "SPOTLIGHTMATRIX", function() {
            return this.SPOTLIGHTMATRIX = $e.propertyNameToID("u_SpotLightMatrix");
        } ]), t;
    }(O)), wn = function(e) {
        function t(e) {
            this.pickColor = null, this._render = null, t.__super.call(this, e);
        }
        r(t, "laya.d3.core.RenderableSprite3D", e);
        var n = t.prototype;
        return n._onInActive = function() {
            var e = this._scene;
            e._removeRenderObject(this._render), this._render.castShadow && e._removeShadowCastRenderObject(this._render);
        }, n._onActive = function() {
            laya.display.Node.prototype._onActive.call(this);
            var e = this._scene;
            e._addRenderObject(this._render), this._render.castShadow && e._addShadowCastRenderObject(this._render);
        }, n._onActiveInScene = function() {
            if (laya.display.Node.prototype._onActiveInScene.call(this), Dt._editerEnvironment) {
                var e = this._scene, t = new _n();
                e._allotPickColorByID(this.id, t), e._pickIdToSprite[this.id] = this, this._render._shaderValues.setVector(laya.d3.core.RenderableSprite3D.PICKCOLOR, t);
            }
        }, n._addToInitStaticBatchManager = function() {}, n._setBelongScene = function(e) {
            laya.display.Node.prototype._setBelongScene.call(this, e), this._render._setBelongScene(e);
        }, n._setUnBelongScene = function() {
            this._render._defineDatas.remove(laya.d3.core.RenderableSprite3D.SAHDERDEFINE_LIGHTMAP), 
            laya.display.Node.prototype._setUnBelongScene.call(this);
        }, n._changeHierarchyAnimator = function(t) {
            if (this._hierarchyAnimator) {
                var n = this._hierarchyAnimator._renderableSprites;
                n.splice(n.indexOf(this), 1);
            }
            t && t._renderableSprites.push(this), e.prototype._changeHierarchyAnimator.call(this, t);
        }, n.destroy = function(t) {
            void 0 === t && (t = !0), e.prototype.destroy.call(this, t), this._render._destroy(), 
            this._render = null;
        }, t.__init__ = function() {
            t.SHADERDEFINE_RECEIVE_SHADOW = t.shaderDefines.registerDefine("RECEIVESHADOW"), 
            t.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = t.shaderDefines.registerDefine("SCALEOFFSETLIGHTINGMAPUV"), 
            t.SAHDERDEFINE_LIGHTMAP = t.shaderDefines.registerDefine("LIGHTMAP");
        }, t.SHADERDEFINE_RECEIVE_SHADOW = 0, t.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = 0, 
        t.SAHDERDEFINE_LIGHTMAP = 0, i(t, [ "LIGHTMAPSCALEOFFSET", function() {
            return this.LIGHTMAPSCALEOFFSET = $e.propertyNameToID("u_LightmapScaleOffset");
        }, "LIGHTMAP", function() {
            return this.LIGHTMAP = $e.propertyNameToID("u_LightMap");
        }, "PICKCOLOR", function() {
            return this.PICKCOLOR = $e.propertyNameToID("u_PickColor");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be();
        } ]), t;
    }(Sn), Fn = function(e) {
        function t() {
            this._intensityColor = null, this._intensity = NaN, this._shadow = !1, this._shadowFarPlane = 0, 
            this._shadowMapSize = 0, this._shadowMapCount = 0, this._shadowMapPCFType = 0, this._parallelSplitShadowMap = null, 
            this._lightmapBakedType = 0, this.color = null, t.__super.call(this), this._intensity = 1, 
            this._intensityColor = new dn(), this.color = new dn(1, 1, 1), this._shadow = !1, 
            this._shadowFarPlane = 8, this._shadowMapSize = 512, this._shadowMapCount = 1, this._shadowMapPCFType = 0, 
            this._lightmapBakedType = t.LIGHTMAPBAKEDTYPE_REALTIME;
        }
        r(t, "laya.d3.core.light.LightSprite", e);
        var n = t.prototype;
        return n._parse = function(t) {
            e.prototype._parse.call(this, t);
            var n = t.color;
            this.color.fromArray(n), this.intensity = t.intensity, this.lightmapBakedType = t.lightmapBakedType;
        }, n._onActive = function() {
            this.lightmapBakedType !== t.LIGHTMAPBAKEDTYPE_BAKED && this._scene._addLight(this);
        }, n._onInActive = function() {
            this.lightmapBakedType !== t.LIGHTMAPBAKEDTYPE_BAKED && this._scene._removeLight(this);
        }, n._prepareToScene = function() {
            return !1;
        }, a(0, n, "lightmapBakedType", function() {
            return this._lightmapBakedType;
        }, function(e) {
            this._lightmapBakedType !== e && (this._lightmapBakedType = e, this.activeInHierarchy && (e !== t.LIGHTMAPBAKEDTYPE_BAKED ? this._scene._addLight(this) : this._scene._removeLight(this)));
        }), a(0, n, "shadowPCFType", function() {
            return this._shadowMapPCFType;
        }, function(e) {
            this._shadowMapPCFType = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setPCFType(e);
        }), a(0, n, "intensity", function() {
            return this._intensity;
        }, function(e) {
            this._intensity = e;
        }), a(0, n, "shadow", function() {
            return this._shadow;
        }, function(e) {
            throw new Error("LightSprite: must override it.");
        }), a(0, n, "shadowDistance", function() {
            return this._shadowFarPlane;
        }, function(e) {
            this._shadowFarPlane = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setFarDistance(e);
        }), a(0, n, "shadowPSSMCount", function() {
            return this._shadowMapCount;
        }, function(e) {
            this._shadowMapCount = e, this._parallelSplitShadowMap && (this._parallelSplitShadowMap.shadowMapCount = e);
        }), a(0, n, "shadowResolution", function() {
            return this._shadowMapSize;
        }, function(e) {
            this._shadowMapSize = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setShadowMapTextureSize(e);
        }), a(0, n, "diffuseColor", function() {
            return console.log("LightSprite: discard property,please use color property instead."), 
            this.color;
        }, function(e) {
            console.log("LightSprite: discard property,please use color property instead."), 
            this.color = e;
        }), t.LIGHTMAPBAKEDTYPE_REALTIME = 0, t.LIGHTMAPBAKEDTYPE_MIXED = 1, t.LIGHTMAPBAKEDTYPE_BAKED = 2, 
        t;
    }(Sn), bn = (function(e) {
        function t() {
            t.__super.call(this), this.setShaderName("SkyBox");
        }
        r(t, "laya.d3.core.material.SkyBoxMaterial", Rn);
        var n = t.prototype;
        a(0, n, "tintColor", function() {
            return this._shaderValues.getVector(t.TINTCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.TINTCOLOR, e);
        }), a(0, n, "exposure", function() {
            return this._shaderValues.getNumber(t.EXPOSURE);
        }, function(e) {
            this._shaderValues.setNumber(t.EXPOSURE, e);
        }), a(0, n, "rotation", function() {
            return this._shaderValues.getNumber(t.ROTATION);
        }, function(e) {
            this._shaderValues.setNumber(t.ROTATION, e);
        }), a(0, n, "textureCube", function() {
            return this._shaderValues.getTexture(t.TEXTURECUBE);
        }, function(e) {
            return this._shaderValues.setTexture(t.TEXTURECUBE, e);
        }), i(t, [ "TINTCOLOR", function() {
            return this.TINTCOLOR = $e.propertyNameToID("u_TintColor");
        }, "EXPOSURE", function() {
            return this.EXPOSURE = $e.propertyNameToID("u_Exposure");
        }, "ROTATION", function() {
            return this.ROTATION = $e.propertyNameToID("u_Rotation");
        }, "TEXTURECUBE", function() {
            return this.TEXTURECUBE = $e.propertyNameToID("u_CubeTexture");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        } ]);
    }(), function(e) {
        function t() {
            t.__super.call(this), this.setShaderName("PARTICLESHURIKEN"), this._color = new _n(1, 1, 1, 1), 
            this.renderMode = 0;
        }
        r(t, "laya.d3.core.particleShuriKen.ShurikenParticleMaterial", Rn);
        var n = t.prototype;
        return a(0, n, "_TintColorB", function() {
            return this._color.elements[2];
        }, function(e) {
            this._color.elements[2] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "texture", function() {
            return this._shaderValues.getTexture(t.DIFFUSETEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP), 
            this._shaderValues.setTexture(t.DIFFUSETEXTURE, e);
        }), a(0, n, "_TintColorR", function() {
            return this._color.elements[0];
        }, function(e) {
            this._color.elements[0] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "_TintColorG", function() {
            return this._color.elements[1];
        }, function(e) {
            this._color.elements[1] = e, this.color = this._color;
        }), a(0, n, "_TintColorA", function() {
            return this._color.elements[3];
        }, function(e) {
            this._color.elements[3] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "renderMode", null, function(e) {
            var n = this.getRenderState();
            switch (e) {
              case 1:
                this.renderQueue = 3e3, n.depthWrite = !1, n.cull = 0, n.blend = 1, n.srcBlend = 770, 
                n.dstBlend = 771, this.alphaTest = !1, this._defineDatas.add(t.SHADERDEFINE_ADDTIVEFOG);
                break;

              case 0:
                this.renderQueue = 3e3, n.depthWrite = !1, n.cull = 0, n.blend = 1, n.srcBlend = 770, 
                n.dstBlend = 1, this.alphaTest = !1, this._defineDatas.remove(t.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("ShurikenParticleMaterial : renderMode value error.");
            }
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "colorR", function() {
            return this._TintColorR;
        }, function(e) {
            this._TintColorR = e;
        }), a(0, n, "colorG", function() {
            return this._TintColorG;
        }, function(e) {
            this._TintColorG = e;
        }), a(0, n, "colorB", function() {
            return this._TintColorB;
        }, function(e) {
            this._TintColorB = e;
        }), a(0, n, "colorA", function() {
            return this._TintColorA;
        }, function(e) {
            this._TintColorA = e;
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(t.TINTCOLOR);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR), 
            this._shaderValues.setVector(t.TINTCOLOR, e);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_DIFFUSEMAP = t.shaderDefines.registerDefine("DIFFUSEMAP"), t.SHADERDEFINE_TINTCOLOR = t.shaderDefines.registerDefine("TINTCOLOR"), 
            t.SHADERDEFINE_ADDTIVEFOG = t.shaderDefines.registerDefine("ADDTIVEFOG"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET");
        }, t.RENDERMODE_ALPHABLENDED = 0, t.RENDERMODE_ADDTIVE = 1, t.SHADERDEFINE_DIFFUSEMAP = 0, 
        t.SHADERDEFINE_TINTCOLOR = 0, t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ADDTIVEFOG = 0, 
        i(t, [ "DIFFUSETEXTURE", function() {
            return this.DIFFUSETEXTURE = $e.propertyNameToID("u_texture");
        }, "TINTCOLOR", function() {
            return this.TINTCOLOR = $e.propertyNameToID("u_Tintcolor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }()), Bn = function(e) {
        function t() {
            this._sunDisk = 0, t.__super.call(this), this.setShaderName("SkyBoxProcedural"), 
            this.sunDisk = 1, this.sunSize = .04, this.sunSizeConvergence = 5, this.atmosphereThickness = 1, 
            this.skyTint = new _n(.5, .5, .5, 1), this.groundTint = new _n(.369, .349, .341, 1), 
            this.exposure = 1.3;
        }
        r(t, "laya.d3.core.material.SkyProceduralMaterial", Rn);
        var n = t.prototype;
        return a(0, n, "exposure", function() {
            return this._shaderValues.getNumber(t.EXPOSURE);
        }, function(e) {
            e = Math.min(Math.max(0, e), 8), this._shaderValues.setNumber(t.EXPOSURE, e);
        }), a(0, n, "sunSize", function() {
            return this._shaderValues.getNumber(t.SUNSIZE);
        }, function(e) {
            e = Math.min(Math.max(0, e), 1), this._shaderValues.setNumber(t.SUNSIZE, e);
        }), a(0, n, "sunDisk", function() {
            return this._sunDisk;
        }, function(e) {
            switch (e) {
              case 1:
                this._defineDatas.remove(t.SHADERDEFINE_SUN_SIMPLE), this._defineDatas.add(t.SHADERDEFINE_SUN_HIGH_QUALITY);
                break;

              case 2:
                this._defineDatas.remove(t.SHADERDEFINE_SUN_HIGH_QUALITY), this._defineDatas.add(t.SHADERDEFINE_SUN_SIMPLE);
                break;

              case 0:
                this._defineDatas.remove(t.SHADERDEFINE_SUN_HIGH_QUALITY), this._defineDatas.remove(t.SHADERDEFINE_SUN_SIMPLE);
                break;

              default:
                throw "SkyBoxProceduralMaterial: unknown sun value.";
            }
            this._sunDisk = e;
        }), a(0, n, "sunSizeConvergence", function() {
            return this._shaderValues.getNumber(t.SUNSIZECONVERGENCE);
        }, function(e) {
            e = Math.min(Math.max(0, e), 20), this._shaderValues.setNumber(t.SUNSIZECONVERGENCE, e);
        }), a(0, n, "atmosphereThickness", function() {
            return this._shaderValues.getNumber(t.ATMOSPHERETHICKNESS);
        }, function(e) {
            e = Math.min(Math.max(0, e), 5), this._shaderValues.setNumber(t.ATMOSPHERETHICKNESS, e);
        }), a(0, n, "groundTint", function() {
            return this._shaderValues.getVector(t.GROUNDTINT);
        }, function(e) {
            this._shaderValues.setVector(t.GROUNDTINT, e);
        }), a(0, n, "skyTint", function() {
            return this._shaderValues.getVector(t.SKYTINT);
        }, function(e) {
            this._shaderValues.setVector(t.SKYTINT, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_SUN_HIGH_QUALITY = t.shaderDefines.registerDefine("SUN_HIGH_QUALITY"), 
            t.SHADERDEFINE_SUN_SIMPLE = t.shaderDefines.registerDefine("SUN_SIMPLE");
        }, t.SUN_NODE = 0, t.SUN_HIGH_QUALITY = 1, t.SUN_SIMPLE = 2, t.SHADERDEFINE_SUN_HIGH_QUALITY = 0, 
        t.SHADERDEFINE_SUN_SIMPLE = 0, i(t, [ "SUNSIZE", function() {
            return this.SUNSIZE = $e.propertyNameToID("u_SunSize");
        }, "SUNSIZECONVERGENCE", function() {
            return this.SUNSIZECONVERGENCE = $e.propertyNameToID("u_SunSizeConvergence");
        }, "ATMOSPHERETHICKNESS", function() {
            return this.ATMOSPHERETHICKNESS = $e.propertyNameToID("u_AtmosphereThickness");
        }, "SKYTINT", function() {
            return this.SKYTINT = $e.propertyNameToID("u_SkyTint");
        }, "GROUNDTINT", function() {
            return this.GROUNDTINT = $e.propertyNameToID("u_GroundTint");
        }, "EXPOSURE", function() {
            return this.EXPOSURE = $e.propertyNameToID("u_Exposure");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), Un = function(e) {
        function t() {
            this._enableVertexColor = !1, t.__super.call(this), this.setShaderName("BLINNPHONG"), 
            this._albedoIntensity = 1, this._albedoColor = new _n(1, 1, 1, 1);
            var e = this._shaderValues;
            e.setVector(t.ALBEDOCOLOR, new _n(1, 1, 1, 1)), e.setVector(t.MATERIALSPECULAR, new _n(1, 1, 1, 1)), 
            e.setNumber(t.SHININESS, .078125), e.setNumber(Rn.ALPHATESTVALUE, .5), e.setVector(t.TILINGOFFSET, new _n(1, 1, 0, 0)), 
            this._enableLighting = !0, this.renderMode = 0;
        }
        r(t, "laya.d3.core.material.BlinnPhongMaterial", e);
        var n = t.prototype;
        return n.disableFog = function() {
            this._disablePublicDefineDatas.add(Pn.SHADERDEFINE_FOG);
        }, n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            n._enableLighting = this._enableLighting, n._albedoIntensity = this._albedoIntensity, 
            this._albedoColor.cloneTo(n._albedoColor);
        }, a(0, n, "_SpecColorG", function() {
            return this._shaderValues.getVector(t.MATERIALSPECULAR).elements[1];
        }, function(e) {
            this._shaderValues.getVector(t.MATERIALSPECULAR).elements[1] = e;
        }), a(0, n, "_ColorB", function() {
            return this._albedoColor.elements[2];
        }, function(e) {
            this._albedoColor.elements[2] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.elements[0];
        }, function(e) {
            this._albedoColor.elements[0] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(e) {
            this._ColorA = e;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "_SpecColorB", function() {
            return this._shaderValues.getVector(t.MATERIALSPECULAR).elements[2];
        }, function(e) {
            this._shaderValues.getVector(t.MATERIALSPECULAR).elements[2] = e;
        }), a(0, n, "renderMode", null, function(e) {
            var t = this.getRenderState();
            switch (e) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, t.depthWrite = !0, t.cull = 2, t.blend = 0, 
                t.depthTest = 513;
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, t.depthWrite = !0, t.cull = 2, t.blend = 0, 
                t.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, t.depthWrite = !1, t.cull = 2, t.blend = 1, 
                t.srcBlend = 770, t.dstBlend = 771, t.depthTest = 513;
                break;

              default:
                throw new Error("Material:renderMode value error.");
            }
        }), a(0, n, "_SpecColorR", function() {
            return this._shaderValues.getVector(t.MATERIALSPECULAR).elements[0];
        }, function(e) {
            this._shaderValues.getVector(t.MATERIALSPECULAR).elements[0] = e;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.elements[1];
        }, function(e) {
            this._albedoColor.elements[1] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.elements[3];
        }, function(e) {
            this._albedoColor.elements[3] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "specularColor", function() {
            return this._shaderValues.getVector(t.MATERIALSPECULAR);
        }, function(e) {
            this._shaderValues.setVector(t.MATERIALSPECULAR, e);
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(e) {
            this._ColorB = e;
        }), a(0, n, "_SpecColorA", function() {
            return this._shaderValues.getVector(t.MATERIALSPECULAR).elements[3];
        }, function(e) {
            this._shaderValues.getVector(t.MATERIALSPECULAR).elements[3] = e;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "_AlbedoIntensity", function() {
            return this._albedoIntensity;
        }, function(e) {
            if (this._albedoIntensity !== e) {
                var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
                _n.scale(this._albedoColor, e, n), this._albedoIntensity = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
            }
        }), a(0, n, "specularColorA", function() {
            return this._SpecColorA;
        }, function(e) {
            this._SpecColorA = e;
        }), a(0, n, "_Shininess", function() {
            return this._shaderValues.getNumber(t.SHININESS);
        }, function(e) {
            e = Math.max(0, Math.min(1, e)), this._shaderValues.setNumber(t.SHININESS, e);
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(e) {
            this.alphaTestValue = e;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP), 
            this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
        }), a(0, n, "enableVertexColor", function() {
            return this._enableVertexColor;
        }, function(e) {
            this._enableVertexColor = e, e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(e) {
            var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
            _n.scale(e, this._albedoIntensity, n), this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "enableLighting", function() {
            return this._enableLighting;
        }, function(e) {
            this._enableLighting !== e && (e ? this._disablePublicDefineDatas.remove(Pn.SHADERDEFINE_POINTLIGHT | Pn.SHADERDEFINE_SPOTLIGHT | Pn.SHADERDEFINE_DIRECTIONLIGHT) : this._disablePublicDefineDatas.add(Pn.SHADERDEFINE_POINTLIGHT | Pn.SHADERDEFINE_SPOTLIGHT | Pn.SHADERDEFINE_DIRECTIONLIGHT), 
            this._enableLighting = e);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(e) {
            this._ColorR = e;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(e) {
            this._ColorG = e;
        }), a(0, n, "albedoIntensity", function() {
            return this._albedoIntensity;
        }, function(e) {
            this._AlbedoIntensity = e;
        }), a(0, n, "specularColorR", function() {
            return this._SpecColorR;
        }, function(e) {
            this._SpecColorR = e;
        }), a(0, n, "specularColorG", function() {
            return this._SpecColorG;
        }, function(e) {
            this._SpecColorG = e;
        }), a(0, n, "specularColorB", function() {
            return this._SpecColorB;
        }, function(e) {
            this._SpecColorB = e;
        }), a(0, n, "shininess", function() {
            return this._Shininess;
        }, function(e) {
            this._Shininess = e;
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(t.NORMALTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_NORMALMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_NORMALMAP), 
            this._shaderValues.setTexture(t.NORMALTEXTURE, e);
        }), a(0, n, "specularTexture", function() {
            return this._shaderValues.getTexture(t.SPECULARTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP), 
            this._shaderValues.setTexture(t.SPECULARTEXTURE, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_DIFFUSEMAP = t.shaderDefines.registerDefine("DIFFUSEMAP"), t.SHADERDEFINE_NORMALMAP = t.shaderDefines.registerDefine("NORMALMAP"), 
            t.SHADERDEFINE_SPECULARMAP = t.shaderDefines.registerDefine("SPECULARMAP"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), 
            t.SHADERDEFINE_ENABLEVERTEXCOLOR = t.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
        }, t.SPECULARSOURCE_DIFFUSEMAPALPHA = 0, t.SPECULARSOURCE_SPECULARMAP = 0, t.RENDERMODE_OPAQUE = 0, 
        t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_TRANSPARENT = 2, t.SHADERDEFINE_DIFFUSEMAP = 0, 
        t.SHADERDEFINE_NORMALMAP = 0, t.SHADERDEFINE_SPECULARMAP = 0, t.SHADERDEFINE_TILINGOFFSET = 0, 
        t.SHADERDEFINE_ENABLEVERTEXCOLOR = 0, i(t, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = $e.propertyNameToID("u_DiffuseTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = $e.propertyNameToID("u_NormalTexture");
        }, "SPECULARTEXTURE", function() {
            return this.SPECULARTEXTURE = $e.propertyNameToID("u_SpecularTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = $e.propertyNameToID("u_DiffuseColor");
        }, "MATERIALSPECULAR", function() {
            return this.MATERIALSPECULAR = $e.propertyNameToID("u_MaterialSpecular");
        }, "SHININESS", function() {
            return this.SHININESS = $e.propertyNameToID("u_Shininess");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(Rn), Gn = function(e) {
        function t(e) {
            this._terrainRes = null, this._lightmapScaleOffset = null, t.__super.call(this), 
            this._lightmapScaleOffset = new _n(1, 1, 0, 0), e && (this._terrainRes = e, this.buildTerrain(e));
        }
        r(t, "laya.d3.terrain.Terrain", e);
        var i = t.prototype;
        return i._parse = function(t) {
            e.prototype._parse.call(this, t), this.terrainRes = g.getRes(t.dataPath);
            var n = t.lightmapIndex;
            null != n && this.setLightmapIndex(n);
            var i = t.lightmapScaleOffset;
            i && this.setLightmapScaleOffset(new _n(i[0], i[1], i[2], i[3]));
        }, i.setLightmapIndex = function(e) {
            for (var t = 0; t < this._children.length; t++) {
                this._children[t].terrainRender.lightmapIndex = e;
            }
        }, i.setLightmapScaleOffset = function(e) {
            if (e) {
                e.cloneTo(this._lightmapScaleOffset);
                for (var t = 0; t < this._children.length; t++) {
                    this._children[t].terrainRender.lightmapScaleOffset = this._lightmapScaleOffset;
                }
            }
        }, i.disableLight = function() {
            for (var e = 0, t = this._children.length; e < t; e++) for (var n = this._children[e], i = 0, r = n._render.sharedMaterials.length; i < r; i++) {
                n._render.sharedMaterials[i].disableLight();
            }
        }, i.buildTerrain = function(e) {
            for (var t = e._chunkNumX, n = e._chunkNumZ, i = e._heightData, r = 0, a = 0; a < n; a++) for (var o = 0; o < t; o++) {
                for (var s = new oi(o, a, e._gridSize, i._terrainHeightData, i._width, i._height, e._cameraCoordinateInverse), l = e._chunkInfos[r++], h = 0; h < l.alphaMap.length; h++) {
                    var c = l.detailID[h].length, u = c > 0 ? e._detailTextureInfos[l.detailID[h][0]].diffuseTexture : null, _ = c > 1 ? e._detailTextureInfos[l.detailID[h][1]].diffuseTexture : null, d = c > 2 ? e._detailTextureInfos[l.detailID[h][2]].diffuseTexture : null, f = c > 3 ? e._detailTextureInfos[l.detailID[h][3]].diffuseTexture : null, m = c > 0 ? e._detailTextureInfos[l.detailID[h][0]].scale : null, p = c > 1 ? e._detailTextureInfos[l.detailID[h][1]].scale : null, T = c > 2 ? e._detailTextureInfos[l.detailID[h][2]].scale : null, E = c > 3 ? e._detailTextureInfos[l.detailID[h][3]].scale : null;
                    s.buildRenderElementAndMaterial(c, l.normalMap, l.alphaMap[h], u, _, d, f, e._materialInfo.ambientColor, e._materialInfo.diffuseColor, e._materialInfo.specularColor, m ? m.x : 1, m ? m.y : 1, p ? p.x : 1, p ? p.y : 1, T ? T.x : 1, T ? T.y : 1, E ? E.x : 1, E ? E.y : 1);
                }
                s.terrainRender.receiveShadow = !0, s.terrainRender.lightmapScaleOffset = this._lightmapScaleOffset, 
                this.addChild(s);
            }
        }, i.width = function() {
            return this._terrainRes._chunkNumX * ct.CHUNK_GRID_NUM * this._terrainRes._gridSize;
        }, i.depth = function() {
            return this._terrainRes._chunkNumZ * ct.CHUNK_GRID_NUM * this._terrainRes._gridSize;
        }, i.getHeightXZ = function(e, n) {
            if (!this._terrainRes) return NaN;
            if (e -= this.transform.position.x, n -= this.transform.position.z, t.__VECTOR3__ || (t.__VECTOR3__ = new dn()), 
            t.__VECTOR3__.elements[0] = e, t.__VECTOR3__.elements[1] = 0, t.__VECTOR3__.elements[2] = n, 
            dn.transformV3ToV3(t.__VECTOR3__, ct.__ADAPT_MATRIX_INV__, t.__VECTOR3__), e = t.__VECTOR3__.elements[0], 
            n = t.__VECTOR3__.elements[2], e < 0 || e > this.width() || n < 0 || n > this.depth()) return NaN;
            var i = this._terrainRes._gridSize, r = parseInt("" + e / i), a = parseInt("" + n / i), o = e - r * i, s = n - a * i, l = NaN, h = NaN, c = NaN, u = NaN, _ = NaN, d = this._terrainRes._heightData;
            return o + s > i ? (l = d._terrainHeightData[(a + 1 - 1) * d._width + r + 1], h = d._terrainHeightData[(a + 1 - 1) * d._width + r], 
            c = d._terrainHeightData[(a - 1) * d._width + r + 1], u = (i - o) / i, _ = (i - s) / i, 
            l + (h - l) * u + (c - l) * _) : (l = d._terrainHeightData[Math.max(0, a - 1) * d._width + r], 
            h = d._terrainHeightData[Math.min(d._width * d._height - 1, (a + 1 - 1) * d._width + r)], 
            c = d._terrainHeightData[Math.min(d._width * d._height - 1, Math.max(0, a - 1) * d._width + r + 1)], 
            u = o / i, _ = s / i, l + (h - l) * _ + (c - l) * u);
        }, a(0, i, "terrainRes", null, function(e) {
            e && (this._terrainRes = e, this.buildTerrain(e));
        }), t.load = function(e) {
            n.loader.create(e, null, null, "TERRAIN", null, null, 1, !1);
        }, t.RENDER_LINE_MODEL = !1, t.LOD_TOLERANCE_VALUE = 4, t.LOD_DISTANCE_FACTOR = 2, 
        t.__VECTOR3__ = null, t;
    }(Sn), Hn = function(e) {
        function t() {
            this._albedoColor = null, this._specularColor = null, this._emissionColor = null, 
            t.__super.call(this), this.setShaderName("PBRSpecular"), this._albedoColor = new _n(1, 1, 1, 1), 
            this._shaderValues.setVector(t.ALBEDOCOLOR, new _n(1, 1, 1, 1)), this._emissionColor = new _n(0, 0, 0, 0), 
            this._shaderValues.setVector(t.EMISSIONCOLOR, new _n(0, 0, 0, 0)), this._specularColor = new _n(.2, .2, .2, .2), 
            this._shaderValues.setVector(t.SPECULARCOLOR, new _n(.2, .2, .2, .2)), this._shaderValues.setNumber(t.SMOOTHNESS, .5), 
            this._shaderValues.setNumber(t.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber(t.SMOOTHNESSSOURCE, 0), 
            this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber(t.NORMALSCALE, 1), 
            this._shaderValues.setNumber(t.PARALLAXSCALE, .001), this._shaderValues.setBool(t.ENABLEEMISSION, !1), 
            this._shaderValues.setNumber(Rn.ALPHATESTVALUE, .5);
        }
        r(t, "laya.d3.core.material.PBRSpecularMaterial", e);
        var n = t.prototype;
        return n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            this._albedoColor.cloneTo(n._albedoColor), this._specularColor.cloneTo(n._specularColor), 
            this._emissionColor.cloneTo(n._emissionColor);
        }, a(0, n, "emissionTexture", function() {
            return this._shaderValues.getTexture(t.EMISSIONTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSIONTEXTURE), 
            this._shaderValues.setTexture(t.EMISSIONTEXTURE, e);
        }), a(0, n, "_SpecColorG", function() {
            return this._specularColor.elements[1];
        }, function(e) {
            this._specularColor.elements[1] = e, this.specularColor = this._specularColor;
        }), a(0, n, "_ColorB", function() {
            return this._albedoColor.elements[2];
        }, function(e) {
            this._albedoColor.elements[2] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.elements[0];
        }, function(e) {
            this._albedoColor.elements[0] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(e) {
            this._ColorA = e;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "_SpecColorB", function() {
            return this._specularColor.elements[2];
        }, function(e) {
            this._specularColor.elements[2] = e, this.specularColor = this._specularColor;
        }), a(0, n, "renderMode", null, function(e) {
            var n = this.getRenderState();
            switch (e) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, n.depthWrite = !0, n.cull = 2, n.blend = 0, 
                n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, n.depthWrite = !0, n.cull = 2, n.blend = 0, 
                n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 2, n.blend = 1, 
                n.srcBlend = 770, n.dstBlend = 771, n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 3:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 2, n.blend = 1, 
                n.srcBlend = 1, n.dstBlend = 771, n.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              default:
                throw new Error("PBRSpecularMaterial : renderMode value error.");
            }
        }), a(0, n, "_SpecColorR", function() {
            return this._specularColor.elements[0];
        }, function(e) {
            this._specularColor.elements[0] = e, this.specularColor = this._specularColor;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.elements[1];
        }, function(e) {
            this._albedoColor.elements[1] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_Glossiness", function() {
            return this._shaderValues.getNumber(t.SMOOTHNESS);
        }, function(e) {
            this._shaderValues.setNumber(t.SMOOTHNESS, e);
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.elements[3];
        }, function(e) {
            this._albedoColor.elements[3] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "specularColor", function() {
            return this._shaderValues.getVector(t.SPECULARCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.SPECULARCOLOR, e);
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(e) {
            this._ColorB = e;
        }), a(0, n, "_SpecColorA", function() {
            return this._specularColor.elements[3];
        }, function(e) {
            this._specularColor.elements[3] = e, this.specularColor = this._specularColor;
        }), a(0, n, "_GlossMapScale", function() {
            return this._shaderValues.getNumber(t.SMOOTHNESSSCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.SMOOTHNESSSCALE, e);
        }), a(0, n, "_BumpScale", function() {
            return this._shaderValues.getNumber(t.NORMALSCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.NORMALSCALE, e);
        }), a(0, n, "_Parallax", function() {
            return this._shaderValues.getNumber(t.PARALLAXSCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.PARALLAXSCALE, e);
        }), a(0, n, "_OcclusionStrength", function() {
            return this._shaderValues.getNumber(t.OCCLUSIONSTRENGTH);
        }, function(e) {
            this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, e);
        }), a(0, n, "_EmissionColorR", function() {
            return this._emissionColor.elements[0];
        }, function(e) {
            this._emissionColor.elements[0] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), a(0, n, "_EmissionColorG", function() {
            return this._emissionColor.elements[1];
        }, function(e) {
            this._emissionColor.elements[1] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "_EmissionColorB", function() {
            return this._emissionColor.elements[2];
        }, function(e) {
            this._emissionColor.elements[2] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "_EmissionColorA", function() {
            return this._emissionColor.elements[3];
        }, function(e) {
            this._emissionColor.elements[3] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(e) {
            this.alphaTestValue = e;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(e) {
            this._ColorR = e;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(e) {
            this._ColorG = e;
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(e) {
            this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, e);
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
        }), a(0, n, "parallaxTexture", function() {
            return this._shaderValues.getTexture(t.PARALLAXTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_PARALLAXTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_PARALLAXTEXTURE), 
            this._shaderValues.setTexture(t.PARALLAXTEXTURE, e);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(t.NORMALTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(t.NORMALTEXTURE, e);
        }), a(0, n, "emissionColor", function() {
            return this._shaderValues.getVector(t.EMISSIONCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.EMISSIONCOLOR, e);
        }), a(0, n, "parallaxTextureScale", function() {
            return this._Parallax;
        }, function(e) {
            this._Parallax = Math.max(.005, Math.min(.08, e));
        }), a(0, n, "normalTextureScale", function() {
            return this._BumpScale;
        }, function(e) {
            this._BumpScale = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "occlusionTexture", function() {
            return this._shaderValues.getTexture(t.OCCLUSIONTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_OCCLUSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_OCCLUSIONTEXTURE), 
            this._shaderValues.setTexture(t.OCCLUSIONTEXTURE, e);
        }), a(0, n, "occlusionTextureStrength", function() {
            return this._OcclusionStrength;
        }, function(e) {
            this._OcclusionStrength = Math.max(0, Math.min(1, e));
        }), a(0, n, "specularTexture", function() {
            return this._shaderValues.getTexture(t.SPECULARTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SPECULARTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SPECULARTEXTURE), 
            this._shaderValues.setTexture(t.SPECULARTEXTURE, e);
        }), a(0, n, "specularColorR", function() {
            return this._SpecColorR;
        }, function(e) {
            this._SpecColorR = e;
        }), a(0, n, "smoothness", function() {
            return this._Glossiness;
        }, function(e) {
            this._Glossiness = Math.max(0, Math.min(1, e));
        }), a(0, n, "specularColorG", function() {
            return this._SpecColorG;
        }, function(e) {
            this._SpecColorG = e;
        }), a(0, n, "specularColorB", function() {
            return this._SpecColorB;
        }, function(e) {
            this._SpecColorB = e;
        }), a(0, n, "specularColorA", function() {
            return this._SpecColorA;
        }, function(e) {
            this._SpecColorA = e;
        }), a(0, n, "smoothnessTextureScale", function() {
            return this._GlossMapScale;
        }, function(e) {
            this._GlossMapScale = Math.max(0, Math.min(1, e));
        }), a(0, n, "smoothnessSource", function() {
            return this._shaderValues.getInt(t.SMOOTHNESSSOURCE);
        }, function(e) {
            e ? (this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 1)) : (this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 0));
        }), a(0, n, "enableEmission", function() {
            return this._shaderValues.getBool(t.ENABLEEMISSION);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSION) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSION), 
            this._shaderValues.setBool(t.ENABLEEMISSION, e);
        }), a(0, n, "enableReflection", function() {
            return this._shaderValues.getBool(t.ENABLEREFLECT);
        }, function(e) {
            this._shaderValues.setBool(t.ENABLEREFLECT, !0), e ? this._disablePublicDefineDatas.remove(Pn.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(Pn.SHADERDEFINE_REFLECTMAP);
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), t.__init__ = function() {
            t.SHADERDEFINE_ALBEDOTEXTURE = t.shaderDefines.registerDefine("ALBEDOTEXTURE"), 
            t.SHADERDEFINE_SPECULARTEXTURE = t.shaderDefines.registerDefine("SPECULARTEXTURE"), 
            t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = t.shaderDefines.registerDefine("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"), 
            t.SHADERDEFINE_NORMALTEXTURE = t.shaderDefines.registerDefine("NORMALTEXTURE"), 
            t.SHADERDEFINE_PARALLAXTEXTURE = t.shaderDefines.registerDefine("PARALLAXTEXTURE"), 
            t.SHADERDEFINE_OCCLUSIONTEXTURE = t.shaderDefines.registerDefine("OCCLUSIONTEXTURE"), 
            t.SHADERDEFINE_EMISSION = t.shaderDefines.registerDefine("EMISSION"), t.SHADERDEFINE_EMISSIONTEXTURE = t.shaderDefines.registerDefine("EMISSIONTEXTURE"), 
            t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), t.SHADERDEFINE_ALPHAPREMULTIPLY = t.shaderDefines.registerDefine("ALPHAPREMULTIPLY");
        }, t.SmoothnessSource_SpecularTexture_Alpha = 0, t.SmoothnessSource_AlbedoTexture_Alpha = 1, 
        t.RENDERMODE_OPAQUE = 0, t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_FADE = 2, t.RENDERMODE_TRANSPARENT = 3, 
        t.SHADERDEFINE_ALBEDOTEXTURE = 0, t.SHADERDEFINE_NORMALTEXTURE = 0, t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = 0, 
        t.SHADERDEFINE_SPECULARTEXTURE = 0, t.SHADERDEFINE_OCCLUSIONTEXTURE = 0, t.SHADERDEFINE_PARALLAXTEXTURE = 0, 
        t.SHADERDEFINE_EMISSION = 0, t.SHADERDEFINE_EMISSIONTEXTURE = 0, t.SHADERDEFINE_TILINGOFFSET = 0, 
        t.SHADERDEFINE_ALPHAPREMULTIPLY = 0, t.SMOOTHNESSSOURCE = -1, t.ENABLEEMISSION = -1, 
        t.ENABLEREFLECT = -1, i(t, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = $e.propertyNameToID("u_AlbedoTexture");
        }, "SPECULARTEXTURE", function() {
            return this.SPECULARTEXTURE = $e.propertyNameToID("u_SpecularTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = $e.propertyNameToID("u_NormalTexture");
        }, "PARALLAXTEXTURE", function() {
            return this.PARALLAXTEXTURE = $e.propertyNameToID("u_ParallaxTexture");
        }, "OCCLUSIONTEXTURE", function() {
            return this.OCCLUSIONTEXTURE = $e.propertyNameToID("u_OcclusionTexture");
        }, "EMISSIONTEXTURE", function() {
            return this.EMISSIONTEXTURE = $e.propertyNameToID("u_EmissionTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = $e.propertyNameToID("u_AlbedoColor");
        }, "SPECULARCOLOR", function() {
            return this.SPECULARCOLOR = $e.propertyNameToID("u_SpecularColor");
        }, "EMISSIONCOLOR", function() {
            return this.EMISSIONCOLOR = $e.propertyNameToID("u_EmissionColor");
        }, "SMOOTHNESS", function() {
            return this.SMOOTHNESS = $e.propertyNameToID("u_smoothness");
        }, "SMOOTHNESSSCALE", function() {
            return this.SMOOTHNESSSCALE = $e.propertyNameToID("u_smoothnessScale");
        }, "OCCLUSIONSTRENGTH", function() {
            return this.OCCLUSIONSTRENGTH = $e.propertyNameToID("u_occlusionStrength");
        }, "NORMALSCALE", function() {
            return this.NORMALSCALE = $e.propertyNameToID("u_normalScale");
        }, "PARALLAXSCALE", function() {
            return this.PARALLAXSCALE = $e.propertyNameToID("u_parallaxScale");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(Rn), zn = function(e) {
        function t() {
            this._albedoIntensity = 1, this._enableVertexColor = !1, this._albedoColor = new _n(1, 1, 1, 1), 
            t.__super.call(this), this.setShaderName("Unlit"), this._shaderValues.setVector(t.ALBEDOCOLOR, new _n(1, 1, 1, 1));
        }
        r(t, "laya.d3.core.material.UnlitMaterial", Rn);
        var n = t.prototype;
        return a(0, n, "_ColorB", function() {
            return this._albedoColor.elements[2];
        }, function(e) {
            this._albedoColor.elements[2] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.elements[0];
        }, function(e) {
            this._albedoColor.elements[0] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(e) {
            this._ColorA = e;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.elements[1];
        }, function(e) {
            this._albedoColor.elements[1] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.elements[3];
        }, function(e) {
            this._albedoColor.elements[3] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_AlbedoIntensity", function() {
            return this._albedoIntensity;
        }, function(e) {
            if (this._albedoIntensity !== e) {
                var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
                _n.scale(this._albedoColor, e, n), this._albedoIntensity = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
            }
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(e) {
            this.alphaTestValue = e;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(e) {
            this._ColorR = e;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(e) {
            this._ColorG = e;
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(e) {
            this._ColorB = e;
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(e) {
            var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
            _n.scale(e, this._albedoIntensity, n), this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
        }), a(0, n, "albedoIntensity", function() {
            return this._albedoIntensity;
        }, function(e) {
            this._AlbedoIntensity = e;
        }), a(0, n, "enableVertexColor", function() {
            return this._enableVertexColor;
        }, function(e) {
            this._enableVertexColor = e, e ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), a(0, n, "renderMode", null, function(e) {
            var t = this.getRenderState();
            switch (e) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, t.depthWrite = !0, t.cull = 2, t.blend = 0, 
                t.depthTest = 513;
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, t.depthWrite = !0, t.cull = 2, t.blend = 0, 
                t.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, t.depthWrite = !1, t.cull = 2, t.blend = 1, 
                t.srcBlend = 770, t.dstBlend = 771, t.depthTest = 513;
                break;

              default:
                throw new Error("UnlitMaterial : renderMode value error.");
            }
        }), t.__init__ = function() {
            t.SHADERDEFINE_ALBEDOTEXTURE = t.shaderDefines.registerDefine("ALBEDOTEXTURE"), 
            t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), t.SHADERDEFINE_ENABLEVERTEXCOLOR = t.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
        }, t.RENDERMODE_OPAQUE = 0, t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_TRANSPARENT = 2, 
        t.RENDERMODE_ADDTIVE = 3, t.SHADERDEFINE_ALBEDOTEXTURE = 0, t.SHADERDEFINE_TILINGOFFSET = 0, 
        t.SHADERDEFINE_ENABLEVERTEXCOLOR = 0, i(t, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = $e.propertyNameToID("u_AlbedoTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = $e.propertyNameToID("u_AlbedoColor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), kn = function(e) {
        function t() {
            t.__super.call(this), this.setShaderName("LineShader"), this._shaderValues.setVector(t.COLOR, new _n(1, 1, 1, 1));
        }
        r(t, "laya.d3.core.pixelLine.PixelLineMaterial", Rn);
        return a(0, t.prototype, "color", function() {
            return this._shaderValues.getVector(t.COLOR);
        }, function(e) {
            this._shaderValues.setVector(t.COLOR, e);
        }), t.__init__ = function() {}, i(t, [ "COLOR", function() {
            return this.COLOR = $e.propertyNameToID("u_Color");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), Xn = function(e) {
        function t() {
            this._color = null, t.__super.call(this), this.setShaderName("Trail"), this._color = new _n(1, 1, 1, 1), 
            this._shaderValues.setVector(t.TINTCOLOR, new _n(1, 1, 1, 1)), this.renderMode = 0;
        }
        r(t, "laya.d3.core.trail.TrailMaterial", Rn);
        var n = t.prototype;
        return a(0, n, "_TintColorB", function() {
            return this._color.elements[2];
        }, function(e) {
            this._color.elements[2] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "texture", function() {
            return this._shaderValues.getTexture(t.MAINTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(t.MAINTEXTURE, e);
        }), a(0, n, "_TintColorR", function() {
            return this._color.elements[0];
        }, function(e) {
            this._color.elements[0] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "_TintColorG", function() {
            return this._color.elements[1];
        }, function(e) {
            this._color.elements[1] = e, this.color = this._color;
        }), a(0, n, "_TintColorA", function() {
            return this._color.elements[3];
        }, function(e) {
            this._color.elements[3] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "renderMode", null, function(e) {
            var n = this.getRenderState();
            switch (e) {
              case 1:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 0, n.blend = 1, 
                n.srcBlend = 770, n.dstBlend = 1, n.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ADDTIVEFOG);
                break;

              case 0:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 0, n.blend = 1, 
                n.srcBlend = 770, n.dstBlend = 771, n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("TrailMaterial : renderMode value error.");
            }
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "colorR", function() {
            return this._TintColorR;
        }, function(e) {
            this._TintColorR = e;
        }), a(0, n, "colorG", function() {
            return this._TintColorG;
        }, function(e) {
            this._TintColorG = e;
        }), a(0, n, "colorB", function() {
            return this._TintColorB;
        }, function(e) {
            this._TintColorB = e;
        }), a(0, n, "colorA", function() {
            return this._TintColorA;
        }, function(e) {
            this._TintColorA = e;
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(t.TINTCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.TINTCOLOR, e);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_MAINTEXTURE = t.shaderDefines.registerDefine("MAINTEXTURE"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), 
            t.SHADERDEFINE_ADDTIVEFOG = t.shaderDefines.registerDefine("ADDTIVEFOG");
        }, t.RENDERMODE_ALPHABLENDED = 0, t.RENDERMODE_ADDTIVE = 1, t.SHADERDEFINE_MAINTEXTURE = 0, 
        t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ADDTIVEFOG = 0, i(t, [ "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "MAINTEXTURE", function() {
            return this.MAINTEXTURE = $e.propertyNameToID("u_MainTexture");
        }, "TINTCOLOR", function() {
            return this.TINTCOLOR = $e.propertyNameToID("u_MainColor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), Wn = function(e) {
        function t(e, i) {
            t.__super.call(this), this._skyRenderer = new te(), void 0 === e && (e = .3), void 0 === i && (i = 1e3), 
            this._shaderValues = new vt(null), this._fieldOfView = 60, this._useUserProjectionMatrix = !1, 
            this._orthographic = !1, this._orthographicVerticalSize = 10, this.renderingOrder = 0, 
            this._nearPlane = e, this._farPlane = i, this.cullingMask = 2147483647, this.clearFlag = 0, 
            this.useOcclusionCulling = !0, this._calculateProjectionMatrix(), n.stage.on("resize", this, this._onScreenSizeChanged);
        }
        r(t, "laya.d3.core.BaseCamera", e);
        var o = t.prototype;
        return o._sortCamerasByRenderingOrder = function() {
            if (this.displayedInStage) for (var e = this.scene._cameraPool, t = e.length - 1, n = 0; n < t; n++) if (e[n].renderingOrder > e[t].renderingOrder) {
                var i = e[n];
                e[n] = e[t], e[t] = i;
            }
        }, o._calculateProjectionMatrix = function() {}, o._onScreenSizeChanged = function() {
            this._calculateProjectionMatrix();
        }, o._prepareCameraToRender = function() {
            var e = this._shaderValues;
            e.setVector(laya.d3.core.BaseCamera.CAMERAPOS, this.transform.position), e.setVector(laya.d3.core.BaseCamera.CAMERADIRECTION, this.transform.forward), 
            e.setVector(laya.d3.core.BaseCamera.CAMERAUP, this.transform.up);
        }, o._prepareCameraViewProject = function(e, n, i) {
            var r = this._shaderValues;
            r.setMatrix4x4(laya.d3.core.BaseCamera.VIEWMATRIX, e), r.setMatrix4x4(laya.d3.core.BaseCamera.PROJECTMATRIX, n), 
            this.transform.worldMatrix.cloneTo(t._tempMatrix4x40), t._tempMatrix4x40.transpose(), 
            ut.multiply(n, t._tempMatrix4x40, i), r.setMatrix4x4(laya.d3.core.BaseCamera.VPMATRIX_NO_TRANSLATE, i);
        }, o.render = function(e, t) {}, o.addLayer = function(e) {
            this.cullingMask |= Math.pow(2, e);
        }, o.removeLayer = function(e) {
            this.cullingMask &= ~Math.pow(2, e);
        }, o.addAllLayers = function() {
            this.cullingMask = 2147483647;
        }, o.removeAllLayers = function() {
            this.cullingMask = 0;
        }, o.resetProjectionMatrix = function() {
            this._useUserProjectionMatrix = !1, this._calculateProjectionMatrix();
        }, o._onActive = function() {
            this._scene._addCamera(this);
        }, o._onInActive = function() {
            this._scene._removeCamera(this);
        }, o._parse = function(t) {
            e.prototype._parse.call(this, t);
            var n = t.clearFlag;
            void 0 !== n && (this.clearFlag = n), this.orthographic = t.orthographic, this.fieldOfView = t.fieldOfView, 
            this.nearPlane = t.nearPlane, this.farPlane = t.farPlane;
            var i = t.clearColor;
            this.clearColor = new _n(i[0], i[1], i[2], i[3]);
            var r = t.skyboxMaterial;
            r && (this._skyRenderer.material = g.getRes(r.path));
        }, o.destroy = function(t) {
            void 0 === t && (t = !0), this.renderTarget = null, this._skyRenderer.destroy(), 
            this._skyRenderer = null, n.stage.off("resize", this, this._onScreenSizeChanged), 
            e.prototype.destroy.call(this, t);
        }, a(0, o, "renderingOrder", function() {
            return this._renderingOrder;
        }, function(e) {
            this._renderingOrder = e, this._sortCamerasByRenderingOrder();
        }), a(0, o, "skyRenderer", function() {
            return this._skyRenderer;
        }), a(0, o, "farPlane", function() {
            return this._farPlane;
        }, function(e) {
            this._farPlane = e, this._calculateProjectionMatrix();
        }), a(0, o, "renderTarget", function() {
            return this._renderTarget;
        }, function(e) {
            this._renderTarget !== e && (this._renderTarget = e, this._calculateProjectionMatrix());
        }), a(0, o, "orthographic", function() {
            return this._orthographic;
        }, function(e) {
            this._orthographic = e, this._calculateProjectionMatrix();
        }), a(0, o, "fieldOfView", function() {
            return this._fieldOfView;
        }, function(e) {
            this._fieldOfView = e, this._calculateProjectionMatrix();
        }), a(0, o, "nearPlane", function() {
            return this._nearPlane;
        }, function(e) {
            this._nearPlane = e, this._calculateProjectionMatrix();
        }), a(0, o, "orthographicVerticalSize", function() {
            return this._orthographicVerticalSize;
        }, function(e) {
            this._orthographicVerticalSize = e, this._calculateProjectionMatrix();
        }), t.VPMATRIX = 3, t.RENDERINGTYPE_DEFERREDLIGHTING = "DEFERREDLIGHTING", t.RENDERINGTYPE_FORWARDRENDERING = "FORWARDRENDERING", 
        t.CLEARFLAG_SOLIDCOLOR = 0, t.CLEARFLAG_SKY = 1, t.CLEARFLAG_DEPTHONLY = 2, t.CLEARFLAG_NONE = 3, 
        i(t, [ "_tempMatrix4x40", function() {
            return this._tempMatrix4x40 = new ut();
        }, "CAMERAPOS", function() {
            return this.CAMERAPOS = $e.propertyNameToID("u_CameraPos");
        }, "VIEWMATRIX", function() {
            return this.VIEWMATRIX = $e.propertyNameToID("u_View");
        }, "PROJECTMATRIX", function() {
            return this.PROJECTMATRIX = $e.propertyNameToID("u_Projection");
        }, "VPMATRIX_NO_TRANSLATE", function() {
            return this.VPMATRIX_NO_TRANSLATE = $e.propertyNameToID("u_MvpMatrix");
        }, "CAMERADIRECTION", function() {
            return this.CAMERADIRECTION = $e.propertyNameToID("u_CameraDirection");
        }, "CAMERAUP", function() {
            return this.CAMERAUP = $e.propertyNameToID("u_CameraUp");
        }, "_invertYScaleMatrix", function() {
            return this._invertYScaleMatrix = new ut(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }, "_invertYProjectionMatrix", function() {
            return this._invertYProjectionMatrix = new ut();
        }, "_invertYProjectionViewMatrix", function() {
            return this._invertYProjectionViewMatrix = new ut();
        } ]), t;
    }(Sn), Yn = function(e) {
        function t() {
            this._diffuseScale1 = null, this._diffuseScale2 = null, this._diffuseScale3 = null, 
            this._diffuseScale4 = null, t.__super.call(this), this.setShaderName("Terrain"), 
            this.renderMode = 1, this._diffuseScale1 = new fn(), this._diffuseScale2 = new fn(), 
            this._diffuseScale3 = new fn(), this._diffuseScale4 = new fn(), this.ambientColor = new dn(.6, .6, .6), 
            this.diffuseColor = new dn(1, 1, 1), this.specularColor = new _n(.2, .2, .2, 32);
        }
        r(t, "laya.d3.core.material.TerrainMaterial", e);
        var n = t.prototype;
        return n.setDiffuseScale1 = function(e, t) {
            this._diffuseScale1.x = e, this._diffuseScale1.y = t, this._shaderValues.setVector(6, this._diffuseScale1);
        }, n.setDiffuseScale2 = function(e, t) {
            this._diffuseScale2.x = e, this._diffuseScale2.y = t, this._shaderValues.setVector(7, this._diffuseScale2);
        }, n.setDiffuseScale3 = function(e, t) {
            this._diffuseScale3.x = e, this._diffuseScale3.y = t, this._shaderValues.setVector(8, this._diffuseScale3);
        }, n.setDiffuseScale4 = function(e, t) {
            this._diffuseScale4.x = e, this._diffuseScale4.y = t, this._shaderValues.setVector(9, this._diffuseScale4);
        }, n.setDetailNum = function(e) {
            switch (e) {
              case 1:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                break;

              case 2:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                break;

              case 3:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                break;

              case 4:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3);
            }
        }, n.disableLight = function() {
            this._disablePublicDefineDatas.add(Pn.SHADERDEFINE_POINTLIGHT | Pn.SHADERDEFINE_SPOTLIGHT | Pn.SHADERDEFINE_DIRECTIONLIGHT);
        }, n.setShaderName = function(t) {
            e.prototype.setShaderName.call(this, t);
        }, a(0, n, "renderMode", null, function(e) {
            var t = this.getRenderState();
            switch (e) {
              case 1:
                this.renderQueue = 2e3, t.depthWrite = !0, t.cull = 2, t.blend = 0, t.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 2e3, t.depthWrite = !1, t.cull = 2, t.blend = 1, t.srcBlend = 770, 
                t.dstBlend = 771, t.depthTest = 515;
                break;

              default:
                throw new Error("TerrainMaterial:renderMode value error.");
            }
        }), a(0, n, "diffuseTexture2", function() {
            return this._shaderValues.getTexture(3);
        }, function(e) {
            this._shaderValues.setTexture(3, e);
        }), a(0, n, "ambientColor", function() {
            return this._shaderValues.getVector(10);
        }, function(e) {
            this._shaderValues.setVector(10, e);
        }), a(0, n, "diffuseTexture4", function() {
            return this._shaderValues.getTexture(5);
        }, function(e) {
            this._shaderValues.setTexture(5, e);
        }), a(0, n, "diffuseColor", function() {
            return this._shaderValues.getVector(11);
        }, function(e) {
            this._shaderValues.setVector(11, e);
        }), a(0, n, "diffuseTexture1", function() {
            return this._shaderValues.getTexture(2);
        }, function(e) {
            this._shaderValues.setTexture(2, e);
        }), a(0, n, "specularColor", function() {
            return this._shaderValues.getVector(12);
        }, function(e) {
            this._shaderValues.setVector(12, e);
        }), a(0, n, "diffuseTexture3", function() {
            return this._shaderValues.getTexture(4);
        }, function(e) {
            this._shaderValues.setTexture(4, e);
        }), a(0, n, "splatAlphaTexture", function() {
            return this._shaderValues.getTexture(0);
        }, function(e) {
            this._shaderValues.setTexture(0, e);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(1);
        }, function(e) {
            this._shaderValues.setTexture(1, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_DETAIL_NUM1 = t.shaderDefines.registerDefine("DETAIL_NUM1"), t.SHADERDEFINE_DETAIL_NUM2 = t.shaderDefines.registerDefine("DETAIL_NUM2"), 
            t.SHADERDEFINE_DETAIL_NUM4 = t.shaderDefines.registerDefine("DETAIL_NUM4"), t.SHADERDEFINE_DETAIL_NUM3 = t.shaderDefines.registerDefine("DETAIL_NUM3");
        }, t.RENDERMODE_OPAQUE = 1, t.RENDERMODE_TRANSPARENT = 2, t.SPLATALPHATEXTURE = 0, 
        t.NORMALTEXTURE = 1, t.DIFFUSETEXTURE1 = 2, t.DIFFUSETEXTURE2 = 3, t.DIFFUSETEXTURE3 = 4, 
        t.DIFFUSETEXTURE4 = 5, t.DIFFUSESCALE1 = 6, t.DIFFUSESCALE2 = 7, t.DIFFUSESCALE3 = 8, 
        t.DIFFUSESCALE4 = 9, t.MATERIALAMBIENT = 10, t.MATERIALDIFFUSE = 11, t.MATERIALSPECULAR = 12, 
        t.SHADERDEFINE_DETAIL_NUM1 = 0, t.SHADERDEFINE_DETAIL_NUM2 = 0, t.SHADERDEFINE_DETAIL_NUM3 = 0, 
        t.SHADERDEFINE_DETAIL_NUM4 = 0, i(t, [ "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(Rn), Zn = function(e) {
        function t() {
            this._color = null, t.__super.call(this), this.setShaderName("Effect"), this._color = new _n(1, 1, 1, 1), 
            this._shaderValues.setVector(t.TINTCOLOR, new _n(1, 1, 1, 1));
        }
        r(t, "laya.d3.core.material.EffectMaterial", Rn);
        var n = t.prototype;
        return a(0, n, "_TintColorB", function() {
            return this._color.elements[2];
        }, function(e) {
            this._color.elements[2] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "texture", function() {
            return this._shaderValues.getTexture(t.MAINTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.EffectMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(t.MAINTEXTURE, e);
        }), a(0, n, "_TintColorR", function() {
            return this._color.elements[0];
        }, function(e) {
            this._color.elements[0] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "_TintColorG", function() {
            return this._color.elements[1];
        }, function(e) {
            this._color.elements[1] = e, this.color = this._color;
        }), a(0, n, "_TintColorA", function() {
            return this._color.elements[3];
        }, function(e) {
            this._color.elements[3] = e, this.color = this._color;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "renderMode", null, function(e) {
            var n = this.getRenderState();
            switch (e) {
              case 0:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 0, n.blend = 1, 
                n.srcBlend = 770, n.dstBlend = 1, n.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ADDTIVEFOG);
                break;

              case 1:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 0, n.blend = 1, 
                n.srcBlend = 770, n.dstBlend = 771, n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("MeshEffectMaterial : renderMode value error.");
            }
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "colorR", function() {
            return this._TintColorR;
        }, function(e) {
            this._TintColorR = e;
        }), a(0, n, "colorG", function() {
            return this._TintColorG;
        }, function(e) {
            this._TintColorG = e;
        }), a(0, n, "colorB", function() {
            return this._TintColorB;
        }, function(e) {
            this._TintColorB = e;
        }), a(0, n, "colorA", function() {
            return this._TintColorA;
        }, function(e) {
            this._TintColorA = e;
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(t.TINTCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.TINTCOLOR, e);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_MAINTEXTURE = t.shaderDefines.registerDefine("MAINTEXTURE"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), 
            t.SHADERDEFINE_ADDTIVEFOG = t.shaderDefines.registerDefine("ADDTIVEFOG");
        }, t.RENDERMODE_ADDTIVE = 0, t.RENDERMODE_ALPHABLENDED = 1, t.SHADERDEFINE_MAINTEXTURE = 0, 
        t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ADDTIVEFOG = 0, i(t, [ "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "MAINTEXTURE", function() {
            return this.MAINTEXTURE = $e.propertyNameToID("u_AlbedoTexture");
        }, "TINTCOLOR", function() {
            return this.TINTCOLOR = $e.propertyNameToID("u_AlbedoColor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), Kn = function(e) {
        function t() {
            t.__super.call(this), this.setShaderName("WaterPrimary"), this._shaderValues.setVector(t.HORIZONCOLOR, new _n(.172, .463, .435, 0)), 
            this._shaderValues.setNumber(t.WAVESCALE, .15), this._shaderValues.setVector(t.WAVESPEED, new _n(19, 9, -16, -7));
        }
        r(t, "laya.d3.core.material.WaterPrimaryMaterial", Rn);
        var n = t.prototype;
        return a(0, n, "waveSpeed", function() {
            return this._shaderValues.getVector(t.WAVESPEED);
        }, function(e) {
            this._shaderValues.setVector(t.WAVESPEED, e);
        }), a(0, n, "horizonColor", function() {
            return this._shaderValues.getVector(t.HORIZONCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.HORIZONCOLOR, e);
        }), a(0, n, "mainTexture", function() {
            return this._shaderValues.getTexture(t.MAINTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(t.MAINTEXTURE, e);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(t.NORMALTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(t.NORMALTEXTURE, e);
        }), a(0, n, "waveScale", function() {
            return this._shaderValues.getNumber(t.WAVESCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.WAVESCALE, e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_MAINTEXTURE = t.shaderDefines.registerDefine("MAINTEXTURE"), t.SHADERDEFINE_NORMALTEXTURE = t.shaderDefines.registerDefine("NORMALTEXTURE");
        }, t.SHADERDEFINE_MAINTEXTURE = 0, t.SHADERDEFINE_NORMALTEXTURE = 0, i(t, [ "HORIZONCOLOR", function() {
            return this.HORIZONCOLOR = $e.propertyNameToID("u_HorizonColor");
        }, "MAINTEXTURE", function() {
            return this.MAINTEXTURE = $e.propertyNameToID("u_MainTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = $e.propertyNameToID("u_NormalTexture");
        }, "WAVESCALE", function() {
            return this.WAVESCALE = $e.propertyNameToID("u_WaveScale");
        }, "WAVESPEED", function() {
            return this.WAVESPEED = $e.propertyNameToID("u_WaveSpeed");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), jn = function(e) {
        function t() {
            this._enableLighting = !0, t.__super.call(this), this.setShaderName("ExtendTerrain"), 
            this.renderMode = 1;
        }
        r(t, "laya.d3.core.material.ExtendTerrainMaterial", Rn);
        var n = t.prototype;
        return n._setDetailNum = function(e) {
            switch (e) {
              case 1:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 2:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 3:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 4:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 5:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
            }
        }, a(0, n, "diffuseScaleOffset2", null, function(e) {
            this._shaderValues.setVector(t.DIFFUSESCALEOFFSET2, e);
        }), a(0, n, "splatAlphaTexture", function() {
            return this._shaderValues.getTexture(t.SPLATALPHATEXTURE);
        }, function(e) {
            this._shaderValues.setTexture(t.SPLATALPHATEXTURE, e);
        }), a(0, n, "diffuseScaleOffset3", null, function(e) {
            this._shaderValues.setVector(t.DIFFUSESCALEOFFSET3, e);
        }), a(0, n, "diffuseTexture1", null, function(e) {
            this._shaderValues.setTexture(t.DIFFUSETEXTURE1, e), this._setDetailNum(1);
        }), a(0, n, "renderMode", null, function(e) {
            var t = this.getRenderState();
            switch (e) {
              case 1:
                this.renderQueue = 2e3, t.depthWrite = !0, t.cull = 2, t.blend = 0, t.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 2e3, t.depthWrite = !1, t.cull = 2, t.blend = 1, t.srcBlend = 770, 
                t.dstBlend = 771, t.depthTest = 515;
                break;

              default:
                throw new Error("ExtendTerrainMaterial:renderMode value error.");
            }
        }), a(0, n, "diffuseTexture2", function() {
            return this._shaderValues.getTexture(t.DIFFUSETEXTURE2);
        }, function(e) {
            this._shaderValues.setTexture(t.DIFFUSETEXTURE2, e), this._setDetailNum(2);
        }), a(0, n, "diffuseScaleOffset1", null, function(e) {
            this._shaderValues.setVector(t.DIFFUSESCALEOFFSET1, e);
        }), a(0, n, "diffuseTexture3", function() {
            return this._shaderValues.getTexture(t.DIFFUSETEXTURE3);
        }, function(e) {
            this._shaderValues.setTexture(t.DIFFUSETEXTURE3, e), this._setDetailNum(3);
        }), a(0, n, "diffuseTexture4", function() {
            return this._shaderValues.getTexture(t.DIFFUSETEXTURE4);
        }, function(e) {
            this._shaderValues.setTexture(t.DIFFUSETEXTURE4, e), this._setDetailNum(4);
        }), a(0, n, "diffuseTexture5", function() {
            return this._shaderValues.getTexture(t.DIFFUSETEXTURE5);
        }, function(e) {
            this._shaderValues.setTexture(t.DIFFUSETEXTURE5, e), this._setDetailNum(5);
        }), a(0, n, "diffuseScaleOffset4", null, function(e) {
            this._shaderValues.setVector(t.DIFFUSESCALEOFFSET4, e);
        }), a(0, n, "diffuseScaleOffset5", null, function(e) {
            this._shaderValues.setVector(t.DIFFUSESCALEOFFSET5, e);
        }), a(0, n, "enableLighting", function() {
            return this._enableLighting;
        }, function(e) {
            this._enableLighting !== e && (e ? this._disablePublicDefineDatas.remove(Pn.SHADERDEFINE_POINTLIGHT | Pn.SHADERDEFINE_SPOTLIGHT | Pn.SHADERDEFINE_DIRECTIONLIGHT) : this._disablePublicDefineDatas.add(Pn.SHADERDEFINE_POINTLIGHT | Pn.SHADERDEFINE_SPOTLIGHT | Pn.SHADERDEFINE_DIRECTIONLIGHT), 
            this._enableLighting = e);
        }), t.__init__ = function() {
            t.SHADERDEFINE_DETAIL_NUM1 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM1"), 
            t.SHADERDEFINE_DETAIL_NUM2 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM2"), 
            t.SHADERDEFINE_DETAIL_NUM3 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM3"), 
            t.SHADERDEFINE_DETAIL_NUM4 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM4"), 
            t.SHADERDEFINE_DETAIL_NUM5 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM5");
        }, t.RENDERMODE_OPAQUE = 1, t.RENDERMODE_TRANSPARENT = 2, t.SHADERDEFINE_DETAIL_NUM1 = 0, 
        t.SHADERDEFINE_DETAIL_NUM2 = 0, t.SHADERDEFINE_DETAIL_NUM3 = 0, t.SHADERDEFINE_DETAIL_NUM4 = 0, 
        t.SHADERDEFINE_DETAIL_NUM5 = 0, i(t, [ "SPLATALPHATEXTURE", function() {
            return this.SPLATALPHATEXTURE = $e.propertyNameToID("u_SplatAlphaTexture");
        }, "DIFFUSETEXTURE1", function() {
            return this.DIFFUSETEXTURE1 = $e.propertyNameToID("u_DiffuseTexture1");
        }, "DIFFUSETEXTURE2", function() {
            return this.DIFFUSETEXTURE2 = $e.propertyNameToID("u_DiffuseTexture2");
        }, "DIFFUSETEXTURE3", function() {
            return this.DIFFUSETEXTURE3 = $e.propertyNameToID("u_DiffuseTexture3");
        }, "DIFFUSETEXTURE4", function() {
            return this.DIFFUSETEXTURE4 = $e.propertyNameToID("u_DiffuseTexture4");
        }, "DIFFUSETEXTURE5", function() {
            return this.DIFFUSETEXTURE5 = $e.propertyNameToID("u_DiffuseTexture5");
        }, "DIFFUSESCALEOFFSET1", function() {
            return this.DIFFUSESCALEOFFSET1 = $e.propertyNameToID("u_DiffuseScaleOffset1");
        }, "DIFFUSESCALEOFFSET2", function() {
            return this.DIFFUSESCALEOFFSET2 = $e.propertyNameToID("u_DiffuseScaleOffset2");
        }, "DIFFUSESCALEOFFSET3", function() {
            return this.DIFFUSESCALEOFFSET3 = $e.propertyNameToID("u_DiffuseScaleOffset3");
        }, "DIFFUSESCALEOFFSET4", function() {
            return this.DIFFUSESCALEOFFSET4 = $e.propertyNameToID("u_DiffuseScaleOffset4");
        }, "DIFFUSESCALEOFFSET5", function() {
            return this.DIFFUSESCALEOFFSET5 = $e.propertyNameToID("u_DiffuseScaleOffset5");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(), qn = function(e) {
        function t() {
            this._albedoColor = null, this._emissionColor = null, t.__super.call(this), this.setShaderName("PBRStandard"), 
            this._albedoColor = new _n(1, 1, 1, 1), this._shaderValues.setVector(t.ALBEDOCOLOR, new _n(1, 1, 1, 1)), 
            this._emissionColor = new _n(0, 0, 0, 0), this._shaderValues.setVector(t.EMISSIONCOLOR, new _n(0, 0, 0, 0)), 
            this._shaderValues.setNumber(t.METALLIC, 0), this._shaderValues.setNumber(t.SMOOTHNESS, .5), 
            this._shaderValues.setNumber(t.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber(t.SMOOTHNESSSOURCE, 0), 
            this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber(t.NORMALSCALE, 1), 
            this._shaderValues.setNumber(t.PARALLAXSCALE, .001), this._shaderValues.setBool(t.ENABLEEMISSION, !1), 
            this._shaderValues.setBool(t.ENABLEREFLECT, !0), this._shaderValues.setNumber(Rn.ALPHATESTVALUE, .5), 
            this._disablePublicDefineDatas.remove(Pn.SHADERDEFINE_REFLECTMAP);
        }
        r(t, "laya.d3.core.material.PBRStandardMaterial", e);
        var n = t.prototype;
        return n.cloneTo = function(t) {
            e.prototype.cloneTo.call(this, t);
            var n = t;
            this._albedoColor.cloneTo(n._albedoColor), this._emissionColor.cloneTo(n._emissionColor);
        }, a(0, n, "_Parallax", function() {
            return this._shaderValues.getNumber(t.PARALLAXSCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.PARALLAXSCALE, e);
        }), a(0, n, "_ColorB", function() {
            return this._albedoColor.elements[2];
        }, function(e) {
            this._albedoColor.elements[2] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.elements[0];
        }, function(e) {
            this._albedoColor.elements[0] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.elements[1];
        }, function(e) {
            this._albedoColor.elements[1] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "metallic", function() {
            return this._Metallic;
        }, function(e) {
            this._Metallic = Math.max(0, Math.min(1, e));
        }), a(0, n, "_GlossMapScale", function() {
            return this._shaderValues.getNumber(t.SMOOTHNESSSCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.SMOOTHNESSSCALE, e);
        }), a(0, n, "_Glossiness", function() {
            return this._shaderValues.getNumber(t.SMOOTHNESS);
        }, function(e) {
            this._shaderValues.setNumber(t.SMOOTHNESS, e);
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.elements[3];
        }, function(e) {
            this._albedoColor.elements[3] = e, this.albedoColor = this._albedoColor;
        }), a(0, n, "enableReflection", function() {
            return this._shaderValues.getBool(t.ENABLEREFLECT);
        }, function(e) {
            this._shaderValues.setBool(t.ENABLEREFLECT, !0), e ? this._disablePublicDefineDatas.remove(Pn.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(Pn.SHADERDEFINE_REFLECTMAP);
        }), a(0, n, "_Metallic", function() {
            return this._shaderValues.getNumber(t.METALLIC);
        }, function(e) {
            this._shaderValues.setNumber(t.METALLIC, e);
        }), a(0, n, "_BumpScale", function() {
            return this._shaderValues.getNumber(t.NORMALSCALE);
        }, function(e) {
            this._shaderValues.setNumber(t.NORMALSCALE, e);
        }), a(0, n, "_OcclusionStrength", function() {
            return this._shaderValues.getNumber(t.OCCLUSIONSTRENGTH);
        }, function(e) {
            this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, e);
        }), a(0, n, "_EmissionColorR", function() {
            return this._emissionColor.elements[0];
        }, function(e) {
            this._emissionColor.elements[0] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET);
        }, function(e) {
            if (e) {
                var n = e.elements;
                1 != n[0] || 1 != n[1] || 0 != n[2] || 0 != n[3] ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET);
            } else this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET);
            this._shaderValues.setVector(t.TILINGOFFSET, e);
        }), a(0, n, "_EmissionColorG", function() {
            return this._emissionColor.elements[1];
        }, function(e) {
            this._emissionColor.elements[1] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(e) {
            this._MainTex_STW = e;
        }), a(0, n, "_EmissionColorB", function() {
            return this._emissionColor.elements[2];
        }, function(e) {
            this._emissionColor.elements[2] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "_EmissionColorA", function() {
            return this._emissionColor.elements[3];
        }, function(e) {
            this._emissionColor.elements[3] = e, this.emissionColor = this._emissionColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(e) {
            this._ColorA = e;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[0];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[0] = e, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[1];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[1] = e, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[2];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[2] = e, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(e) {
            this.alphaTestValue = e;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(t.TILINGOFFSET).elements[3];
        }, function(e) {
            var n = this._shaderValues.getVector(t.TILINGOFFSET);
            n.elements[3] = e, this.tilingOffset = n;
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(e) {
            this._ColorR = e;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(e) {
            this._ColorG = e;
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(e) {
            this._ColorB = e;
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(e) {
            this._MainTex_STX = e;
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(e) {
            this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, e);
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
        }), a(0, n, "parallaxTexture", function() {
            return this._shaderValues.getTexture(t.PARALLAXTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_PARALLAXTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_PARALLAXTEXTURE), 
            this._shaderValues.setTexture(t.PARALLAXTEXTURE, e);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(t.NORMALTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(t.NORMALTEXTURE, e);
        }), a(0, n, "emissionColor", function() {
            return this._shaderValues.getVector(t.EMISSIONCOLOR);
        }, function(e) {
            this._shaderValues.setVector(t.EMISSIONCOLOR, e);
        }), a(0, n, "parallaxTextureScale", function() {
            return this._Parallax;
        }, function(e) {
            this._Parallax = Math.max(.005, Math.min(.08, e));
        }), a(0, n, "normalTextureScale", function() {
            return this._BumpScale;
        }, function(e) {
            this._BumpScale = e;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(e) {
            this._MainTex_STZ = e;
        }), a(0, n, "occlusionTexture", function() {
            return this._shaderValues.getTexture(t.OCCLUSIONTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_OCCLUSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_OCCLUSIONTEXTURE), 
            this._shaderValues.setTexture(t.OCCLUSIONTEXTURE, e);
        }), a(0, n, "occlusionTextureStrength", function() {
            return this._OcclusionStrength;
        }, function(e) {
            this._OcclusionStrength = Math.max(0, Math.min(1, e));
        }), a(0, n, "enableEmission", function() {
            return this._shaderValues.getBool(t.ENABLEEMISSION);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSION) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSION), 
            this._shaderValues.setBool(t.ENABLEEMISSION, e);
        }), a(0, n, "metallicGlossTexture", function() {
            return this._shaderValues.getTexture(t.METALLICGLOSSTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE), 
            this._shaderValues.setTexture(t.METALLICGLOSSTEXTURE, e);
        }), a(0, n, "emissionColorA", function() {
            return this._EmissionColorA;
        }, function(e) {
            this._EmissionColorA = e;
        }), a(0, n, "smoothness", function() {
            return this._Glossiness;
        }, function(e) {
            this._Glossiness = Math.max(0, Math.min(1, e));
        }), a(0, n, "smoothnessTextureScale", function() {
            return this._GlossMapScale;
        }, function(e) {
            this._GlossMapScale = Math.max(0, Math.min(1, e));
        }), a(0, n, "smoothnessSource", function() {
            return this._shaderValues.getInt(t.SMOOTHNESSSOURCE);
        }, function(e) {
            e ? (this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 1)) : (this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 0));
        }), a(0, n, "emissionColorR", function() {
            return this._EmissionColorR;
        }, function(e) {
            this._EmissionColorR = e;
        }), a(0, n, "emissionColorG", function() {
            return this._EmissionColorG;
        }, function(e) {
            this._EmissionColorG = e;
        }), a(0, n, "emissionColorB", function() {
            return this._EmissionColorB;
        }, function(e) {
            this._EmissionColorB = e;
        }), a(0, n, "emissionTexture", function() {
            return this._shaderValues.getTexture(t.EMISSIONTEXTURE);
        }, function(e) {
            e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSIONTEXTURE), 
            this._shaderValues.setTexture(t.EMISSIONTEXTURE, e);
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(e) {
            this._MainTex_STY = e;
        }), a(0, n, "renderMode", null, function(e) {
            var n = this.getRenderState();
            switch (e) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, n.depthWrite = !0, n.cull = 2, n.blend = 0, 
                n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, n.depthWrite = !0, n.cull = 2, n.blend = 0, 
                n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 2, n.blend = 1, 
                n.srcBlend = 770, n.dstBlend = 771, n.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 3:
                this.renderQueue = 3e3, this.alphaTest = !1, n.depthWrite = !1, n.cull = 2, n.blend = 1, 
                n.srcBlend = 1, n.dstBlend = 771, n.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              default:
                throw new Error("PBRSpecularMaterial : renderMode value error.");
            }
        }), t.__init__ = function() {
            t.SHADERDEFINE_ALBEDOTEXTURE = t.shaderDefines.registerDefine("ALBEDOTEXTURE"), 
            t.SHADERDEFINE_METALLICGLOSSTEXTURE = t.shaderDefines.registerDefine("METALLICGLOSSTEXTURE"), 
            t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = t.shaderDefines.registerDefine("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"), 
            t.SHADERDEFINE_NORMALTEXTURE = t.shaderDefines.registerDefine("NORMALTEXTURE"), 
            t.SHADERDEFINE_PARALLAXTEXTURE = t.shaderDefines.registerDefine("PARALLAXTEXTURE"), 
            t.SHADERDEFINE_OCCLUSIONTEXTURE = t.shaderDefines.registerDefine("OCCLUSIONTEXTURE"), 
            t.SHADERDEFINE_EMISSION = t.shaderDefines.registerDefine("EMISSION"), t.SHADERDEFINE_EMISSIONTEXTURE = t.shaderDefines.registerDefine("EMISSIONTEXTURE"), 
            t.SHADERDEFINE_REFLECTMAP = t.shaderDefines.registerDefine("REFLECTMAP"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), 
            t.SHADERDEFINE_ALPHAPREMULTIPLY = t.shaderDefines.registerDefine("ALPHAPREMULTIPLY");
        }, t.SmoothnessSource_MetallicGlossTexture_Alpha = 0, t.SmoothnessSource_AlbedoTexture_Alpha = 1, 
        t.RENDERMODE_OPAQUE = 0, t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_FADE = 2, t.RENDERMODE_TRANSPARENT = 3, 
        t.SHADERDEFINE_ALBEDOTEXTURE = 0, t.SHADERDEFINE_NORMALTEXTURE = 0, t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = 0, 
        t.SHADERDEFINE_METALLICGLOSSTEXTURE = 0, t.SHADERDEFINE_OCCLUSIONTEXTURE = 0, t.SHADERDEFINE_PARALLAXTEXTURE = 0, 
        t.SHADERDEFINE_EMISSION = 0, t.SHADERDEFINE_EMISSIONTEXTURE = 0, t.SHADERDEFINE_REFLECTMAP = 0, 
        t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ALPHAPREMULTIPLY = 0, t.SMOOTHNESSSOURCE = -1, 
        t.ENABLEEMISSION = -1, t.ENABLEREFLECT = -1, i(t, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = $e.propertyNameToID("u_AlbedoTexture");
        }, "METALLICGLOSSTEXTURE", function() {
            return this.METALLICGLOSSTEXTURE = $e.propertyNameToID("u_MetallicGlossTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = $e.propertyNameToID("u_NormalTexture");
        }, "PARALLAXTEXTURE", function() {
            return this.PARALLAXTEXTURE = $e.propertyNameToID("u_ParallaxTexture");
        }, "OCCLUSIONTEXTURE", function() {
            return this.OCCLUSIONTEXTURE = $e.propertyNameToID("u_OcclusionTexture");
        }, "EMISSIONTEXTURE", function() {
            return this.EMISSIONTEXTURE = $e.propertyNameToID("u_EmissionTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = $e.propertyNameToID("u_AlbedoColor");
        }, "EMISSIONCOLOR", function() {
            return this.EMISSIONCOLOR = $e.propertyNameToID("u_EmissionColor");
        }, "METALLIC", function() {
            return this.METALLIC = $e.propertyNameToID("u_metallic");
        }, "SMOOTHNESS", function() {
            return this.SMOOTHNESS = $e.propertyNameToID("u_smoothness");
        }, "SMOOTHNESSSCALE", function() {
            return this.SMOOTHNESSSCALE = $e.propertyNameToID("u_smoothnessScale");
        }, "OCCLUSIONSTRENGTH", function() {
            return this.OCCLUSIONSTRENGTH = $e.propertyNameToID("u_occlusionStrength");
        }, "NORMALSCALE", function() {
            return this.NORMALSCALE = $e.propertyNameToID("u_normalScale");
        }, "PARALLAXSCALE", function() {
            return this.PARALLAXSCALE = $e.propertyNameToID("u_parallaxScale");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = $e.propertyNameToID("u_TilingOffset");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new t();
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(Rn.shaderDefines);
        } ]), t;
    }(Rn), Qn = function(e) {
        function t(e) {
            t.__super.call(this, e), this._skinnedDataLoopMarks = [], this._cacheAnimationNode = [], 
            this._localBoundingBoxCorners = o(8, null);
        }
        r(t, "laya.d3.core.SkinnedMeshRenderer", e);
        var n = t.prototype;
        return n._getCacheAnimationNodes = function() {
            var e = this._cacheMesh._boneNames, t = this._cacheMesh._bindPoseIndices, n = t.length;
            if (D.isConchApp) {
                this._cacheAnimationNodeIndices = new Uint16Array(n);
                var i = this._cacheAnimator._avatarNodeMap;
                for (o = 0; o < n; o++) {
                    var r = i[e[t[o]]];
                    this._cacheAnimationNodeIndices[o] = r._worldMatrixIndex;
                }
            } else {
                this._cacheAnimationNode.length = n;
                for (var a = this._cacheAnimator._avatarNodeMap, o = 0; o < n; o++) {
                    var s = a[e[t[o]]];
                    this._cacheAnimationNode[o] = s;
                }
            }
        }, n._computeBoneIndexToMeshWithAsyncAvatar = function() {
            this._computeBoneIndexToMeshWithAsyncMesh();
        }, n._computeBoneIndexToMeshWithAsyncMesh = function() {
            this._getCacheAnimationNodes();
        }, n._computeSkinnedData = function() {
            if (this._cacheMesh && this._cacheAvatar) for (var e = this._cacheMesh._inverseBindPoses, t = this._cacheMesh._bindPoseIndices, n = this._cacheMesh._skinDataPathMarks, i = 0, r = this._cacheMesh.subMeshCount; i < r; i++) {
                for (var a = this._cacheMesh._getSubMesh(i)._boneIndicesList, o = this._skinnedData[i], s = 0, l = a.length; s < l; s++) {
                    var h = a[s];
                    D.isConchApp ? this._computeSubSkinnedDataNative(this._cacheAnimator._animationNodeWorldMatrixs, this._cacheAnimationNodeIndices, this._cacheMesh._inverseBindPosesBuffer, h, t, o[s]) : this._computeSubSkinnedData(e, h, t, o[s], n);
                }
                this._renderElements[i].skinnedDatas = o;
            }
        }, n._computeSubSkinnedData = function(e, t, n, i, r) {
            for (var a = 0, o = t.length; a < o; a++) {
                var s = t[a];
                if (this._skinnedDataLoopMarks[s] === L.loopCount) for (var l = r[s], h = this._skinnedData[l[0]][l[1]], c = 16 * l[2], u = 16 * a, _ = 0; _ < 16; _++) i[u + _] = h[c + _]; else ke._mulMatrixArray(this._cacheAnimationNode[s].transform.getWorldMatrix(), e[n[s]], i, 16 * a), 
                this._skinnedDataLoopMarks[s] = L.loopCount;
            }
        }, n._onMeshChange = function(t) {
            e.prototype._onMeshChange.call(this, t), this._cacheMesh = t;
            var n = t.subMeshCount;
            this._skinnedData = o(n), this._skinnedDataLoopMarks.length = t._bindPoseIndices.length;
            for (var i = 0; i < n; i++) for (var r = t._getSubMesh(i)._boneIndicesList, a = r.length, s = this._skinnedData[i] = o(a), l = 0; l < a; l++) s[l] = new Float32Array(16 * r[l].length);
            this._cacheAvatar && t && this._computeBoneIndexToMeshWithAsyncAvatar();
        }, n._setCacheAnimator = function(e) {
            this._cacheAnimator = e;
        }, n._setRootBone = function(e) {
            this._rootBone = e;
        }, n._setCacheAvatar = function(e) {
            this._cacheAvatar !== e && (this._cacheMesh ? (this._cacheAvatar = e, e && (this._defineDatas.add(ai.SHADERDEFINE_BONE), 
            this._computeBoneIndexToMeshWithAsyncAvatar())) : this._cacheAvatar = e);
        }, n._calculateBoundingBox = function() {
            this._cacheAnimator ? null == this._localBoundBox ? this._boundingBox.toDefault() : this._calculateBoundBoxByInitCorners(this._localBoundingBoxCorners) : e.prototype._calculateBoundingBox.call(this);
        }, n._calculateBoundingSphere = function() {
            this._cacheAnimator ? null == this.localBoundSphere ? this._boundingSphere.toDefault() : this._calculateBoundingSphereByInitSphere(this.localBoundSphere) : e.prototype._calculateBoundingSphere.call(this);
        }, n._updateOctreeNode = function() {
            var e = this._treeNode;
            e && e.updateObject(this);
        }, n._renderUpdate = function(e, t) {
            if (this._cacheAnimator) {
                this._computeSkinnedData();
                var n = this._cacheAnimator.owner._transform._parent, i = n ? n.worldMatrix : ut.DEFAULT;
                this._shaderValues.setMatrix4x4(Sn.WORLDMATRIX, i);
            } else this._shaderValues.setMatrix4x4(Sn.WORLDMATRIX, t.worldMatrix);
        }, n._renderUpdateWithCamera = function(e, t) {
            var n = e.projectionViewMatrix;
            if (this._cacheAnimator) {
                var i = this._cacheAnimator.owner._transform._parent, r = i ? i.worldMatrix : ut.DEFAULT;
                ut.multiply(n, r, this._projectionViewWorldMatrix);
            } else ut.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix);
            this._shaderValues.setMatrix4x4(Sn.MVPMATRIX, this._projectionViewWorldMatrix), 
            Dt.debugMode && this._renderRenderableBoundBox();
        }, n._computeSubSkinnedDataNative = function(e, t, n, i, r, a) {
            E.instance.computeSubSkinnedData(e, t, n, i, r, a);
        }, a(0, n, "localBoundBox", function() {
            return this._localBoundBox;
        }, function(e) {
            this._localBoundBox = e, e.getCorners(this._localBoundingBoxCorners);
        }), a(0, n, "boundingBoxCenter", function() {
            var e = this.boundingBox;
            return dn.add(e.min, e.max, this._boundingBoxCenter), dn.scale(this._boundingBoxCenter, .5, this._boundingBoxCenter), 
            this._boundingBoxCenter;
        }), t;
    }(Ln), Jn = (function(e) {
        function t(e, n) {
            void 0 === e && (e = 1), void 0 === n && (n = fe.COLLISIONFILTERGROUP_ALLFILTER), 
            t.__super.call(this, e, n);
        }
        r(t, "laya.d3.physics.PhysicsCollider", e);
        var n = t.prototype;
        n._addToSimulation = function() {
            this._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);
        }, n._removeFromSimulation = function() {
            this._simulation._removePhysicsCollider(this);
        }, n._parse = function(e) {
            null != e.friction && (this.friction = e.friction), null != e.rollingFriction && (this.rollingFriction = e.rollingFriction), 
            null != e.restitution && (this.restitution = e.restitution), null != e.isTrigger && (this.isTrigger = e.isTrigger), 
            laya.d3.physics.PhysicsComponent.prototype._parse.call(this, e), this._parseShape(e.shapes);
        }, n._onAdded = function() {
            var t = new Dt._physics3D.btCollisionObject();
            t.setUserIndex(this.id), t.forceActivationState(5);
            var n = t.getCollisionFlags();
            this.owner.isStatic ? ((2 & n) > 0 && (n ^= 2), n |= 1) : ((1 & n) > 0 && (n ^= 1), 
            n |= 2), t.setCollisionFlags(n), this._nativeColliderObject = t, e.prototype._onAdded.call(this);
        };
    }(Nn), function(t) {
        function n(e, t) {
            this._isKinematic = !1, this._mass = 1, this._angularDamping = 0, this._linearDamping = 0, 
            this._overrideGravity = !1, this._detectCollisions = !0, this._gravity = new dn(0, -10, 0), 
            this._totalTorque = new dn(0, 0, 0), this._linearVelocity = new dn(), this._angularVelocity = new dn(), 
            this._linearFactor = new dn(1, 1, 1), this._angularFactor = new dn(1, 1, 1), void 0 === e && (e = 1), 
            void 0 === t && (t = fe.COLLISIONFILTERGROUP_ALLFILTER), n.__super.call(this, e, t);
        }
        r(n, "laya.d3.physics.Rigidbody3D", t);
        var o = n.prototype;
        o._updateMass = function(e) {
            this._nativeColliderObject && this._colliderShape && (this._colliderShape._nativeShape.calculateLocalInertia(e, n._nativeInertia), 
            this._nativeColliderObject.setMassProps(e, n._nativeInertia), this._nativeColliderObject.updateInertiaTensor());
        }, o._delegateMotionStateGetWorldTransform = function(e) {}, o._delegateMotionStateSetWorldTransform = function(e) {
            var t = this._rigidbody;
            t._simulation._updatedRigidbodies++;
            var n = Dt._physics3D, i = n.wrapPointer(e, n.btTransform);
            t._updateTransformComponent(i);
        }, o._delegateMotionStateGetWorldTransformNative = function(e, t) {}, o._delegateMotionStateSetWorldTransformNative = function(e, t) {
            var n = e;
            n._simulation._updatedRigidbodies++;
            var i = Dt._physics3D, r = i.wrapPointer(t, i.btTransform);
            n._updateTransformComponent(r);
        }, o._onScaleChange = function(e) {
            laya.d3.physics.PhysicsComponent.prototype._onScaleChange.call(this, e), this._updateMass(this._isKinematic ? 0 : this._mass);
        }, o._delegateMotionStateClear = function() {
            this._rigidbody = null;
        }, o._onAdded = function() {
            var i = Dt._physics3D, r = new i.LayaMotionState();
            null != e.conch && i.LayaMotionState.prototype.setRigidbody ? (r.setRigidbody(this), 
            r.setNativeGetWorldTransform(this._delegateMotionStateGetWorldTransformNative), 
            r.setNativeSetWorldTransform(this._delegateMotionStateSetWorldTransformNative)) : (r.getWorldTransform = this._delegateMotionStateGetWorldTransform, 
            r.setWorldTransform = this._delegateMotionStateSetWorldTransform), r.clear = this._delegateMotionStateClear, 
            r._rigidbody = this, this._nativeMotionState = r;
            var a = new i.btRigidBodyConstructionInfo(0, r, null, n._nativeVector3Zero), o = new i.btRigidBody(a);
            o.setUserIndex(this.id), this._nativeColliderObject = o, t.prototype._onAdded.call(this), 
            this.mass = this._mass, this.linearFactor = this._linearFactor, this.angularFactor = this._angularFactor, 
            this.linearDamping = this._linearDamping, this.angularDamping = this._angularDamping, 
            this.overrideGravity = this._overrideGravity, this.gravity = this._gravity, this.isKinematic = this._isKinematic, 
            i.destroy(a);
        }, o._onShapeChange = function(e) {
            laya.d3.physics.PhysicsComponent.prototype._onShapeChange.call(this, e), this._isKinematic ? this._updateMass(0) : (this._nativeColliderObject.setCenterOfMassTransform(this._nativeColliderObject.getWorldTransform()), 
            this._updateMass(this._mass));
        }, o._parse = function(e) {
            null != e.friction && (this.friction = e.friction), null != e.rollingFriction && (this.rollingFriction = e.rollingFriction), 
            null != e.restitution && (this.restitution = e.restitution), null != e.isTrigger && (this.isTrigger = e.isTrigger), 
            null != e.mass && (this.mass = e.mass), null != e.isKinematic && (this.isKinematic = e.isKinematic), 
            null != e.linearDamping && (this.linearDamping = e.linearDamping), null != e.angularDamping && (this.angularDamping = e.angularDamping), 
            null != e.overrideGravity && (this.overrideGravity = e.overrideGravity), e.gravity && (this.gravity.fromArray(e.gravity), 
            this.gravity = this.gravity), laya.d3.physics.PhysicsComponent.prototype._parse.call(this, e), 
            this._parseShape(e.shapes);
        }, o._onDestroy = function() {
            var e = Dt._physics3D;
            this._nativeMotionState.clear(), e.destroy(this._nativeMotionState), laya.d3.physics.PhysicsComponent.prototype._onDestroy.call(this), 
            this._nativeMotionState = null, this._gravity = null, this._totalTorque = null, 
            this._linearVelocity = null, this._angularVelocity = null, this._linearFactor = null, 
            this._angularFactor = null;
        }, o._addToSimulation = function() {
            this._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);
        }, o._removeFromSimulation = function() {
            this._simulation._removeRigidBody(this);
        }, o._cloneTo = function(e) {
            t.prototype._cloneTo.call(this, e);
            var n = e;
            n.isKinematic = this._isKinematic, n.mass = this._mass, n.gravity = this._gravity, 
            n.angularDamping = this._angularDamping, n.linearDamping = this._linearDamping, 
            n.overrideGravity = this._overrideGravity, n.linearVelocity = this._linearVelocity, 
            n.angularVelocity = this._angularVelocity, n.linearFactor = this._linearFactor, 
            n.angularFactor = this._angularFactor, n.detectCollisions = this._detectCollisions;
        }, o.applyForce = function(e, t) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var i = n._nativeTempVector30, r = e.elements;
            if (i.setValue(-r[0], r[1], r[2]), t) {
                var a = t.elements, o = n._nativeTempVector31;
                o.setValue(-a[0], a[1], a[2]), this._nativeColliderObject.applyForce(i, o);
            } else this._nativeColliderObject.applyCentralForce(i);
        }, o.applyTorque = function(e) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var t = n._nativeTempVector30, i = e.elements;
            t.setValue(-i[0], i[1], i[2]), this._nativeColliderObject.applyTorque(t);
        }, o.applyImpulse = function(e, t) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var i = e.elements;
            if (n._nativeImpulse.setValue(-i[0], i[1], i[2]), t) {
                var r = t.elements;
                n._nativeImpulseOffset.setValue(-r[0], r[1], r[2]), this._nativeColliderObject.applyImpulse(n._nativeImpulse, n._nativeImpulseOffset);
            } else this._nativeColliderObject.applyCentralImpulse(n._nativeImpulse);
        }, o.applyTorqueImpulse = function(e) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var t = n._nativeTempVector30, i = e.elements;
            t.setValue(-i[0], i[1], i[2]), this._nativeColliderObject.applyTorqueImpulse(t);
        }, o.wakeUp = function() {
            this._nativeColliderObject && this._nativeColliderObject.activate(!1);
        }, o.clearForces = function() {
            var e = this._nativeColliderObject;
            if (null == e) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            e.clearForces();
            var t = n._nativeVector3Zero;
            e.setInterpolationAngularVelocity(t), e.setLinearVelocity(t), e.setInterpolationAngularVelocity(t), 
            e.setAngularVelocity(t);
        }, a(0, o, "angularDamping", function() {
            return this._angularDamping;
        }, function(e) {
            this._angularDamping = e, this._nativeColliderObject && this._nativeColliderObject.setDamping(this._linearDamping, e);
        }), a(0, o, "mass", function() {
            return this._mass;
        }, function(e) {
            e = Math.max(e, 1e-7), this._mass = e, this._isKinematic || this._updateMass(e);
        }), a(0, o, "linearDamping", function() {
            return this._linearDamping;
        }, function(e) {
            this._linearDamping = e, this._nativeColliderObject && this._nativeColliderObject.setDamping(e, this._angularDamping);
        }), a(0, o, "isKinematic", function() {
            return this._isKinematic;
        }, function(e) {
            this._isKinematic = e;
            var t = !!(this._simulation && this._enabled && this._colliderShape);
            t && this._removeFromSimulation();
            var i = this._nativeColliderObject, r = i.getCollisionFlags();
            e ? (r |= 2, i.setCollisionFlags(r), this._nativeColliderObject.forceActivationState(4), 
            this._enableProcessCollisions = !1, this._updateMass(0)) : ((2 & r) > 0 && (r ^= 2), 
            i.setCollisionFlags(r), this._nativeColliderObject.setActivationState(1), this._enableProcessCollisions = !0, 
            this._updateMass(this._mass));
            var a = n._nativeVector3Zero;
            i.setInterpolationLinearVelocity(a), i.setLinearVelocity(a), i.setInterpolationAngularVelocity(a), 
            i.setAngularVelocity(a), t && this._addToSimulation();
        }), a(0, o, "gravity", function() {
            return this._gravity;
        }, function(e) {
            this._gravity = e, n._nativeGravity.setValue(-e.x, e.y, e.z), this._nativeColliderObject.setGravity(n._nativeGravity);
        }), a(0, o, "overrideGravity", function() {
            return this._overrideGravity;
        }, function(e) {
            if (this._overrideGravity = e, this._nativeColliderObject) {
                var t = this._nativeColliderObject.getFlags();
                e ? 0 == (1 & t) && this._nativeColliderObject.setFlags(1 | t) : (1 & t) > 0 && this._nativeColliderObject.setFlags(1 ^ t);
            }
        }), a(0, o, "totalForce", function() {
            return this._nativeColliderObject ? this._nativeColliderObject.getTotalForce() : null;
        }), a(0, o, "linearVelocity", function() {
            return this._nativeColliderObject && ke._convertToLayaVec3(this._nativeColliderObject.getLinearVelocity(), this._linearVelocity, !0), 
            this._linearVelocity;
        }, function(e) {
            if (this._linearVelocity = e, this._nativeColliderObject) {
                var t = n._nativeTempVector30;
                ke._convertToBulletVec3(e, t, !0), this.isSleeping && this.wakeUp(), this._nativeColliderObject.setLinearVelocity(t);
            }
        }), a(0, o, "detectCollisions", function() {
            return this._detectCollisions;
        }, function(e) {
            this._detectCollisions !== e && (this._detectCollisions = e, this._colliderShape && this._enabled && this._simulation && (this._simulation._removeRigidBody(this), 
            this._simulation._addRigidBody(this, this._collisionGroup, e ? this._canCollideWith : 0)));
        }), a(0, o, "linearFactor", function() {
            return this._nativeColliderObject ? this._linearFactor : null;
        }, function(e) {
            if (this._linearFactor = e, this._nativeColliderObject) {
                var t = n._nativeTempVector30;
                ke._convertToBulletVec3(e, t, !1), this._nativeColliderObject.setLinearFactor(t);
            }
        }), a(0, o, "angularFactor", function() {
            return this._nativeColliderObject ? this._angularFactor : null;
        }, function(e) {
            if (this._angularFactor = e, this._nativeColliderObject) {
                var t = n._nativeTempVector30;
                ke._convertToBulletVec3(e, t, !1), this._nativeColliderObject.setAngularFactor(t);
            }
        }), a(0, o, "angularVelocity", function() {
            return this._nativeColliderObject && ke._convertToLayaVec3(this._nativeColliderObject.getAngularVelocity(), this._angularVelocity, !0), 
            this._angularVelocity;
        }, function(e) {
            if (this._angularVelocity = e, this._nativeColliderObject) {
                var t = n._nativeTempVector30;
                ke._convertToBulletVec3(e, t, !0), this.isSleeping && this.wakeUp(), this._nativeColliderObject.setAngularVelocity(t);
            }
        }), a(0, o, "totalTorque", function() {
            if (this._nativeColliderObject) {
                var e = this._nativeColliderObject.getTotalTorque(), t = this._totalTorque.elements;
                t[0] = -e.x, t[1] = e.y, t[2] = e.z;
            }
            return null;
        }), a(0, o, "isSleeping", function() {
            return !!this._nativeColliderObject && 2 === this._nativeColliderObject.getActivationState();
        }), a(0, o, "sleepLinearVelocity", function() {
            return this._nativeColliderObject.getLinearSleepingThreshold();
        }, function(e) {
            this._nativeColliderObject.setSleepingThresholds(e, this._nativeColliderObject.getAngularSleepingThreshold());
        }), a(0, o, "sleepAngularVelocity", function() {
            return this._nativeColliderObject.getAngularSleepingThreshold();
        }, function(e) {
            this._nativeColliderObject.setSleepingThresholds(this._nativeColliderObject.getLinearSleepingThreshold(), e);
        }), n.TYPE_STATIC = 0, n.TYPE_DYNAMIC = 1, n.TYPE_KINEMATIC = 2, n._BT_DISABLE_WORLD_GRAVITY = 1, 
        n._BT_ENABLE_GYROPSCOPIC_FORCE = 2, i(n, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector31", function() {
            return this._nativeTempVector31 = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeVector3Zero", function() {
            return this._nativeVector3Zero = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeInertia", function() {
            return this._nativeInertia = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeImpulse", function() {
            return this._nativeImpulse = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeImpulseOffset", function() {
            return this._nativeImpulseOffset = new Dt._physics3D.btVector3(0, 0, 0);
        }, "_nativeGravity", function() {
            return this._nativeGravity = new Dt._physics3D.btVector3(0, 0, 0);
        } ]);
    }(Nn), function(e) {
        function t(e, n, i, r) {
            void 0 === i && (i = 0), void 0 === r && (r = 0), t.__super.call(this, i, !1), this._glTextureType = 3553, 
            this._width = e, this._height = n, this._depthStencilFormat = r, this._create(e, n);
        }
        r(t, "laya.d3.resource.RenderTexture", s);
        var n = t.prototype;
        return n._create = function(e, t) {
            var n = E.instance;
            this._frameBuffer = n.createFramebuffer(), b.bindTexture(n, this._glTextureType, this._glTexture);
            var i = this._getGLFormat();
            if (n.texImage2D(this._glTextureType, 0, i, e, t, 0, i, 5121, null), this._setGPUMemory(e * t * 4), 
            n.bindFramebuffer(36160, this._frameBuffer), n.framebufferTexture2D(36160, 36064, 3553, this._glTexture, 0), 
            3 !== this._depthStencilFormat) switch (this._depthStencilBuffer = n.createRenderbuffer(), 
            n.bindRenderbuffer(36161, this._depthStencilBuffer), this._depthStencilFormat) {
              case 0:
                n.renderbufferStorage(36161, 33189, e, t), n.framebufferRenderbuffer(36160, 36096, 36161, this._depthStencilBuffer);
                break;

              case 1:
                n.renderbufferStorage(36161, 36168, e, t), n.framebufferRenderbuffer(36160, 36128, 36161, this._depthStencilBuffer);
                break;

              case 2:
                n.renderbufferStorage(36161, 34041, e, t), n.framebufferRenderbuffer(36160, 33306, 36161, this._depthStencilBuffer);
                break;

              default:
                throw "RenderTexture: unkonw depth format.";
            }
            n.bindFramebuffer(36160, null), n.bindRenderbuffer(36161, null), this._setWarpMode(10242, this._wrapModeU), 
            this._setWarpMode(10243, this._wrapModeV), this._setFilterMode(this._filterMode), 
            this._setAnisotropy(this._anisoLevel), this._readyed = !0, this._activeResource();
        }, n.generateMipmap = function() {
            this._isPot(this.width) && this._isPot(this.height) ? (this._mipmap = !0, E.instance.generateMipmap(this._glTextureType), 
            this._setFilterMode(this._filterMode), this._setGPUMemory(this.width * this.height * 4 * (1 + 1 / 3))) : (this._mipmap = !1, 
            this._setGPUMemory(this.width * this.height * 4 * (1 + 1 / 3)));
        }, n.start = function() {
            E.instance.bindFramebuffer(36160, this._frameBuffer), t._currentActive = this, this._readyed = !1;
        }, n.end = function() {
            E.instance.bindFramebuffer(36160, null), t._currentActive = null, this._readyed = !0;
        }, n.getData = function(e, t, n, i, r) {
            var a = E.instance;
            a.bindFramebuffer(36160, this._frameBuffer);
            return 36053 === a.checkFramebufferStatus(36160) ? (a.readPixels(e, t, n, i, 6408, 5121, r), 
            a.bindFramebuffer(36160, null), r) : (a.bindFramebuffer(36160, null), null);
        }, n._disposeResource = function() {
            if (this._frameBuffer) {
                var e = E.instance;
                e.deleteTexture(this._glTexture), e.deleteFramebuffer(this._frameBuffer), e.deleteRenderbuffer(this._depthStencilBuffer), 
                this._glTexture = null, this._frameBuffer = null, this._depthStencilBuffer = null, 
                this._setGPUMemory(0);
            }
        }, a(0, n, "depthStencilFormat", function() {
            return this._depthStencilFormat;
        }), a(0, n, "defaulteTexture", function() {
            return P.grayTexture;
        }), a(1, t, "currentActive", function() {
            return t._currentActive;
        }, laya.webgl.resource.BaseTexture._$SET_currentActive), t._currentActive = null, 
        t;
    }()), $n = function(e) {
        function t(e, n) {
            void 0 === e && (e = 0), void 0 === n && (n = !1), t.__super.call(this, e, n), this._glTextureType = 34067;
        }
        r(t, "laya.d3.resource.TextureCube", s);
        var i = t.prototype;
        return i.setSixSideImageSources = function(e, t) {
            void 0 === t && (t = !1);
            for (var n = 0, i = 0, r = 0; r < 6; r++) {
                var a = e[r];
                if (!a) return void console.log("TextureCube: image Source can't be null.");
                var o = a.width, s = a.height;
                if (r > 0 && n !== o) return void console.log("TextureCube: each side image's width and height must same.");
                if (n = o, i = s, n !== i) return void console.log("TextureCube: each side image's width and height must same.");
            }
            this._width = n, this._height = i;
            var l = E.instance;
            b.bindTexture(l, this._glTextureType, this._glTexture);
            var h = this._getGLFormat();
            if (D.isConchApp) {
                if (1 == t) for (var c = 0; c < 6; c++) e[c].setPremultiplyAlpha(t);
                l.texImage2D(34073, 0, 6408, 6408, 5121, e[0]), l.texImage2D(34074, 0, 6408, 6408, 5121, e[1]), 
                l.texImage2D(34069, 0, 6408, 6408, 5121, e[2]), l.texImage2D(34070, 0, 6408, 6408, 5121, e[3]), 
                l.texImage2D(34071, 0, 6408, 6408, 5121, e[4]), l.texImage2D(34072, 0, 6408, 6408, 5121, e[5]);
            } else t && l.pixelStorei(37441, !0), l.texImage2D(34073, 0, h, h, 5121, e[0]), 
            l.texImage2D(34074, 0, h, h, 5121, e[1]), l.texImage2D(34069, 0, h, h, 5121, e[2]), 
            l.texImage2D(34070, 0, h, h, 5121, e[3]), l.texImage2D(34071, 0, h, h, 5121, e[4]), 
            l.texImage2D(34072, 0, h, h, 5121, e[5]), t && l.pixelStorei(37441, !1);
            this._mipmap && this._isPot(n) && this._isPot(i) ? (l.generateMipmap(this._glTextureType), 
            this._setGPUMemory(n * i * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(n * i * 4 * 6), 
            this._setWarpMode(10242, this._wrapModeU), this._setWarpMode(10243, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
        }, i.setSixSidePixels = function(e, t, n) {
            if (e <= 0 || t <= 0) throw new Error("TextureCube:width or height must large than 0.");
            if (!n) throw new Error("TextureCube:pixels can't be null.");
            this._width = e, this._height = t;
            var i = E.instance;
            b.bindTexture(i, this._glTextureType, this._glTexture);
            var r = this._getGLFormat();
            i.texImage2D(34073, 0, r, e, t, 0, r, 5121, n[0]), i.texImage2D(34074, 0, r, e, t, 0, r, 5121, n[1]), 
            i.texImage2D(34069, 0, r, e, t, 0, r, 5121, n[2]), i.texImage2D(34070, 0, r, e, t, 0, r, 5121, n[3]), 
            i.texImage2D(34071, 0, r, e, t, 0, r, 5121, n[4]), i.texImage2D(34072, 0, r, e, t, 0, r, 5121, n[5]), 
            this._mipmap && this._isPot(e) && this._isPot(t) ? (i.generateMipmap(this._glTextureType), 
            this._setGPUMemory(e * t * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(e * t * 4 * 6), 
            this._setWarpMode(10242, this._wrapModeU), this._setWarpMode(10243, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
        }, i._recoverResource = function() {}, a(0, i, "defaulteTexture", function() {
            return t.grayTexture;
        }), t.__init__ = function() {
            var e = new Uint8Array(3);
            e[0] = 128, e[1] = 128, e[2] = 128, (t.grayTexture = new t(0, !1)).setSixSidePixels(1, 1, [ e, e, e, e, e, e ]), 
            t.grayTexture.lock = !0;
        }, t._parse = function(e, n, i) {
            var r = i ? new t(i[0], i[1]) : new t();
            return r.setSixSideImageSources(e), r;
        }, t.load = function(e, t) {
            n.loader.create(e, t, null, "TEXTURECUBE");
        }, t.grayTexture = null, t;
    }(), ei = function(e) {
        function t() {
            t.__super.call(this, this.name), this._render = new On(this), this._geometryFilter = new Ve(this);
        }
        r(t, "laya.d3.core.trail.TrailSprite3D", e);
        var n = t.prototype;
        return n._parse = function(e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, e);
            var t = this._render, n = this._geometryFilter, i = 0, r = 0, a = e.materials;
            if (a) {
                var o = t.sharedMaterials, s = a.length;
                for (o.length = s, i = 0; i < s; i++) o[i] = g.getRes(a[i].path);
                t.sharedMaterials = o;
            }
            n.time = e.time, n.minVertexDistance = e.minVertexDistance, n.widthMultiplier = e.widthMultiplier, 
            n.textureMode = e.textureMode, null != e.alignment && (n.alignment = e.alignment);
            var l = [], h = e.widthCurve;
            for (i = 0, r = h.length; i < r; i++) {
                var c = new Ht();
                c.time = h[i].time, c.inTangent = h[i].inTangent, c.outTangent = h[i].outTangent, 
                c.value = h[i].value, l.push(c);
            }
            n.widthCurve = l;
            var u = e.colorGradient, _ = u.colorKeys, d = u.alphaKeys, f = new pe(_.length, d.length);
            for (f.mode = u.mode, i = 0, r = _.length; i < r; i++) {
                var m = _[i];
                f.addColorRGB(m.time, new Ge(m.value[0], m.value[1], m.value[2], 1));
            }
            for (i = 0, r = d.length; i < r; i++) {
                var p = d[i];
                f.addColorAlpha(p.time, p.value);
            }
            n.colorGradient = f;
        }, n._onActive = function() {
            e.prototype._onActive.call(this), this._transform.position.cloneTo(this._geometryFilter._lastPosition);
        }, n.cloneTo = function(e) {
            laya.d3.core.Sprite3D.prototype.cloneTo.call(this, e);
            var t = 0, n = 0, i = e, r = i.trailFilter;
            r.time = this.trailFilter.time, r.minVertexDistance = this.trailFilter.minVertexDistance, 
            r.widthMultiplier = this.trailFilter.widthMultiplier, r.textureMode = this.trailFilter.textureMode;
            var a = this.trailFilter.widthCurve, o = [];
            for (t = 0, n = a.length; t < n; t++) {
                var s = new Ht();
                a[t].cloneTo(s), o.push(s);
            }
            r.widthCurve = o;
            var l = new pe(this.trailFilter.colorGradient.maxColorRGBKeysCount, this.trailFilter.colorGradient.maxColorAlphaKeysCount);
            this.trailFilter.colorGradient.cloneTo(l), r.colorGradient = l;
            i.trailRenderer.sharedMaterial = this.trailRenderer.sharedMaterial;
        }, n.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._geometryFilter.destroy(), this._geometryFilter = null);
        }, a(0, n, "trailFilter", function() {
            return this._geometryFilter;
        }), a(0, n, "trailRenderer", function() {
            return this._render;
        }), t.__init__ = function() {
            t.SHADERDEFINE_GRADIENTMODE_BLEND = t.shaderDefines.registerDefine("GRADIENTMODE_BLEND");
        }, t.SHADERDEFINE_GRADIENTMODE_BLEND = 0, i(t, [ "CURTIME", function() {
            return this.CURTIME = $e.propertyNameToID("u_CurTime");
        }, "LIFETIME", function() {
            return this.LIFETIME = $e.propertyNameToID("u_LifeTime");
        }, "WIDTHCURVE", function() {
            return this.WIDTHCURVE = $e.propertyNameToID("u_WidthCurve");
        }, "WIDTHCURVEKEYLENGTH", function() {
            return this.WIDTHCURVEKEYLENGTH = $e.propertyNameToID("u_WidthCurveKeyLength");
        }, "GRADIENTCOLORKEY", function() {
            return this.GRADIENTCOLORKEY = $e.propertyNameToID("u_GradientColorkey");
        }, "GRADIENTALPHAKEY", function() {
            return this.GRADIENTALPHAKEY = $e.propertyNameToID("u_GradientAlphakey");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(wn.shaderDefines);
        } ]), t;
    }(wn), ti = function(e) {
        function t() {
            this._range = NaN, this._lightMatrix = new ut(), t.__super.call(this), this._range = 6;
        }
        r(t, "laya.d3.core.light.PointLight", e);
        var n = t.prototype;
        return n._onActive = function() {
            e.prototype._onActive.call(this), this._lightmapBakedType !== Fn.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.add(Pn.SHADERDEFINE_POINTLIGHT);
        }, n._onInActive = function() {
            e.prototype._onInActive.call(this), this._lightmapBakedType !== Fn.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.remove(Pn.SHADERDEFINE_POINTLIGHT);
        }, n._prepareToScene = function() {
            var e = this._scene;
            if (e.enableLight && this.activeInHierarchy) {
                e._defineDatas;
                var n = e._shaderValues;
                dn.scale(this.color, this._intensity, this._intensityColor), n.setVector(Pn.POINTLIGHTCOLOR, this._intensityColor), 
                n.setVector(Pn.POINTLIGHTPOS, this.transform.position), n.setNumber(Pn.POINTLIGHTRANGE, this.range);
                var i = this._lightMatrix, r = i.elements;
                i.identity(), r[0] = r[5] = r[10] = 1 / this._range;
                var a = t._tempMatrix0;
                return this.transform.worldMatrix.invert(a), ut.multiply(i, a, i), n.setMatrix4x4(Pn.POINTLIGHTMATRIX, i), 
                !0;
            }
            return !1;
        }, n._parse = function(t) {
            e.prototype._parse.call(this, t), this.range = t.range;
        }, a(0, n, "range", function() {
            return this._range;
        }, function(e) {
            this._range = e;
        }), i(t, [ "_tempMatrix0", function() {
            return this._tempMatrix0 = new ut();
        } ]), t;
    }(Fn), ni = function(e) {
        function t() {
            t.__super.call(this, null), this._render = new Vn(this), this._particleSystem = new pn(this);
            var e = this._render._renderElements[0] = new H();
            e.setTransform(this._transform), e.render = this._render, e.setGeometry(this._particleSystem), 
            e.material = bn.defaultMaterial;
        }
        r(t, "laya.d3.core.particleShuriKen.ShuriKenParticle3D", e);
        var n = t.prototype;
        return n._initParticleVelocity = function(e) {
            for (var t = new Ie(), n = e.velocitys, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                t.add(a.key, a.value);
            }
            return t;
        }, n._initParticleColor = function(e) {
            var t = new pe(4, 4), n = e.alphas, i = 0, r = 0;
            for (i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                3 === i && 1 !== a.key && (a.key = 1, console.log("GradientDataColor warning:the forth key is  be force set to 1.")), 
                t.addColorAlpha(a.key, a.value);
            }
            var o = e.rgbs;
            for (i = 0, r = o.length; i < r; i++) {
                var s = o[i], l = s.value;
                3 === i && 1 !== s.key && (s.key = 1, console.log("GradientDataColor warning:the forth key is  be force set to 1.")), 
                t.addColorRGB(s.key, new Ge(l[0], l[1], l[2], 1));
            }
            return t;
        }, n._initParticleSize = function(e) {
            for (var t = new Ie(), n = e.sizes, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                t.add(a.key, a.value);
            }
            return t;
        }, n._initParticleRotation = function(e) {
            for (var t = new Ie(), n = e.angularVelocitys, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                t.add(a.key, a.value / 180 * Math.PI);
            }
            return t;
        }, n._initParticleFrame = function(e) {
            for (var t = new Se(), n = e.frames, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                t.add(a.key, a.value);
            }
            return t;
        }, n._parse = function(e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, e);
            var n, i = Math.PI / 180, r = 0, a = 0, o = this.particleRenderer, s = e.material;
            s && (n = g.getRes(s.path)), o.sharedMaterial = n;
            var l = e.meshPath;
            l && (o.mesh = g.getRes(l)), o.renderMode = e.renderMode, o.stretchedBillboardCameraSpeedScale = e.stretchedBillboardCameraSpeedScale, 
            o.stretchedBillboardSpeedScale = e.stretchedBillboardSpeedScale, o.stretchedBillboardLengthScale = e.stretchedBillboardLengthScale, 
            o.sortingFudge = e.sortingFudge ? e.sortingFudge : 0;
            var h = this.particleSystem;
            h.isPerformanceMode = e.isPerformanceMode, h.duration = e.duration, h.looping = e.looping, 
            h.prewarm = e.prewarm, h.startDelayType = e.startDelayType, h.startDelay = e.startDelay, 
            h.startDelayMin = e.startDelayMin, h.startDelayMax = e.startDelayMax, h.startLifetimeType = e.startLifetimeType, 
            h.startLifetimeConstant = e.startLifetimeConstant, h.startLifeTimeGradient = t._initStartLife(e.startLifetimeGradient), 
            h.startLifetimeConstantMin = e.startLifetimeConstantMin, h.startLifetimeConstantMax = e.startLifetimeConstantMax, 
            h.startLifeTimeGradientMin = t._initStartLife(e.startLifetimeGradientMin), h.startLifeTimeGradientMax = t._initStartLife(e.startLifetimeGradientMax), 
            h.startSpeedType = e.startSpeedType, h.startSpeedConstant = e.startSpeedConstant, 
            h.startSpeedConstantMin = e.startSpeedConstantMin, h.startSpeedConstantMax = e.startSpeedConstantMax, 
            h.threeDStartSize = e.threeDStartSize, h.startSizeType = e.startSizeType, h.startSizeConstant = e.startSizeConstant;
            var c = e.startSizeConstantSeparate, u = h.startSizeConstantSeparate.elements;
            u[0] = c[0], u[1] = c[1], u[2] = c[2], h.startSizeConstantMin = e.startSizeConstantMin, 
            h.startSizeConstantMax = e.startSizeConstantMax;
            var _ = e.startSizeConstantMinSeparate, d = h.startSizeConstantMinSeparate.elements;
            d[0] = _[0], d[1] = _[1], d[2] = _[2];
            var f = e.startSizeConstantMaxSeparate, m = h.startSizeConstantMaxSeparate.elements;
            m[0] = f[0], m[1] = f[1], m[2] = f[2], h.threeDStartRotation = e.threeDStartRotation, 
            h.startRotationType = e.startRotationType, h.startRotationConstant = e.startRotationConstant * i;
            var p = e.startRotationConstantSeparate, T = h.startRotationConstantSeparate.elements;
            T[0] = p[0] * i, T[1] = p[1] * i, T[2] = p[2] * i, h.startRotationConstantMin = e.startRotationConstantMin * i, 
            h.startRotationConstantMax = e.startRotationConstantMax * i;
            var E = e.startRotationConstantMinSeparate, v = h.startRotationConstantMinSeparate.elements;
            v[0] = E[0] * i, v[1] = E[1] * i, v[2] = E[2] * i;
            var S = e.startRotationConstantMaxSeparate, R = h.startRotationConstantMaxSeparate.elements;
            R[0] = S[0] * i, R[1] = S[1] * i, R[2] = S[2] * i, h.randomizeRotationDirection = e.randomizeRotationDirection, 
            h.startColorType = e.startColorType;
            var A = e.startColorConstant, I = h.startColorConstant.elements;
            I[0] = A[0], I[1] = A[1], I[2] = A[2], I[3] = A[3];
            var D = e.startColorConstantMin, y = h.startColorConstantMin.elements;
            y[0] = D[0], y[1] = D[1], y[2] = D[2], y[3] = D[3];
            var M = e.startColorConstantMax, C = h.startColorConstantMax.elements;
            C[0] = M[0], C[1] = M[1], C[2] = M[2], C[3] = M[3], h.gravityModifier = e.gravityModifier, 
            h.simulationSpace = e.simulationSpace, h.scaleMode = e.scaleMode, h.playOnAwake = e.playOnAwake, 
            h.maxParticles = e.maxParticles;
            var x = e.autoRandomSeed;
            null != x && (h.autoRandomSeed = x);
            var O = e.randomSeed;
            null != O && (h.randomSeed[0] = O);
            var L = e.emission, N = h.emission;
            if (L) {
                N.emissionRate = L.emissionRate;
                var V = L.bursts;
                if (V) for (r = 0, a = V.length; r < a; r++) {
                    var P = V[r];
                    N.addBurst(new He(P.time, P.min, P.max));
                }
                N.enbale = L.enable;
            } else N.enbale = !1;
            var w = e.shape;
            if (w) {
                var F;
                switch (w.shapeType) {
                  case 0:
                    var b;
                    F = b = new $t(), b.radius = w.sphereRadius, b.emitFromShell = w.sphereEmitFromShell, 
                    b.randomDirection = w.sphereRandomDirection;
                    break;

                  case 1:
                    var B;
                    F = B = new Xt(), B.radius = w.hemiSphereRadius, B.emitFromShell = w.hemiSphereEmitFromShell, 
                    B.randomDirection = w.hemiSphereRandomDirection;
                    break;

                  case 2:
                    var U;
                    F = U = new on(), U.angle = w.coneAngle * i, U.radius = w.coneRadius, U.length = w.coneLength, 
                    U.emitType = w.coneEmitType, U.randomDirection = w.coneRandomDirection;
                    break;

                  case 3:
                    var G;
                    F = G = new sn(), G.x = w.boxX, G.y = w.boxY, G.z = w.boxZ, G.randomDirection = w.boxRandomDirection;
                    break;

                  case 7:
                    var H;
                    F = H = new nn(), H.radius = w.circleRadius, H.arc = w.circleArc * i, H.emitFromEdge = w.circleEmitFromEdge, 
                    H.randomDirection = w.circleRandomDirection;
                    break;

                  default:
                    var z;
                    F = z = new nn(), z.radius = w.circleRadius, z.arc = w.circleArc * i, z.emitFromEdge = w.circleEmitFromEdge, 
                    z.randomDirection = w.circleRandomDirection;
                }
                F.enable = w.enable, h.shape = F;
            }
            var k = e.velocityOverLifetime;
            if (k) {
                var X, W = k.velocity;
                switch (W.type) {
                  case 0:
                    var Y = W.constant;
                    X = mt.createByConstant(new dn(Y[0], Y[1], Y[2]));
                    break;

                  case 1:
                    X = mt.createByGradient(this._initParticleVelocity(W.gradientX), this._initParticleVelocity(W.gradientY), this._initParticleVelocity(W.gradientZ));
                    break;

                  case 2:
                    var Z = W.constantMin, K = W.constantMax;
                    X = mt.createByRandomTwoConstant(new dn(Z[0], Z[1], Z[2]), new dn(K[0], K[1], K[2]));
                    break;

                  case 3:
                    X = mt.createByRandomTwoGradient(this._initParticleVelocity(W.gradientXMin), this._initParticleVelocity(W.gradientXMax), this._initParticleVelocity(W.gradientYMin), this._initParticleVelocity(W.gradientYMax), this._initParticleVelocity(W.gradientZMin), this._initParticleVelocity(W.gradientZMax));
                }
                var j = new Mt(X);
                j.space = k.space, j.enbale = k.enable, h.velocityOverLifetime = j;
            }
            var q = e.colorOverLifetime;
            if (q) {
                var Q, J = q.color;
                switch (J.type) {
                  case 0:
                    var $ = J.constant;
                    Q = nt.createByConstant(new _n($[0], $[1], $[2], $[3]));
                    break;

                  case 1:
                    Q = nt.createByGradient(this._initParticleColor(J.gradient));
                    break;

                  case 2:
                    var ee = J.constantMin, te = J.constantMax;
                    Q = nt.createByRandomTwoConstant(new _n(ee[0], ee[1], ee[2], ee[3]), new _n(te[0], te[1], te[2], te[3]));
                    break;

                  case 3:
                    Q = nt.createByRandomTwoGradient(this._initParticleColor(J.gradientMin), this._initParticleColor(J.gradientMax));
                }
                var ne = new at(Q);
                ne.enbale = q.enable, h.colorOverLifetime = ne;
            }
            var ie = e.sizeOverLifetime;
            if (ie) {
                var ae, oe = ie.size;
                switch (oe.type) {
                  case 0:
                    ae = oe.separateAxes ? be.createByGradientSeparate(this._initParticleSize(oe.gradientX), this._initParticleSize(oe.gradientY), this._initParticleSize(oe.gradientZ)) : be.createByGradient(this._initParticleSize(oe.gradient));
                    break;

                  case 1:
                    if (oe.separateAxes) {
                        var se = oe.constantMinSeparate, le = oe.constantMaxSeparate;
                        ae = be.createByRandomTwoConstantSeparate(new dn(se[0], se[1], se[2]), new dn(le[0], le[1], le[2]));
                    } else ae = be.createByRandomTwoConstant(oe.constantMin, oe.constantMax);
                    break;

                  case 2:
                    ae = oe.separateAxes ? be.createByRandomTwoGradientSeparate(this._initParticleSize(oe.gradientXMin), this._initParticleSize(oe.gradientYMin), this._initParticleSize(oe.gradientZMin), this._initParticleSize(oe.gradientXMax), this._initParticleSize(oe.gradientYMax), this._initParticleSize(oe.gradientZMax)) : be.createByRandomTwoGradient(this._initParticleSize(oe.gradientMin), this._initParticleSize(oe.gradientMax));
                }
                var he = new ce(ae);
                he.enbale = ie.enable, h.sizeOverLifetime = he;
            }
            var ue = e.rotationOverLifetime;
            if (ue) {
                var _e, de = ue.angularVelocity;
                switch (de.type) {
                  case 0:
                    if (de.separateAxes) {
                        var fe = de.constantSeparate;
                        _e = re.createByConstantSeparate(new dn(fe[0] * i, fe[1] * i, fe[2] * i));
                    } else _e = re.createByConstant(de.constant * i);
                    break;

                  case 1:
                    _e = de.separateAxes ? re.createByGradientSeparate(this._initParticleRotation(de.gradientX), this._initParticleRotation(de.gradientY), this._initParticleRotation(de.gradientZ)) : re.createByGradient(this._initParticleRotation(de.gradient));
                    break;

                  case 2:
                    if (de.separateAxes) {
                        var me = de.constantMinSeparate, pe = de.constantMaxSeparate;
                        _e = re.createByRandomTwoConstantSeparate(new dn(me[0] * i, me[1] * i, me[2] * i), new dn(pe[0] * i, pe[1] * i, pe[2] * i));
                    } else _e = re.createByRandomTwoConstant(de.constantMin * i, de.constantMax * i);
                    break;

                  case 3:
                    de.separateAxes || (_e = re.createByRandomTwoGradient(this._initParticleRotation(de.gradientMin), this._initParticleRotation(de.gradientMax)));
                }
                var Te = new qe(_e);
                Te.enbale = ue.enable, h.rotationOverLifetime = Te;
            }
            var Ee = e.textureSheetAnimation;
            if (Ee) {
                var ve, ge = Ee.frame;
                switch (ge.type) {
                  case 0:
                    ve = Ke.createByConstant(ge.constant);
                    break;

                  case 1:
                    ve = Ke.createByOverTime(this._initParticleFrame(ge.overTime));
                    break;

                  case 2:
                    ve = Ke.createByRandomTwoConstant(ge.constantMin, ge.constantMax);
                    break;

                  case 3:
                    ve = Ke.createByRandomTwoOverTime(this._initParticleFrame(ge.overTimeMin), this._initParticleFrame(ge.overTimeMax));
                }
                var Se, Re = Ee.startFrame;
                switch (Re.type) {
                  case 0:
                    Se = We.createByConstant(Re.constant);
                    break;

                  case 1:
                    Se = We.createByRandomTwoConstant(Re.constantMin, Re.constantMax);
                }
                var Ae = new _t(ve, Se);
                Ae.enable = Ee.enable;
                var Ie = Ee.tiles;
                Ae.tiles = new fn(Ie[0], Ie[1]), Ae.type = Ee.type, Ae.randomRow = Ee.randomRow;
                var De = Ee.rowIndex;
                void 0 !== De && (Ae.rowIndex = De), Ae.cycles = Ee.cycles, h.textureSheetAnimation = Ae;
            }
        }, n._activeHierarchy = function(e) {
            laya.display.Node.prototype._activeHierarchy.call(this, e), this.particleSystem.playOnAwake && this.particleSystem.play();
        }, n._inActiveHierarchy = function(e) {
            laya.display.Node.prototype._inActiveHierarchy.call(this, e), this.particleSystem.isAlive && this.particleSystem.simulate(0, !0);
        }, n.cloneTo = function(e) {
            var t = e, n = t._particleSystem;
            this._particleSystem.cloneTo(n);
            var i = t._render, r = this._render;
            i.sharedMaterials = r.sharedMaterials, i.enable = r.enable, i.renderMode = r.renderMode, 
            i.mesh = r.mesh, i.stretchedBillboardCameraSpeedScale = r.stretchedBillboardCameraSpeedScale, 
            i.stretchedBillboardSpeedScale = r.stretchedBillboardSpeedScale, i.stretchedBillboardLengthScale = r.stretchedBillboardLengthScale, 
            i.sortingFudge = r.sortingFudge, laya.d3.core.Sprite3D.prototype.cloneTo.call(this, e);
        }, n.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._particleSystem.destroy(), this._particleSystem = null);
        }, a(0, n, "particleSystem", function() {
            return this._particleSystem;
        }), a(0, n, "particleRenderer", function() {
            return this._render;
        }), t.__init__ = function() {
            t.SHADERDEFINE_RENDERMODE_BILLBOARD = t.shaderDefines.registerDefine("SPHERHBILLBOARD"), 
            t.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = t.shaderDefines.registerDefine("STRETCHEDBILLBOARD"), 
            t.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = t.shaderDefines.registerDefine("HORIZONTALBILLBOARD"), 
            t.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = t.shaderDefines.registerDefine("VERTICALBILLBOARD"), 
            t.SHADERDEFINE_COLOROVERLIFETIME = t.shaderDefines.registerDefine("COLOROVERLIFETIME"), 
            t.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = t.shaderDefines.registerDefine("RANDOMCOLOROVERLIFETIME"), 
            t.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMECONSTANT"), 
            t.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMECURVE"), 
            t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMERANDOMCONSTANT"), 
            t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMERANDOMCURVE"), 
            t.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = t.shaderDefines.registerDefine("TEXTURESHEETANIMATIONCURVE"), 
            t.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = t.shaderDefines.registerDefine("TEXTURESHEETANIMATIONRANDOMCURVE"), 
            t.SHADERDEFINE_ROTATIONOVERLIFETIME = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIME"), 
            t.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMESEPERATE"), 
            t.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMECONSTANT"), 
            t.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMECURVE"), 
            t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMERANDOMCONSTANTS"), 
            t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMERANDOMCURVES"), 
            t.SHADERDEFINE_SIZEOVERLIFETIMECURVE = t.shaderDefines.registerDefine("SIZEOVERLIFETIMECURVE"), 
            t.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = t.shaderDefines.registerDefine("SIZEOVERLIFETIMECURVESEPERATE"), 
            t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = t.shaderDefines.registerDefine("SIZEOVERLIFETIMERANDOMCURVES"), 
            t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = t.shaderDefines.registerDefine("SIZEOVERLIFETIMERANDOMCURVESSEPERATE"), 
            t.SHADERDEFINE_RENDERMODE_MESH = t.shaderDefines.registerDefine("RENDERMODE_MESH"), 
            t.SHADERDEFINE_SHAPE = t.shaderDefines.registerDefine("SHAPE");
        }, t._initStartLife = function(e) {
            for (var t = new Ie(), n = e.startLifetimes, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                t.add(a.key, a.value);
            }
            return t;
        }, t.SHADERDEFINE_RENDERMODE_BILLBOARD = 0, t.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = 0, 
        t.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = 0, t.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = 0, 
        t.SHADERDEFINE_COLOROVERLIFETIME = 0, t.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = 0, 
        t.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = 0, t.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = 0, 
        t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = 0, t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = 0, 
        t.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = 0, t.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = 0, 
        t.SHADERDEFINE_ROTATIONOVERLIFETIME = 0, t.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = 0, 
        t.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = 0, t.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = 0, 
        t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = 0, t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = 0, 
        t.SHADERDEFINE_SIZEOVERLIFETIMECURVE = 0, t.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = 0, 
        t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = 0, t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = 0, 
        t.SHADERDEFINE_RENDERMODE_MESH = 0, t.SHADERDEFINE_SHAPE = 0, i(t, [ "WORLDPOSITION", function() {
            return this.WORLDPOSITION = $e.propertyNameToID("u_WorldPosition");
        }, "WORLDROTATION", function() {
            return this.WORLDROTATION = $e.propertyNameToID("u_WorldRotation");
        }, "POSITIONSCALE", function() {
            return this.POSITIONSCALE = $e.propertyNameToID("u_PositionScale");
        }, "SIZESCALE", function() {
            return this.SIZESCALE = $e.propertyNameToID("u_SizeScale");
        }, "SCALINGMODE", function() {
            return this.SCALINGMODE = $e.propertyNameToID("u_ScalingMode");
        }, "GRAVITY", function() {
            return this.GRAVITY = $e.propertyNameToID("u_Gravity");
        }, "THREEDSTARTROTATION", function() {
            return this.THREEDSTARTROTATION = $e.propertyNameToID("u_ThreeDStartRotation");
        }, "STRETCHEDBILLBOARDLENGTHSCALE", function() {
            return this.STRETCHEDBILLBOARDLENGTHSCALE = $e.propertyNameToID("u_StretchedBillboardLengthScale");
        }, "STRETCHEDBILLBOARDSPEEDSCALE", function() {
            return this.STRETCHEDBILLBOARDSPEEDSCALE = $e.propertyNameToID("u_StretchedBillboardSpeedScale");
        }, "SIMULATIONSPACE", function() {
            return this.SIMULATIONSPACE = $e.propertyNameToID("u_SimulationSpace");
        }, "CURRENTTIME", function() {
            return this.CURRENTTIME = $e.propertyNameToID("u_CurrentTime");
        }, "VOLVELOCITYCONST", function() {
            return this.VOLVELOCITYCONST = $e.propertyNameToID("u_VOLVelocityConst");
        }, "VOLVELOCITYGRADIENTX", function() {
            return this.VOLVELOCITYGRADIENTX = $e.propertyNameToID("u_VOLVelocityGradientX");
        }, "VOLVELOCITYGRADIENTY", function() {
            return this.VOLVELOCITYGRADIENTY = $e.propertyNameToID("u_VOLVelocityGradientY");
        }, "VOLVELOCITYGRADIENTZ", function() {
            return this.VOLVELOCITYGRADIENTZ = $e.propertyNameToID("u_VOLVelocityGradientZ");
        }, "VOLVELOCITYCONSTMAX", function() {
            return this.VOLVELOCITYCONSTMAX = $e.propertyNameToID("u_VOLVelocityConstMax");
        }, "VOLVELOCITYGRADIENTXMAX", function() {
            return this.VOLVELOCITYGRADIENTXMAX = $e.propertyNameToID("u_VOLVelocityGradientMaxX");
        }, "VOLVELOCITYGRADIENTYMAX", function() {
            return this.VOLVELOCITYGRADIENTYMAX = $e.propertyNameToID("u_VOLVelocityGradientMaxY");
        }, "VOLVELOCITYGRADIENTZMAX", function() {
            return this.VOLVELOCITYGRADIENTZMAX = $e.propertyNameToID("u_VOLVelocityGradientMaxZ");
        }, "VOLSPACETYPE", function() {
            return this.VOLSPACETYPE = $e.propertyNameToID("u_VOLSpaceType");
        }, "COLOROVERLIFEGRADIENTALPHAS", function() {
            return this.COLOROVERLIFEGRADIENTALPHAS = $e.propertyNameToID("u_ColorOverLifeGradientAlphas");
        }, "COLOROVERLIFEGRADIENTCOLORS", function() {
            return this.COLOROVERLIFEGRADIENTCOLORS = $e.propertyNameToID("u_ColorOverLifeGradientColors");
        }, "MAXCOLOROVERLIFEGRADIENTALPHAS", function() {
            return this.MAXCOLOROVERLIFEGRADIENTALPHAS = $e.propertyNameToID("u_MaxColorOverLifeGradientAlphas");
        }, "MAXCOLOROVERLIFEGRADIENTCOLORS", function() {
            return this.MAXCOLOROVERLIFEGRADIENTCOLORS = $e.propertyNameToID("u_MaxColorOverLifeGradientColors");
        }, "SOLSIZEGRADIENT", function() {
            return this.SOLSIZEGRADIENT = $e.propertyNameToID("u_SOLSizeGradient");
        }, "SOLSIZEGRADIENTX", function() {
            return this.SOLSIZEGRADIENTX = $e.propertyNameToID("u_SOLSizeGradientX");
        }, "SOLSIZEGRADIENTY", function() {
            return this.SOLSIZEGRADIENTY = $e.propertyNameToID("u_SOLSizeGradientY");
        }, "SOLSizeGradientZ", function() {
            return this.SOLSizeGradientZ = $e.propertyNameToID("u_SOLSizeGradientZ");
        }, "SOLSizeGradientMax", function() {
            return this.SOLSizeGradientMax = $e.propertyNameToID("u_SOLSizeGradientMax");
        }, "SOLSIZEGRADIENTXMAX", function() {
            return this.SOLSIZEGRADIENTXMAX = $e.propertyNameToID("u_SOLSizeGradientMaxX");
        }, "SOLSIZEGRADIENTYMAX", function() {
            return this.SOLSIZEGRADIENTYMAX = $e.propertyNameToID("u_SOLSizeGradientMaxY");
        }, "SOLSizeGradientZMAX", function() {
            return this.SOLSizeGradientZMAX = $e.propertyNameToID("u_SOLSizeGradientMaxZ");
        }, "ROLANGULARVELOCITYCONST", function() {
            return this.ROLANGULARVELOCITYCONST = $e.propertyNameToID("u_ROLAngularVelocityConst");
        }, "ROLANGULARVELOCITYCONSTSEPRARATE", function() {
            return this.ROLANGULARVELOCITYCONSTSEPRARATE = $e.propertyNameToID("u_ROLAngularVelocityConstSeprarate");
        }, "ROLANGULARVELOCITYGRADIENT", function() {
            return this.ROLANGULARVELOCITYGRADIENT = $e.propertyNameToID("u_ROLAngularVelocityGradient");
        }, "ROLANGULARVELOCITYGRADIENTX", function() {
            return this.ROLANGULARVELOCITYGRADIENTX = $e.propertyNameToID("u_ROLAngularVelocityGradientX");
        }, "ROLANGULARVELOCITYGRADIENTY", function() {
            return this.ROLANGULARVELOCITYGRADIENTY = $e.propertyNameToID("u_ROLAngularVelocityGradientY");
        }, "ROLANGULARVELOCITYGRADIENTZ", function() {
            return this.ROLANGULARVELOCITYGRADIENTZ = $e.propertyNameToID("u_ROLAngularVelocityGradientZ");
        }, "ROLANGULARVELOCITYCONSTMAX", function() {
            return this.ROLANGULARVELOCITYCONSTMAX = $e.propertyNameToID("u_ROLAngularVelocityConstMax");
        }, "ROLANGULARVELOCITYCONSTMAXSEPRARATE", function() {
            return this.ROLANGULARVELOCITYCONSTMAXSEPRARATE = $e.propertyNameToID("u_ROLAngularVelocityConstMaxSeprarate");
        }, "ROLANGULARVELOCITYGRADIENTMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTMAX = $e.propertyNameToID("u_ROLAngularVelocityGradientMax");
        }, "ROLANGULARVELOCITYGRADIENTXMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTXMAX = $e.propertyNameToID("u_ROLAngularVelocityGradientMaxX");
        }, "ROLANGULARVELOCITYGRADIENTYMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTYMAX = $e.propertyNameToID("u_ROLAngularVelocityGradientMaxY");
        }, "ROLANGULARVELOCITYGRADIENTZMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTZMAX = $e.propertyNameToID("u_ROLAngularVelocityGradientMaxZ");
        }, "ROLANGULARVELOCITYGRADIENTWMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTWMAX = $e.propertyNameToID("u_ROLAngularVelocityGradientMaxW");
        }, "TEXTURESHEETANIMATIONCYCLES", function() {
            return this.TEXTURESHEETANIMATIONCYCLES = $e.propertyNameToID("u_TSACycles");
        }, "TEXTURESHEETANIMATIONSUBUVLENGTH", function() {
            return this.TEXTURESHEETANIMATIONSUBUVLENGTH = $e.propertyNameToID("u_TSASubUVLength");
        }, "TEXTURESHEETANIMATIONGRADIENTUVS", function() {
            return this.TEXTURESHEETANIMATIONGRADIENTUVS = $e.propertyNameToID("u_TSAGradientUVs");
        }, "TEXTURESHEETANIMATIONGRADIENTMAXUVS", function() {
            return this.TEXTURESHEETANIMATIONGRADIENTMAXUVS = $e.propertyNameToID("u_TSAMaxGradientUVs");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(wn.shaderDefines);
        } ]), t;
    }(wn), ii = function(e) {
        function t(e, n) {
            t.__super.call(this, n), this._meshFilter = new pt(this), this._render = new Ln(this), 
            e && (this._meshFilter.sharedMesh = e);
        }
        r(t, "laya.d3.core.MeshSprite3D", e);
        var n = t.prototype;
        return n._parse = function(e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, e);
            var t = this.meshRenderer, n = e.lightmapIndex;
            null != n && (t.lightmapIndex = n);
            var i = e.lightmapScaleOffset;
            i && (t.lightmapScaleOffset = new _n(i[0], i[1], i[2], i[3])), void 0 != e.meshPath && (this.meshFilter.sharedMesh = g.getRes(e.meshPath)), 
            void 0 != e.enableRender && (this.meshRenderer.enable = e.enableRender);
            var r = e.materials;
            if (r) {
                var a = t.sharedMaterials, o = r.length;
                a.length = o;
                for (var s = 0; s < o; s++) a[s] = g.getRes(r[s].path);
                t.sharedMaterials = a;
            }
        }, n._addToInitStaticBatchManager = function() {
            mn.instance._addBatchSprite(this);
        }, n.cloneTo = function(e) {
            var t = e;
            t._meshFilter.sharedMesh = this._meshFilter.sharedMesh;
            var n = this._render, i = t._render;
            i.enable = n.enable, i.sharedMaterials = n.sharedMaterials, i.castShadow = n.castShadow;
            var r = n.lightmapScaleOffset;
            r && (i.lightmapScaleOffset = r.clone()), i.lightmapIndex = n.lightmapIndex, i.receiveShadow = n.receiveShadow, 
            i.sortingFudge = n.sortingFudge, laya.d3.core.Sprite3D.prototype.cloneTo.call(this, e);
        }, n.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._meshFilter.destroy());
        }, a(0, n, "meshFilter", function() {
            return this._meshFilter;
        }), a(0, n, "meshRenderer", function() {
            return this._render;
        }), t.__init__ = function() {
            t.SHADERDEFINE_UV0 = t.shaderDefines.registerDefine("UV"), t.SHADERDEFINE_COLOR = t.shaderDefines.registerDefine("COLOR"), 
            t.SHADERDEFINE_UV1 = t.shaderDefines.registerDefine("UV1"), Pe._registerManager(mn.instance), 
            ae._registerManager(un.instance);
        }, t.SHADERDEFINE_UV0 = 0, t.SHADERDEFINE_COLOR = 0, t.SHADERDEFINE_UV1 = 0, i(t, [ "shaderDefines", function() {
            return this.shaderDefines = new Be(wn.shaderDefines);
        } ]), t;
    }(wn), ri = function(e) {
        function t() {
            this._direction = null, t.__super.call(this), this._direction = new dn();
        }
        r(t, "laya.d3.core.light.DirectionLight", e);
        var n = t.prototype;
        return n._initShadow = function() {
            if (this._shadow) this._parallelSplitShadowMap = new rt(), this.scene.parallelSplitShadowMaps.push(this._parallelSplitShadowMap), 
            this.transform.worldMatrix.getForward(this._direction), dn.normalize(this._direction, this._direction), 
            this._parallelSplitShadowMap.setInfo(this.scene, this._shadowFarPlane, this._direction, this._shadowMapSize, this._shadowMapCount, this._shadowMapPCFType); else {
                var e = this._scene._defineDatas, t = this.scene.parallelSplitShadowMaps;
                t.splice(t.indexOf(this._parallelSplitShadowMap), 1), this._parallelSplitShadowMap.disposeAllRenderTarget(), 
                this._parallelSplitShadowMap = null, e.remove(Pn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Pn.SHADERDEFINE_SHADOW_PSSM2), 
                e.remove(Pn.SHADERDEFINE_SHADOW_PSSM3);
            }
        }, n._onActive = function() {
            e.prototype._onActive.call(this), this._shadow && this._initShadow(), this._lightmapBakedType !== Fn.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.add(Pn.SHADERDEFINE_DIRECTIONLIGHT);
        }, n._onInActive = function() {
            e.prototype._onInActive.call(this), this._lightmapBakedType !== Fn.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.remove(Pn.SHADERDEFINE_DIRECTIONLIGHT);
        }, n._prepareToScene = function() {
            var e = this._scene;
            if (e.enableLight && this.activeInHierarchy) {
                e._defineDatas;
                var t = e._shaderValues;
                return dn.scale(this.color, this._intensity, this._intensityColor), t.setVector(Pn.LIGHTDIRCOLOR, this._intensityColor), 
                this.transform.worldMatrix.getForward(this._direction), dn.normalize(this._direction, this._direction), 
                t.setVector(Pn.LIGHTDIRECTION, this._direction), !0;
            }
            return !1;
        }, a(0, n, "shadow", e.prototype._$get_shadow, function(e) {
            this._shadow !== e && (this._shadow = e, this.scene && this._initShadow());
        }), t;
    }(Fn), ai = function(e) {
        function t(e, n) {
            t.__super.call(this, n), this._meshFilter = new pt(this), this._render = new Qn(this), 
            e && (this._meshFilter.sharedMesh = e);
        }
        r(t, "laya.d3.core.SkinnedMeshSprite3D", e);
        var n = t.prototype;
        return n._parse = function(e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, e);
            var t = this.skinnedMeshRenderer, n = e.lightmapIndex;
            null != n && (t.lightmapIndex = n);
            var i = e.lightmapScaleOffset;
            i && (t.lightmapScaleOffset = new _n(i[0], i[1], i[2], i[3]));
            var r;
            if (r = e.meshPath) {
                var a = g.getRes(r);
                a && (this.meshFilter.sharedMesh = a);
            }
            var o = e.materials;
            if (o) {
                var s = t.sharedMaterials, l = o.length;
                s.length = l;
                for (var h = 0; h < l; h++) s[h] = g.getRes(o[h].path);
                t.sharedMaterials = s;
            }
            var c = e.rootBone;
            c && t._setRootBone(c);
            var u = e.boundBox, _ = u.min, d = u.max, f = new ne(new dn(_[0], _[1], _[2]), new dn(d[0], d[1], d[2]));
            t.localBoundBox = f;
            var m = e.boundSphere;
            if (m) {
                var p = m.center, T = new k(new dn(p[0], p[1], p[2]), m.radius);
                t.localBoundSphere = T;
            }
        }, n._changeHierarchyAnimator = function(t) {
            var n = this._hierarchyAnimator;
            n && n.unLinkSprite3DToAvatarNode(this), e.prototype._changeHierarchyAnimator.call(this, t), 
            t && this.skinnedMeshRenderer._rootBone && t.linkSprite3DToAvatarNode(this.skinnedMeshRenderer._rootBone, this), 
            this.skinnedMeshRenderer._setCacheAnimator(t);
        }, n._changeAnimatorAvatar = function(e) {
            this.skinnedMeshRenderer._setCacheAvatar(e);
        }, n.cloneTo = function(e) {
            var t = e;
            t.meshFilter.sharedMesh = this.meshFilter.sharedMesh;
            var n = this._render, i = t._render;
            i.enable = n.enable, i.sharedMaterials = n.sharedMaterials, i.castShadow = n.castShadow;
            var r = n.lightmapScaleOffset;
            r && (i.lightmapScaleOffset = r.clone()), i.receiveShadow = n.receiveShadow, i.sortingFudge = n.sortingFudge, 
            i._rootBone = n._rootBone;
            var a = n.localBoundSphere;
            a && (i.localBoundSphere = a.clone());
            var o = n.localBoundBox;
            o && (i.localBoundBox = o.clone()), laya.d3.core.Sprite3D.prototype.cloneTo.call(this, e);
        }, n.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._meshFilter.destroy());
        }, a(0, n, "meshFilter", function() {
            return this._meshFilter;
        }), a(0, n, "skinnedMeshRenderer", function() {
            return this._render;
        }), t.__init__ = function() {
            t.SHADERDEFINE_BONE = t.shaderDefines.registerDefine("BONE");
        }, t.SHADERDEFINE_BONE = 0, i(t, [ "BONES", function() {
            return this.BONES = $e.propertyNameToID("u_Bones");
        }, "shaderDefines", function() {
            return this.shaderDefines = new Be(ii.shaderDefines);
        } ]), t;
    }(wn), oi = function(e) {
        function t(e, n, i, r, a, o, s, l) {
            this._terrainFilter = null, t.__super.call(this, l), this._terrainFilter = new zt(this, e, n, i, r, a, o, s), 
            this._render = new Cn(this);
        }
        r(t, "laya.d3.terrain.TerrainChunk", e);
        var n = t.prototype;
        return n.buildRenderElementAndMaterial = function(e, t, n, i, r, a, o, s, l, h, c, u, _, d, f, m, p, T) {
            void 0 === c && (c = 1), void 0 === u && (u = 1), void 0 === _ && (_ = 1), void 0 === d && (d = 1), 
            void 0 === f && (f = 1), void 0 === m && (m = 1), void 0 === p && (p = 1), void 0 === T && (T = 1);
            var E = new Yn();
            l && (E.diffuseColor = l), s && (E.ambientColor = s), h && (E.specularColor = h), 
            E.splatAlphaTexture = g.getRes(n), E.normalTexture = t ? g.getRes(t) : null, E.diffuseTexture1 = i ? g.getRes(i) : null, 
            E.diffuseTexture2 = r ? g.getRes(r) : null, E.diffuseTexture3 = a ? g.getRes(a) : null, 
            E.diffuseTexture4 = o ? g.getRes(o) : null, E.setDiffuseScale1(c, u), E.setDiffuseScale2(_, d), 
            E.setDiffuseScale3(f, m), E.setDiffuseScale4(p, T), E.setDetailNum(e), 0 != this._render._renderElements.length && (E.renderMode = 2);
            var v = new H();
            v.setTransform(this._transform), v.render = this._render, v.setGeometry(this._terrainFilter), 
            this._render._renderElements.push(v), this._render.sharedMaterial = E;
        }, n.cloneTo = function(e) {
            console.log("Terrain Chunk can't clone");
        }, n.destroy = function(t) {
            void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t), 
            this._terrainFilter.destroy(), this._terrainFilter = null);
        }, a(0, n, "terrainFilter", function() {
            return this._terrainFilter;
        }), a(0, n, "terrainRender", function() {
            return this._render;
        }), t;
    }(wn), si = function(e) {
        function t() {
            this._direction = null, this._spotAngle = NaN, this._range = NaN, t.__super.call(this), 
            this._spotAngle = 30, this._range = 10, this._direction = new dn();
        }
        r(t, "laya.d3.core.light.SpotLight", e);
        var n = t.prototype;
        return n._onActive = function() {
            e.prototype._onActive.call(this), this._lightmapBakedType !== Fn.LIGHTMAPBAKEDTYPE_BAKED && this.scene._defineDatas.add(Pn.SHADERDEFINE_SPOTLIGHT);
        }, n._onInActive = function() {
            e.prototype._onInActive.call(this), this._lightmapBakedType !== Fn.LIGHTMAPBAKEDTYPE_BAKED && this.scene._defineDatas.remove(Pn.SHADERDEFINE_SPOTLIGHT);
        }, n._prepareToScene = function() {
            var e = this._scene;
            if (e.enableLight && this.activeInHierarchy) {
                e._defineDatas;
                var t = e._shaderValues;
                return dn.scale(this.color, this._intensity, this._intensityColor), t.setVector(Pn.SPOTLIGHTCOLOR, this._intensityColor), 
                t.setVector(Pn.SPOTLIGHTPOS, this.transform.position), this.transform.worldMatrix.getForward(this._direction), 
                dn.normalize(this._direction, this._direction), t.setVector(Pn.SPOTLIGHTDIRECTION, this._direction), 
                t.setNumber(Pn.SPOTLIGHTRANGE, this.range), t.setNumber(Pn.SPOTLIGHTSPOTANGLE, this.spotAngle * Math.PI / 180), 
                !0;
            }
            return !1;
        }, n._parse = function(t) {
            e.prototype._parse.call(this, t), this.range = t.range, this.spotAngle = t.spotAngle;
        }, a(0, n, "spotAngle", function() {
            return this._spotAngle;
        }, function(e) {
            this._spotAngle = Math.max(Math.min(e, 180), 0);
        }), a(0, n, "range", function() {
            return this._range;
        }, function(e) {
            this._range = e;
        }), i(t, [ "_tempMatrix0", function() {
            return this._tempMatrix0 = new ut();
        }, "_tempMatrix1", function() {
            return this._tempMatrix1 = new ut();
        } ]), t;
    }(Fn), li = (function(e) {
        function t(e, n) {
            this._geometryFilter = null, void 0 === e && (e = 2), t.__super.call(this, n), this._geometryFilter = new kt(this, e), 
            this._render = new xn(this), this._changeRenderObjects(this._render, 0, kn.defaultMaterial);
        }
        r(t, "laya.d3.core.pixelLine.PixelLineSprite3D", wn);
        var n = t.prototype;
        n._changeRenderObjects = function(e, t, n) {
            var i = this._render._renderElements;
            n || (n = kn.defaultMaterial);
            var r = i[t];
            r || (r = i[t] = new H()), r.setTransform(this._transform), r.setGeometry(this._geometryFilter), 
            r.render = this._render, r.material = n;
        }, n.addLine = function(e, t, n, i) {
            if (this._geometryFilter._lineCount === this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount has equal with maxLineCount.";
            this._geometryFilter._updateLineData(this._geometryFilter._lineCount++, e, t, n, i);
        }, n.addLines = function(e) {
            var t = this._geometryFilter._lineCount, n = e.length;
            if (t + n > this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.";
            this._geometryFilter._updateLineDatas(t, e), this._geometryFilter._lineCount += n;
        }, n.removeLine = function(e) {
            if (!(e < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._removeLineData(e);
        }, n.setLine = function(e, t, n, i, r) {
            if (!(e < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._updateLineData(e, t, n, i, r);
        }, n.getLine = function(e, t) {
            if (!(e < this.lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._getLineData(e, t);
        }, n.clear = function() {
            this._geometryFilter._lineCount = 0;
        }, a(0, n, "maxLineCount", function() {
            return this._geometryFilter._maxLineCount;
        }, function(e) {
            this._geometryFilter._resizeLineData(e), this._geometryFilter._lineCount = Math.min(this._geometryFilter._lineCount, e);
        }), a(0, n, "pixelLineRenderer", function() {
            return this._render;
        }), a(0, n, "lineCount", function() {
            return this._geometryFilter._lineCount;
        }, function(e) {
            if (e > this.maxLineCount) throw "PixelLineSprite3D: lineCount can't large than maxLineCount";
            this._geometryFilter._lineCount = e;
        });
    }(), function(e) {
        function t(e, n, i) {
            this._updateViewMatrix = !0, this.enableRender = !0, void 0 === e && (e = 0), void 0 === n && (n = .3), 
            void 0 === i && (i = 1e3), this._viewMatrix = new ut(), this._projectionMatrix = new ut(), 
            this._projectionViewMatrix = new ut(), this._projectionViewMatrixNoTranslateScale = new ut(), 
            this._viewport = new Ct(0, 0, 0, 0), this._normalizedViewport = new Ct(0, 0, 1, 1), 
            this._aspectRatio = e, this._boundFrustum = new Ue(ut.DEFAULT), D.isConchApp && (this._boundFrustumBuffer = new Float32Array(24)), 
            t.__super.call(this, n, i), this.transform.on("transformchanged", this, this._onTransformChanged);
        }
        r(t, "laya.d3.core.Camera", e);
        var o = t.prototype;
        return o._onTransformChanged = function(e) {
            (e &= 64) && (this._updateViewMatrix = !0);
        }, o._calculationViewport = function(e, t, n) {
            this._viewport.x = e.x * t, this._viewport.y = e.y * n, this._viewport.width = Math.min(Math.max(e.width * t, 0), t), 
            this._viewport.height = Math.min(Math.max(e.height * n, 0), n);
        }, o._parse = function(t) {
            e.prototype._parse.call(this, t);
            var n = t.viewport;
            this.normalizedViewport = new Ct(n[0], n[1], n[2], n[3]);
        }, o._calculateProjectionMatrix = function() {
            if (!this._useUserProjectionMatrix) if (this._orthographic) {
                var e = this.orthographicVerticalSize * this.aspectRatio * .5, t = .5 * this.orthographicVerticalSize;
                ut.createOrthoOffCenterRH(-e, e, -t, t, this.nearPlane, this.farPlane, this._projectionMatrix);
            } else ut.createPerspective(3.1416 * this.fieldOfView / 180, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);
        }, o.render = function(e, t) {
            var n = E.instance, i = we._instance, r = i.scene = this._scene;
            if (r) {
                if (r.parallelSplitShadowMaps[0]) {
                    vt.setRuntimeValueMode(!1);
                    var a = r.parallelSplitShadowMaps[0];
                    a._calcAllLightCameraInfo(this), r._defineDatas.add(Pn.SHADERDEFINE_CAST_SHADOW);
                    for (var o = 0, s = a.shadowMapCount; o < s; o++) {
                        var l = a.cameras[o];
                        i.camera = l, i.projectionViewMatrix = l.projectionViewMatrix, q.renderObjectCulling(l, r, i, r._castShadowRenders);
                        var h = a.cameras[o + 1].renderTarget;
                        h.start(), i.camera = l, i.viewport = l.viewport, l._prepareCameraToRender(), l._prepareCameraViewProject(l.viewMatrix, l.projectionMatrix, l._projectionViewMatrixNoTranslateScale), 
                        r._clear(n, i);
                        r._opaqueQueue._render(i, !1), h.end();
                    }
                    r._defineDatas.remove(Pn.SHADERDEFINE_CAST_SHADOW), vt.setRuntimeValueMode(!0);
                }
                i.camera = this, r._preRenderScript();
                var c, u;
                c = i.viewMatrix = this.viewMatrix;
                var _ = this._renderTarget;
                _ ? (_.start(), ut.multiply(Wn._invertYScaleMatrix, this._projectionMatrix, Wn._invertYProjectionMatrix), 
                ut.multiply(Wn._invertYScaleMatrix, this.projectionViewMatrix, Wn._invertYProjectionViewMatrix), 
                u = i.projectionMatrix = Wn._invertYProjectionMatrix, i.projectionViewMatrix = Wn._invertYProjectionViewMatrix) : (u = i.projectionMatrix = this._projectionMatrix, 
                i.projectionViewMatrix = this.projectionViewMatrix), i.viewport = this.viewport, 
                this._prepareCameraToRender(), this._prepareCameraViewProject(c, u, this._projectionViewMatrixNoTranslateScale), 
                r._preCulling(i, this), r._clear(n, i), r._renderScene(n, i, e, t), r._postRenderScript(), 
                _ && _.end();
            }
        }, o.viewportPointToRay = function(e, t) {
            ue.calculateCursorRay(e, this.viewport, this._projectionMatrix, this.viewMatrix, null, t);
        }, o.normalizedViewportPointToRay = function(e, n) {
            var i = t._tempVector20, r = this.viewport, a = e.elements, o = i.elements;
            o[0] = a[0] * r.width, o[1] = a[1] * r.height, ue.calculateCursorRay(i, this.viewport, this._projectionMatrix, this.viewMatrix, null, n);
        }, o.worldToViewportPoint = function(e, t) {
            ut.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix), 
            this.viewport.project(e, this._projectionViewMatrix, t);
            var i = t.elements;
            i[0] = i[0] / n.stage.clientScaleX, i[1] = i[1] / n.stage.clientScaleY;
        }, o.worldToNormalizedViewportPoint = function(e, t) {
            ut.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix), 
            this.normalizedViewport.project(e, this._projectionViewMatrix, t);
            var i = t.elements;
            i[0] = i[0] / n.stage.clientScaleX, i[1] = i[1] / n.stage.clientScaleY;
        }, o.convertScreenCoordToOrthographicCoord = function(e, t) {
            if (this._orthographic) {
                var n = we.clientWidth, i = we.clientHeight, r = this.orthographicVerticalSize * this.aspectRatio / n, a = this.orthographicVerticalSize / i, o = e.elements, s = t.elements;
                return s[0] = (-n / 2 + o[0]) * r, s[1] = (i / 2 - o[1]) * a, s[2] = (this.nearPlane - this.farPlane) * (o[2] + 1) / 2 - this.nearPlane, 
                dn.transformCoordinate(t, this.transform.worldMatrix, t), !0;
            }
            return !1;
        }, o.destroy = function(t) {
            void 0 === t && (t = !0), this.transform.off("transformchanged", this, this._onTransformChanged), 
            e.prototype.destroy.call(this, t);
        }, a(0, o, "projectionViewMatrix", function() {
            return ut.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix), 
            this._projectionViewMatrix;
        }), a(0, o, "aspectRatio", function() {
            if (0 === this._aspectRatio) {
                var e = this.viewport;
                return e.width / e.height;
            }
            return this._aspectRatio;
        }, function(e) {
            if (e < 0) throw new Error("Camera: the aspect ratio has to be a positive real number.");
            this._aspectRatio = e, this._calculateProjectionMatrix();
        }), a(0, o, "boundFrustum", function() {
            if (this._boundFrustum.matrix = this.projectionViewMatrix, D.isConchApp) {
                var e = this._boundFrustum.near, t = this._boundFrustum.far, n = this._boundFrustum.left, i = this._boundFrustum.right, r = this._boundFrustum.top, a = this._boundFrustum.bottom, o = e.normal.elements, s = t.normal.elements, l = n.normal.elements, h = i.normal.elements, c = r.normal.elements, u = a.normal.elements, _ = this._boundFrustumBuffer;
                _[0] = o[0], _[1] = o[1], _[2] = o[2], _[3] = e.distance, _[4] = s[0], _[5] = s[1], 
                _[6] = s[2], _[7] = t.distance, _[8] = l[0], _[9] = l[1], _[10] = l[2], _[11] = n.distance, 
                _[12] = h[0], _[13] = h[1], _[14] = h[2], _[15] = i.distance, _[16] = c[0], _[17] = c[1], 
                _[18] = c[2], _[19] = r.distance, _[20] = u[0], _[21] = u[1], _[22] = u[2], _[23] = a.distance;
            }
            return this._boundFrustum;
        }), a(0, o, "viewport", function() {
            var e = 0, t = 0;
            return this._renderTarget ? (e = this._renderTarget.width, t = this._renderTarget.height) : (e = we.clientWidth, 
            t = we.clientHeight), e === this._canvasWidth && t === this._canvasHeight || (this._calculationViewport(this._normalizedViewport, e, t), 
            this._canvasWidth = e, this._canvasHeight = t), this._viewport;
        }, function(e) {
            var t = 0, n = 0;
            this._renderTarget ? (t = this._canvasWidth = this._renderTarget.width, n = this._canvasHeight = this._renderTarget.height) : (t = this._canvasWidth = we.clientWidth, 
            n = this._canvasHeight = we.clientHeight), this._normalizedViewport.x = e.x / t, 
            this._normalizedViewport.y = e.y / n, this._normalizedViewport.width = e.width / t, 
            this._normalizedViewport.height = e.height / n, this._calculationViewport(this._normalizedViewport, t, n), 
            this._calculateProjectionMatrix();
        }), a(0, o, "normalizedViewport", function() {
            return this._normalizedViewport;
        }, function(e) {
            var t = 0, n = 0;
            this._renderTarget ? (t = this._canvasWidth = this._renderTarget.width, n = this._canvasHeight = this._renderTarget.height) : (t = this._canvasWidth = we.clientWidth, 
            n = this._canvasHeight = we.clientHeight), this._normalizedViewport = e, this._calculationViewport(e, t, n), 
            this._calculateProjectionMatrix();
        }), a(0, o, "projectionMatrix", function() {
            return this._projectionMatrix;
        }, function(e) {
            this._projectionMatrix = e, this._useUserProjectionMatrix = !0;
        }), a(0, o, "viewMatrix", function() {
            if (this._updateViewMatrix) {
                var e = this.transform.scale, t = e.x, n = e.y, i = e.z, r = this._viewMatrix.elements;
                this.transform.worldMatrix.cloneTo(this._viewMatrix), r[0] /= t, r[1] /= t, r[2] /= t, 
                r[4] /= n, r[5] /= n, r[6] /= n, r[8] /= i, r[9] /= i, r[10] /= i, this._viewMatrix.invert(this._viewMatrix), 
                this._updateViewMatrix = !1;
            }
            return this._viewMatrix;
        }), i(t, [ "_tempVector20", function() {
            return this._tempVector20 = new fn();
        } ]), t;
    }(Wn));
    !function(e) {
        function t(e, n, i) {
            this._minX = NaN, this._minZ = NaN, this._cellSize = null, this._heightMap = null, 
            t.__super.call(this, e, i), this._heightMap = n, this._cellSize = new fn();
        }
        r(t, "laya.d3.core.MeshTerrainSprite3D", ii);
        var n = t.prototype;
        n._disableRotation = function() {
            var e = this.transform.rotation;
            e.elements[0] = 0, e.elements[1] = 0, e.elements[2] = 0, e.elements[3] = 1, this.transform.rotation = e;
        }, n._getScaleX = function() {
            var e = this.transform.worldMatrix.elements, t = e[0], n = e[1], i = e[2];
            return Math.sqrt(t * t + n * n + i * i);
        }, n._getScaleZ = function() {
            var e = this.transform.worldMatrix.elements, t = e[8], n = e[9], i = e[10];
            return Math.sqrt(t * t + n * n + i * i);
        }, n._initCreateFromMesh = function(e, t) {
            this._heightMap = oe.creatFromMesh(this.meshFilter.sharedMesh, e, t, this._cellSize);
            var n = this.meshFilter.sharedMesh.boundingBox, i = n.min;
            n.max;
            this._minX = i.x, this._minZ = i.z;
        }, n._initCreateFromMeshHeightMap = function(e, t, n) {
            var i = this.meshFilter.sharedMesh.boundingBox;
            this._heightMap = oe.createFromImage(e, t, n), this._computeCellSize(i);
            var r = i.min;
            i.max;
            this._minX = r.x, this._minZ = r.z;
        }, n._computeCellSize = function(e) {
            var t = e.min, n = e.max, i = t.x, r = t.z, a = n.x - i, o = n.z - r;
            this._cellSize.elements[0] = a / (this._heightMap.width - 1), this._cellSize.elements[1] = o / (this._heightMap.height - 1);
        }, n._update = function(e) {
            this._disableRotation();
        }, n.getHeight = function(e, n) {
            t._tempVector3.elements[0] = e, t._tempVector3.elements[1] = 0, t._tempVector3.elements[2] = n, 
            this._disableRotation();
            var i = this.transform.worldMatrix;
            i.invert(t._tempMatrix4x4), dn.transformCoordinate(t._tempVector3, t._tempMatrix4x4, t._tempVector3), 
            e = t._tempVector3.elements[0], n = t._tempVector3.elements[2];
            var r = (e - this._minX) / this._cellSize.x, a = (n - this._minZ) / this._cellSize.y, o = Math.floor(a), s = Math.floor(r), l = r - s, h = a - o, c = NaN, u = NaN, _ = i.elements, d = _[4], f = _[5], m = _[6], p = Math.sqrt(d * d + f * f + m * m), T = _[13], E = this._heightMap.getHeight(o, s + 1), v = this._heightMap.getHeight(o + 1, s);
            if (isNaN(E) || isNaN(v)) return NaN;
            if (l + h <= 1) {
                var g = this._heightMap.getHeight(o, s);
                return isNaN(g) ? NaN : (c = E - g, u = v - g, (g + l * c + h * u) * p + T);
            }
            var S = this._heightMap.getHeight(o + 1, s + 1);
            return isNaN(S) ? NaN : (c = v - S, u = E - S, (S + (1 - l) * c + (1 - h) * u) * p + T);
        }, a(0, n, "minX", function() {
            var e = this.transform.worldMatrix.elements;
            return this._minX * this._getScaleX() + e[12];
        }), a(0, n, "width", function() {
            return (this._heightMap.width - 1) * this._cellSize.x * this._getScaleX();
        }), a(0, n, "minZ", function() {
            var e = this.transform.worldMatrix.elements;
            return this._minZ * this._getScaleZ() + e[14];
        }), a(0, n, "depth", function() {
            return (this._heightMap.height - 1) * this._cellSize.y * this._getScaleZ();
        }), t.createFromMesh = function(e, n, i, r) {
            var a = new t(e, null, r);
            return a._initCreateFromMesh(n, i), a;
        }, t.createFromMeshAndHeightMap = function(e, n, i, r, a) {
            var o = new t(e, null, a);
            return o._initCreateFromMeshHeightMap(n, i, r), o;
        }, i(t, [ "_tempVector3", function() {
            return this._tempVector3 = new dn();
        }, "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new ut();
        } ]);
    }();
}(window, document, Laya);