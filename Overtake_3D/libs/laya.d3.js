!function(e, t) {
    "use strict";
    class r {
        constructor() {}
        static isZero(e) {
            return Math.abs(e) < r.zeroTolerance;
        }
        static nearEqual(e, t) {
            return !!r.isZero(e - t);
        }
        static fastInvSqrt(e) {
            return r.isZero(e) ? e : 1 / Math.sqrt(e);
        }
    }
    r.zeroTolerance = 1e-6, r.MaxValue = 3.40282347e38, r.MinValue = -3.40282347e38;
    class i {
        constructor(e = 0, t = 0) {
            this.x = e, this.y = t;
        }
        setValue(e, t) {
            this.x = e, this.y = t;
        }
        static scale(e, t, r) {
            r.x = e.x * t, r.y = e.y * t;
        }
        fromArray(e, t = 0) {
            this.x = e[t + 0], this.y = e[t + 1];
        }
        cloneTo(e) {
            var t = e;
            t.x = this.x, t.y = this.y;
        }
        static dot(e, t) {
            return e.x * t.x + e.y * t.y;
        }
        static normalize(e, t) {
            var r = e.x, i = e.y, a = r * r + i * i;
            a > 0 && (a = 1 / Math.sqrt(a), t.x = r * a, t.y = i * a);
        }
        static scalarLength(e) {
            var t = e.x, r = e.y;
            return Math.sqrt(t * t + r * r);
        }
        clone() {
            var e = new i();
            return this.cloneTo(e), e;
        }
        forNativeElement(e = null) {
            e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y) : this.elements = new Float32Array([ this.x, this.y ]), 
            i.rewriteNumProperty(this, "x", 0), i.rewriteNumProperty(this, "y", 1);
        }
        static rewriteNumProperty(e, t, r) {
            Object.defineProperty(e, t, {
                get: function() {
                    return this.elements[r];
                },
                set: function(e) {
                    this.elements[r] = e;
                }
            });
        }
    }
    i.ZERO = new i(0, 0), i.ONE = new i(1, 1);
    class a {
        constructor(e = 0, t = 0, r = 0, i = 0) {
            this.x = e, this.y = t, this.z = r, this.w = i;
        }
        setValue(e, t, r, i) {
            this.x = e, this.y = t, this.z = r, this.w = i;
        }
        fromArray(e, t = 0) {
            this.x = e[t + 0], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3];
        }
        cloneTo(e) {
            var t = e;
            t.x = this.x, t.y = this.y, t.z = this.z, t.w = this.w;
        }
        clone() {
            var e = new a();
            return this.cloneTo(e), e;
        }
        static lerp(e, t, r, i) {
            var a = e.x, n = e.y, s = e.z, o = e.w;
            i.x = a + r * (t.x - a), i.y = n + r * (t.y - n), i.z = s + r * (t.z - s), i.w = o + r * (t.w - o);
        }
        static transformByM4x4(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = e.w, o = t.elements;
            r.x = i * o[0] + a * o[4] + n * o[8] + s * o[12], r.y = i * o[1] + a * o[5] + n * o[9] + s * o[13], 
            r.z = i * o[2] + a * o[6] + n * o[10] + s * o[14], r.w = i * o[3] + a * o[7] + n * o[11] + s * o[15];
        }
        static equals(e, t) {
            return r.nearEqual(Math.abs(e.x), Math.abs(t.x)) && r.nearEqual(Math.abs(e.y), Math.abs(t.y)) && r.nearEqual(Math.abs(e.z), Math.abs(t.z)) && r.nearEqual(Math.abs(e.w), Math.abs(t.w));
        }
        length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
        lengthSquared() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        static normalize(e, t) {
            var r = e.length();
            if (r > 0) {
                var i = 1 / r;
                t.x = e.x * i, t.y = e.y * i, t.z = e.z * i, t.w = e.w * i;
            }
        }
        static add(e, t, r) {
            r.x = e.x + t.x, r.y = e.y + t.y, r.z = e.z + t.z, r.w = e.w + t.w;
        }
        static subtract(e, t, r) {
            r.x = e.x - t.x, r.y = e.y - t.y, r.z = e.z - t.z, r.w = e.w - t.w;
        }
        static multiply(e, t, r) {
            r.x = e.x * t.x, r.y = e.y * t.y, r.z = e.z * t.z, r.w = e.w * t.w;
        }
        static scale(e, t, r) {
            r.x = e.x * t, r.y = e.y * t, r.z = e.z * t, r.w = e.w * t;
        }
        static Clamp(e, t, r, i) {
            var a = e.x, n = e.y, s = e.z, o = e.w, l = t.x, _ = t.y, h = t.z, c = t.w, d = r.x, u = r.y, f = r.z, m = r.w;
            a = (a = a > d ? d : a) < l ? l : a, n = (n = n > u ? u : n) < _ ? _ : n, s = (s = s > f ? f : s) < h ? h : s, 
            o = (o = o > m ? m : o) < c ? c : o, i.x = a, i.y = n, i.z = s, i.w = o;
        }
        static distanceSquared(e, t) {
            var r = e.x - t.x, i = e.y - t.y, a = e.z - t.z, n = e.w - t.w;
            return r * r + i * i + a * a + n * n;
        }
        static distance(e, t) {
            var r = e.x - t.x, i = e.y - t.y, a = e.z - t.z, n = e.w - t.w;
            return Math.sqrt(r * r + i * i + a * a + n * n);
        }
        static dot(e, t) {
            return e.x * t.x + e.y * t.y + e.z * t.z + e.w * t.w;
        }
        static min(e, t, r) {
            r.x = Math.min(e.x, t.x), r.y = Math.min(e.y, t.y), r.z = Math.min(e.z, t.z), r.w = Math.min(e.w, t.w);
        }
        static max(e, t, r) {
            r.x = Math.max(e.x, t.x), r.y = Math.max(e.y, t.y), r.z = Math.max(e.z, t.z), r.w = Math.max(e.w, t.w);
        }
        forNativeElement(e = null) {
            e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z, 
            this.elements[3] = this.w) : this.elements = new Float32Array([ this.x, this.y, this.z, this.w ]), 
            i.rewriteNumProperty(this, "x", 0), i.rewriteNumProperty(this, "y", 1), i.rewriteNumProperty(this, "z", 2), 
            i.rewriteNumProperty(this, "w", 3);
        }
    }
    a.ZERO = new a(), a.ONE = new a(1, 1, 1, 1), a.UnitX = new a(1, 0, 0, 0), a.UnitY = new a(0, 1, 0, 0), 
    a.UnitZ = new a(0, 0, 1, 0), a.UnitW = new a(0, 0, 0, 1);
    class n {
        constructor(e = 0, t = 0, r = 0, i = null) {
            this.x = e, this.y = t, this.z = r;
        }
        static distanceSquared(e, t) {
            var r = e.x - t.x, i = e.y - t.y, a = e.z - t.z;
            return r * r + i * i + a * a;
        }
        static distance(e, t) {
            var r = e.x - t.x, i = e.y - t.y, a = e.z - t.z;
            return Math.sqrt(r * r + i * i + a * a);
        }
        static min(e, t, r) {
            r.x = Math.min(e.x, t.x), r.y = Math.min(e.y, t.y), r.z = Math.min(e.z, t.z);
        }
        static max(e, t, r) {
            r.x = Math.max(e.x, t.x), r.y = Math.max(e.y, t.y), r.z = Math.max(e.z, t.z);
        }
        static transformQuat(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.x, o = t.y, l = t.z, _ = t.w, h = _ * i + o * n - l * a, c = _ * a + l * i - s * n, d = _ * n + s * a - o * i, u = -s * i - o * a - l * n;
            r.x = h * _ + u * -s + c * -l - d * -o, r.y = c * _ + u * -o + d * -s - h * -l, 
            r.z = d * _ + u * -l + h * -o - c * -s;
        }
        static scalarLength(e) {
            var t = e.x, r = e.y, i = e.z;
            return Math.sqrt(t * t + r * r + i * i);
        }
        static scalarLengthSquared(e) {
            var t = e.x, r = e.y, i = e.z;
            return t * t + r * r + i * i;
        }
        static normalize(e, t) {
            var r = e.x, i = e.y, a = e.z, n = r * r + i * i + a * a;
            n > 0 && (n = 1 / Math.sqrt(n), t.x = r * n, t.y = i * n, t.z = a * n);
        }
        static multiply(e, t, r) {
            r.x = e.x * t.x, r.y = e.y * t.y, r.z = e.z * t.z;
        }
        static scale(e, t, r) {
            r.x = e.x * t, r.y = e.y * t, r.z = e.z * t;
        }
        static lerp(e, t, r, i) {
            var a = e.x, n = e.y, s = e.z;
            i.x = a + r * (t.x - a), i.y = n + r * (t.y - n), i.z = s + r * (t.z - s);
        }
        static transformV3ToV3(e, t, r) {
            var i = n._tempVector4;
            n.transformV3ToV4(e, t, i), r.x = i.x, r.y = i.y, r.z = i.z;
        }
        static transformV3ToV4(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.elements;
            r.x = i * s[0] + a * s[4] + n * s[8] + s[12], r.y = i * s[1] + a * s[5] + n * s[9] + s[13], 
            r.z = i * s[2] + a * s[6] + n * s[10] + s[14], r.w = i * s[3] + a * s[7] + n * s[11] + s[15];
        }
        static TransformNormal(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.elements;
            r.x = i * s[0] + a * s[4] + n * s[8], r.y = i * s[1] + a * s[5] + n * s[9], r.z = i * s[2] + a * s[6] + n * s[10];
        }
        static transformCoordinate(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.elements, o = i * s[3] + a * s[7] + n * s[11] + s[15];
            r.x = i * s[0] + a * s[4] + n * s[8] + s[12] / o, r.y = i * s[1] + a * s[5] + n * s[9] + s[13] / o, 
            r.z = i * s[2] + a * s[6] + n * s[10] + s[14] / o;
        }
        static Clamp(e, t, r, i) {
            var a = e.x, n = e.y, s = e.z, o = t.x, l = t.y, _ = t.z, h = r.x, c = r.y, d = r.z;
            a = (a = a > h ? h : a) < o ? o : a, n = (n = n > c ? c : n) < l ? l : n, s = (s = s > d ? d : s) < _ ? _ : s, 
            i.x = a, i.y = n, i.z = s;
        }
        static add(e, t, r) {
            r.x = e.x + t.x, r.y = e.y + t.y, r.z = e.z + t.z;
        }
        static subtract(e, t, r) {
            r.x = e.x - t.x, r.y = e.y - t.y, r.z = e.z - t.z;
        }
        static cross(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.x, o = t.y, l = t.z;
            r.x = a * l - n * o, r.y = n * s - i * l, r.z = i * o - a * s;
        }
        static dot(e, t) {
            return e.x * t.x + e.y * t.y + e.z * t.z;
        }
        static equals(e, t) {
            return r.nearEqual(e.x, t.x) && r.nearEqual(e.y, t.y) && r.nearEqual(e.z, t.z);
        }
        setValue(e, t, r) {
            this.x = e, this.y = t, this.z = r;
        }
        fromArray(e, t = 0) {
            this.x = e[t + 0], this.y = e[t + 1], this.z = e[t + 2];
        }
        cloneTo(e) {
            var t = e;
            t.x = this.x, t.y = this.y, t.z = this.z;
        }
        clone() {
            var e = new n();
            return this.cloneTo(e), e;
        }
        toDefault() {
            this.x = 0, this.y = 0, this.z = 0;
        }
        forNativeElement(e = null) {
            e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z) : this.elements = new Float32Array([ this.x, this.y, this.z ]), 
            i.rewriteNumProperty(this, "x", 0), i.rewriteNumProperty(this, "y", 1), i.rewriteNumProperty(this, "z", 2);
        }
    }
    n._tempVector4 = new a(), n._ZERO = new n(0, 0, 0), n._ONE = new n(1, 1, 1), n._NegativeUnitX = new n(-1, 0, 0), 
    n._UnitX = new n(1, 0, 0), n._UnitY = new n(0, 1, 0), n._UnitZ = new n(0, 0, 1), 
    n._ForwardRH = new n(0, 0, -1), n._ForwardLH = new n(0, 0, 1), n._Up = new n(0, 1, 0);
    class s {
        constructor() {
            this._defaultPhysicsMemory = 16, this._maxLightCount = 32, this._lightClusterCount = new n(12, 12, 12), 
            this._editerEnvironment = !1, this.isAntialias = !0, this.isAlpha = !1, this.premultipliedAlpha = !0, 
            this.isStencil = !0, this.enableMultiLight = !0, this.octreeCulling = !1, this.octreeInitialSize = 64, 
            this.octreeInitialCenter = new n(0, 0, 0), this.octreeMinNodeSize = 2, this.octreeLooseness = 1.25, 
            this.debugFrustumCulling = !1, this._maxAreaLightCountPerClusterAverage = Math.min(4 * Math.floor(2048 / this._lightClusterCount.z - 1), this._maxLightCount);
        }
        get defaultPhysicsMemory() {
            return this._defaultPhysicsMemory;
        }
        set defaultPhysicsMemory(e) {
            if (e < 16) throw "defaultPhysicsMemory must large than 16M";
            this._defaultPhysicsMemory = e;
        }
        get maxLightCount() {
            return this._maxLightCount;
        }
        set maxLightCount(e) {
            e > 2048 ? (this._maxLightCount = 2048, console.warn("Config3D: maxLightCount must less equal 2048.")) : this._maxLightCount = e;
        }
        get lightClusterCount() {
            return this._lightClusterCount;
        }
        set lightClusterCount(e) {
            e.x > 128 || e.y > 128 || e.z > 128 ? (this._lightClusterCount.setValue(Math.min(e.x, 128), Math.min(e.y, 128), Math.min(e.z, 128)), 
            console.warn("Config3D: lightClusterCount X and Y、Z must less equal 128.")) : e.cloneTo(this._lightClusterCount);
            var t = 4 * Math.floor(2048 / this._lightClusterCount.z - 1);
            t < this._maxLightCount && console.warn("Config3D: if the area light(PointLight、SpotLight) count is large than " + t + ",maybe the far away culster will ingonre some light."), 
            this._maxAreaLightCountPerClusterAverage = Math.min(t, this._maxLightCount);
        }
        cloneTo(e) {
            var t = e;
            t._defaultPhysicsMemory = this._defaultPhysicsMemory, t._editerEnvironment = this._editerEnvironment, 
            t.isAntialias = this.isAntialias, t.isAlpha = this.isAlpha, t.premultipliedAlpha = this.premultipliedAlpha, 
            t.isStencil = this.isStencil, t.octreeCulling = this.octreeCulling, this.octreeInitialCenter.cloneTo(t.octreeInitialCenter), 
            t.octreeInitialSize = this.octreeInitialSize, t.octreeMinNodeSize = this.octreeMinNodeSize, 
            t.octreeLooseness = this.octreeLooseness, t.debugFrustumCulling = this.debugFrustumCulling, 
            t.maxLightCount = this.maxLightCount, t.enableMultiLight = this.enableMultiLight;
            var r = t.lightClusterCount;
            this.lightClusterCount.cloneTo(r), t.lightClusterCount = r;
        }
        clone() {
            var e = new s();
            return this.cloneTo(e), e;
        }
    }
    s._config = new s(), window.Config3D = s;
    class o {}
    o.Shader3D = null, o.Scene3D = null, o.MeshRenderStaticBatchManager = null, o.MeshRenderDynamicBatchManager = null, 
    o.SubMeshDynamicBatch = null, o.Laya3D = null, o.Matrix4x4 = null;
    class l {
        constructor() {
            this._ownerPath = [], this._propertys = [], this._keyFrames = [];
        }
        get ownerPathCount() {
            return this._ownerPath.length;
        }
        get propertyCount() {
            return this._propertys.length;
        }
        get keyFramesCount() {
            return this._keyFrames.length;
        }
        _setOwnerPathCount(e) {
            this._ownerPath.length = e;
        }
        _setOwnerPathByIndex(e, t) {
            this._ownerPath[e] = t;
        }
        _joinOwnerPath(e) {
            return this._ownerPath.join(e);
        }
        _setPropertyCount(e) {
            this._propertys.length = e;
        }
        _setPropertyByIndex(e, t) {
            this._propertys[e] = t;
        }
        _joinProperty(e) {
            return this._propertys.join(e);
        }
        _setKeyframeCount(e) {
            this._keyFrames.length = e;
        }
        _setKeyframeByIndex(e, t) {
            this._keyFrames[e] = t;
        }
        getOwnerPathByIndex(e) {
            return this._ownerPath[e];
        }
        getPropertyByIndex(e) {
            return this._propertys[e];
        }
        getKeyframeByIndex(e) {
            return this._keyFrames[e];
        }
    }
    class _ {
        constructor() {}
    }
    class h {
        constructor() {}
        cloneTo(e) {
            e.time = this.time;
        }
        clone() {
            var e = new h();
            return this.cloneTo(e), e;
        }
    }
    class c extends h {
        constructor() {
            super();
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t.inTangent = this.inTangent, t.outTangent = this.outTangent, t.value = this.value;
        }
    }
    class d {
        constructor() {
            var e = this.elements = new Float32Array(9);
            e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, 
            e[8] = 1;
        }
        static createRotationQuaternion(e, t) {
            var r = e.x, i = e.y, a = e.z, n = e.w, s = r * r, o = i * i, l = a * a, _ = r * i, h = a * n, c = a * r, d = i * n, u = i * a, f = r * n, m = t.elements;
            m[0] = 1 - 2 * (o + l), m[1] = 2 * (_ + h), m[2] = 2 * (c - d), m[3] = 2 * (_ - h), 
            m[4] = 1 - 2 * (l + s), m[5] = 2 * (u + f), m[6] = 2 * (c + d), m[7] = 2 * (u - f), 
            m[8] = 1 - 2 * (o + s);
        }
        static createFromTranslation(e, t) {
            var r = t.elements;
            r[0] = 1, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = 1, r[5] = 0, r[6] = e.x, r[7] = e.y, 
            r[8] = 1;
        }
        static createFromRotation(e, t) {
            var r = t.elements, i = Math.sin(e), a = Math.cos(e);
            r[0] = a, r[1] = i, r[2] = 0, r[3] = -i, r[4] = a, r[5] = 0, r[6] = 0, r[7] = 0, 
            r[8] = 1;
        }
        static createFromScaling(e, t) {
            var r = t.elements;
            r[0] = e.x, r[1] = 0, r[2] = 0, r[3] = 0, r[4] = e.y, r[5] = 0, r[6] = 0, r[7] = 0, 
            r[8] = e.z;
        }
        static createFromMatrix4x4(e, t) {
            var r = e.elements, i = t.elements;
            i[0] = r[0], i[1] = r[1], i[2] = r[2], i[3] = r[4], i[4] = r[5], i[5] = r[6], i[6] = r[8], 
            i[7] = r[9], i[8] = r[10];
        }
        static multiply(e, t, r) {
            var i = e.elements, a = t.elements, n = r.elements, s = i[0], o = i[1], l = i[2], _ = i[3], h = i[4], c = i[5], d = i[6], u = i[7], f = i[8], m = a[0], E = a[1], T = a[2], g = a[3], p = a[4], S = a[5], R = a[6], v = a[7], I = a[8];
            n[0] = m * s + E * _ + T * d, n[1] = m * o + E * h + T * v, n[2] = m * l + E * c + T * f, 
            n[3] = g * s + p * _ + S * d, n[4] = g * o + p * h + S * u, n[5] = g * l + p * c + S * f, 
            n[6] = R * s + v * _ + I * d, n[7] = R * o + v * h + I * u, n[8] = R * l + v * c + I * f;
        }
        determinant() {
            var e = this.elements, t = e[0], r = e[1], i = e[2], a = e[3], n = e[4], s = e[5], o = e[6], l = e[7], _ = e[8];
            return t * (_ * n - s * l) + r * (-_ * a + s * o) + i * (l * a - n * o);
        }
        translate(e, t) {
            var r = t.elements, i = this.elements, a = i[0], n = i[1], s = i[2], o = i[3], l = i[4], _ = i[5], h = i[6], c = i[7], d = i[8], u = e.x, f = e.y;
            r[0] = a, r[1] = n, r[2] = s, r[3] = o, r[4] = l, r[5] = _, r[6] = u * a + f * o + h, 
            r[7] = u * n + f * l + c, r[8] = u * s + f * _ + d;
        }
        rotate(e, t) {
            var r = t.elements, i = this.elements, a = i[0], n = i[1], s = i[2], o = i[3], l = i[4], _ = i[5], h = i[6], c = i[7], d = i[8], u = Math.sin(e), f = Math.cos(e);
            r[0] = f * a + u * o, r[1] = f * n + u * l, r[2] = f * s + u * _, r[3] = f * o - u * a, 
            r[4] = f * l - u * n, r[5] = f * _ - u * s, r[6] = h, r[7] = c, r[8] = d;
        }
        scale(e, t) {
            var r = t.elements, i = this.elements, a = e.x, n = e.y;
            r[0] = a * i[0], r[1] = a * i[1], r[2] = a * i[2], r[3] = n * i[3], r[4] = n * i[4], 
            r[5] = n * i[5], r[6] = i[6], r[7] = i[7], r[8] = i[8];
        }
        invert(e) {
            var t = e.elements, r = this.elements, i = r[0], a = r[1], n = r[2], s = r[3], o = r[4], l = r[5], _ = r[6], h = r[7], c = r[8], d = c * o - l * h, u = -c * s + l * _, f = h * s - o * _, m = i * d + a * u + n * f;
            m || (e = null), m = 1 / m, t[0] = d * m, t[1] = (-c * a + n * h) * m, t[2] = (l * a - n * o) * m, 
            t[3] = u * m, t[4] = (c * i - n * _) * m, t[5] = (-l * i + n * s) * m, t[6] = f * m, 
            t[7] = (-h * i + a * _) * m, t[8] = (o * i - a * s) * m;
        }
        transpose(e) {
            var t = e.elements, r = this.elements;
            if (e === this) {
                var i = r[1], a = r[2], n = r[5];
                t[1] = r[3], t[2] = r[6], t[3] = i, t[5] = r[7], t[6] = a, t[7] = n;
            } else t[0] = r[0], t[1] = r[3], t[2] = r[6], t[3] = r[1], t[4] = r[4], t[5] = r[7], 
            t[6] = r[2], t[7] = r[5], t[8] = r[8];
        }
        identity() {
            var e = this.elements;
            e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0, 
            e[8] = 1;
        }
        cloneTo(e) {
            var t, r, i;
            if ((r = this.elements) !== (i = e.elements)) for (t = 0; t < 9; ++t) i[t] = r[t];
        }
        clone() {
            var e = new d();
            return this.cloneTo(e), e;
        }
        static lookAt(e, t, r, i) {
            n.subtract(e, t, d._tempV30), n.normalize(d._tempV30, d._tempV30), n.cross(r, d._tempV30, d._tempV31), 
            n.normalize(d._tempV31, d._tempV31), n.cross(d._tempV30, d._tempV31, d._tempV32);
            var a = d._tempV30, s = d._tempV31, o = d._tempV32, l = i.elements;
            l[0] = s.x, l[3] = s.y, l[6] = s.z, l[1] = o.x, l[4] = o.y, l[7] = o.z, l[2] = a.x, 
            l[5] = a.y, l[8] = a.z;
        }
    }
    d.DEFAULT = new d(), d._tempV30 = new n(), d._tempV31 = new n(), d._tempV32 = new n();
    class u {
        constructor(e = 0, t = 0, r = 0, i = 1, a = null) {
            this.x = e, this.y = t, this.z = r, this.w = i;
        }
        static createFromYawPitchRoll(e, t, r, i) {
            var a = .5 * r, n = .5 * t, s = .5 * e, o = Math.sin(a), l = Math.cos(a), _ = Math.sin(n), h = Math.cos(n), c = Math.sin(s), d = Math.cos(s);
            i.x = d * _ * l + c * h * o, i.y = c * h * l - d * _ * o, i.z = d * h * o - c * _ * l, 
            i.w = d * h * l + c * _ * o;
        }
        static multiply(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = e.w, o = t.x, l = t.y, _ = t.z, h = t.w, c = a * _ - n * l, d = n * o - i * _, u = i * l - a * o, f = i * o + a * l + n * _;
            r.x = i * h + o * s + c, r.y = a * h + l * s + d, r.z = n * h + _ * s + u, r.w = s * h - f;
        }
        static arcTanAngle(e, t) {
            return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : e < 0 ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
        }
        static angleTo(e, t, r) {
            n.subtract(t, e, u.TEMPVector30), n.normalize(u.TEMPVector30, u.TEMPVector30), r.x = Math.asin(u.TEMPVector30.y), 
            r.y = u.arcTanAngle(-u.TEMPVector30.z, -u.TEMPVector30.x);
        }
        static createFromAxisAngle(e, t, r) {
            t *= .5;
            var i = Math.sin(t);
            r.x = i * e.x, r.y = i * e.y, r.z = i * e.z, r.w = Math.cos(t);
        }
        static createFromMatrix4x4(e, t) {
            var r, i, a = e.elements, n = a[0] + a[5] + a[10];
            n > 0 ? (r = Math.sqrt(n + 1), t.w = .5 * r, r = .5 / r, t.x = (a[6] - a[9]) * r, 
            t.y = (a[8] - a[2]) * r, t.z = (a[1] - a[4]) * r) : a[0] >= a[5] && a[0] >= a[10] ? (i = .5 / (r = Math.sqrt(1 + a[0] - a[5] - a[10])), 
            t.x = .5 * r, t.y = (a[1] + a[4]) * i, t.z = (a[2] + a[8]) * i, t.w = (a[6] - a[9]) * i) : a[5] > a[10] ? (i = .5 / (r = Math.sqrt(1 + a[5] - a[0] - a[10])), 
            t.x = (a[4] + a[1]) * i, t.y = .5 * r, t.z = (a[9] + a[6]) * i, t.w = (a[8] - a[2]) * i) : (i = .5 / (r = Math.sqrt(1 + a[10] - a[0] - a[5])), 
            t.x = (a[8] + a[2]) * i, t.y = (a[9] + a[6]) * i, t.z = .5 * r, t.w = (a[1] - a[4]) * i);
        }
        static slerp(e, t, r, i) {
            var a, n, s, o, l, _ = e.x, h = e.y, c = e.z, d = e.w, u = t.x, f = t.y, m = t.z, E = t.w;
            return (n = _ * u + h * f + c * m + d * E) < 0 && (n = -n, u = -u, f = -f, m = -m, 
            E = -E), 1 - n > 1e-6 ? (a = Math.acos(n), s = Math.sin(a), o = Math.sin((1 - r) * a) / s, 
            l = Math.sin(r * a) / s) : (o = 1 - r, l = r), i.x = o * _ + l * u, i.y = o * h + l * f, 
            i.z = o * c + l * m, i.w = o * d + l * E, i;
        }
        static lerp(e, t, r, i) {
            var a = 1 - r;
            u.dot(e, t) >= 0 ? (i.x = a * e.x + r * t.x, i.y = a * e.y + r * t.y, i.z = a * e.z + r * t.z, 
            i.w = a * e.w + r * t.w) : (i.x = a * e.x - r * t.x, i.y = a * e.y - r * t.y, i.z = a * e.z - r * t.z, 
            i.w = a * e.w - r * t.w), i.normalize(i);
        }
        static add(e, t, r) {
            r.x = e.x + t.x, r.y = e.y + t.y, r.z = e.z + t.z, r.w = e.w + t.w;
        }
        static dot(e, t) {
            return e.x * t.x + e.y * t.y + e.z * t.z + e.w * t.w;
        }
        scaling(e, t) {
            t.x = this.x * e, t.y = this.y * e, t.z = this.z * e, t.w = this.w * e;
        }
        normalize(e) {
            var t = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            t > 0 && (t = 1 / Math.sqrt(t), e.x = this.x * t, e.y = this.y * t, e.z = this.z * t, 
            e.w = this.w * t);
        }
        length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
        rotateX(e, t) {
            e *= .5;
            var r = Math.sin(e), i = Math.cos(e);
            t.x = this.x * i + this.w * r, t.y = this.y * i + this.z * r, t.z = this.z * i - this.y * r, 
            t.w = this.w * i - this.x * r;
        }
        rotateY(e, t) {
            e *= .5;
            var r = Math.sin(e), i = Math.cos(e);
            t.x = this.x * i - this.z * r, t.y = this.y * i + this.w * r, t.z = this.z * i + this.x * r, 
            t.w = this.w * i - this.y * r;
        }
        rotateZ(e, t) {
            e *= .5;
            var r = Math.sin(e), i = Math.cos(e);
            t.x = this.x * i + this.y * r, t.y = this.y * i - this.x * r, t.z = this.z * i + this.w * r, 
            t.w = this.w * i - this.z * r;
        }
        getYawPitchRoll(e) {
            n.transformQuat(n._ForwardRH, this, u.TEMPVector31), n.transformQuat(n._Up, this, u.TEMPVector32);
            var t = u.TEMPVector32;
            u.angleTo(n._ZERO, u.TEMPVector31, u.TEMPVector33);
            var r = u.TEMPVector33;
            r.x == Math.PI / 2 ? (r.y = u.arcTanAngle(t.z, t.x), r.z = 0) : r.x == -Math.PI / 2 ? (r.y = u.arcTanAngle(-t.z, -t.x), 
            r.z = 0) : (o.Matrix4x4.createRotationY(-r.y, o.Matrix4x4.TEMPMatrix0), o.Matrix4x4.createRotationX(-r.x, o.Matrix4x4.TEMPMatrix1), 
            n.transformCoordinate(u.TEMPVector32, o.Matrix4x4.TEMPMatrix0, u.TEMPVector32), 
            n.transformCoordinate(u.TEMPVector32, o.Matrix4x4.TEMPMatrix1, u.TEMPVector32), 
            r.z = u.arcTanAngle(t.y, -t.x)), r.y <= -Math.PI && (r.y = Math.PI), r.z <= -Math.PI && (r.z = Math.PI), 
            r.y >= Math.PI && r.z >= Math.PI && (r.y = 0, r.z = 0, r.x = Math.PI - r.x);
            var i = e;
            i.x = r.y, i.y = r.x, i.z = r.z;
        }
        invert(e) {
            var t = this.x, r = this.y, i = this.z, a = this.w, n = t * t + r * r + i * i + a * a, s = n ? 1 / n : 0;
            e.x = -t * s, e.y = -r * s, e.z = -i * s, e.w = a * s;
        }
        identity() {
            this.x = 0, this.y = 0, this.z = 0, this.w = 1;
        }
        fromArray(e, t = 0) {
            this.x = e[t + 0], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3];
        }
        cloneTo(e) {
            this !== e && (e.x = this.x, e.y = this.y, e.z = this.z, e.w = this.w);
        }
        clone() {
            var e = new u();
            return this.cloneTo(e), e;
        }
        equals(e) {
            return r.nearEqual(this.x, e.x) && r.nearEqual(this.y, e.y) && r.nearEqual(this.z, e.z) && r.nearEqual(this.w, e.w);
        }
        static rotationLookAt(e, t, r) {
            u.lookAt(n._ZERO, e, t, r);
        }
        static lookAt(e, t, r, i) {
            d.lookAt(e, t, r, u._tempMatrix3x3), u.rotationMatrix(u._tempMatrix3x3, i);
        }
        lengthSquared() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        static invert(e, t) {
            var i = e.lengthSquared();
            r.isZero(i) || (i = 1 / i, t.x = -e.x * i, t.y = -e.y * i, t.z = -e.z * i, t.w = e.w * i);
        }
        static rotationMatrix(e, t) {
            var r, i, a = e.elements, n = a[0], s = a[1], o = a[2], l = a[3], _ = a[4], h = a[5], c = a[6], d = a[7], u = a[8], f = n + _ + u;
            f > 0 ? (r = Math.sqrt(f + 1), t.w = .5 * r, r = .5 / r, t.x = (h - d) * r, t.y = (c - o) * r, 
            t.z = (s - l) * r) : n >= _ && n >= u ? (i = .5 / (r = Math.sqrt(1 + n - _ - u)), 
            t.x = .5 * r, t.y = (s + l) * i, t.z = (o + c) * i, t.w = (h - d) * i) : _ > u ? (i = .5 / (r = Math.sqrt(1 + _ - n - u)), 
            t.x = (l + s) * i, t.y = .5 * r, t.z = (d + h) * i, t.w = (c - o) * i) : (i = .5 / (r = Math.sqrt(1 + u - n - _)), 
            t.x = (c + o) * i, t.y = (d + h) * i, t.z = .5 * r, t.w = (s - l) * i);
        }
        forNativeElement(e = null) {
            e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z, 
            this.elements[3] = this.w) : this.elements = new Float32Array([ this.x, this.y, this.z, this.w ]), 
            i.rewriteNumProperty(this, "x", 0), i.rewriteNumProperty(this, "y", 1), i.rewriteNumProperty(this, "z", 2), 
            i.rewriteNumProperty(this, "w", 3);
        }
    }
    u.TEMPVector30 = new n(), u.TEMPVector31 = new n(), u.TEMPVector32 = new n(), u.TEMPVector33 = new n(), 
    u._tempMatrix3x3 = new d(), u.DEFAULT = new u(), u.NAN = new u(NaN, NaN, NaN, NaN);
    class f extends h {
        constructor() {
            super(), this.inTangent = new a(), this.outTangent = new a(), this.value = new u();
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            this.inTangent.cloneTo(t.inTangent), this.outTangent.cloneTo(t.outTangent), this.value.cloneTo(t.value);
        }
    }
    class m extends h {
        constructor() {
            super(), this.inTangent = new n(), this.outTangent = new n(), this.value = new n();
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            this.inTangent.cloneTo(t.inTangent), this.outTangent.cloneTo(t.outTangent), this.value.cloneTo(t.value);
        }
    }
    class E {
        static READ_DATA() {
            E._DATA.offset = E._reader.getUint32(), E._DATA.size = E._reader.getUint32();
        }
        static READ_BLOCK() {
            for (var e = E._BLOCK.count = E._reader.getUint16(), t = E._BLOCK.blockStarts = [], r = E._BLOCK.blockLengths = [], i = 0; i < e; i++) t.push(E._reader.getUint32()), 
            r.push(E._reader.getUint32());
        }
        static READ_STRINGS() {
            var e = E._reader.getUint32(), t = E._reader.getUint16(), r = E._reader.pos;
            E._reader.pos = e + E._DATA.offset;
            for (var i = 0; i < t; i++) E._strings[i] = E._reader.readUTFString();
            E._reader.pos = r;
        }
        static parse(e, t) {
            E._animationClip = e, E._reader = t;
            t.__getBuffer();
            E.READ_DATA(), E.READ_BLOCK(), E.READ_STRINGS();
            for (var r = 0, i = E._BLOCK.count; r < i; r++) {
                var a = t.getUint16(), n = E._strings[a], s = E["READ_" + n];
                if (null == s) throw new Error("model file err,no this function:" + a + " " + n);
                s.call(null);
            }
        }
        static READ_ANIMATIONS() {
            var e, r, i, a = E._reader, n = (a.__getBuffer(), []), s = a.getUint16();
            for (n.length = s, e = 0; e < s; e++) n[e] = a.getFloat32();
            var o = E._animationClip;
            o.name = E._strings[a.getUint16()];
            var h = o._duration = a.getFloat32();
            o.islooping = !!a.getByte(), o._frameRate = a.getInt16();
            var d = a.getInt16(), u = o._nodes;
            u.count = d;
            var T = o._nodesMap = {}, g = o._nodesDic = {};
            for (e = 0; e < d; e++) {
                i = new l(), u.setNodeByIndex(e, i), i._indexInList = e;
                var p = i.type = a.getUint8(), S = a.getUint16();
                for (i._setOwnerPathCount(S), r = 0; r < S; r++) i._setOwnerPathByIndex(r, E._strings[a.getUint16()]);
                var R = i._joinOwnerPath("/"), v = T[R];
                v || (T[R] = v = []), v.push(i), i.propertyOwner = E._strings[a.getUint16()];
                var I = a.getUint16();
                for (i._setPropertyCount(I), r = 0; r < I; r++) i._setPropertyByIndex(r, E._strings[a.getUint16()]);
                var x = R + "." + i.propertyOwner + "." + i._joinProperty(".");
                g[x] = i, i.fullPath = x;
                var A = a.getUint16();
                for (i._setKeyframeCount(A), r = 0; r < A; r++) switch (p) {
                  case 0:
                    var D = new c();
                    i._setKeyframeByIndex(r, D), D.time = n[a.getUint16()], D.inTangent = a.getFloat32(), 
                    D.outTangent = a.getFloat32(), D.value = a.getFloat32();
                    break;

                  case 1:
                  case 3:
                  case 4:
                    var M = new m();
                    if (i._setKeyframeByIndex(r, M), M.time = n[a.getUint16()], t.Render.supportWebGLPlusAnimation) {
                        for (var L = M.data = new Float32Array(9), C = 0; C < 3; C++) L[C] = a.getFloat32();
                        for (C = 0; C < 3; C++) L[3 + C] = a.getFloat32();
                        for (C = 0; C < 3; C++) L[6 + C] = a.getFloat32();
                    } else {
                        var y = M.inTangent, O = M.outTangent, N = M.value;
                        y.x = a.getFloat32(), y.y = a.getFloat32(), y.z = a.getFloat32(), O.x = a.getFloat32(), 
                        O.y = a.getFloat32(), O.z = a.getFloat32(), N.x = a.getFloat32(), N.y = a.getFloat32(), 
                        N.z = a.getFloat32();
                    }
                    break;

                  case 2:
                    var P = new f();
                    if (i._setKeyframeByIndex(r, P), P.time = n[a.getUint16()], t.Render.supportWebGLPlusAnimation) {
                        for (L = P.data = new Float32Array(12), C = 0; C < 4; C++) L[C] = a.getFloat32();
                        for (C = 0; C < 4; C++) L[4 + C] = a.getFloat32();
                        for (C = 0; C < 4; C++) L[8 + C] = a.getFloat32();
                    } else {
                        var b = P.inTangent, V = P.outTangent, w = P.value;
                        b.x = a.getFloat32(), b.y = a.getFloat32(), b.z = a.getFloat32(), b.w = a.getFloat32(), 
                        V.x = a.getFloat32(), V.y = a.getFloat32(), V.z = a.getFloat32(), V.w = a.getFloat32(), 
                        w.x = a.getFloat32(), w.y = a.getFloat32(), w.z = a.getFloat32(), w.w = a.getFloat32();
                    }
                    break;

                  default:
                    throw "AnimationClipParser03:unknown type.";
                }
            }
            var F = a.getUint16();
            for (e = 0; e < F; e++) {
                var B, U = new _();
                U.time = Math.min(h, a.getFloat32()), U.eventName = E._strings[a.getUint16()];
                var G = a.getUint16();
                for (G > 0 && (U.params = B = []), r = 0; r < G; r++) {
                    switch (a.getByte()) {
                      case 0:
                        B.push(!!a.getByte());
                        break;

                      case 1:
                        B.push(a.getInt32());
                        break;

                      case 2:
                        B.push(a.getFloat32());
                        break;

                      case 3:
                        B.push(E._strings[a.getUint16()]);
                        break;

                      default:
                        throw new Error("unknown type.");
                    }
                }
                o.addEvent(U);
            }
        }
    }
    E._strings = [], E._BLOCK = {
        count: 0
    }, E._DATA = {
        offset: 0,
        size: 0
    };
    class T {
        static __init__() {
            for (var e = 0; e < 256; ++e) {
                var t = e - 127;
                t < -27 ? (T._baseTable[0 | e] = 0, T._baseTable[256 | e] = 32768, T._shiftTable[0 | e] = 24, 
                T._shiftTable[256 | e] = 24) : t < -14 ? (T._baseTable[0 | e] = 1024 >> -t - 14, 
                T._baseTable[256 | e] = 1024 >> -t - 14 | 32768, T._shiftTable[0 | e] = -t - 1, 
                T._shiftTable[256 | e] = -t - 1) : t <= 15 ? (T._baseTable[0 | e] = t + 15 << 10, 
                T._baseTable[256 | e] = t + 15 << 10 | 32768, T._shiftTable[0 | e] = 13, T._shiftTable[256 | e] = 13) : t < 128 ? (T._baseTable[0 | e] = 31744, 
                T._baseTable[256 | e] = 64512, T._shiftTable[0 | e] = 24, T._shiftTable[256 | e] = 24) : (T._baseTable[0 | e] = 31744, 
                T._baseTable[256 | e] = 64512, T._shiftTable[0 | e] = 13, T._shiftTable[256 | e] = 13);
            }
            for (T._mantissaTable[0] = 0, e = 1; e < 1024; ++e) {
                var r = e << 13;
                for (t = 0; 0 == (8388608 & r); ) t -= 8388608, r <<= 1;
                r &= -8388609, t += 947912704, T._mantissaTable[e] = r | t;
            }
            for (e = 1024; e < 2048; ++e) T._mantissaTable[e] = 939524096 + (e - 1024 << 13);
            for (T._exponentTable[0] = 0, e = 1; e < 31; ++e) T._exponentTable[e] = e << 23;
            for (T._exponentTable[31] = 1199570944, T._exponentTable[32] = 2147483648, e = 33; e < 63; ++e) T._exponentTable[e] = 2147483648 + (e - 32 << 23);
            for (T._exponentTable[63] = 3347054592, T._offsetTable[0] = 0, e = 1; e < 64; ++e) T._offsetTable[e] = 32 === e ? 0 : 1024;
        }
        static roundToFloat16Bits(e) {
            T._floatView[0] = e;
            var t = T._uint32View[0], r = t >> 23 & 511;
            return T._baseTable[r] + ((8388607 & t) >> T._shiftTable[r]);
        }
        static convertToNumber(e) {
            var t = e >> 10;
            return T._uint32View[0] = T._mantissaTable[T._offsetTable[t] + (1023 & e)] + T._exponentTable[t], 
            T._floatView[0];
        }
    }
    T._buffer = new ArrayBuffer(4), T._floatView = new Float32Array(T._buffer), T._uint32View = new Uint32Array(T._buffer), 
    T._baseTable = new Uint32Array(512), T._shiftTable = new Uint32Array(512), T._mantissaTable = new Uint32Array(2048), 
    T._exponentTable = new Uint32Array(64), T._offsetTable = new Uint32Array(64);
    class g {
        static READ_DATA() {
            g._DATA.offset = g._reader.getUint32(), g._DATA.size = g._reader.getUint32();
        }
        static READ_BLOCK() {
            for (var e = g._BLOCK.count = g._reader.getUint16(), t = g._BLOCK.blockStarts = [], r = g._BLOCK.blockLengths = [], i = 0; i < e; i++) t.push(g._reader.getUint32()), 
            r.push(g._reader.getUint32());
        }
        static READ_STRINGS() {
            var e = g._reader.getUint32(), t = g._reader.getUint16(), r = g._reader.pos;
            g._reader.pos = e + g._DATA.offset;
            for (var i = 0; i < t; i++) g._strings[i] = g._reader.readUTFString();
            g._reader.pos = r;
        }
        static parse(e, t, r) {
            g._animationClip = e, g._reader = t, g._version = r, g.READ_DATA(), g.READ_BLOCK(), 
            g.READ_STRINGS();
            for (var i = 0, a = g._BLOCK.count; i < a; i++) {
                var n = t.getUint16(), s = g._strings[n], o = g["READ_" + s];
                if (null == o) throw new Error("model file err,no this function:" + n + " " + s);
                o.call(null);
            }
            g._version = null, g._reader = null, g._animationClip = null;
        }
        static READ_ANIMATIONS() {
            var e, r, i, a = g._reader, n = (a.__getBuffer(), []), s = a.getUint16();
            for (n.length = s, e = 0; e < s; e++) n[e] = a.getFloat32();
            var o = g._animationClip;
            o.name = g._strings[a.getUint16()];
            var h = o._duration = a.getFloat32();
            o.islooping = !!a.getByte(), o._frameRate = a.getInt16();
            var d = a.getInt16(), u = o._nodes;
            u.count = d;
            var E = o._nodesMap = {}, p = o._nodesDic = {};
            for (e = 0; e < d; e++) {
                i = new l(), u.setNodeByIndex(e, i), i._indexInList = e;
                var S = i.type = a.getUint8(), R = a.getUint16();
                for (i._setOwnerPathCount(R), r = 0; r < R; r++) i._setOwnerPathByIndex(r, g._strings[a.getUint16()]);
                var v = i._joinOwnerPath("/"), I = E[v];
                I || (E[v] = I = []), I.push(i), i.propertyOwner = g._strings[a.getUint16()];
                var x = a.getUint16();
                for (i._setPropertyCount(x), r = 0; r < x; r++) i._setPropertyByIndex(r, g._strings[a.getUint16()]);
                var A = v + "." + i.propertyOwner + "." + i._joinProperty(".");
                p[A] = i, i.fullPath = A;
                var D = a.getUint16();
                switch (i._setKeyframeCount(D), g._version) {
                  case "LAYAANIMATION:04":
                    for (r = 0; r < D; r++) switch (S) {
                      case 0:
                        var M = new c();
                        i._setKeyframeByIndex(r, M), M.time = n[a.getUint16()], M.inTangent = a.getFloat32(), 
                        M.outTangent = a.getFloat32(), M.value = a.getFloat32();
                        break;

                      case 1:
                      case 3:
                      case 4:
                        var L = new m();
                        if (i._setKeyframeByIndex(r, L), L.time = n[a.getUint16()], t.Render.supportWebGLPlusAnimation) {
                            for (var C = L.data = new Float32Array(9), y = 0; y < 3; y++) C[y] = a.getFloat32();
                            for (y = 0; y < 3; y++) C[3 + y] = a.getFloat32();
                            for (y = 0; y < 3; y++) C[6 + y] = a.getFloat32();
                        } else {
                            var O = L.inTangent, N = L.outTangent, P = L.value;
                            O.x = a.getFloat32(), O.y = a.getFloat32(), O.z = a.getFloat32(), N.x = a.getFloat32(), 
                            N.y = a.getFloat32(), N.z = a.getFloat32(), P.x = a.getFloat32(), P.y = a.getFloat32(), 
                            P.z = a.getFloat32();
                        }
                        break;

                      case 2:
                        var b = new f();
                        if (i._setKeyframeByIndex(r, b), b.time = n[a.getUint16()], t.Render.supportWebGLPlusAnimation) {
                            for (C = b.data = new Float32Array(12), y = 0; y < 4; y++) C[y] = a.getFloat32();
                            for (y = 0; y < 4; y++) C[4 + y] = a.getFloat32();
                            for (y = 0; y < 4; y++) C[8 + y] = a.getFloat32();
                        } else {
                            var V = b.inTangent, w = b.outTangent, F = b.value;
                            V.x = a.getFloat32(), V.y = a.getFloat32(), V.z = a.getFloat32(), V.w = a.getFloat32(), 
                            w.x = a.getFloat32(), w.y = a.getFloat32(), w.z = a.getFloat32(), w.w = a.getFloat32(), 
                            F.x = a.getFloat32(), F.y = a.getFloat32(), F.z = a.getFloat32(), F.w = a.getFloat32();
                        }
                        break;

                      default:
                        throw "AnimationClipParser04:unknown type.";
                    }
                    break;

                  case "LAYAANIMATION:COMPRESSION_04":
                    for (r = 0; r < D; r++) switch (S) {
                      case 0:
                        M = new c(), i._setKeyframeByIndex(r, M), M.time = n[a.getUint16()], M.inTangent = T.convertToNumber(a.getUint16()), 
                        M.outTangent = T.convertToNumber(a.getUint16()), M.value = T.convertToNumber(a.getUint16());
                        break;

                      case 1:
                      case 3:
                      case 4:
                        if (L = new m(), i._setKeyframeByIndex(r, L), L.time = n[a.getUint16()], t.Render.supportWebGLPlusAnimation) {
                            for (C = L.data = new Float32Array(9), y = 0; y < 3; y++) C[y] = T.convertToNumber(a.getUint16());
                            for (y = 0; y < 3; y++) C[3 + y] = T.convertToNumber(a.getUint16());
                            for (y = 0; y < 3; y++) C[6 + y] = T.convertToNumber(a.getUint16());
                        } else O = L.inTangent, N = L.outTangent, P = L.value, O.x = T.convertToNumber(a.getUint16()), 
                        O.y = T.convertToNumber(a.getUint16()), O.z = T.convertToNumber(a.getUint16()), 
                        N.x = T.convertToNumber(a.getUint16()), N.y = T.convertToNumber(a.getUint16()), 
                        N.z = T.convertToNumber(a.getUint16()), P.x = T.convertToNumber(a.getUint16()), 
                        P.y = T.convertToNumber(a.getUint16()), P.z = T.convertToNumber(a.getUint16());
                        break;

                      case 2:
                        if (b = new f(), i._setKeyframeByIndex(r, b), b.time = n[a.getUint16()], t.Render.supportWebGLPlusAnimation) {
                            for (C = b.data = new Float32Array(12), y = 0; y < 4; y++) C[y] = T.convertToNumber(a.getUint16());
                            for (y = 0; y < 4; y++) C[4 + y] = T.convertToNumber(a.getUint16());
                            for (y = 0; y < 4; y++) C[8 + y] = T.convertToNumber(a.getUint16());
                        } else V = b.inTangent, w = b.outTangent, F = b.value, V.x = T.convertToNumber(a.getUint16()), 
                        V.y = T.convertToNumber(a.getUint16()), V.z = T.convertToNumber(a.getUint16()), 
                        V.w = T.convertToNumber(a.getUint16()), w.x = T.convertToNumber(a.getUint16()), 
                        w.y = T.convertToNumber(a.getUint16()), w.z = T.convertToNumber(a.getUint16()), 
                        w.w = T.convertToNumber(a.getUint16()), F.x = T.convertToNumber(a.getUint16()), 
                        F.y = T.convertToNumber(a.getUint16()), F.z = T.convertToNumber(a.getUint16()), 
                        F.w = T.convertToNumber(a.getUint16());
                        break;

                      default:
                        throw "AnimationClipParser04:unknown type.";
                    }
                }
            }
            var B = a.getUint16();
            for (e = 0; e < B; e++) {
                var U, G = new _();
                G.time = Math.min(h, a.getFloat32()), G.eventName = g._strings[a.getUint16()];
                var z = a.getUint16();
                for (z > 0 && (G.params = U = []), r = 0; r < z; r++) {
                    switch (a.getByte()) {
                      case 0:
                        U.push(!!a.getByte());
                        break;

                      case 1:
                        U.push(a.getInt32());
                        break;

                      case 2:
                        U.push(a.getFloat32());
                        break;

                      case 3:
                        U.push(g._strings[a.getUint16()]);
                        break;

                      default:
                        throw new Error("unknown type.");
                    }
                }
                o.addEvent(G);
            }
        }
    }
    g._strings = [], g._BLOCK = {
        count: 0
    }, g._DATA = {
        offset: 0,
        size: 0
    };
    class p {
        constructor() {
            this._nodes = [];
        }
        get count() {
            return this._nodes.length;
        }
        set count(e) {
            this._nodes.length = e;
        }
        getNodeByIndex(e) {
            return this._nodes[e];
        }
        setNodeByIndex(e, t) {
            this._nodes[e] = t;
        }
    }
    class S {
        constructor() {}
        static lightAttenTexture(e, t, r, i, a, n) {
            var s = e / r, o = 1 / (1 + 25 * s);
            s >= .64 && (s > 1 ? o = 0 : o *= 1 - (s - .64) / .36), n[a] = Math.floor(255 * o + .5);
        }
        static haloTexture(e, t, r, i, a, n) {
            var s = (e - (r >>= 1)) / r, o = (t - (i >>= 1)) / i, l = s * s + o * o;
            l > 1 && (l = 1), n[a] = Math.floor(255 * (1 - l) + .5);
        }
        static _generateTexture2D(e, r, i, a) {
            var n = 0, s = 0;
            switch (e.format) {
              case t.TextureFormat.R8G8B8:
                s = 3;
                break;

              case t.TextureFormat.R8G8B8A8:
                s = 4;
                break;

              case t.TextureFormat.Alpha8:
                s = 1;
                break;

              default:
                throw "GeneratedTexture._generateTexture: unkonw texture format.";
            }
            for (var o = new Uint8Array(r * i * s), l = 0; l < i; l++) for (var _ = 0; _ < r; _++) a(_, l, r, i, n, o), 
            n += s;
            e.setPixels(o);
        }
    }
    class R {}
    R._bullet = null, R._enablePhysics = !1;
    class v {
        static _createFloatTextureBuffer(e, r) {
            var i = new t.Texture2D(e, r, t.TextureFormat.R32G32B32A32, !1, !1);
            return i.filterMode = t.BaseTexture.FILTERMODE_POINT, i.wrapModeU = t.BaseTexture.WARPMODE_CLAMP, 
            i.wrapModeV = t.BaseTexture.WARPMODE_CLAMP, i.anisoLevel = 0, i;
        }
        static _convertToLayaVec3(e, t, r) {
            var i = R._bullet;
            t.x = r ? -i.btVector3_x(e) : i.btVector3_x(e), t.y = i.btVector3_y(e), t.z = i.btVector3_z(e);
        }
        static _convertToBulletVec3(e, t, r) {
            R._bullet.btVector3_setValue(t, r ? -e.x : e.x, e.y, e.z);
        }
        static _rotationTransformScaleSkinAnimation(e, t, r, i, a, n, s, o, l, _, h, c) {
            var d, u, f, m, E, T = v._tempArray16_0, g = v._tempArray16_1, p = v._tempArray16_2, S = i + i, R = a + a, I = n + n, x = i * S, A = a * S, D = a * R, M = n * S, L = n * R, C = n * I, y = s * S, O = s * R, N = s * I;
            for (T[15] = 1, T[0] = 1 - D - C, T[1] = A + N, T[2] = M - O, T[4] = A - N, T[5] = 1 - x - C, 
            T[6] = L + y, T[8] = M + O, T[9] = L - y, T[10] = 1 - x - D, g[15] = 1, g[0] = o, 
            g[5] = l, g[10] = _, d = 0; d < 4; d++) u = T[d], f = T[d + 4], m = T[d + 8], E = T[d + 12], 
            p[d] = u, p[d + 4] = f, p[d + 8] = m, p[d + 12] = u * e + f * t + m * r + E;
            for (d = 0; d < 4; d++) u = p[d], f = p[d + 4], m = p[d + 8], E = p[d + 12], h[d + c] = u * g[0] + f * g[1] + m * g[2] + E * g[3], 
            h[d + c + 4] = u * g[4] + f * g[5] + m * g[6] + E * g[7], h[d + c + 8] = u * g[8] + f * g[9] + m * g[10] + E * g[11], 
            h[d + c + 12] = u * g[12] + f * g[13] + m * g[14] + E * g[15];
        }
        static _computeBoneAndAnimationDatasByBindPoseMatrxix(e, t, r, i, a, n) {
            var s, o, l = 0, _ = 0, h = e.length;
            for (s = 0; s < h; l += e[s].keyframeWidth, _ += 16, s++) v._rotationTransformScaleSkinAnimation(t[l + 0], t[l + 1], t[l + 2], t[l + 3], t[l + 4], t[l + 5], t[l + 6], t[l + 7], t[l + 8], t[l + 9], i, _), 
            0 != s && (o = 16 * e[s].parentIndex, v.mulMatrixByArray(i, o, i, _, i, _));
            var c = r.length;
            for (s = 0; s < c; s++) v.mulMatrixByArrayAndMatrixFast(i, 16 * n[s], r[s], a, 16 * s);
        }
        static _computeAnimationDatasByArrayAndMatrixFast(e, t, r, i) {
            for (var a = 0, n = e.length; a < n; a++) v.mulMatrixByArrayAndMatrixFast(t, 16 * i[a], e[a], r, 16 * a);
        }
        static _computeBoneAndAnimationDatasByBindPoseMatrxixOld(e, t, r, i, a) {
            var n, s, o = 0, l = 0, _ = e.length;
            for (n = 0; n < _; o += e[n].keyframeWidth, l += 16, n++) v._rotationTransformScaleSkinAnimation(t[o + 7], t[o + 8], t[o + 9], t[o + 3], t[o + 4], t[o + 5], t[o + 6], t[o + 0], t[o + 1], t[o + 2], i, l), 
            0 != n && (s = 16 * e[n].parentIndex, v.mulMatrixByArray(i, s, i, l, i, l));
            var h = r.length;
            for (n = 0; n < h; n++) {
                var c = 16 * n;
                v.mulMatrixByArrayAndMatrixFast(i, c, r[n], a, c);
            }
        }
        static _computeAnimationDatasByArrayAndMatrixFastOld(e, t, r) {
            for (var i = e.length, a = 0; a < i; a++) {
                var n = 16 * a;
                v.mulMatrixByArrayAndMatrixFast(t, n, e[a], r, n);
            }
        }
        static _computeRootAnimationData(e, t, r) {
            for (var i = 0, a = 0, n = 0, s = e.length; i < s; a += e[i].keyframeWidth, n += 16, 
            i++) v.createAffineTransformationArray(t[a + 0], t[a + 1], t[a + 2], t[a + 3], t[a + 4], t[a + 5], t[a + 6], t[a + 7], t[a + 8], t[a + 9], r, n);
        }
        static transformVector3ArrayByQuat(e, t, r, i, a) {
            var n = e[t], s = e[t + 1], o = e[t + 2], l = r.x, _ = r.y, h = r.z, c = r.w, d = c * n + _ * o - h * s, u = c * s + h * n - l * o, f = c * o + l * s - _ * n, m = -l * n - _ * s - h * o;
            i[a] = d * c + m * -l + u * -h - f * -_, i[a + 1] = u * c + m * -_ + f * -l - d * -h, 
            i[a + 2] = f * c + m * -h + d * -_ - u * -l;
        }
        static mulMatrixByArray(e, t, r, i, a, n) {
            var s, o, l, _, h;
            if (a === r) {
                for (r = v._tempArray16_3, s = 0; s < 16; ++s) r[s] = a[n + s];
                i = 0;
            }
            for (s = 0; s < 4; s++) o = e[t + s], l = e[t + s + 4], _ = e[t + s + 8], h = e[t + s + 12], 
            a[n + s] = o * r[i + 0] + l * r[i + 1] + _ * r[i + 2] + h * r[i + 3], a[n + s + 4] = o * r[i + 4] + l * r[i + 5] + _ * r[i + 6] + h * r[i + 7], 
            a[n + s + 8] = o * r[i + 8] + l * r[i + 9] + _ * r[i + 10] + h * r[i + 11], a[n + s + 12] = o * r[i + 12] + l * r[i + 13] + _ * r[i + 14] + h * r[i + 15];
        }
        static mulMatrixByArrayFast(e, t, r, i, a, n) {
            var s, o, l, _, h;
            for (s = 0; s < 4; s++) o = e[t + s], l = e[t + s + 4], _ = e[t + s + 8], h = e[t + s + 12], 
            a[n + s] = o * r[i + 0] + l * r[i + 1] + _ * r[i + 2] + h * r[i + 3], a[n + s + 4] = o * r[i + 4] + l * r[i + 5] + _ * r[i + 6] + h * r[i + 7], 
            a[n + s + 8] = o * r[i + 8] + l * r[i + 9] + _ * r[i + 10] + h * r[i + 11], a[n + s + 12] = o * r[i + 12] + l * r[i + 13] + _ * r[i + 14] + h * r[i + 15];
        }
        static mulMatrixByArrayAndMatrixFast(e, t, r, i, a) {
            var n, s, o, l, _, h = r.elements, c = h[0], d = h[1], u = h[2], f = h[3], m = h[4], E = h[5], T = h[6], g = h[7], p = h[8], S = h[9], R = h[10], v = h[11], I = h[12], x = h[13], A = h[14], D = h[15], M = t, L = t + 4, C = t + 8, y = t + 12, O = a, N = a + 4, P = a + 8, b = a + 12;
            for (n = 0; n < 4; n++) s = e[M + n], o = e[L + n], l = e[C + n], _ = e[y + n], 
            i[O + n] = s * c + o * d + l * u + _ * f, i[N + n] = s * m + o * E + l * T + _ * g, 
            i[P + n] = s * p + o * S + l * R + _ * v, i[b + n] = s * I + o * x + l * A + _ * D;
        }
        static createAffineTransformationArray(e, t, r, i, a, n, s, o, l, _, h, c) {
            var d = i + i, u = a + a, f = n + n, m = i * d, E = i * u, T = i * f, g = a * u, p = a * f, S = n * f, R = s * d, v = s * u, I = s * f;
            h[c + 0] = (1 - (g + S)) * o, h[c + 1] = (E + I) * o, h[c + 2] = (T - v) * o, h[c + 3] = 0, 
            h[c + 4] = (E - I) * l, h[c + 5] = (1 - (m + S)) * l, h[c + 6] = (p + R) * l, h[c + 7] = 0, 
            h[c + 8] = (T + v) * _, h[c + 9] = (p - R) * _, h[c + 10] = (1 - (m + g)) * _, h[c + 11] = 0, 
            h[c + 12] = e, h[c + 13] = t, h[c + 14] = r, h[c + 15] = 1;
        }
        static transformVector3ArrayToVector3ArrayCoordinate(e, t, r, i, a) {
            var n = e[t + 0], s = e[t + 1], o = e[t + 2], l = r.elements, _ = n * l[3] + s * l[7] + o * l[11] + l[15];
            i[a] = n * l[0] + s * l[4] + o * l[8] + l[12] / _, i[a + 1] = n * l[1] + s * l[5] + o * l[9] + l[13] / _, 
            i[a + 2] = n * l[2] + s * l[6] + o * l[10] + l[14] / _;
        }
        static transformVector3ArrayToVector3ArrayNormal(e, t, r, i, a) {
            var n = e[t + 0], s = e[t + 1], o = e[t + 2], l = r.elements;
            i[a] = n * l[0] + s * l[4] + o * l[8], i[a + 1] = n * l[1] + s * l[5] + o * l[9], 
            i[a + 2] = n * l[2] + s * l[6] + o * l[10];
        }
        static transformLightingMapTexcoordArray(e, t, r, i, a) {
            i[a + 0] = e[t + 0] * r.x + r.z, i[a + 1] = 1 - ((1 - e[t + 1]) * r.y + r.w);
        }
        static getURLVerion(e) {
            var t = e.indexOf("?");
            return t >= 0 ? e.substr(t) : null;
        }
        static _createAffineTransformationArray(e, t, r, i) {
            var a = t.x, n = t.y, s = t.z, o = t.w, l = a + a, _ = n + n, h = s + s, c = a * l, d = a * _, u = a * h, f = n * _, m = n * h, E = s * h, T = o * l, g = o * _, p = o * h, S = r.x, R = r.y, v = r.z;
            i[0] = (1 - (f + E)) * S, i[1] = (d + p) * S, i[2] = (u - g) * S, i[3] = 0, i[4] = (d - p) * R, 
            i[5] = (1 - (c + E)) * R, i[6] = (m + T) * R, i[7] = 0, i[8] = (u + g) * v, i[9] = (m - T) * v, 
            i[10] = (1 - (c + f)) * v, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1;
        }
        static _mulMatrixArray(e, t, r, i) {
            var a, n, s, o, l, _ = t.elements, h = _[0], c = _[1], d = _[2], u = _[3], f = _[4], m = _[5], E = _[6], T = _[7], g = _[8], p = _[9], S = _[10], R = _[11], v = _[12], I = _[13], x = _[14], A = _[15], D = i, M = i + 4, L = i + 8, C = i + 12;
            for (a = 0; a < 4; a++) n = e[a], s = e[a + 4], o = e[a + 8], l = e[a + 12], r[D + a] = n * h + s * c + o * d + l * u, 
            r[M + a] = n * f + s * m + o * E + l * T, r[L + a] = n * g + s * p + o * S + l * R, 
            r[C + a] = n * v + s * I + o * x + l * A;
        }
        static arcTanAngle(e, t) {
            return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : e < 0 ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
        }
        static angleTo(e, t, r) {
            n.subtract(t, e, u.TEMPVector30), n.normalize(u.TEMPVector30, u.TEMPVector30), r.x = Math.asin(u.TEMPVector30.y), 
            r.y = v.arcTanAngle(-u.TEMPVector30.z, -u.TEMPVector30.x);
        }
        static transformQuat(e, t, r) {
            var i = t, a = e.x, n = e.y, s = e.z, o = i[0], l = i[1], _ = i[2], h = i[3], c = h * a + l * s - _ * n, d = h * n + _ * a - o * s, u = h * s + o * n - l * a, f = -o * a - l * n - _ * s;
            r.x = c * h + f * -o + d * -_ - u * -l, r.y = d * h + f * -l + u * -o - c * -_, 
            r.z = u * h + f * -_ + c * -l - d * -o;
        }
        static quaternionWeight(e, t, r) {
            r.x = e.x * t, r.y = e.y * t, r.z = e.z * t, r.w = e.w;
        }
        static quaternionConjugate(e, t) {
            t.x = -e.x, t.y = -e.y, t.z = -e.z, t.w = e.w;
        }
        static scaleWeight(e, t, r) {
            var i = e.x, a = e.y, n = e.z;
            r.x = i > 0 ? Math.pow(Math.abs(i), t) : -Math.pow(Math.abs(i), t), r.y = a > 0 ? Math.pow(Math.abs(a), t) : -Math.pow(Math.abs(a), t), 
            r.z = n > 0 ? Math.pow(Math.abs(n), t) : -Math.pow(Math.abs(n), t);
        }
        static scaleBlend(e, t, r, i) {
            var a = v._tempVector3_0, n = v._tempVector3_1;
            v.scaleWeight(e, 1 - r, a), v.scaleWeight(t, r, n);
            var s = r > .5 ? t : e;
            i.x = s.x > 0 ? Math.abs(a.x * n.x) : -Math.abs(a.x * n.x), i.y = s.y > 0 ? Math.abs(a.y * n.y) : -Math.abs(a.y * n.y), 
            i.z = s.z > 0 ? Math.abs(a.z * n.z) : -Math.abs(a.z * n.z);
        }
        static matrix4x4MultiplyFFF(e, t, r) {
            var i, a, n, s, o;
            if (r === t) for (t = new Float32Array(16), i = 0; i < 16; ++i) t[i] = r[i];
            var l = t[0], _ = t[1], h = t[2], c = t[3], d = t[4], u = t[5], f = t[6], m = t[7], E = t[8], T = t[9], g = t[10], p = t[11], S = t[12], R = t[13], v = t[14], I = t[15];
            for (i = 0; i < 4; i++) a = e[i], n = e[i + 4], s = e[i + 8], o = e[i + 12], r[i] = a * l + n * _ + s * h + o * c, 
            r[i + 4] = a * d + n * u + s * f + o * m, r[i + 8] = a * E + n * T + s * g + o * p, 
            r[i + 12] = a * S + n * R + s * v + o * I;
        }
        static matrix4x4MultiplyFFFForNative(e, r, i) {
            t.LayaGL.instance.matrix4x4Multiply(e, r, i);
        }
        static matrix4x4MultiplyMFM(e, t, r) {
            v.matrix4x4MultiplyFFF(e.elements, t, r.elements);
        }
        static _buildTexture2D(e, r, i, a, n = !1) {
            var s = new t.Texture2D(e, r, i, n, !0);
            return s.anisoLevel = 1, s.filterMode = t.BaseTexture.FILTERMODE_POINT, S._generateTexture2D(s, e, r, a), 
            s;
        }
        static _drawBound(e, t, r) {
            e.lineCount + 12 > e.maxLineCount && (e.maxLineCount += 12);
            var i = v._tempVector3_0, a = v._tempVector3_1, n = t.min, s = t.max;
            i.setValue(n.x, n.y, n.z), a.setValue(s.x, n.y, n.z), e.addLine(i, a, r, r), i.setValue(n.x, n.y, n.z), 
            a.setValue(n.x, n.y, s.z), e.addLine(i, a, r, r), i.setValue(s.x, n.y, n.z), a.setValue(s.x, n.y, s.z), 
            e.addLine(i, a, r, r), i.setValue(n.x, n.y, s.z), a.setValue(s.x, n.y, s.z), e.addLine(i, a, r, r), 
            i.setValue(n.x, n.y, n.z), a.setValue(n.x, s.y, n.z), e.addLine(i, a, r, r), i.setValue(n.x, n.y, s.z), 
            a.setValue(n.x, s.y, s.z), e.addLine(i, a, r, r), i.setValue(s.x, n.y, n.z), a.setValue(s.x, s.y, n.z), 
            e.addLine(i, a, r, r), i.setValue(s.x, n.y, s.z), a.setValue(s.x, s.y, s.z), e.addLine(i, a, r, r), 
            i.setValue(n.x, s.y, n.z), a.setValue(s.x, s.y, n.z), e.addLine(i, a, r, r), i.setValue(n.x, s.y, n.z), 
            a.setValue(n.x, s.y, s.z), e.addLine(i, a, r, r), i.setValue(s.x, s.y, n.z), a.setValue(s.x, s.y, s.z), 
            e.addLine(i, a, r, r), i.setValue(n.x, s.y, s.z), a.setValue(s.x, s.y, s.z), e.addLine(i, a, r, r);
        }
        static _getHierarchyPath(e, t, r) {
            r.length = 0;
            for (var i = t; i !== e; ) {
                var a = i._parent;
                if (!a) return null;
                r.push(a.getChildIndex(i)), i = a;
            }
            return r;
        }
        static _getNodeByHierarchyPath(e, t) {
            for (var r = e, i = t.length - 1; i >= 0; i--) r = r.getChildAt(t[i]);
            return r;
        }
    }
    v._tempVector3_0 = new n(), v._tempVector3_1 = new n(), v._tempArray16_0 = new Float32Array(16), 
    v._tempArray16_1 = new Float32Array(16), v._tempArray16_2 = new Float32Array(16), 
    v._tempArray16_3 = new Float32Array(16), v._compIdToNode = new Object();
    class I extends t.Resource {
        constructor() {
            super(), this._nodes = new p(), this._animationEvents = [];
        }
        static _parse(e, r = null, i = null) {
            var a = new I(), n = new t.Byte(e), s = n.readUTFString();
            switch (s) {
              case "LAYAANIMATION:03":
                E.parse(a, n);
                break;

              case "LAYAANIMATION:04":
              case "LAYAANIMATION:COMPRESSION_04":
                g.parse(a, n, s);
                break;

              default:
                throw "unknown animationClip version.";
            }
            return a;
        }
        static load(e, r) {
            t.ILaya.loader.create(e, r, null, I.ANIMATIONCLIP);
        }
        duration() {
            return this._duration;
        }
        _hermiteInterpolate(e, t, r, i) {
            var a = e.outTangent, n = t.inTangent;
            if (Number.isFinite(a) && Number.isFinite(n)) {
                var s = r * r, o = s * r, l = o - 2 * s + r, _ = o - s, h = -2 * o + 3 * s;
                return (2 * o - 3 * s + 1) * e.value + l * a * i + _ * n * i + h * t.value;
            }
            return e.value;
        }
        _hermiteInterpolateVector3(e, t, r, i, a) {
            var n = e.value, s = e.outTangent, o = t.value, l = t.inTangent, _ = r * r, h = _ * r, c = 2 * h - 3 * _ + 1, d = h - 2 * _ + r, u = h - _, f = -2 * h + 3 * _, m = s.x, E = l.x;
            Number.isFinite(m) && Number.isFinite(E) ? a.x = c * n.x + d * m * i + u * E * i + f * o.x : a.x = n.x, 
            m = s.y, E = l.y, Number.isFinite(m) && Number.isFinite(E) ? a.y = c * n.y + d * m * i + u * E * i + f * o.y : a.y = n.y, 
            m = s.z, E = l.z, Number.isFinite(m) && Number.isFinite(E) ? a.z = c * n.z + d * m * i + u * E * i + f * o.z : a.z = n.z;
        }
        _hermiteInterpolateQuaternion(e, t, r, i, a) {
            var n = e.value, s = e.outTangent, o = t.value, l = t.inTangent, _ = r * r, h = _ * r, c = 2 * h - 3 * _ + 1, d = h - 2 * _ + r, u = h - _, f = -2 * h + 3 * _, m = s.x, E = l.x;
            Number.isFinite(m) && Number.isFinite(E) ? a.x = c * n.x + d * m * i + u * E * i + f * o.x : a.x = n.x, 
            m = s.y, E = l.y, Number.isFinite(m) && Number.isFinite(E) ? a.y = c * n.y + d * m * i + u * E * i + f * o.y : a.y = n.y, 
            m = s.z, E = l.z, Number.isFinite(m) && Number.isFinite(E) ? a.z = c * n.z + d * m * i + u * E * i + f * o.z : a.z = n.z, 
            m = s.w, E = l.w, Number.isFinite(m) && Number.isFinite(E) ? a.w = c * n.w + d * m * i + u * E * i + f * o.w : a.w = n.w;
        }
        _evaluateClipDatasRealTime(e, t, r, i, a, n) {
            for (var s = 0, o = e.count; s < o; s++) {
                var l, _ = e.getNodeByIndex(s), h = _.type, c = _._keyFrames, d = c.length, f = r[s];
                if (a) for (-1 !== f && t < c[f].time && (f = -1, r[s] = f), l = f + 1; l < d && !(c[l].time > t); ) f++, 
                l++, r[s] = f; else for ((l = f + 1) !== d && t > c[l].time && (f = d - 1, r[s] = f), 
                l = f + 1; f > -1 && !(c[f].time < t); ) f--, l--, r[s] = f;
                var m = l === d;
                switch (h) {
                  case 0:
                    if (-1 !== f) {
                        var E = c[f];
                        if (m) n[s] = E.value; else {
                            var T, g = c[l], p = g.time - E.time;
                            T = 0 !== p ? (t - E.time) / p : 0, n[s] = this._hermiteInterpolate(E, g, T, p);
                        }
                    } else n[s] = c[0].value;
                    i && (n[s] = n[s] - c[0].value);
                    break;

                  case 1:
                  case 4:
                    var S = n[s];
                    if (this._evaluateFrameNodeVector3DatasRealTime(c, f, m, t, S), i) {
                        var R = c[0].value;
                        S.x -= R.x, S.y -= R.y, S.z -= R.z;
                    }
                    break;

                  case 2:
                    var x = n[s];
                    if (this._evaluateFrameNodeQuaternionDatasRealTime(c, f, m, t, x), i) {
                        var A = I._tempQuaternion0, D = c[0].value;
                        v.quaternionConjugate(D, A), u.multiply(A, x, x);
                    }
                    break;

                  case 3:
                    S = n[s], this._evaluateFrameNodeVector3DatasRealTime(c, f, m, t, S), i && (R = c[0].value, 
                    S.x /= R.x, S.y /= R.y, S.z /= R.z);
                    break;

                  default:
                    throw "AnimationClip:unknown node type.";
                }
            }
        }
        _evaluateClipDatasRealTimeForNative(e, r, i, a) {
            t.LayaGL.instance.evaluateClipDatasRealTime(e._nativeObj, r, i, a);
        }
        _evaluateFrameNodeVector3DatasRealTime(e, t, r, i, a) {
            if (-1 !== t) {
                var n = e[t];
                if (r) {
                    var s = n.value;
                    a.x = s.x, a.y = s.y, a.z = s.z;
                } else {
                    var o, l = e[t + 1], _ = n.time, h = l.time - _;
                    o = 0 !== h ? (i - _) / h : 0, this._hermiteInterpolateVector3(n, l, o, h, a);
                }
            } else {
                var c = e[0].value;
                a.x = c.x, a.y = c.y, a.z = c.z;
            }
        }
        _evaluateFrameNodeQuaternionDatasRealTime(e, t, r, i, a) {
            if (-1 !== t) {
                var n = e[t];
                if (r) {
                    var s = n.value;
                    a.x = s.x, a.y = s.y, a.z = s.z, a.w = s.w;
                } else {
                    var o, l = e[t + 1], _ = n.time, h = l.time - _;
                    o = 0 !== h ? (i - _) / h : 0, this._hermiteInterpolateQuaternion(n, l, o, h, a);
                }
            } else {
                var c = e[0].value;
                a.x = c.x, a.y = c.y, a.z = c.z, a.w = c.w;
            }
        }
        _binarySearchEventIndex(e) {
            for (var t, r = 0, i = this._animationEvents.length - 1; r <= i; ) {
                t = Math.floor((r + i) / 2);
                var a = this._animationEvents[t].time;
                if (a == e) return t;
                a > e ? i = t - 1 : r = t + 1;
            }
            return r;
        }
        addEvent(e) {
            var t = this._binarySearchEventIndex(e.time);
            this._animationEvents.splice(t, 0, e);
        }
        _disposeResource() {
            this._nodes = null, this._nodesMap = null;
        }
    }
    I.ANIMATIONCLIP = "ANIMATIONCLIP", I._tempQuaternion0 = new u();
    class x {
        constructor() {
            this._currentState = null;
        }
        get normalizedTime() {
            return this._normalizedTime;
        }
        get duration() {
            return this._duration;
        }
        get animatorState() {
            return this._currentState;
        }
        _resetPlayState(e) {
            this._finish = !1, this._startPlayTime = e, this._elapsedTime = e, this._playEventIndex = 0, 
            this._lastIsFront = !0;
        }
        _cloneTo(e) {
            e._finish = this._finish, e._startPlayTime = this._startPlayTime, e._elapsedTime = this._elapsedTime, 
            e._playEventIndex = this._playEventIndex, e._lastIsFront = this._lastIsFront;
        }
    }
    class A {
        constructor(e) {
            this._defaultState = null, this._referenceCount = 0, this._playType = -1, this._crossDuration = -1, 
            this._crossMark = 0, this._crossNodesOwnersCount = 0, this._crossNodesOwners = [], 
            this._crossNodesOwnersIndicesMap = {}, this._srcCrossClipNodeIndices = [], this._destCrossClipNodeIndices = [], 
            this._statesMap = {}, this._states = [], this._playStateInfo = new x(), this._crossPlayStateInfo = new x(), 
            this.blendingMode = A.BLENDINGMODE_OVERRIDE, this.defaultWeight = 1, this.playOnWake = !0, 
            this.name = e;
        }
        get defaultState() {
            return this._defaultState;
        }
        set defaultState(e) {
            this._defaultState = e, this._statesMap[e.name] = e;
        }
        _removeClip(e, t, r, i) {
            var a = i._clip, n = e[r];
            if (e.splice(r, 1), delete t[i.name], this._animator) {
                var s = a._nodes, o = n._nodeOwners;
                a._removeReference();
                for (var l = 0, _ = s.count; l < _; l++) this._animator._removeKeyframeNodeOwner(o, s.getNodeByIndex(l));
            }
        }
        _getReferenceCount() {
            return this._referenceCount;
        }
        _addReference(e = 1) {
            for (var t = 0, r = this._states.length; t < r; t++) this._states[t]._addReference(e);
            this._referenceCount += e;
        }
        _removeReference(e = 1) {
            for (var t = 0, r = this._states.length; t < r; t++) this._states[t]._removeReference(e);
            this._referenceCount -= e;
        }
        _clearReference() {
            this._removeReference(-this._referenceCount);
        }
        getCurrentPlayState() {
            return this._playStateInfo;
        }
        getAnimatorState(e) {
            var t = this._statesMap[e];
            return t || null;
        }
        addState(e) {
            var t = e.name;
            if (this._statesMap[t]) throw "AnimatorControllerLayer:this stat's name has exist.";
            this._statesMap[t] = e, this._states.push(e), this._animator && (e._clip._addReference(), 
            this._animator._getOwnersByClip(e));
        }
        removeState(e) {
            for (var t = this._states, r = -1, i = 0, a = t.length; i < a; i++) if (t[i] === e) {
                r = i;
                break;
            }
            -1 !== r && this._removeClip(t, this._statesMap, r, e);
        }
        destroy() {
            this._clearReference(), this._statesMap = null, this._states = null, this._playStateInfo = null, 
            this._crossPlayStateInfo = null, this._defaultState = null;
        }
        cloneTo(e) {
            var t = e;
            t.name = this.name, t.blendingMode = this.blendingMode, t.defaultWeight = this.defaultWeight, 
            t.playOnWake = this.playOnWake;
        }
        clone() {
            var e = new A(this.name);
            return this.cloneTo(e), e;
        }
    }
    A.BLENDINGMODE_OVERRIDE = 0, A.BLENDINGMODE_ADDTIVE = 1;
    class D {
        constructor(e = 0, t = 0, r = 0, i = 0) {
            var a = this.elements = new Float32Array(4);
            a[0] = e, a[1] = t, a[2] = r, a[3] = i;
        }
        get x() {
            return this.elements[0];
        }
        set x(e) {
            this.elements[0] = e;
        }
        get y() {
            return this.elements[1];
        }
        set y(e) {
            this.elements[1] = e;
        }
        get z() {
            return this.elements[2];
        }
        set z(e) {
            this.elements[2] = e;
        }
        get w() {
            return this.elements[3];
        }
        set w(e) {
            this.elements[3] = e;
        }
        fromArray(e, t = 0) {
            this.elements[0] = e[t + 0], this.elements[1] = e[t + 1], this.elements[2] = e[t + 2], 
            this.elements[3] = e[t + 3];
        }
        cloneTo(e) {
            var t = e.elements, r = this.elements;
            t[0] = r[0], t[1] = r[1], t[2] = r[2], t[3] = r[3];
        }
        clone() {
            var e = new D();
            return this.cloneTo(e), e;
        }
        static lerp(e, t, r, i) {
            var a = i.elements, n = e.elements, s = t.elements, o = n[0], l = n[1], _ = n[2], h = n[3];
            a[0] = o + r * (s[0] - o), a[1] = l + r * (s[1] - l), a[2] = _ + r * (s[2] - _), 
            a[3] = h + r * (s[3] - h);
        }
        static transformByM4x4(e, t, r) {
            var i = e.elements, a = i[0], n = i[1], s = i[2], o = i[3], l = t.elements, _ = r.elements;
            _[0] = a * l[0] + n * l[4] + s * l[8] + o * l[12], _[1] = a * l[1] + n * l[5] + s * l[9] + o * l[13], 
            _[2] = a * l[2] + n * l[6] + s * l[10] + o * l[14], _[3] = a * l[3] + n * l[7] + s * l[11] + o * l[15];
        }
        static equals(e, t) {
            var i = e.elements, a = t.elements;
            return r.nearEqual(Math.abs(i[0]), Math.abs(a[0])) && r.nearEqual(Math.abs(i[1]), Math.abs(a[1])) && r.nearEqual(Math.abs(i[2]), Math.abs(a[2])) && r.nearEqual(Math.abs(i[3]), Math.abs(a[3]));
        }
        length() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }
        lengthSquared() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }
        static normalize(e, t) {
            var r = e.elements, i = t.elements, a = e.length();
            a > 0 && (i[0] = r[0] * a, i[1] = r[1] * a, i[2] = r[2] * a, i[3] = r[3] * a);
        }
        static add(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] + n[0], i[1] = a[1] + n[1], i[2] = a[2] + n[2], i[3] = a[3] + n[3];
        }
        static subtract(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] - n[0], i[1] = a[1] - n[1], i[2] = a[2] - n[2], i[3] = a[3] - n[3];
        }
        static multiply(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] * n[0], i[1] = a[1] * n[1], i[2] = a[2] * n[2], i[3] = a[3] * n[3];
        }
        static scale(e, t, r) {
            var i = r.elements, a = e.elements;
            i[0] = a[0] * t, i[1] = a[1] * t, i[2] = a[2] * t, i[3] = a[3] * t;
        }
        static Clamp(e, t, r, i) {
            var a = e.elements, n = a[0], s = a[1], o = a[2], l = a[3], _ = t.elements, h = _[0], c = _[1], d = _[2], u = _[3], f = r.elements, m = f[0], E = f[1], T = f[2], g = f[3], p = i.elements;
            n = (n = n > m ? m : n) < h ? h : n, s = (s = s > E ? E : s) < c ? c : s, o = (o = o > T ? T : o) < d ? d : o, 
            l = (l = l > g ? g : l) < u ? u : l, p[0] = n, p[1] = s, p[2] = o, p[3] = l;
        }
        static distanceSquared(e, t) {
            var r = e.elements, i = t.elements, a = r[0] - i[0], n = r[1] - i[1], s = r[2] - i[2], o = r[3] - i[3];
            return a * a + n * n + s * s + o * o;
        }
        static distance(e, t) {
            var r = e.elements, i = t.elements, a = r[0] - i[0], n = r[1] - i[1], s = r[2] - i[2], o = r[3] - i[3];
            return Math.sqrt(a * a + n * n + s * s + o * o);
        }
        static dot(e, t) {
            var r = e.elements, i = t.elements;
            return r[0] * i[0] + r[1] * i[1] + r[2] * i[2] + r[3] * i[3];
        }
        static min(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = Math.min(a[0], n[0]), i[1] = Math.min(a[1], n[1]), i[2] = Math.min(a[2], n[2]), 
            i[3] = Math.min(a[3], n[3]);
        }
        static max(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = Math.max(a[0], n[0]), i[1] = Math.max(a[1], n[1]), i[2] = Math.max(a[2], n[2]), 
            i[3] = Math.max(a[3], n[3]);
        }
    }
    D.ZERO = new D(), D.ONE = new D(1, 1, 1, 1), D.UnitX = new D(1, 0, 0, 0), D.UnitY = new D(0, 1, 0, 0), 
    D.UnitZ = new D(0, 0, 1, 0), D.UnitW = new D(0, 0, 0, 1);
    class M {
        constructor(e = 0, t = 0, r = 0, i = null) {
            var a;
            a = i || new Float32Array(3), this.elements = a, a[0] = e, a[1] = t, a[2] = r;
        }
        static distanceSquared(e, t) {
            var r = e.elements, i = t.elements, a = r[0] - i[0], n = r[1] - i[1], s = r[2] - i[2];
            return a * a + n * n + s * s;
        }
        static distance(e, t) {
            var r = e.elements, i = t.elements, a = r[0] - i[0], n = r[1] - i[1], s = r[2] - i[2];
            return Math.sqrt(a * a + n * n + s * s);
        }
        static min(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = Math.min(a[0], n[0]), i[1] = Math.min(a[1], n[1]), i[2] = Math.min(a[2], n[2]);
        }
        static max(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = Math.max(a[0], n[0]), i[1] = Math.max(a[1], n[1]), i[2] = Math.max(a[2], n[2]);
        }
        static transformQuat(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements, s = a[0], o = a[1], l = a[2], _ = n[0], h = n[1], c = n[2], d = n[3], u = d * s + h * l - c * o, f = d * o + c * s - _ * l, m = d * l + _ * o - h * s, E = -_ * s - h * o - c * l;
            i[0] = u * d + E * -_ + f * -c - m * -h, i[1] = f * d + E * -h + m * -_ - u * -c, 
            i[2] = m * d + E * -c + u * -h - f * -_;
        }
        static scalarLength(e) {
            var t = e.elements, r = t[0], i = t[1], a = t[2];
            return Math.sqrt(r * r + i * i + a * a);
        }
        static scalarLengthSquared(e) {
            var t = e.elements, r = t[0], i = t[1], a = t[2];
            return r * r + i * i + a * a;
        }
        static normalize(e, t) {
            var r = e.elements, i = t.elements, a = r[0], n = r[1], s = r[2], o = a * a + n * n + s * s;
            o > 0 && (o = 1 / Math.sqrt(o), i[0] = r[0] * o, i[1] = r[1] * o, i[2] = r[2] * o);
        }
        static multiply(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] * n[0], i[1] = a[1] * n[1], i[2] = a[2] * n[2];
        }
        static scale(e, t, r) {
            var i = r.elements, a = e.elements;
            i[0] = a[0] * t, i[1] = a[1] * t, i[2] = a[2] * t;
        }
        static lerp(e, t, r, i) {
            var a = i.elements, n = e.elements, s = t.elements, o = n[0], l = n[1], _ = n[2];
            a[0] = o + r * (s[0] - o), a[1] = l + r * (s[1] - l), a[2] = _ + r * (s[2] - _);
        }
        static transformV3ToV3(e, t, r) {
            var i = M._tempVector4;
            M.transformV3ToV4(e, t, i);
            var a = i.elements, n = r.elements;
            n[0] = a[0], n[1] = a[1], n[2] = a[2];
        }
        static transformV3ToV4(e, t, r) {
            var i = e.elements, a = i[0], n = i[1], s = i[2], o = t.elements, l = r.elements;
            l[0] = a * o[0] + n * o[4] + s * o[8] + o[12], l[1] = a * o[1] + n * o[5] + s * o[9] + o[13], 
            l[2] = a * o[2] + n * o[6] + s * o[10] + o[14], l[3] = a * o[3] + n * o[7] + s * o[11] + o[15];
        }
        static TransformNormal(e, t, r) {
            var i = e.elements, a = i[0], n = i[1], s = i[2], o = t.elements, l = r.elements;
            l[0] = a * o[0] + n * o[4] + s * o[8], l[1] = a * o[1] + n * o[5] + s * o[9], l[2] = a * o[2] + n * o[6] + s * o[10];
        }
        static transformCoordinate(e, t, r) {
            var i = e.elements, a = i[0], n = i[1], s = i[2], o = t.elements, l = a * o[3] + n * o[7] + s * o[11] + o[15], _ = r.elements;
            _[0] = a * o[0] + n * o[4] + s * o[8] + o[12] / l, _[1] = a * o[1] + n * o[5] + s * o[9] + o[13] / l, 
            _[2] = a * o[2] + n * o[6] + s * o[10] + o[14] / l;
        }
        static Clamp(e, t, r, i) {
            var a = e.elements, n = a[0], s = a[1], o = a[2], l = t.elements, _ = l[0], h = l[1], c = l[2], d = r.elements, u = d[0], f = d[1], m = d[2], E = i.elements;
            n = (n = n > u ? u : n) < _ ? _ : n, s = (s = s > f ? f : s) < h ? h : s, o = (o = o > m ? m : o) < c ? c : o, 
            E[0] = n, E[1] = s, E[2] = o;
        }
        static add(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] + n[0], i[1] = a[1] + n[1], i[2] = a[2] + n[2];
        }
        static subtract(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] - n[0], i[1] = a[1] - n[1], i[2] = a[2] - n[2];
        }
        static cross(e, t, r) {
            var i = e.elements, a = t.elements, n = r.elements, s = i[0], o = i[1], l = i[2], _ = a[0], h = a[1], c = a[2];
            n[0] = o * c - l * h, n[1] = l * _ - s * c, n[2] = s * h - o * _;
        }
        static dot(e, t) {
            var r = e.elements, i = t.elements;
            return r[0] * i[0] + r[1] * i[1] + r[2] * i[2];
        }
        static equals(e, t) {
            var i = e.elements, a = t.elements;
            return r.nearEqual(i[0], a[0]) && r.nearEqual(i[1], a[1]) && r.nearEqual(i[2], a[2]);
        }
        get x() {
            return this.elements[0];
        }
        set x(e) {
            this.elements[0] = e;
        }
        get y() {
            return this.elements[1];
        }
        set y(e) {
            this.elements[1] = e;
        }
        get z() {
            return this.elements[2];
        }
        set z(e) {
            this.elements[2] = e;
        }
        setValue(e, t, r) {
            this.elements[0] = e, this.elements[1] = t, this.elements[2] = r;
        }
        fromArray(e, t = 0) {
            this.elements[0] = e[t + 0], this.elements[1] = e[t + 1], this.elements[2] = e[t + 2];
        }
        cloneTo(e) {
            var t = e.elements, r = this.elements;
            t[0] = r[0], t[1] = r[1], t[2] = r[2];
        }
        clone() {
            var e = new M();
            return this.cloneTo(e), e;
        }
        toDefault() {
            this.elements[0] = 0, this.elements[1] = 0, this.elements[2] = 0;
        }
    }
    M._tempVector4 = new D(), M.ZERO = new M(0, 0, 0), M.ONE = new M(1, 1, 1), M.NegativeUnitX = new M(-1, 0, 0), 
    M.UnitX = new M(1, 0, 0), M.UnitY = new M(0, 1, 0), M.UnitZ = new M(0, 0, 1), M.ForwardRH = new M(0, 0, -1), 
    M.ForwardLH = new M(0, 0, 1), M.Up = new M(0, 1, 0), M.NAN = new M(NaN, NaN, NaN);
    class L {
        constructor(e = 1, t = 0, r = 0, i = 0, a = 0, n = 1, s = 0, o = 0, l = 0, _ = 0, h = 1, c = 0, d = 0, u = 0, f = 0, m = 1, E = null) {
            var T = this.elements = E || new Float32Array(16);
            T[0] = e, T[1] = t, T[2] = r, T[3] = i, T[4] = a, T[5] = n, T[6] = s, T[7] = o, 
            T[8] = l, T[9] = _, T[10] = h, T[11] = c, T[12] = d, T[13] = u, T[14] = f, T[15] = m;
        }
        static createRotationX(e, t) {
            var r = t.elements, i = Math.sin(e), a = Math.cos(e);
            r[1] = r[2] = r[3] = r[4] = r[7] = r[8] = r[11] = r[12] = r[13] = r[14] = 0, r[0] = r[15] = 1, 
            r[5] = r[10] = a, r[6] = i, r[9] = -i;
        }
        static createRotationY(e, t) {
            var r = t.elements, i = Math.sin(e), a = Math.cos(e);
            r[1] = r[3] = r[4] = r[6] = r[7] = r[9] = r[11] = r[12] = r[13] = r[14] = 0, r[5] = r[15] = 1, 
            r[0] = r[10] = a, r[2] = -i, r[8] = i;
        }
        static createRotationZ(e, t) {
            var r = t.elements, i = Math.sin(e), a = Math.cos(e);
            r[2] = r[3] = r[6] = r[7] = r[8] = r[9] = r[11] = r[12] = r[13] = r[14] = 0, r[10] = r[15] = 1, 
            r[0] = r[5] = a, r[1] = i, r[4] = -i;
        }
        static createRotationYawPitchRoll(e, t, r, i) {
            u.createFromYawPitchRoll(e, t, r, L._tempQuaternion), L.createRotationQuaternion(L._tempQuaternion, i);
        }
        static createRotationAxis(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = Math.cos(t), o = Math.sin(t), l = i * i, _ = a * a, h = n * n, c = i * a, d = i * n, u = a * n, f = r.elements;
            f[3] = f[7] = f[11] = f[12] = f[13] = f[14] = 0, f[15] = 1, f[0] = l + s * (1 - l), 
            f[1] = c - s * c + o * n, f[2] = d - s * d - o * a, f[4] = c - s * c - o * n, f[5] = _ + s * (1 - _), 
            f[6] = u - s * u + o * i, f[8] = d - s * d + o * a, f[9] = u - s * u - o * i, f[10] = h + s * (1 - h);
        }
        setRotation(e) {
            var t = e.x, r = e.y, i = e.z, a = e.w, n = t * t, s = r * r, o = i * i, l = t * r, _ = i * a, h = i * t, c = r * a, d = r * i, u = t * a, f = this.elements;
            f[0] = 1 - 2 * (s + o), f[1] = 2 * (l + _), f[2] = 2 * (h - c), f[4] = 2 * (l - _), 
            f[5] = 1 - 2 * (o + n), f[6] = 2 * (d + u), f[8] = 2 * (h + c), f[9] = 2 * (d - u), 
            f[10] = 1 - 2 * (s + n);
        }
        setPosition(e) {
            var t = this.elements;
            t[12] = e.x, t[13] = e.y, t[14] = e.z;
        }
        static createRotationQuaternion(e, t) {
            var r = t.elements, i = e.x, a = e.y, n = e.z, s = e.w, o = i * i, l = a * a, _ = n * n, h = i * a, c = n * s, d = n * i, u = a * s, f = a * n, m = i * s;
            r[3] = r[7] = r[11] = r[12] = r[13] = r[14] = 0, r[15] = 1, r[0] = 1 - 2 * (l + _), 
            r[1] = 2 * (h + c), r[2] = 2 * (d - u), r[4] = 2 * (h - c), r[5] = 1 - 2 * (_ + o), 
            r[6] = 2 * (f + m), r[8] = 2 * (d + u), r[9] = 2 * (f - m), r[10] = 1 - 2 * (l + o);
        }
        static createTranslate(e, t) {
            var r = t.elements;
            r[4] = r[8] = r[1] = r[9] = r[2] = r[6] = r[3] = r[7] = r[11] = 0, r[0] = r[5] = r[10] = r[15] = 1, 
            r[12] = e.x, r[13] = e.y, r[14] = e.z;
        }
        static createScaling(e, t) {
            var r = t.elements;
            r[0] = e.x, r[5] = e.y, r[10] = e.z, r[1] = r[4] = r[8] = r[12] = r[9] = r[13] = r[2] = r[6] = r[14] = r[3] = r[7] = r[11] = 0, 
            r[15] = 1;
        }
        static multiply(e, t, r) {
            var i = t.elements, a = e.elements, n = r.elements, s = i[0], o = i[1], l = i[2], _ = i[3], h = i[4], c = i[5], d = i[6], u = i[7], f = i[8], m = i[9], E = i[10], T = i[11], g = i[12], p = i[13], S = i[14], R = i[15], v = a[0], I = a[1], x = a[2], A = a[3], D = a[4], M = a[5], L = a[6], C = a[7], y = a[8], O = a[9], N = a[10], P = a[11], b = a[12], V = a[13], w = a[14], F = a[15];
            n[0] = s * v + o * D + l * y + _ * b, n[1] = s * I + o * M + l * O + _ * V, n[2] = s * x + o * L + l * N + _ * w, 
            n[3] = s * A + o * C + l * P + _ * F, n[4] = h * v + c * D + d * y + u * b, n[5] = h * I + c * M + d * O + u * V, 
            n[6] = h * x + c * L + d * N + u * w, n[7] = h * A + c * C + d * P + u * F, n[8] = f * v + m * D + E * y + T * b, 
            n[9] = f * I + m * M + E * O + T * V, n[10] = f * x + m * L + E * N + T * w, n[11] = f * A + m * C + E * P + T * F, 
            n[12] = g * v + p * D + S * y + R * b, n[13] = g * I + p * M + S * O + R * V, n[14] = g * x + p * L + S * N + R * w, 
            n[15] = g * A + p * C + S * P + R * F;
        }
        static multiplyForNative(e, r, i) {
            t.LayaGL.instance.matrix4x4Multiply(e.elements, r.elements, i.elements);
        }
        static createFromQuaternion(e, t) {
            var r = t.elements, i = e.x, a = e.y, n = e.z, s = e.w, o = i + i, l = a + a, _ = n + n, h = i * o, c = a * o, d = a * l, u = n * o, f = n * l, m = n * _, E = s * o, T = s * l, g = s * _;
            r[0] = 1 - d - m, r[1] = c + g, r[2] = u - T, r[3] = 0, r[4] = c - g, r[5] = 1 - h - m, 
            r[6] = f + E, r[7] = 0, r[8] = u + T, r[9] = f - E, r[10] = 1 - h - d, r[11] = 0, 
            r[12] = 0, r[13] = 0, r[14] = 0, r[15] = 1;
        }
        static createAffineTransformation(e, t, r, i) {
            var a = i.elements, n = t.x, s = t.y, o = t.z, l = t.w, _ = n + n, h = s + s, c = o + o, d = n * _, u = n * h, f = n * c, m = s * h, E = s * c, T = o * c, g = l * _, p = l * h, S = l * c, R = r.x, v = r.y, I = r.z;
            a[0] = (1 - (m + T)) * R, a[1] = (u + S) * R, a[2] = (f - p) * R, a[3] = 0, a[4] = (u - S) * v, 
            a[5] = (1 - (d + T)) * v, a[6] = (E + g) * v, a[7] = 0, a[8] = (f + p) * I, a[9] = (E - g) * I, 
            a[10] = (1 - (d + m)) * I, a[11] = 0, a[12] = e.x, a[13] = e.y, a[14] = e.z, a[15] = 1;
        }
        static createLookAt(e, t, r, i) {
            var a = i.elements, s = L._tempVector0, o = L._tempVector1, l = L._tempVector2;
            n.subtract(e, t, l), n.normalize(l, l), n.cross(r, l, s), n.normalize(s, s), n.cross(l, s, o), 
            i.identity(), a[0] = s.x, a[4] = s.y, a[8] = s.z, a[1] = o.x, a[5] = o.y, a[9] = o.z, 
            a[2] = l.x, a[6] = l.y, a[10] = l.z, a[12] = -n.dot(s, e), a[13] = -n.dot(o, e), 
            a[14] = -n.dot(l, e);
        }
        static createPerspective(e, t, r, i, a) {
            var n = 1 / Math.tan(.5 * e), s = r / (n / t), o = r / n;
            L.createPerspectiveOffCenter(-s, s, -o, o, r, i, a);
        }
        static createPerspectiveOffCenter(e, t, r, i, a, n, s) {
            var o = s.elements, l = n / (n - a);
            o[1] = o[2] = o[3] = o[4] = o[6] = o[7] = o[12] = o[13] = o[15] = 0, o[0] = 2 * a / (t - e), 
            o[5] = 2 * a / (i - r), o[8] = (e + t) / (t - e), o[9] = (i + r) / (i - r), o[10] = -l, 
            o[11] = -1, o[14] = -a * l;
        }
        static createOrthoOffCenter(e, t, r, i, a, n, s) {
            var o = s.elements, l = 1 / (n - a);
            o[1] = o[2] = o[3] = o[4] = o[6] = o[8] = o[7] = o[9] = o[11] = 0, o[15] = 1, o[0] = 2 / (t - e), 
            o[5] = 2 / (i - r), o[10] = -l, o[12] = (e + t) / (e - t), o[13] = (i + r) / (r - i), 
            o[14] = -a * l;
        }
        getElementByRowColumn(e, t) {
            if (e < 0 || e > 3) throw new Error("row Rows and columns for matrices run from 0 to 3, inclusive.");
            if (t < 0 || t > 3) throw new Error("column Rows and columns for matrices run from 0 to 3, inclusive.");
            return this.elements[4 * e + t];
        }
        setElementByRowColumn(e, t, r) {
            if (e < 0 || e > 3) throw new Error("row Rows and columns for matrices run from 0 to 3, inclusive.");
            if (t < 0 || t > 3) throw new Error("column Rows and columns for matrices run from 0 to 3, inclusive.");
            this.elements[4 * e + t] = r;
        }
        equalsOtherMatrix(e) {
            var t = this.elements, i = e.elements;
            return r.nearEqual(t[0], i[0]) && r.nearEqual(t[1], i[1]) && r.nearEqual(t[2], i[2]) && r.nearEqual(t[3], i[3]) && r.nearEqual(t[4], i[4]) && r.nearEqual(t[5], i[5]) && r.nearEqual(t[6], i[6]) && r.nearEqual(t[7], i[7]) && r.nearEqual(t[8], i[8]) && r.nearEqual(t[9], i[9]) && r.nearEqual(t[10], i[10]) && r.nearEqual(t[11], i[11]) && r.nearEqual(t[12], i[12]) && r.nearEqual(t[13], i[13]) && r.nearEqual(t[14], i[14]) && r.nearEqual(t[15], i[15]);
        }
        decomposeTransRotScale(e, t, r) {
            var i = L._tempMatrix4x4;
            return this.decomposeTransRotMatScale(e, i, r) ? (u.createFromMatrix4x4(i, t), !0) : (t.identity(), 
            !1);
        }
        decomposeTransRotMatScale(e, t, i) {
            var a = this.elements, s = e, o = t.elements, l = i;
            s.x = a[12], s.y = a[13], s.z = a[14];
            var _ = a[0], h = a[1], c = a[2], d = a[4], u = a[5], f = a[6], m = a[8], E = a[9], T = a[10], g = l.x = Math.sqrt(_ * _ + h * h + c * c), p = l.y = Math.sqrt(d * d + u * u + f * f), S = l.z = Math.sqrt(m * m + E * E + T * T);
            if (r.isZero(g) || r.isZero(p) || r.isZero(S)) return o[1] = o[2] = o[3] = o[4] = o[6] = o[7] = o[8] = o[9] = o[11] = o[12] = o[13] = o[14] = 0, 
            o[0] = o[5] = o[10] = o[15] = 1, !1;
            var R = L._tempVector0;
            R.x = m / S, R.y = E / S, R.z = T / S;
            var v = L._tempVector1;
            v.x = _ / g, v.y = h / g, v.z = c / g;
            var I = L._tempVector2;
            n.cross(R, v, I);
            var x = L._tempVector1;
            return n.cross(I, R, x), o[3] = o[7] = o[11] = o[12] = o[13] = o[14] = 0, o[15] = 1, 
            o[0] = x.x, o[1] = x.y, o[2] = x.z, o[4] = I.x, o[5] = I.y, o[6] = I.z, o[8] = R.x, 
            o[9] = R.y, o[10] = R.z, o[0] * _ + o[1] * h + o[2] * c < 0 && (l.x = -g), o[4] * d + o[5] * u + o[6] * f < 0 && (l.y = -p), 
            o[8] * m + o[9] * E + o[10] * T < 0 && (l.z = -S), !0;
        }
        decomposeYawPitchRoll(e) {
            var t = Math.asin(-this.elements[9]);
            e.y = t, Math.cos(t) > r.zeroTolerance ? (e.z = Math.atan2(this.elements[1], this.elements[5]), 
            e.x = Math.atan2(this.elements[8], this.elements[10])) : (e.z = Math.atan2(-this.elements[4], this.elements[0]), 
            e.x = 0);
        }
        normalize() {
            var e = this.elements, t = e[0], r = e[1], i = e[2], a = Math.sqrt(t * t + r * r + i * i);
            if (!a) return e[0] = 0, e[1] = 0, void (e[2] = 0);
            1 != a && (a = 1 / a, e[0] = t * a, e[1] = r * a, e[2] = i * a);
        }
        transpose() {
            var e, t;
            return t = (e = this.elements)[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], 
            e[8] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[7], 
            e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
        }
        invert(e) {
            var t = this.elements, r = e.elements, i = t[0], a = t[1], n = t[2], s = t[3], o = t[4], l = t[5], _ = t[6], h = t[7], c = t[8], d = t[9], u = t[10], f = t[11], m = t[12], E = t[13], T = t[14], g = t[15], p = i * l - a * o, S = i * _ - n * o, R = i * h - s * o, v = a * _ - n * l, I = a * h - s * l, x = n * h - s * _, A = c * E - d * m, D = c * T - u * m, M = c * g - f * m, L = d * T - u * E, C = d * g - f * E, y = u * g - f * T, O = p * y - S * C + R * L + v * M - I * D + x * A;
            0 !== Math.abs(O) && (O = 1 / O, r[0] = (l * y - _ * C + h * L) * O, r[1] = (n * C - a * y - s * L) * O, 
            r[2] = (E * x - T * I + g * v) * O, r[3] = (u * I - d * x - f * v) * O, r[4] = (_ * M - o * y - h * D) * O, 
            r[5] = (i * y - n * M + s * D) * O, r[6] = (T * R - m * x - g * S) * O, r[7] = (c * x - u * R + f * S) * O, 
            r[8] = (o * C - l * M + h * A) * O, r[9] = (a * M - i * C - s * A) * O, r[10] = (m * I - E * R + g * p) * O, 
            r[11] = (d * R - c * I - f * p) * O, r[12] = (l * D - o * L - _ * A) * O, r[13] = (i * L - a * D + n * A) * O, 
            r[14] = (E * S - m * v - T * p) * O, r[15] = (c * v - d * S + u * p) * O);
        }
        static billboard(e, t, i, a, s, o) {
            n.subtract(e, t, L._tempVector0);
            var l = n.scalarLengthSquared(L._tempVector0);
            r.isZero(l) ? (n.scale(s, -1, L._tempVector1), L._tempVector1.cloneTo(L._tempVector0)) : n.scale(L._tempVector0, 1 / Math.sqrt(l), L._tempVector0), 
            n.cross(a, L._tempVector0, L._tempVector2), n.normalize(L._tempVector2, L._tempVector2), 
            n.cross(L._tempVector0, L._tempVector2, L._tempVector3);
            var _ = L._tempVector2, h = L._tempVector3, c = L._tempVector0, d = e, u = o.elements;
            u[0] = _.x, u[1] = _.y, u[2] = _.z, u[3] = 0, u[4] = h.x, u[5] = h.y, u[6] = h.z, 
            u[7] = 0, u[8] = c.x, u[9] = c.y, u[10] = c.z, u[11] = 0, u[12] = d.x, u[13] = d.y, 
            u[14] = d.z, u[15] = 1;
        }
        identity() {
            var e = this.elements;
            e[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0, 
            e[0] = e[5] = e[10] = e[15] = 1;
        }
        cloneTo(e) {
            var t, r, i;
            if ((r = this.elements) !== (i = e.elements)) for (t = 0; t < 16; ++t) i[t] = r[t];
        }
        clone() {
            var e = new L();
            return this.cloneTo(e), e;
        }
        static translation(e, t) {
            var r = t.elements;
            r[0] = r[5] = r[10] = r[15] = 1, r[12] = e.x, r[13] = e.y, r[14] = e.z;
        }
        getTranslationVector(e) {
            var t = this.elements;
            e.x = t[12], e.y = t[13], e.z = t[14];
        }
        setTranslationVector(e) {
            var t = this.elements, r = e;
            t[12] = r.x, t[13] = r.y, t[14] = r.z;
        }
        getForward(e) {
            var t = this.elements;
            e.x = -t[8], e.y = -t[9], e.z = -t[10];
        }
        setForward(e) {
            var t = this.elements;
            t[8] = -e.x, t[9] = -e.y, t[10] = -e.z;
        }
    }
    L._tempMatrix4x4 = new L(), L.TEMPMatrix0 = new L(), L.TEMPMatrix1 = new L(), L._tempVector0 = new n(), 
    L._tempVector1 = new n(), L._tempVector2 = new n(), L._tempVector3 = new n(), L._tempQuaternion = new u(), 
    L.DEFAULT = new L(), L.ZERO = new L(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    class C {
        constructor(e = 0, t = 0, r = 0, i = 1, a = null) {
            var n;
            (n = a || new Float32Array(4))[0] = e, n[1] = t, n[2] = r, n[3] = i, this.elements = n;
        }
        static _dotArray(e, t) {
            return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
        }
        static _normalizeArray(e, t) {
            var r = e[0], i = e[1], a = e[2], n = e[3], s = r * r + i * i + a * a + n * n;
            s > 0 && (s = 1 / Math.sqrt(s), t[0] = r * s, t[1] = i * s, t[2] = a * s, t[3] = n * s);
        }
        static _lerpArray(e, t, r, i) {
            var a = 1 - r;
            C._dotArray(e, t) >= 0 ? (i[0] = a * e[0] + r * t[0], i[1] = a * e[1] + r * t[1], 
            i[2] = a * e[2] + r * t[2], i[3] = a * e[3] + r * t[3]) : (i[0] = a * e[0] - r * t[0], 
            i[1] = a * e[1] - r * t[1], i[2] = a * e[2] - r * t[2], i[3] = a * e[3] - r * t[3]), 
            C._normalizeArray(i, i);
        }
        static createFromYawPitchRoll(e, t, r, i) {
            var a = .5 * r, n = .5 * t, s = .5 * e, o = Math.sin(a), l = Math.cos(a), _ = Math.sin(n), h = Math.cos(n), c = Math.sin(s), d = Math.cos(s), u = i.elements;
            u[0] = d * _ * l + c * h * o, u[1] = c * h * l - d * _ * o, u[2] = d * h * o - c * _ * l, 
            u[3] = d * h * l + c * _ * o;
        }
        static multiply(e, t, r) {
            var i = e.elements, a = t.elements, n = r.elements, s = i[0], o = i[1], l = i[2], _ = i[3], h = a[0], c = a[1], d = a[2], u = a[3], f = o * d - l * c, m = l * h - s * d, E = s * c - o * h, T = s * h + o * c + l * d;
            n[0] = s * u + h * _ + f, n[1] = o * u + c * _ + m, n[2] = l * u + d * _ + E, n[3] = _ * u - T;
        }
        static arcTanAngle(e, t) {
            return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : e < 0 ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
        }
        static angleTo(e, t, r) {
            M.subtract(t, e, C.TEMPVector30), M.normalize(C.TEMPVector30, C.TEMPVector30), r.elements[0] = Math.asin(C.TEMPVector30.y), 
            r.elements[1] = C.arcTanAngle(-C.TEMPVector30.z, -C.TEMPVector30.x);
        }
        static createFromAxisAngle(e, t, r) {
            var i = r.elements, a = e.elements;
            t *= .5;
            var n = Math.sin(t);
            i[0] = n * a[0], i[1] = n * a[1], i[2] = n * a[2], i[3] = Math.cos(t);
        }
        static createFromMatrix3x3(e, t) {
            var r, i = t.elements, a = e.elements, n = a[0] + a[4] + a[8];
            if (n > 0) r = Math.sqrt(n + 1), i[3] = .5 * r, r = .5 / r, i[0] = (a[5] - a[7]) * r, 
            i[1] = (a[6] - a[2]) * r, i[2] = (a[1] - a[3]) * r; else {
                var s = 0;
                a[4] > a[0] && (s = 1), a[8] > a[3 * s + s] && (s = 2);
                var o = (s + 1) % 3, l = (s + 2) % 3;
                r = Math.sqrt(a[3 * s + s] - a[3 * o + o] - a[3 * l + l] + 1), i[s] = .5 * r, r = .5 / r, 
                i[3] = (a[3 * o + l] - a[3 * l + o]) * r, i[o] = (a[3 * o + s] + a[3 * s + o]) * r, 
                i[l] = (a[3 * l + s] + a[3 * s + l]) * r;
            }
        }
        static createFromMatrix4x4(e, t) {
            var r, i, a = e.elements, n = t.elements, s = a[0] + a[5] + a[10];
            s > 0 ? (r = Math.sqrt(s + 1), n[3] = .5 * r, r = .5 / r, n[0] = (a[6] - a[9]) * r, 
            n[1] = (a[8] - a[2]) * r, n[2] = (a[1] - a[4]) * r) : a[0] >= a[5] && a[0] >= a[10] ? (i = .5 / (r = Math.sqrt(1 + a[0] - a[5] - a[10])), 
            n[0] = .5 * r, n[1] = (a[1] + a[4]) * i, n[2] = (a[2] + a[8]) * i, n[3] = (a[6] - a[9]) * i) : a[5] > a[10] ? (i = .5 / (r = Math.sqrt(1 + a[5] - a[0] - a[10])), 
            n[0] = (a[4] + a[1]) * i, n[1] = .5 * r, n[2] = (a[9] + a[6]) * i, n[3] = (a[8] - a[2]) * i) : (i = .5 / (r = Math.sqrt(1 + a[10] - a[0] - a[5])), 
            n[0] = (a[8] + a[2]) * i, n[1] = (a[9] + a[6]) * i, n[2] = .5 * r, n[3] = (a[1] - a[4]) * i);
        }
        static slerp(e, t, r, i) {
            var a, n, s, o, l, _ = e.elements, h = t.elements, c = i.elements, d = _[0], u = _[1], f = _[2], m = _[3], E = h[0], T = h[1], g = h[2], p = h[3];
            return (n = d * E + u * T + f * g + m * p) < 0 && (n = -n, E = -E, T = -T, g = -g, 
            p = -p), 1 - n > 1e-6 ? (a = Math.acos(n), s = Math.sin(a), o = Math.sin((1 - r) * a) / s, 
            l = Math.sin(r * a) / s) : (o = 1 - r, l = r), c[0] = o * d + l * E, c[1] = o * u + l * T, 
            c[2] = o * f + l * g, c[3] = o * m + l * p, c;
        }
        static lerp(e, t, r, i) {
            C._lerpArray(e.elements, t.elements, r, i.elements);
        }
        static add(e, t, r) {
            var i = r.elements, a = e.elements, n = t.elements;
            i[0] = a[0] + n[0], i[1] = a[1] + n[1], i[2] = a[2] + n[2], i[3] = a[3] + n[3];
        }
        static dot(e, t) {
            return C._dotArray(e.elements, t.elements);
        }
        get x() {
            return this.elements[0];
        }
        set x(e) {
            this.elements[0] = e;
        }
        get y() {
            return this.elements[1];
        }
        set y(e) {
            this.elements[1] = e;
        }
        get z() {
            return this.elements[2];
        }
        set z(e) {
            this.elements[2] = e;
        }
        get w() {
            return this.elements[3];
        }
        set w(e) {
            this.elements[3] = e;
        }
        scaling(e, t) {
            var r = t.elements, i = this.elements;
            r[0] = i[0] * e, r[1] = i[1] * e, r[2] = i[2] * e, r[3] = i[3] * e;
        }
        normalize(e) {
            C._normalizeArray(this.elements, e.elements);
        }
        length() {
            var e = this.elements, t = e[0], r = e[1], i = e[2], a = e[3];
            return Math.sqrt(t * t + r * r + i * i + a * a);
        }
        rotateX(e, t) {
            var r = t.elements, i = this.elements;
            e *= .5;
            var a = i[0], n = i[1], s = i[2], o = i[3], l = Math.sin(e), _ = Math.cos(e);
            r[0] = a * _ + o * l, r[1] = n * _ + s * l, r[2] = s * _ - n * l, r[3] = o * _ - a * l;
        }
        rotateY(e, t) {
            var r = t.elements, i = this.elements;
            e *= .5;
            var a = i[0], n = i[1], s = i[2], o = i[3], l = Math.sin(e), _ = Math.cos(e);
            r[0] = a * _ - s * l, r[1] = n * _ + o * l, r[2] = s * _ + a * l, r[3] = o * _ - n * l;
        }
        rotateZ(e, t) {
            var r = t.elements, i = this.elements;
            e *= .5;
            var a = i[0], n = i[1], s = i[2], o = i[3], l = Math.sin(e), _ = Math.cos(e);
            r[0] = a * _ + n * l, r[1] = n * _ - a * l, r[2] = s * _ + o * l, r[3] = o * _ - s * l;
        }
        getYawPitchRoll(e) {
            M.transformQuat(M.ForwardRH, this, C.TEMPVector31), M.transformQuat(M.Up, this, C.TEMPVector32);
            var t = C.TEMPVector32.elements;
            C.angleTo(M.ZERO, C.TEMPVector31, C.TEMPVector33);
            var r = C.TEMPVector33.elements;
            r[0] == Math.PI / 2 ? (r[1] = C.arcTanAngle(t[2], t[0]), r[2] = 0) : r[0] == -Math.PI / 2 ? (r[1] = C.arcTanAngle(-t[2], -t[0]), 
            r[2] = 0) : (L.createRotationY(-r[1], C.TEMPMatrix0), L.createRotationX(-r[0], C.TEMPMatrix1), 
            M.transformCoordinate(C.TEMPVector32, C.TEMPMatrix0, C.TEMPVector32), M.transformCoordinate(C.TEMPVector32, C.TEMPMatrix1, C.TEMPVector32), 
            r[2] = C.arcTanAngle(t[1], -t[0])), r[1] <= -Math.PI && (r[1] = Math.PI), r[2] <= -Math.PI && (r[2] = Math.PI), 
            r[1] >= Math.PI && r[2] >= Math.PI && (r[1] = 0, r[2] = 0, r[0] = Math.PI - r[0]);
            var i = e.elements;
            i[0] = r[1], i[1] = r[0], i[2] = r[2];
        }
        invert(e) {
            var t = e.elements, r = this.elements, i = r[0], a = r[1], n = r[2], s = r[3], o = i * i + a * a + n * n + s * s, l = o ? 1 / o : 0;
            t[0] = -i * l, t[1] = -a * l, t[2] = -n * l, t[3] = s * l;
        }
        identity() {
            var e = this.elements;
            e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1;
        }
        fromArray(e, t = 0) {
            this.elements[0] = e[t + 0], this.elements[1] = e[t + 1], this.elements[2] = e[t + 2], 
            this.elements[3] = e[t + 3];
        }
        cloneTo(e) {
            var t, r, i;
            if ((r = this.elements) !== (i = e.elements)) for (t = 0; t < 4; ++t) i[t] = r[t];
        }
        clone() {
            var e = new C();
            return this.cloneTo(e), e;
        }
        equals(e) {
            var t = this.elements, i = e.elements;
            return r.nearEqual(t[0], i[0]) && r.nearEqual(t[1], i[1]) && r.nearEqual(t[2], i[2]) && r.nearEqual(t[3], i[3]);
        }
        static rotationLookAt(e, t, r) {
            C.lookAt(M.ZERO, e, t, r);
        }
        static lookAt(e, t, r, i) {
            d.lookAt(e, t, r, C._tempMatrix3x3), C.rotationMatrix(C._tempMatrix3x3, i);
        }
        lengthSquared() {
            var e = this.elements[0], t = this.elements[1], r = this.elements[2], i = this.elements[3];
            return e * e + t * t + r * r + i * i;
        }
        static invert(e, t) {
            var i = e.elements, a = t.elements, n = e.lengthSquared();
            r.isZero(n) || (n = 1 / n, a[0] = -i[0] * n, a[1] = -i[1] * n, a[2] = -i[2] * n, 
            a[3] = i[3] * n);
        }
        static rotationMatrix(e, t) {
            var r, i, a = e.elements, n = a[0], s = a[1], o = a[2], l = a[3], _ = a[4], h = a[5], c = a[6], d = a[7], u = a[8], f = t.elements, m = n + _ + u;
            m > 0 ? (r = Math.sqrt(m + 1), f[3] = .5 * r, r = .5 / r, f[0] = (h - d) * r, f[1] = (c - o) * r, 
            f[2] = (s - l) * r) : n >= _ && n >= u ? (i = .5 / (r = Math.sqrt(1 + n - _ - u)), 
            f[0] = .5 * r, f[1] = (s + l) * i, f[2] = (o + c) * i, f[3] = (h - d) * i) : _ > u ? (i = .5 / (r = Math.sqrt(1 + _ - n - u)), 
            f[0] = (l + s) * i, f[1] = .5 * r, f[2] = (d + h) * i, f[3] = (c - o) * i) : (i = .5 / (r = Math.sqrt(1 + u - n - _)), 
            f[0] = (c + o) * i, f[1] = (d + h) * i, f[2] = .5 * r, f[3] = (s - l) * i);
        }
    }
    C.TEMPVector30 = new M(), C.TEMPVector31 = new M(), C.TEMPVector32 = new M(), C.TEMPVector33 = new M(), 
    C.TEMPMatrix0 = new L(), C.TEMPMatrix1 = new L(), C._tempMatrix3x3 = new d(), C.DEFAULT = new C(), 
    C.NAN = new C(NaN, NaN, NaN, NaN);
    class y {
        constructor() {
            this._referenceCount = 0, this._clip = null, this._nodeOwners = [], this._currentFrameIndices = null, 
            this._realtimeDatas = [], this._scripts = null, this.speed = 1, this.clipStart = 0, 
            this.clipEnd = 1;
        }
        get clip() {
            return this._clip;
        }
        set clip(e) {
            if (this._clip !== e) {
                if (this._clip && this._referenceCount > 0 && this._clip._removeReference(this._referenceCount), 
                e) {
                    var r = this._realtimeDatas, i = e._nodes, a = i.count;
                    this._currentFrameIndices = new Int16Array(a), this._resetFrameIndices(), this._referenceCount > 0 && e._addReference(this._referenceCount), 
                    this._realtimeDatas.length = a;
                    for (var s = 0; s < a; s++) switch (i.getNodeByIndex(s).type) {
                      case 0:
                        break;

                      case 1:
                      case 3:
                      case 4:
                        r[s] = t.Render.supportWebGLPlusAnimation ? new M() : new n();
                        break;

                      case 2:
                        r[s] = t.Render.supportWebGLPlusAnimation ? new C() : new u();
                        break;

                      default:
                        throw "AnimationClipParser04:unknown type.";
                    }
                }
                this._clip = e;
            }
        }
        _getReferenceCount() {
            return this._referenceCount;
        }
        _addReference(e = 1) {
            this._clip && this._clip._addReference(e), this._referenceCount += e;
        }
        _removeReference(e = 1) {
            this._clip && this._clip._removeReference(e), this._referenceCount -= e;
        }
        _clearReference() {
            this._removeReference(-this._referenceCount);
        }
        _resetFrameIndices() {
            for (var e = 0, t = this._currentFrameIndices.length; e < t; e++) this._currentFrameIndices[e] = -1;
        }
        addScript(e) {
            var t = new e();
            return this._scripts = this._scripts || [], this._scripts.push(t), t;
        }
        getScript(e) {
            if (this._scripts) for (var t = 0, r = this._scripts.length; t < r; t++) {
                var i = this._scripts[t];
                if (i instanceof e) return i;
            }
            return null;
        }
        getScripts(e) {
            var t;
            if (this._scripts) for (var r = 0, i = this._scripts.length; r < i; r++) {
                var a = this._scripts[r];
                a instanceof e && (t = t || []).push(a);
            }
            return t;
        }
        cloneTo(e) {
            var t = e;
            t.name = this.name, t.speed = this.speed, t.clipStart = this.clipStart, t.clipEnd = this.clipEnd, 
            t.clip = this._clip;
        }
        clone() {
            var e = new y();
            return this.cloneTo(e), e;
        }
    }
    class O {
        constructor() {
            this.indexInList = -1, this.referenceCount = 0, this.updateMark = -1, this.type = -1, 
            this.fullPath = null, this.propertyOwner = null, this.property = null, this.defaultValue = null, 
            this.crossFixedValue = null;
        }
        saveCrossFixedValue() {
            var e = this.propertyOwner;
            if (e) switch (this.type) {
              case 0:
                for (var t = this.property, r = t.length - 1, i = 0; i < r && (e = e[t[i]]); i++) ;
                this.crossFixedValue = e[t[r]];
                break;

              case 1:
                var a = e.localPosition;
                this.crossFixedValue || (this.crossFixedValue = new n()), this.crossFixedValue.x = a.x, 
                this.crossFixedValue.y = a.y, this.crossFixedValue.z = a.z;
                break;

              case 2:
                var s = e.localRotation;
                this.crossFixedValue || (this.crossFixedValue = new u()), this.crossFixedValue.x = s.x, 
                this.crossFixedValue.y = s.y, this.crossFixedValue.z = s.z, this.crossFixedValue.w = s.w;
                break;

              case 3:
                var o = e.localScale;
                this.crossFixedValue || (this.crossFixedValue = new n()), this.crossFixedValue.x = o.x, 
                this.crossFixedValue.y = o.y, this.crossFixedValue.z = o.z;
                break;

              case 4:
                var l = e.localRotationEuler;
                this.crossFixedValue || (this.crossFixedValue = new n()), this.crossFixedValue.x = l.x, 
                this.crossFixedValue.y = l.y, this.crossFixedValue.z = l.z;
                break;

              default:
                throw "Animator:unknown type.";
            }
        }
    }
    class N extends t.Component {
        constructor() {
            super(), this._keyframeNodeOwners = [], this._linkAvatarSpritesData = {}, this._linkAvatarSprites = [], 
            this._renderableSprites = [], this.cullingMode = N.CULLINGMODE_CULLCOMPLETELY, this._controllerLayers = [], 
            this._linkSprites = {}, this._speed = 1, this._keyframeNodeOwnerMap = {}, this._updateMark = 0;
        }
        static _update(e) {
            for (var t = e._animatorPool, r = t.elements, i = 0, a = t.length; i < a; i++) {
                var n = r[i];
                n && n.enabled && n._update();
            }
        }
        get speed() {
            return this._speed;
        }
        set speed(e) {
            this._speed = e;
        }
        _linkToSprites(e) {
            for (var t in e) {
                for (var r = this.owner, i = e[t], a = 0, n = i.length; a < n; a++) {
                    var s = i[a];
                    if ("" === s) break;
                    if (!(r = r.getChildByName(s))) break;
                }
                r && this.linkSprite3DToAvatarNode(t, r);
            }
        }
        _addKeyframeNodeOwner(e, t, r) {
            var i = t._indexInList, a = t.fullPath, n = this._keyframeNodeOwnerMap[a];
            if (n) n.referenceCount++, e[i] = n; else {
                for (var s = r, o = 0, l = t.propertyCount; o < l && (s = s[t.getPropertyByIndex(o)]); o++) ;
                (n = this._keyframeNodeOwnerMap[a] = new O()).fullPath = a, n.indexInList = this._keyframeNodeOwners.length, 
                n.referenceCount = 1, n.propertyOwner = r;
                var _ = t.propertyCount, h = [];
                for (o = 0; o < _; o++) h[o] = t.getPropertyByIndex(o);
                if (n.property = h, n.type = t.type, s) if (0 === t.type) n.defaultValue = s; else {
                    var c = new s.constructor();
                    s.cloneTo(c), n.defaultValue = c;
                }
                this._keyframeNodeOwners.push(n), e[i] = n;
            }
        }
        _removeKeyframeNodeOwner(e, t) {
            var r = t.fullPath, i = this._keyframeNodeOwnerMap[r];
            i && (i.referenceCount--, 0 === i.referenceCount && (delete this._keyframeNodeOwnerMap[r], 
            this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(i), 1)), e[t._indexInList] = null);
        }
        _getOwnersByClip(e) {
            var t = e._clip._nodes, r = t.count, i = e._nodeOwners;
            i.length = r;
            for (var a = 0; a < r; a++) {
                for (var n = t.getNodeByIndex(a), s = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name] : this.owner, o = 0, l = n.ownerPathCount; o < l; o++) {
                    var _ = n.getOwnerPathByIndex(o);
                    if ("" === _) break;
                    if (!(s = s.getChildByName(_))) break;
                }
                if (s) {
                    var h = n.propertyOwner;
                    h && (s = s[h]), s && this._addKeyframeNodeOwner(i, n, s);
                }
            }
        }
        _updatePlayer(e, t, r, i) {
            var a = e._clip._duration * (e.clipEnd - e.clipStart), n = t._elapsedTime, s = n + r;
            t._lastElapsedTime = n, t._elapsedTime = s;
            var o = s / a;
            t._normalizedTime = o;
            var l = o % 1;
            t._normalizedPlayTime = l < 0 ? l + 1 : l, t._duration = a;
            var _ = e._scripts;
            if (!i && s >= a) {
                if (t._finish = !0, t._elapsedTime = a, t._normalizedPlayTime = 1, _) for (var h = 0, c = _.length; h < c; h++) _[h].onStateExit();
            } else if (_) for (h = 0, c = _.length; h < c; h++) _[h].onStateUpdate();
        }
        _eventScript(e, t, r, i, a) {
            if (a) for (var n = t.length; r < n; r++) {
                var s = t[r];
                if (!(s.time <= i)) break;
                for (var o = 0, l = e.length; o < l; o++) {
                    var _ = e[o], h = _[s.eventName];
                    h && h.apply(_, s.params);
                }
            } else for (;r >= 0 && (s = t[r]).time >= i; r--) for (o = 0, l = e.length; o < l; o++) (h = (_ = e[o])[s.eventName]) && h.apply(_, s.params);
            return r;
        }
        _updateEventScript(e, t) {
            var r = this.owner._scripts;
            if (r) {
                var i = e._clip, a = i._animationEvents, n = i._duration, s = t._elapsedTime, o = s % n, l = Math.abs(Math.floor(s / n) - Math.floor(t._lastElapsedTime / n)), _ = t._elapsedTime >= t._lastElapsedTime;
                if (t._lastIsFront !== _ && (_ ? t._playEventIndex++ : t._playEventIndex--, t._lastIsFront = _), 
                _) {
                    t._playEventIndex = this._eventScript(r, a, t._playEventIndex, l > 0 ? n : o, !0);
                    for (var h = 0, c = l - 1; h < c; h++) this._eventScript(r, a, 0, n, !0);
                    l > 0 && o > 0 && (t._playEventIndex = this._eventScript(r, a, 0, o, !0));
                } else {
                    t._playEventIndex = this._eventScript(r, a, t._playEventIndex, l > 0 ? 0 : o, !1);
                    var d = a.length - 1;
                    for (h = 0, c = l - 1; h < c; h++) this._eventScript(r, a, d, 0, !1);
                    l > 0 && o > 0 && (t._playEventIndex = this._eventScript(r, a, d, o, !1));
                }
            }
        }
        _updateClipDatas(e, t, r, i) {
            var a = e._clip, n = a._duration, s = e.clipStart * n + r._normalizedPlayTime * r._duration, o = e._currentFrameIndices, l = r._elapsedTime > r._lastElapsedTime;
            a._evaluateClipDatasRealTime(a._nodes, s, o, t, l, e._realtimeDatas);
        }
        _applyFloat(e, t, r, i, a, n, s) {
            if (r.updateMark === this._updateMark) if (i) e[t] += a * s; else {
                var o = e[t];
                e[t] = o + a * (s - o);
            } else if (n) e[t] = i ? r.defaultValue + s : s; else if (i) e[t] = r.defaultValue + a * s; else {
                var l = r.defaultValue;
                e[t] = l + a * (s - l);
            }
        }
        _applyPositionAndRotationEuler(e, t, r, i, a, n) {
            if (e.updateMark === this._updateMark) if (t) n.x += r * a.x, n.y += r * a.y, n.z += r * a.z; else {
                var s = n.x, o = n.y, l = n.z;
                n.x = s + r * (a.x - s), n.y = o + r * (a.y - o), n.z = l + r * (a.z - l);
            } else if (i) if (t) {
                var _ = e.defaultValue;
                n.x = _.x + a.x, n.y = _.y + a.y, n.z = _.z + a.z;
            } else n.x = a.x, n.y = a.y, n.z = a.z; else if (_ = e.defaultValue, t) n.x = _.x + r * a.x, 
            n.y = _.y + r * a.y, n.z = _.z + r * a.z; else {
                var h = _.x, c = _.y, d = _.z;
                n.x = h + r * (a.x - h), n.y = c + r * (a.y - c), n.z = d + r * (a.z - d);
            }
        }
        _applyRotation(e, t, r, i, a, n) {
            if (e.updateMark === this._updateMark) if (t) {
                var s = N._tempQuaternion1;
                v.quaternionWeight(a, r, s), s.normalize(s), u.multiply(n, s, n);
            } else u.lerp(n, a, r, n); else if (i) if (t) {
                var o = e.defaultValue;
                u.multiply(o, a, n);
            } else n.x = a.x, n.y = a.y, n.z = a.z, n.w = a.w; else o = e.defaultValue, t ? (s = N._tempQuaternion1, 
            v.quaternionWeight(a, r, s), s.normalize(s), u.multiply(o, s, n)) : u.lerp(o, a, r, n);
        }
        _applyScale(e, t, r, i, a, n) {
            if (e.updateMark === this._updateMark) if (t) {
                var s = N._tempVector31;
                v.scaleWeight(a, r, s), n.x = n.x * s.x, n.y = n.y * s.y, n.z = n.z * s.z;
            } else v.scaleBlend(n, a, r, n); else if (i) if (t) {
                var o = e.defaultValue;
                n.x = o.x * a.x, n.y = o.y * a.y, n.z = o.z * a.z;
            } else n.x = a.x, n.y = a.y, n.z = a.z; else o = e.defaultValue, t ? (s = N._tempVector31, 
            v.scaleWeight(a, r, s), n.x = o.x * s.x, n.y = o.y * s.y, n.z = o.z * s.z) : v.scaleBlend(o, a, r, n);
        }
        _applyCrossData(e, t, r, i, a, n, s) {
            var o = e.propertyOwner;
            if (o) {
                switch (e.type) {
                  case 0:
                    for (var l = e.property, _ = l.length - 1, h = 0; h < _ && (o = o[l[h]]); h++) ;
                    var c = a + s * (n - a);
                    this._applyFloat(o, l[_], e, t, r, i, c);
                    break;

                  case 1:
                    var d = o.localPosition, f = N._tempVector30, m = a.x, E = a.y, T = a.z;
                    f.x = m + s * (n.x - m), f.y = E + s * (n.y - E), f.z = T + s * (n.z - T), this._applyPositionAndRotationEuler(e, t, r, i, f, d), 
                    o.localPosition = d;
                    break;

                  case 2:
                    var g = o.localRotation, p = N._tempQuaternion0;
                    u.lerp(a, n, s, p), this._applyRotation(e, t, r, i, p, g), o.localRotation = g;
                    break;

                  case 3:
                    var S = o.localScale, R = N._tempVector30;
                    v.scaleBlend(a, n, s, R), this._applyScale(e, t, r, i, R, S), o.localScale = S;
                    break;

                  case 4:
                    var I = o.localRotationEuler, x = N._tempVector30;
                    m = a.x, E = a.y, T = a.z, x.x = m + s * (n.x - m), x.y = E + s * (n.y - E), x.z = T + s * (n.z - T), 
                    this._applyPositionAndRotationEuler(e, t, r, i, x, I), o.localRotationEuler = I;
                }
                e.updateMark = this._updateMark;
            }
        }
        _setClipDatasToNode(e, t, r, i) {
            for (var a = e._realtimeDatas, n = e._clip._nodes, s = e._nodeOwners, o = 0, l = n.count; o < l; o++) {
                var _ = s[o];
                if (_) {
                    var h = _.propertyOwner;
                    if (h) {
                        switch (_.type) {
                          case 0:
                            for (var c = _.property, d = c.length - 1, u = 0; u < d && (h = h[c[u]]); u++) ;
                            this._applyFloat(h, c[d], _, t, r, i, a[o]);
                            break;

                          case 1:
                            var f = h.localPosition;
                            this._applyPositionAndRotationEuler(_, t, r, i, a[o], f), h.localPosition = f;
                            break;

                          case 2:
                            var m = h.localRotation;
                            this._applyRotation(_, t, r, i, a[o], m), h.localRotation = m;
                            break;

                          case 3:
                            var E = h.localScale;
                            this._applyScale(_, t, r, i, a[o], E), h.localScale = E;
                            break;

                          case 4:
                            var T = h.localRotationEuler;
                            this._applyPositionAndRotationEuler(_, t, r, i, a[o], T), h.localRotationEuler = T;
                        }
                        _.updateMark = this._updateMark;
                    }
                }
            }
        }
        _setCrossClipDatasToNode(e, t, r, i, a) {
            for (var n = e._crossNodesOwners, s = e._crossNodesOwnersCount, o = e.blendingMode !== A.BLENDINGMODE_OVERRIDE, l = e.defaultWeight, _ = r._realtimeDatas, h = e._destCrossClipNodeIndices, c = r._nodeOwners, d = t._realtimeDatas, u = e._srcCrossClipNodeIndices, f = t._nodeOwners, m = 0; m < s; m++) {
                var E = n[m];
                if (E) {
                    var T = u[m], g = h[m], p = -1 !== T ? d[T] : c[g].defaultValue, S = -1 !== g ? _[g] : f[T].defaultValue;
                    this._applyCrossData(E, o, l, a, p, S, i);
                }
            }
        }
        _setFixedCrossClipDatasToNode(e, t, r, i) {
            for (var a = e._crossNodesOwners, n = e._crossNodesOwnersCount, s = e.blendingMode !== A.BLENDINGMODE_OVERRIDE, o = e.defaultWeight, l = t._realtimeDatas, _ = e._destCrossClipNodeIndices, h = 0; h < n; h++) {
                var c = a[h];
                if (c) {
                    var d = _[h], u = c.crossFixedValue, f = -1 !== d ? l[d] : c.defaultValue;
                    this._applyCrossData(c, s, o, i, u, f, r);
                }
            }
        }
        _revertDefaultKeyframeNodes(e) {
            for (var t = e._nodeOwners, r = 0, i = t.length; r < i; r++) {
                var a = t[r];
                if (a) {
                    var n = a.propertyOwner;
                    if (n) switch (a.type) {
                      case 0:
                        for (var s = a.property, o = s.length - 1, l = 0; l < o && (n = n[s[l]]); l++) ;
                        n[s[o]] = a.defaultValue;
                        break;

                      case 1:
                        var _ = n.localPosition, h = a.defaultValue;
                        _.x = h.x, _.y = h.y, _.z = h.z, n.localPosition = _;
                        break;

                      case 2:
                        var c = n.localRotation, d = a.defaultValue;
                        c.x = d.x, c.y = d.y, c.z = d.z, c.w = d.w, n.localRotation = c;
                        break;

                      case 3:
                        var u = n.localScale;
                        h = a.defaultValue, u.x = h.x, u.y = h.y, u.z = h.z, n.localScale = u;
                        break;

                      case 4:
                        var f = n.localRotationEuler;
                        h = a.defaultValue, f.x = h.x, f.y = h.y, f.z = h.z, n.localRotationEuler = f;
                        break;

                      default:
                        throw "Animator:unknown type.";
                    }
                }
            }
        }
        _onAdded() {
            var e = this.owner._parent;
            this.owner._setHierarchyAnimator(this, e ? e._hierarchyAnimator : null), this.owner._changeAnimatorToLinkSprite3DNoAvatar(this, !0, []);
        }
        _onDestroy() {
            for (var e = 0, t = this._controllerLayers.length; e < t; e++) this._controllerLayers[e]._removeReference();
            var r = this.owner._parent;
            this.owner._clearHierarchyAnimator(this, r ? r._hierarchyAnimator : null);
        }
        _onEnable() {
            this.owner._scene._animatorPool.add(this);
            for (var e = 0, t = this._controllerLayers.length; e < t; e++) {
                if (this._controllerLayers[e].playOnWake) this.getDefaultState(e) && this.play(null, e, 0);
            }
        }
        _onDisable() {
            this.owner._scene._animatorPool.remove(this);
        }
        _handleSpriteOwnersBySprite(e, t, r) {
            for (var i = 0, a = this._controllerLayers.length; i < a; i++) for (var n = this._controllerLayers[i]._states, s = 0, o = n.length; s < o; s++) {
                var l = n[s], _ = l._clip, h = t.join("/"), c = _._nodesMap[h];
                if (c) for (var d = l._nodeOwners, u = 0, f = c.length; u < f; u++) e ? this._addKeyframeNodeOwner(d, c[u], r) : this._removeKeyframeNodeOwner(d, c[u]);
            }
        }
        _parse(e) {
            var r = e.avatar;
            if (r) {
                this.avatar = t.Loader.getRes(r.path);
                var i = r.linkSprites;
                this._linkSprites = i, this._linkToSprites(i);
            }
            e.clipPaths;
            for (var a = e.playOnWake, n = e.layers, s = 0; s < n.length; s++) {
                var o = n[s], l = new A(o.name);
                l.defaultWeight = 0 === s ? 1 : o.weight;
                var _ = o.blendingMode;
                _ && (l.blendingMode = _), this.addControllerLayer(l);
                for (var h = o.states, c = 0, d = h.length; c < d; c++) {
                    var u = h[c], f = u.clipPath;
                    if (f) {
                        var m, E = u.name;
                        if (m = t.Loader.getRes(f)) {
                            var T = new y();
                            T.name = E, T.clip = m, l.addState(T), 0 === c && (this.getControllerLayer(s).defaultState = T);
                        }
                    }
                }
                void 0 !== a && (l.playOnWake = a);
            }
            var g = e.cullingMode;
            void 0 !== g && (this.cullingMode = g);
        }
        _update() {
            var e = this.owner._scene.timer, r = e._delta / 1e3;
            if (0 !== this._speed && 0 !== r) {
                var i;
                if (this.cullingMode === N.CULLINGMODE_CULLCOMPLETELY) {
                    i = !1;
                    for (var a = 0, n = this._renderableSprites.length; a < n; a++) if (this._renderableSprites[a]._render._visible) {
                        i = !0;
                        break;
                    }
                } else i = !0;
                this._updateMark++;
                var s = e.scale;
                for (a = 0, n = this._controllerLayers.length; a < n; a++) {
                    var o = this._controllerLayers[a], l = o._playStateInfo, _ = o._crossPlayStateInfo;
                    switch (f = o.blendingMode !== A.BLENDINGMODE_OVERRIDE, o._playType) {
                      case 0:
                        var h = l._currentState, c = h._clip, d = this._speed * h.speed, u = l._finish;
                        if (u || this._updatePlayer(h, l, r * d, c.islooping), i) {
                            var f = o.blendingMode !== A.BLENDINGMODE_OVERRIDE;
                            this._updateClipDatas(h, f, l, s * d), this._setClipDatasToNode(h, f, o.defaultWeight, 0 === a), 
                            u || this._updateEventScript(h, l);
                        }
                        break;

                      case 1:
                        c = (h = l._currentState)._clip;
                        var m = o._crossPlayState, E = m._clip, T = o._crossDuration, g = _._startPlayTime, p = E._duration - g, S = T > p ? p / T : 1, R = this._speed * m.speed;
                        this._updatePlayer(m, _, r * S * R, E.islooping);
                        var v = (_._elapsedTime - g) / S / T;
                        v >= 1 ? i && (this._updateClipDatas(m, f, _, s * R), this._setClipDatasToNode(m, f, o.defaultWeight, 0 === a), 
                        o._playType = 0, l._currentState = m, _._cloneTo(l)) : (l._finish || (d = this._speed * h.speed, 
                        this._updatePlayer(h, l, r * d, c.islooping), i && this._updateClipDatas(h, f, l, s * d)), 
                        i && (this._updateClipDatas(m, f, _, s * S * R), this._setCrossClipDatasToNode(o, h, m, v, 0 === a))), 
                        i && (this._updateEventScript(h, l), this._updateEventScript(m, _));
                        break;

                      case 2:
                        E = (m = o._crossPlayState)._clip, T = o._crossDuration, g = _._startPlayTime, S = T > (p = E._duration - g) ? p / T : 1, 
                        R = this._speed * m.speed, this._updatePlayer(m, _, r * S * R, E.islooping), i && ((v = (_._elapsedTime - g) / S / T) >= 1 ? (this._updateClipDatas(m, f, _, s * R), 
                        this._setClipDatasToNode(m, f, 1, 0 === a), o._playType = 0, l._currentState = m, 
                        _._cloneTo(l)) : (this._updateClipDatas(m, f, _, s * S * R), this._setFixedCrossClipDatasToNode(o, m, v, 0 === a)), 
                        this._updateEventScript(m, _));
                    }
                }
                i && this._avatar && (t.Render.supportWebGLPlusAnimation && this._updateAnimationNodeWorldMatix(this._animationNodeLocalPositions, this._animationNodeLocalRotations, this._animationNodeLocalScales, this._animationNodeWorldMatrixs, this._animationNodeParentIndices), 
                this._updateAvatarNodesToSprite());
            }
        }
        _cloneTo(e) {
            var t = e;
            t.avatar = this.avatar, t.cullingMode = this.cullingMode;
            for (var r = 0, i = this._controllerLayers.length; r < i; r++) {
                var a = this._controllerLayers[r];
                t.addControllerLayer(a.clone());
                for (var n = a._states, s = 0, o = n.length; s < o; s++) {
                    var l = n[s].clone(), _ = t.getControllerLayer(r);
                    _.addState(l), 0 == s && (_.defaultState = l);
                }
            }
            t._linkSprites = this._linkSprites, t._linkToSprites(this._linkSprites);
        }
        getDefaultState(e = 0) {
            return this._controllerLayers[e].defaultState;
        }
        addState(e, t = 0) {
            this._controllerLayers[t].addState(e), console.warn("Animator:this function is discard,please use animatorControllerLayer.addState() instead.");
        }
        removeState(e, t = 0) {
            this._controllerLayers[t].removeState(e), console.warn("Animator:this function is discard,please use animatorControllerLayer.removeState() instead.");
        }
        addControllerLayer(e) {
            this._controllerLayers.push(e), e._animator = this, e._addReference();
            for (var t = e._states, r = 0, i = t.length; r < i; r++) this._getOwnersByClip(t[r]);
        }
        getControllerLayer(e = 0) {
            return this._controllerLayers[e];
        }
        play(e = null, t = 0, r = Number.NEGATIVE_INFINITY) {
            var i = this._controllerLayers[t];
            if (i) {
                var a = i.defaultState;
                if (!e && !a) throw new Error("Animator:must have default clip value,please set clip property.");
                var n = i._playStateInfo, s = n._currentState, o = e ? i._statesMap[e] : a, l = o._clip._duration;
                s !== o ? (r !== Number.NEGATIVE_INFINITY ? n._resetPlayState(l * r) : n._resetPlayState(0), 
                null !== s && s !== o && this._revertDefaultKeyframeNodes(s), i._playType = 0, n._currentState = o) : r !== Number.NEGATIVE_INFINITY && (n._resetPlayState(l * r), 
                i._playType = 0);
                var _ = o._scripts;
                if (_) for (var h = 0, c = _.length; h < c; h++) _[h].onStateEnter();
            } else console.warn("Invalid layerIndex " + t + ".");
        }
        crossFade(e, t, r = 0, i = Number.NEGATIVE_INFINITY) {
            var a = this._controllerLayers[r];
            if (a) {
                var n = a._statesMap[e];
                if (n) {
                    var s = a._playType;
                    if (-1 === s) return void this.play(e, r, i);
                    var o = a._crossPlayStateInfo, l = a._crossNodesOwners, _ = a._crossNodesOwnersIndicesMap, h = a._playStateInfo._currentState, c = n._nodeOwners, d = a._destCrossClipNodeIndices, u = n._clip, f = u._nodes, m = u._nodesDic;
                    switch (s) {
                      case 0:
                        var E = h._nodeOwners, T = a._srcCrossClipNodeIndices, g = h._clip, p = g._nodes, S = g._nodesDic;
                        a._playType = 1;
                        for (var R = ++a._crossMark, v = a._crossNodesOwnersCount = 0, I = 0, x = p.count; I < x; I++) {
                            var A = p.getNodeByIndex(I), D = A._indexInList, M = E[D];
                            if (M) {
                                var L = A.fullPath;
                                T[v] = D;
                                var C = m[L];
                                d[v] = C ? C._indexInList : -1, _[L] = R, l[v] = M, v++;
                            }
                        }
                        for (I = 0, x = f.count; I < x; I++) {
                            var y = (C = f.getNodeByIndex(I))._indexInList, O = c[y];
                            if (O) {
                                var N = C.fullPath;
                                S[N] || (T[v] = -1, d[v] = y, _[N] = R, l[v] = O, v++);
                            }
                        }
                        break;

                      case 1:
                      case 2:
                        for (a._playType = 2, I = 0, x = l.length; I < x; I++) {
                            var P = l[I];
                            P.saveCrossFixedValue(), C = m[P.fullPath], d[I] = C ? C._indexInList : -1;
                        }
                        for (v = a._crossNodesOwnersCount, R = a._crossMark, I = 0, x = f.count; I < x; I++) (O = c[y = (C = f.getNodeByIndex(I))._indexInList]) && _[N = C.fullPath] !== R && (d[v] = y, 
                        _[N] = R, P = c[y], l[v] = P, P.saveCrossFixedValue(), v++);
                    }
                    a._crossNodesOwnersCount = v, a._crossPlayState = n, a._crossDuration = h._clip._duration * t, 
                    i !== Number.NEGATIVE_INFINITY ? o._resetPlayState(u._duration * i) : o._resetPlayState(0);
                    var b = n._scripts;
                    if (b) for (I = 0, x = b.length; I < x; I++) b[I].onStateEnter();
                } else console.warn("Invalid name " + r + ".");
            } else console.warn("Invalid layerIndex " + r + ".");
        }
        get avatar() {
            return this._avatar;
        }
        set avatar(e) {
            if (this._avatar !== e) if (this._avatar = e, e) this._getAvatarOwnersAndInitDatasAsync(), 
            this.owner._changeHierarchyAnimatorAvatar(this, e); else {
                var t = this.owner._parent;
                this.owner._changeHierarchyAnimatorAvatar(this, t ? t._hierarchyAnimator._avatar : null);
            }
        }
        _getAvatarOwnersAndInitDatasAsync() {
            for (var e = 0, t = this._controllerLayers.length; e < t; e++) for (var r = this._controllerLayers[e]._states, i = 0, a = r.length; i < a; i++) this._getOwnersByClip(r[i]);
            for (var n in this._avatar._cloneDatasToAnimator(this), this._linkAvatarSpritesData) {
                var s = this._linkAvatarSpritesData[n];
                if (s) for (var o = 0, l = s.length; o < l; o++) this._isLinkSpriteToAnimationNode(s[o], n, !0);
            }
        }
        _isLinkSpriteToAnimationNode(e, t, r) {
            if (this._avatar) {
                var i = this._avatarNodeMap[t];
                if (i) if (r) {
                    e._transform._dummy = i.transform, this._linkAvatarSprites.push(e);
                    var a = i.transform, n = e.transform;
                    if (!n.owner.isStatic && a) {
                        var s = n.worldMatrix, o = this.owner._transform._parent;
                        if (o) v.matrix4x4MultiplyMFM(o.worldMatrix, a.getWorldMatrix(), s); else for (var l = s.elements, _ = a.getWorldMatrix(), h = 0; h < 16; h++) l[h] = _[h];
                        n.worldMatrix = s;
                    }
                } else e._transform._dummy = null, this._linkAvatarSprites.splice(this._linkAvatarSprites.indexOf(e), 1);
            }
        }
        _isLinkSpriteToAnimationNodeData(e, t, r) {
            var i = this._linkAvatarSpritesData[t];
            if (r) i || (this._linkAvatarSpritesData[t] = i = []), i.push(e); else {
                var a = i.indexOf(e);
                i.splice(a, 1);
            }
        }
        _updateAvatarNodesToSprite() {
            for (var e = 0, t = this._linkAvatarSprites.length; e < t; e++) {
                var r = this._linkAvatarSprites[e], i = r.transform._dummy, a = r.transform;
                if (!a.owner.isStatic && i) {
                    var n = a.worldMatrix, s = this.owner._transform;
                    v.matrix4x4MultiplyMFM(s.worldMatrix, i.getWorldMatrix(), n), a.worldMatrix = n;
                }
            }
        }
        linkSprite3DToAvatarNode(e, t) {
            return this._isLinkSpriteToAnimationNodeData(t, e, !0), this._isLinkSpriteToAnimationNode(t, e, !0), 
            !0;
        }
        unLinkSprite3DToAvatarNode(e) {
            if (e._hierarchyAnimator === this) {
                var t = e.transform._dummy;
                if (t) {
                    var r = t._owner.name;
                    return this._isLinkSpriteToAnimationNodeData(e, r, !1), this._isLinkSpriteToAnimationNode(e, r, !1), 
                    !0;
                }
                return !1;
            }
            throw "Animator:sprite3D must belong to this Animator";
        }
        getCurrentAnimatorPlayState(e = 0) {
            return this._controllerLayers[e]._playStateInfo;
        }
        _updateAnimationNodeWorldMatix(e, r, i, a, n) {
            t.LayaGL.instance.updateAnimationNodeWorldMatix(e, r, i, n, a);
        }
    }
    N._tempVector30 = new n(), N._tempVector31 = new n(), N._tempQuaternion0 = new u(), 
    N._tempQuaternion1 = new u(), N.CULLINGMODE_ALWAYSANIMATE = 0, N.CULLINGMODE_CULLCOMPLETELY = 2;
    class P {
        constructor() {
            this.source = null, this.destination = null, this.camera = null, this.compositeShaderData = null, 
            this.command = null, this.deferredReleaseTextures = [];
        }
    }
    class b {
        constructor() {
            this.invertY = !1;
        }
    }
    b._instance = new b();
    class V extends t.BaseTexture {
        constructor(e, r, i = t.RenderTextureFormat.R8G8B8, a = t.RenderTextureDepthFormat.DEPTH_16) {
            super(i, !1), this._inPool = !1, this._isCameraTarget = !1, this._glTextureType = t.LayaGL.instance.TEXTURE_2D, 
            this._width = e, this._height = r, this._depthStencilFormat = a, this._create(e, r);
        }
        static get currentActive() {
            return V._currentActive;
        }
        static createFromPool(e, r, i = t.RenderTextureFormat.R8G8B8, a = t.RenderTextureDepthFormat.DEPTH_16, n = t.BaseTexture.FILTERMODE_BILINEAR) {
            for (var s, o = 0, l = V._pool.length; o < l; o++) if ((s = V._pool[o])._width == e && s._height == r && s._format == i && s._depthStencilFormat == a && s._filterMode == n) {
                s._inPool = !1;
                var _ = V._pool[l - 1];
                return V._pool[o] = _, V._pool.length -= 1, s;
            }
            return (s = new V(e, r, i, a)).filterMode = n, s.lock = !0, s;
        }
        static recoverToPool(e) {
            e._inPool || (V._pool.push(e), e._inPool = !0);
        }
        get depthStencilFormat() {
            return this._depthStencilFormat;
        }
        get defaulteTexture() {
            return t.Texture2D.grayTexture;
        }
        _texImage2D(e, r, i, a) {
            switch (this._format) {
              case t.RenderTextureFormat.R8G8B8:
                e.texImage2D(r, 0, e.RGB, i, a, 0, e.RGB, e.UNSIGNED_BYTE, null);
                break;

              case t.RenderTextureFormat.R8G8B8A8:
                e.texImage2D(r, 0, e.RGBA, i, a, 0, e.RGBA, e.UNSIGNED_BYTE, null);
                break;

              case t.RenderTextureFormat.Alpha8:
                e.texImage2D(r, 0, e.ALPHA, i, a, 0, e.ALPHA, e.UNSIGNED_BYTE, null);
                break;

              case t.RenderTextureFormat.R16G16B16A16:
                t.LayaGL.layaGPUInstance._isWebGL2 ? e.texImage2D(this._glTextureType, 0, e.RGBA16F, i, a, 0, e.RGBA, e.HALF_FLOAT, null) : e.texImage2D(this._glTextureType, 0, e.RGBA, i, a, 0, e.RGBA, t.LayaGL.layaGPUInstance._oesTextureHalfFloat.HALF_FLOAT_OES, null);
            }
        }
        _create(e, r) {
            var i = t.LayaGL.instance;
            if (this._frameBuffer = i.createFramebuffer(), t.WebGLContext.bindTexture(i, this._glTextureType, this._glTexture), 
            this._texImage2D(i, this._glTextureType, e, r), this._setGPUMemory(e * r * 4), i.bindFramebuffer(i.FRAMEBUFFER, this._frameBuffer), 
            i.framebufferTexture2D(i.FRAMEBUFFER, i.COLOR_ATTACHMENT0, i.TEXTURE_2D, this._glTexture, 0), 
            this._depthStencilFormat !== t.RenderTextureDepthFormat.DEPTHSTENCIL_NONE) switch (this._depthStencilBuffer = i.createRenderbuffer(), 
            i.bindRenderbuffer(i.RENDERBUFFER, this._depthStencilBuffer), this._depthStencilFormat) {
              case t.RenderTextureDepthFormat.DEPTH_16:
                i.renderbufferStorage(i.RENDERBUFFER, i.DEPTH_COMPONENT16, e, r), i.framebufferRenderbuffer(i.FRAMEBUFFER, i.DEPTH_ATTACHMENT, i.RENDERBUFFER, this._depthStencilBuffer);
                break;

              case t.RenderTextureDepthFormat.STENCIL_8:
                i.renderbufferStorage(i.RENDERBUFFER, i.STENCIL_INDEX8, e, r), i.framebufferRenderbuffer(i.FRAMEBUFFER, i.STENCIL_ATTACHMENT, i.RENDERBUFFER, this._depthStencilBuffer);
                break;

              case t.RenderTextureDepthFormat.DEPTHSTENCIL_16_8:
                i.renderbufferStorage(i.RENDERBUFFER, i.DEPTH_STENCIL, e, r), i.framebufferRenderbuffer(i.FRAMEBUFFER, i.DEPTH_STENCIL_ATTACHMENT, i.RENDERBUFFER, this._depthStencilBuffer);
                break;

              default:
                throw "RenderTexture: unkonw depth format.";
            }
            i.bindFramebuffer(i.FRAMEBUFFER, null), i.bindRenderbuffer(i.RENDERBUFFER, null), 
            this._setWarpMode(i.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(i.TEXTURE_WRAP_T, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._setAnisotropy(this._anisoLevel), this._readyed = !0, 
            this._activeResource();
        }
        _start() {
            var e = t.LayaGL.instance;
            e.bindFramebuffer(e.FRAMEBUFFER, this._frameBuffer), V._currentActive = this, this._isCameraTarget && (b._instance.invertY = !0), 
            this._readyed = !1;
        }
        _end() {
            var e = t.LayaGL.instance;
            e.bindFramebuffer(e.FRAMEBUFFER, null), V._currentActive = null, this._isCameraTarget && (b._instance.invertY = !1), 
            this._readyed = !0;
        }
        getData(e, r, i, a, n) {
            if (t.Render.isConchApp && 2 == window.conchConfig.threadMode) throw "native 2 thread mode use getDataAsync";
            var s = t.LayaGL.instance;
            return s.bindFramebuffer(s.FRAMEBUFFER, this._frameBuffer), s.checkFramebufferStatus(s.FRAMEBUFFER) === s.FRAMEBUFFER_COMPLETE ? (s.readPixels(e, r, i, a, s.RGBA, s.UNSIGNED_BYTE, n), 
            s.bindFramebuffer(s.FRAMEBUFFER, null), n) : (s.bindFramebuffer(s.FRAMEBUFFER, null), 
            null);
        }
        getDataAsync(e, r, i, a, n) {
            var s = t.LayaGL.instance;
            s.bindFramebuffer(s.FRAMEBUFFER, this._frameBuffer), s.readPixelsAsync(e, r, i, a, s.RGBA, s.UNSIGNED_BYTE, function(e) {
                n(new Uint8Array(e));
            }), s.bindFramebuffer(s.FRAMEBUFFER, null);
        }
        _disposeResource() {
            if (this._frameBuffer) {
                var e = t.LayaGL.instance;
                e.deleteTexture(this._glTexture), e.deleteFramebuffer(this._frameBuffer), e.deleteRenderbuffer(this._depthStencilBuffer), 
                this._glTexture = null, this._frameBuffer = null, this._depthStencilBuffer = null, 
                this._setGPUMemory(0);
            }
        }
    }
    V._pool = [];
    class w {
        constructor() {
            this._mask = [], this._length = 0;
        }
        _intersectionDefineDatas(e) {
            for (var t = e._mask, r = this._mask, i = this._length - 1; i >= 0; i--) {
                var a = r[i] & t[i];
                0 == a && i == this._length - 1 ? this._length-- : r[i] = a;
            }
        }
        add(e) {
            var t = e._index, r = t + 1, i = this._mask, a = i.length;
            if (a < r) {
                for (i.length = r; a < t; a++) i[a] = 0;
                i[t] = e._value, this._length = r;
            } else r > this._length ? (i[t] = e._value, this._length = r) : i[t] |= e._value;
        }
        remove(e) {
            var t = e._index, r = this._mask, i = this._length - 1;
            if (!(t > i)) {
                var a = r[t] & ~e._value;
                t == i && 0 === a ? this._length-- : r[t] = a;
            }
        }
        addDefineDatas(e) {
            var t = e._mask, r = e._length, i = this._mask, a = i.length;
            if (a < r) {
                i.length = r;
                for (var n = 0; n < a; n++) i[n] |= t[n];
                for (;a < r; a++) i[a] = t[a];
                this._length = r;
            } else {
                for (n = 0; n < r; n++) i[n] |= t[n];
                this._length = Math.max(this._length, r);
            }
        }
        removeDefineDatas(e) {
            for (var t = e._mask, r = this._mask, i = this._length - 1, a = e._length - 1; a >= 0; a--) if (!(a > i)) {
                var n = r[a] & ~t[a];
                a == i && 0 === n ? (i--, this._length--) : r[a] = n;
            }
        }
        has(e) {
            var t = e._index;
            return !(t >= this._length) && 0 != (this._mask[t] & e._value);
        }
        clear() {
            this._length = 0;
        }
        cloneTo(e) {
            var t = e, r = t._mask, i = this._mask, a = this._length;
            r.length = a;
            for (var n = 0; n < a; n++) r[n] = i[n];
            t._length = a;
        }
        clone() {
            var e = new w();
            return this.cloneTo(e), e;
        }
    }
    class F {
        constructor(e, t) {
            this._index = e, this._value = t;
        }
    }
    class B {
        constructor(e, t, r, i) {
            this._subShaderIndex = 0, this._passIndex = 0, this.setValue(e, t, r, i);
        }
        get shader() {
            return this._shader;
        }
        get subShaderIndex() {
            return this._subShaderIndex;
        }
        get passIndex() {
            return this._passIndex;
        }
        get defineNames() {
            return this._defineNames;
        }
        setValue(e, t, r, i) {
            if (!e) throw "ShaderVariantInfo:Shader can't be null.";
            var a = e.getSubShaderAt(t);
            if (!a) throw `ShaderVariantInfo:Shader don't have subShaderIndex of ${t}.`;
            var n = a._passes[r];
            if (!n) throw `ShaderVariantInfo:Shader don't have passIndex of ${r}.`;
            for (var s = n._validDefine, l = 0, _ = i.length; l < _; l++) {
                var h = i[l];
                if (!s.has(o.Shader3D.getDefineByName(h))) throw `ShaderVariantInfo:Invalid defineName ${h} in ${e._name} subShaderIndex of ${t} passIndex of ${r}.`;
            }
            this._shader = e, this._subShaderIndex = t, this._passIndex = r, this._defineNames = i;
        }
        equal(e) {
            if (this._shader !== e._shader || this._subShaderIndex !== e._subShaderIndex || this._passIndex !== e._passIndex) return !1;
            var t = this._defineNames, r = e._defineNames;
            if (t.length !== r.length) return !1;
            for (var i = 0, a = this._defineNames.length; i < a; i++) if (t[i] !== r[i]) return !1;
            return !0;
        }
        clone() {
            return new B(this._shader, this._subShaderIndex, this._passIndex, this._defineNames.slice());
        }
    }
    class U {
        constructor() {
            this._allCompiled = !1, this._variants = [];
        }
        get allCompiled() {
            return this._allCompiled;
        }
        get variantCount() {
            return this._variants.length;
        }
        add(e) {
            for (var t = 0, r = this._variants.length; t < r; t++) if (this._variants[t].equal(e)) return !1;
            return this._variants.push(e.clone()), this._allCompiled = !1, !0;
        }
        remove(e) {
            for (var t = 0, r = this._variants.length; t < r; t++) if (this._variants[t].equal(e)) return this._variants.splice(t, 1), 
            !0;
            return !1;
        }
        contatins(e) {
            for (var t = 0, r = this._variants.length; t < r; t++) if (this._variants[t].equal(e)) return !0;
            return !1;
        }
        getByIndex(e) {
            return this._variants[e];
        }
        clear() {
            this._variants.length = 0;
        }
        compile() {
            if (!this._allCompiled) {
                for (var e = this._variants, t = 0, r = e.length; t < r; t++) {
                    var i = e[t];
                    o.Shader3D.compileShaderByDefineNames(i._shader._name, i._subShaderIndex, i._passIndex, i._defineNames);
                }
                this._allCompiled = !0;
            }
        }
    }
    class G {
        constructor(e, t, r, i) {
            this._attributeMap = null, this._uniformMap = null, this._enableInstancing = !1, 
            this._subShaders = [], this._name = e, this._attributeMap = t, this._uniformMap = r, 
            this._enableInstancing = i;
        }
        static _getNamesByDefineData(e, t) {
            var r = G._maskMap, i = e._mask;
            t.length = 0;
            for (var a = 0, n = e._length; a < n; a++) for (var s = r[a], o = i[a], l = 0; l < 32; l++) {
                var _ = 1 << l;
                if (o > 0 && _ > o) break;
                o & _ && t.push(s[_]);
            }
        }
        static getDefineByName(e) {
            var t = G._defineMap[e];
            if (!t) {
                var r = G._maskMap, i = G._defineCounter, a = Math.floor(i / 32), n = 1 << i % 32;
                t = new F(a, n), G._defineMap[e] = t, a == r.length && (r.length++, r[a] = {}), 
                r[a][n] = e, G._defineCounter++;
            }
            return t;
        }
        static propertyNameToID(e) {
            if (null != G._propertyNameMap[e]) return G._propertyNameMap[e];
            var t = G._propertyNameCounter++;
            return G._propertyNameMap[e] = t, t;
        }
        static addInclude(e, r) {
            r = r.replace(t.ShaderCompile._clearCR, ""), t.ShaderCompile.addInclude(e, r);
        }
        static compileShaderByDefineNames(e, t, r, i) {
            var a = G.find(e);
            if (a) {
                var n = a.getSubShaderAt(t);
                if (n) {
                    var o = n._passes[r];
                    if (o) {
                        var l = G._compileDefineDatas;
                        l.clear();
                        for (var _ = 0, h = i.length; _ < h; _++) l.add(G.getDefineByName(i[_]));
                        s._config._multiLighting || l.add(G.SHADERDEFINE_LEGACYSINGALLIGHTING), o.withCompile(l);
                    } else console.warn("Shader3D: unknown passIndex.");
                } else console.warn("Shader3D: unknown subShaderIndex.");
            } else console.warn("Shader3D: unknown shader name.");
        }
        static add(e, t = null, r = null, i = !1) {
            return G._preCompileShader[e] = new G(e, t, r, i);
        }
        static find(e) {
            return G._preCompileShader[e];
        }
        get name() {
            return this._name;
        }
        addSubShader(e) {
            this._subShaders.push(e), e._owner = this;
        }
        getSubShaderAt(e) {
            return this._subShaders[e];
        }
        static compileShader(e, t, r, ...i) {
            var a = G.find(e);
            if (a) {
                var n = a.getSubShaderAt(t);
                if (n) {
                    var o = n._passes[r];
                    if (o) {
                        var l = G._compileDefineDatas, _ = l._mask;
                        _.length = 0;
                        for (var h = 0, c = i.length; h < c; h++) _.push(i[h]);
                        l._length = i.length, s._config._multiLighting || l.add(G.SHADERDEFINE_LEGACYSINGALLIGHTING), 
                        o.withCompile(l);
                    } else console.warn("Shader3D: unknown passIndex.");
                } else console.warn("Shader3D: unknown subShaderIndex.");
            } else console.warn("Shader3D: unknown shader name.");
        }
    }
    G._compileDefineDatas = new w(), G.RENDER_STATE_CULL = 0, G.RENDER_STATE_BLEND = 1, 
    G.RENDER_STATE_BLEND_SRC = 2, G.RENDER_STATE_BLEND_DST = 3, G.RENDER_STATE_BLEND_SRC_RGB = 4, 
    G.RENDER_STATE_BLEND_DST_RGB = 5, G.RENDER_STATE_BLEND_SRC_ALPHA = 6, G.RENDER_STATE_BLEND_DST_ALPHA = 7, 
    G.RENDER_STATE_BLEND_CONST_COLOR = 8, G.RENDER_STATE_BLEND_EQUATION = 9, G.RENDER_STATE_BLEND_EQUATION_RGB = 10, 
    G.RENDER_STATE_BLEND_EQUATION_ALPHA = 11, G.RENDER_STATE_DEPTH_TEST = 12, G.RENDER_STATE_DEPTH_WRITE = 13, 
    G.PERIOD_CUSTOM = 0, G.PERIOD_MATERIAL = 1, G.PERIOD_SPRITE = 2, G.PERIOD_CAMERA = 3, 
    G.PERIOD_SCENE = 4, G._propertyNameCounter = 0, G._propertyNameMap = {}, G._defineCounter = 0, 
    G._defineMap = {}, G._preCompileShader = {}, G._maskMap = [], G.debugMode = !0, 
    G.debugShaderVariantCollection = new U();
    class z {
        constructor(e = null) {
            this._ownerResource = null, this._data = null, this._defineDatas = new w(), this._runtimeCopyValues = [], 
            this._ownerResource = e, this._initData();
        }
        _initData() {
            this._data = new Object();
        }
        getData() {
            return this._data;
        }
        addDefine(e) {
            this._defineDatas.add(e);
        }
        removeDefine(e) {
            this._defineDatas.remove(e);
        }
        hasDefine(e) {
            return this._defineDatas.has(e);
        }
        clearDefine() {
            this._defineDatas.clear();
        }
        getBool(e) {
            return this._data[e];
        }
        setBool(e, t) {
            this._data[e] = t;
        }
        getInt(e) {
            return this._data[e];
        }
        setInt(e, t) {
            this._data[e] = t;
        }
        getNumber(e) {
            return this._data[e];
        }
        setNumber(e, t) {
            this._data[e] = t;
        }
        getVector2(e) {
            return this._data[e];
        }
        setVector2(e, t) {
            this._data[e] = t;
        }
        getVector3(e) {
            return this._data[e];
        }
        setVector3(e, t) {
            this._data[e] = t;
        }
        getVector(e) {
            return this._data[e];
        }
        setVector(e, t) {
            this._data[e] = t;
        }
        getQuaternion(e) {
            return this._data[e];
        }
        setQuaternion(e, t) {
            this._data[e] = t;
        }
        getMatrix4x4(e) {
            return this._data[e];
        }
        setMatrix4x4(e, t) {
            this._data[e] = t;
        }
        getBuffer(e) {
            return this._data[e];
        }
        setBuffer(e, t) {
            this._data[e] = t;
        }
        setTexture(e, t) {
            var r = this._data[e];
            this._data[e] = t, this._ownerResource && this._ownerResource.referenceCount > 0 && (r && r._removeReference(), 
            t && t._addReference());
        }
        getTexture(e) {
            return this._data[e];
        }
        setAttribute(e, t) {
            this._data[e] = t;
        }
        getAttribute(e) {
            return this._data[e];
        }
        getLength() {
            return this._data.length;
        }
        setLength(e) {
            this._data.length = e;
        }
        cloneTo(e) {
            var r = e, s = r._data;
            for (var o in this._data) {
                var l = this._data[o];
                if (null != l) if ("number" == typeof l) s[o] = l; else if ("number" == typeof l) s[o] = l; else if ("boolean" == typeof l) s[o] = l; else if (l instanceof i) {
                    var _ = s[o] || (s[o] = new i());
                    l.cloneTo(_), s[o] = _;
                } else if (l instanceof n) {
                    var h = s[o] || (s[o] = new n());
                    l.cloneTo(h), s[o] = h;
                } else if (l instanceof a) {
                    var c = s[o] || (s[o] = new a());
                    l.cloneTo(c), s[o] = c;
                } else if (l instanceof L) {
                    var d = s[o] || (s[o] = new L());
                    l.cloneTo(d), s[o] = d;
                } else l instanceof t.BaseTexture && (s[o] = l);
            }
            this._defineDatas.cloneTo(r._defineDatas);
        }
        clone() {
            var e = new z();
            return this.cloneTo(e), e;
        }
        cloneToForNative(e) {
            var r = e;
            this._int32Data.length - r._int32Data.length > 0 && r.needRenewArrayBufferForNative(this._int32Data.length), 
            r._int32Data.set(this._int32Data, 0);
            var s = r._nativeArray, o = this._nativeArray.length;
            s.length = o;
            for (var l = 0; l < o; l++) {
                var _ = this._nativeArray[l];
                if (_) if ("number" == typeof _) s[l] = _, r.setNumber(l, _); else if ("number" == typeof _) s[l] = _, 
                r.setInt(l, _); else if ("boolean" == typeof _) s[l] = _, r.setBool(l, _); else if (_ instanceof i) {
                    var h = s[l] || (s[l] = new i());
                    _.cloneTo(h), s[l] = h, r.setVector2(l, h);
                } else if (_ instanceof n) {
                    var c = s[l] || (s[l] = new n());
                    _.cloneTo(c), s[l] = c, r.setVector3(l, c);
                } else if (_ instanceof a) {
                    var d = s[l] || (s[l] = new a());
                    _.cloneTo(d), s[l] = d, r.setVector(l, d);
                } else if (_ instanceof L) {
                    var u = s[l] || (s[l] = new L());
                    _.cloneTo(u), s[l] = u, r.setMatrix4x4(l, u);
                } else _ instanceof t.BaseTexture && (s[l] = _, r.setTexture(l, _));
            }
            this._defineDatas.cloneTo(r._defineDatas);
        }
        _initDataForNative() {
            this._frameCount = -1, this._runtimeCopyValues.length = 0, this._nativeArray = [], 
            this._data = new ArrayBuffer(32), this._int32Data = new Int32Array(this._data), 
            this._float32Data = new Float32Array(this._data), t.LayaGL.instance.createArrayBufferRef(this._data, t.LayaGL.ARRAY_BUFFER_TYPE_DATA, !0);
        }
        needRenewArrayBufferForNative(e) {
            if (e >= this._int32Data.length) {
                var r = 4 * (e + 1), i = this._int32Data, a = this._data.conchRef, n = this._data._ptrID;
                this._data = new ArrayBuffer(r), this._int32Data = new Int32Array(this._data), this._float32Data = new Float32Array(this._data), 
                this._data.conchRef = a, this._data._ptrID = n, i && this._int32Data.set(i, 0);
                var s = t.LayaGL.instance;
                s.updateArrayBufferRef ? s.updateArrayBufferRef(this._data._ptrID, a.isSyncToRender(), this._data) : window.conch.updateArrayBufferRef(this._data._ptrID, a.isSyncToRender(), this._data);
            }
        }
        getDataForNative() {
            return this._nativeArray;
        }
        getIntForNative(e) {
            return this._int32Data[e];
        }
        setIntForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._int32Data[e] = t, this._nativeArray[e] = t;
        }
        getBoolForNative(e) {
            return 1 == this._int32Data[e];
        }
        setBoolForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._int32Data[e] = t ? 1 : 0, this._nativeArray[e] = t;
        }
        getNumberForNative(e) {
            return this._float32Data[e];
        }
        setNumberForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._float32Data[e] = t, this._nativeArray[e] = t;
        }
        getMatrix4x4ForNative(e) {
            return this._nativeArray[e];
        }
        setMatrix4x4ForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
            var r = this.setReferenceForNative(t.elements);
            this._int32Data[e] = r;
        }
        getVectorForNative(e) {
            return this._nativeArray[e];
        }
        setVectorForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
            var r = this.setReferenceForNative(t.elements);
            this._int32Data[e] = r;
        }
        getVector2ForNative(e) {
            return this._nativeArray[e];
        }
        setVector2ForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
            var r = this.setReferenceForNative(t.elements);
            this._int32Data[e] = r;
        }
        getVector3ForNative(e) {
            return this._nativeArray[e];
        }
        setVector3ForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
            var r = this.setReferenceForNative(t.elements);
            this._int32Data[e] = r;
        }
        getQuaternionForNative(e) {
            return this._nativeArray[e];
        }
        setQuaternionForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
            var r = this.setReferenceForNative(t.elements);
            this._int32Data[e] = r;
        }
        getBufferForNative(e) {
            return this._nativeArray[e];
        }
        setBufferForNative(e, t) {
            this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
            var r = this.setReferenceForNative(t);
            this._int32Data[e] = r;
        }
        getAttributeForNative(e) {
            return this._nativeArray[e];
        }
        setAttributeForNative(e, r) {
            this._nativeArray[e] = r, r._ptrID || t.LayaGL.instance.createArrayBufferRef(r, t.LayaGL.ARRAY_BUFFER_TYPE_DATA, !0), 
            t.LayaGL.instance.syncBufferToRenderThread(r), this._int32Data[e] = r._ptrID;
        }
        getTextureForNative(e) {
            return this._nativeArray[e];
        }
        setTextureForNative(e, t) {
            if (t) {
                this.needRenewArrayBufferForNative(e);
                var r = this._nativeArray[e];
                this._nativeArray[e] = t;
                var i = t._getSource() || t.defaulteTexture._getSource();
                this._int32Data[e] = i.id, this._ownerResource && this._ownerResource.referenceCount > 0 && (r && r._removeReference(), 
                t && t._addReference());
            }
        }
        setReferenceForNative(e) {
            this.clearRuntimeCopyArray();
            var r = 0, i = 0;
            return z._SET_RUNTIME_VALUE_MODE_REFERENCE_ ? (t.LayaGL.instance.createArrayBufferRefs(e, t.LayaGL.ARRAY_BUFFER_TYPE_DATA, !0, t.LayaGL.ARRAY_BUFFER_REF_REFERENCE), 
            r = 0, i = e.getPtrID(r)) : (t.LayaGL.instance.createArrayBufferRefs(e, t.LayaGL.ARRAY_BUFFER_TYPE_DATA, !0, t.LayaGL.ARRAY_BUFFER_REF_COPY), 
            r = e.getRefNum() - 1, i = e.getPtrID(r), this._runtimeCopyValues.push({
                obj: e,
                refID: r,
                ptrID: i
            })), t.LayaGL.instance.syncBufferToRenderThread(e, r), i;
        }
        static setRuntimeValueMode(e) {
            z._SET_RUNTIME_VALUE_MODE_REFERENCE_ = e;
        }
        clearRuntimeCopyArray() {
            var e = t.Stat.loopCount;
            if (this._frameCount != e) {
                this._frameCount = e;
                for (var r = 0, i = this._runtimeCopyValues.length; r < i; r++) {
                    this._runtimeCopyValues[r].obj.clearRefNum();
                }
                this._runtimeCopyValues.length = 0;
            }
        }
    }
    z._SET_RUNTIME_VALUE_MODE_REFERENCE_ = !0;
    class H {
        constructor() {
            this._compositeShader = G.find("PostProcessComposite"), this._compositeShaderData = new z(), 
            this._effects = [], this._context = null, this._context = new P(), this._context.compositeShaderData = this._compositeShaderData;
        }
        static __init__() {
            H.SHADERDEFINE_BLOOM_LOW = G.getDefineByName("BLOOM_LOW"), H.SHADERDEFINE_BLOOM = G.getDefineByName("BLOOM"), 
            H.SHADERDEFINE_FINALPASS = G.getDefineByName("FINALPASS");
        }
        _init(e, t) {
            this._context.camera = e, this._context.command = t;
        }
        _render() {
            var e = z._SET_RUNTIME_VALUE_MODE_REFERENCE_;
            t.ILaya.Render.supportWebGLPlusRendering && z.setRuntimeValueMode(!1);
            var r = this._context.camera, i = r.viewport, a = V.createFromPool(b.clientWidth, b.clientHeight, r._getRenderTextureFormat(), t.RenderTextureDepthFormat.DEPTHSTENCIL_NONE), n = r._internalRenderTexture;
            this._context.command.clear(), this._context.source = a, this._context.destination = n, 
            this._context.compositeShaderData.clearDefine(), this._context.command.blitScreenTriangle(n, a), 
            this._context.compositeShaderData.setTexture(H.SHADERVALUE_AUTOEXPOSURETEX, t.Texture2D.whiteTexture);
            for (var s = 0, o = this._effects.length; s < o; s++) this._effects[s].render(this._context);
            this._compositeShaderData.addDefine(H.SHADERDEFINE_FINALPASS);
            var l = r._offScreenRenderTexture, _ = l || null;
            this._context.destination = _;
            var h = r._getCanvasWidth(), c = r._getCanvasHeight();
            r._screenOffsetScale.setValue(i.x / h, i.y / c, i.width / h, i.height / c), this._context.command.blitScreenTriangle(this._context.source, _, r._screenOffsetScale, this._compositeShader, this._compositeShaderData), 
            V.recoverToPool(a);
            var d = this._context.deferredReleaseTextures;
            for (s = 0, o = d.length; s < o; s++) V.recoverToPool(d[s]);
            d.length = 0, t.ILaya.Render.supportWebGLPlusRendering && z.setRuntimeValueMode(e);
        }
        addEffect(e) {
            this._effects.push(e);
        }
        removeEffect(e) {
            var t = this._effects.indexOf(e);
            -1 !== t && this._effects.splice(t, 1);
        }
    }
    H.SHADERVALUE_MAINTEX = G.propertyNameToID("u_MainTex"), H.SHADERVALUE_BLOOMTEX = G.propertyNameToID("u_BloomTex"), 
    H.SHADERVALUE_AUTOEXPOSURETEX = G.propertyNameToID("u_AutoExposureTex"), H.SHADERVALUE_BLOOM_DIRTTEX = G.propertyNameToID("u_Bloom_DirtTex"), 
    H.SHADERVALUE_BLOOMTEX_TEXELSIZE = G.propertyNameToID("u_BloomTex_TexelSize"), H.SHADERVALUE_BLOOM_DIRTTILEOFFSET = G.propertyNameToID("u_Bloom_DirtTileOffset"), 
    H.SHADERVALUE_BLOOM_SETTINGS = G.propertyNameToID("u_Bloom_Settings"), H.SHADERVALUE_BLOOM_COLOR = G.propertyNameToID("u_Bloom_Color");
    class W extends t.EventDispatcher {
        constructor(e, r = null, i = null, a = null, s = null) {
            super(), this._owner = e, this._children = [], this._localMatrix = new Float32Array(16), 
            t.Render.supportWebGLPlusAnimation ? (this._localPosition = new M(0, 0, 0, r), this._localRotation = new C(0, 0, 0, 1, i), 
            this._localScale = new M(0, 0, 0, a), this._worldMatrix = s) : (this._localPosition = new n(), 
            this._localRotation = new u(), this._localScale = new n(), this._worldMatrix = new Float32Array(16)), 
            this._localQuaternionUpdate = !1, this._locaEulerlUpdate = !1, this._localUpdate = !1, 
            this._worldUpdate = !0;
        }
        _getlocalMatrix() {
            return this._localUpdate && (v._createAffineTransformationArray(this._localPosition, this._localRotation, this._localScale, this._localMatrix), 
            this._localUpdate = !1), this._localMatrix;
        }
        _onWorldTransform() {
            if (!this._worldUpdate) {
                this._worldUpdate = !0, this.event(t.Event.TRANSFORM_CHANGED);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldTransform();
            }
        }
        get localPosition() {
            return this._localPosition;
        }
        set localPosition(e) {
            this._localPosition = e, this._localUpdate = !0, this._onWorldTransform();
        }
        get localRotation() {
            if (this._localQuaternionUpdate) {
                var e = this._localRotationEuler;
                u.createFromYawPitchRoll(e.y / W._angleToRandin, e.x / W._angleToRandin, e.z / W._angleToRandin, this._localRotation), 
                this._localQuaternionUpdate = !1;
            }
            return this._localRotation;
        }
        set localRotation(e) {
            this._localRotation = e, this._locaEulerlUpdate = !0, this._localQuaternionUpdate = !1, 
            this._localUpdate = !0, this._onWorldTransform();
        }
        get localScale() {
            return this._localScale;
        }
        set localScale(e) {
            this._localScale = e, this._localUpdate = !0, this._onWorldTransform();
        }
        get localRotationEuler() {
            if (this._locaEulerlUpdate) {
                this._localRotation.getYawPitchRoll(W._tempVector3);
                var e = W._tempVector3, t = this._localRotationEuler;
                t.x = e.y * W._angleToRandin, t.y = e.x * W._angleToRandin, t.z = e.z * W._angleToRandin, 
                this._locaEulerlUpdate = !1;
            }
            return this._localRotationEuler;
        }
        set localRotationEuler(e) {
            this._localRotationEuler = e, this._locaEulerlUpdate = !1, this._localQuaternionUpdate = !0, 
            this._localUpdate = !0, this._onWorldTransform();
        }
        getWorldMatrix() {
            if (!t.Render.supportWebGLPlusAnimation && this._worldUpdate) {
                if (null != this._parent) v.matrix4x4MultiplyFFF(this._parent.getWorldMatrix(), this._getlocalMatrix(), this._worldMatrix); else {
                    var e = this._worldMatrix;
                    e[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0, 
                    e[0] = e[5] = e[10] = e[15] = 1;
                }
                this._worldUpdate = !1;
            }
            return t.Render.supportWebGLPlusAnimation && this._worldUpdate && (this._worldUpdate = !1), 
            this._worldMatrix;
        }
        setParent(e) {
            if (this._parent !== e) {
                if (this._parent) {
                    var t = this._parent._children, r = t.indexOf(this);
                    t.splice(r, 1);
                }
                e && (e._children.push(this), e && this._onWorldTransform()), this._parent = e;
            }
        }
    }
    W._tempVector3 = new n(), W._angleToRandin = 180 / Math.PI;
    class k {
        constructor(e = null, t = null, r = null, i = null) {
            this._children = [], this.transform = new W(this, e, t, r, i);
        }
        addChild(e) {
            e._parent = this, e.transform.setParent(this.transform), this._children.push(e);
        }
        removeChild(e) {
            var t = this._children.indexOf(e);
            -1 !== t && this._children.splice(t, 1);
        }
        getChildByName(e) {
            for (var t = 0, r = this._children.length; t < r; t++) {
                var i = this._children[t];
                if (i.name === e) return i;
            }
            return null;
        }
        getChildByIndex(e) {
            return this._children[e];
        }
        getChildCount() {
            return this._children.length;
        }
        cloneTo(e) {
            var t = e;
            t.name = this.name;
            for (var r = 0, i = this._children.length; r < i; r++) {
                var a = this._children[r], n = a.clone();
                t.addChild(n);
                var s = a.transform, o = n.transform, l = o.localPosition, _ = o.localRotation, h = o.localScale;
                s.localPosition.cloneTo(l), s.localRotation.cloneTo(_), s.localScale.cloneTo(h), 
                o.localPosition = l, o.localRotation = _, o.localScale = h;
            }
        }
        clone() {
            var e = new k();
            return this.cloneTo(e), e;
        }
        _cloneNative(e, t, r, i, a, n, s) {
            var o = s._nativeCurCloneCount;
            a[o] = n;
            var l = new Float32Array(e.buffer, 3 * o * 4, 3), _ = new Float32Array(t.buffer, 4 * o * 4, 4), h = new Float32Array(r.buffer, 3 * o * 4, 3), c = new Float32Array(i.buffer, 16 * o * 4, 16), d = new k(l, _, h, c);
            return d._worldMatrixIndex = o, this._cloneToNative(d, e, t, r, i, a, o, s), d;
        }
        _cloneToNative(e, t, r, i, a, n, s, o) {
            var l = e;
            l.name = this.name;
            for (var _ = 0, h = this._children.length; _ < h; _++) {
                var c = this._children[_];
                o._nativeCurCloneCount++;
                var d = c._cloneNative(t, r, i, a, n, s, o);
                l.addChild(d);
                var u = c.transform, f = d.transform, m = f.localPosition, E = f.localRotation, T = f.localScale;
                u.localPosition.cloneTo(m), u.localRotation.cloneTo(E), u.localScale.cloneTo(T), 
                f.localPosition = m, f.localRotation = E, f.localScale = T;
            }
        }
    }
    class X extends t.Resource {
        constructor() {
            super(), this._nativeNodeCount = 0, this._nativeCurCloneCount = 0;
        }
        static _parse(e, r = null, i = null) {
            var a = new X();
            if (a._rootNode = new k(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16)), 
            t.Render.supportWebGLPlusAnimation && a._nativeNodeCount++, e.version) {
                var n = e.rootNode;
                n && a._parseNode(n, a._rootNode);
            }
            return a;
        }
        static load(e, r) {
            t.ILaya.loader.create(e, r, null, X.AVATAR);
        }
        _initCloneToAnimator(e, t) {
            t._avatarNodeMap[e.name] = e;
            for (var r = 0, i = e.getChildCount(); r < i; r++) this._initCloneToAnimator(e.getChildByIndex(r), t);
        }
        _parseNode(e, r) {
            var i = e.props.name;
            r.name = i;
            var a = e.props, n = r.transform, s = n.localPosition, o = n.localRotation, l = n.localScale;
            s.fromArray(a.translate), o.fromArray(a.rotation), l.fromArray(a.scale), n.localPosition = s, 
            n.localRotation = o, n.localScale = l;
            for (var _ = e.child, h = 0, c = _.length; h < c; h++) {
                var d = _[h], u = new k(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16));
                r.addChild(u), t.Render.supportWebGLPlusAnimation && this._nativeNodeCount++, this._parseNode(d, u);
            }
        }
        _cloneDatasToAnimator(e) {
            var t;
            t = this._rootNode.clone();
            var r = this._rootNode.transform, i = t.transform, a = i.localPosition, n = i.localRotation, s = i.localScale;
            r.localPosition.cloneTo(a), r.localRotation.cloneTo(n), r.localScale.cloneTo(s), 
            i.localPosition = a, i.localRotation = n, i.localScale = s, e._avatarNodeMap = {}, 
            this._initCloneToAnimator(t, e);
        }
        cloneTo(e) {
            var t = e, r = this._rootNode.clone();
            t._rootNode = r;
        }
        clone() {
            var e = new X();
            return this.cloneTo(e), e;
        }
        _cloneDatasToAnimatorNative(e) {
            var t = new Float32Array(3 * this._nativeNodeCount), r = new Float32Array(4 * this._nativeNodeCount), i = new Float32Array(3 * this._nativeNodeCount), a = new Float32Array(16 * this._nativeNodeCount), n = new Int16Array(this._nativeNodeCount);
            e._animationNodeLocalPositions = t, e._animationNodeLocalRotations = r, e._animationNodeLocalScales = i, 
            e._animationNodeWorldMatrixs = a, e._animationNodeParentIndices = n, this._nativeCurCloneCount = 0;
            var s = this._rootNode._cloneNative(t, r, i, a, n, -1, this), o = this._rootNode.transform, l = s.transform, _ = l.localPosition, h = l.localRotation, c = l.localScale;
            o.localPosition.cloneTo(_), o.localRotation.cloneTo(h), o.localScale.cloneTo(c), 
            l.localPosition = _, l.localRotation = h, l.localScale = c, e._avatarNodeMap = {}, 
            this._initCloneToAnimator(s, e);
        }
    }
    X.AVATAR = "AVATAR";
    class Y extends t.Resource {
        constructor() {
            super(), this._shaderValues = null, this._disablePublicDefineDatas = new w(), this._shaderValues = new z(this), 
            this.renderQueue = Y.RENDERQUEUE_OPAQUE, this._alphaTest = !1;
        }
        static load(e, r) {
            t.Laya.loader.create(e, r, null, Y.MATERIAL);
        }
        static __initDefine__() {
            Y.SHADERDEFINE_ALPHATEST = G.getDefineByName("ALPHATEST");
        }
        static _parse(e, r = null, s = null) {
            var o, l = e, _ = l.props, h = _.type, c = t.ClassUtils.getRegClass(h);
            if (!c) throw "_getSprite3DHierarchyInnerUrls 错误: " + e.type + " 不是类";
            switch (o = new c(), l.version) {
              case "LAYAMATERIAL:01":
              case "LAYAMATERIAL:02":
                var d, u;
                for (var f in _) switch (f) {
                  case "vectors":
                    var m = _[f];
                    for (d = 0, u = m.length; d < u; d++) {
                        var E = m[d], T = E.value;
                        switch (T.length) {
                          case 2:
                            o[E.name] = new i(T[0], T[1]);
                            break;

                          case 3:
                            o[E.name] = new n(T[0], T[1], T[2]);
                            break;

                          case 4:
                            o[E.name] = new a(T[0], T[1], T[2], T[3]);
                            break;

                          default:
                            throw new Error("BaseMaterial:unkonwn color length.");
                        }
                    }
                    break;

                  case "textures":
                    var g = _[f];
                    for (d = 0, u = g.length; d < u; d++) {
                        var p = g[d], S = p.path;
                        S && (o[p.name] = t.Loader.getRes(S));
                    }
                    break;

                  case "defines":
                    var R = _[f];
                    for (d = 0, u = R.length; d < u; d++) {
                        var v = G.getDefineByName(R[d]);
                        o._shaderValues.addDefine(v);
                    }
                    break;

                  case "renderStates":
                    var I = _[f][0], x = o;
                    x.blend = I.blend, x.cull = I.cull, x.depthTest = I.depthTest, x.depthWrite = I.depthWrite, 
                    x.blendSrc = I.srcBlend, x.blendDst = I.dstBlend;
                    break;

                  case "cull":
                    o.cull = _[f];
                    break;

                  case "blend":
                    o.blend = _[f];
                    break;

                  case "depthWrite":
                    o.depthWrite = _[f];
                    break;

                  case "srcBlend":
                    o.blendSrc = _[f];
                    break;

                  case "dstBlend":
                    o.blendDst = _[f];
                    break;

                  default:
                    o[f] = _[f];
                }
                break;

              default:
                throw new Error("BaseMaterial:unkonwn version.");
            }
            return o;
        }
        get shaderData() {
            return this._shaderValues;
        }
        get alphaTestValue() {
            return this._shaderValues.getNumber(Y.ALPHATESTVALUE);
        }
        set alphaTestValue(e) {
            this._shaderValues.setNumber(Y.ALPHATESTVALUE, e);
        }
        get alphaTest() {
            return this._alphaTest;
        }
        set alphaTest(e) {
            this._alphaTest = e, e ? this._shaderValues.addDefine(Y.SHADERDEFINE_ALPHATEST) : this._shaderValues.removeDefine(Y.SHADERDEFINE_ALPHATEST);
        }
        _removeTetxureReference() {
            var e = this._shaderValues.getData();
            for (var r in e) {
                var i = e[r];
                i && i instanceof t.BaseTexture && i._removeReference();
            }
        }
        _disposeResource() {
            this._referenceCount > 0 && this._removeTetxureReference(), this._shaderValues = null;
        }
        _addReference(e = 1) {
            super._addReference(e);
            var r = this._shaderValues.getData();
            for (var i in r) {
                var a = r[i];
                a && a instanceof t.BaseTexture && a._addReference();
            }
        }
        _removeReference(e = 1) {
            super._removeReference(e), this._removeTetxureReference();
        }
        setShaderName(e) {
            if (this._shader = G.find(e), !this._shader) throw new Error("BaseMaterial: unknown shader name.");
        }
        cloneTo(e) {
            var t = e;
            t.name = this.name, t.renderQueue = this.renderQueue, this._disablePublicDefineDatas.cloneTo(t._disablePublicDefineDatas), 
            this._shaderValues.cloneTo(t._shaderValues);
        }
        clone() {
            var e = new Y();
            return this.cloneTo(e), e;
        }
        get _defineDatas() {
            return this._shaderValues._defineDatas;
        }
    }
    Y.MATERIAL = "MATERIAL", Y.RENDERQUEUE_OPAQUE = 2e3, Y.RENDERQUEUE_ALPHATEST = 2450, 
    Y.RENDERQUEUE_TRANSPARENT = 3e3, Y.ALPHATESTVALUE = G.propertyNameToID("u_AlphaTestValue"), 
    Y.SHADERDEFINE_ALPHATEST = null;
    class Z {
        static load(e, r) {
            t.Laya.loader.create(e, r, null, Y.MATERIAL);
        }
        static __initDefine__() {
            Z.SHADERDEFINE_ALPHATEST = Y.SHADERDEFINE_ALPHATEST;
        }
    }
    Z.MATERIAL = "MATERIAL", Z.RENDERQUEUE_OPAQUE = 2e3, Z.RENDERQUEUE_ALPHATEST = 2450, 
    Z.RENDERQUEUE_TRANSPARENT = 3e3, Z.ALPHATESTVALUE = G.propertyNameToID("u_AlphaTestValue"), 
    Z.SHADERDEFINE_ALPHATEST = null;
    class j {}
    class q {
        constructor() {
            this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.srcBlend = q.BLENDPARAM_ONE, 
            this.dstBlend = q.BLENDPARAM_ZERO, this.srcBlendRGB = q.BLENDPARAM_ONE, this.dstBlendRGB = q.BLENDPARAM_ZERO, 
            this.srcBlendAlpha = q.BLENDPARAM_ONE, this.dstBlendAlpha = q.BLENDPARAM_ZERO, this.blendConstColor = new a(1, 1, 1, 1), 
            this.blendEquation = q.BLENDEQUATION_ADD, this.blendEquationRGB = q.BLENDEQUATION_ADD, 
            this.blendEquationAlpha = q.BLENDEQUATION_ADD, this.depthTest = q.DEPTHTEST_LEQUAL, 
            this.depthWrite = !0;
        }
        cloneTo(e) {
            var t = e;
            t.cull = this.cull, t.blend = this.blend, t.srcBlend = this.srcBlend, t.dstBlend = this.dstBlend, 
            t.srcBlendRGB = this.srcBlendRGB, t.dstBlendRGB = this.dstBlendRGB, t.srcBlendAlpha = this.srcBlendAlpha, 
            t.dstBlendAlpha = this.dstBlendAlpha, this.blendConstColor.cloneTo(t.blendConstColor), 
            t.blendEquation = this.blendEquation, t.blendEquationRGB = this.blendEquationRGB, 
            t.blendEquationAlpha = this.blendEquationAlpha, t.depthTest = this.depthTest, t.depthWrite = this.depthWrite;
        }
        clone() {
            var e = new q();
            return this.cloneTo(e), e;
        }
    }
    q.CULL_NONE = 0, q.CULL_FRONT = 1, q.CULL_BACK = 2, q.BLEND_DISABLE = 0, q.BLEND_ENABLE_ALL = 1, 
    q.BLEND_ENABLE_SEPERATE = 2, q.BLENDPARAM_ZERO = 0, q.BLENDPARAM_ONE = 1, q.BLENDPARAM_SRC_COLOR = 768, 
    q.BLENDPARAM_ONE_MINUS_SRC_COLOR = 769, q.BLENDPARAM_DST_COLOR = 774, q.BLENDPARAM_ONE_MINUS_DST_COLOR = 775, 
    q.BLENDPARAM_SRC_ALPHA = 770, q.BLENDPARAM_ONE_MINUS_SRC_ALPHA = 771, q.BLENDPARAM_DST_ALPHA = 772, 
    q.BLENDPARAM_ONE_MINUS_DST_ALPHA = 773, q.BLENDPARAM_SRC_ALPHA_SATURATE = 776, q.BLENDEQUATION_ADD = 32774, 
    q.BLENDEQUATION_SUBTRACT = 32778, q.BLENDEQUATION_REVERSE_SUBTRACT = 32779, q.DEPTHTEST_OFF = 0, 
    q.DEPTHTEST_NEVER = 512, q.DEPTHTEST_LESS = 513, q.DEPTHTEST_EQUAL = 514, q.DEPTHTEST_LEQUAL = 515, 
    q.DEPTHTEST_GREATER = 516, q.DEPTHTEST_NOTEQUAL = 517, q.DEPTHTEST_GEQUAL = 518, 
    q.DEPTHTEST_ALWAYS = 519;
    class Q extends Y {
        constructor() {
            super(), this._enableVertexColor = !1, this.setShaderName("BLINNPHONG"), this._albedoIntensity = 1, 
            this._albedoColor = new a(1, 1, 1, 1);
            var e = this._shaderValues;
            e.setVector(Q.ALBEDOCOLOR, new a(1, 1, 1, 1)), e.setVector(Q.MATERIALSPECULAR, new a(1, 1, 1, 1)), 
            e.setNumber(Q.SHININESS, .078125), e.setNumber(Y.ALPHATESTVALUE, .5), e.setVector(Q.TILINGOFFSET, new a(1, 1, 0, 0)), 
            this._enableLighting = !0, this.renderMode = Q.RENDERMODE_OPAQUE;
        }
        static __initDefine__() {
            Q.SHADERDEFINE_DIFFUSEMAP = G.getDefineByName("DIFFUSEMAP"), Q.SHADERDEFINE_NORMALMAP = G.getDefineByName("NORMALMAP"), 
            Q.SHADERDEFINE_SPECULARMAP = G.getDefineByName("SPECULARMAP"), Q.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET"), 
            Q.SHADERDEFINE_ENABLEVERTEXCOLOR = G.getDefineByName("ENABLEVERTEXCOLOR");
        }
        get _ColorR() {
            return this._albedoColor.x;
        }
        set _ColorR(e) {
            this._albedoColor.x = e, this.albedoColor = this._albedoColor;
        }
        get _ColorG() {
            return this._albedoColor.y;
        }
        set _ColorG(e) {
            this._albedoColor.y = e, this.albedoColor = this._albedoColor;
        }
        get _ColorB() {
            return this._albedoColor.z;
        }
        set _ColorB(e) {
            this._albedoColor.z = e, this.albedoColor = this._albedoColor;
        }
        get _ColorA() {
            return this._albedoColor.w;
        }
        set _ColorA(e) {
            this._albedoColor.w = e, this.albedoColor = this._albedoColor;
        }
        get _SpecColorR() {
            return this._shaderValues.getVector(Q.MATERIALSPECULAR).x;
        }
        set _SpecColorR(e) {
            this._shaderValues.getVector(Q.MATERIALSPECULAR).x = e;
        }
        get _SpecColorG() {
            return this._shaderValues.getVector(Q.MATERIALSPECULAR).y;
        }
        set _SpecColorG(e) {
            this._shaderValues.getVector(Q.MATERIALSPECULAR).y = e;
        }
        get _SpecColorB() {
            return this._shaderValues.getVector(Q.MATERIALSPECULAR).z;
        }
        set _SpecColorB(e) {
            this._shaderValues.getVector(Q.MATERIALSPECULAR).z = e;
        }
        get _SpecColorA() {
            return this._shaderValues.getVector(Q.MATERIALSPECULAR).w;
        }
        set _SpecColorA(e) {
            this._shaderValues.getVector(Q.MATERIALSPECULAR).w = e;
        }
        get _AlbedoIntensity() {
            return this._albedoIntensity;
        }
        set _AlbedoIntensity(e) {
            if (this._albedoIntensity !== e) {
                var t = this._shaderValues.getVector(Q.ALBEDOCOLOR);
                a.scale(this._albedoColor, e, t), this._albedoIntensity = e, this._shaderValues.setVector(Q.ALBEDOCOLOR, t);
            }
        }
        get _Shininess() {
            return this._shaderValues.getNumber(Q.SHININESS);
        }
        set _Shininess(e) {
            e = Math.max(0, Math.min(1, e)), this._shaderValues.setNumber(Q.SHININESS, e);
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector(Q.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector(Q.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector(Q.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector(Q.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector(Q.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector(Q.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector(Q.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector(Q.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        get _Cutoff() {
            return this.alphaTestValue;
        }
        set _Cutoff(e) {
            this.alphaTestValue = e;
        }
        set renderMode(e) {
            switch (e) {
              case Q.RENDERMODE_OPAQUE:
                this.alphaTest = !1, this.renderQueue = Y.RENDERQUEUE_OPAQUE, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS;
                break;

              case Q.RENDERMODE_CUTOUT:
                this.renderQueue = Y.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS;
                break;

              case Q.RENDERMODE_TRANSPARENT:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS;
                break;

              default:
                throw new Error("Material:renderMode value error.");
            }
        }
        get enableVertexColor() {
            return this._enableVertexColor;
        }
        set enableVertexColor(e) {
            this._enableVertexColor = e, e ? this._shaderValues.addDefine(Q.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._shaderValues.removeDefine(Q.SHADERDEFINE_ENABLEVERTEXCOLOR);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector(Q.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine(Q.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(Q.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(Q.TILINGOFFSET, e);
        }
        get albedoColorR() {
            return this._ColorR;
        }
        set albedoColorR(e) {
            this._ColorR = e;
        }
        get albedoColorG() {
            return this._ColorG;
        }
        set albedoColorG(e) {
            this._ColorG = e;
        }
        get albedoColorB() {
            return this._ColorB;
        }
        set albedoColorB(e) {
            this._ColorB = e;
        }
        get albedoColorA() {
            return this._ColorA;
        }
        set albedoColorA(e) {
            this._ColorA = e;
        }
        get albedoColor() {
            return this._albedoColor;
        }
        set albedoColor(e) {
            var t = this._shaderValues.getVector(Q.ALBEDOCOLOR);
            a.scale(e, this._albedoIntensity, t), this._albedoColor = e, this._shaderValues.setVector(Q.ALBEDOCOLOR, t);
        }
        get albedoIntensity() {
            return this._albedoIntensity;
        }
        set albedoIntensity(e) {
            this._AlbedoIntensity = e;
        }
        get specularColorR() {
            return this._SpecColorR;
        }
        set specularColorR(e) {
            this._SpecColorR = e;
        }
        get specularColorG() {
            return this._SpecColorG;
        }
        set specularColorG(e) {
            this._SpecColorG = e;
        }
        get specularColorB() {
            return this._SpecColorB;
        }
        set specularColorB(e) {
            this._SpecColorB = e;
        }
        get specularColorA() {
            return this._SpecColorA;
        }
        set specularColorA(e) {
            this._SpecColorA = e;
        }
        get specularColor() {
            return this._shaderValues.getVector(Q.MATERIALSPECULAR);
        }
        set specularColor(e) {
            this._shaderValues.setVector(Q.MATERIALSPECULAR, e);
        }
        get shininess() {
            return this._Shininess;
        }
        set shininess(e) {
            this._Shininess = e;
        }
        get albedoTexture() {
            return this._shaderValues.getTexture(Q.ALBEDOTEXTURE);
        }
        set albedoTexture(e) {
            e ? this._shaderValues.addDefine(Q.SHADERDEFINE_DIFFUSEMAP) : this._shaderValues.removeDefine(Q.SHADERDEFINE_DIFFUSEMAP), 
            this._shaderValues.setTexture(Q.ALBEDOTEXTURE, e);
        }
        get normalTexture() {
            return this._shaderValues.getTexture(Q.NORMALTEXTURE);
        }
        set normalTexture(e) {
            e ? this._shaderValues.addDefine(Q.SHADERDEFINE_NORMALMAP) : this._shaderValues.removeDefine(Q.SHADERDEFINE_NORMALMAP), 
            this._shaderValues.setTexture(Q.NORMALTEXTURE, e);
        }
        get specularTexture() {
            return this._shaderValues.getTexture(Q.SPECULARTEXTURE);
        }
        set specularTexture(e) {
            e ? this._shaderValues.addDefine(Q.SHADERDEFINE_SPECULARMAP) : this._shaderValues.removeDefine(Q.SHADERDEFINE_SPECULARMAP), 
            this._shaderValues.setTexture(Q.SPECULARTEXTURE, e);
        }
        get enableLighting() {
            return this._enableLighting;
        }
        set enableLighting(e) {
            this._enableLighting !== e && (e ? (this._disablePublicDefineDatas.remove(j.SHADERDEFINE_POINTLIGHT), 
            this._disablePublicDefineDatas.remove(j.SHADERDEFINE_SPOTLIGHT), this._disablePublicDefineDatas.remove(j.SHADERDEFINE_DIRECTIONLIGHT)) : (this._disablePublicDefineDatas.add(j.SHADERDEFINE_POINTLIGHT), 
            this._disablePublicDefineDatas.add(j.SHADERDEFINE_SPOTLIGHT), this._disablePublicDefineDatas.add(j.SHADERDEFINE_DIRECTIONLIGHT)), 
            this._enableLighting = e);
        }
        get depthWrite() {
            return this._shaderValues.getBool(Q.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(Q.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt(Q.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt(Q.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt(Q.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt(Q.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(Q.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(Q.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(Q.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt(Q.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(Q.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(Q.DEPTH_TEST, e);
        }
        clone() {
            var e = new Q();
            return this.cloneTo(e), e;
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t._enableLighting = this._enableLighting, t._albedoIntensity = this._albedoIntensity, 
            t._enableVertexColor = this._enableVertexColor, this._albedoColor.cloneTo(t._albedoColor);
        }
    }
    Q.RENDERMODE_OPAQUE = 0, Q.RENDERMODE_CUTOUT = 1, Q.RENDERMODE_TRANSPARENT = 2, 
    Q.ALBEDOTEXTURE = G.propertyNameToID("u_DiffuseTexture"), Q.NORMALTEXTURE = G.propertyNameToID("u_NormalTexture"), 
    Q.SPECULARTEXTURE = G.propertyNameToID("u_SpecularTexture"), Q.ALBEDOCOLOR = G.propertyNameToID("u_DiffuseColor"), 
    Q.MATERIALSPECULAR = G.propertyNameToID("u_MaterialSpecular"), Q.SHININESS = G.propertyNameToID("u_Shininess"), 
    Q.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), Q.CULL = G.propertyNameToID("s_Cull"), 
    Q.BLEND = G.propertyNameToID("s_Blend"), Q.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), 
    Q.BLEND_DST = G.propertyNameToID("s_BlendDst"), Q.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), 
    Q.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class K extends Y {
        constructor() {
            super(), this.setShaderName("Effect"), this._color = new a(1, 1, 1, 1), this._shaderValues.setVector(K.TINTCOLOR, new a(1, 1, 1, 1)), 
            this.renderMode = K.RENDERMODE_ADDTIVE;
        }
        static __initDefine__() {
            K.SHADERDEFINE_MAINTEXTURE = G.getDefineByName("MAINTEXTURE"), K.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET"), 
            K.SHADERDEFINE_ADDTIVEFOG = G.getDefineByName("ADDTIVEFOG");
        }
        get _TintColorR() {
            return this._color.x;
        }
        set _TintColorR(e) {
            this._color.x = e, this.color = this._color;
        }
        get _TintColorG() {
            return this._color.y;
        }
        set _TintColorG(e) {
            this._color.y = e, this.color = this._color;
        }
        get _TintColorB() {
            return this._color.z;
        }
        set _TintColorB(e) {
            this._color.z = e, this.color = this._color;
        }
        get _TintColorA() {
            return this._color.w;
        }
        set _TintColorA(e) {
            this._color.w = e, this.color = this._color;
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector(K.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector(K.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector(K.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector(K.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector(K.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector(K.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector(K.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector(K.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        set renderMode(e) {
            switch (e) {
              case K.RENDERMODE_ADDTIVE:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_NONE, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE, this.depthTest = q.DEPTHTEST_LESS, this._shaderValues.addDefine(K.SHADERDEFINE_ADDTIVEFOG);
                break;

              case K.RENDERMODE_ALPHABLENDED:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_NONE, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine(K.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("MeshEffectMaterial : renderMode value error.");
            }
        }
        get colorR() {
            return this._TintColorR;
        }
        set colorR(e) {
            this._TintColorR = e;
        }
        get colorG() {
            return this._TintColorG;
        }
        set colorG(e) {
            this._TintColorG = e;
        }
        get colorB() {
            return this._TintColorB;
        }
        set colorB(e) {
            this._TintColorB = e;
        }
        get colorA() {
            return this._TintColorA;
        }
        set colorA(e) {
            this._TintColorA = e;
        }
        get color() {
            return this._shaderValues.getVector(K.TINTCOLOR);
        }
        set color(e) {
            this._shaderValues.setVector(K.TINTCOLOR, e);
        }
        get texture() {
            return this._shaderValues.getTexture(K.MAINTEXTURE);
        }
        set texture(e) {
            e ? this._shaderValues.addDefine(K.SHADERDEFINE_MAINTEXTURE) : this._shaderValues.removeDefine(K.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(K.MAINTEXTURE, e);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector(K.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine(K.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(K.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(K.TILINGOFFSET, e);
        }
        get depthWrite() {
            return this._shaderValues.getBool(K.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(K.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt(K.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt(K.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt(K.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt(K.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(K.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(K.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(K.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt(K.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(K.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(K.DEPTH_TEST, e);
        }
        clone() {
            var e = new K();
            return this.cloneTo(e), e;
        }
    }
    K.RENDERMODE_ADDTIVE = 0, K.RENDERMODE_ALPHABLENDED = 1, K.MAINTEXTURE = G.propertyNameToID("u_AlbedoTexture"), 
    K.TINTCOLOR = G.propertyNameToID("u_AlbedoColor"), K.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), 
    K.CULL = G.propertyNameToID("s_Cull"), K.BLEND = G.propertyNameToID("s_Blend"), 
    K.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), K.BLEND_DST = G.propertyNameToID("s_BlendDst"), 
    K.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), K.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class J extends Y {
        constructor() {
            super(), this._enableLighting = !0, this.setShaderName("ExtendTerrain"), this.renderMode = J.RENDERMODE_OPAQUE;
        }
        static __initDefine__() {
            J.SHADERDEFINE_DETAIL_NUM1 = G.getDefineByName("ExtendTerrain_DETAIL_NUM1"), J.SHADERDEFINE_DETAIL_NUM2 = G.getDefineByName("ExtendTerrain_DETAIL_NUM2"), 
            J.SHADERDEFINE_DETAIL_NUM3 = G.getDefineByName("ExtendTerrain_DETAIL_NUM3"), J.SHADERDEFINE_DETAIL_NUM4 = G.getDefineByName("ExtendTerrain_DETAIL_NUM4"), 
            J.SHADERDEFINE_DETAIL_NUM5 = G.getDefineByName("ExtendTerrain_DETAIL_NUM5");
        }
        get splatAlphaTexture() {
            return this._shaderValues.getTexture(J.SPLATALPHATEXTURE);
        }
        set splatAlphaTexture(e) {
            this._shaderValues.setTexture(J.SPLATALPHATEXTURE, e);
        }
        get diffuseTexture1() {
            return this._shaderValues.getTexture(J.DIFFUSETEXTURE1);
        }
        set diffuseTexture1(e) {
            this._shaderValues.setTexture(J.DIFFUSETEXTURE1, e), this._setDetailNum(1);
        }
        get diffuseTexture2() {
            return this._shaderValues.getTexture(J.DIFFUSETEXTURE2);
        }
        set diffuseTexture2(e) {
            this._shaderValues.setTexture(J.DIFFUSETEXTURE2, e), this._setDetailNum(2);
        }
        get diffuseTexture3() {
            return this._shaderValues.getTexture(J.DIFFUSETEXTURE3);
        }
        set diffuseTexture3(e) {
            this._shaderValues.setTexture(J.DIFFUSETEXTURE3, e), this._setDetailNum(3);
        }
        get diffuseTexture4() {
            return this._shaderValues.getTexture(J.DIFFUSETEXTURE4);
        }
        set diffuseTexture4(e) {
            this._shaderValues.setTexture(J.DIFFUSETEXTURE4, e), this._setDetailNum(4);
        }
        get diffuseTexture5() {
            return this._shaderValues.getTexture(J.DIFFUSETEXTURE5);
        }
        set diffuseTexture5(e) {
            this._shaderValues.setTexture(J.DIFFUSETEXTURE5, e), this._setDetailNum(5);
        }
        set diffuseScaleOffset1(e) {
            this._shaderValues.setVector(J.DIFFUSESCALEOFFSET1, e);
        }
        set diffuseScaleOffset2(e) {
            this._shaderValues.setVector(J.DIFFUSESCALEOFFSET2, e);
        }
        set diffuseScaleOffset3(e) {
            this._shaderValues.setVector(J.DIFFUSESCALEOFFSET3, e);
        }
        set diffuseScaleOffset4(e) {
            this._shaderValues.setVector(J.DIFFUSESCALEOFFSET4, e);
        }
        set diffuseScaleOffset5(e) {
            this._shaderValues.setVector(J.DIFFUSESCALEOFFSET5, e);
        }
        get enableLighting() {
            return this._enableLighting;
        }
        set enableLighting(e) {
            this._enableLighting !== e && (e ? (this._disablePublicDefineDatas.remove(j.SHADERDEFINE_POINTLIGHT), 
            this._disablePublicDefineDatas.remove(j.SHADERDEFINE_SPOTLIGHT), this._disablePublicDefineDatas.remove(j.SHADERDEFINE_DIRECTIONLIGHT)) : (this._disablePublicDefineDatas.add(j.SHADERDEFINE_POINTLIGHT), 
            this._disablePublicDefineDatas.add(j.SHADERDEFINE_SPOTLIGHT), this._disablePublicDefineDatas.add(j.SHADERDEFINE_DIRECTIONLIGHT)), 
            this._enableLighting = e);
        }
        set renderMode(e) {
            switch (e) {
              case J.RENDERMODE_OPAQUE:
                this.renderQueue = Y.RENDERQUEUE_OPAQUE, this.depthWrite = !0, this.cull = q.CULL_BACK, 
                this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS;
                break;

              case J.RENDERMODE_TRANSPARENT:
                this.renderQueue = Y.RENDERQUEUE_OPAQUE, this.depthWrite = !1, this.cull = q.CULL_BACK, 
                this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, 
                this.depthTest = q.DEPTHTEST_LEQUAL;
                break;

              default:
                throw new Error("ExtendTerrainMaterial:renderMode value error.");
            }
        }
        get depthWrite() {
            return this._shaderValues.getBool(J.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(J.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt(J.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt(J.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt(J.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt(J.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(J.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(J.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(J.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt(J.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(J.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(J.DEPTH_TEST, e);
        }
        _setDetailNum(e) {
            switch (e) {
              case 1:
                this._shaderValues.addDefine(J.SHADERDEFINE_DETAIL_NUM1), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM2), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM3), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM4), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 2:
                this._shaderValues.addDefine(J.SHADERDEFINE_DETAIL_NUM2), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM1), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM3), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM4), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 3:
                this._shaderValues.addDefine(J.SHADERDEFINE_DETAIL_NUM3), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM1), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM2), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM4), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 4:
                this._shaderValues.addDefine(J.SHADERDEFINE_DETAIL_NUM4), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM1), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM2), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM3), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 5:
                this._shaderValues.addDefine(J.SHADERDEFINE_DETAIL_NUM5), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM1), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM2), this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM3), 
                this._shaderValues.removeDefine(J.SHADERDEFINE_DETAIL_NUM4);
            }
        }
        clone() {
            var e = new J();
            return this.cloneTo(e), e;
        }
    }
    J.RENDERMODE_OPAQUE = 1, J.RENDERMODE_TRANSPARENT = 2, J.SPLATALPHATEXTURE = G.propertyNameToID("u_SplatAlphaTexture"), 
    J.DIFFUSETEXTURE1 = G.propertyNameToID("u_DiffuseTexture1"), J.DIFFUSETEXTURE2 = G.propertyNameToID("u_DiffuseTexture2"), 
    J.DIFFUSETEXTURE3 = G.propertyNameToID("u_DiffuseTexture3"), J.DIFFUSETEXTURE4 = G.propertyNameToID("u_DiffuseTexture4"), 
    J.DIFFUSETEXTURE5 = G.propertyNameToID("u_DiffuseTexture5"), J.DIFFUSESCALEOFFSET1 = G.propertyNameToID("u_DiffuseScaleOffset1"), 
    J.DIFFUSESCALEOFFSET2 = G.propertyNameToID("u_DiffuseScaleOffset2"), J.DIFFUSESCALEOFFSET3 = G.propertyNameToID("u_DiffuseScaleOffset3"), 
    J.DIFFUSESCALEOFFSET4 = G.propertyNameToID("u_DiffuseScaleOffset4"), J.DIFFUSESCALEOFFSET5 = G.propertyNameToID("u_DiffuseScaleOffset5"), 
    J.CULL = G.propertyNameToID("s_Cull"), J.BLEND = G.propertyNameToID("s_Blend"), 
    J.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), J.BLEND_DST = G.propertyNameToID("s_BlendDst"), 
    J.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), J.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class $ extends Y {
        constructor() {
            super(), this.setShaderName("PBRSpecular"), this._albedoColor = new a(1, 1, 1, 1), 
            this._shaderValues.setVector($.ALBEDOCOLOR, new a(1, 1, 1, 1)), this._emissionColor = new a(0, 0, 0, 0), 
            this._shaderValues.setVector($.EMISSIONCOLOR, new a(0, 0, 0, 0)), this._specularColor = new a(.2, .2, .2, .2), 
            this._shaderValues.setVector($.SPECULARCOLOR, new a(.2, .2, .2, .2)), this._shaderValues.setNumber($.SMOOTHNESS, .5), 
            this._shaderValues.setNumber($.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber($.SMOOTHNESSSOURCE, 0), 
            this._shaderValues.setNumber($.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber($.NORMALSCALE, 1), 
            this._shaderValues.setNumber($.PARALLAXSCALE, .001), this._shaderValues.setBool($.ENABLEEMISSION, !1), 
            this._shaderValues.setNumber(Y.ALPHATESTVALUE, .5), this.renderMode = $.RENDERMODE_OPAQUE;
        }
        static __initDefine__() {
            $.SHADERDEFINE_ALBEDOTEXTURE = G.getDefineByName("ALBEDOTEXTURE"), $.SHADERDEFINE_SPECULARTEXTURE = G.getDefineByName("SPECULARTEXTURE"), 
            $.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = G.getDefineByName("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"), 
            $.SHADERDEFINE_NORMALTEXTURE = G.getDefineByName("NORMALTEXTURE"), $.SHADERDEFINE_PARALLAXTEXTURE = G.getDefineByName("PARALLAXTEXTURE"), 
            $.SHADERDEFINE_OCCLUSIONTEXTURE = G.getDefineByName("OCCLUSIONTEXTURE"), $.SHADERDEFINE_EMISSION = G.getDefineByName("EMISSION"), 
            $.SHADERDEFINE_EMISSIONTEXTURE = G.getDefineByName("EMISSIONTEXTURE"), $.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET"), 
            $.SHADERDEFINE_ALPHAPREMULTIPLY = G.getDefineByName("ALPHAPREMULTIPLY");
        }
        get _ColorR() {
            return this._albedoColor.x;
        }
        set _ColorR(e) {
            this._albedoColor.x = e, this.albedoColor = this._albedoColor;
        }
        get _ColorG() {
            return this._albedoColor.y;
        }
        set _ColorG(e) {
            this._albedoColor.y = e, this.albedoColor = this._albedoColor;
        }
        get _ColorB() {
            return this._albedoColor.z;
        }
        set _ColorB(e) {
            this._albedoColor.z = e, this.albedoColor = this._albedoColor;
        }
        get _ColorA() {
            return this._albedoColor.w;
        }
        set _ColorA(e) {
            this._albedoColor.w = e, this.albedoColor = this._albedoColor;
        }
        get _SpecColorR() {
            return this._specularColor.x;
        }
        set _SpecColorR(e) {
            this._specularColor.x = e, this.specularColor = this._specularColor;
        }
        get _SpecColorG() {
            return this._specularColor.y;
        }
        set _SpecColorG(e) {
            this._specularColor.y = e, this.specularColor = this._specularColor;
        }
        get _SpecColorB() {
            return this._specularColor.z;
        }
        set _SpecColorB(e) {
            this._specularColor.z = e, this.specularColor = this._specularColor;
        }
        get _SpecColorA() {
            return this._specularColor.w;
        }
        set _SpecColorA(e) {
            this._specularColor.w = e, this.specularColor = this._specularColor;
        }
        get _Glossiness() {
            return this._shaderValues.getNumber($.SMOOTHNESS);
        }
        set _Glossiness(e) {
            this._shaderValues.setNumber($.SMOOTHNESS, e);
        }
        get _GlossMapScale() {
            return this._shaderValues.getNumber($.SMOOTHNESSSCALE);
        }
        set _GlossMapScale(e) {
            this._shaderValues.setNumber($.SMOOTHNESSSCALE, e);
        }
        get _BumpScale() {
            return this._shaderValues.getNumber($.NORMALSCALE);
        }
        set _BumpScale(e) {
            this._shaderValues.setNumber($.NORMALSCALE, e);
        }
        get _Parallax() {
            return this._shaderValues.getNumber($.PARALLAXSCALE);
        }
        set _Parallax(e) {
            this._shaderValues.setNumber($.PARALLAXSCALE, e);
        }
        get _OcclusionStrength() {
            return this._shaderValues.getNumber($.OCCLUSIONSTRENGTH);
        }
        set _OcclusionStrength(e) {
            this._shaderValues.setNumber($.OCCLUSIONSTRENGTH, e);
        }
        get _EmissionColorR() {
            return this._emissionColor.x;
        }
        set _EmissionColorR(e) {
            this._emissionColor.x = e, this.emissionColor = this._emissionColor;
        }
        get _EmissionColorG() {
            return this._emissionColor.y;
        }
        set _EmissionColorG(e) {
            this._emissionColor.y = e, this.emissionColor = this._emissionColor;
        }
        get _EmissionColorB() {
            return this._emissionColor.z;
        }
        set _EmissionColorB(e) {
            this._emissionColor.z = e, this.emissionColor = this._emissionColor;
        }
        get _EmissionColorA() {
            return this._emissionColor.w;
        }
        set _EmissionColorA(e) {
            this._emissionColor.w = e, this.emissionColor = this._emissionColor;
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector($.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector($.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector($.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector($.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector($.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector($.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector($.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector($.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        get _Cutoff() {
            return this.alphaTestValue;
        }
        set _Cutoff(e) {
            this.alphaTestValue = e;
        }
        get albedoColorR() {
            return this._ColorR;
        }
        set albedoColorR(e) {
            this._ColorR = e;
        }
        get albedoColorG() {
            return this._ColorG;
        }
        set albedoColorG(e) {
            this._ColorG = e;
        }
        get albedoColorB() {
            return this._ColorB;
        }
        set albedoColorB(e) {
            this._ColorB = e;
        }
        get albedoColorA() {
            return this._ColorA;
        }
        set albedoColorA(e) {
            this._ColorA = e;
        }
        get albedoColor() {
            return this._albedoColor;
        }
        set albedoColor(e) {
            this._albedoColor = e, this._shaderValues.setVector($.ALBEDOCOLOR, e);
        }
        get albedoTexture() {
            return this._shaderValues.getTexture($.ALBEDOTEXTURE);
        }
        set albedoTexture(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_ALBEDOTEXTURE) : this._shaderValues.removeDefine($.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture($.ALBEDOTEXTURE, e);
        }
        get normalTexture() {
            return this._shaderValues.getTexture($.NORMALTEXTURE);
        }
        set normalTexture(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_NORMALTEXTURE) : this._shaderValues.removeDefine($.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture($.NORMALTEXTURE, e);
        }
        get normalTextureScale() {
            return this._BumpScale;
        }
        set normalTextureScale(e) {
            this._BumpScale = e;
        }
        get parallaxTexture() {
            return this._shaderValues.getTexture($.PARALLAXTEXTURE);
        }
        set parallaxTexture(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_PARALLAXTEXTURE) : this._shaderValues.removeDefine($.SHADERDEFINE_PARALLAXTEXTURE), 
            this._shaderValues.setTexture($.PARALLAXTEXTURE, e);
        }
        get parallaxTextureScale() {
            return this._Parallax;
        }
        set parallaxTextureScale(e) {
            this._Parallax = Math.max(.005, Math.min(.08, e));
        }
        get occlusionTexture() {
            return this._shaderValues.getTexture($.OCCLUSIONTEXTURE);
        }
        set occlusionTexture(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_OCCLUSIONTEXTURE) : this._shaderValues.removeDefine($.SHADERDEFINE_OCCLUSIONTEXTURE), 
            this._shaderValues.setTexture($.OCCLUSIONTEXTURE, e);
        }
        get occlusionTextureStrength() {
            return this._OcclusionStrength;
        }
        set occlusionTextureStrength(e) {
            this._OcclusionStrength = Math.max(0, Math.min(1, e));
        }
        get specularTexture() {
            return this._shaderValues.getTexture($.SPECULARTEXTURE);
        }
        set specularTexture(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_SPECULARTEXTURE) : this._shaderValues.removeDefine($.SHADERDEFINE_SPECULARTEXTURE), 
            this._shaderValues.setTexture($.SPECULARTEXTURE, e);
        }
        get specularColorR() {
            return this._SpecColorR;
        }
        set specularColorR(e) {
            this._SpecColorR = e;
        }
        get specularColorG() {
            return this._SpecColorG;
        }
        set specularColorG(e) {
            this._SpecColorG = e;
        }
        get specularColorB() {
            return this._SpecColorB;
        }
        set specularColorB(e) {
            this._SpecColorB = e;
        }
        get specularColorA() {
            return this._SpecColorA;
        }
        set specularColorA(e) {
            this._SpecColorA = e;
        }
        get specularColor() {
            return this._shaderValues.getVector($.SPECULARCOLOR);
        }
        set specularColor(e) {
            this._shaderValues.setVector($.SPECULARCOLOR, e);
        }
        get smoothness() {
            return this._Glossiness;
        }
        set smoothness(e) {
            this._Glossiness = Math.max(0, Math.min(1, e));
        }
        get smoothnessTextureScale() {
            return this._GlossMapScale;
        }
        set smoothnessTextureScale(e) {
            this._GlossMapScale = Math.max(0, Math.min(1, e));
        }
        get smoothnessSource() {
            return this._shaderValues.getInt($.SMOOTHNESSSOURCE);
        }
        set smoothnessSource(e) {
            e ? (this._shaderValues.addDefine($.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt($.SMOOTHNESSSOURCE, 1)) : (this._shaderValues.removeDefine($.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt($.SMOOTHNESSSOURCE, 0));
        }
        get enableEmission() {
            return this._shaderValues.getBool($.ENABLEEMISSION);
        }
        set enableEmission(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_EMISSION) : this._shaderValues.removeDefine($.SHADERDEFINE_EMISSION), 
            this._shaderValues.setBool($.ENABLEEMISSION, e);
        }
        get emissionColor() {
            return this._shaderValues.getVector($.EMISSIONCOLOR);
        }
        set emissionColor(e) {
            this._shaderValues.setVector($.EMISSIONCOLOR, e);
        }
        get emissionTexture() {
            return this._shaderValues.getTexture($.EMISSIONTEXTURE);
        }
        set emissionTexture(e) {
            e ? this._shaderValues.addDefine($.SHADERDEFINE_EMISSIONTEXTURE) : this._shaderValues.removeDefine($.SHADERDEFINE_EMISSIONTEXTURE), 
            this._shaderValues.setTexture($.EMISSIONTEXTURE, e);
        }
        get enableReflection() {
            return this._shaderValues.getBool($.ENABLEREFLECT);
        }
        set enableReflection(e) {
            this._shaderValues.setBool($.ENABLEREFLECT, !0), e ? this._disablePublicDefineDatas.remove(j.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(j.SHADERDEFINE_REFLECTMAP);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector($.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine($.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine($.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector($.TILINGOFFSET, e);
        }
        set renderMode(e) {
            switch (e) {
              case $.RENDERMODE_OPAQUE:
                this.alphaTest = !1, this.renderQueue = Y.RENDERQUEUE_OPAQUE, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine($.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case $.RENDERMODE_CUTOUT:
                this.renderQueue = Y.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine($.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case $.RENDERMODE_FADE:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine($.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case $.RENDERMODE_TRANSPARENT:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_ONE, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.addDefine($.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              default:
                throw new Error("PBRSpecularMaterial : renderMode value error.");
            }
        }
        get depthWrite() {
            return this._shaderValues.getBool($.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool($.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt($.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt($.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt($.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt($.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt($.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt($.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt($.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt($.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt($.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt($.DEPTH_TEST, e);
        }
        clone() {
            var e = new $();
            return this.cloneTo(e), e;
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            this._albedoColor.cloneTo(t._albedoColor), this._specularColor.cloneTo(t._specularColor), 
            this._emissionColor.cloneTo(t._emissionColor);
        }
    }
    $.SmoothnessSource_SpecularTexture_Alpha = 0, $.SmoothnessSource_AlbedoTexture_Alpha = 1, 
    $.RENDERMODE_OPAQUE = 0, $.RENDERMODE_CUTOUT = 1, $.RENDERMODE_FADE = 2, $.RENDERMODE_TRANSPARENT = 3, 
    $.ALBEDOTEXTURE = G.propertyNameToID("u_AlbedoTexture"), $.SPECULARTEXTURE = G.propertyNameToID("u_SpecularTexture"), 
    $.NORMALTEXTURE = G.propertyNameToID("u_NormalTexture"), $.PARALLAXTEXTURE = G.propertyNameToID("u_ParallaxTexture"), 
    $.OCCLUSIONTEXTURE = G.propertyNameToID("u_OcclusionTexture"), $.EMISSIONTEXTURE = G.propertyNameToID("u_EmissionTexture"), 
    $.ALBEDOCOLOR = G.propertyNameToID("u_AlbedoColor"), $.SPECULARCOLOR = G.propertyNameToID("u_SpecularColor"), 
    $.EMISSIONCOLOR = G.propertyNameToID("u_EmissionColor"), $.SMOOTHNESS = G.propertyNameToID("u_smoothness"), 
    $.SMOOTHNESSSCALE = G.propertyNameToID("u_smoothnessScale"), $.SMOOTHNESSSOURCE = -1, 
    $.OCCLUSIONSTRENGTH = G.propertyNameToID("u_occlusionStrength"), $.NORMALSCALE = G.propertyNameToID("u_normalScale"), 
    $.PARALLAXSCALE = G.propertyNameToID("u_parallaxScale"), $.ENABLEEMISSION = -1, 
    $.ENABLEREFLECT = -1, $.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), $.CULL = G.propertyNameToID("s_Cull"), 
    $.BLEND = G.propertyNameToID("s_Blend"), $.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), 
    $.BLEND_DST = G.propertyNameToID("s_BlendDst"), $.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), 
    $.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class ee extends Y {
        constructor() {
            super(), this.setShaderName("PBRStandard"), this._albedoColor = new a(1, 1, 1, 1), 
            this._shaderValues.setVector(ee.ALBEDOCOLOR, new a(1, 1, 1, 1)), this._emissionColor = new a(0, 0, 0, 0), 
            this._shaderValues.setVector(ee.EMISSIONCOLOR, new a(0, 0, 0, 0)), this._shaderValues.setNumber(ee.METALLIC, 0), 
            this._shaderValues.setNumber(ee.SMOOTHNESS, .5), this._shaderValues.setNumber(ee.SMOOTHNESSSCALE, 1), 
            this._shaderValues.setNumber(ee.SMOOTHNESSSOURCE, 0), this._shaderValues.setNumber(ee.OCCLUSIONSTRENGTH, 1), 
            this._shaderValues.setNumber(ee.NORMALSCALE, 1), this._shaderValues.setNumber(ee.PARALLAXSCALE, .001), 
            this._shaderValues.setBool(ee.ENABLEEMISSION, !1), this._shaderValues.setBool(ee.ENABLEREFLECT, !0), 
            this._shaderValues.setNumber(Y.ALPHATESTVALUE, .5), this._disablePublicDefineDatas.remove(j.SHADERDEFINE_REFLECTMAP), 
            this.renderMode = ee.RENDERMODE_OPAQUE;
        }
        static __initDefine__() {
            ee.SHADERDEFINE_ALBEDOTEXTURE = G.getDefineByName("ALBEDOTEXTURE"), ee.SHADERDEFINE_METALLICGLOSSTEXTURE = G.getDefineByName("METALLICGLOSSTEXTURE"), 
            ee.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = G.getDefineByName("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"), 
            ee.SHADERDEFINE_NORMALTEXTURE = G.getDefineByName("NORMALTEXTURE"), ee.SHADERDEFINE_PARALLAXTEXTURE = G.getDefineByName("PARALLAXTEXTURE"), 
            ee.SHADERDEFINE_OCCLUSIONTEXTURE = G.getDefineByName("OCCLUSIONTEXTURE"), ee.SHADERDEFINE_EMISSION = G.getDefineByName("EMISSION"), 
            ee.SHADERDEFINE_EMISSIONTEXTURE = G.getDefineByName("EMISSIONTEXTURE"), ee.SHADERDEFINE_REFLECTMAP = G.getDefineByName("REFLECTMAP"), 
            ee.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET"), ee.SHADERDEFINE_ALPHAPREMULTIPLY = G.getDefineByName("ALPHAPREMULTIPLY");
        }
        get _ColorR() {
            return this._albedoColor.x;
        }
        set _ColorR(e) {
            this._albedoColor.x = e, this.albedoColor = this._albedoColor;
        }
        get _ColorG() {
            return this._albedoColor.y;
        }
        set _ColorG(e) {
            this._albedoColor.y = e, this.albedoColor = this._albedoColor;
        }
        get _ColorB() {
            return this._albedoColor.z;
        }
        set _ColorB(e) {
            this._albedoColor.z = e, this.albedoColor = this._albedoColor;
        }
        get _ColorA() {
            return this._albedoColor.w;
        }
        set _ColorA(e) {
            this._albedoColor.w = e, this.albedoColor = this._albedoColor;
        }
        get _Metallic() {
            return this._shaderValues.getNumber(ee.METALLIC);
        }
        set _Metallic(e) {
            this._shaderValues.setNumber(ee.METALLIC, e);
        }
        get _Glossiness() {
            return this._shaderValues.getNumber(ee.SMOOTHNESS);
        }
        set _Glossiness(e) {
            this._shaderValues.setNumber(ee.SMOOTHNESS, e);
        }
        get _GlossMapScale() {
            return this._shaderValues.getNumber(ee.SMOOTHNESSSCALE);
        }
        set _GlossMapScale(e) {
            this._shaderValues.setNumber(ee.SMOOTHNESSSCALE, e);
        }
        get _BumpScale() {
            return this._shaderValues.getNumber(ee.NORMALSCALE);
        }
        set _BumpScale(e) {
            this._shaderValues.setNumber(ee.NORMALSCALE, e);
        }
        get _Parallax() {
            return this._shaderValues.getNumber(ee.PARALLAXSCALE);
        }
        set _Parallax(e) {
            this._shaderValues.setNumber(ee.PARALLAXSCALE, e);
        }
        get _OcclusionStrength() {
            return this._shaderValues.getNumber(ee.OCCLUSIONSTRENGTH);
        }
        set _OcclusionStrength(e) {
            this._shaderValues.setNumber(ee.OCCLUSIONSTRENGTH, e);
        }
        get _EmissionColorR() {
            return this._emissionColor.x;
        }
        set _EmissionColorR(e) {
            this._emissionColor.x = e, this.emissionColor = this._emissionColor;
        }
        get _EmissionColorG() {
            return this._emissionColor.y;
        }
        set _EmissionColorG(e) {
            this._emissionColor.y = e, this.emissionColor = this._emissionColor;
        }
        get _EmissionColorB() {
            return this._emissionColor.z;
        }
        set _EmissionColorB(e) {
            this._emissionColor.z = e, this.emissionColor = this._emissionColor;
        }
        get _EmissionColorA() {
            return this._emissionColor.w;
        }
        set _EmissionColorA(e) {
            this._emissionColor.w = e, this.emissionColor = this._emissionColor;
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector(ee.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector(ee.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector(ee.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector(ee.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector(ee.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector(ee.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector(ee.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector(ee.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        get _Cutoff() {
            return this.alphaTestValue;
        }
        set _Cutoff(e) {
            this.alphaTestValue = e;
        }
        get albedoColorR() {
            return this._ColorR;
        }
        set albedoColorR(e) {
            this._ColorR = e;
        }
        get albedoColorG() {
            return this._ColorG;
        }
        set albedoColorG(e) {
            this._ColorG = e;
        }
        get albedoColorB() {
            return this._ColorB;
        }
        set albedoColorB(e) {
            this._ColorB = e;
        }
        get albedoColorA() {
            return this._ColorA;
        }
        set albedoColorA(e) {
            this._ColorA = e;
        }
        get albedoColor() {
            return this._albedoColor;
        }
        set albedoColor(e) {
            this._albedoColor = e, this._shaderValues.setVector(ee.ALBEDOCOLOR, e);
        }
        get albedoTexture() {
            return this._shaderValues.getTexture(ee.ALBEDOTEXTURE);
        }
        set albedoTexture(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_ALBEDOTEXTURE) : this._shaderValues.removeDefine(ee.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(ee.ALBEDOTEXTURE, e);
        }
        get normalTexture() {
            return this._shaderValues.getTexture(ee.NORMALTEXTURE);
        }
        set normalTexture(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_NORMALTEXTURE) : this._shaderValues.removeDefine(ee.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(ee.NORMALTEXTURE, e);
        }
        get normalTextureScale() {
            return this._BumpScale;
        }
        set normalTextureScale(e) {
            this._BumpScale = e;
        }
        get parallaxTexture() {
            return this._shaderValues.getTexture(ee.PARALLAXTEXTURE);
        }
        set parallaxTexture(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_PARALLAXTEXTURE) : this._shaderValues.removeDefine(ee.SHADERDEFINE_PARALLAXTEXTURE), 
            this._shaderValues.setTexture(ee.PARALLAXTEXTURE, e);
        }
        get parallaxTextureScale() {
            return this._Parallax;
        }
        set parallaxTextureScale(e) {
            this._Parallax = Math.max(.005, Math.min(.08, e));
        }
        get occlusionTexture() {
            return this._shaderValues.getTexture(ee.OCCLUSIONTEXTURE);
        }
        set occlusionTexture(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_OCCLUSIONTEXTURE) : this._shaderValues.removeDefine(ee.SHADERDEFINE_OCCLUSIONTEXTURE), 
            this._shaderValues.setTexture(ee.OCCLUSIONTEXTURE, e);
        }
        get occlusionTextureStrength() {
            return this._OcclusionStrength;
        }
        set occlusionTextureStrength(e) {
            this._OcclusionStrength = Math.max(0, Math.min(1, e));
        }
        get metallicGlossTexture() {
            return this._shaderValues.getTexture(ee.METALLICGLOSSTEXTURE);
        }
        set metallicGlossTexture(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_METALLICGLOSSTEXTURE) : this._shaderValues.removeDefine(ee.SHADERDEFINE_METALLICGLOSSTEXTURE), 
            this._shaderValues.setTexture(ee.METALLICGLOSSTEXTURE, e);
        }
        get metallic() {
            return this._Metallic;
        }
        set metallic(e) {
            this._Metallic = Math.max(0, Math.min(1, e));
        }
        get smoothness() {
            return this._Glossiness;
        }
        set smoothness(e) {
            this._Glossiness = Math.max(0, Math.min(1, e));
        }
        get smoothnessTextureScale() {
            return this._GlossMapScale;
        }
        set smoothnessTextureScale(e) {
            this._GlossMapScale = Math.max(0, Math.min(1, e));
        }
        get smoothnessSource() {
            return this._shaderValues.getInt(ee.SMOOTHNESSSOURCE);
        }
        set smoothnessSource(e) {
            e ? (this._shaderValues.addDefine(ee.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(ee.SMOOTHNESSSOURCE, 1)) : (this._shaderValues.removeDefine(ee.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(ee.SMOOTHNESSSOURCE, 0));
        }
        get enableEmission() {
            return this._shaderValues.getBool(ee.ENABLEEMISSION);
        }
        set enableEmission(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_EMISSION) : this._shaderValues.removeDefine(ee.SHADERDEFINE_EMISSION), 
            this._shaderValues.setBool(ee.ENABLEEMISSION, e);
        }
        get emissionColorR() {
            return this._EmissionColorR;
        }
        set emissionColorR(e) {
            this._EmissionColorR = e;
        }
        get emissionColorG() {
            return this._EmissionColorG;
        }
        set emissionColorG(e) {
            this._EmissionColorG = e;
        }
        get emissionColorB() {
            return this._EmissionColorB;
        }
        set emissionColorB(e) {
            this._EmissionColorB = e;
        }
        get emissionColorA() {
            return this._EmissionColorA;
        }
        set emissionColorA(e) {
            this._EmissionColorA = e;
        }
        get emissionColor() {
            return this._shaderValues.getVector(ee.EMISSIONCOLOR);
        }
        set emissionColor(e) {
            this._shaderValues.setVector(ee.EMISSIONCOLOR, e);
        }
        get emissionTexture() {
            return this._shaderValues.getTexture(ee.EMISSIONTEXTURE);
        }
        set emissionTexture(e) {
            e ? this._shaderValues.addDefine(ee.SHADERDEFINE_EMISSIONTEXTURE) : this._shaderValues.removeDefine(ee.SHADERDEFINE_EMISSIONTEXTURE), 
            this._shaderValues.setTexture(ee.EMISSIONTEXTURE, e);
        }
        get enableReflection() {
            return this._shaderValues.getBool(ee.ENABLEREFLECT);
        }
        set enableReflection(e) {
            this._shaderValues.setBool(ee.ENABLEREFLECT, !0), e ? this._disablePublicDefineDatas.remove(j.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(j.SHADERDEFINE_REFLECTMAP);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector(ee.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine(ee.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(ee.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(ee.TILINGOFFSET, e);
        }
        set renderMode(e) {
            switch (e) {
              case ee.RENDERMODE_OPAQUE:
                this.alphaTest = !1, this.renderQueue = Y.RENDERQUEUE_OPAQUE, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine(ee.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case ee.RENDERMODE_CUTOUT:
                this.renderQueue = Y.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine(ee.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case ee.RENDERMODE_FADE:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine(ee.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case ee.RENDERMODE_TRANSPARENT:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_ONE, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.addDefine(ee.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              default:
                throw new Error("PBRSpecularMaterial : renderMode value error.");
            }
        }
        get depthWrite() {
            return this._shaderValues.getBool(ee.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(ee.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt(ee.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt(ee.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt(ee.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt(ee.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(ee.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(ee.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(ee.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt(ee.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(ee.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(ee.DEPTH_TEST, e);
        }
        clone() {
            var e = new ee();
            return this.cloneTo(e), e;
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            this._albedoColor.cloneTo(t._albedoColor), this._emissionColor.cloneTo(t._emissionColor);
        }
    }
    ee.SmoothnessSource_MetallicGlossTexture_Alpha = 0, ee.SmoothnessSource_AlbedoTexture_Alpha = 1, 
    ee.RENDERMODE_OPAQUE = 0, ee.RENDERMODE_CUTOUT = 1, ee.RENDERMODE_FADE = 2, ee.RENDERMODE_TRANSPARENT = 3, 
    ee.ALBEDOTEXTURE = G.propertyNameToID("u_AlbedoTexture"), ee.METALLICGLOSSTEXTURE = G.propertyNameToID("u_MetallicGlossTexture"), 
    ee.NORMALTEXTURE = G.propertyNameToID("u_NormalTexture"), ee.PARALLAXTEXTURE = G.propertyNameToID("u_ParallaxTexture"), 
    ee.OCCLUSIONTEXTURE = G.propertyNameToID("u_OcclusionTexture"), ee.EMISSIONTEXTURE = G.propertyNameToID("u_EmissionTexture"), 
    ee.ALBEDOCOLOR = G.propertyNameToID("u_AlbedoColor"), ee.EMISSIONCOLOR = G.propertyNameToID("u_EmissionColor"), 
    ee.METALLIC = G.propertyNameToID("u_metallic"), ee.SMOOTHNESS = G.propertyNameToID("u_smoothness"), 
    ee.SMOOTHNESSSCALE = G.propertyNameToID("u_smoothnessScale"), ee.SMOOTHNESSSOURCE = -1, 
    ee.OCCLUSIONSTRENGTH = G.propertyNameToID("u_occlusionStrength"), ee.NORMALSCALE = G.propertyNameToID("u_normalScale"), 
    ee.PARALLAXSCALE = G.propertyNameToID("u_parallaxScale"), ee.ENABLEEMISSION = -1, 
    ee.ENABLEREFLECT = -1, ee.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), ee.CULL = G.propertyNameToID("s_Cull"), 
    ee.BLEND = G.propertyNameToID("s_Blend"), ee.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), 
    ee.BLEND_DST = G.propertyNameToID("s_BlendDst"), ee.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), 
    ee.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class te extends Y {
        constructor() {
            super(), this.setShaderName("SkyBox"), this.tintColor = new a(.5, .5, .5, .5), this.exposure = 1, 
            this.rotation = 0;
        }
        static __initDefine__() {}
        get tintColor() {
            return this._shaderValues.getVector(te.TINTCOLOR);
        }
        set tintColor(e) {
            this._shaderValues.setVector(te.TINTCOLOR, e);
        }
        get exposure() {
            return this._shaderValues.getNumber(te.EXPOSURE);
        }
        set exposure(e) {
            this._shaderValues.setNumber(te.EXPOSURE, e);
        }
        get rotation() {
            return this._shaderValues.getNumber(te.ROTATION);
        }
        set rotation(e) {
            this._shaderValues.setNumber(te.ROTATION, e);
        }
        get textureCube() {
            return this._shaderValues.getTexture(te.TEXTURECUBE);
        }
        set textureCube(e) {
            this._shaderValues.setTexture(te.TEXTURECUBE, e);
        }
        clone() {
            var e = new te();
            return this.cloneTo(e), e;
        }
    }
    te.TINTCOLOR = G.propertyNameToID("u_TintColor"), te.EXPOSURE = G.propertyNameToID("u_Exposure"), 
    te.ROTATION = G.propertyNameToID("u_Rotation"), te.TEXTURECUBE = G.propertyNameToID("u_CubeTexture");
    class re extends Y {
        constructor() {
            super(), this.setShaderName("SkyBoxProcedural"), this.sunDisk = re.SUN_HIGH_QUALITY, 
            this.sunSize = .04, this.sunSizeConvergence = 5, this.atmosphereThickness = 1, this.skyTint = new a(.5, .5, .5, 1), 
            this.groundTint = new a(.369, .349, .341, 1), this.exposure = 1.3;
        }
        static __initDefine__() {
            re.SHADERDEFINE_SUN_HIGH_QUALITY = G.getDefineByName("SUN_HIGH_QUALITY"), re.SHADERDEFINE_SUN_SIMPLE = G.getDefineByName("SUN_SIMPLE");
        }
        get sunDisk() {
            return this._sunDisk;
        }
        set sunDisk(e) {
            switch (e) {
              case re.SUN_HIGH_QUALITY:
                this._shaderValues.removeDefine(re.SHADERDEFINE_SUN_SIMPLE), this._shaderValues.addDefine(re.SHADERDEFINE_SUN_HIGH_QUALITY);
                break;

              case re.SUN_SIMPLE:
                this._shaderValues.removeDefine(re.SHADERDEFINE_SUN_HIGH_QUALITY), this._shaderValues.addDefine(re.SHADERDEFINE_SUN_SIMPLE);
                break;

              case re.SUN_NODE:
                this._shaderValues.removeDefine(re.SHADERDEFINE_SUN_HIGH_QUALITY), this._shaderValues.removeDefine(re.SHADERDEFINE_SUN_SIMPLE);
                break;

              default:
                throw "SkyBoxProceduralMaterial: unknown sun value.";
            }
            this._sunDisk = e;
        }
        get sunSize() {
            return this._shaderValues.getNumber(re.SUNSIZE);
        }
        set sunSize(e) {
            e = Math.min(Math.max(0, e), 1), this._shaderValues.setNumber(re.SUNSIZE, e);
        }
        get sunSizeConvergence() {
            return this._shaderValues.getNumber(re.SUNSIZECONVERGENCE);
        }
        set sunSizeConvergence(e) {
            e = Math.min(Math.max(0, e), 20), this._shaderValues.setNumber(re.SUNSIZECONVERGENCE, e);
        }
        get atmosphereThickness() {
            return this._shaderValues.getNumber(re.ATMOSPHERETHICKNESS);
        }
        set atmosphereThickness(e) {
            e = Math.min(Math.max(0, e), 5), this._shaderValues.setNumber(re.ATMOSPHERETHICKNESS, e);
        }
        get skyTint() {
            return this._shaderValues.getVector(re.SKYTINT);
        }
        set skyTint(e) {
            this._shaderValues.setVector(re.SKYTINT, e);
        }
        get groundTint() {
            return this._shaderValues.getVector(re.GROUNDTINT);
        }
        set groundTint(e) {
            this._shaderValues.setVector(re.GROUNDTINT, e);
        }
        get exposure() {
            return this._shaderValues.getNumber(re.EXPOSURE);
        }
        set exposure(e) {
            e = Math.min(Math.max(0, e), 8), this._shaderValues.setNumber(re.EXPOSURE, e);
        }
        clone() {
            var e = new re();
            return this.cloneTo(e), e;
        }
    }
    re.SUN_NODE = 0, re.SUN_SIMPLE = 1, re.SUN_HIGH_QUALITY = 2, re.SUNSIZE = G.propertyNameToID("u_SunSize"), 
    re.SUNSIZECONVERGENCE = G.propertyNameToID("u_SunSizeConvergence"), re.ATMOSPHERETHICKNESS = G.propertyNameToID("u_AtmosphereThickness"), 
    re.SKYTINT = G.propertyNameToID("u_SkyTint"), re.GROUNDTINT = G.propertyNameToID("u_GroundTint"), 
    re.EXPOSURE = G.propertyNameToID("u_Exposure");
    class ie extends Y {
        constructor() {
            super(), this._albedoColor = new a(1, 1, 1, 1), this._albedoIntensity = 1, this._enableVertexColor = !1, 
            this.setShaderName("Unlit"), this._shaderValues.setVector(ie.ALBEDOCOLOR, new a(1, 1, 1, 1)), 
            this.renderMode = ie.RENDERMODE_OPAQUE;
        }
        static __initDefine__() {
            ie.SHADERDEFINE_ALBEDOTEXTURE = G.getDefineByName("ALBEDOTEXTURE"), ie.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET"), 
            ie.SHADERDEFINE_ENABLEVERTEXCOLOR = G.getDefineByName("ENABLEVERTEXCOLOR");
        }
        get _ColorR() {
            return this._albedoColor.x;
        }
        set _ColorR(e) {
            this._albedoColor.x = e, this.albedoColor = this._albedoColor;
        }
        get _ColorG() {
            return this._albedoColor.y;
        }
        set _ColorG(e) {
            this._albedoColor.y = e, this.albedoColor = this._albedoColor;
        }
        get _ColorB() {
            return this._albedoColor.z;
        }
        set _ColorB(e) {
            this._albedoColor.z = e, this.albedoColor = this._albedoColor;
        }
        get _ColorA() {
            return this._albedoColor.w;
        }
        set _ColorA(e) {
            this._albedoColor.w = e, this.albedoColor = this._albedoColor;
        }
        get _AlbedoIntensity() {
            return this._albedoIntensity;
        }
        set _AlbedoIntensity(e) {
            if (this._albedoIntensity !== e) {
                var t = this._shaderValues.getVector(ie.ALBEDOCOLOR);
                a.scale(this._albedoColor, e, t), this._albedoIntensity = e, this._shaderValues.setVector(ie.ALBEDOCOLOR, t);
            }
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector(ie.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector(ie.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector(ie.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector(ie.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector(ie.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector(ie.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector(ie.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector(ie.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        get _Cutoff() {
            return this.alphaTestValue;
        }
        set _Cutoff(e) {
            this.alphaTestValue = e;
        }
        get albedoColorR() {
            return this._ColorR;
        }
        set albedoColorR(e) {
            this._ColorR = e;
        }
        get albedoColorG() {
            return this._ColorG;
        }
        set albedoColorG(e) {
            this._ColorG = e;
        }
        get albedoColorB() {
            return this._ColorB;
        }
        set albedoColorB(e) {
            this._ColorB = e;
        }
        get albedoColorA() {
            return this._ColorA;
        }
        set albedoColorA(e) {
            this._ColorA = e;
        }
        get albedoColor() {
            return this._albedoColor;
        }
        set albedoColor(e) {
            var t = this._shaderValues.getVector(ie.ALBEDOCOLOR);
            a.scale(e, this._albedoIntensity, t), this._albedoColor = e, this._shaderValues.setVector(ie.ALBEDOCOLOR, t);
        }
        get albedoIntensity() {
            return this._albedoIntensity;
        }
        set albedoIntensity(e) {
            this._AlbedoIntensity = e;
        }
        get albedoTexture() {
            return this._shaderValues.getTexture(ie.ALBEDOTEXTURE);
        }
        set albedoTexture(e) {
            e ? this._shaderValues.addDefine(ie.SHADERDEFINE_ALBEDOTEXTURE) : this._shaderValues.removeDefine(ie.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(ie.ALBEDOTEXTURE, e);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector(ie.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine(ie.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(ie.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(ie.TILINGOFFSET, e);
        }
        get enableVertexColor() {
            return this._enableVertexColor;
        }
        set enableVertexColor(e) {
            this._enableVertexColor = e, e ? this._shaderValues.addDefine(ie.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._shaderValues.removeDefine(ie.SHADERDEFINE_ENABLEVERTEXCOLOR);
        }
        set renderMode(e) {
            switch (e) {
              case ie.RENDERMODE_OPAQUE:
                this.alphaTest = !1, this.renderQueue = Y.RENDERQUEUE_OPAQUE, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS;
                break;

              case ie.RENDERMODE_CUTOUT:
                this.renderQueue = Y.RENDERQUEUE_ALPHATEST, this.alphaTest = !0, this.depthWrite = !0, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_DISABLE, this.depthTest = q.DEPTHTEST_LESS;
                break;

              case ie.RENDERMODE_TRANSPARENT:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_BACK, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS;
                break;

              default:
                throw new Error("UnlitMaterial : renderMode value error.");
            }
        }
        get depthWrite() {
            return this._shaderValues.getBool(ie.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(ie.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt(ie.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt(ie.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt(ie.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt(ie.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(ie.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(ie.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(ie.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt(ie.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(ie.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(ie.DEPTH_TEST, e);
        }
        clone() {
            var e = new ie();
            return this.cloneTo(e), e;
        }
    }
    ie.RENDERMODE_OPAQUE = 0, ie.RENDERMODE_CUTOUT = 1, ie.RENDERMODE_TRANSPARENT = 2, 
    ie.RENDERMODE_ADDTIVE = 3, ie.ALBEDOTEXTURE = G.propertyNameToID("u_AlbedoTexture"), 
    ie.ALBEDOCOLOR = G.propertyNameToID("u_AlbedoColor"), ie.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), 
    ie.CULL = G.propertyNameToID("s_Cull"), ie.BLEND = G.propertyNameToID("s_Blend"), 
    ie.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), ie.BLEND_DST = G.propertyNameToID("s_BlendDst"), 
    ie.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), ie.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class ae extends Y {
        constructor() {
            super(), this.setShaderName("WaterPrimary"), this._shaderValues.setVector(ae.HORIZONCOLOR, new a(.172, .463, .435, 0)), 
            this._shaderValues.setNumber(ae.WAVESCALE, .15), this._shaderValues.setVector(ae.WAVESPEED, new a(19, 9, -16, -7));
        }
        static __initDefine__() {
            ae.SHADERDEFINE_MAINTEXTURE = G.getDefineByName("MAINTEXTURE"), ae.SHADERDEFINE_NORMALTEXTURE = G.getDefineByName("NORMALTEXTURE");
        }
        get horizonColor() {
            return this._shaderValues.getVector(ae.HORIZONCOLOR);
        }
        set horizonColor(e) {
            this._shaderValues.setVector(ae.HORIZONCOLOR, e);
        }
        get mainTexture() {
            return this._shaderValues.getTexture(ae.MAINTEXTURE);
        }
        set mainTexture(e) {
            e ? this._shaderValues.addDefine(ae.SHADERDEFINE_MAINTEXTURE) : this._shaderValues.removeDefine(ae.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(ae.MAINTEXTURE, e);
        }
        get normalTexture() {
            return this._shaderValues.getTexture(ae.NORMALTEXTURE);
        }
        set normalTexture(e) {
            e ? this._shaderValues.addDefine(ae.SHADERDEFINE_NORMALTEXTURE) : this._shaderValues.removeDefine(ae.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(ae.NORMALTEXTURE, e);
        }
        get waveScale() {
            return this._shaderValues.getNumber(ae.WAVESCALE);
        }
        set waveScale(e) {
            this._shaderValues.setNumber(ae.WAVESCALE, e);
        }
        get waveSpeed() {
            return this._shaderValues.getVector(ae.WAVESPEED);
        }
        set waveSpeed(e) {
            this._shaderValues.setVector(ae.WAVESPEED, e);
        }
        clone() {
            var e = new ae();
            return this.cloneTo(e), e;
        }
    }
    ae.HORIZONCOLOR = G.propertyNameToID("u_HorizonColor"), ae.MAINTEXTURE = G.propertyNameToID("u_MainTexture"), 
    ae.NORMALTEXTURE = G.propertyNameToID("u_NormalTexture"), ae.WAVESCALE = G.propertyNameToID("u_WaveScale"), 
    ae.WAVESPEED = G.propertyNameToID("u_WaveSpeed");
    class ne {
        constructor(e = 1, t = 1, r = 1, i = 1) {
            this.r = e, this.g = t, this.b = r, this.a = i;
        }
        static gammaToLinearSpace(e) {
            return e <= .04045 ? e / 12.92 : e < 1 ? Math.pow((e + .055) / 1.055, 2.4) : Math.pow(e, 2.4);
        }
        static linearToGammaSpace(e) {
            return e <= 0 ? 0 : e <= .0031308 ? 12.92 * e : e <= 1 ? 1.055 * Math.pow(e, .41666) - .055 : Math.pow(e, .41666);
        }
        toLinear(e) {
            e.r = ne.gammaToLinearSpace(this.r), e.g = ne.gammaToLinearSpace(this.g), e.b = ne.gammaToLinearSpace(this.b);
        }
        toGamma(e) {
            e.r = ne.linearToGammaSpace(this.r), e.g = ne.linearToGammaSpace(this.g), e.b = ne.linearToGammaSpace(this.b);
        }
        cloneTo(e) {
            var t = e;
            t.r = this.r, t.g = this.g, t.b = this.b, t.a = this.a;
        }
        clone() {
            var e = new ne();
            return this.cloneTo(e), e;
        }
        forNativeElement() {}
    }
    ne.RED = new ne(1, 0, 0, 1), ne.GREEN = new ne(0, 1, 0, 1), ne.BLUE = new ne(0, 0, 1, 1), 
    ne.CYAN = new ne(0, 1, 1, 1), ne.YELLOW = new ne(1, .92, .016, 1), ne.MAGENTA = new ne(1, 0, 1, 1), 
    ne.GRAY = new ne(.5, .5, .5, 1), ne.WHITE = new ne(1, 1, 1, 1), ne.BLACK = new ne(0, 0, 0, 1);
    class se {
        constructor() {
            this._batchRenderElementPool = [];
        }
        static _registerManager(e) {
            se._managers.push(e);
        }
        _clear() {
            this._batchRenderElementPoolIndex = 0;
        }
        _getBatchRenderElementFromPool() {
            throw "StaticBatch:must override this function.";
        }
        dispose() {}
    }
    se._managers = [];
    class oe extends t.EventDispatcher {
        constructor(e) {
            super(), this._localPosition = new n(0, 0, 0), this._localRotation = new u(0, 0, 0, 1), 
            this._localScale = new n(1, 1, 1), this._localRotationEuler = new n(0, 0, 0), this._localMatrix = new L(), 
            this._position = new n(0, 0, 0), this._rotation = new u(0, 0, 0, 1), this._scale = new n(1, 1, 1), 
            this._rotationEuler = new n(0, 0, 0), this._worldMatrix = new L(), this._children = null, 
            this._parent = null, this._dummy = null, this._transformFlag = 0, this._owner = e, 
            this._children = [], this._setTransformFlag(oe.TRANSFORM_LOCALQUATERNION | oe.TRANSFORM_LOCALEULER | oe.TRANSFORM_LOCALMATRIX, !1), 
            this._setTransformFlag(oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDEULER | oe.TRANSFORM_WORLDSCALE | oe.TRANSFORM_WORLDMATRIX, !0);
        }
        get _isFrontFaceInvert() {
            var e = this.getWorldLossyScale(), t = e.x < 0;
            return e.y < 0 && (t = !t), e.z < 0 && (t = !t), t;
        }
        get owner() {
            return this._owner;
        }
        get worldNeedUpdate() {
            return this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX);
        }
        get localPositionX() {
            return this._localPosition.x;
        }
        set localPositionX(e) {
            this._localPosition.x = e, this.localPosition = this._localPosition;
        }
        get localPositionY() {
            return this._localPosition.y;
        }
        set localPositionY(e) {
            this._localPosition.y = e, this.localPosition = this._localPosition;
        }
        get localPositionZ() {
            return this._localPosition.z;
        }
        set localPositionZ(e) {
            this._localPosition.z = e, this.localPosition = this._localPosition;
        }
        get localPosition() {
            return this._localPosition;
        }
        set localPosition(e) {
            this._localPosition !== e && e.cloneTo(this._localPosition), this._setTransformFlag(oe.TRANSFORM_LOCALMATRIX, !0), 
            this._onWorldPositionTransform();
        }
        get localRotationX() {
            return this.localRotation.x;
        }
        set localRotationX(e) {
            this._localRotation.x = e, this.localRotation = this._localRotation;
        }
        get localRotationY() {
            return this.localRotation.y;
        }
        set localRotationY(e) {
            this._localRotation.y = e, this.localRotation = this._localRotation;
        }
        get localRotationZ() {
            return this.localRotation.z;
        }
        set localRotationZ(e) {
            this._localRotation.z = e, this.localRotation = this._localRotation;
        }
        get localRotationW() {
            return this.localRotation.w;
        }
        set localRotationW(e) {
            this._localRotation.w = e, this.localRotation = this._localRotation;
        }
        get localRotation() {
            if (this._getTransformFlag(oe.TRANSFORM_LOCALQUATERNION)) {
                var e = this._localRotationEuler;
                u.createFromYawPitchRoll(e.y / oe._angleToRandin, e.x / oe._angleToRandin, e.z / oe._angleToRandin, this._localRotation), 
                this._setTransformFlag(oe.TRANSFORM_LOCALQUATERNION, !1);
            }
            return this._localRotation;
        }
        set localRotation(e) {
            this._localRotation !== e && e.cloneTo(this._localRotation), this._localRotation.normalize(this._localRotation), 
            this._setTransformFlag(oe.TRANSFORM_LOCALEULER | oe.TRANSFORM_LOCALMATRIX, !0), 
            this._setTransformFlag(oe.TRANSFORM_LOCALQUATERNION, !1), this._onWorldRotationTransform();
        }
        get localScaleX() {
            return this._localScale.x;
        }
        set localScaleX(e) {
            this._localScale.x = e, this.localScale = this._localScale;
        }
        get localScaleY() {
            return this._localScale.y;
        }
        set localScaleY(e) {
            this._localScale.y = e, this.localScale = this._localScale;
        }
        get localScaleZ() {
            return this._localScale.z;
        }
        set localScaleZ(e) {
            this._localScale.z = e, this.localScale = this._localScale;
        }
        get localScale() {
            return this._localScale;
        }
        set localScale(e) {
            this._localScale !== e && e.cloneTo(this._localScale), this._setTransformFlag(oe.TRANSFORM_LOCALMATRIX, !0), 
            this._onWorldScaleTransform();
        }
        get localRotationEulerX() {
            return this.localRotationEuler.x;
        }
        set localRotationEulerX(e) {
            this._localRotationEuler.x = e, this.localRotationEuler = this._localRotationEuler;
        }
        get localRotationEulerY() {
            return this.localRotationEuler.y;
        }
        set localRotationEulerY(e) {
            this._localRotationEuler.y = e, this.localRotationEuler = this._localRotationEuler;
        }
        get localRotationEulerZ() {
            return this.localRotationEuler.z;
        }
        set localRotationEulerZ(e) {
            this._localRotationEuler.z = e, this.localRotationEuler = this._localRotationEuler;
        }
        get localRotationEuler() {
            if (this._getTransformFlag(oe.TRANSFORM_LOCALEULER)) {
                this._localRotation.getYawPitchRoll(oe._tempVector30);
                var e = oe._tempVector30, t = this._localRotationEuler;
                t.x = e.y * oe._angleToRandin, t.y = e.x * oe._angleToRandin, t.z = e.z * oe._angleToRandin, 
                this._setTransformFlag(oe.TRANSFORM_LOCALEULER, !1);
            }
            return this._localRotationEuler;
        }
        set localRotationEuler(e) {
            this._localRotationEuler !== e && e.cloneTo(this._localRotationEuler), this._setTransformFlag(oe.TRANSFORM_LOCALEULER, !1), 
            this._setTransformFlag(oe.TRANSFORM_LOCALQUATERNION | oe.TRANSFORM_LOCALMATRIX, !0), 
            this._onWorldRotationTransform();
        }
        get localMatrix() {
            return this._getTransformFlag(oe.TRANSFORM_LOCALMATRIX) && (L.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix), 
            this._setTransformFlag(oe.TRANSFORM_LOCALMATRIX, !1)), this._localMatrix;
        }
        set localMatrix(e) {
            this._localMatrix !== e && e.cloneTo(this._localMatrix), this._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale), 
            this._setTransformFlag(oe.TRANSFORM_LOCALEULER, !0), this._setTransformFlag(oe.TRANSFORM_LOCALMATRIX, !1), 
            this._onWorldTransform();
        }
        get position() {
            if (this._getTransformFlag(oe.TRANSFORM_WORLDPOSITION)) {
                if (null != this._parent) {
                    var e = this.worldMatrix.elements;
                    this._position.x = e[12], this._position.y = e[13], this._position.z = e[14];
                } else this._localPosition.cloneTo(this._position);
                this._setTransformFlag(oe.TRANSFORM_WORLDPOSITION, !1);
            }
            return this._position;
        }
        set position(e) {
            if (null != this._parent) {
                var t = oe._tempMatrix0;
                this._parent.worldMatrix.invert(t), n.transformCoordinate(e, t, this._localPosition);
            } else e.cloneTo(this._localPosition);
            this.localPosition = this._localPosition, this._position !== e && e.cloneTo(this._position), 
            this._setTransformFlag(oe.TRANSFORM_WORLDPOSITION, !1);
        }
        get rotation() {
            return this._getTransformFlag(oe.TRANSFORM_WORLDQUATERNION) && (null != this._parent ? u.multiply(this._parent.rotation, this.localRotation, this._rotation) : this.localRotation.cloneTo(this._rotation), 
            this._setTransformFlag(oe.TRANSFORM_WORLDQUATERNION, !1)), this._rotation;
        }
        set rotation(e) {
            null != this._parent ? (this._parent.rotation.invert(oe._tempQuaternion0), u.multiply(oe._tempQuaternion0, e, this._localRotation)) : e.cloneTo(this._localRotation), 
            this.localRotation = this._localRotation, e !== this._rotation && e.cloneTo(this._rotation), 
            this._setTransformFlag(oe.TRANSFORM_WORLDQUATERNION, !1);
        }
        get rotationEuler() {
            if (this._getTransformFlag(oe.TRANSFORM_WORLDEULER)) {
                this.rotation.getYawPitchRoll(oe._tempVector30);
                var e = oe._tempVector30, t = this._rotationEuler;
                t.x = e.y * oe._angleToRandin, t.y = e.x * oe._angleToRandin, t.z = e.z * oe._angleToRandin, 
                this._setTransformFlag(oe.TRANSFORM_WORLDEULER, !1);
            }
            return this._rotationEuler;
        }
        set rotationEuler(e) {
            u.createFromYawPitchRoll(e.y / oe._angleToRandin, e.x / oe._angleToRandin, e.z / oe._angleToRandin, this._rotation), 
            this.rotation = this._rotation, this._rotationEuler !== e && e.cloneTo(this._rotationEuler), 
            this._setTransformFlag(oe.TRANSFORM_WORLDEULER, !1);
        }
        get worldMatrix() {
            return this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) && (null != this._parent ? L.multiply(this._parent.worldMatrix, this.localMatrix, this._worldMatrix) : this.localMatrix.cloneTo(this._worldMatrix), 
            this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX, !1)), this._worldMatrix;
        }
        set worldMatrix(e) {
            null === this._parent ? e.cloneTo(this._localMatrix) : (this._parent.worldMatrix.invert(this._localMatrix), 
            L.multiply(this._localMatrix, e, this._localMatrix)), this.localMatrix = this._localMatrix, 
            this._worldMatrix !== e && e.cloneTo(this._worldMatrix), this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX, !1);
        }
        _getScaleMatrix() {
            var e = oe._tempQuaternion0, t = oe._tempMatrix3x30, r = oe._tempMatrix3x31, i = oe._tempMatrix3x32;
            return d.createFromMatrix4x4(this.worldMatrix, r), this.rotation.invert(e), d.createRotationQuaternion(e, t), 
            d.multiply(t, r, i), i;
        }
        _setTransformFlag(e, t) {
            t ? this._transformFlag |= e : this._transformFlag &= ~e;
        }
        _getTransformFlag(e) {
            return 0 != (this._transformFlag & e);
        }
        _setParent(e) {
            if (this._parent !== e) {
                if (this._parent) {
                    var t = this._parent._children, r = t.indexOf(this);
                    t.splice(r, 1);
                }
                e && (e._children.push(this), e && this._onWorldTransform()), this._parent = e;
            }
        }
        _onWorldPositionRotationTransform() {
            if (!(this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) && this._getTransformFlag(oe.TRANSFORM_WORLDPOSITION) && this._getTransformFlag(oe.TRANSFORM_WORLDQUATERNION) && this._getTransformFlag(oe.TRANSFORM_WORLDEULER))) {
                this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX | oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDEULER, !0), 
                this.event(t.Event.TRANSFORM_CHANGED, this._transformFlag);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldPositionRotationTransform();
            }
        }
        _onWorldPositionScaleTransform() {
            if (!this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(oe.TRANSFORM_WORLDPOSITION) || !this._getTransformFlag(oe.TRANSFORM_WORLDSCALE)) {
                this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX | oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDSCALE, !0), 
                this.event(t.Event.TRANSFORM_CHANGED, this._transformFlag);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldPositionScaleTransform();
            }
        }
        _onWorldPositionTransform() {
            if (!this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(oe.TRANSFORM_WORLDPOSITION)) {
                this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX | oe.TRANSFORM_WORLDPOSITION, !0), 
                this.event(t.Event.TRANSFORM_CHANGED, this._transformFlag);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldPositionTransform();
            }
        }
        _onWorldRotationTransform() {
            if (!this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(oe.TRANSFORM_WORLDQUATERNION) || !this._getTransformFlag(oe.TRANSFORM_WORLDEULER)) {
                this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDEULER, !0), 
                this.event(t.Event.TRANSFORM_CHANGED, this._transformFlag);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldPositionRotationTransform();
            }
        }
        _onWorldScaleTransform() {
            if (!this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) || !this._getTransformFlag(oe.TRANSFORM_WORLDSCALE)) {
                this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX | oe.TRANSFORM_WORLDSCALE, !0), 
                this.event(t.Event.TRANSFORM_CHANGED, this._transformFlag);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldPositionScaleTransform();
            }
        }
        _onWorldTransform() {
            if (!(this._getTransformFlag(oe.TRANSFORM_WORLDMATRIX) && this._getTransformFlag(oe.TRANSFORM_WORLDPOSITION) && this._getTransformFlag(oe.TRANSFORM_WORLDQUATERNION) && this._getTransformFlag(oe.TRANSFORM_WORLDEULER) && this._getTransformFlag(oe.TRANSFORM_WORLDSCALE))) {
                this._setTransformFlag(oe.TRANSFORM_WORLDMATRIX | oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDEULER | oe.TRANSFORM_WORLDSCALE, !0), 
                this.event(t.Event.TRANSFORM_CHANGED, this._transformFlag);
                for (var e = 0, r = this._children.length; e < r; e++) this._children[e]._onWorldTransform();
            }
        }
        translate(e, t = !0) {
            t ? (L.createFromQuaternion(this.localRotation, oe._tempMatrix0), n.transformCoordinate(e, oe._tempMatrix0, oe._tempVector30), 
            n.add(this.localPosition, oe._tempVector30, this._localPosition), this.localPosition = this._localPosition) : (n.add(this.position, e, this._position), 
            this.position = this._position);
        }
        rotate(e, t = !0, r = !0) {
            var i;
            r ? i = e : (n.scale(e, Math.PI / 180, oe._tempVector30), i = oe._tempVector30), 
            u.createFromYawPitchRoll(i.y, i.x, i.z, oe._tempQuaternion0), t ? (u.multiply(this._localRotation, oe._tempQuaternion0, this._localRotation), 
            this.localRotation = this._localRotation) : (u.multiply(oe._tempQuaternion0, this.rotation, this._rotation), 
            this.rotation = this._rotation);
        }
        getForward(e) {
            var t = this.worldMatrix.elements;
            e.x = -t[8], e.y = -t[9], e.z = -t[10];
        }
        getUp(e) {
            var t = this.worldMatrix.elements;
            e.x = t[4], e.y = t[5], e.z = t[6];
        }
        getRight(e) {
            var t = this.worldMatrix.elements;
            e.x = t[0], e.y = t[1], e.z = t[2];
        }
        lookAt(e, t, i = !1) {
            var a;
            if (i) {
                if (a = this._localPosition, Math.abs(a.x - e.x) < r.zeroTolerance && Math.abs(a.y - e.y) < r.zeroTolerance && Math.abs(a.z - e.z) < r.zeroTolerance) return;
                u.lookAt(this._localPosition, e, t, this._localRotation), this._localRotation.invert(this._localRotation), 
                this.localRotation = this._localRotation;
            } else {
                var n = this.position;
                if (a = n, Math.abs(a.x - e.x) < r.zeroTolerance && Math.abs(a.y - e.y) < r.zeroTolerance && Math.abs(a.z - e.z) < r.zeroTolerance) return;
                u.lookAt(n, e, t, this._rotation), this._rotation.invert(this._rotation), this.rotation = this._rotation;
            }
        }
        getWorldLossyScale() {
            if (this._getTransformFlag(oe.TRANSFORM_WORLDSCALE)) {
                if (null !== this._parent) {
                    var e = this._getScaleMatrix().elements;
                    this._scale.x = e[0], this._scale.y = e[4], this._scale.z = e[8];
                } else this._localScale.cloneTo(this._scale);
                this._setTransformFlag(oe.TRANSFORM_WORLDSCALE, !1);
            }
            return this._scale;
        }
        setWorldLossyScale(e) {
            if (null !== this._parent) {
                var t = oe._tempMatrix3x33, r = oe._tempMatrix3x33, i = r.elements, a = this._parent._getScaleMatrix();
                a.invert(a), d.createFromScaling(e, t), d.multiply(a, t, r), this._localScale.x = i[0], 
                this._localScale.y = i[4], this._localScale.z = i[8];
            } else e.cloneTo(this._localScale);
            this.localScale = this._localScale, this._scale !== e && e.cloneTo(this._scale), 
            this._setTransformFlag(oe.TRANSFORM_WORLDSCALE, !1);
        }
        get scale() {
            return console.warn("Transfrm3D: discard function,please use getWorldLossyScale instead."), 
            this.getWorldLossyScale();
        }
        set scale(e) {
            console.warn("Transfrm3D: discard function,please use setWorldLossyScale instead."), 
            this.setWorldLossyScale(e);
        }
    }
    oe._tempVector30 = new n(), oe._tempQuaternion0 = new u(), oe._tempMatrix0 = new L(), 
    oe._tempMatrix3x30 = new d(), oe._tempMatrix3x31 = new d(), oe._tempMatrix3x32 = new d(), 
    oe._tempMatrix3x33 = new d(), oe.TRANSFORM_LOCALQUATERNION = 1, oe.TRANSFORM_LOCALEULER = 2, 
    oe.TRANSFORM_LOCALMATRIX = 4, oe.TRANSFORM_WORLDPOSITION = 8, oe.TRANSFORM_WORLDQUATERNION = 16, 
    oe.TRANSFORM_WORLDSCALE = 32, oe.TRANSFORM_WORLDMATRIX = 64, oe.TRANSFORM_WORLDEULER = 128, 
    oe._angleToRandin = 180 / Math.PI;
    class le extends t.Node {
        constructor(e = null, t = !1) {
            super(), this._needProcessCollisions = !1, this._needProcessTriggers = !1, this._id = ++le._uniqueIDCounter, 
            this._transform = new oe(this), this._isStatic = t, this.layer = 0, this.name = e || "New Sprite3D";
        }
        static __init__() {}
        static instantiate(e, t = null, r = !0, i = null, a = null) {
            var n = e.clone();
            t && t.addChild(n);
            var s = n.transform;
            if (r) {
                var o = s.worldMatrix;
                e.transform.worldMatrix.cloneTo(o), s.worldMatrix = o;
            } else i && (s.position = i), a && (s.rotation = a);
            return n;
        }
        static load(e, r) {
            t.Laya.loader.create(e, r, null, le.HIERARCHY);
        }
        get id() {
            return this._id;
        }
        get layer() {
            return this._layer;
        }
        set layer(e) {
            if (this._layer !== e) {
                if (!(e >= 0 && e <= 30)) throw new Error("Layer value must be 0-30.");
                this._layer = e;
            }
        }
        get url() {
            return this._url;
        }
        get isStatic() {
            return this._isStatic;
        }
        get transform() {
            return this._transform;
        }
        _setCreateURL(e) {
            this._url = t.URL.formatURL(e);
        }
        _changeAnimatorsToLinkSprite3D(e, t, r) {
            var i = this.getComponent(N);
            if (i && (i.avatar || e._changeAnimatorToLinkSprite3DNoAvatar(i, t, r)), this._parent && this._parent instanceof le) {
                r.unshift(this._parent.name);
                var a = this._parent;
                a._hierarchyAnimator && a._changeAnimatorsToLinkSprite3D(e, t, r);
            }
        }
        _setHierarchyAnimator(e, t) {
            this._changeHierarchyAnimator(e), this._changeAnimatorAvatar(e.avatar);
            for (var r = 0, i = this._children.length; r < i; r++) {
                var a = this._children[r];
                a._hierarchyAnimator == t && a._setHierarchyAnimator(e, t);
            }
        }
        _clearHierarchyAnimator(e, t) {
            this._changeHierarchyAnimator(t), this._changeAnimatorAvatar(t ? t.avatar : null);
            for (var r = 0, i = this._children.length; r < i; r++) {
                var a = this._children[r];
                a._hierarchyAnimator == e && a._clearHierarchyAnimator(e, t);
            }
        }
        _changeHierarchyAnimatorAvatar(e, t) {
            this._changeAnimatorAvatar(t);
            for (var r = 0, i = this._children.length; r < i; r++) {
                var a = this._children[r];
                a._hierarchyAnimator == e && a._changeHierarchyAnimatorAvatar(e, t);
            }
        }
        _changeAnimatorToLinkSprite3DNoAvatar(e, t, r) {
            e._handleSpriteOwnersBySprite(t, r, this);
            for (var i = 0, a = this._children.length; i < a; i++) {
                var n = this._children[i], s = r.length;
                r.push(n.name), n._changeAnimatorToLinkSprite3DNoAvatar(e, t, r), r.splice(s, 1);
            }
        }
        _changeHierarchyAnimator(e) {
            this._hierarchyAnimator = e;
        }
        _changeAnimatorAvatar(e) {}
        _onAdded() {
            if (this._parent instanceof le) {
                var e = this._parent;
                this.transform._setParent(e.transform), e._hierarchyAnimator && (!this._hierarchyAnimator && this._setHierarchyAnimator(e._hierarchyAnimator, null), 
                e._changeAnimatorsToLinkSprite3D(this, !0, [ this.name ]));
            }
            super._onAdded();
        }
        _onRemoved() {
            if (super._onRemoved(), this._parent instanceof le) {
                var e = this._parent;
                this.transform._setParent(null), e._hierarchyAnimator && (this._hierarchyAnimator == e._hierarchyAnimator && this._clearHierarchyAnimator(e._hierarchyAnimator, null), 
                e._changeAnimatorsToLinkSprite3D(this, !1, [ this.name ]));
            }
        }
        _parse(e, t) {
            if (void 0 !== e.isStatic && (this._isStatic = e.isStatic), void 0 !== e.active && (this.active = e.active), 
            null != e.name && (this.name = e.name), void 0 !== e.position) {
                var r = this.transform.localPosition;
                r.fromArray(e.position), this.transform.localPosition = r;
            }
            if (void 0 !== e.rotationEuler) {
                var i = this.transform.localRotationEuler;
                i.fromArray(e.rotationEuler), this.transform.localRotationEuler = i;
            }
            if (void 0 !== e.rotation) {
                var a = this.transform.localRotation;
                a.fromArray(e.rotation), this.transform.localRotation = a;
            }
            if (void 0 !== e.scale) {
                var n = this.transform.localScale;
                n.fromArray(e.scale), this.transform.localScale = n;
            }
            null != e.layer && (this.layer = e.layer);
        }
        _cloneTo(e, t, r) {
            if (this.destroyed) throw new Error("Sprite3D: Can't be cloned if the Sprite3D has destroyed.");
            var i = e, a = this._transform, n = i._transform;
            i.name = this.name, i.destroyed = this.destroyed, i.active = this.active, n.localPosition = a.localPosition, 
            n.localRotation = a.localRotation, n.localScale = a.localScale, i._isStatic = this._isStatic, 
            i.layer = this.layer, super._cloneTo(i, t, r);
        }
        static _createSprite3DInstance(e) {
            for (var t = e._create(), r = e._children, i = 0, a = r.length; i < a; i++) {
                var n = le._createSprite3DInstance(r[i]);
                t.addChild(n);
            }
            return t;
        }
        static _parseSprite3DInstance(e, t, r, i) {
            for (var a = r._children, n = i._children, s = 0, o = a.length; s < o; s++) le._parseSprite3DInstance(e, t, a[s], n[s]);
            r._cloneTo(i, e, t);
        }
        clone() {
            var e = le._createSprite3DInstance(this);
            return le._parseSprite3DInstance(this, e, this, e), e;
        }
        destroy(e = !0) {
            this.destroyed || (super.destroy(e), this._transform = null, this._scripts = null, 
            this._url && t.Loader.clearRes(this._url));
        }
        _create() {
            return new le();
        }
    }
    le.HIERARCHY = "HIERARCHY", le.WORLDMATRIX = G.propertyNameToID("u_WorldMat"), le.MVPMATRIX = G.propertyNameToID("u_MvpMatrix"), 
    le._uniqueIDCounter = 0;
    class _e extends le {
        constructor(e) {
            super(e);
        }
        static __init__() {
            _e.SHADERDEFINE_RECEIVE_SHADOW = G.getDefineByName("RECEIVESHADOW"), _e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = G.getDefineByName("SCALEOFFSETLIGHTINGMAPUV"), 
            _e.SAHDERDEFINE_LIGHTMAP = G.getDefineByName("LIGHTMAP");
        }
        _onInActive() {
            super._onInActive(), this._scene._removeRenderObject(this._render);
        }
        _onActive() {
            super._onActive(), this._scene._addRenderObject(this._render);
        }
        _onActiveInScene() {
            if (super._onActiveInScene(), o.Laya3D._editerEnvironment) {
                var e = this._scene, t = new a();
                e._allotPickColorByID(this.id, t), e._pickIdToSprite[this.id] = this, this._render._shaderValues.setVector(_e.PICKCOLOR, t);
            }
        }
        _addToInitStaticBatchManager() {}
        _setBelongScene(e) {
            super._setBelongScene(e), this._render._setBelongScene(e);
        }
        _setUnBelongScene() {
            this._render._shaderValues.removeDefine(_e.SAHDERDEFINE_LIGHTMAP), super._setUnBelongScene();
        }
        _changeHierarchyAnimator(e) {
            if (this._hierarchyAnimator) {
                var t = this._hierarchyAnimator._renderableSprites;
                t.splice(t.indexOf(this), 1);
            }
            e && e._renderableSprites.push(this), super._changeHierarchyAnimator(e);
        }
        destroy(e = !0) {
            super.destroy(e), this._render._destroy(), this._render = null;
        }
        _create() {
            return new _e(this.name);
        }
    }
    _e.LIGHTMAPSCALEOFFSET = G.propertyNameToID("u_LightmapScaleOffset"), _e.LIGHTMAP = G.propertyNameToID("u_LightMap"), 
    _e.PICKCOLOR = G.propertyNameToID("u_PickColor");
    class he {
        constructor() {
            this._initBatchSprites = [], this._staticBatches = {}, this._batchRenderElementPoolIndex = 0, 
            this._batchRenderElementPool = [];
        }
        static _addToStaticBatchQueue(e, t) {
            e instanceof _e && t.push(e);
            for (var r = 0, i = e.numChildren; r < i; r++) he._addToStaticBatchQueue(e._children[r], t);
        }
        static _registerManager(e) {
            he._managers.push(e);
        }
        static combine(e, t = null) {
            t || (t = [], e && he._addToStaticBatchQueue(e, t));
            var r = t.length;
            if (r > 0) {
                for (var i = 0; i < r; i++) {
                    var a = t[i];
                    a.destroyed || (a._render._isPartOfStaticBatch ? console.warn("StaticBatchManager: Sprite " + a.name + " has a part of Static Batch,it will be ignore.") : a._addToInitStaticBatchManager());
                }
                for (var n = 0, s = he._managers.length; n < s; n++) {
                    he._managers[n]._initStaticBatchs(e);
                }
            }
        }
        _partition(e, t, r) {
            for (var i = e[Math.floor((r + t) / 2)]; t <= r; ) {
                for (;this._compare(e[t], i) < 0; ) t++;
                for (;this._compare(e[r], i) > 0; ) r--;
                if (t < r) {
                    var a = e[t];
                    e[t] = e[r], e[r] = a, t++, r--;
                } else if (t === r) {
                    t++;
                    break;
                }
            }
            return t;
        }
        _quickSort(e, t, r) {
            if (e.length > 1) {
                var i = this._partition(e, t, r), a = i - 1;
                t < a && this._quickSort(e, t, a), i < r && this._quickSort(e, i, r);
            }
        }
        _compare(e, t) {
            throw "StaticBatch:must override this function.";
        }
        _initStaticBatchs(e) {
            throw "StaticBatch:must override this function.";
        }
        _getBatchRenderElementFromPool() {
            throw "StaticBatch:must override this function.";
        }
        _addBatchSprite(e) {
            this._initBatchSprites.push(e);
        }
        _clear() {
            this._batchRenderElementPoolIndex = 0;
        }
        _garbageCollection() {
            throw "StaticBatchManager: must override it.";
        }
        dispose() {
            this._staticBatches = null;
        }
    }
    he._managers = [];
    class ce {
        constructor() {}
        static __init__() {
            t.Render.supportWebGLPlusCulling && (ce._cullingBufferLength = 0, ce._cullingBuffer = new Float32Array(4096));
        }
        static _drawTraversalCullingBound(e, t) {
            e.length;
            for (var r = e.elements, i = 0, a = e.length; i < a; i++) {
                var n = ce._tempColor0;
                n.r = 0, n.g = 1, n.b = 0, n.a = 1, v._drawBound(t, r[i].bounds._getBoundBox(), n);
            }
        }
        static _traversalCulling(e, r, i, a, s, o, l) {
            for (var _ = a.elements, h = e.boundFrustum, c = e._transform.position, d = 0, u = a.length; d < u; d++) {
                var f = _[d];
                if (l ? f._castShadow && f._enable : e._isLayerVisible(f._owner._layer) && f._enable) if (t.Stat.frustumCulling++, 
                !e.useOcclusionCulling || f._needRender(h, i)) {
                    f._visible = !0, f._distanceForSort = n.distance(f.bounds.getCenter(), c);
                    for (var m = f._renderElements, E = 0, T = m.length; E < T; E++) m[E]._update(r, i, s, o);
                } else f._visible = !1; else f._visible = !1;
            }
        }
        static renderObjectCulling(e, t, r, i, a, n) {
            var s, o, l = t._opaqueQueue, _ = t._transparentQueue, h = t._renders;
            l.clear(), _.clear();
            var c = he._managers;
            for (s = 0, o = c.length; s < o; s++) c[s]._clear();
            var d = se._managers;
            for (s = 0, o = d.length; s < o; s++) d[s]._clear();
            var u = t._octree;
            if (u && (u.updateMotionObjects(), u.shrinkRootIfPossible(), u.getCollidingWithFrustum(r, i, a, n)), 
            ce._traversalCulling(e, t, r, h, i, a, n), ce.debugFrustumCulling) {
                var f = t._debugTool;
                f.clear(), u && (u.drawAllBounds(f), u.drawAllObjects(f)), ce._drawTraversalCullingBound(h, f);
            }
            var m = l.elements.length;
            m > 0 && l._quickSort(0, m - 1), (m = _.elements.length) > 0 && _._quickSort(0, m - 1);
        }
        static renderObjectCullingNative(e, t, r, i, a, s) {
            var o, l, _, h, c = t._opaqueQueue, d = t._transparentQueue;
            c.clear(), d.clear();
            var u = he._managers;
            for (o = 0, l = u.length; o < l; o++) u[o]._clear();
            var f = se._managers;
            for (o = 0, l = f.length; o < l; o++) f[o]._clear();
            var m = i.length, E = i.elements;
            for (o = 0; o < m; o++) E[o].bounds, E[o]._updateForNative && E[o]._updateForNative(r);
            e.boundFrustum;
            ce.cullingNative(e._boundFrustumBuffer, ce._cullingBuffer, t._cullingBufferIndices, m, t._cullingBufferResult);
            var T = r.camera._transform.position;
            for (o = 0; o < m; o++) {
                var g = E[o];
                if (!e.useOcclusionCulling || e._isLayerVisible(g._owner._layer) && g._enable && t._cullingBufferResult[o]) {
                    g._visible = !0, g._distanceForSort = n.distance(g.bounds.getCenter(), T);
                    var p = g._renderElements;
                    for (_ = 0, h = p.length; _ < h; _++) {
                        p[_]._update(t, r, a, s);
                    }
                } else g._visible = !1;
            }
            var S = c.elements.length;
            S > 0 && c._quickSort(0, S - 1), (S = d.elements.length) > 0 && d._quickSort(0, S - 1);
        }
        static cullingNative(e, r, i, a, n) {
            return t.LayaGL.instance.culling(e, r, i, a, n);
        }
    }
    ce._tempVector3 = new n(), ce._tempColor0 = new ne(), ce.debugFrustumCulling = !1;
    class de {
        constructor() {
            this.updateMark = -1, this.indexInList = -1, this.batched = !1;
        }
    }
    class ue {
        constructor() {
            this._destroyed = !1;
        }
        get destroyed() {
            return this._destroyed;
        }
        _getType() {
            throw "GeometryElement:must override it.";
        }
        _prepareRender(e) {
            return !0;
        }
        _render(e) {
            throw "GeometryElement:must override it.";
        }
        destroy() {
            this._destroyed || (this._destroyed = !0);
        }
    }
    ue._typeCounter = 0;
    class fe extends t.Buffer {
        constructor(e, r, i = !1) {
            super(), this._vertexDeclaration = null, this._float32Reader = null;
            var a = t.LayaGL.instance;
            this._bufferUsage = r, this._bufferType = a.ARRAY_BUFFER, this._canRead = i, this._byteLength = e, 
            this.bind(), a.bufferData(this._bufferType, this._byteLength, this._bufferUsage), 
            i && (this._buffer = new Uint8Array(e), this._float32Reader = new Float32Array(this._buffer.buffer));
        }
        get vertexDeclaration() {
            return this._vertexDeclaration;
        }
        set vertexDeclaration(e) {
            this._vertexDeclaration = e;
        }
        get canRead() {
            return this._canRead;
        }
        bind() {
            if (t.Buffer._bindedVertexBuffer !== this._glBuffer) {
                var e = t.LayaGL.instance;
                return e.bindBuffer(e.ARRAY_BUFFER, this._glBuffer), t.Buffer._bindedVertexBuffer = this._glBuffer, 
                !0;
            }
            return !1;
        }
        setData(e, r = 0, i = 0, a = Number.MAX_SAFE_INTEGER) {
            if (this.bind(), 0 !== i || a !== Number.MAX_SAFE_INTEGER) {
                var n = new Uint8Array(e, i, a);
                t.LayaGL.instance.bufferSubData(this._bufferType, r, n), this._canRead && this._buffer.set(n, r);
            } else t.LayaGL.instance.bufferSubData(this._bufferType, r, e), this._canRead && this._buffer.set(new Uint8Array(e), r);
        }
        getUint8Data() {
            if (this._canRead) return this._buffer;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }
        getFloat32Data() {
            if (this._canRead) return this._float32Reader;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }
        markAsUnreadbale() {
            this._canRead = !1, this._buffer = null, this._float32Reader = null;
        }
        destroy() {
            super.destroy(), this._buffer = null, this._float32Reader = null, this._vertexDeclaration = null;
        }
    }
    fe.DATATYPE_FLOAT32ARRAY = 0, fe.DATATYPE_UINT8ARRAY = 1;
    class me {
        static __init__() {
            var e = t.LayaGL.instance;
            me._elementInfos = {
                single: [ 1, e.FLOAT, 0 ],
                vector2: [ 2, e.FLOAT, 0 ],
                vector3: [ 3, e.FLOAT, 0 ],
                vector4: [ 4, e.FLOAT, 0 ],
                color: [ 4, e.FLOAT, 0 ],
                byte4: [ 4, e.UNSIGNED_BYTE, 0 ],
                short2: [ 2, e.FLOAT, 0 ],
                short4: [ 4, e.FLOAT, 0 ],
                normalizedshort2: [ 2, e.FLOAT, 0 ],
                normalizedshort4: [ 4, e.FLOAT, 0 ],
                halfvector2: [ 2, e.FLOAT, 0 ],
                halfvector4: [ 4, e.FLOAT, 0 ]
            };
        }
        static getElementInfos(e) {
            var t = me._elementInfos[e];
            if (t) return t;
            throw "VertexElementFormat: this vertexElementFormat is not implement.";
        }
    }
    me.Single = "single", me.Vector2 = "vector2", me.Vector3 = "vector3", me.Vector4 = "vector4", 
    me.Color = "color", me.Byte4 = "byte4", me.Short2 = "short2", me.Short4 = "short4", 
    me.NormalizedShort2 = "normalizedshort2", me.NormalizedShort4 = "normalizedshort4", 
    me.HalfVector2 = "halfvector2", me.HalfVector4 = "halfvector4";
    class Ee {
        constructor(e, t) {
            this._id = ++Ee._uniqueIDCounter, this._vertexElementsDic = {}, this._vertexStride = e, 
            this._vertexElements = t;
            var r = t.length;
            this._shaderValues = new z(null);
            for (var i = 0; i < r; i++) {
                var a = t[i], n = a._elementUsage;
                this._vertexElementsDic[n] = a;
                var s = new Int32Array(5), o = me.getElementInfos(a._elementFormat);
                s[0] = o[0], s[1] = o[1], s[2] = o[2], s[3] = this._vertexStride, s[4] = a._offset, 
                this._shaderValues.setAttribute(n, s);
            }
        }
        get id() {
            return this._id;
        }
        get vertexStride() {
            return this._vertexStride;
        }
        get vertexElementCount() {
            return this._vertexElements.length;
        }
        getVertexElementByIndex(e) {
            return this._vertexElements[e];
        }
        getVertexElementByUsage(e) {
            return this._vertexElementsDic[e];
        }
    }
    Ee._uniqueIDCounter = 1;
    class Te {
        get offset() {
            return this._offset;
        }
        get elementFormat() {
            return this._elementFormat;
        }
        get elementUsage() {
            return this._elementUsage;
        }
        constructor(e, t, r) {
            this._offset = e, this._elementFormat = t, this._elementUsage = r;
        }
    }
    class ge {
        static __init__() {
            ge.instanceWorldMatrixDeclaration = new Ee(64, [ new Te(0, me.Vector4, ge.MESH_WORLDMATRIX_ROW0), new Te(16, me.Vector4, ge.MESH_WORLDMATRIX_ROW1), new Te(32, me.Vector4, ge.MESH_WORLDMATRIX_ROW2), new Te(48, me.Vector4, ge.MESH_WORLDMATRIX_ROW3) ]), 
            ge.instanceMVPMatrixDeclaration = new Ee(64, [ new Te(0, me.Vector4, ge.MESH_MVPMATRIX_ROW0), new Te(16, me.Vector4, ge.MESH_MVPMATRIX_ROW1), new Te(32, me.Vector4, ge.MESH_MVPMATRIX_ROW2), new Te(48, me.Vector4, ge.MESH_MVPMATRIX_ROW3) ]);
        }
        static getVertexDeclaration(e, t = !0) {
            var r = ge._vertexDeclarationMap[e + (t ? "_0" : "_1")];
            if (!r) {
                for (var i = e.split(","), a = 0, n = [], s = 0, o = i.length; s < o; s++) {
                    var l;
                    switch (i[s]) {
                      case "POSITION":
                        l = new Te(a, me.Vector3, ge.MESH_POSITION0), a += 12;
                        break;

                      case "NORMAL":
                        l = new Te(a, me.Vector3, ge.MESH_NORMAL0), a += 12;
                        break;

                      case "COLOR":
                        l = new Te(a, me.Vector4, ge.MESH_COLOR0), a += 16;
                        break;

                      case "UV":
                        l = new Te(a, me.Vector2, ge.MESH_TEXTURECOORDINATE0), a += 8;
                        break;

                      case "UV1":
                        l = new Te(a, me.Vector2, ge.MESH_TEXTURECOORDINATE1), a += 8;
                        break;

                      case "BLENDWEIGHT":
                        l = new Te(a, me.Vector4, ge.MESH_BLENDWEIGHT0), a += 16;
                        break;

                      case "BLENDINDICES":
                        t ? (l = new Te(a, me.Vector4, ge.MESH_BLENDINDICES0), a += 16) : (l = new Te(a, me.Byte4, ge.MESH_BLENDINDICES0), 
                        a += 4);
                        break;

                      case "TANGENT":
                        l = new Te(a, me.Vector4, ge.MESH_TANGENT0), a += 16;
                        break;

                      default:
                        throw "VertexMesh: unknown vertex flag.";
                    }
                    n.push(l);
                }
                r = new Ee(a, n), ge._vertexDeclarationMap[e + (t ? "_0" : "_1")] = r;
            }
            return r;
        }
    }
    ge.MESH_POSITION0 = 0, ge.MESH_COLOR0 = 1, ge.MESH_TEXTURECOORDINATE0 = 2, ge.MESH_NORMAL0 = 3, 
    ge.MESH_TANGENT0 = 4, ge.MESH_BLENDINDICES0 = 5, ge.MESH_BLENDWEIGHT0 = 6, ge.MESH_TEXTURECOORDINATE1 = 7, 
    ge.MESH_WORLDMATRIX_ROW0 = 8, ge.MESH_WORLDMATRIX_ROW1 = 9, ge.MESH_WORLDMATRIX_ROW2 = 10, 
    ge.MESH_WORLDMATRIX_ROW3 = 11, ge.MESH_MVPMATRIX_ROW0 = 12, ge.MESH_MVPMATRIX_ROW1 = 13, 
    ge.MESH_MVPMATRIX_ROW2 = 14, ge.MESH_MVPMATRIX_ROW3 = 15, ge._vertexDeclarationMap = {};
    class pe extends ue {
        constructor() {
            super(), this.maxInstanceCount = 1024, this.instanceWorldMatrixData = new Float32Array(16 * this.maxInstanceCount), 
            this.instanceMVPMatrixData = new Float32Array(16 * this.maxInstanceCount);
            var e = t.LayaGL.instance;
            this.instanceWorldMatrixBuffer = new fe(4 * this.instanceWorldMatrixData.length, e.DYNAMIC_DRAW), 
            this.instanceMVPMatrixBuffer = new fe(4 * this.instanceMVPMatrixData.length, e.DYNAMIC_DRAW), 
            this.instanceWorldMatrixBuffer.vertexDeclaration = ge.instanceWorldMatrixDeclaration, 
            this.instanceMVPMatrixBuffer.vertexDeclaration = ge.instanceMVPMatrixDeclaration;
        }
        static __init__() {
            pe.instance = new pe();
        }
        _render(e) {
            var r = t.LayaGL.instance, i = e.renderElement, a = i.instanceSubMesh, n = i.instanceBatchElementList.length, s = a._indexCount;
            a._mesh._instanceBufferState.bind(), t.LayaGL.layaGPUInstance.drawElementsInstanced(r.TRIANGLES, s, r.UNSIGNED_SHORT, 2 * a._indexStart, n), 
            t.Stat.renderBatches++, t.Stat.savedRenderBatches += n - 1, t.Stat.trianglesFaces += s * n / 3;
        }
    }
    class Se {
        constructor() {
            this.updateMark = -1, this.pointLightCount = 0, this.spotLightCount = 0, this.indices = [];
        }
    }
    class Re {
        constructor(e, t, r, a) {
            this._updateMark = 0, this._depthSliceParam = new i(), this._xSlices = e, this._ySlices = t, 
            this._zSlices = r;
            var n = e * t, s = r * (1 + Math.ceil(a / 4));
            this._clusterTexture = v._createFloatTextureBuffer(n, s), this._clusterTexture.lock = !0, 
            this._clusterPixels = new Float32Array(n * s * 4);
            for (var o = new Array(this._zSlices), l = 0; l < this._zSlices; l++) {
                o[l] = new Array(this._ySlices);
                for (var _ = 0; _ < this._ySlices; _++) {
                    o[l][_] = new Array(this._xSlices);
                    for (var h = 0; h < this._xSlices; h++) o[l][_][h] = new Se();
                }
            }
            this._clusterDatas = o;
        }
        _insertSpotLightSphere(e, t, r, i, a) {
            var s = Re._tempVector35;
            s.x = a.x - e.x, s.y = a.y - e.y, s.z = a.z - e.z;
            var o = n.dot(s, s), l = a.w;
            if (!(o > l * l)) return !1;
            var _ = n.dot(s, t);
            return !(Math.cos(i) * Math.sqrt(o - _ * _) - _ * Math.sin(i) > l || _ > l + r || _ < -l);
        }
        _placePointLightToClusters(e, t) {
            for (var r = this._clusterDatas, i = this._updateMark, a = t.zMin, n = t.zMax; a < n; a++) for (var s = t.yMin, o = t.yMax; s < o; s++) for (var l = t.xMin, _ = t.xMax; l < _; l++) {
                var h = r[a][s][l];
                h.updateMark != i && (h.pointLightCount = 0, h.spotLightCount = 0, h.updateMark = i);
                var c = h.indices, d = h.pointLightCount++;
                d < c.length ? c[d] = e : c.push(e);
            }
        }
        _placeSpotLightToClusters(e, t) {
            for (var r = this._clusterDatas, i = this._updateMark, a = t.zMin, n = t.zMax; a < n; a++) for (var s = t.yMin, o = t.yMax; s < o; s++) for (var l = t.xMin, _ = t.xMax; l < _; l++) {
                var h = r[a][s][l];
                h.updateMark != i && (h.pointLightCount = 0, h.spotLightCount = 0, h.updateMark = i);
                var c = h.indices, d = h.pointLightCount + h.spotLightCount++;
                d < c.length ? c[d] = e : c.push(e);
            }
        }
        _insertConePlane(e, t, r, i, a) {
            var s = Re._tempVector36, o = Re._tempVector37;
            n.cross(a, t, s), n.cross(s, t, o), n.normalize(o, o);
            var l = r * Math.tan(i), _ = e.x + r * t.x + l * o.x, h = e.y + r * t.y + l * o.y, c = e.z + r * t.z + l * o.z;
            return _ * a.x + h * a.y + c * a.z <= 0 || e.x * a.x + e.y * a.y + e.z * a.z <= 0;
        }
        _shrinkSphereLightZPerspective(e, t, r, i, a) {
            var n = r.z, s = n - i, o = n + i;
            if (s > t || o <= e) return !1;
            var l = this._depthSliceParam;
            return a.zMin = Math.floor(Math.log2(Math.max(s, e)) * l.x - l.y), a.zMax = Math.min(Math.ceil(Math.log2(o) * l.x - l.y), this._zSlices), 
            !0;
        }
        _shrinkSpotLightZPerspective(e, t, r, i, a, n, s) {
            var o = i.x, l = i.y, _ = i.z, h = Math.tan(n) * a, c = r.x, d = r.y, u = r.z, f = o - c, m = l - d, E = _ - u, T = f * f + m * m + E * E, g = Math.sqrt(1 - E * E / T), p = Math.max(Math.min(u, _ - g * h), r.z - a), S = Math.min(Math.max(u, _ + g * h), r.z + a);
            if (p > t || S <= e) return !1;
            var R = this._depthSliceParam;
            return s.zMin = Math.floor(Math.log2(Math.max(p, e)) * R.x - R.y), s.zMax = Math.min(Math.ceil(Math.log2(S) * R.x - R.y), this._zSlices), 
            !0;
        }
        _shrinkSphereLightByBoundOrth(e, t, r, i, a, n, s) {
            var o = a.z, l = o - n, _ = o + n;
            if (l > i || _ <= r) return !1;
            var h = a.x, c = h - n, d = h + n;
            if (c > e || d <= -e) return !1;
            var u = a.y, f = u - n, m = u + n;
            if (f > t || m <= -t) return !1;
            var E = this._xSlices, T = this._ySlices, g = this._depthSliceParam, p = 2 * e / E, S = 2 * t / T;
            return s.xMin = Math.max(Math.floor((c + e) / p), 0), s.xMax = Math.min(Math.ceil((d + e) / p), E), 
            s.yMin = Math.max(Math.floor((t - m) / S), 0), s.yMax = Math.min(Math.ceil((t - f) / S), T), 
            s.zMin = Math.floor(Math.log2(Math.max(l, r)) * g.x - g.y), s.zMax = Math.min(Math.ceil(Math.log2(_) * g.x - g.y), this._zSlices), 
            !0;
        }
        _shrinkSpotLightByBoundOrth(e, t, r, i, a, n, s, o, l) {
            var _ = n.x, h = n.y, c = n.z, d = Math.tan(o) * s, u = a.x, f = a.y, m = a.z, E = _ - u, T = h - f, g = c - m, p = E * E + T * T + g * g, S = Math.sqrt(1 - g * g / p), R = Math.max(Math.min(m, c - S * d), a.z - s), v = Math.min(Math.max(m, c + S * d), a.z + s);
            if (R > i || v <= r) return !1;
            var I = Math.sqrt(1 - E * E / p), x = Math.max(Math.min(u, _ - I * d), a.x - s), A = Math.min(Math.max(u, _ + I * d), a.x + s);
            if (x > e || A <= -e) return !1;
            var D = Math.sqrt(1 - T * T / p), M = Math.max(Math.min(f, h - D * d), a.y - s), L = Math.min(Math.max(f, h + D * d), a.y + s);
            if (M > t || L <= -t) return !1;
            var C = this._xSlices, y = this._ySlices, O = this._depthSliceParam, N = 2 * e / C, P = 2 * t / y;
            return l.xMin = Math.max(Math.floor((x + e) / N), 0), l.xMax = Math.min(Math.ceil((A + e) / N), C), 
            l.yMin = Math.max(Math.floor((t - L) / P), 0), l.yMax = Math.min(Math.ceil((t - M) / P), y), 
            l.zMin = Math.floor(Math.log2(Math.max(R, r)) * O.x - O.y), l.zMax = Math.min(Math.ceil(Math.log2(v) * O.x - O.y), this._zSlices), 
            !0;
        }
        _shrinkXYByRadiusPerspective(e, t, r, i, a) {
            var n, s, o, l, _, h = e.x, c = e.y, d = e.z, u = this._ySlices + 1;
            for (_ = 0; _ < u; _++) {
                if (c * (f = a[_]).y + d * f.z < t) {
                    s = Math.max(0, _ - 1);
                    break;
                }
            }
            if (_ == u) return !1;
            for (l = this._ySlices, _ = s + 1; _ < u; _++) {
                if (c * (f = a[_]).y + d * f.z <= -t) {
                    l = Math.max(0, _);
                    break;
                }
            }
            for (u = this._xSlices + 1, _ = 0; _ < u; _++) {
                if (h * (f = i[_]).x + d * f.z < t) {
                    n = Math.max(0, _ - 1);
                    break;
                }
            }
            for (o = this._xSlices, _ = n + 1; _ < u; _++) {
                var f;
                if (h * (f = i[_]).x + d * f.z <= -t) {
                    o = Math.max(0, _);
                    break;
                }
            }
            return r.xMin = n, r.xMax = o, r.yMin = s, r.yMax = l, !0;
        }
        _shrinkSpotXYByConePerspective(e, t, r, i, a, n, s) {
            for (var o, l, _, h, c = Re._tempVector32, d = a.yMax + 1, u = a.yMin + 1; u < d; u++) if (this._insertConePlane(e, t, r, i, s[u])) {
                l = Math.max(0, u - 1);
                break;
            }
            h = a.yMax;
            for (u = l + 1; u < d; u++) {
                var f = s[u];
                if (c.setValue(0, -f.y, -f.z), !this._insertConePlane(e, t, r, i, c)) {
                    h = Math.max(0, u);
                    break;
                }
            }
            d = a.xMax + 1;
            for (u = a.xMin + 1; u < d; u++) if (this._insertConePlane(e, t, r, i, n[u])) {
                o = Math.max(0, u - 1);
                break;
            }
            _ = a.xMax;
            for (u = o + 1; u < d; u++) {
                f = n[u];
                if (c.setValue(-f.x, 0, -f.z), !this._insertConePlane(e, t, r, i, c)) {
                    _ = Math.max(0, u);
                    break;
                }
            }
            a.xMin = o, a.xMax = _, a.yMin = l, a.yMax = h;
        }
        _updatePointLightPerspective(e, t, r, i, a, s, o) {
            var l = Re._tempLightBound, _ = Re._tempVector30;
            n.transformV3ToV3(i._transform.position, r, _), _.z *= -1, this._shrinkSphereLightZPerspective(e, t, _, i.range, l) && this._shrinkXYByRadiusPerspective(_, i.range, l, s, o) && this._placePointLightToClusters(a, l);
        }
        _updateSpotLightPerspective(e, t, r, i, a, s, o) {
            var l = Re._tempLightBound, _ = Re._tempVector30, h = Re._tempVector31, c = Re._tempVector34, d = i._transform.position, u = i.range;
            i._transform.worldMatrix.getForward(h), n.normalize(h, h), n.scale(h, u, c), n.add(d, c, c), 
            n.transformV3ToV3(d, r, _), n.transformV3ToV3(c, r, c), _.z *= -1, c.z *= -1;
            var f = i.spotAngle / 2 * Math.PI / 180;
            if (this._shrinkSpotLightZPerspective(e, t, _, c, u, f, l) && this._shrinkXYByRadiusPerspective(_, u, l, s, o)) {
                var m = Re._tempVector33;
                m.x = c.x - _.x, m.y = c.y - _.y, m.z = c.z - _.z, n.normalize(m, m), this._shrinkSpotXYByConePerspective(_, m, u, f, l, s, o), 
                this._placeSpotLightToClusters(a, l);
            }
        }
        _updatePointLightOrth(e, t, r, i, a, s, o) {
            var l = Re._tempLightBound, _ = Re._tempVector30;
            n.transformV3ToV3(s._transform.position, a, _), _.z *= -1, this._shrinkSphereLightByBoundOrth(e, t, r, i, _, s.range, l) && this._placePointLightToClusters(o, l);
        }
        _updateSpotLightOrth(e, t, r, i, a, s, o) {
            var l = Re._tempLightBound, _ = Re._tempVector30, h = Re._tempVector31, c = Re._tempVector34, d = s._transform.position, u = s.range;
            s._transform.worldMatrix.getForward(h), n.normalize(h, h), n.scale(h, u, c), n.add(d, c, c), 
            n.transformV3ToV3(d, a, _), n.transformV3ToV3(c, a, c), _.z *= -1, c.z *= -1;
            var f = s.spotAngle / 2 * Math.PI / 180;
            this._shrinkSpotLightByBoundOrth(e, t, r, i, _, c, u, f, l) && this._placeSpotLightToClusters(o, l);
        }
        update(e, t) {
            this._updateMark++;
            var r = e.nearPlane;
            this._depthSliceParam.x = s._config.lightClusterCount.z / Math.log2(e.farPlane / r), 
            this._depthSliceParam.y = Math.log2(r) * this._depthSliceParam.x;
            var i = e.nearPlane, a = e.farPlane, n = e.viewMatrix, o = t._directionLights._length, l = t._pointLights, _ = l._length, h = l._elements, c = t._spotLights, d = c._length, u = c._elements;
            if (e.orthographic) {
                for (var f = e.orthographicVerticalSize / 2, m = f * e.aspectRatio, E = 0; E < _; E++, 
                o++) this._updatePointLightOrth(m, f, i, a, n, h[E], o);
                for (E = 0; E < d; E++, o++) this._updateSpotLightOrth(m, f, i, a, n, u[E], o);
            } else {
                e._updateClusterPlaneXY();
                var T = e._clusterXPlanes, g = e._clusterYPlanes;
                for (E = 0; E < _; E++, o++) this._updatePointLightPerspective(i, a, n, h[E], o, T, g);
                for (E = 0; E < d; E++, o++) this._updateSpotLightPerspective(i, a, n, u[E], o, T, g);
            }
            if (_ + d > 0) {
                for (var p = this._xSlices, S = this._ySlices, R = this._zSlices, v = p * S * 4, I = v * R, x = this._clusterPixels, A = x.length, D = this._clusterDatas, M = this._updateMark, L = !0, C = 0; C < R; C++) for (var y = 0; y < S; y++) for (var O = 0; O < p; O++) {
                    var N = D[C][y][O], P = 4 * (O + y * p + C * p * S);
                    if (N.updateMark !== M) x[P] = 0, x[P + 1] = 0; else if (L) {
                        var b = N.indices, V = N.pointLightCount, w = N.spotLightCount, F = V + w;
                        if (I + F < A) {
                            x[P] = V, x[P + 1] = w, x[P + 2] = Math.floor(I / v), x[P + 3] = I % v;
                            for (E = 0; E < F; E++) x[I++] = b[E];
                        } else {
                            F = A - (I + F), V = Math.min(V, F), x[P] = V, x[P + 1] = Math.min(w, F - V), x[P + 2] = Math.floor(I / v), 
                            x[P + 3] = I % v;
                            for (E = 0; E < F; E++) x[I++] = b[E];
                            L = !1;
                        }
                    }
                }
                var B = this._clusterTexture.width;
                this._clusterTexture.setSubPixels(0, 0, B, Math.ceil(I / (4 * B)), x);
            }
        }
    }
    Re._tempVector30 = new n(), Re._tempVector31 = new n(), Re._tempVector32 = new n(), 
    Re._tempVector33 = new n(), Re._tempVector34 = new n(), Re._tempVector35 = new n(), 
    Re._tempVector36 = new n(), Re._tempVector37 = new n(), Re._tempLightBound = new class {}();
    class ve {
        constructor(e, t = 0) {
            this.normal = e, this.distance = t;
        }
        static createPlaneBy3P(e, t, r) {
            var i = t.x - e.x, a = t.y - e.y, n = t.z - e.z, s = r.x - e.x, o = r.y - e.y, l = r.z - e.z, _ = a * l - n * o, h = n * s - i * l, c = i * o - a * s, d = 1 / Math.sqrt(_ * _ + h * h + c * c), u = _ * d, f = h * d, m = c * d;
            ve._TEMPVec3.x = u, ve._TEMPVec3.y = f, ve._TEMPVec3.z = m;
            var E = -(u * e.x + f * e.y + m * e.z);
            return new ve(ve._TEMPVec3, E);
        }
        normalize() {
            var e = this.normal.x, t = this.normal.y, r = this.normal.z, i = 1 / Math.sqrt(e * e + t * t + r * r);
            this.normal.x = e * i, this.normal.y = t * i, this.normal.z = r * i, this.distance *= i;
        }
    }
    ve._TEMPVec3 = new n(), ve.PlaneIntersectionType_Back = 0, ve.PlaneIntersectionType_Front = 1, 
    ve.PlaneIntersectionType_Intersecting = 2;
    class Ie {
        constructor(e, t) {
            this.origin = e, this.direction = t;
        }
    }
    class xe {}
    xe.Disjoint = 0, xe.Contains = 1, xe.Intersects = 2;
    class Ae {
        constructor() {}
        static distancePlaneToPoint(e, t) {
            return n.dot(e.normal, t) - e.distance;
        }
        static distanceBoxToPoint(e, t) {
            var r = e.min, i = r.x, a = r.y, n = r.z, s = e.max, o = s.x, l = s.y, _ = s.z, h = t.x, c = t.y, d = t.z, u = 0;
            return h < i && (u += (i - h) * (i - h)), h > o && (u += (o - h) * (o - h)), c < a && (u += (a - c) * (a - c)), 
            c > l && (u += (l - c) * (l - c)), d < n && (u += (n - d) * (n - d)), d > _ && (u += (_ - d) * (_ - d)), 
            Math.sqrt(u);
        }
        static distanceBoxToBox(e, t) {
            var r, i = e.min, a = i.x, n = i.y, s = i.z, o = e.max, l = o.x, _ = o.y, h = o.z, c = t.min, d = c.x, u = c.y, f = c.z, m = t.max, E = m.x, T = m.y, g = m.z, p = 0;
            return a > E ? p += (r = a - E) * r : d > l && (p += (r = d - l) * r), n > T ? p += (r = n - T) * r : u > _ && (p += (r = u - _) * r), 
            s > g ? p += (r = s - g) * r : f > h && (p += (r = f - h) * r), Math.sqrt(p);
        }
        static distanceSphereToPoint(e, t) {
            var r = Math.sqrt(n.distanceSquared(e.center, t));
            return r -= e.radius, Math.max(r, 0);
        }
        static distanceSphereToSphere(e, t) {
            var r = Math.sqrt(n.distanceSquared(e.center, t.center));
            return r -= e.radius + t.radius, Math.max(r, 0);
        }
        static intersectsRayAndTriangleRD(e, t, i, a, n) {
            var s = e.origin, o = s.x, l = s.y, _ = s.z, h = e.direction, c = h.x, d = h.y, u = h.z, f = t.x, m = t.y, E = t.z, T = i.x, g = i.y, p = i.z, S = a.x, R = a.y, v = a.z, I = Ae._tempV30.x, x = Ae._tempV30.y, A = Ae._tempV30.z;
            I = T - f, x = g - m, A = p - E;
            var D = Ae._tempV31.x, M = Ae._tempV31.y, L = Ae._tempV31.z;
            D = S - f, M = R - m, L = v - E;
            var C = Ae._tempV32.x, y = Ae._tempV32.y, O = Ae._tempV32.z, N = I * (C = d * L - u * M) + x * (y = u * D - c * L) + A * (O = c * M - d * D);
            if (r.isZero(N)) return !1;
            var P = 1 / N, b = Ae._tempV33.x, V = Ae._tempV33.y, w = Ae._tempV33.z, F = (b = o - f) * C + (V = l - m) * y + (w = _ - E) * O;
            if ((F *= P) < 0 || F > 1) return !1;
            var B = Ae._tempV34.x, U = Ae._tempV34.y, G = Ae._tempV34.z, z = c * (B = V * A - w * x) + d * (U = w * I - b * A) + u * (G = b * x - V * I);
            if ((z *= P) < 0 || F + z > 1) return !1;
            var H = D * B + M * U + L * G;
            return !((H *= P) < 0);
        }
        static intersectsRayAndTriangleRP(e, t, r, i, a) {
            return Ae.intersectsRayAndTriangleRD(e, t, r, i, void 0) ? (n.scale(e.direction, void 0, Ae._tempV30), 
            n.add(e.origin, Ae._tempV30, a), !0) : (a = n._ZERO, !1);
        }
        static intersectsRayAndPoint(e, t) {
            n.subtract(e.origin, t, Ae._tempV30);
            var i = n.dot(Ae._tempV30, e.direction), a = n.dot(Ae._tempV30, Ae._tempV30) - r.zeroTolerance;
            return !(a > 0 && i > 0) && !(i * i - a < 0);
        }
        static intersectsRayAndRay(e, t, i) {
            var a = e.origin, s = a.x, o = a.y, l = a.z, _ = e.direction, h = _.x, c = _.y, d = _.z, u = t.origin, f = u.x, m = u.y, E = u.z, T = t.direction, g = T.x, p = T.y, S = T.z;
            n.cross(_, T, Ae._tempV30);
            var R = Ae._tempV30, v = n.scalarLength(Ae._tempV30);
            if (r.isZero(v) && r.nearEqual(f, s) && r.nearEqual(m, o) && r.nearEqual(E, l)) return !0;
            v *= v;
            var I = f - s, x = m - o, A = E - l, D = g, M = p, L = S, C = R.x, y = R.y, O = R.z, N = I * M * O + x * L * C + A * D * y - I * L * y - x * D * O - A * M * C;
            D = h, M = c, L = d;
            var P = N / v;
            n.scale(_, P, Ae._tempV30), n.scale(T, P, Ae._tempV31), n.add(a, Ae._tempV30, Ae._tempV32), 
            n.add(u, Ae._tempV31, Ae._tempV33);
            var b = Ae._tempV32, V = Ae._tempV33;
            return !!(r.nearEqual(V.x, b.x) && r.nearEqual(V.y, b.y) && r.nearEqual(V.z, b.z));
        }
        static intersectsPlaneAndTriangle(e, t, r, i) {
            var a = Ae.intersectsPlaneAndPoint(e, t), n = Ae.intersectsPlaneAndPoint(e, r), s = Ae.intersectsPlaneAndPoint(e, i);
            return a == ve.PlaneIntersectionType_Front && n == ve.PlaneIntersectionType_Front && s == ve.PlaneIntersectionType_Front ? ve.PlaneIntersectionType_Front : a == ve.PlaneIntersectionType_Back && n == ve.PlaneIntersectionType_Back && s == ve.PlaneIntersectionType_Back ? ve.PlaneIntersectionType_Back : ve.PlaneIntersectionType_Intersecting;
        }
        static intersectsRayAndPlaneRD(e, t) {
            var i = t.normal, a = n.dot(i, e.direction);
            if (Math.abs(a) < r.zeroTolerance) return -1;
            var s = n.dot(i, e.origin), o = (-t.distance - s) / a;
            if (o < 0) {
                if (o < -r.zeroTolerance) return -1;
                o = 0;
            }
            return o;
        }
        static intersectsRayAndPlaneRP(e, t, r) {
            var i = Ae.intersectsRayAndPlaneRD(e, t);
            if (-1 == i) return r.setValue(0, 0, 0), !1;
            var a = Ae._tempV30;
            return n.scale(e.direction, i, a), n.add(e.origin, a, r), !0;
        }
        static intersectsRayAndBoxRD(e, t) {
            var i = e.origin, a = i.x, n = i.y, s = i.z, o = e.direction, l = o.x, _ = o.y, h = o.z, c = t.min, d = c.x, u = c.y, f = c.z, m = t.max, E = m.x, T = m.y, g = m.z, p = 0, S = r.MaxValue;
            if (r.isZero(l)) {
                if (a < d || a > E) return -1;
            } else {
                var R = 1 / l, v = (d - a) * R, I = (E - a) * R;
                if (v > I) {
                    var x = v;
                    v = I, I = x;
                }
                if ((p = Math.max(v, p)) > (S = Math.min(I, S))) return -1;
            }
            if (r.isZero(_)) {
                if (n < u || n > T) return -1;
            } else {
                var A = 1 / _, D = (u - n) * A, M = (T - n) * A;
                if (D > M) {
                    var L = D;
                    D = M, M = L;
                }
                if ((p = Math.max(D, p)) > (S = Math.min(M, S))) return -1;
            }
            if (r.isZero(h)) {
                if (s < f || s > g) return -1;
            } else {
                var C = 1 / h, y = (f - s) * C, O = (g - s) * C;
                if (y > O) {
                    var N = y;
                    y = O, O = N;
                }
                if ((p = Math.max(y, p)) > (S = Math.min(O, S))) return -1;
            }
            return p;
        }
        static intersectsRayAndBoxRP(e, t, r) {
            var i = Ae.intersectsRayAndBoxRD(e, t);
            return -1 === i ? (n._ZERO.cloneTo(r), i) : (n.scale(e.direction, i, Ae._tempV30), 
            n.add(e.origin, Ae._tempV30, Ae._tempV31), Ae._tempV31.cloneTo(r), i);
        }
        static intersectsRayAndSphereRD(e, t) {
            var r = t.radius;
            n.subtract(e.origin, t.center, Ae._tempV30);
            var i = n.dot(Ae._tempV30, e.direction), a = n.dot(Ae._tempV30, Ae._tempV30) - r * r;
            if (a > 0 && i > 0) return -1;
            var s = i * i - a;
            if (s < 0) return -1;
            var o = -i - Math.sqrt(s);
            return o < 0 && (o = 0), o;
        }
        static intersectsRayAndSphereRP(e, t, r) {
            var i = Ae.intersectsRayAndSphereRD(e, t);
            return -1 === i ? (n._ZERO.cloneTo(r), i) : (n.scale(e.direction, i, Ae._tempV30), 
            n.add(e.origin, Ae._tempV30, Ae._tempV31), Ae._tempV31.cloneTo(r), i);
        }
        static intersectsSphereAndTriangle(e, t, r, i) {
            var a = e.center, s = e.radius;
            return Ae.closestPointPointTriangle(a, t, r, i, Ae._tempV30), n.subtract(Ae._tempV30, a, Ae._tempV31), 
            n.dot(Ae._tempV31, Ae._tempV31) <= s * s;
        }
        static intersectsPlaneAndPoint(e, t) {
            var r = n.dot(e.normal, t) + e.distance;
            return r > 0 ? ve.PlaneIntersectionType_Front : r < 0 ? ve.PlaneIntersectionType_Back : ve.PlaneIntersectionType_Intersecting;
        }
        static intersectsPlaneAndPlane(e, t) {
            n.cross(e.normal, t.normal, Ae._tempV30);
            var i = n.dot(Ae._tempV30, Ae._tempV30);
            return !r.isZero(i);
        }
        static intersectsPlaneAndPlaneRL(e, t, i) {
            var a = e.normal, s = t.normal;
            n.cross(a, s, Ae._tempV34);
            var o = n.dot(Ae._tempV34, Ae._tempV34);
            return !r.isZero(o) && (n.scale(s, e.distance, Ae._tempV30), n.scale(a, t.distance, Ae._tempV31), 
            n.subtract(Ae._tempV30, Ae._tempV31, Ae._tempV32), n.cross(Ae._tempV32, Ae._tempV34, Ae._tempV33), 
            n.normalize(Ae._tempV34, Ae._tempV34), !0);
        }
        static intersectsPlaneAndBox(e, t) {
            var r = e.distance, i = e.normal, a = i.x, s = i.y, o = i.z, l = t.min, _ = l.x, h = l.y, c = l.z, d = t.max, u = d.x, f = d.y, m = d.z;
            Ae._tempV30.x = a > 0 ? _ : u, Ae._tempV30.y = s > 0 ? h : f, Ae._tempV30.z = o > 0 ? c : m, 
            Ae._tempV31.x = a > 0 ? u : _, Ae._tempV31.y = s > 0 ? f : h, Ae._tempV31.z = o > 0 ? m : c;
            var E = n.dot(i, Ae._tempV30);
            return E + r > 0 ? ve.PlaneIntersectionType_Front : (E = n.dot(i, Ae._tempV31)) + r < 0 ? ve.PlaneIntersectionType_Back : ve.PlaneIntersectionType_Intersecting;
        }
        static intersectsPlaneAndSphere(e, t) {
            var r = t.radius, i = n.dot(e.normal, t.center) + e.distance;
            return i > r ? ve.PlaneIntersectionType_Front : i < -r ? ve.PlaneIntersectionType_Back : ve.PlaneIntersectionType_Intersecting;
        }
        static intersectsBoxAndBox(e, t) {
            var r = e.min, i = e.max, a = t.min, n = t.max;
            return !(r.x > n.x || a.x > i.x) && (!(r.y > n.y || a.y > i.y) && !(r.z > n.z || a.z > i.z));
        }
        static intersectsBoxAndSphere(e, t) {
            var r = t.center, i = t.radius;
            return n.Clamp(r, e.min, e.max, Ae._tempV30), n.distanceSquared(r, Ae._tempV30) <= i * i;
        }
        static intersectsSphereAndSphere(e, t) {
            var r = e.radius + t.radius;
            return n.distanceSquared(e.center, t.center) <= r * r;
        }
        static boxContainsPoint(e, t) {
            var r = e.min, i = e.max;
            return r.x <= t.x && i.x >= t.x && r.y <= t.y && i.y >= t.y && r.z <= t.z && i.z >= t.z ? xe.Contains : xe.Disjoint;
        }
        static boxContainsBox(e, t) {
            var r = e.min, i = r.x, a = r.y, n = r.z, s = e.max, o = s.x, l = s.y, _ = s.z, h = t.min, c = h.x, d = h.y, u = h.z, f = t.max, m = f.x, E = f.y, T = f.z;
            return o < c || i > m ? xe.Disjoint : l < d || a > E ? xe.Disjoint : _ < u || n > T ? xe.Disjoint : i <= c && m <= o && a <= d && E <= l && n <= u && T <= _ ? xe.Contains : xe.Intersects;
        }
        static boxContainsSphere(e, t) {
            var r = e.min, i = r.x, a = r.y, s = r.z, o = e.max, l = o.x, _ = o.y, h = o.z, c = t.center, d = c.x, u = c.y, f = c.z, m = t.radius;
            return n.Clamp(c, r, o, Ae._tempV30), n.distanceSquared(c, Ae._tempV30) > m * m ? xe.Disjoint : i + m <= d && d <= l - m && l - i > m && a + m <= u && u <= _ - m && _ - a > m && s + m <= f && f <= h - m && h - s > m ? xe.Contains : xe.Intersects;
        }
        static sphereContainsPoint(e, t) {
            return n.distanceSquared(t, e.center) <= e.radius * e.radius ? xe.Contains : xe.Disjoint;
        }
        static sphereContainsTriangle(e, t, r, i) {
            var a = Ae.sphereContainsPoint(e, t), n = Ae.sphereContainsPoint(e, r), s = Ae.sphereContainsPoint(e, i);
            return a == xe.Contains && n == xe.Contains && s == xe.Contains ? xe.Contains : Ae.intersectsSphereAndTriangle(e, t, r, i) ? xe.Intersects : xe.Disjoint;
        }
        static sphereContainsBox(e, t) {
            var r = e.center, i = r.x, a = r.y, s = r.z, o = e.radius, l = t.min, _ = l.x, h = l.y, c = l.z, d = t.max, u = d.x, f = d.y, m = d.z, E = Ae._tempV30;
            E.x, E.y, E.z;
            if (!Ae.intersectsBoxAndSphere(t, e)) return xe.Disjoint;
            var T = o * o;
            return i - _, a - f, s - m, n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - u, 
            a - f, s - m, n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - u, a - h, 
            s - m, n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - _, a - h, s - m, 
            n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - _, a - f, s - c, n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - u, 
            a - f, s - c, n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - u, a - h, 
            s - c, n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : (i - _, a - h, s - c, 
            n.scalarLengthSquared(Ae._tempV30) > T ? xe.Intersects : xe.Contains)))))));
        }
        static sphereContainsSphere(e, t) {
            var r = e.radius, i = t.radius, a = n.distance(e.center, t.center);
            return r + i < a ? xe.Disjoint : r - i < a ? xe.Intersects : xe.Contains;
        }
        static closestPointPointTriangle(e, t, r, i, a) {
            n.subtract(r, t, Ae._tempV30), n.subtract(i, t, Ae._tempV31), n.subtract(e, t, Ae._tempV32), 
            n.subtract(e, r, Ae._tempV33), n.subtract(e, i, Ae._tempV34);
            var s = n.dot(Ae._tempV30, Ae._tempV32), o = n.dot(Ae._tempV31, Ae._tempV32), l = n.dot(Ae._tempV30, Ae._tempV33), _ = n.dot(Ae._tempV31, Ae._tempV33), h = n.dot(Ae._tempV30, Ae._tempV34), c = n.dot(Ae._tempV31, Ae._tempV34);
            if (s <= 0 && o <= 0) t.cloneTo(a); else if (l >= 0 && _ <= l) r.cloneTo(a); else {
                var d = s * _ - l * o;
                if (d <= 0 && s >= 0 && l <= 0) {
                    var u = s / (s - l);
                    return n.scale(Ae._tempV30, u, a), void n.add(t, a, a);
                }
                if (c >= 0 && h <= c) i.cloneTo(a); else {
                    var f = h * o - s * c;
                    if (f <= 0 && o >= 0 && c <= 0) {
                        var m = o / (o - c);
                        return n.scale(Ae._tempV31, m, a), void n.add(t, a, a);
                    }
                    var E = l * c - h * _;
                    if (E <= 0 && _ - l >= 0 && h - c >= 0) {
                        var T = (_ - l) / (_ - l + (h - c));
                        return n.subtract(i, r, a), n.scale(a, T, a), void n.add(r, a, a);
                    }
                    var g = 1 / (E + f + d), p = f * g, S = d * g;
                    n.scale(Ae._tempV30, p, Ae._tempV35), n.scale(Ae._tempV31, S, Ae._tempV36), n.add(Ae._tempV35, Ae._tempV36, a), 
                    n.add(t, a, a);
                }
            }
        }
        static closestPointPlanePoint(e, t, r) {
            var i = e.normal, a = n.dot(i, t) - e.distance;
            n.scale(i, a, Ae._tempV30), n.subtract(t, Ae._tempV30, r);
        }
        static closestPointBoxPoint(e, t, r) {
            n.max(t, e.min, Ae._tempV30), n.min(Ae._tempV30, e.max, r);
        }
        static closestPointSpherePoint(e, t, r) {
            var i = e.center;
            n.subtract(t, i, r), n.normalize(r, r), n.scale(r, e.radius, r), n.add(r, i, r);
        }
        static closestPointSphereSphere(e, t, r) {
            var i = e.center;
            n.subtract(t.center, i, r), n.normalize(r, r), n.scale(r, e.radius, r), n.add(r, i, r);
        }
    }
    Ae._tempV30 = new n(), Ae._tempV31 = new n(), Ae._tempV32 = new n(), Ae._tempV33 = new n(), 
    Ae._tempV34 = new n(), Ae._tempV35 = new n(), Ae._tempV36 = new n();
    class De {
        constructor(e) {
            this._matrix = e, this._near = new ve(new n()), this._far = new ve(new n()), this._left = new ve(new n()), 
            this._right = new ve(new n()), this._top = new ve(new n()), this._bottom = new ve(new n()), 
            De._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
        }
        get matrix() {
            return this._matrix;
        }
        set matrix(e) {
            this._matrix = e, De._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
        }
        get near() {
            return this._near;
        }
        get far() {
            return this._far;
        }
        get left() {
            return this._left;
        }
        get right() {
            return this._right;
        }
        get top() {
            return this._top;
        }
        get bottom() {
            return this._bottom;
        }
        equalsBoundFrustum(e) {
            return this._matrix.equalsOtherMatrix(e.matrix);
        }
        equalsObj(e) {
            if (e instanceof De) {
                var t = e;
                return this.equalsBoundFrustum(t);
            }
            return !1;
        }
        getPlane(e) {
            switch (e) {
              case 0:
                return this._near;

              case 1:
                return this._far;

              case 2:
                return this._left;

              case 3:
                return this._right;

              case 4:
                return this._top;

              case 5:
                return this._bottom;

              default:
                return null;
            }
        }
        static _getPlanesFromMatrix(e, t, r, i, a, n, s) {
            var o = e.elements, l = o[0], _ = o[1], h = o[2], c = o[3], d = o[4], u = o[5], f = o[6], m = o[7], E = o[8], T = o[9], g = o[10], p = o[11], S = o[12], R = o[13], v = o[14], I = o[15], x = t.normal;
            x.x = c + h, x.y = m + f, x.z = p + g, t.distance = I + v, t.normalize();
            var A = r.normal;
            A.x = c - h, A.y = m - f, A.z = p - g, r.distance = I - v, r.normalize();
            var D = i.normal;
            D.x = c + l, D.y = m + d, D.z = p + E, i.distance = I + S, i.normalize();
            var M = a.normal;
            M.x = c - l, M.y = m - d, M.z = p - E, a.distance = I - S, a.normalize();
            var L = n.normal;
            L.x = c - _, L.y = m - u, L.z = p - T, n.distance = I - R, n.normalize();
            var C = s.normal;
            C.x = c + _, C.y = m + u, C.z = p + T, s.distance = I + R, s.normalize();
        }
        static _get3PlaneInterPoint(e, t, r) {
            var i = e.normal, a = t.normal, s = r.normal;
            n.cross(a, s, De._tempV30), n.cross(s, i, De._tempV31), n.cross(i, a, De._tempV32);
            var o = n.dot(i, De._tempV30), l = n.dot(a, De._tempV31), _ = n.dot(s, De._tempV32);
            return n.scale(De._tempV30, -e.distance / o, De._tempV33), n.scale(De._tempV31, -t.distance / l, De._tempV34), 
            n.scale(De._tempV32, -r.distance / _, De._tempV35), n.add(De._tempV33, De._tempV34, De._tempV36), 
            n.add(De._tempV35, De._tempV36, De._tempV37), De._tempV37;
        }
        getCorners(e) {
            De._get3PlaneInterPoint(this._near, this._bottom, this._right).cloneTo(e[0]), De._get3PlaneInterPoint(this._near, this._top, this._right).cloneTo(e[1]), 
            De._get3PlaneInterPoint(this._near, this._top, this._left).cloneTo(e[2]), De._get3PlaneInterPoint(this._near, this._bottom, this._left).cloneTo(e[3]), 
            De._get3PlaneInterPoint(this._far, this._bottom, this._right).cloneTo(e[4]), De._get3PlaneInterPoint(this._far, this._top, this._right).cloneTo(e[5]), 
            De._get3PlaneInterPoint(this._far, this._top, this._left).cloneTo(e[6]), De._get3PlaneInterPoint(this._far, this._bottom, this._left).cloneTo(e[7]);
        }
        containsPoint(e) {
            for (var t = ve.PlaneIntersectionType_Front, r = ve.PlaneIntersectionType_Front, i = 0; i < 6; i++) {
                switch (i) {
                  case 0:
                    r = Ae.intersectsPlaneAndPoint(this._near, e);
                    break;

                  case 1:
                    r = Ae.intersectsPlaneAndPoint(this._far, e);
                    break;

                  case 2:
                    r = Ae.intersectsPlaneAndPoint(this._left, e);
                    break;

                  case 3:
                    r = Ae.intersectsPlaneAndPoint(this._right, e);
                    break;

                  case 4:
                    r = Ae.intersectsPlaneAndPoint(this._top, e);
                    break;

                  case 5:
                    r = Ae.intersectsPlaneAndPoint(this._bottom, e);
                }
                switch (r) {
                  case ve.PlaneIntersectionType_Back:
                    return xe.Disjoint;

                  case ve.PlaneIntersectionType_Intersecting:
                    t = ve.PlaneIntersectionType_Intersecting;
                }
            }
            switch (t) {
              case ve.PlaneIntersectionType_Intersecting:
                return xe.Intersects;

              default:
                return xe.Contains;
            }
        }
        intersects(e) {
            var t = e.min, r = e.max, i = t.x, a = t.y, n = t.z, s = r.x, o = r.y, l = r.z, _ = this._near.normal;
            if (this._near.distance + _.x * (_.x < 0 ? i : s) + _.y * (_.y < 0 ? a : o) + _.z * (_.z < 0 ? n : l) < 0) return !1;
            var h = this._left.normal;
            if (this._left.distance + h.x * (h.x < 0 ? i : s) + h.y * (h.y < 0 ? a : o) + h.z * (h.z < 0 ? n : l) < 0) return !1;
            var c = this._right.normal;
            if (this._right.distance + c.x * (c.x < 0 ? i : s) + c.y * (c.y < 0 ? a : o) + c.z * (c.z < 0 ? n : l) < 0) return !1;
            var d = this._bottom.normal;
            if (this._bottom.distance + d.x * (d.x < 0 ? i : s) + d.y * (d.y < 0 ? a : o) + d.z * (d.z < 0 ? n : l) < 0) return !1;
            var u = this._top.normal;
            if (this._top.distance + u.x * (u.x < 0 ? i : s) + u.y * (u.y < 0 ? a : o) + u.z * (u.z < 0 ? n : l) < 0) return !1;
            var f = this._far.normal;
            return !(this._far.distance + f.x * (f.x < 0 ? i : s) + f.y * (f.y < 0 ? a : o) + f.z * (f.z < 0 ? n : l) < 0);
        }
        containsBoundBox(e) {
            for (var t = De._tempV30, r = De._tempV31, i = e.min, a = e.max, n = xe.Contains, s = 0; s < 6; s++) {
                var o = this.getPlane(s), l = o.normal;
                if (l.x >= 0 ? (t.x = a.x, r.x = i.x) : (t.x = i.x, r.x = a.x), l.y >= 0 ? (t.y = a.y, 
                r.y = i.y) : (t.y = i.y, r.y = a.y), l.z >= 0 ? (t.z = a.z, r.z = i.z) : (t.z = i.z, 
                r.z = a.z), Ae.intersectsPlaneAndPoint(o, t) === ve.PlaneIntersectionType_Back) return xe.Disjoint;
                Ae.intersectsPlaneAndPoint(o, r) === ve.PlaneIntersectionType_Back && (n = xe.Intersects);
            }
            return n;
        }
        containsBoundSphere(e) {
            for (var t = ve.PlaneIntersectionType_Front, r = ve.PlaneIntersectionType_Front, i = 0; i < 6; i++) {
                switch (i) {
                  case 0:
                    r = Ae.intersectsPlaneAndSphere(this._near, e);
                    break;

                  case 1:
                    r = Ae.intersectsPlaneAndSphere(this._far, e);
                    break;

                  case 2:
                    r = Ae.intersectsPlaneAndSphere(this._left, e);
                    break;

                  case 3:
                    r = Ae.intersectsPlaneAndSphere(this._right, e);
                    break;

                  case 4:
                    r = Ae.intersectsPlaneAndSphere(this._top, e);
                    break;

                  case 5:
                    r = Ae.intersectsPlaneAndSphere(this._bottom, e);
                }
                switch (r) {
                  case ve.PlaneIntersectionType_Back:
                    return xe.Disjoint;

                  case ve.PlaneIntersectionType_Intersecting:
                    t = ve.PlaneIntersectionType_Intersecting;
                }
            }
            switch (t) {
              case ve.PlaneIntersectionType_Intersecting:
                return xe.Intersects;

              default:
                return xe.Contains;
            }
        }
    }
    De._tempV30 = new n(), De._tempV31 = new n(), De._tempV32 = new n(), De._tempV33 = new n(), 
    De._tempV34 = new n(), De._tempV35 = new n(), De._tempV36 = new n(), De._tempV37 = new n();
    class Me {
        constructor(e, t, r, i) {
            this.minDepth = 0, this.maxDepth = 1, this.x = e, this.y = t, this.width = r, this.height = i;
        }
        project(e, t, r) {
            var i = e.x, a = e.y, s = e.z;
            n.transformV3ToV3(e, t, r);
            var o = t.elements, l = i * o[3] + a * o[7] + s * o[11] + o[15];
            1 !== l && (r.x = r.x / l, r.y = r.y / l, r.z = r.z / l), r.x = .5 * (r.x + 1) * this.width + this.x, 
            r.y = .5 * (1 - r.y) * this.height + this.y, r.z = r.z * (this.maxDepth - this.minDepth) + this.minDepth;
        }
        unprojectFromMat(e, t, r) {
            var i = t.elements;
            r.x = (e.x - this.x) / this.width * 2 - 1, r.y = -((e.y - this.y) / this.height * 2 - 1);
            var a = (this.maxDepth - this.minDepth) / 2;
            r.z = (e.z - this.minDepth - a) / a;
            var s = r.x * i[3] + r.y * i[7] + r.z * i[11] + i[15];
            n.transformV3ToV3(r, t, r), 1 !== s && (r.x = r.x / s, r.y = r.y / s, r.z = r.z / s);
        }
        unprojectFromWVP(e, t, r, i, a) {
            L.multiply(t, r, Me._tempMatrix4x4), i && L.multiply(Me._tempMatrix4x4, i, Me._tempMatrix4x4), 
            Me._tempMatrix4x4.invert(Me._tempMatrix4x4), this.unprojectFromMat(e, Me._tempMatrix4x4, a);
        }
        cloneTo(e) {
            e.x = this.x, e.y = this.y, e.width = this.width, e.height = this.height, e.minDepth = this.minDepth, 
            e.maxDepth = this.maxDepth;
        }
    }
    Me._tempMatrix4x4 = new L();
    class Le {
        constructor() {}
        static calculateCursorRay(e, t, r, i, a, s) {
            var o = e.x, l = e.y, _ = Le._tempVector30, h = _;
            h.x = o, h.y = l, h.z = t.minDepth;
            var c = Le._tempVector31, d = c;
            d.x = o, d.y = l, d.z = t.maxDepth;
            var u = s.origin, f = Le._tempVector32;
            t.unprojectFromWVP(_, r, i, a, u), t.unprojectFromWVP(c, r, i, a, f);
            var m = s.direction;
            m.x = f.x - u.x, m.y = f.y - u.y, m.z = f.z - u.z, n.normalize(s.direction, s.direction);
        }
        static rayIntersectsTriangle(e, t, r, i) {
            var a = Le._tempVector30, s = Le._tempVector31;
            n.subtract(r, t, a), n.subtract(i, t, s);
            var o, l = Le._tempVector32;
            if (n.cross(e.direction, s, l), (o = n.dot(a, l)) > -Number.MIN_VALUE && o < Number.MIN_VALUE) return Number.NaN;
            var _, h = 1 / o, c = Le._tempVector33;
            if (n.subtract(e.origin, t, c), _ = n.dot(c, l), (_ *= h) < 0 || _ > 1) return Number.NaN;
            var d, u, f = Le._tempVector34;
            return n.cross(c, a, f), d = n.dot(e.direction, f), (d *= h) < 0 || _ + d > 1 ? Number.NaN : (u = n.dot(s, f), 
            (u *= h) < 0 ? Number.NaN : u);
        }
    }
    Le._tempVector30 = new n(), Le._tempVector31 = new n(), Le._tempVector32 = new n(), 
    Le._tempVector33 = new n(), Le._tempVector34 = new n();
    class Ce {
        static supportTextureFormat(e) {
            switch (e) {
              case t.TextureFormat.R32G32B32A32:
                return !(!t.LayaGL.layaGPUInstance._isWebGL2 && !t.LayaGL.layaGPUInstance._oesTextureFloat);

              default:
                return !0;
            }
        }
        static supportRenderTextureFormat(e) {
            switch (e) {
              case t.RenderTextureFormat.R16G16B16A16:
                return !!(t.LayaGL.layaGPUInstance._isWebGL2 || t.LayaGL.layaGPUInstance._oesTextureHalfFloat && t.LayaGL.layaGPUInstance._oesTextureHalfFloatLinear);

              default:
                return !0;
            }
        }
    }
    class ye extends t.BufferStateBase {
        constructor() {
            super();
        }
        applyVertexBuffer(e) {
            if (t.BufferStateBase._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            var r = t.LayaGL.instance, i = e.vertexDeclaration, a = i._shaderValues.getData();
            for (var n in this.vertexDeclaration = i, e.bind(), a) {
                var s = parseInt(n), o = a[n];
                r.enableVertexAttribArray(s), r.vertexAttribPointer(s, o[0], o[1], !!o[2], o[3], o[4]);
            }
        }
        applyVertexBuffers(e) {
            if (t.BufferStateBase._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            for (var r = t.LayaGL.instance, i = 0, a = e.length; i < a; i++) {
                var n = e[i], s = n.vertexDeclaration._shaderValues.getData();
                for (var o in n.bind(), s) {
                    var l = parseInt(o), _ = s[o];
                    r.enableVertexAttribArray(l), r.vertexAttribPointer(l, _[0], _[1], !!_[2], _[3], _[4]);
                }
            }
        }
        applyInstanceVertexBuffer(e) {
            if (t.LayaGL.layaGPUInstance.supportInstance()) {
                if (t.BufferStateBase._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                var r = t.LayaGL.instance, i = e.vertexDeclaration._shaderValues.getData();
                for (var a in e.bind(), i) {
                    var n = parseInt(a), s = i[a];
                    r.enableVertexAttribArray(n), r.vertexAttribPointer(n, s[0], s[1], !!s[2], s[3], s[4]), 
                    t.LayaGL.layaGPUInstance.vertexAttribDivisor(n, 1);
                }
            }
        }
        applyIndexBuffer(e) {
            if (t.BufferStateBase._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            this._bindedIndexBuffer !== e && (e._bindForVAO(), this._bindedIndexBuffer = e);
        }
    }
    var Oe, Ne, Pe;
    (Oe = e.IndexFormat || (e.IndexFormat = {}))[Oe.UInt8 = 0] = "UInt8", Oe[Oe.UInt16 = 1] = "UInt16", 
    Oe[Oe.UInt32 = 2] = "UInt32";
    class be extends t.Buffer {
        get indexType() {
            return this._indexType;
        }
        get indexTypeByteCount() {
            return this._indexTypeByteCount;
        }
        get indexCount() {
            return this._indexCount;
        }
        get canRead() {
            return this._canRead;
        }
        constructor(r, i, a = 35044, n = !1) {
            switch (super(), this._indexType = r, this._indexCount = i, this._bufferUsage = a, 
            this._bufferType = t.LayaGL.instance.ELEMENT_ARRAY_BUFFER, this._canRead = n, r) {
              case e.IndexFormat.UInt32:
                this._indexTypeByteCount = 4;
                break;

              case e.IndexFormat.UInt16:
                this._indexTypeByteCount = 2;
                break;

              case e.IndexFormat.UInt8:
                this._indexTypeByteCount = 1;
                break;

              default:
                throw new Error("unidentification index type.");
            }
            var s = this._indexTypeByteCount * i, o = t.BufferStateBase._curBindedBufferState;
            if (this._byteLength = s, o ? o._bindedIndexBuffer === this ? t.LayaGL.instance.bufferData(this._bufferType, s, this._bufferUsage) : (o.unBind(), 
            this.bind(), t.LayaGL.instance.bufferData(this._bufferType, s, this._bufferUsage), 
            o.bind()) : (this.bind(), t.LayaGL.instance.bufferData(this._bufferType, s, this._bufferUsage)), 
            n) switch (r) {
              case e.IndexFormat.UInt32:
                this._buffer = new Uint32Array(i);
                break;

              case e.IndexFormat.UInt16:
                this._buffer = new Uint16Array(i);
                break;

              case e.IndexFormat.UInt8:
                this._buffer = new Uint8Array(i);
            }
        }
        _bindForVAO() {
            if (!t.BufferStateBase._curBindedBufferState) throw "IndexBuffer3D: must bind current BufferState.";
            var e = t.LayaGL.instance;
            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this._glBuffer);
        }
        bind() {
            if (t.BufferStateBase._curBindedBufferState) throw "IndexBuffer3D: must unbind current BufferState.";
            if (t.Buffer._bindedIndexBuffer !== this._glBuffer) {
                var e = t.LayaGL.instance;
                return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this._glBuffer), t.Buffer._bindedIndexBuffer = this._glBuffer, 
                !0;
            }
            return !1;
        }
        setData(r, i = 0, a = 0, n = 4294967295) {
            var s = this._indexTypeByteCount;
            if (0 !== a || 4294967295 !== n) switch (this._indexType) {
              case e.IndexFormat.UInt32:
                r = new Uint32Array(r.buffer, a * s, n);
                break;

              case e.IndexFormat.UInt16:
                r = new Uint16Array(r.buffer, a * s, n);
                break;

              case e.IndexFormat.UInt8:
                r = new Uint8Array(r.buffer, a * s, n);
            }
            var o = t.BufferStateBase._curBindedBufferState;
            if (o ? o._bindedIndexBuffer === this ? t.LayaGL.instance.bufferSubData(this._bufferType, i * s, r) : (o.unBind(), 
            this.bind(), t.LayaGL.instance.bufferSubData(this._bufferType, i * s, r), o.bind()) : (this.bind(), 
            t.LayaGL.instance.bufferSubData(this._bufferType, i * s, r)), this._canRead) if (0 !== i || 0 !== a || 4294967295 !== n) {
                var l = this._buffer.length - i;
                n > l && (n = l);
                for (var _ = 0; _ < n; _++) this._buffer[i + _] = r[_];
            } else this._buffer = r;
        }
        getData() {
            if (this._canRead) return this._buffer;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }
        destroy() {
            super.destroy(), this._buffer = null;
        }
    }
    class Ve {
        constructor() {}
        _render(e) {}
    }
    class we extends Ve {
        static __init__() {
            we.instance = new we();
        }
        constructor() {
            super();
            var r = t.LayaGL.instance, i = new Float32Array([ -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1 ]), a = new Uint8Array([ 0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 0, 3, 7, 7, 4, 0, 1, 5, 6, 6, 2, 1, 3, 2, 6, 6, 7, 3, 0, 4, 5, 5, 1, 0 ]), n = ge.getVertexDeclaration("POSITION");
            this._vertexBuffer = new fe(8 * n.vertexStride, r.STATIC_DRAW, !1), this._vertexBuffer.vertexDeclaration = n, 
            this._indexBuffer = new be(e.IndexFormat.UInt8, 36, r.STATIC_DRAW, !1), this._vertexBuffer.setData(i.buffer), 
            this._indexBuffer.setData(a);
            var s = new ye();
            s.bind(), s.applyVertexBuffer(this._vertexBuffer), s.applyIndexBuffer(this._indexBuffer), 
            s.unBind(), this._bufferState = s;
        }
        _render(e) {
            var r = t.LayaGL.instance;
            r.drawElements(r.TRIANGLES, 36, r.UNSIGNED_BYTE, 0), t.Stat.trianglesFaces += 12, 
            t.Stat.renderBatches++;
        }
    }
    class Fe {
        constructor() {
            this._mesh = we.instance;
        }
        get material() {
            return this._material;
        }
        set material(e) {
            this._material !== e && (this._material && this._material._removeReference(), e && e._addReference(), 
            this._material = e);
        }
        get mesh() {
            return this._mesh;
        }
        set mesh(e) {
            this._mesh !== e && (this._mesh = e);
        }
        _isAvailable() {
            return !(!this._material || !this._mesh);
        }
        _render(e) {
            if (this._material && this._mesh) {
                var r = t.LayaGL.instance, i = e.scene, a = e.camera, s = z._SET_RUNTIME_VALUE_MODE_REFERENCE_;
                t.ILaya.Render.supportWebGLPlusRendering && z.setRuntimeValueMode(!1), t.WebGLContext.setCullFace(r, !1), 
                t.WebGLContext.setDepthFunc(r, r.LEQUAL), t.WebGLContext.setDepthMask(r, !1);
                var o = Fe._compileDefine;
                this._material._shaderValues._defineDatas.cloneTo(o);
                var l = e.shader = this._material._shader.getSubShaderAt(0)._passes[0].withCompile(o), _ = l.bind(), h = t.Stat.loopCount !== l._uploadMark, c = l._uploadScene !== i || h;
                (c || _) && (l.uploadUniforms(l._sceneUniformParamsMap, i._shaderValues, c), l._uploadScene = i);
                a._getRenderTexture();
                var d = l._uploadCamera !== a || h;
                if (d || _) {
                    var u = Fe._tempMatrix0, f = Fe._tempMatrix1;
                    a.viewMatrix.cloneTo(u), a.projectionMatrix.cloneTo(f), u.setTranslationVector(n._ZERO), 
                    a.orthographic && L.createPerspective(a.fieldOfView, a.aspectRatio, a.nearPlane, a.farPlane, f);
                    var m = 1 / Math.tan(3.1416 * a.fieldOfView / 180 * .5);
                    f.elements[0] = m / a.aspectRatio, f.elements[5] = m, f.elements[10] = 1e-6 - 1, 
                    f.elements[11] = -1, f.elements[14] = -0, a._applyViewProject(e, u, f), l.uploadUniforms(l._cameraUniformParamsMap, a._shaderValues, d), 
                    l._uploadCamera = a;
                }
                var E = l._uploadMaterial !== this._material || h;
                (E || _) && (l.uploadUniforms(l._materialUniformParamsMap, this._material._shaderValues, E), 
                l._uploadMaterial = this._material), this._mesh._bufferState.bind(), this._mesh._render(e), 
                t.ILaya.Render.supportWebGLPlusRendering && z.setRuntimeValueMode(s), t.WebGLContext.setDepthFunc(r, r.LESS), 
                t.WebGLContext.setDepthMask(r, !0), a._applyViewProject(e, a.viewMatrix, a.projectionMatrix);
            }
        }
        destroy() {
            this._material && (this._material._removeReference(), this._material = null);
        }
    }
    Fe._tempMatrix0 = new L(), Fe._tempMatrix1 = new L(), Fe._compileDefine = new w();
    class Be extends le {
        constructor(e = .3, t = 1e3) {
            super(), this._skyRenderer = new Fe(), this._forward = new n(), this._up = new n(), 
            this.clearColor = new a(100 / 255, 149 / 255, 237 / 255, 1), this._shaderValues = new z(null), 
            this._fieldOfView = 60, this._useUserProjectionMatrix = !1, this._orthographic = !1, 
            this._orthographicVerticalSize = 10, this.renderingOrder = 0, this._nearPlane = e, 
            this._farPlane = t, this.cullingMask = 2147483647, this.useOcclusionCulling = !0;
        }
        get skyRenderer() {
            return this._skyRenderer;
        }
        get fieldOfView() {
            return this._fieldOfView;
        }
        set fieldOfView(e) {
            this._fieldOfView = e, this._calculateProjectionMatrix();
        }
        get nearPlane() {
            return this._nearPlane;
        }
        set nearPlane(e) {
            this._nearPlane = e, this._calculateProjectionMatrix();
        }
        get farPlane() {
            return this._farPlane;
        }
        set farPlane(e) {
            this._farPlane = e, this._calculateProjectionMatrix();
        }
        get orthographic() {
            return this._orthographic;
        }
        set orthographic(e) {
            this._orthographic = e, this._calculateProjectionMatrix();
        }
        get orthographicVerticalSize() {
            return this._orthographicVerticalSize;
        }
        set orthographicVerticalSize(e) {
            this._orthographicVerticalSize = e, this._calculateProjectionMatrix();
        }
        get renderingOrder() {
            return this._renderingOrder;
        }
        set renderingOrder(e) {
            this._renderingOrder = e, this._sortCamerasByRenderingOrder();
        }
        _sortCamerasByRenderingOrder() {
            if (this.displayedInStage) for (var e = this.scene._cameraPool, t = e.length - 1, r = 0; r < t; r++) if (e[r].renderingOrder > e[t].renderingOrder) {
                var i = e[r];
                e[r] = e[t], e[t] = i;
            }
        }
        _calculateProjectionMatrix() {}
        _onScreenSizeChanged() {
            this._calculateProjectionMatrix();
        }
        _prepareCameraToRender() {
            var e = this._shaderValues;
            this.transform.getForward(this._forward), this.transform.getUp(this._up), e.setVector3(Be.CAMERAPOS, this.transform.position), 
            e.setVector3(Be.CAMERADIRECTION, this._forward), e.setVector3(Be.CAMERAUP, this._up);
        }
        render(e = null, t = null) {}
        addLayer(e) {
            this.cullingMask |= Math.pow(2, e);
        }
        removeLayer(e) {
            this.cullingMask &= ~Math.pow(2, e);
        }
        addAllLayers() {
            this.cullingMask = 2147483647;
        }
        removeAllLayers() {
            this.cullingMask = 0;
        }
        resetProjectionMatrix() {
            this._useUserProjectionMatrix = !1, this._calculateProjectionMatrix();
        }
        _onActive() {
            this._scene._addCamera(this), super._onActive();
        }
        _onInActive() {
            this._scene._removeCamera(this), super._onInActive();
        }
        _parse(e, r) {
            super._parse(e, r), this.orthographic = e.orthographic, void 0 !== e.orthographicVerticalSize && (this.orthographicVerticalSize = e.orthographicVerticalSize), 
            void 0 !== e.fieldOfView && (this.fieldOfView = e.fieldOfView), this.nearPlane = e.nearPlane, 
            this.farPlane = e.farPlane;
            var i = e.clearColor;
            this.clearColor = new a(i[0], i[1], i[2], i[3]);
            var n = e.skyboxMaterial;
            n && (this._skyRenderer.material = t.Loader.getRes(n.path));
        }
        destroy(e = !0) {
            this._skyRenderer.destroy(), this._skyRenderer = null, t.Laya.stage.off(t.Event.RESIZE, this, this._onScreenSizeChanged), 
            super.destroy(e);
        }
        _create() {
            return new Be();
        }
    }
    Be._tempMatrix4x40 = new L(), Be.CAMERAPOS = G.propertyNameToID("u_CameraPos"), 
    Be.VIEWMATRIX = G.propertyNameToID("u_View"), Be.PROJECTMATRIX = G.propertyNameToID("u_Projection"), 
    Be.VIEWPROJECTMATRIX = G.propertyNameToID("u_ViewProjection"), Be.CAMERADIRECTION = G.propertyNameToID("u_CameraDirection"), 
    Be.CAMERAUP = G.propertyNameToID("u_CameraUp"), Be.VIEWPORT = G.propertyNameToID("u_Viewport"), 
    Be.PROJECTION_PARAMS = G.propertyNameToID("u_ProjectionParams"), Be.RENDERINGTYPE_DEFERREDLIGHTING = "DEFERREDLIGHTING", 
    Be.RENDERINGTYPE_FORWARDRENDERING = "FORWARDRENDERING", Be._invertYScaleMatrix = new L(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), 
    Be._invertYProjectionMatrix = new L(), Be._invertYProjectionViewMatrix = new L(), 
    Be.CLEARFLAG_SOLIDCOLOR = 0, Be.CLEARFLAG_SKY = 1, Be.CLEARFLAG_DEPTHONLY = 2, Be.CLEARFLAG_NONE = 3;
    class Ue extends t.Resource {
        constructor() {
            super(), this._bufferState = new ye(), this._bufferStateInvertUV = new ye();
            var e = t.LayaGL.instance;
            this._vertexBuffer = new fe(64, e.STATIC_DRAW, !1), this._vertexBuffer.vertexDeclaration = Ue._vertexDeclaration, 
            this._vertexBuffer.setData(Ue._vertices.buffer), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind(), this._vertexBufferInvertUV = new fe(64, e.STATIC_DRAW, !1), 
            this._vertexBufferInvertUV.vertexDeclaration = Ue._vertexDeclaration, this._vertexBufferInvertUV.setData(Ue._verticesInvertUV.buffer), 
            this._bufferStateInvertUV.bind(), this._bufferStateInvertUV.applyVertexBuffer(this._vertexBufferInvertUV), 
            this._bufferStateInvertUV.unBind(), this._setGPUMemory(this._vertexBuffer._byteLength + this._vertexBufferInvertUV._byteLength);
        }
        static __init__() {
            Ue._vertexDeclaration = new Ee(16, [ new Te(0, me.Vector4, Ue.SCREENQUAD_POSITION_UV) ]), 
            Ue.instance = new Ue(), Ue.instance.lock = !0;
        }
        render() {
            var e = t.LayaGL.instance;
            this._bufferState.bind(), e.drawArrays(e.TRIANGLE_STRIP, 0, 4), t.Stat.renderBatches++;
        }
        renderInvertUV() {
            var e = t.LayaGL.instance;
            this._bufferStateInvertUV.bind(), e.drawArrays(e.TRIANGLE_STRIP, 0, 4), t.Stat.renderBatches++;
        }
        destroy() {
            super.destroy(), this._bufferState.destroy(), this._vertexBuffer.destroy(), this._bufferStateInvertUV.destroy(), 
            this._vertexBufferInvertUV.destroy(), this._setGPUMemory(0);
        }
    }
    Ue.SCREENQUAD_POSITION_UV = 0, Ue._vertices = new Float32Array([ 1, 1, 1, 1, 1, -1, 1, 0, -1, 1, 0, 1, -1, -1, 0, 0 ]), 
    Ue._verticesInvertUV = new Float32Array([ 1, 1, 1, 0, 1, -1, 1, 1, -1, 1, 0, 0, -1, -1, 0, 1 ]);
    class Ge extends t.Resource {
        constructor() {
            super(), this._bufferState = new ye(), this._bufferStateInvertUV = new ye();
            var e = t.LayaGL.instance;
            this._vertexBuffer = new fe(48, e.STATIC_DRAW, !1), this._vertexBuffer.vertexDeclaration = Ge._vertexDeclaration, 
            this._vertexBuffer.setData(Ge._vertices.buffer), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind(), this._vertexBufferInvertUV = new fe(48, e.STATIC_DRAW, !1), 
            this._vertexBufferInvertUV.vertexDeclaration = Ge._vertexDeclaration, this._vertexBufferInvertUV.setData(Ge._verticesInvertUV.buffer), 
            this._bufferStateInvertUV.bind(), this._bufferStateInvertUV.applyVertexBuffer(this._vertexBufferInvertUV), 
            this._bufferStateInvertUV.unBind(), this._setGPUMemory(this._vertexBuffer._byteLength + this._vertexBufferInvertUV._byteLength);
        }
        static __init__() {
            Ge._vertexDeclaration = new Ee(16, [ new Te(0, me.Vector4, Ge.SCREENTRIANGLE_POSITION_UV) ]), 
            Ge.instance = new Ge(), Ge.instance.lock = !0;
        }
        render() {
            var e = t.LayaGL.instance;
            this._bufferState.bind(), e.drawArrays(e.TRIANGLES, 0, 3), t.Stat.renderBatches++;
        }
        renderInvertUV() {
            var e = t.LayaGL.instance;
            this._bufferStateInvertUV.bind(), e.drawArrays(e.TRIANGLES, 0, 3), t.Stat.renderBatches++;
        }
        destroy() {
            super.destroy(), this._bufferState.destroy(), this._vertexBuffer.destroy(), this._bufferStateInvertUV.destroy(), 
            this._vertexBufferInvertUV.destroy(), this._setGPUMemory(0);
        }
    }
    Ge.SCREENTRIANGLE_POSITION_UV = 0, Ge._vertices = new Float32Array([ -1, -1, 0, 0, -1, 3, 0, 2, 3, -1, 2, 0 ]), 
    Ge._verticesInvertUV = new Float32Array([ -1, -1, 0, 1, -1, 3, 0, -1, 3, -1, 2, 1 ]);
    class ze {
        constructor() {
            this._commandBuffer = null;
        }
        static __init__() {
            ze._screenShaderData = new z(), ze._screenShader = G.find("BlitScreen");
        }
        run() {}
        recover() {
            this._commandBuffer = null;
        }
    }
    ze.SCREENTEXTURE_NAME = "u_MainTex", ze.SCREENTEXTUREOFFSETSCALE_NAME = "u_OffsetScale", 
    ze.MAINTEXTURE_TEXELSIZE_NAME = "u_MainTex_TexelSize", ze.SCREENTEXTURE_ID = G.propertyNameToID(ze.SCREENTEXTURE_NAME), 
    ze.SCREENTEXTUREOFFSETSCALE_ID = G.propertyNameToID(ze.SCREENTEXTUREOFFSETSCALE_NAME), 
    ze.MAINTEXTURE_TEXELSIZE_ID = G.propertyNameToID(ze.MAINTEXTURE_TEXELSIZE_NAME);
    class He extends ze {
        constructor() {
            super(...arguments), this._source = null, this._dest = null, this._offsetScale = null, 
            this._shader = null, this._shaderData = null, this._subShader = 0, this._sourceTexelSize = new a(), 
            this._screenType = 0;
        }
        static create(e, t, r = null, i = null, a = null, n = 0, s = He._SCREENTYPE_QUAD) {
            var o;
            return (o = He._pool.length > 0 ? He._pool.pop() : new He())._source = e, o._dest = t, 
            o._offsetScale = r, o._shader = i, o._shaderData = a, o._subShader = n, o._screenType = s, 
            o;
        }
        run() {
            var e = this._shader || ze._screenShader, r = this._shaderData || ze._screenShaderData, i = this._dest;
            t.LayaGL.instance.viewport(0, 0, i ? i.width : b.clientWidth, i ? i.height : b.clientHeight), 
            r.setTexture(ze.SCREENTEXTURE_ID, this._source), r.setVector(ze.SCREENTEXTUREOFFSETSCALE_ID, this._offsetScale || He._defaultOffsetScale), 
            this._sourceTexelSize.setValue(1 / this._source.width, 1 / this._source.height, this._source.width, this._source.height), 
            r.setVector(ze.MAINTEXTURE_TEXELSIZE_ID, this._sourceTexelSize), i && i._start();
            for (var a = e.getSubShaderAt(this._subShader)._passes, n = 0, s = a.length; n < s; n++) {
                var o = He._compileDefine;
                r._defineDatas.cloneTo(o);
                var l = a[n].withCompile(o);
                switch (l.bind(), l.uploadUniforms(l._materialUniformParamsMap, r, !0), l.uploadRenderStateBlendDepth(r), 
                l.uploadRenderStateFrontFace(r, !1, null), this._screenType) {
                  case He._SCREENTYPE_QUAD:
                    b._instance.invertY ? Ue.instance.renderInvertUV() : Ue.instance.render();
                    break;

                  case He._SCREENTYPE_TRIANGLE:
                    b._instance.invertY ? Ge.instance.renderInvertUV() : Ge.instance.render();
                    break;

                  default:
                    throw "BlitScreenQuadCMD:unknown screen Type.";
                }
            }
            i && i._end();
        }
        recover() {
            He._pool.push(this), this._source = null, this._dest = null, this._offsetScale = null, 
            this._shader = null, this._shaderData = null, super.recover();
        }
    }
    He._SCREENTYPE_QUAD = 0, He._SCREENTYPE_TRIANGLE = 1, He._compileDefine = new w(), 
    He._pool = [], He._defaultOffsetScale = new a(0, 0, 1, 1);
    class We extends ze {
        constructor() {
            super(...arguments), this._renderTexture = null;
        }
        static create(e) {
            var t;
            return (t = We._pool.length > 0 ? We._pool.pop() : new We())._renderTexture = e, 
            t;
        }
        run() {
            this._renderTexture._start();
        }
        recover() {
            We._pool.push(this), this._renderTexture = null;
        }
    }
    We._pool = [];
    class ke extends ze {
        constructor() {
            super(...arguments), this._shaderData = null, this._nameID = 0, this._texture = null;
        }
        static create(e, t, r) {
            var i;
            return (i = ke._pool.length > 0 ? ke._pool.pop() : new ke())._shaderData = e, i._nameID = t, 
            i._texture = r, i;
        }
        run() {
            this._shaderData.setTexture(this._nameID, this._texture);
        }
        recover() {
            ke._pool.push(this), this._shaderData = null, this._nameID = 0, this._texture = null;
        }
    }
    ke._pool = [];
    class Xe {
        constructor() {
            this._camera = null, this._commands = [];
        }
        _apply() {
            for (var e = 0, t = this._commands.length; e < t; e++) this._commands[e].run();
        }
        setShaderDataTexture(e, t, r) {
            this._commands.push(ke.create(e, t, r));
        }
        blitScreenQuad(e, t, r = null, i = null, a = null, n = 0) {
            this._commands.push(He.create(e, t, r, i, a, n, He._SCREENTYPE_QUAD));
        }
        blitScreenTriangle(e, t, r = null, i = null, a = null, n = 0) {
            this._commands.push(He.create(e, t, r, i, a, n, He._SCREENTYPE_TRIANGLE));
        }
        setRenderTarget(e) {
            this._commands.push(We.create(e));
        }
        clear() {
            for (var e = 0, t = this._commands.length; e < t; e++) this._commands[e].recover();
            this._commands.length = 0;
        }
    }
    (Ne = e.CameraClearFlags || (e.CameraClearFlags = {}))[Ne.SolidColor = 0] = "SolidColor", 
    Ne[Ne.Sky = 1] = "Sky", Ne[Ne.DepthOnly = 2] = "DepthOnly", Ne[Ne.Nothing = 3] = "Nothing";
    class Ye extends Be {
        constructor(r = 0, n = .3, s = 1e3) {
            super(n, s), this._updateViewMatrix = !0, this._postProcess = null, this._enableHDR = !1, 
            this._viewportParams = new a(), this._projectionParams = new a(), this._offScreenRenderTexture = null, 
            this._internalRenderTexture = null, this._postProcessCommandBuffers = [], this._clusterPlaneCacheFlag = new i(-1, -1), 
            this._screenOffsetScale = new a(), this.enableRender = !0, this.clearFlag = e.CameraClearFlags.SolidColor, 
            this._viewMatrix = new L(), this._projectionMatrix = new L(), this._projectionViewMatrix = new L(), 
            this._viewport = new Me(0, 0, 0, 0), this._normalizedViewport = new Me(0, 0, 1, 1), 
            this._aspectRatio = r, this._boundFrustum = new De(L.DEFAULT), t.Render.supportWebGLPlusCulling && (this._boundFrustumBuffer = new Float32Array(24)), 
            this._calculateProjectionMatrix(), t.Laya.stage.on(t.Event.RESIZE, this, this._onScreenSizeChanged), 
            this.transform.on(t.Event.TRANSFORM_CHANGED, this, this._onTransformChanged);
        }
        get aspectRatio() {
            if (0 === this._aspectRatio) {
                var e = this.viewport;
                return e.width / e.height;
            }
            return this._aspectRatio;
        }
        set aspectRatio(e) {
            if (e < 0) throw new Error("Camera: the aspect ratio has to be a positive real number.");
            this._aspectRatio = e, this._calculateProjectionMatrix();
        }
        get viewport() {
            return this._offScreenRenderTexture ? this._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height) : this._calculationViewport(this._normalizedViewport, b.clientWidth, b.clientHeight), 
            this._viewport;
        }
        set viewport(e) {
            var t, r;
            this._offScreenRenderTexture ? (t = this._offScreenRenderTexture.width, r = this._offScreenRenderTexture.height) : (t = b.clientWidth, 
            r = b.clientHeight), this._normalizedViewport.x = e.x / t, this._normalizedViewport.y = e.y / r, 
            this._normalizedViewport.width = e.width / t, this._normalizedViewport.height = e.height / r, 
            this._calculationViewport(this._normalizedViewport, t, r), this._calculateProjectionMatrix();
        }
        get normalizedViewport() {
            return this._normalizedViewport;
        }
        set normalizedViewport(e) {
            var t, r;
            this._offScreenRenderTexture ? (t = this._offScreenRenderTexture.width, r = this._offScreenRenderTexture.height) : (t = b.clientWidth, 
            r = b.clientHeight), this._normalizedViewport !== e && e.cloneTo(this._normalizedViewport), 
            this._calculationViewport(e, t, r), this._calculateProjectionMatrix();
        }
        get viewMatrix() {
            if (this._updateViewMatrix) {
                var e = this.transform.getWorldLossyScale(), t = e.x, r = e.y, i = e.z, a = this._viewMatrix.elements;
                this.transform.worldMatrix.cloneTo(this._viewMatrix), a[0] /= t, a[1] /= t, a[2] /= t, 
                a[4] /= r, a[5] /= r, a[6] /= r, a[8] /= i, a[9] /= i, a[10] /= i, this._viewMatrix.invert(this._viewMatrix), 
                this._updateViewMatrix = !1;
            }
            return this._viewMatrix;
        }
        get projectionMatrix() {
            return this._projectionMatrix;
        }
        set projectionMatrix(e) {
            this._projectionMatrix = e, this._useUserProjectionMatrix = !0;
        }
        get projectionViewMatrix() {
            return L.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix), 
            this._projectionViewMatrix;
        }
        get boundFrustum() {
            if (this._boundFrustum.matrix = this.projectionViewMatrix, t.Render.supportWebGLPlusCulling) {
                var e = this._boundFrustum.near, r = this._boundFrustum.far, i = this._boundFrustum.left, a = this._boundFrustum.right, n = this._boundFrustum.top, s = this._boundFrustum.bottom, o = e.normal, l = r.normal, _ = i.normal, h = a.normal, c = n.normal, d = s.normal, u = this._boundFrustumBuffer;
                u[0] = o.x, u[1] = o.y, u[2] = o.z, u[3] = e.distance, u[4] = l.x, u[5] = l.y, u[6] = l.z, 
                u[7] = r.distance, u[8] = _.x, u[9] = _.y, u[10] = _.z, u[11] = i.distance, u[12] = h.x, 
                u[13] = h.y, u[14] = h.z, u[15] = a.distance, u[16] = c.x, u[17] = c.y, u[18] = c.z, 
                u[19] = n.distance, u[20] = d.x, u[21] = d.y, u[22] = d.z, u[23] = s.distance;
            }
            return this._boundFrustum;
        }
        get renderTarget() {
            return this._offScreenRenderTexture;
        }
        set renderTarget(e) {
            var t = this._offScreenRenderTexture;
            t !== e && (t && (t._isCameraTarget = !1), e && (e._isCameraTarget = !0), this._offScreenRenderTexture = e, 
            this._calculateProjectionMatrix());
        }
        get postProcess() {
            return this._postProcess;
        }
        set postProcess(e) {
            this._postProcess = e;
            var t = new Xe();
            this.addCommandBuffer(Ye.CAMERAEVENT_POSTPROCESS, t), e._init(this, t);
        }
        get enableHDR() {
            return this._enableHDR;
        }
        set enableHDR(e) {
            !e || Ce.supportRenderTextureFormat(t.RenderTextureFormat.R16G16B16A16) ? this._enableHDR = e : console.warn("Camera:can't enable HDR in this device.");
        }
        _calculationViewport(e, t, r) {
            var i = e.x * t, a = e.y * r, n = i + Math.max(e.width * t, 0), s = a + Math.max(e.height * r, 0), o = Math.ceil(i), l = Math.ceil(a), _ = Math.floor(n), h = Math.floor(s), c = o - i >= .5 ? Math.floor(i) : o, d = l - a >= .5 ? Math.floor(a) : l, u = n - _ >= .5 ? Math.ceil(n) : _, f = s - h >= .5 ? Math.ceil(s) : h;
            this._viewport.x = c, this._viewport.y = d, this._viewport.width = u - c, this._viewport.height = f - d;
        }
        _calculateProjectionMatrix() {
            if (!this._useUserProjectionMatrix) if (this._orthographic) {
                var e = .5 * this.orthographicVerticalSize, t = e * this.aspectRatio;
                L.createOrthoOffCenter(-t, t, -e, e, this.nearPlane, this.farPlane, this._projectionMatrix);
            } else L.createPerspective(3.1416 * this.fieldOfView / 180, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);
        }
        _isLayerVisible(e) {
            return 0 != (Math.pow(2, e) & this.cullingMask);
        }
        _onTransformChanged(e) {
            (e &= oe.TRANSFORM_WORLDMATRIX) && (this._updateViewMatrix = !0);
        }
        _parse(e, t) {
            super._parse(e, t);
            var r = e.clearFlag;
            void 0 !== r && (this.clearFlag = r);
            var i = e.viewport;
            this.normalizedViewport = new Me(i[0], i[1], i[2], i[3]);
            var a = e.enableHDR;
            void 0 !== a && (this.enableHDR = a);
        }
        _getCanvasWidth() {
            return this._offScreenRenderTexture ? this._offScreenRenderTexture.width : b.clientWidth;
        }
        _getCanvasHeight() {
            return this._offScreenRenderTexture ? this._offScreenRenderTexture.height : b.clientHeight;
        }
        _getRenderTexture() {
            return this._internalRenderTexture || this._offScreenRenderTexture;
        }
        _needInternalRenderTexture() {
            return !(!this._postProcess && !this._enableHDR);
        }
        _applyPostProcessCommandBuffers() {
            for (var e = 0, t = this._postProcessCommandBuffers.length; e < t; e++) this._postProcessCommandBuffers[e]._apply();
        }
        _getRenderTextureFormat() {
            return this._enableHDR ? t.RenderTextureFormat.R16G16B16A16 : t.RenderTextureFormat.R8G8B8;
        }
        _prepareCameraToRender() {
            super._prepareCameraToRender();
            var e = this.viewport;
            this._viewportParams.setValue(e.x, e.y, e.width, e.height), this._projectionParams.setValue(this._nearPlane, this._farPlane, b._instance.invertY ? -1 : 1, 0), 
            this._shaderValues.setVector(Be.VIEWPORT, this._viewportParams), this._shaderValues.setVector(Be.PROJECTION_PARAMS, this._projectionParams);
        }
        _applyViewProject(e, t, r) {
            var i, a = this._shaderValues;
            e.invertY ? (L.multiply(Be._invertYScaleMatrix, r, Be._invertYProjectionMatrix), 
            L.multiply(Be._invertYProjectionMatrix, t, Be._invertYProjectionViewMatrix), r = Be._invertYProjectionMatrix, 
            i = Be._invertYProjectionViewMatrix) : (L.multiply(r, t, this._projectionViewMatrix), 
            i = this._projectionViewMatrix), e.viewMatrix = t, e.projectionMatrix = r, e.projectionViewMatrix = i, 
            a.setMatrix4x4(Be.VIEWMATRIX, t), a.setMatrix4x4(Be.PROJECTMATRIX, r), a.setMatrix4x4(Be.VIEWPROJECTMATRIX, i);
        }
        _updateClusterPlaneXY() {
            var e = this.fieldOfView, t = this.aspectRatio;
            if (this._clusterPlaneCacheFlag.x !== e || this._clusterPlaneCacheFlag.y !== t) {
                var r = s._config.lightClusterCount, i = r.x, a = r.y, o = i + 1, l = a + 1, _ = this._clusterXPlanes, h = this._clusterYPlanes;
                if (!_) {
                    _ = this._clusterXPlanes = new Array(o), h = this._clusterYPlanes = new Array(l);
                    for (var c = 0; c < o; c++) _[c] = new n();
                    for (c = 0; c < l; c++) h[c] = new n();
                }
                var d = Math.tan(this.fieldOfView / 2 * Math.PI / 180), u = this.aspectRatio * d, f = 2 * d / i, m = 2 * u / a;
                for (c = 0; c < o; c++) {
                    var E = m * c - u, T = 1 / Math.sqrt(1 + E * E);
                    _[c].setValue(T, 0, -E * T);
                }
                for (c = 0; c < l; c++) {
                    E = d - f * c;
                    var g = -1 / Math.sqrt(1 + E * E);
                    h[c].setValue(0, g, -E * g);
                }
                this._clusterPlaneCacheFlag.x = e, this._clusterPlaneCacheFlag.y = t;
            }
        }
        render(r = null, i = null) {
            if (this.activeInHierarchy) {
                var a = this.viewport, n = this._needInternalRenderTexture(), o = t.LayaGL.instance, l = b._instance, _ = l.scene = this._scene;
                if (this._internalRenderTexture = n ? V.createFromPool(a.width, a.height, this._getRenderTextureFormat(), t.RenderTextureDepthFormat.DEPTH_16, t.BaseTexture.FILTERMODE_BILINEAR) : null, 
                _.parallelSplitShadowMaps[0]) {
                    z.setRuntimeValueMode(!1);
                    var h = _.parallelSplitShadowMaps[0];
                    h._calcAllLightCameraInfo(this), _._shaderValues.addDefine(j.SHADERDEFINE_CAST_SHADOW);
                    for (var c = 0, d = h.shadowMapCount; c < d; c++) {
                        var u = h.cameras[c];
                        l.camera = u, ce.renderObjectCulling(u, _, l, r, i, !0);
                        var f = h.cameras[c + 1].renderTarget;
                        f._start(), b._instance.invertY = !1, l.camera = u, Ye._updateMark++, l.viewport = u.viewport, 
                        u._prepareCameraToRender(), u._applyViewProject(l, u.viewMatrix, u.projectionMatrix), 
                        _._clear(o, l), _._opaqueQueue._render(l), f._end();
                    }
                    _._shaderValues.removeDefine(j.SHADERDEFINE_CAST_SHADOW), z.setRuntimeValueMode(!0);
                }
                if (l.camera = this, Ye._updateMark++, _._preRenderScript(), n && !this._offScreenRenderTexture && (this.clearFlag == e.CameraClearFlags.DepthOnly || this.clearFlag == e.CameraClearFlags.Nothing)) if (this._enableHDR) {
                    var m = V.createFromPool(a.width, a.height, t.RenderTextureFormat.R8G8B8, t.RenderTextureDepthFormat.DEPTH_16, t.BaseTexture.FILTERMODE_BILINEAR);
                    t.WebGLContext.bindTexture(o, o.TEXTURE_2D, m._getSource()), o.copyTexSubImage2D(o.TEXTURE_2D, 0, 0, 0, a.x, b.clientHeight - (a.y + a.height), a.width, a.height), 
                    (T = He.create(m, this._internalRenderTexture)).run(), T.recover(), V.recoverToPool(m);
                } else t.WebGLContext.bindTexture(o, o.TEXTURE_2D, this._internalRenderTexture._getSource()), 
                o.copyTexSubImage2D(o.TEXTURE_2D, 0, 0, 0, a.x, b.clientHeight - (a.y + a.height), a.width, a.height);
                var E = this._getRenderTexture();
                if (E && E._start(), l.viewport = a, this._prepareCameraToRender(), s._config._multiLighting && Re.instance.update(this, this._scene), 
                this._applyViewProject(l, this.viewMatrix, this._projectionMatrix), _._preCulling(l, this, r, i), 
                _._clear(o, l), _._renderScene(l), _._postRenderScript(), E && E._end(), n) {
                    if (this._postProcess) this._postProcess._render(), this._applyPostProcessCommandBuffers(); else if (this._enableHDR) {
                        var T, g = this._getCanvasWidth(), p = this._getCanvasHeight();
                        this._screenOffsetScale.setValue(a.x / g, a.y / p, a.width / g, a.height / p), (T = He.create(this._internalRenderTexture, this._offScreenRenderTexture ? this._offScreenRenderTexture : null, this._screenOffsetScale)).run(), 
                        T.recover();
                    }
                    V.recoverToPool(this._internalRenderTexture);
                }
            }
        }
        viewportPointToRay(e, t) {
            Le.calculateCursorRay(e, this.viewport, this._projectionMatrix, this.viewMatrix, null, t);
        }
        normalizedViewportPointToRay(e, t) {
            var r = Ye._tempVector20, i = this.viewport;
            r.x = e.x * i.width, r.y = e.y * i.height, Le.calculateCursorRay(r, this.viewport, this._projectionMatrix, this.viewMatrix, null, t);
        }
        worldToViewportPoint(e, r) {
            L.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix), 
            this.viewport.project(e, this._projectionViewMatrix, r), r.x = r.x / t.Laya.stage.clientScaleX, 
            r.y = r.y / t.Laya.stage.clientScaleY;
        }
        worldToNormalizedViewportPoint(e, r) {
            L.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix), 
            this.normalizedViewport.project(e, this._projectionViewMatrix, r), r.x = r.x / t.Laya.stage.clientScaleX, 
            r.y = r.y / t.Laya.stage.clientScaleY;
        }
        convertScreenCoordToOrthographicCoord(e, r) {
            if (this._orthographic) {
                var i = b.clientWidth, a = b.clientHeight, s = this.orthographicVerticalSize * this.aspectRatio / i, o = this.orthographicVerticalSize / a;
                return r.x = (-i / 2 + e.x * t.Laya.stage.clientScaleX) * s, r.y = (a / 2 - e.y * t.Laya.stage.clientScaleY) * o, 
                r.z = (this.nearPlane - this.farPlane) * (e.z + 1) / 2 - this.nearPlane, n.transformCoordinate(r, this.transform.worldMatrix, r), 
                !0;
            }
            return !1;
        }
        destroy(e = !0) {
            this._offScreenRenderTexture = null, this.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onTransformChanged), 
            super.destroy(e);
        }
        addCommandBuffer(e, t) {
            switch (e) {
              case Ye.CAMERAEVENT_POSTPROCESS:
                this._postProcessCommandBuffers.push(t), t._camera = this;
                break;

              default:
                throw "Camera:unknown event.";
            }
        }
        removeCommandBuffer(e, t) {
            switch (e) {
              case Ye.CAMERAEVENT_POSTPROCESS:
                var r = this._postProcessCommandBuffers.indexOf(t);
                -1 !== r && this._postProcessCommandBuffers.splice(r, 1);
                break;

              default:
                throw "Camera:unknown event.";
            }
        }
        removeCommandBuffers(e) {
            switch (e) {
              case Ye.CAMERAEVENT_POSTPROCESS:
                this._postProcessCommandBuffers.length = 0;
                break;

              default:
                throw "Camera:unknown event.";
            }
        }
        _create() {
            return new Ye();
        }
    }
    Ye.CAMERAEVENT_POSTPROCESS = 0, Ye._tempVector20 = new i(), Ye._updateMark = 0;
    class Ze {
        constructor() {
            this.renderSubShader = null, this.renderType = Ze.RENDERTYPE_NORMAL;
        }
        getInvertFront() {
            return this._transform._isFrontFaceInvert;
        }
        setTransform(e) {
            this._transform = e;
        }
        setGeometry(e) {
            this._geometry = e;
        }
        addToOpaqueRenderQueue(e, t) {
            t.elements.add(this);
        }
        addToTransparentRenderQueue(e, t) {
            t.elements.add(this), t.lastTransparentBatched = !1, t.lastTransparentRenderElement = this;
        }
        _update(e, t, r, i) {
            if (this.material) {
                var a = this.material._shader.getSubShaderAt(0);
                if (this.renderSubShader = null, r) if (i) {
                    var n = a.getFlag(i);
                    if (!n) return;
                    for (var s = r._subShaders, o = 0, l = s.length; o < l; o++) {
                        var _ = s[o];
                        if (n === _.getFlag(i)) {
                            this.renderSubShader = _;
                            break;
                        }
                    }
                    if (!this.renderSubShader) return;
                } else this.renderSubShader = r.getSubShaderAt(0); else this.renderSubShader = a;
                var h = e._getRenderQueue(this.material.renderQueue);
                h.isTransparent ? this.addToTransparentRenderQueue(t, h) : this.addToOpaqueRenderQueue(t, h);
            }
        }
        _render(e) {
            var t, r, i, a = e.invertY, n = Ye._updateMark, s = e.scene, o = e.camera, l = this._transform, _ = this._geometry;
            e.renderElement = this;
            var h = n !== this.render._updateMark || this.renderType !== this.render._updateRenderType;
            if (h ? (this.render._renderUpdate(e, l), this.render._renderUpdateWithCamera(e, l), 
            this.render._updateMark = n, this.render._updateRenderType = this.renderType) : this.renderType == Ze.RENDERTYPE_INSTANCEBATCH && (this.render._renderUpdate(e, l), 
            this.render._renderUpdateWithCamera(e, l)), _._prepareRender(e)) for (var c = this.renderSubShader._passes, d = 0, u = c.length; d < u; d++) {
                var f = Ze._compileDefine;
                s._shaderValues._defineDatas.cloneTo(f), f.removeDefineDatas(this.material._disablePublicDefineDatas), 
                f.addDefineDatas(this.render._shaderValues._defineDatas), f.addDefineDatas(this.material._shaderValues._defineDatas);
                var m = e.shader = c[d].withCompile(f), E = m.bind(), T = n !== m._uploadMark, g = m._uploadScene !== s || T;
                (g || E) && (m.uploadUniforms(m._sceneUniformParamsMap, s._shaderValues, g), m._uploadScene = s);
                var p = m._uploadRender !== this.render || m._uploadRenderType !== this.renderType || T;
                (p || E) && (m.uploadUniforms(m._spriteUniformParamsMap, this.render._shaderValues, p), 
                m._uploadRender = this.render, m._uploadRenderType = this.renderType);
                var S = m._uploadCamera !== o || T;
                (S || E) && (m.uploadUniforms(m._cameraUniformParamsMap, o._shaderValues, S), m._uploadCamera = o);
                var R = m._uploadMaterial !== this.material || T;
                (R || E) && (m.uploadUniforms(m._materialUniformParamsMap, this.material._shaderValues, R), 
                m._uploadMaterial = this.material);
                var v = this.material._shaderValues;
                t !== this.material || r !== m ? (m.uploadRenderStateBlendDepth(v), m.uploadRenderStateFrontFace(v, a, this.getInvertFront()), 
                t = this.material, r = m, i = this.render) : i !== this.render && (m.uploadRenderStateFrontFace(v, a, this.getInvertFront()), 
                i = this.render), _._render(e), m._uploadMark = n;
            }
            h && this.renderType !== Ze.RENDERTYPE_NORMAL && this.render._revertBatchRenderUpdate(e);
        }
        destroy() {
            this._transform = null, this._geometry = null, this.material = null, this.render = null;
        }
    }
    Ze.RENDERTYPE_NORMAL = 0, Ze.RENDERTYPE_STATICBATCH = 1, Ze.RENDERTYPE_INSTANCEBATCH = 2, 
    Ze.RENDERTYPE_VERTEXBATCH = 3, Ze._compileDefine = new w();
    class je extends Ze {
        constructor() {
            super(), this._dynamicWorldPositionNormalNeedUpdate = !0;
        }
        _onWorldMatrixChanged() {
            this._dynamicWorldPositionNormalNeedUpdate = !0;
        }
        _computeWorldPositionsAndNormals(e, t, r, i) {
            if (this._dynamicWorldPositionNormalNeedUpdate) {
                for (var a = this._geometry, n = a._vertexBuffer, s = n.vertexDeclaration.vertexStride / 4, o = n.getFloat32Data(), l = this._transform.worldMatrix, _ = this._transform.rotation, h = a._indices, c = 0; c < i; c++) {
                    var d = (r ? h[c] : c) * s, u = 3 * c;
                    v.transformVector3ArrayToVector3ArrayCoordinate(o, d + e, l, this._dynamicWorldPositions, u), 
                    -1 !== t && v.transformVector3ArrayByQuat(o, d + t, _, this._dynamicWorldNormals, u);
                }
                this._dynamicWorldPositionNormalNeedUpdate = !1;
            }
        }
        setTransform(e) {
            this._transform !== e && (this._transform && this._transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged), 
            e && e.on(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatrixChanged), this._dynamicWorldPositionNormalNeedUpdate = !0, 
            this._transform = e);
        }
        setGeometry(e) {
            if (this._geometry !== e) {
                var t = e, r = t._mesh;
                if (r) {
                    var i = r._subMeshes.length > 1, a = i ? t._indexCount : r._vertexCount;
                    if (a <= o.SubMeshDynamicBatch.maxAllowVertexCount) {
                        var n = 3 * a;
                        this._dynamicVertexBatch = !0, this._dynamicWorldPositions = new Float32Array(n), 
                        this._dynamicWorldNormals = new Float32Array(n), this._dynamicVertexCount = a, this._dynamicMultiSubMesh = i;
                    } else this._dynamicVertexBatch = !1;
                }
                this._geometry = e;
            }
        }
        addToOpaqueRenderQueue(e, r) {
            var i = this.staticBatch, a = r.elements, n = a.elements;
            if (i) {
                var s = o.MeshRenderStaticBatchManager.instance, l = s.getBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, i._batchID);
                if (s._updateCountMark === l.updateMark) {
                    var _ = l.indexInList;
                    if (l.batched) n[_].staticBatchElementList.add(this); else {
                        var h = n[_], c = h.render, d = s._getBatchRenderElementFromPool();
                        d.renderType = Ze.RENDERTYPE_STATICBATCH, d.setGeometry(i), d.material = h.material;
                        var u = i.batchOwner, f = u ? u._transform : null;
                        d.setTransform(f), d.render = c, d.renderSubShader = h.renderSubShader;
                        var m = d.staticBatchElementList;
                        m.length = 0, m.add(h), m.add(this), n[_] = d, l.batched = !0;
                    }
                } else l.updateMark = s._updateCountMark, l.indexInList = a.length, l.batched = !1, 
                a.add(this);
            } else if (this.renderSubShader._owner._enableInstancing && t.LayaGL.layaGPUInstance.supportInstance() && this.render.lightmapIndex < 0) {
                var E = this._geometry, T = o.MeshRenderDynamicBatchManager.instance, g = T.getInstanceBatchOpaquaMark(this.render.receiveShadow, this.material.id, E._id, this._transform._isFrontFaceInvert);
                if (T._updateCountMark === g.updateMark) {
                    var p = g.indexInList;
                    if (g.batched) {
                        var S = n[p].instanceBatchElementList;
                        S.length === pe.instance.maxInstanceCount ? (g.updateMark = T._updateCountMark, 
                        g.indexInList = a.length, g.batched = !1, a.add(this)) : S.add(this);
                    } else {
                        var R = n[p], v = R.render, I = T._getBatchRenderElementFromPool();
                        I.renderType = Ze.RENDERTYPE_INSTANCEBATCH, I.setGeometry(pe.instance), I.material = R.material, 
                        I.setTransform(null), I.render = v, I.instanceSubMesh = E, I.renderSubShader = R.renderSubShader;
                        var x = I.instanceBatchElementList;
                        x.length = 0, x.add(R), x.add(this), n[p] = I, g.batched = !0;
                    }
                } else g.updateMark = T._updateCountMark, g.indexInList = a.length, g.batched = !1, 
                a.add(this);
            } else if (this._dynamicVertexBatch) {
                var A = this._geometry._vertexBuffer.vertexDeclaration, D = o.MeshRenderDynamicBatchManager.instance, M = D.getVertexBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, A.id);
                if (D._updateCountMark === M.updateMark) {
                    var L = M.indexInList;
                    if (M.batched) n[L].vertexBatchElementList.add(this); else {
                        var C = n[L], y = C.render, O = D._getBatchRenderElementFromPool();
                        O.renderType = Ze.RENDERTYPE_VERTEXBATCH, O.setGeometry(o.SubMeshDynamicBatch.instance), 
                        O.material = C.material, O.setTransform(null), O.render = y, O.vertexBatchVertexDeclaration = A, 
                        O.renderSubShader = C.renderSubShader;
                        var N = O.vertexBatchElementList;
                        N.length = 0, N.add(C), N.add(this), n[L] = O, M.batched = !0;
                    }
                } else M.updateMark = D._updateCountMark, M.indexInList = a.length, M.batched = !1, 
                a.add(this);
            } else a.add(this);
        }
        addToTransparentRenderQueue(e, r) {
            var i = this.staticBatch, a = r.elements, n = a.elements;
            if (i) {
                var s = o.MeshRenderStaticBatchManager.instance, l = r.lastTransparentRenderElement;
                if (l) {
                    var _ = l.render;
                    if (l._geometry._getType() !== this._geometry._getType() || l.staticBatch !== i || l.material !== this.material || _.receiveShadow !== this.render.receiveShadow || _.lightmapIndex !== this.render.lightmapIndex) a.add(this), 
                    r.lastTransparentBatched = !1; else {
                        if (r.lastTransparentBatched) n[a.length - 1].staticBatchElementList.add(this); else {
                            var h = s._getBatchRenderElementFromPool();
                            h.renderType = Ze.RENDERTYPE_STATICBATCH, h.setGeometry(i), h.material = l.material;
                            var c = i.batchOwner, d = c ? c._transform : null;
                            h.setTransform(d), h.render = this.render, h.renderSubShader = l.renderSubShader;
                            var u = h.staticBatchElementList;
                            u.length = 0, u.add(l), u.add(this), n[a.length - 1] = h;
                        }
                        r.lastTransparentBatched = !0;
                    }
                } else a.add(this), r.lastTransparentBatched = !1;
            } else if (this.renderSubShader._owner._enableInstancing && t.LayaGL.layaGPUInstance.supportInstance() && this.render.lightmapIndex < 0) {
                var f = this._geometry, m = o.MeshRenderDynamicBatchManager.instance, E = r.lastTransparentRenderElement;
                if (E) {
                    var T = E.render;
                    if (E._geometry._getType() !== this._geometry._getType() || E._geometry !== f || E.material !== this.material || T.receiveShadow !== this.render.receiveShadow) a.add(this), 
                    r.lastTransparentBatched = !1; else if (r.lastTransparentBatched) {
                        var g = n[a.length - 1].instanceBatchElementList;
                        g.length === pe.instance.maxInstanceCount ? (a.add(this), r.lastTransparentBatched = !1) : (g.add(this), 
                        r.lastTransparentBatched = !0);
                    } else {
                        var p = m._getBatchRenderElementFromPool();
                        p.renderType = Ze.RENDERTYPE_INSTANCEBATCH, p.setGeometry(pe.instance), p.material = E.material, 
                        p.setTransform(null), p.render = this.render, p.instanceSubMesh = f, p.renderSubShader = E.renderSubShader;
                        var S = p.instanceBatchElementList;
                        S.length = 0, S.add(E), S.add(this), n[a.length - 1] = p, r.lastTransparentBatched = !0;
                    }
                } else a.add(this), r.lastTransparentBatched = !1;
            } else if (this._dynamicVertexBatch) {
                var R = this._geometry._vertexBuffer.vertexDeclaration, v = o.MeshRenderDynamicBatchManager.instance, I = r.lastTransparentRenderElement;
                if (I) {
                    var x = I.render;
                    if (I._geometry._getType() !== this._geometry._getType() || I._geometry._vertexBuffer._vertexDeclaration !== R || I.material !== this.material || x.receiveShadow !== this.render.receiveShadow || x.lightmapIndex !== this.render.lightmapIndex) a.add(this), 
                    r.lastTransparentBatched = !1; else {
                        if (r.lastTransparentBatched) n[a.length - 1].vertexBatchElementList.add(this); else {
                            var A = v._getBatchRenderElementFromPool();
                            A.renderType = Ze.RENDERTYPE_VERTEXBATCH, A.setGeometry(o.SubMeshDynamicBatch.instance), 
                            A.material = I.material, A.setTransform(null), A.render = this.render, A.vertexBatchVertexDeclaration = R, 
                            A.renderSubShader = I.renderSubShader;
                            var D = A.vertexBatchElementList;
                            D.length = 0, D.add(I), D.add(this), n[a.length - 1] = A;
                        }
                        r.lastTransparentBatched = !0;
                    }
                } else a.add(this), r.lastTransparentBatched = !1;
            } else a.add(this);
            r.lastTransparentRenderElement = this;
        }
        getInvertFront() {
            switch (this.renderType) {
              case Ze.RENDERTYPE_NORMAL:
                return this._transform._isFrontFaceInvert;

              case Ze.RENDERTYPE_STATICBATCH:
              case Ze.RENDERTYPE_VERTEXBATCH:
                return !1;

              case Ze.RENDERTYPE_INSTANCEBATCH:
                return this.instanceBatchElementList.elements[0]._transform._isFrontFaceInvert;

              default:
                throw "SubMeshRenderElement: unknown renderType";
            }
        }
        destroy() {
            super.destroy(), this._dynamicWorldPositions = null, this._dynamicWorldNormals = null, 
            this.staticBatch = null, this.staticBatchElementList = null, this.vertexBatchElementList = null, 
            this.vertexBatchVertexDeclaration = null;
        }
    }
    class qe extends ue {
        constructor(e, t) {
            super(), this._bufferState = new ye(), this._batchID = qe._batchIDCounter++, this._batchElements = [], 
            this._currentBatchVertexCount = 0, this._currentBatchIndexCount = 0, this._vertexDeclaration = t, 
            this.batchOwner = e;
        }
        _getStaticBatchBakedVertexs(e, t, r, i, a, n) {
            var s, o = n._vertexBuffer, l = o.vertexDeclaration, _ = l.getVertexElementByUsage(ge.MESH_POSITION0)._offset / 4, h = l.getVertexElementByUsage(ge.MESH_NORMAL0), c = h ? h._offset / 4 : -1, d = l.getVertexElementByUsage(ge.MESH_COLOR0), u = d ? d._offset / 4 : -1, f = l.getVertexElementByUsage(ge.MESH_TEXTURECOORDINATE0), m = f ? f._offset / 4 : -1, E = l.getVertexElementByUsage(ge.MESH_TEXTURECOORDINATE1), T = E ? E._offset / 4 : -1, g = l.getVertexElementByUsage(ge.MESH_TANGENT0), p = g ? g._offset / 4 : -1, S = l.vertexStride / 4, R = o.getFloat32Data();
            r ? (r.worldMatrix.invert(qe._tempMatrix4x40), s = qe._tempMatrix4x41, L.multiply(qe._tempMatrix4x40, i.worldMatrix, s)) : s = i.worldMatrix;
            var I = qe._tempMatrix4x42;
            s.invert(I), I.transpose();
            var x = qe._tempQuaternion0;
            s.decomposeTransRotScale(qe._tempVector30, x, qe._tempVector31);
            for (var A = a.lightmapScaleOffset, D = n.vertexCount, M = 0; M < D; M++) {
                var C, y, O = M * S, N = 18 * (M + t);
                v.transformVector3ArrayToVector3ArrayCoordinate(R, O + _, s, e, N + 0), -1 !== c && v.transformVector3ArrayToVector3ArrayNormal(R, O + c, I, e, N + 3);
                var P = N + 6;
                if (-1 !== u) {
                    var b = O + u;
                    for (C = 0, y = 4; C < y; C++) e[P + C] = R[b + C];
                } else for (C = 0, y = 4; C < y; C++) e[P + C] = 1;
                if (-1 !== m) {
                    var V = O + m;
                    e[N + 10] = R[V], e[N + 11] = R[V + 1];
                }
                if (A && (-1 !== T ? v.transformLightingMapTexcoordArray(R, O + T, A, e, N + 12) : v.transformLightingMapTexcoordArray(R, O + m, A, e, N + 12)), 
                -1 !== p) {
                    var w = O + p;
                    e[N + 14] = R[w], e[N + 15] = R[w + 1], e[N + 16] = R[w + 2], e[N + 17] = R[w + 3];
                }
            }
            return D;
        }
        addTest(e) {
            var t = e.meshFilter.sharedMesh.vertexCount;
            return !(this._currentBatchVertexCount + t > qe.maxBatchVertexCount);
        }
        add(e) {
            var t = e.meshFilter.sharedMesh, r = t.vertexCount;
            this._batchElements.push(e);
            var i = e._render;
            i._isPartOfStaticBatch = !0, i._staticBatch = this;
            for (var a = i._renderElements, n = 0, s = a.length; n < s; n++) a[n].staticBatch = this;
            this._currentBatchIndexCount += t._indexBuffer.indexCount, this._currentBatchVertexCount += r;
        }
        remove(e) {
            var t = e.meshFilter.sharedMesh, r = this._batchElements.indexOf(e);
            if (-1 !== r) {
                this._batchElements.splice(r, 1);
                for (var i = e._render._renderElements, a = 0, n = i.length; a < n; a++) i[a].staticBatch = null;
                this._currentBatchIndexCount = this._currentBatchIndexCount - t._indexBuffer.indexCount, 
                this._currentBatchVertexCount = this._currentBatchVertexCount - t.vertexCount, e._render._isPartOfStaticBatch = !1;
            }
        }
        finishInit() {
            this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy(), 
            t.Resource._addGPUMemory(-(this._vertexBuffer._byteLength + this._indexBuffer._byteLength)));
            var r = t.LayaGL.instance, i = 0, a = 0, n = this.batchOwner, s = this._vertexDeclaration.vertexStride / 4, o = new Float32Array(s * this._currentBatchVertexCount), l = new Uint16Array(this._currentBatchIndexCount);
            this._vertexBuffer = new fe(this._vertexDeclaration.vertexStride * this._currentBatchVertexCount, r.STATIC_DRAW), 
            this._vertexBuffer.vertexDeclaration = this._vertexDeclaration, this._indexBuffer = new be(e.IndexFormat.UInt16, this._currentBatchIndexCount, r.STATIC_DRAW);
            for (var _ = 0, h = this._batchElements.length; _ < h; _++) {
                for (var c, d = this._batchElements[_], u = d.meshFilter.sharedMesh, f = this._getStaticBatchBakedVertexs(o, i, n ? n._transform : null, d._transform, d._render, u), m = u._indexBuffer.getData(), E = i, T = a + m.length, g = d._render._renderElements, p = 0, S = u.subMeshCount; p < S; p++) {
                    var R = u._subMeshes[p], v = a + R._indexStart, I = g[p];
                    I.staticBatchIndexStart = v, I.staticBatchIndexEnd = v + R._indexCount;
                }
                if (l.set(m, a), n ? d._transform._isFrontFaceInvert !== n.transform._isFrontFaceInvert : d._transform._isFrontFaceInvert) for (c = a; c < T; c += 3) {
                    l[c] = E + l[c];
                    var x = l[c + 1], A = l[c + 2];
                    l[c + 1] = E + A, l[c + 2] = E + x;
                } else for (c = a; c < T; c += 3) l[c] = E + l[c], l[c + 1] = E + l[c + 1], l[c + 2] = E + l[c + 2];
                a += m.length, i += f;
            }
            this._vertexBuffer.setData(o.buffer), this._indexBuffer.setData(l);
            var D = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            t.Resource._addGPUMemory(D), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
        }
        _render(e) {
            this._bufferState.bind();
            for (var r = t.LayaGL.instance, i = e.renderElement.staticBatchElementList, a = i.elements, n = 0, s = 0, o = i.length, l = 1; l < o; l++) {
                if (a[l - 1].staticBatchIndexEnd !== a[l].staticBatchIndexStart) {
                    var _ = a[n].staticBatchIndexStart, h = a[s].staticBatchIndexEnd - _;
                    r.drawElements(r.TRIANGLES, h, r.UNSIGNED_SHORT, 2 * _), n = ++s, t.Stat.trianglesFaces += h / 3;
                } else s++;
            }
            _ = a[n].staticBatchIndexStart, h = a[s].staticBatchIndexEnd - _, r.drawElements(r.TRIANGLES, h, r.UNSIGNED_SHORT, 2 * _), 
            t.Stat.renderBatches++, t.Stat.savedRenderBatches += o - 1, t.Stat.trianglesFaces += h / 3;
        }
        dispose() {
            var e = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            t.Resource._addGPUMemory(-e), this._batchElements = null, this.batchOwner = null, 
            this._vertexDeclaration = null, this._bufferState.destroy(), this._vertexBuffer.destroy(), 
            this._indexBuffer.destroy(), this._vertexBuffer = null, this._indexBuffer = null, 
            this._bufferState = null;
        }
    }
    qe._tempVector30 = new n(), qe._tempVector31 = new n(), qe._tempQuaternion0 = new u(), 
    qe._tempMatrix4x40 = new L(), qe._tempMatrix4x41 = new L(), qe._tempMatrix4x42 = new L(), 
    qe.maxBatchVertexCount = 65535, qe._batchIDCounter = 0;
    class Qe {
        constructor() {
            this.elements = [], this.length = 0;
        }
        _add(e) {
            this.length === this.elements.length ? this.elements.push(e) : this.elements[this.length] = e;
        }
        add(e) {
            this.length === this.elements.length ? this.elements.push(e) : this.elements[this.length] = e, 
            this.length++;
        }
    }
    class Ke extends he {
        constructor() {
            super(), this._opaqueBatchMarks = [], this._updateCountMark = 0;
        }
        static __init__() {
            Ke._verDec = ge.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT");
        }
        _compare(e, t) {
            var r = e._render, i = t._render, a = e.meshFilter.sharedMesh, n = t.meshFilter.sharedMesh, s = r.lightmapIndex - i.lightmapIndex;
            if (0 === s) {
                var o = (r.receiveShadow ? 1 : 0) - (i.receiveShadow ? 1 : 0);
                if (0 === o) {
                    var l = r.sharedMaterial && i.sharedMaterial ? r.sharedMaterial.id - i.sharedMaterial.id : 0;
                    if (0 === l) {
                        var _ = a._vertexBuffer.vertexDeclaration.id - n._vertexBuffer.vertexDeclaration.id;
                        return 0 === _ ? n._indexBuffer.indexCount - a._indexBuffer.indexCount : _;
                    }
                    return l;
                }
                return o;
            }
            return s;
        }
        _getBatchRenderElementFromPool() {
            var e = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
            return e || (e = new je(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = e, 
            e.staticBatchElementList = new Qe()), e;
        }
        _getStaticBatch(e, t, r) {
            var i = e[r];
            return i || (i = e[r] = new qe(t, Ke._verDec), this._staticBatches[i._batchID] = i), 
            i;
        }
        _initStaticBatchs(e) {
            var t = this._initBatchSprites;
            this._quickSort(t, 0, t.length - 1);
            for (var r, i = [], a = !1, n = 0, s = 0, o = t.length; s < o; s++) {
                var l = t[s];
                if (a) r.addTest(l) ? r.add(l) : (a = !1, n++); else s !== o - 1 && ((r = this._getStaticBatch(i, e, n)).add(l), 
                a = !0);
            }
            for (s = 0, o = i.length; s < o; s++) {
                var _ = i[s];
                _ && _.finishInit();
            }
            this._initBatchSprites.length = 0;
        }
        _removeRenderSprite(e) {
            var t = e._render, r = t._staticBatch, i = r._batchElements, a = i.indexOf(e);
            if (-1 !== a) {
                i.splice(a, 1), t._staticBatch = null;
                for (var n = t._renderElements, s = 0, o = n.length; s < o; s++) n[s].staticBatch = null;
            }
            0 === i.length && (delete this._staticBatches[r._batchID], r.dispose());
        }
        _clear() {
            super._clear(), this._updateCountMark++;
        }
        _garbageCollection() {
            for (var e in this._staticBatches) {
                var t = this._staticBatches[e];
                0 === t._batchElements.length && (t.dispose(), delete this._staticBatches[e]);
            }
        }
        getBatchOpaquaMark(e, t, r, i) {
            var a = t ? 1 : 0, n = this._opaqueBatchMarks[e] || (this._opaqueBatchMarks[e] = []), s = n[a] || (n[a] = []), o = s[r] || (s[r] = []);
            return o[i] || (o[i] = new de());
        }
    }
    Ke.instance = new Ke();
    class Je {}
    class $e {
        constructor(e, t) {
            this.min = e, this.max = t;
        }
        _rotateExtents(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.elements;
            r.x = Math.abs(s[0] * i) + Math.abs(s[4] * a) + Math.abs(s[8] * n), r.y = Math.abs(s[1] * i) + Math.abs(s[5] * a) + Math.abs(s[9] * n), 
            r.z = Math.abs(s[2] * i) + Math.abs(s[6] * a) + Math.abs(s[10] * n);
        }
        getCorners(e) {
            e.length = 8;
            var t = this.min.x, r = this.min.y, i = this.min.z, a = this.max.x, s = this.max.y, o = this.max.z;
            e[0] = new n(t, s, o), e[1] = new n(a, s, o), e[2] = new n(a, r, o), e[3] = new n(t, r, o), 
            e[4] = new n(t, s, i), e[5] = new n(a, s, i), e[6] = new n(a, r, i), e[7] = new n(t, r, i);
        }
        getCenter(e) {
            n.add(this.min, this.max, e), n.scale(e, .5, e);
        }
        getExtent(e) {
            n.subtract(this.max, this.min, e), n.scale(e, .5, e);
        }
        setCenterAndExtent(e, t) {
            n.subtract(e, t, this.min), n.add(e, t, this.max);
        }
        tranform(e, t) {
            var r = $e._tempVector30, i = $e._tempVector31;
            this.getCenter(r), this.getExtent(i), n.transformCoordinate(r, e, r), this._rotateExtents(i, e, i), 
            t.setCenterAndExtent(r, i);
        }
        toDefault() {
            this.min.toDefault(), this.max.toDefault();
        }
        static createfromPoints(e, t) {
            if (null == e) throw new Error("points");
            var r = t.min, i = t.max;
            r.x = Number.MAX_VALUE, r.y = Number.MAX_VALUE, r.z = Number.MAX_VALUE, i.x = -Number.MAX_VALUE, 
            i.y = -Number.MAX_VALUE, i.z = -Number.MAX_VALUE;
            for (var a = 0, s = e.length; a < s; ++a) n.min(r, e[a], r), n.max(i, e[a], i);
        }
        static merge(e, t, r) {
            n.min(e.min, t.min, r.min), n.max(e.max, t.max, r.max);
        }
        cloneTo(e) {
            var t = e;
            this.min.cloneTo(t.min), this.max.cloneTo(t.max);
        }
        clone() {
            var e = new $e(new n(), new n());
            return this.cloneTo(e), e;
        }
    }
    $e._tempVector30 = new n(), $e._tempVector31 = new n();
    class et {
        constructor(e, t) {
            this._updateFlag = 0, this._center = new n(), this._extent = new n(), this._boundBox = new $e(new n(), new n()), 
            e.cloneTo(this._boundBox.min), t.cloneTo(this._boundBox.max), this._setUpdateFlag(et._UPDATE_CENTER | et._UPDATE_EXTENT, !0);
        }
        setMin(e) {
            var t = this._boundBox.min;
            e !== t && e.cloneTo(t), this._setUpdateFlag(et._UPDATE_CENTER | et._UPDATE_EXTENT, !0), 
            this._setUpdateFlag(et._UPDATE_MIN, !1);
        }
        getMin() {
            var e = this._boundBox.min;
            return this._getUpdateFlag(et._UPDATE_MIN) && (this._getMin(this.getCenter(), this.getExtent(), e), 
            this._setUpdateFlag(et._UPDATE_MIN, !1)), e;
        }
        setMax(e) {
            var t = this._boundBox.max;
            e !== t && e.cloneTo(t), this._setUpdateFlag(et._UPDATE_CENTER | et._UPDATE_EXTENT, !0), 
            this._setUpdateFlag(et._UPDATE_MAX, !1);
        }
        getMax() {
            var e = this._boundBox.max;
            return this._getUpdateFlag(et._UPDATE_MAX) && (this._getMax(this.getCenter(), this.getExtent(), e), 
            this._setUpdateFlag(et._UPDATE_MAX, !1)), e;
        }
        setCenter(e) {
            e !== this._center && e.cloneTo(this._center), this._setUpdateFlag(et._UPDATE_MIN | et._UPDATE_MAX, !0), 
            this._setUpdateFlag(et._UPDATE_CENTER, !1);
        }
        getCenter() {
            return this._getUpdateFlag(et._UPDATE_CENTER) && (this._getCenter(this.getMin(), this.getMax(), this._center), 
            this._setUpdateFlag(et._UPDATE_CENTER, !1)), this._center;
        }
        setExtent(e) {
            e !== this._extent && e.cloneTo(this._extent), this._setUpdateFlag(et._UPDATE_MIN | et._UPDATE_MAX, !0), 
            this._setUpdateFlag(et._UPDATE_EXTENT, !1);
        }
        getExtent() {
            return this._getUpdateFlag(et._UPDATE_EXTENT) && (this._getExtent(this.getMin(), this.getMax(), this._extent), 
            this._setUpdateFlag(et._UPDATE_EXTENT, !1)), this._extent;
        }
        _getUpdateFlag(e) {
            return 0 != (this._updateFlag & e);
        }
        _setUpdateFlag(e, t) {
            t ? this._updateFlag |= e : this._updateFlag &= ~e;
        }
        _getCenter(e, t, r) {
            n.add(e, t, r), n.scale(r, .5, r);
        }
        _getExtent(e, t, r) {
            n.subtract(t, e, r), n.scale(r, .5, r);
        }
        _getMin(e, t, r) {
            n.subtract(e, t, r);
        }
        _getMax(e, t, r) {
            n.add(e, t, r);
        }
        _rotateExtents(e, t, r) {
            var i = e.x, a = e.y, n = e.z, s = t.elements;
            r.x = Math.abs(s[0] * i) + Math.abs(s[4] * a) + Math.abs(s[8] * n), r.y = Math.abs(s[1] * i) + Math.abs(s[5] * a) + Math.abs(s[9] * n), 
            r.z = Math.abs(s[2] * i) + Math.abs(s[6] * a) + Math.abs(s[10] * n);
        }
        _tranform(e, t) {
            var r = t._center, i = t._extent;
            n.transformCoordinate(this.getCenter(), e, r), this._rotateExtents(this.getExtent(), e, i), 
            t._boundBox.setCenterAndExtent(r, i), t._updateFlag = 0;
        }
        _getBoundBox() {
            if (this._updateFlag & et._UPDATE_MIN) {
                var e = this._boundBox.min;
                this._getMin(this.getCenter(), this.getExtent(), e), this._setUpdateFlag(et._UPDATE_MIN, !1);
            }
            if (this._updateFlag & et._UPDATE_MAX) {
                var t = this._boundBox.max;
                this._getMax(this.getCenter(), this.getExtent(), t), this._setUpdateFlag(et._UPDATE_MAX, !1);
            }
            return this._boundBox;
        }
        cloneTo(e) {
            var t = e;
            this.getMin().cloneTo(t._boundBox.min), this.getMax().cloneTo(t._boundBox.max), 
            this.getCenter().cloneTo(t._center), this.getExtent().cloneTo(t._extent), t._updateFlag = 0;
        }
        clone() {
            var e = new et(new n(), new n());
            return this.cloneTo(e), e;
        }
    }
    et._UPDATE_MIN = 1, et._UPDATE_MAX = 2, et._UPDATE_CENTER = 4, et._UPDATE_EXTENT = 8;
    class tt extends t.EventDispatcher {
        constructor(e) {
            if (super(), this._indexInList = -1, this._indexInCastShadowList = -1, this._boundsChange = !0, 
            this._castShadow = !1, this._supportOctree = !0, this._sharedMaterials = [], this._visible = !0, 
            this._indexInOctreeMotionList = -1, this._updateMark = -1, this._updateRenderType = -1, 
            this._isPartOfStaticBatch = !1, this._staticBatch = null, this._id = ++tt._uniqueIDCounter, 
            this._indexInCastShadowList = -1, this._bounds = new et(n._ZERO, n._ZERO), t.Render.supportWebGLPlusCulling) {
                var r = ce._cullingBufferLength;
                this._cullingBufferIndex = r;
                var i = ce._cullingBuffer, a = r + 7;
                if (a >= i.length) {
                    var s = i;
                    (i = ce._cullingBuffer = new Float32Array(i.length + 4096)).set(s, 0);
                }
                i[r] = 2, ce._cullingBufferLength = a;
            }
            this._renderElements = [], this._owner = e, this._enable = !0, this._materialsInstance = [], 
            this._shaderValues = new z(null), this.lightmapIndex = -1, this.receiveShadow = !1, 
            this.sortingFudge = 0, e && this._owner.transform.on(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);
        }
        get id() {
            return this._id;
        }
        get lightmapIndex() {
            return this._lightmapIndex;
        }
        set lightmapIndex(e) {
            this._lightmapIndex !== e && (this._lightmapIndex = e, this._applyLightMapParams());
        }
        get lightmapScaleOffset() {
            return this._lightmapScaleOffset;
        }
        set lightmapScaleOffset(e) {
            this._lightmapScaleOffset = e, this._shaderValues.setVector(_e.LIGHTMAPSCALEOFFSET, e), 
            this._shaderValues.addDefine(_e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
        }
        get enable() {
            return this._enable;
        }
        set enable(e) {
            this._enable = !!e;
        }
        get material() {
            var e = this._sharedMaterials[0];
            if (e && !this._materialsInstance[0]) {
                var t = this._getInstanceMaterial(e, 0), r = this._renderElements[0];
                r && (r.material = t);
            }
            return this._sharedMaterials[0];
        }
        set material(e) {
            this.sharedMaterial = e;
        }
        get materials() {
            for (var e = 0, t = this._sharedMaterials.length; e < t; e++) if (!this._materialsInstance[e]) {
                var r = this._getInstanceMaterial(this._sharedMaterials[e], e), i = this._renderElements[e];
                i && (i.material = r);
            }
            return this._sharedMaterials.slice();
        }
        set materials(e) {
            this.sharedMaterials = e;
        }
        get sharedMaterial() {
            return this._sharedMaterials[0];
        }
        set sharedMaterial(e) {
            var t = this._sharedMaterials[0];
            if (t !== e) {
                this._sharedMaterials[0] = e, this._materialsInstance[0] = !1, this._changeMaterialReference(t, e);
                var r = this._renderElements[0];
                r && (r.material = e);
            }
        }
        get sharedMaterials() {
            return this._sharedMaterials.slice();
        }
        set sharedMaterials(e) {
            for (var t = this._materialsInstance, r = this._sharedMaterials, i = 0, a = r.length; i < a; i++) {
                var n = r[i];
                n && n._removeReference();
            }
            if (!e) throw new Error("BaseRender: shadredMaterials value can't be null.");
            var s = e.length;
            for (t.length = s, r.length = s, i = 0; i < s; i++) {
                n = r[i];
                var o = e[i];
                if (n !== o) {
                    t[i] = !1;
                    var l = this._renderElements[i];
                    l && (l.material = o);
                }
                o && o._addReference(), r[i] = o;
            }
        }
        get bounds() {
            return this._boundsChange && (this._calculateBoundingBox(), this._boundsChange = !1), 
            this._bounds;
        }
        set receiveShadow(e) {
            this._receiveShadow !== e && (this._receiveShadow = e, e ? this._shaderValues.addDefine(_e.SHADERDEFINE_RECEIVE_SHADOW) : this._shaderValues.removeDefine(_e.SHADERDEFINE_RECEIVE_SHADOW));
        }
        get receiveShadow() {
            return this._receiveShadow;
        }
        get castShadow() {
            return this._castShadow;
        }
        set castShadow(e) {
            this._castShadow = e;
        }
        get isPartOfStaticBatch() {
            return this._isPartOfStaticBatch;
        }
        _getOctreeNode() {
            return this._octreeNode;
        }
        _setOctreeNode(e) {
            this._octreeNode = e;
        }
        _getIndexInMotionList() {
            return this._indexInOctreeMotionList;
        }
        _setIndexInMotionList(e) {
            this._indexInOctreeMotionList = e;
        }
        _changeMaterialReference(e, t) {
            e && e._removeReference(), t._addReference();
        }
        _getInstanceMaterial(e, t) {
            var r = e.clone();
            return r.name = r.name + "(Instance)", this._materialsInstance[t] = !0, this._changeMaterialReference(this._sharedMaterials[t], r), 
            this._sharedMaterials[t] = r, r;
        }
        _applyLightMapParams() {
            if (this._scene && this._lightmapIndex >= 0) {
                var e = this._scene.getlightmaps();
                this._lightmapIndex < e.length ? (this._shaderValues.addDefine(_e.SAHDERDEFINE_LIGHTMAP), 
                this._shaderValues.setTexture(_e.LIGHTMAP, e[this._lightmapIndex])) : this._shaderValues.removeDefine(_e.SAHDERDEFINE_LIGHTMAP);
            } else this._shaderValues.removeDefine(_e.SAHDERDEFINE_LIGHTMAP);
        }
        _onWorldMatNeedChange(e) {
            this._boundsChange = !0, this._octreeNode && (e &= oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDSCALE) && -1 === this._indexInOctreeMotionList && this._octreeNode._octree.addMotionObject(this);
        }
        _calculateBoundingBox() {
            throw "BaseRender: must override it.";
        }
        _getIndexInList() {
            return this._indexInList;
        }
        _setIndexInList(e) {
            this._indexInList = e;
        }
        _setBelongScene(e) {
            this._scene !== e && (this._scene = e, this._applyLightMapParams());
        }
        _needRender(e, t) {
            return !0;
        }
        _renderUpdate(e, t) {}
        _renderUpdateWithCamera(e, t) {}
        _revertBatchRenderUpdate(e) {}
        _destroy() {
            -1 !== this._indexInOctreeMotionList && this._octreeNode._octree.removeMotionObject(this), 
            this.offAll();
            var e = 0, t = 0;
            for (e = 0, t = this._renderElements.length; e < t; e++) this._renderElements[e].destroy();
            for (e = 0, t = this._sharedMaterials.length; e < t; e++) this._sharedMaterials[e].destroyed || this._sharedMaterials[e]._removeReference();
            this._renderElements = null, this._owner = null, this._sharedMaterials = null, this._bounds = null, 
            this._lightmapScaleOffset = null;
        }
        markAsUnStatic() {
            this._isPartOfStaticBatch && (Ke.instance._removeRenderSprite(this._owner), this._isPartOfStaticBatch = !1);
        }
    }
    tt._tempBoundBoxCorners = [ new n(), new n(), new n(), new n(), new n(), new n(), new n(), new n() ], 
    tt._uniqueIDCounter = 0;
    class rt extends tt {
        constructor(e) {
            super(e), this._revertStaticBatchDefineUV1 = !1, this._revertStaticBatchDefineLightMapUV = !1, 
            this._projectionViewWorldMatrix = new L();
        }
        _createRenderElement() {
            return new je();
        }
        _onMeshChange(e) {
            if (e) {
                var t = e.subMeshCount;
                this._renderElements.length = t;
                for (var r = 0; r < t; r++) {
                    var i = this._renderElements[r];
                    if (!i) {
                        var a = this.sharedMaterials[r];
                        (i = this._renderElements[r] = this._createRenderElement()).setTransform(this._owner._transform), 
                        i.render = this, i.material = a || Q.defaultMaterial;
                    }
                    i.setGeometry(e.getSubMesh(r));
                }
            } else this._renderElements.length = 0;
            this._boundsChange = !0;
        }
        _calculateBoundingBox() {
            var e = this._owner.meshFilter.sharedMesh;
            if (e) {
                var r = this._owner.transform.worldMatrix;
                e.bounds._tranform(r, this._bounds);
            }
            if (t.Render.supportWebGLPlusCulling) {
                var i = this._bounds.getMin(), a = this._bounds.getMax(), n = ce._cullingBuffer;
                n[this._cullingBufferIndex + 1] = i.x, n[this._cullingBufferIndex + 2] = i.y, n[this._cullingBufferIndex + 3] = i.z, 
                n[this._cullingBufferIndex + 4] = a.x, n[this._cullingBufferIndex + 5] = a.y, n[this._cullingBufferIndex + 6] = a.z;
            }
        }
        _needRender(e, t) {
            return !e || e.intersects(this.bounds._getBoundBox());
        }
        _renderUpdate(e, t) {
            var r = e.renderElement;
            switch (r.renderType) {
              case Ze.RENDERTYPE_NORMAL:
                this._shaderValues.setMatrix4x4(le.WORLDMATRIX, t.worldMatrix);
                break;

              case Ze.RENDERTYPE_STATICBATCH:
                t ? this._shaderValues.setMatrix4x4(le.WORLDMATRIX, t.worldMatrix) : this._shaderValues.setMatrix4x4(le.WORLDMATRIX, L.DEFAULT), 
                this._shaderValues.hasDefine(Je.SHADERDEFINE_UV1) ? this._revertStaticBatchDefineUV1 = !1 : (this._shaderValues.addDefine(Je.SHADERDEFINE_UV1), 
                this._revertStaticBatchDefineUV1 = !0), this._shaderValues.hasDefine(_e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV) ? (this._shaderValues.removeDefine(_e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV), 
                this._revertStaticBatchDefineLightMapUV = !0) : this._revertStaticBatchDefineLightMapUV = !1;
                break;

              case Ze.RENDERTYPE_VERTEXBATCH:
                this._shaderValues.setMatrix4x4(le.WORLDMATRIX, L.DEFAULT);
                break;

              case Ze.RENDERTYPE_INSTANCEBATCH:
                for (var i = pe.instance.instanceWorldMatrixData, a = r.instanceBatchElementList, n = a.elements, s = a.length, o = 0; o < s; o++) i.set(n[o]._transform.worldMatrix.elements, 16 * o);
                pe.instance.instanceWorldMatrixBuffer.setData(i.buffer, 0, 0, 16 * s * 4), this._shaderValues.addDefine(Je.SHADERDEFINE_GPU_INSTANCE);
            }
        }
        _renderUpdateWithCamera(e, t) {
            var r = e.projectionViewMatrix, i = e.renderElement;
            switch (i.renderType) {
              case Ze.RENDERTYPE_NORMAL:
              case Ze.RENDERTYPE_STATICBATCH:
              case Ze.RENDERTYPE_VERTEXBATCH:
                t ? (L.multiply(r, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(le.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(le.MVPMATRIX, r);
                break;

              case Ze.RENDERTYPE_INSTANCEBATCH:
                for (var a = pe.instance.instanceMVPMatrixData, n = i.instanceBatchElementList, s = n.elements, o = n.length, l = 0; l < o; l++) {
                    var _ = s[l]._transform.worldMatrix;
                    v.mulMatrixByArray(r.elements, 0, _.elements, 0, a, 16 * l);
                }
                pe.instance.instanceMVPMatrixBuffer.setData(a.buffer, 0, 0, 16 * o * 4);
            }
        }
        _revertBatchRenderUpdate(e) {
            switch (e.renderElement.renderType) {
              case Ze.RENDERTYPE_STATICBATCH:
                this._revertStaticBatchDefineUV1 && this._shaderValues.removeDefine(Je.SHADERDEFINE_UV1), 
                this._revertStaticBatchDefineLightMapUV && this._shaderValues.addDefine(_e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
                break;

              case Ze.RENDERTYPE_INSTANCEBATCH:
                this._shaderValues.removeDefine(Je.SHADERDEFINE_GPU_INSTANCE);
            }
        }
        _destroy() {
            this._isPartOfStaticBatch && Ke.instance._removeRenderSprite(this._owner), super._destroy();
        }
    }
    class it {
        constructor(e) {
            this._owner = e;
        }
        get sharedMesh() {
            return this._sharedMesh;
        }
        set sharedMesh(e) {
            if (this._sharedMesh !== e) {
                var t = this._owner._render._shaderValues, r = this._sharedMesh;
                if (r) {
                    r._removeReference(), this._getMeshDefine(r, it._meshVerticeDefine);
                    for (var i = 0, a = it._meshVerticeDefine.length; i < a; i++) t.removeDefine(it._meshVerticeDefine[i]);
                }
                if (e) {
                    e._addReference(), this._getMeshDefine(e, it._meshVerticeDefine);
                    for (i = 0, a = it._meshVerticeDefine.length; i < a; i++) t.addDefine(it._meshVerticeDefine[i]);
                }
                this._owner._render._onMeshChange(e), this._sharedMesh = e;
            }
        }
        _getMeshDefine(e, t) {
            t.length = 0;
            for (var r = 0, i = e._subMeshes.length; r < i; r++) for (var a = e.getSubMesh(r)._vertexBuffer._vertexDeclaration._vertexElements, n = 0, s = a.length; n < s; n++) {
                switch (a[n]._elementUsage) {
                  case ge.MESH_COLOR0:
                    t.push(Je.SHADERDEFINE_COLOR);
                    break;

                  case ge.MESH_TEXTURECOORDINATE0:
                    t.push(Je.SHADERDEFINE_UV0);
                    break;

                  case ge.MESH_TEXTURECOORDINATE1:
                    t.push(Je.SHADERDEFINE_UV1);
                }
            }
        }
        destroy() {
            this._owner = null, this._sharedMesh && (this._sharedMesh._removeReference(), this._sharedMesh = null);
        }
    }
    it._meshVerticeDefine = [];
    class at extends ue {
        constructor() {
            super(), this._bufferState = new ye();
            var r = t.LayaGL.instance, i = ge.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT").vertexStride * at.maxIndicesCount;
            this._vertices = new Float32Array(i / 4), this._vertexBuffer = new fe(i, r.DYNAMIC_DRAW), 
            this._indices = new Int16Array(at.maxIndicesCount), this._indexBuffer = new be(e.IndexFormat.UInt16, this._indices.length, r.DYNAMIC_DRAW);
            var a = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            t.Resource._addMemory(a, a);
        }
        static __init__() {
            at.instance = new at();
        }
        _getBatchVertices(e, t, r, i, a, n) {
            var s = e.vertexStride / 4, o = n._vertexBuffer.getFloat32Data(), l = (a.render.lightmapScaleOffset, 
            a._dynamicMultiSubMesh), _ = a._dynamicVertexCount;
            a._computeWorldPositionsAndNormals(this._positionOffset, this._normalOffset, l, _);
            for (var h = a._dynamicWorldPositions, c = a._dynamicWorldNormals, d = n._indices, u = 0; u < _; u++) {
                var f = (l ? d[u] : u) * s, m = (u + r) * s, E = 3 * u, T = m + this._positionOffset;
                t[T] = h[E], t[T + 1] = h[E + 1], t[T + 2] = h[E + 2], -1 !== this._normalOffset && (t[T = m + this._normalOffset] = c[E], 
                t[T + 1] = c[E + 1], t[T + 2] = c[E + 2]), -1 !== this._colorOffset && (T = m + this._colorOffset, 
                E = f + this._colorOffset, t[T] = o[E], t[T + 1] = o[E + 1], t[T + 2] = o[E + 2], 
                t[T + 3] = o[E + 3]), -1 !== this._uv0Offset && (T = m + this._uv0Offset, E = f + this._uv0Offset, 
                t[T] = o[E], t[T + 1] = o[E + 1]), -1 !== this._sTangentOffset && (T = m + this._sTangentOffset, 
                E = f + this._sTangentOffset, t[T] = o[E], t[T + 1] = o[E + 1], t[T + 2] = o[E + 2], 
                t[T + 3] = o[E + 3], T = m + this._sTangentOffset, E = f + this._sTangentOffset, 
                t[T] = o[E], t[T + 1] = o[E + 1], t[T + 2] = o[E + 2], t[T + 3] = o[E + 3]);
            }
        }
        _getBatchIndices(e, t, r, i, a, n) {
            var s, o, l, _ = a._indices, h = i._isFrontFaceInvert;
            if (n) if (h) for (s = 0, o = _.length; s < o; s += 3) {
                var c = r + s;
                e[l = t + s] = c, e[l + 1] = c + 2, e[l + 2] = c + 1;
            } else for (s = 0, o = _.length; s < o; s += 3) c = r + s, e[l = t + s] = c, e[l + 1] = c + 1, 
            e[l + 2] = c + 2; else if (h) for (s = 0, o = _.length; s < o; s += 3) e[l = t + s] = r + _[s], 
            e[l + 1] = r + _[s + 2], e[l + 2] = r + _[s + 1]; else for (s = 0, o = _.length; s < o; s += 3) e[l = t + s] = r + _[s], 
            e[l + 1] = r + _[s + 1], e[l + 2] = r + _[s + 2];
        }
        _flush(e, r) {
            var i = t.LayaGL.instance;
            this._vertexBuffer.setData(this._vertices.buffer, 0, 0, e * this._bufferState.vertexDeclaration.vertexStride), 
            this._indexBuffer.setData(this._indices, 0, 0, r), i.drawElements(i.TRIANGLES, r, i.UNSIGNED_SHORT, 0);
        }
        _prepareRender(e) {
            var t = e.renderElement.vertexBatchVertexDeclaration;
            this._bufferState = o.MeshRenderDynamicBatchManager.instance._getBufferState(t), 
            this._positionOffset = t.getVertexElementByUsage(ge.MESH_POSITION0)._offset / 4;
            var r = t.getVertexElementByUsage(ge.MESH_NORMAL0);
            this._normalOffset = r ? r._offset / 4 : -1;
            var i = t.getVertexElementByUsage(ge.MESH_COLOR0);
            this._colorOffset = i ? i._offset / 4 : -1;
            var a = t.getVertexElementByUsage(ge.MESH_TEXTURECOORDINATE0);
            this._uv0Offset = a ? a._offset / 4 : -1;
            var n = t.getVertexElementByUsage(ge.MESH_TEXTURECOORDINATE1);
            this._uv1Offset = n ? n._offset / 4 : -1;
            var s = t.getVertexElementByUsage(ge.MESH_TANGENT0);
            return this._sTangentOffset = s ? s._offset / 4 : -1, !0;
        }
        _render(e) {
            this._bufferState.bind();
            for (var r = e.renderElement, i = r.vertexBatchVertexDeclaration, a = r.vertexBatchElementList, n = 0, s = 0, o = (i.vertexStride, 
            0), l = a.length, _ = a.elements, h = 0; h < l; h++) {
                var c = _[h], d = c._geometry, u = d._indexCount;
                s + u > at.maxIndicesCount && (this._flush(n, s), o++, t.Stat.trianglesFaces += s / 3, 
                n = s = 0);
                var f = c._transform;
                this._getBatchVertices(i, this._vertices, n, f, c, d), this._getBatchIndices(this._indices, s, n, f, d, c._dynamicMultiSubMesh), 
                n += c._dynamicVertexCount, s += u;
            }
            this._flush(n, s), o++, t.Stat.renderBatches += o, t.Stat.savedRenderBatches += l - o, 
            t.Stat.trianglesFaces += s / 3;
        }
    }
    at.maxAllowVertexCount = 10, at.maxAllowAttribueCount = 900, at.maxIndicesCount = 32e3;
    class nt extends se {
        constructor() {
            super(), this._instanceBatchOpaqueMarks = [], this._vertexBatchOpaqueMarks = [], 
            this._cacheBufferStates = [], this._updateCountMark = 0;
        }
        getInstanceBatchOpaquaMark(e, t, r, i) {
            var a = this._instanceBatchOpaqueMarks[e ? 0 : 1] || (this._instanceBatchOpaqueMarks[e ? 0 : 1] = []), n = a[t] || (a[t] = []), s = n[r] || (n[r] = []);
            return s[i ? 1 : 0] || (s[i ? 1 : 0] = new de());
        }
        getVertexBatchOpaquaMark(e, t, r, i) {
            var a = this._vertexBatchOpaqueMarks[e] || (this._vertexBatchOpaqueMarks[e] = []), n = a[t ? 0 : 1] || (a[t ? 0 : 1] = []), s = n[r] || (n[r] = []);
            return s[i] || (s[i] = new de());
        }
        _getBufferState(e) {
            var t = this._cacheBufferStates[e.id];
            if (!t) {
                var r = at.instance;
                (t = new ye()).bind();
                var i = r._vertexBuffer;
                i.vertexDeclaration = e, t.applyVertexBuffer(i), t.applyIndexBuffer(r._indexBuffer), 
                t.unBind(), this._cacheBufferStates[e.id] = t;
            }
            return t;
        }
        _getBatchRenderElementFromPool() {
            var e = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
            return e || (e = new je(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = e, 
            e.vertexBatchElementList = new Qe(), e.instanceBatchElementList = new Qe()), e;
        }
        _clear() {
            super._clear(), this._updateCountMark++;
        }
    }
    nt.instance = new nt();
    class st extends _e {
        static __init__() {
            Je.SHADERDEFINE_UV0 = G.getDefineByName("UV"), Je.SHADERDEFINE_COLOR = G.getDefineByName("COLOR"), 
            Je.SHADERDEFINE_UV1 = G.getDefineByName("UV1"), Je.SHADERDEFINE_GPU_INSTANCE = G.getDefineByName("GPU_INSTANCE"), 
            he._registerManager(Ke.instance), se._registerManager(nt.instance);
        }
        get meshFilter() {
            return this._meshFilter;
        }
        get meshRenderer() {
            return this._render;
        }
        constructor(e = null, t = null) {
            super(t), this._meshFilter = new it(this), this._render = new rt(this), e && (this._meshFilter.sharedMesh = e);
        }
        _parse(e, r) {
            super._parse(e, r);
            var i = this.meshRenderer, n = e.lightmapIndex;
            null != n && (i.lightmapIndex = n);
            var s = e.lightmapScaleOffset;
            s && (i.lightmapScaleOffset = new a(s[0], s[1], s[2], s[3])), null != e.meshPath && (this.meshFilter.sharedMesh = t.Loader.getRes(e.meshPath)), 
            null != e.enableRender && (this.meshRenderer.enable = e.enableRender);
            var o = e.materials;
            if (o) {
                var l = i.sharedMaterials, _ = o.length;
                l.length = _;
                for (var h = 0; h < _; h++) l[h] = t.Loader.getRes(o[h].path);
                i.sharedMaterials = l;
            }
        }
        _addToInitStaticBatchManager() {
            this.meshFilter.sharedMesh && Ke.instance._addBatchSprite(this);
        }
        _cloneTo(e, t, r) {
            var i = e;
            i._meshFilter.sharedMesh = this._meshFilter.sharedMesh;
            var a = this._render, n = i._render;
            n.enable = a.enable, n.sharedMaterials = a.sharedMaterials, n.castShadow = a.castShadow;
            var s = a.lightmapScaleOffset;
            s && (n.lightmapScaleOffset = s.clone()), n.lightmapIndex = a.lightmapIndex, n.receiveShadow = a.receiveShadow, 
            n.sortingFudge = a.sortingFudge, super._cloneTo(e, t, r);
        }
        destroy(e = !0) {
            this.destroyed || (super.destroy(e), this._meshFilter.destroy());
        }
        _create() {
            return new st();
        }
    }
    class ot {}
    ot.Blend = 0, ot.Fixed = 1;
    class lt {
        constructor(e, t) {
            this._mode = 0, this._maxColorRGBKeysCount = 0, this._maxColorAlphaKeysCount = 0, 
            this._colorRGBKeysCount = 0, this._colorAlphaKeysCount = 0, this._alphaElements = null, 
            this._rgbElements = null, this._maxColorRGBKeysCount = e, this._maxColorAlphaKeysCount = t, 
            this._rgbElements = new Float32Array(4 * e), this._alphaElements = new Float32Array(2 * t);
        }
        get mode() {
            return this._mode;
        }
        set mode(e) {
            this._mode = e;
        }
        get colorRGBKeysCount() {
            return this._colorRGBKeysCount;
        }
        get colorAlphaKeysCount() {
            return this._colorAlphaKeysCount;
        }
        get maxColorRGBKeysCount() {
            return this._maxColorRGBKeysCount;
        }
        get maxColorAlphaKeysCount() {
            return this._maxColorAlphaKeysCount;
        }
        addColorRGB(e, t) {
            if (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {
                var r = 4 * this._colorRGBKeysCount;
                this._rgbElements[r] = e, this._rgbElements[r + 1] = t.r, this._rgbElements[r + 2] = t.g, 
                this._rgbElements[r + 3] = t.b, this._colorRGBKeysCount++;
            } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorRGBKeysCount);
        }
        addColorAlpha(e, t) {
            if (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {
                var r = 2 * this._colorAlphaKeysCount;
                this._alphaElements[r] = e, this._alphaElements[r + 1] = t, this._colorAlphaKeysCount++;
            } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorAlphaKeysCount);
        }
        updateColorRGB(e, t, r) {
            if (e < this._colorRGBKeysCount) {
                var i = 4 * e;
                this._rgbElements[i] = t, this._rgbElements[i + 1] = r.r, this._rgbElements[i + 2] = r.g, 
                this._rgbElements[i + 3] = r.b;
            } else console.warn("Gradient:warning:index must lessEqual than colorRGBKeysCount:" + this._colorRGBKeysCount);
        }
        updateColorAlpha(e, t, r) {
            if (e < this._colorAlphaKeysCount) {
                var i = 2 * e;
                this._alphaElements[i] = t, this._alphaElements[i + 1] = r;
            } else console.warn("Gradient:warning:index must lessEqual than colorAlphaKeysCount:" + this._colorAlphaKeysCount);
        }
        evaluateColorRGB(e, t, r = 0, i = !1) {
            e = Math.min(Math.max(e, 0), 1);
            var a = this._rgbElements, n = r;
            if (i) for (var s = n; s >= 0; s--) {
                var o = 4 * s;
                if (e === (u = a[o])) return t.r = a[o + 1], t.g = a[o + 2], t.b = a[o + 3], n;
                switch (this._mode) {
                  case ot.Blend:
                    if (e > u) {
                        if (e > (d = a[o + 4])) throw "Gradient:wrong startSearchIndex.";
                        var l = d - u, _ = d - e, h = e - u;
                        return t.r = (_ * a[o + 1] + h * a[o + 5]) / l, t.g = (_ * a[o + 2] + h * a[o + 6]) / l, 
                        t.b = (_ * a[o + 3] + h * a[o + 7]) / l, n;
                    }
                    n--;
                    continue;

                  case ot.Fixed:
                    if (e > u) {
                        if (e > a[o + 4]) throw "Gradient:wrong startSearchIndex.";
                        return t.r = a[o + 5], t.g = a[o + 6], t.b = a[o + 7], n;
                    }
                    n--;
                    continue;

                  default:
                    throw "Gradient:unknown mode.";
                }
            } else {
                s = 0;
                for (var c = this._rgbElements.length; s < c; s++) {
                    var d;
                    if (e === (d = a[o = 4 * s])) return t.r = a[o + 1], t.g = a[o + 2], t.b = a[o + 3], 
                    n;
                    switch (this._mode) {
                      case ot.Blend:
                        if (e < d) {
                            var u;
                            if (e < (u = a[o - 4])) throw "Gradient:wrong startSearchIndex.";
                            l = d - u, _ = d - e, h = e - u;
                            return t.r = (_ * a[o - 3] + h * a[o + 1]) / l, t.g = (_ * a[o - 2] + h * a[o + 2]) / l, 
                            t.b = (_ * a[o - 1] + h * a[o + 3]) / l, n;
                        }
                        n++;
                        continue;

                      case ot.Fixed:
                        if (e < d) {
                            if (e < a[o - 4]) throw "Gradient:wrong startSearchIndex.";
                            return t.r = a[o + 1], t.g = a[o + 2], t.b = a[o + 3], n;
                        }
                        n++;
                        continue;

                      default:
                        throw "Gradient:unknown mode.";
                    }
                }
            }
            return n;
        }
        evaluateColorAlpha(e, t, r = 0, i = !1) {
            e = Math.min(Math.max(e, 0), 1);
            var a = this._alphaElements, n = r;
            if (i) for (var s = n; s >= 0; s--) {
                if (e === (u = a[c = 2 * s])) return t.a = a[c + 1], n;
                switch (this._mode) {
                  case ot.Blend:
                    if (e > u) {
                        if (e > (d = a[c + 2])) throw "Gradient:wrong startSearchIndex.";
                        var o = d - u, l = d - e, _ = e - u;
                        return t.a = (l * a[c + 1] + _ * a[c + 3]) / o, n;
                    }
                    n--;
                    continue;

                  case ot.Fixed:
                    if (e > u) {
                        if (e > a[c + 2]) throw "Gradient:wrong startSearchIndex.";
                        return t.a = a[c + 3], n;
                    }
                    n--;
                    continue;

                  default:
                    throw "Gradient:unknown mode.";
                }
            } else {
                s = n;
                for (var h = this._alphaElements.length; s < h; s++) {
                    var c, d;
                    if (e === (d = a[c = 2 * s])) return t.a = a[c + 1], n;
                    switch (this._mode) {
                      case ot.Blend:
                        if (e < d) {
                            var u;
                            if (e < (u = a[c - 2])) throw "Gradient:wrong startSearchIndex.";
                            o = d - u, l = d - e, _ = e - u;
                            return t.a = (l * a[c - 1] + _ * a[c + 1]) / o, n;
                        }
                        n++;
                        continue;

                      case ot.Fixed:
                        if (e < d) {
                            if (e < a[c - 2]) throw "Gradient:wrong startSearchIndex.";
                            return t.a = a[c + 1], n;
                        }
                        n++;
                        continue;

                      default:
                        throw "Gradient:unknown mode.";
                    }
                }
            }
            return n;
        }
        cloneTo(e) {
            var t, r, i = e;
            i._colorAlphaKeysCount = this._colorAlphaKeysCount;
            var a = i._alphaElements;
            for (t = 0, r = this._alphaElements.length; t < r; t++) a[t] = this._alphaElements[t];
            i._colorRGBKeysCount = this._colorRGBKeysCount;
            var n = i._rgbElements;
            for (t = 0, r = this._rgbElements.length; t < r; t++) n[t] = this._rgbElements[t];
        }
        clone() {
            var e = new lt(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);
            return this.cloneTo(e), e;
        }
    }
    class _t {
        get time() {
            return this._time;
        }
        get minCount() {
            return this._minCount;
        }
        get maxCount() {
            return this._maxCount;
        }
        constructor(e, t, r) {
            this._time = e, this._minCount = t, this._maxCount = r;
        }
        cloneTo(e) {
            var t = e;
            t._time = this._time, t._minCount = this._minCount, t._maxCount = this._maxCount;
        }
        clone() {
            var e = new _t(this._time, this._minCount, this._maxCount);
            return this.cloneTo(e), e;
        }
    }
    class ht {
        constructor() {
            this._type = 0, this._constant = null, this._constantMin = null, this._constantMax = null, 
            this._gradient = null, this._gradientMin = null, this._gradientMax = null;
        }
        static createByConstant(e) {
            var t = new ht();
            return t._type = 0, t._constant = e, t;
        }
        static createByGradient(e) {
            var t = new ht();
            return t._type = 1, t._gradient = e, t;
        }
        static createByRandomTwoConstant(e, t) {
            var r = new ht();
            return r._type = 2, r._constantMin = e, r._constantMax = t, r;
        }
        static createByRandomTwoGradient(e, t) {
            var r = new ht();
            return r._type = 3, r._gradientMin = e, r._gradientMax = t, r;
        }
        get type() {
            return this._type;
        }
        get constant() {
            return this._constant;
        }
        get constantMin() {
            return this._constantMin;
        }
        get constantMax() {
            return this._constantMax;
        }
        get gradient() {
            return this._gradient;
        }
        get gradientMin() {
            return this._gradientMin;
        }
        get gradientMax() {
            return this._gradientMax;
        }
        cloneTo(e) {
            var t = e;
            t._type = this._type, this._constant.cloneTo(t._constant), this._constantMin.cloneTo(t._constantMin), 
            this._constantMax.cloneTo(t._constantMax), this._gradient.cloneTo(t._gradient), 
            this._gradientMin.cloneTo(t._gradientMin), this._gradientMax.cloneTo(t._gradientMax);
        }
        clone() {
            var e = new ht();
            return this.cloneTo(e), e;
        }
    }
    class ct {
        get color() {
            return this._color;
        }
        constructor(e) {
            this._color = e;
        }
        cloneTo(e) {
            var t = e;
            this._color.cloneTo(t._color), t.enable = this.enable;
        }
        clone() {
            var e;
            switch (this._color.type) {
              case 0:
                e = ht.createByConstant(this._color.constant.clone());
                break;

              case 1:
                e = ht.createByGradient(this._color.gradient.clone());
                break;

              case 2:
                e = ht.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());
                break;

              case 3:
                e = ht.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());
            }
            var t = new ct(e);
            return t.enable = this.enable, t;
        }
    }
    class dt {
        constructor() {
            this._type = 0, this._constant = 0, this._overTime = null, this._constantMin = 0, 
            this._constantMax = 0, this._overTimeMin = null, this._overTimeMax = null;
        }
        static createByConstant(e = 0) {
            var t = new dt();
            return t._type = 0, t._constant = e, t;
        }
        static createByOverTime(e) {
            var t = new dt();
            return t._type = 1, t._overTime = e, t;
        }
        static createByRandomTwoConstant(e = 0, t = 0) {
            var r = new dt();
            return r._type = 2, r._constantMin = e, r._constantMax = t, r;
        }
        static createByRandomTwoOverTime(e, t) {
            var r = new dt();
            return r._type = 3, r._overTimeMin = e, r._overTimeMax = t, r;
        }
        get type() {
            return this._type;
        }
        get constant() {
            return this._constant;
        }
        get frameOverTimeData() {
            return this._overTime;
        }
        get constantMin() {
            return this._constantMin;
        }
        get constantMax() {
            return this._constantMax;
        }
        get frameOverTimeDataMin() {
            return this._overTimeMin;
        }
        get frameOverTimeDataMax() {
            return this._overTimeMax;
        }
        cloneTo(e) {
            var t = e;
            t._type = this._type, t._constant = this._constant, this._overTime && this._overTime.cloneTo(t._overTime), 
            t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._overTimeMin && this._overTimeMin.cloneTo(t._overTimeMin), 
            this._overTimeMax && this._overTimeMax.cloneTo(t._overTimeMax);
        }
        clone() {
            var e = new dt();
            return this.cloneTo(e), e;
        }
    }
    class ut {
        constructor() {
            this._type = 0, this._separateAxes = !1, this._constant = 0, this._constantSeparate = null, 
            this._gradient = null, this._gradientX = null, this._gradientY = null, this._gradientZ = null, 
            this._gradientW = null, this._constantMin = 0, this._constantMax = 0, this._constantMinSeparate = null, 
            this._constantMaxSeparate = null, this._gradientMin = null, this._gradientMax = null, 
            this._gradientXMin = null, this._gradientXMax = null, this._gradientYMin = null, 
            this._gradientYMax = null, this._gradientZMin = null, this._gradientZMax = null, 
            this._gradientWMin = null, this._gradientWMax = null;
        }
        static createByConstant(e) {
            var t = new ut();
            return t._type = 0, t._separateAxes = !1, t._constant = e, t;
        }
        static createByConstantSeparate(e) {
            var t = new ut();
            return t._type = 0, t._separateAxes = !0, t._constantSeparate = e, t;
        }
        static createByGradient(e) {
            var t = new ut();
            return t._type = 1, t._separateAxes = !1, t._gradient = e, t;
        }
        static createByGradientSeparate(e, t, r) {
            var i = new ut();
            return i._type = 1, i._separateAxes = !0, i._gradientX = e, i._gradientY = t, i._gradientZ = r, 
            i;
        }
        static createByRandomTwoConstant(e, t) {
            var r = new ut();
            return r._type = 2, r._separateAxes = !1, r._constantMin = e, r._constantMax = t, 
            r;
        }
        static createByRandomTwoConstantSeparate(e, t) {
            var r = new ut();
            return r._type = 2, r._separateAxes = !0, r._constantMinSeparate = e, r._constantMaxSeparate = t, 
            r;
        }
        static createByRandomTwoGradient(e, t) {
            var r = new ut();
            return r._type = 3, r._separateAxes = !1, r._gradientMin = e, r._gradientMax = t, 
            r;
        }
        static createByRandomTwoGradientSeparate(e, t, r, i, a, n, s, o) {
            var l = new ut();
            return l._type = 3, l._separateAxes = !0, l._gradientXMin = e, l._gradientXMax = t, 
            l._gradientYMin = r, l._gradientYMax = i, l._gradientZMin = a, l._gradientZMax = n, 
            l._gradientWMin = s, l._gradientWMax = o, l;
        }
        get type() {
            return this._type;
        }
        get separateAxes() {
            return this._separateAxes;
        }
        get constant() {
            return this._constant;
        }
        get constantSeparate() {
            return this._constantSeparate;
        }
        get gradient() {
            return this._gradient;
        }
        get gradientX() {
            return this._gradientX;
        }
        get gradientY() {
            return this._gradientY;
        }
        get gradientZ() {
            return this._gradientZ;
        }
        get gradientW() {
            return this._gradientW;
        }
        get constantMin() {
            return this._constantMin;
        }
        get constantMax() {
            return this._constantMax;
        }
        get constantMinSeparate() {
            return this._constantMinSeparate;
        }
        get constantMaxSeparate() {
            return this._constantMaxSeparate;
        }
        get gradientMin() {
            return this._gradientMin;
        }
        get gradientMax() {
            return this._gradientMax;
        }
        get gradientXMin() {
            return this._gradientXMin;
        }
        get gradientXMax() {
            return this._gradientXMax;
        }
        get gradientYMin() {
            return this._gradientYMin;
        }
        get gradientYMax() {
            return this._gradientYMax;
        }
        get gradientZMin() {
            return this._gradientZMin;
        }
        get gradientZMax() {
            return this._gradientZMax;
        }
        get gradientWMin() {
            return this._gradientWMin;
        }
        get gradientWMax() {
            return this._gradientWMax;
        }
        cloneTo(e) {
            var t = e;
            t._type = this._type, t._separateAxes = this._separateAxes, t._constant = this._constant, 
            this._constantSeparate.cloneTo(t._constantSeparate), this._gradient.cloneTo(t._gradient), 
            this._gradientX.cloneTo(t._gradientX), this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), 
            t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(t._constantMinSeparate), 
            this._constantMaxSeparate.cloneTo(t._constantMaxSeparate), this._gradientMin.cloneTo(t._gradientMin), 
            this._gradientMax.cloneTo(t._gradientMax), this._gradientXMin.cloneTo(t._gradientXMin), 
            this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin), 
            this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin), 
            this._gradientZMax.cloneTo(t._gradientZMax);
        }
        clone() {
            var e = new ut();
            return this.cloneTo(e), e;
        }
    }
    class ft {
        constructor() {
            this._currentLength = 0, this._elements = new Float32Array(8);
        }
        get gradientCount() {
            return this._currentLength / 2;
        }
        add(e, t) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("Warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t) : console.log("Warning:data count must lessEqual than 4");
        }
        cloneTo(e) {
            var t = e;
            t._currentLength = this._currentLength;
            for (var r = t._elements, i = 0, a = this._elements.length; i < a; i++) r[i] = this._elements[i];
        }
        clone() {
            var e = new ft();
            return this.cloneTo(e), e;
        }
    }
    class mt {
        constructor() {
            this._currentLength = 0, this._elements = new Float32Array(8);
        }
        get gradientCount() {
            return this._currentLength / 2;
        }
        add(e, t) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("GradientDataNumber warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t) : console.log("GradientDataNumber warning:data count must lessEqual than 4");
        }
        getKeyByIndex(e) {
            return this._elements[2 * e];
        }
        getValueByIndex(e) {
            return this._elements[2 * e + 1];
        }
        getAverageValue() {
            for (var e = 0, t = this._currentLength - 2; e < t; e += 2) {
                this._elements[e + 1];
                this._elements[e + 3], this._elements[e + 2] - this._elements[e];
            }
            return 0;
        }
        cloneTo(e) {
            var t = e;
            t._currentLength = this._currentLength;
            for (var r = t._elements, i = 0, a = this._elements.length; i < a; i++) r[i] = this._elements[i];
        }
        clone() {
            var e = new mt();
            return this.cloneTo(e), e;
        }
    }
    class Et {
        constructor() {
            this._type = 0, this._separateAxes = !1, this._gradient = null, this._gradientX = null, 
            this._gradientY = null, this._gradientZ = null, this._constantMin = 0, this._constantMax = 0, 
            this._constantMinSeparate = null, this._constantMaxSeparate = null, this._gradientMin = null, 
            this._gradientMax = null, this._gradientXMin = null, this._gradientXMax = null, 
            this._gradientYMin = null, this._gradientYMax = null, this._gradientZMin = null, 
            this._gradientZMax = null;
        }
        static createByGradient(e) {
            var t = new Et();
            return t._type = 0, t._separateAxes = !1, t._gradient = e, t;
        }
        static createByGradientSeparate(e, t, r) {
            var i = new Et();
            return i._type = 0, i._separateAxes = !0, i._gradientX = e, i._gradientY = t, i._gradientZ = r, 
            i;
        }
        static createByRandomTwoConstant(e, t) {
            var r = new Et();
            return r._type = 1, r._separateAxes = !1, r._constantMin = e, r._constantMax = t, 
            r;
        }
        static createByRandomTwoConstantSeparate(e, t) {
            var r = new Et();
            return r._type = 1, r._separateAxes = !0, r._constantMinSeparate = e, r._constantMaxSeparate = t, 
            r;
        }
        static createByRandomTwoGradient(e, t) {
            var r = new Et();
            return r._type = 2, r._separateAxes = !1, r._gradientMin = e, r._gradientMax = t, 
            r;
        }
        static createByRandomTwoGradientSeparate(e, t, r, i, a, n) {
            var s = new Et();
            return s._type = 2, s._separateAxes = !0, s._gradientXMin = e, s._gradientXMax = t, 
            s._gradientYMin = r, s._gradientYMax = i, s._gradientZMin = a, s._gradientZMax = n, 
            s;
        }
        get type() {
            return this._type;
        }
        get separateAxes() {
            return this._separateAxes;
        }
        get gradient() {
            return this._gradient;
        }
        get gradientX() {
            return this._gradientX;
        }
        get gradientY() {
            return this._gradientY;
        }
        get gradientZ() {
            return this._gradientZ;
        }
        get constantMin() {
            return this._constantMin;
        }
        get constantMax() {
            return this._constantMax;
        }
        get constantMinSeparate() {
            return this._constantMinSeparate;
        }
        get constantMaxSeparate() {
            return this._constantMaxSeparate;
        }
        get gradientMin() {
            return this._gradientMin;
        }
        get gradientMax() {
            return this._gradientMax;
        }
        get gradientXMin() {
            return this._gradientXMin;
        }
        get gradientXMax() {
            return this._gradientXMax;
        }
        get gradientYMin() {
            return this._gradientYMin;
        }
        get gradientYMax() {
            return this._gradientYMax;
        }
        get gradientZMin() {
            return this._gradientZMin;
        }
        get gradientZMax() {
            return this._gradientZMax;
        }
        getMaxSizeInGradient() {
            var e, t, r = -Number.MAX_VALUE;
            switch (this._type) {
              case 0:
                if (this._separateAxes) {
                    for (e = 0, t = this._gradientX.gradientCount; e < t; e++) r = Math.max(r, this._gradientX.getValueByIndex(e));
                    for (e = 0, t = this._gradientY.gradientCount; e < t; e++) r = Math.max(r, this._gradientY.getValueByIndex(e));
                } else for (e = 0, t = this._gradient.gradientCount; e < t; e++) r = Math.max(r, this._gradient.getValueByIndex(e));
                break;

              case 1:
                this._separateAxes ? (r = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x), 
                r = Math.max(r, this._constantMinSeparate.y), r = Math.max(r, this._constantMaxSeparate.y)) : r = Math.max(this._constantMin, this._constantMax);
                break;

              case 2:
                if (this._separateAxes) {
                    for (e = 0, t = this._gradientXMin.gradientCount; e < t; e++) r = Math.max(r, this._gradientXMin.getValueByIndex(e));
                    for (e = 0, t = this._gradientXMax.gradientCount; e < t; e++) r = Math.max(r, this._gradientXMax.getValueByIndex(e));
                    for (e = 0, t = this._gradientYMin.gradientCount; e < t; e++) r = Math.max(r, this._gradientYMin.getValueByIndex(e));
                    for (e = 0, t = this._gradientZMax.gradientCount; e < t; e++) r = Math.max(r, this._gradientZMax.getValueByIndex(e));
                } else {
                    for (e = 0, t = this._gradientMin.gradientCount; e < t; e++) r = Math.max(r, this._gradientMin.getValueByIndex(e));
                    for (e = 0, t = this._gradientMax.gradientCount; e < t; e++) r = Math.max(r, this._gradientMax.getValueByIndex(e));
                }
            }
            return r;
        }
        cloneTo(e) {
            var t = e;
            t._type = this._type, t._separateAxes = this._separateAxes, this._gradient.cloneTo(t._gradient), 
            this._gradientX.cloneTo(t._gradientX), this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), 
            t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(t._constantMinSeparate), 
            this._constantMaxSeparate.cloneTo(t._constantMaxSeparate), this._gradientMin.cloneTo(t._gradientMin), 
            this._gradientMax.cloneTo(t._gradientMax), this._gradientXMin.cloneTo(t._gradientXMin), 
            this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin), 
            this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin), 
            this._gradientZMax.cloneTo(t._gradientZMax);
        }
        clone() {
            var e = new Et();
            return this.cloneTo(e), e;
        }
    }
    class Tt {
        constructor() {
            this._type = 0, this._constant = null, this._gradientX = null, this._gradientY = null, 
            this._gradientZ = null, this._constantMin = null, this._constantMax = null, this._gradientXMin = null, 
            this._gradientXMax = null, this._gradientYMin = null, this._gradientYMax = null, 
            this._gradientZMin = null, this._gradientZMax = null;
        }
        static createByConstant(e) {
            var t = new Tt();
            return t._type = 0, t._constant = e, t;
        }
        static createByGradient(e, t, r) {
            var i = new Tt();
            return i._type = 1, i._gradientX = e, i._gradientY = t, i._gradientZ = r, i;
        }
        static createByRandomTwoConstant(e, t) {
            var r = new Tt();
            return r._type = 2, r._constantMin = e, r._constantMax = t, r;
        }
        static createByRandomTwoGradient(e, t, r, i, a, n) {
            var s = new Tt();
            return s._type = 3, s._gradientXMin = e, s._gradientXMax = t, s._gradientYMin = r, 
            s._gradientYMax = i, s._gradientZMin = a, s._gradientZMax = n, s;
        }
        get type() {
            return this._type;
        }
        get constant() {
            return this._constant;
        }
        get gradientX() {
            return this._gradientX;
        }
        get gradientY() {
            return this._gradientY;
        }
        get gradientZ() {
            return this._gradientZ;
        }
        get constantMin() {
            return this._constantMin;
        }
        get constantMax() {
            return this._constantMax;
        }
        get gradientXMin() {
            return this._gradientXMin;
        }
        get gradientXMax() {
            return this._gradientXMax;
        }
        get gradientYMin() {
            return this._gradientYMin;
        }
        get gradientYMax() {
            return this._gradientYMax;
        }
        get gradientZMin() {
            return this._gradientZMin;
        }
        get gradientZMax() {
            return this._gradientZMax;
        }
        cloneTo(e) {
            var t = e;
            t._type = this._type, this._constant.cloneTo(t._constant), this._gradientX.cloneTo(t._gradientX), 
            this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), this._constantMin.cloneTo(t._constantMin), 
            this._constantMax.cloneTo(t._constantMax), this._gradientXMin.cloneTo(t._gradientXMin), 
            this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin), 
            this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin), 
            this._gradientZMax.cloneTo(t._gradientZMax);
        }
        clone() {
            var e = new Tt();
            return this.cloneTo(e), e;
        }
    }
    class gt {
        get angularVelocity() {
            return this._angularVelocity;
        }
        constructor(e) {
            this._angularVelocity = e;
        }
        cloneTo(e) {
            var t = e;
            this._angularVelocity.cloneTo(t._angularVelocity), t.enable = this.enable;
        }
        clone() {
            var e;
            switch (this._angularVelocity.type) {
              case 0:
                e = this._angularVelocity.separateAxes ? ut.createByConstantSeparate(this._angularVelocity.constantSeparate.clone()) : ut.createByConstant(this._angularVelocity.constant);
                break;

              case 1:
                e = this._angularVelocity.separateAxes ? ut.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone()) : ut.createByGradient(this._angularVelocity.gradient.clone());
                break;

              case 2:
                e = this._angularVelocity.separateAxes ? ut.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone()) : ut.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);
                break;

              case 3:
                e = this._angularVelocity.separateAxes ? ut.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone()) : ut.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());
            }
            var t = new gt(e);
            return t.enable = this.enable, t;
        }
    }
    class pt {
        constructor() {
            this.enable = !0, this.randomDirection = 0;
        }
        _getShapeBoundBox(e) {
            throw new Error("BaseShape: must override it.");
        }
        _getSpeedBoundBox(e) {
            throw new Error("BaseShape: must override it.");
        }
        generatePositionAndDirection(e, t, r = null, i = null) {
            throw new Error("BaseShape: must override it.");
        }
        _calculateProceduralBounds(e, t, r) {
            this._getShapeBoundBox(e);
            var i = e.min, a = e.max;
            n.multiply(i, t, i), n.multiply(a, t, a);
            var s = new $e(new n(), new n());
            this.randomDirection ? (s.min = new n(-1, -1, -1), s.max = new n(1, 1, 1)) : this._getSpeedBoundBox(s);
            var o = new $e(new n(), new n()), l = o.min, _ = o.max;
            n.scale(s.min, r.y, l), n.scale(s.max, r.y, _), n.add(e.min, l, l), n.add(e.max, _, _), 
            n.min(e.min, l, e.min), n.max(e.max, l, e.max);
            var h = new $e(new n(), new n()), c = h.min, d = h.max;
            n.scale(s.min, r.x, c), n.scale(s.max, r.x, d), n.min(h.min, d, l), n.max(h.min, d, _), 
            n.min(e.min, l, e.min), n.max(e.max, l, e.max);
        }
        cloneTo(e) {
            e.enable = this.enable;
        }
        clone() {
            var e = new pt();
            return this.cloneTo(e), e;
        }
    }
    class St {
        static _randomPointUnitArcCircle(e, t, r = null) {
            var i;
            i = r ? r.getFloat() * e : Math.random() * e, t.x = Math.cos(i), t.y = Math.sin(i);
        }
        static _randomPointInsideUnitArcCircle(e, t, r = null) {
            var i;
            St._randomPointUnitArcCircle(e, t, r), i = r ? Math.pow(r.getFloat(), .5) : Math.pow(Math.random(), .5), 
            t.x = t.x * i, t.y = t.y * i;
        }
        static _randomPointUnitCircle(e, t = null) {
            var r;
            r = t ? t.getFloat() * Math.PI * 2 : Math.random() * Math.PI * 2, e.x = Math.cos(r), 
            e.y = Math.sin(r);
        }
        static _randomPointInsideUnitCircle(e, t = null) {
            var r;
            St._randomPointUnitCircle(e), r = t ? Math.pow(t.getFloat(), .5) : Math.pow(Math.random(), .5), 
            e.x = e.x * r, e.y = e.y * r;
        }
        static _randomPointUnitSphere(e, t = null) {
            var r, i;
            t ? (r = e.z = 2 * t.getFloat() - 1, i = t.getFloat() * Math.PI * 2) : (r = e.z = 2 * Math.random() - 1, 
            i = Math.random() * Math.PI * 2);
            var a = Math.sqrt(1 - r * r);
            e.x = a * Math.cos(i), e.y = a * Math.sin(i);
        }
        static _randomPointInsideUnitSphere(e, t = null) {
            var r;
            St._randomPointUnitSphere(e), r = t ? Math.pow(t.getFloat(), 1 / 3) : Math.pow(Math.random(), 1 / 3), 
            e.x = e.x * r, e.y = e.y * r, e.z = e.z * r;
        }
        static _randomPointInsideHalfUnitBox(e, t = null) {
            t ? (e.x = t.getFloat() - .5, e.y = t.getFloat() - .5, e.z = t.getFloat() - .5) : (e.x = Math.random() - .5, 
            e.y = Math.random() - .5, e.z = Math.random() - .5);
        }
        constructor() {}
    }
    class Rt extends pt {
        constructor() {
            super(), this.x = 1, this.y = 1, this.z = 1;
        }
        _getShapeBoundBox(e) {
            var t = e.min;
            t.x = .5 * -this.x, t.y = .5 * -this.y, t.z = .5 * -this.z;
            var r = e.max;
            r.x = .5 * this.x, r.y = .5 * this.y, r.z = .5 * this.z;
        }
        _getSpeedBoundBox(e) {
            var t = e.min;
            t.x = 0, t.y = 0, t.z = 0;
            var r = e.max;
            r.x = 0, r.y = 1, r.z = 0;
        }
        generatePositionAndDirection(e, t, r = null, i = null) {
            r ? (r.seed = i[16], St._randomPointInsideHalfUnitBox(e, r), i[16] = r.seed) : St._randomPointInsideHalfUnitBox(e), 
            e.x = this.x * e.x, e.y = this.y * e.y, e.z = this.z * e.z, this.randomDirection ? r ? (r.seed = i[17], 
            St._randomPointUnitSphere(t, r), i[17] = r.seed) : St._randomPointUnitSphere(t) : (t.x = 0, 
            t.y = 0, t.z = 1);
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t.x = this.x, t.y = this.y, t.z = this.z, t.randomDirection = this.randomDirection;
        }
        clone() {
            var e = new Rt();
            return this.cloneTo(e), e;
        }
    }
    class vt extends pt {
        constructor() {
            super(), this.radius = 1, this.arc = 2 * Math.PI, this.emitFromEdge = !1;
        }
        _getShapeBoundBox(e) {
            var t = e.min;
            t.x = t.z = -this.radius, t.y = 0;
            var r = e.max;
            r.x = r.z = this.radius, r.y = 0;
        }
        _getSpeedBoundBox(e) {
            var t = e.min;
            t.x = t.y = -1, t.z = 0;
            var r = e.max;
            r.x = r.y = 1, r.z = 0;
        }
        generatePositionAndDirection(e, t, r = null, i = null) {
            var a = vt._tempPositionPoint;
            r ? (r.seed = i[16], this.emitFromEdge ? St._randomPointUnitArcCircle(this.arc, vt._tempPositionPoint, r) : St._randomPointInsideUnitArcCircle(this.arc, vt._tempPositionPoint, r), 
            i[16] = r.seed) : this.emitFromEdge ? St._randomPointUnitArcCircle(this.arc, vt._tempPositionPoint) : St._randomPointInsideUnitArcCircle(this.arc, vt._tempPositionPoint), 
            e.x = -a.x, e.y = a.y, e.z = 0, n.scale(e, this.radius, e), this.randomDirection ? r ? (r.seed = i[17], 
            St._randomPointUnitSphere(t, r), i[17] = r.seed) : St._randomPointUnitSphere(t) : e.cloneTo(t);
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t.radius = this.radius, t.arc = this.arc, t.emitFromEdge = this.emitFromEdge, t.randomDirection = this.randomDirection;
        }
        clone() {
            var e = new vt();
            return this.cloneTo(e), e;
        }
    }
    vt._tempPositionPoint = new i();
    class It extends pt {
        constructor() {
            super(), this.angle = 25 / 180 * Math.PI, this.radius = 1, this.length = 5, this.emitType = 0;
        }
        _getShapeBoundBox(e) {
            const t = this.radius + this.length * Math.sin(this.angle), r = this.length * Math.cos(this.angle);
            var i = e.min;
            i.x = i.y = -t, i.z = 0;
            var a = e.max;
            a.x = a.y = t, a.z = r;
        }
        _getSpeedBoundBox(e) {
            const t = Math.sin(this.angle);
            var r = e.min;
            r.x = r.y = -t, r.z = 0;
            var i = e.max;
            i.x = i.y = t, i.z = 1;
        }
        generatePositionAndDirection(e, t, r = null, i = null) {
            var a, s, o, l = It._tempPositionPoint, _ = Math.cos(this.angle), h = Math.sin(this.angle);
            switch (this.emitType) {
              case 0:
                r ? (r.seed = i[16], St._randomPointInsideUnitCircle(It._tempPositionPoint, r), 
                i[16] = r.seed) : St._randomPointInsideUnitCircle(It._tempPositionPoint), a = l.x, 
                s = l.y, e.x = a * this.radius, e.y = s * this.radius, e.z = 0, this.randomDirection ? (r ? (r.seed = i[17], 
                St._randomPointInsideUnitCircle(It._tempDirectionPoint, r), i[17] = r.seed) : St._randomPointInsideUnitCircle(It._tempDirectionPoint), 
                o = It._tempDirectionPoint, t.x = o.x * h, t.y = o.y * h) : (t.x = a * h, t.y = s * h), 
                t.z = _;
                break;

              case 1:
                r ? (r.seed = i[16], St._randomPointUnitCircle(It._tempPositionPoint, r), i[16] = r.seed) : St._randomPointUnitCircle(It._tempPositionPoint), 
                a = l.x, s = l.y, e.x = a * this.radius, e.y = s * this.radius, e.z = 0, this.randomDirection ? (r ? (r.seed = i[17], 
                St._randomPointInsideUnitCircle(It._tempDirectionPoint, r), i[17] = r.seed) : St._randomPointInsideUnitCircle(It._tempDirectionPoint), 
                o = It._tempDirectionPoint, t.x = o.x * h, t.y = o.y * h) : (t.x = a * h, t.y = s * h), 
                t.z = _;
                break;

              case 2:
                r ? (r.seed = i[16], St._randomPointInsideUnitCircle(It._tempPositionPoint, r)) : St._randomPointInsideUnitCircle(It._tempPositionPoint), 
                a = l.x, s = l.y, e.x = a * this.radius, e.y = s * this.radius, e.z = 0, t.x = a * h, 
                t.y = s * h, t.z = _, n.normalize(t, t), r ? (n.scale(t, this.length * r.getFloat(), t), 
                i[16] = r.seed) : n.scale(t, this.length * Math.random(), t), n.add(e, t, e), this.randomDirection && (r ? (r.seed = i[17], 
                St._randomPointUnitSphere(t, r), i[17] = r.seed) : St._randomPointUnitSphere(t));
                break;

              case 3:
                r ? (r.seed = i[16], St._randomPointUnitCircle(It._tempPositionPoint, r)) : St._randomPointUnitCircle(It._tempPositionPoint), 
                a = l.x, s = l.y, e.x = a * this.radius, e.y = s * this.radius, e.z = 0, t.x = a * h, 
                t.y = s * h, t.z = _, n.normalize(t, t), r ? (n.scale(t, this.length * r.getFloat(), t), 
                i[16] = r.seed) : n.scale(t, this.length * Math.random(), t), n.add(e, t, e), this.randomDirection && (r ? (r.seed = i[17], 
                St._randomPointUnitSphere(t, r), i[17] = r.seed) : St._randomPointUnitSphere(t));
                break;

              default:
                throw new Error("ConeShape:emitType is invalid.");
            }
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t.angle = this.angle, t.radius = this.radius, t.length = this.length, t.emitType = this.emitType, 
            t.randomDirection = this.randomDirection;
        }
        clone() {
            var e = new It();
            return this.cloneTo(e), e;
        }
    }
    It._tempPositionPoint = new i(), It._tempDirectionPoint = new i();
    class xt extends pt {
        constructor() {
            super(), this.radius = 1, this.emitFromShell = !1;
        }
        _getShapeBoundBox(e) {
            var t = e.min;
            t.x = t.y = t.z = -this.radius;
            var r = e.max;
            r.x = r.y = this.radius, r.z = 0;
        }
        _getSpeedBoundBox(e) {
            var t = e.min;
            t.x = t.y = -1, t.z = 0;
            var r = e.max;
            r.x = r.y = r.z = 1;
        }
        generatePositionAndDirection(e, t, r = null, i = null) {
            r ? (r.seed = i[16], this.emitFromShell ? St._randomPointUnitSphere(e, r) : St._randomPointInsideUnitSphere(e, r), 
            i[16] = r.seed) : this.emitFromShell ? St._randomPointUnitSphere(e) : St._randomPointInsideUnitSphere(e), 
            n.scale(e, this.radius, e);
            var a = e.z;
            a < 0 && (e.z = -1 * a), this.randomDirection ? r ? (r.seed = i[17], St._randomPointUnitSphere(t, r), 
            i[17] = r.seed) : St._randomPointUnitSphere(t) : e.cloneTo(t);
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t.radius = this.radius, t.emitFromShell = this.emitFromShell, t.randomDirection = this.randomDirection;
        }
        clone() {
            var e = new xt();
            return this.cloneTo(e), e;
        }
    }
    class At extends pt {
        constructor() {
            super(), this.radius = 1, this.emitFromShell = !1;
        }
        _getShapeBoundBox(e) {
            var t = e.min;
            t.x = t.y = t.z = -this.radius;
            var r = e.max;
            r.x = r.y = r.z = this.radius;
        }
        _getSpeedBoundBox(e) {
            var t = e.min;
            t.x = t.y = t.z = -1;
            var r = e.max;
            r.x = r.y = r.z = 1;
        }
        generatePositionAndDirection(e, t, r = null, i = null) {
            r ? (r.seed = i[16], this.emitFromShell ? St._randomPointUnitSphere(e, r) : St._randomPointInsideUnitSphere(e, r), 
            i[16] = r.seed) : this.emitFromShell ? St._randomPointUnitSphere(e) : St._randomPointInsideUnitSphere(e), 
            n.scale(e, this.radius, e), this.randomDirection ? r ? (r.seed = i[17], St._randomPointUnitSphere(t, r), 
            i[17] = r.seed) : St._randomPointUnitSphere(t) : e.cloneTo(t);
        }
        cloneTo(e) {
            super.cloneTo(e);
            var t = e;
            t.radius = this.radius, t.emitFromShell = this.emitFromShell, t.randomDirection = this.randomDirection;
        }
        clone() {
            var e = new At();
            return this.cloneTo(e), e;
        }
    }
    class Dt {
        get size() {
            return this._size;
        }
        constructor(e) {
            this._size = e;
        }
        cloneTo(e) {
            var t = e;
            this._size.cloneTo(t._size), t.enable = this.enable;
        }
        clone() {
            var e;
            switch (this._size.type) {
              case 0:
                e = this._size.separateAxes ? Et.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone()) : Et.createByGradient(this._size.gradient.clone());
                break;

              case 1:
                e = this._size.separateAxes ? Et.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone()) : Et.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);
                break;

              case 2:
                e = this._size.separateAxes ? Et.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone()) : Et.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());
            }
            var t = new Dt(e);
            return t.enable = this.enable, t;
        }
    }
    class Mt {
        constructor() {
            this._type = 0, this._constant = 0, this._constantMin = 0, this._constantMax = 0;
        }
        static createByConstant(e = 0) {
            var t = new Mt();
            return t._type = 0, t._constant = e, t;
        }
        static createByRandomTwoConstant(e = 0, t = 0) {
            var r = new Mt();
            return r._type = 1, r._constantMin = e, r._constantMax = t, r;
        }
        get type() {
            return this._type;
        }
        get constant() {
            return this._constant;
        }
        get constantMin() {
            return this._constantMin;
        }
        get constantMax() {
            return this._constantMax;
        }
        cloneTo(e) {
            var t = e;
            t._type = this._type, t._constant = this._constant, t._constantMin = this._constantMin, 
            t._constantMax = this._constantMax;
        }
        clone() {
            var e = new Mt();
            return this.cloneTo(e), e;
        }
    }
    class Lt {
        constructor(e, t) {
            this.type = 0, this.randomRow = !1, this.rowIndex = 0, this.cycles = 0, this.enableUVChannels = 0, 
            this.enable = !1, this.tiles = new i(1, 1), this.type = 0, this.randomRow = !0, 
            this.rowIndex = 0, this.cycles = 1, this.enableUVChannels = 1, this._frame = e, 
            this._startFrame = t;
        }
        get frame() {
            return this._frame;
        }
        get startFrame() {
            return this._startFrame;
        }
        cloneTo(e) {
            var t = e;
            this.tiles.cloneTo(t.tiles), t.type = this.type, t.randomRow = this.randomRow, t.rowIndex = this.rowIndex, 
            t.cycles = this.cycles, t.enableUVChannels = this.enableUVChannels, t.enable = this.enable, 
            this._frame.cloneTo(t._frame), this._startFrame.cloneTo(t._startFrame);
        }
        clone() {
            var e, t;
            switch (this._frame.type) {
              case 0:
                e = dt.createByConstant(this._frame.constant);
                break;

              case 1:
                e = dt.createByOverTime(this._frame.frameOverTimeData.clone());
                break;

              case 2:
                e = dt.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);
                break;

              case 3:
                e = dt.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());
            }
            switch (this._startFrame.type) {
              case 0:
                t = Mt.createByConstant(this._startFrame.constant);
                break;

              case 1:
                t = Mt.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);
            }
            var r = new Lt(e, t);
            return this.cloneTo(r), r;
        }
    }
    class Ct {
        constructor(e) {
            this.enable = !1, this.space = 0, this._velocity = e;
        }
        get velocity() {
            return this._velocity;
        }
        cloneTo(e) {
            var t = e;
            this._velocity.cloneTo(t._velocity), t.enable = this.enable, t.space = this.space;
        }
        clone() {
            var e;
            switch (this._velocity.type) {
              case 0:
                e = Tt.createByConstant(this._velocity.constant.clone());
                break;

              case 1:
                e = Tt.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());
                break;

              case 2:
                e = Tt.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());
                break;

              case 3:
                e = Tt.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMax.clone());
            }
            var t = new Ct(e);
            return t.enable = this.enable, t.space = this.space, t;
        }
    }
    class yt {}
    yt.WORLDPOSITION = G.propertyNameToID("u_WorldPosition"), yt.WORLDROTATION = G.propertyNameToID("u_WorldRotation"), 
    yt.POSITIONSCALE = G.propertyNameToID("u_PositionScale"), yt.SIZESCALE = G.propertyNameToID("u_SizeScale"), 
    yt.SCALINGMODE = G.propertyNameToID("u_ScalingMode"), yt.GRAVITY = G.propertyNameToID("u_Gravity"), 
    yt.THREEDSTARTROTATION = G.propertyNameToID("u_ThreeDStartRotation"), yt.STRETCHEDBILLBOARDLENGTHSCALE = G.propertyNameToID("u_StretchedBillboardLengthScale"), 
    yt.STRETCHEDBILLBOARDSPEEDSCALE = G.propertyNameToID("u_StretchedBillboardSpeedScale"), 
    yt.SIMULATIONSPACE = G.propertyNameToID("u_SimulationSpace"), yt.CURRENTTIME = G.propertyNameToID("u_CurrentTime"), 
    yt.VOLVELOCITYCONST = G.propertyNameToID("u_VOLVelocityConst"), yt.VOLVELOCITYGRADIENTX = G.propertyNameToID("u_VOLVelocityGradientX"), 
    yt.VOLVELOCITYGRADIENTY = G.propertyNameToID("u_VOLVelocityGradientY"), yt.VOLVELOCITYGRADIENTZ = G.propertyNameToID("u_VOLVelocityGradientZ"), 
    yt.VOLVELOCITYCONSTMAX = G.propertyNameToID("u_VOLVelocityConstMax"), yt.VOLVELOCITYGRADIENTXMAX = G.propertyNameToID("u_VOLVelocityGradientMaxX"), 
    yt.VOLVELOCITYGRADIENTYMAX = G.propertyNameToID("u_VOLVelocityGradientMaxY"), yt.VOLVELOCITYGRADIENTZMAX = G.propertyNameToID("u_VOLVelocityGradientMaxZ"), 
    yt.VOLSPACETYPE = G.propertyNameToID("u_VOLSpaceType"), yt.COLOROVERLIFEGRADIENTALPHAS = G.propertyNameToID("u_ColorOverLifeGradientAlphas"), 
    yt.COLOROVERLIFEGRADIENTCOLORS = G.propertyNameToID("u_ColorOverLifeGradientColors"), 
    yt.MAXCOLOROVERLIFEGRADIENTALPHAS = G.propertyNameToID("u_MaxColorOverLifeGradientAlphas"), 
    yt.MAXCOLOROVERLIFEGRADIENTCOLORS = G.propertyNameToID("u_MaxColorOverLifeGradientColors"), 
    yt.SOLSIZEGRADIENT = G.propertyNameToID("u_SOLSizeGradient"), yt.SOLSIZEGRADIENTX = G.propertyNameToID("u_SOLSizeGradientX"), 
    yt.SOLSIZEGRADIENTY = G.propertyNameToID("u_SOLSizeGradientY"), yt.SOLSizeGradientZ = G.propertyNameToID("u_SOLSizeGradientZ"), 
    yt.SOLSizeGradientMax = G.propertyNameToID("u_SOLSizeGradientMax"), yt.SOLSIZEGRADIENTXMAX = G.propertyNameToID("u_SOLSizeGradientMaxX"), 
    yt.SOLSIZEGRADIENTYMAX = G.propertyNameToID("u_SOLSizeGradientMaxY"), yt.SOLSizeGradientZMAX = G.propertyNameToID("u_SOLSizeGradientMaxZ"), 
    yt.ROLANGULARVELOCITYCONST = G.propertyNameToID("u_ROLAngularVelocityConst"), yt.ROLANGULARVELOCITYCONSTSEPRARATE = G.propertyNameToID("u_ROLAngularVelocityConstSeprarate"), 
    yt.ROLANGULARVELOCITYGRADIENT = G.propertyNameToID("u_ROLAngularVelocityGradient"), 
    yt.ROLANGULARVELOCITYGRADIENTX = G.propertyNameToID("u_ROLAngularVelocityGradientX"), 
    yt.ROLANGULARVELOCITYGRADIENTY = G.propertyNameToID("u_ROLAngularVelocityGradientY"), 
    yt.ROLANGULARVELOCITYGRADIENTZ = G.propertyNameToID("u_ROLAngularVelocityGradientZ"), 
    yt.ROLANGULARVELOCITYCONSTMAX = G.propertyNameToID("u_ROLAngularVelocityConstMax"), 
    yt.ROLANGULARVELOCITYCONSTMAXSEPRARATE = G.propertyNameToID("u_ROLAngularVelocityConstMaxSeprarate"), 
    yt.ROLANGULARVELOCITYGRADIENTMAX = G.propertyNameToID("u_ROLAngularVelocityGradientMax"), 
    yt.ROLANGULARVELOCITYGRADIENTXMAX = G.propertyNameToID("u_ROLAngularVelocityGradientMaxX"), 
    yt.ROLANGULARVELOCITYGRADIENTYMAX = G.propertyNameToID("u_ROLAngularVelocityGradientMaxY"), 
    yt.ROLANGULARVELOCITYGRADIENTZMAX = G.propertyNameToID("u_ROLAngularVelocityGradientMaxZ"), 
    yt.ROLANGULARVELOCITYGRADIENTWMAX = G.propertyNameToID("u_ROLAngularVelocityGradientMaxW"), 
    yt.TEXTURESHEETANIMATIONCYCLES = G.propertyNameToID("u_TSACycles"), yt.TEXTURESHEETANIMATIONSUBUVLENGTH = G.propertyNameToID("u_TSASubUVLength"), 
    yt.TEXTURESHEETANIMATIONGRADIENTUVS = G.propertyNameToID("u_TSAGradientUVs"), yt.TEXTURESHEETANIMATIONGRADIENTMAXUVS = G.propertyNameToID("u_TSAMaxGradientUVs");
    class Ot extends Y {
        constructor() {
            super(), this.setShaderName("PARTICLESHURIKEN"), this._color = new a(1, 1, 1, 1), 
            this.renderMode = Ot.RENDERMODE_ALPHABLENDED;
        }
        static __initDefine__() {
            Ot.SHADERDEFINE_DIFFUSEMAP = G.getDefineByName("DIFFUSEMAP"), Ot.SHADERDEFINE_TINTCOLOR = G.getDefineByName("TINTCOLOR"), 
            Ot.SHADERDEFINE_ADDTIVEFOG = G.getDefineByName("ADDTIVEFOG"), Ot.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET");
        }
        get _TintColorR() {
            return this._color.x;
        }
        set _TintColorR(e) {
            this._color.x = e, this.color = this._color;
        }
        get _TintColorG() {
            return this._color.y;
        }
        set _TintColorG(e) {
            this._color.y = e, this.color = this._color;
        }
        get _TintColorB() {
            return this._color.z;
        }
        set _TintColorB(e) {
            this._color.z = e, this.color = this._color;
        }
        get _TintColorA() {
            return this._color.w;
        }
        set _TintColorA(e) {
            this._color.w = e, this.color = this._color;
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector(Ot.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector(Ot.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector(Ot.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector(Ot.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector(Ot.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector(Ot.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector(Ot.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector(Ot.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        set renderMode(e) {
            switch (e) {
              case Ot.RENDERMODE_ADDTIVE:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.depthWrite = !1, this.cull = q.CULL_NONE, 
                this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, this.blendDst = q.BLENDPARAM_ONE, 
                this.alphaTest = !1, this._shaderValues.addDefine(Ot.SHADERDEFINE_ADDTIVEFOG);
                break;

              case Ot.RENDERMODE_ALPHABLENDED:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.depthWrite = !1, this.cull = q.CULL_NONE, 
                this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, 
                this.alphaTest = !1, this._shaderValues.removeDefine(Ot.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("ShurikenParticleMaterial : renderMode value error.");
            }
        }
        get colorR() {
            return this._TintColorR;
        }
        set colorR(e) {
            this._TintColorR = e;
        }
        get colorG() {
            return this._TintColorG;
        }
        set colorG(e) {
            this._TintColorG = e;
        }
        get colorB() {
            return this._TintColorB;
        }
        set colorB(e) {
            this._TintColorB = e;
        }
        get colorA() {
            return this._TintColorA;
        }
        set colorA(e) {
            this._TintColorA = e;
        }
        get color() {
            return this._shaderValues.getVector(Ot.TINTCOLOR);
        }
        set color(e) {
            e ? this._shaderValues.addDefine(Ot.SHADERDEFINE_TINTCOLOR) : this._shaderValues.removeDefine(Ot.SHADERDEFINE_TINTCOLOR), 
            this._shaderValues.setVector(Ot.TINTCOLOR, e);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector(Ot.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine(Ot.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(Ot.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(Ot.TILINGOFFSET, e);
        }
        get texture() {
            return this._shaderValues.getTexture(Ot.DIFFUSETEXTURE);
        }
        set texture(e) {
            e ? this._shaderValues.addDefine(Ot.SHADERDEFINE_DIFFUSEMAP) : this._shaderValues.removeDefine(Ot.SHADERDEFINE_DIFFUSEMAP), 
            this._shaderValues.setTexture(Ot.DIFFUSETEXTURE, e);
        }
        get depthWrite() {
            return this._shaderValues.getBool(Ot.DEPTH_WRITE);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(Ot.DEPTH_WRITE, e);
        }
        get cull() {
            return this._shaderValues.getInt(Ot.CULL);
        }
        set cull(e) {
            this._shaderValues.setInt(Ot.CULL, e);
        }
        get blend() {
            return this._shaderValues.getInt(Ot.BLEND);
        }
        set blend(e) {
            this._shaderValues.setInt(Ot.BLEND, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(Ot.BLEND_SRC);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(Ot.BLEND_SRC, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(Ot.BLEND_DST);
        }
        set blendDst(e) {
            this._shaderValues.setInt(Ot.BLEND_DST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(Ot.DEPTH_TEST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(Ot.DEPTH_TEST, e);
        }
        clone() {
            var e = new Ot();
            return this.cloneTo(e), e;
        }
    }
    Ot.RENDERMODE_ALPHABLENDED = 0, Ot.RENDERMODE_ADDTIVE = 1, Ot.DIFFUSETEXTURE = G.propertyNameToID("u_texture"), 
    Ot.TINTCOLOR = G.propertyNameToID("u_Tintcolor"), Ot.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), 
    Ot.CULL = G.propertyNameToID("s_Cull"), Ot.BLEND = G.propertyNameToID("s_Blend"), 
    Ot.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), Ot.BLEND_DST = G.propertyNameToID("s_BlendDst"), 
    Ot.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), Ot.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class Nt {
        constructor() {}
        static setColliderCollision(e, t, r) {}
        static getIColliderCollision(e, t) {
            return !1;
        }
    }
    Nt.COLLISIONFILTERGROUP_DEFAULTFILTER = 1, Nt.COLLISIONFILTERGROUP_STATICFILTER = 2, 
    Nt.COLLISIONFILTERGROUP_KINEMATICFILTER = 4, Nt.COLLISIONFILTERGROUP_DEBRISFILTER = 8, 
    Nt.COLLISIONFILTERGROUP_SENSORTRIGGER = 16, Nt.COLLISIONFILTERGROUP_CHARACTERFILTER = 32, 
    Nt.COLLISIONFILTERGROUP_CUSTOMFILTER1 = 64, Nt.COLLISIONFILTERGROUP_CUSTOMFILTER2 = 128, 
    Nt.COLLISIONFILTERGROUP_CUSTOMFILTER3 = 256, Nt.COLLISIONFILTERGROUP_CUSTOMFILTER4 = 512, 
    Nt.COLLISIONFILTERGROUP_CUSTOMFILTER5 = 1024, Nt.COLLISIONFILTERGROUP_CUSTOMFILTER6 = 2048, 
    Nt.COLLISIONFILTERGROUP_CUSTOMFILTER7 = 4096, Nt.COLLISIONFILTERGROUP_CUSTOMFILTER8 = 8192, 
    Nt.COLLISIONFILTERGROUP_CUSTOMFILTER9 = 16384, Nt.COLLISIONFILTERGROUP_CUSTOMFILTER10 = 32768, 
    Nt.COLLISIONFILTERGROUP_ALLFILTER = -1, Nt.gravity = new n(0, -9.81, 0);
    class Pt extends tt {
        constructor(e) {
            super(e), this._finalGravity = new n(), this._tempRotationMatrix = new L(), this._mesh = null, 
            this.stretchedBillboardCameraSpeedScale = 0, this.stretchedBillboardSpeedScale = 0, 
            this.stretchedBillboardLengthScale = 2, this._defaultBoundBox = new $e(new n(), new n()), 
            this.renderMode = 0, this._supportOctree = !1;
        }
        get renderMode() {
            return this._renderMode;
        }
        set renderMode(e) {
            if (this._renderMode !== e) {
                var t = this._shaderValues;
                switch (this._renderMode) {
                  case 0:
                    t.removeDefine(yt.SHADERDEFINE_RENDERMODE_BILLBOARD);
                    break;

                  case 1:
                    t.removeDefine(yt.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                    break;

                  case 2:
                    t.removeDefine(yt.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                    break;

                  case 3:
                    t.removeDefine(yt.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                    break;

                  case 4:
                    t.removeDefine(yt.SHADERDEFINE_RENDERMODE_MESH);
                }
                switch (this._renderMode = e, e) {
                  case 0:
                    t.addDefine(yt.SHADERDEFINE_RENDERMODE_BILLBOARD);
                    break;

                  case 1:
                    t.addDefine(yt.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                    break;

                  case 2:
                    t.addDefine(yt.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                    break;

                  case 3:
                    t.addDefine(yt.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                    break;

                  case 4:
                    t.addDefine(yt.SHADERDEFINE_RENDERMODE_MESH);
                    break;

                  default:
                    throw new Error("ShurikenParticleRender: unknown renderMode Value.");
                }
                var r = this._owner.particleSystem;
                r && r._initBufferDatas();
            }
        }
        get mesh() {
            return this._mesh;
        }
        set mesh(e) {
            this._mesh !== e && (this._mesh && this._mesh._removeReference(), this._mesh = e, 
            e && e._addReference(), this._owner.particleSystem._initBufferDatas());
        }
        _calculateBoundingBox() {
            if ((e = this._bounds.getMin()).x = -Number.MAX_VALUE, e.y = -Number.MAX_VALUE, 
            e.z = -Number.MAX_VALUE, this._bounds.setMin(e), (r = this._bounds.getMax()).x = Number.MAX_VALUE, 
            r.y = Number.MAX_VALUE, r.z = Number.MAX_VALUE, this._bounds.setMax(r), t.Render.supportWebGLPlusCulling) {
                var e = this._bounds.getMin(), r = this._bounds.getMax(), i = ce._cullingBuffer;
                i[this._cullingBufferIndex + 1] = e.x, i[this._cullingBufferIndex + 2] = e.y, i[this._cullingBufferIndex + 3] = e.z, 
                i[this._cullingBufferIndex + 4] = r.x, i[this._cullingBufferIndex + 5] = r.y, i[this._cullingBufferIndex + 6] = r.z;
            }
        }
        _needRender(e, t) {
            return !e || !!e.intersects(this.bounds._getBoundBox()) && !!this._owner.particleSystem.isAlive;
        }
        _renderUpdate(e, t) {
            var r = this._owner.particleSystem, i = this._shaderValues, a = this._owner.transform;
            switch (r.simulationSpace) {
              case 0:
                break;

              case 1:
                i.setVector3(yt.WORLDPOSITION, a.position), i.setQuaternion(yt.WORLDROTATION, a.rotation);
                break;

              default:
                throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
            }
            switch (r.scaleMode) {
              case 0:
                var s = a.getWorldLossyScale();
                i.setVector3(yt.POSITIONSCALE, s), i.setVector3(yt.SIZESCALE, s);
                break;

              case 1:
                var o = a.localScale;
                i.setVector3(yt.POSITIONSCALE, o), i.setVector3(yt.SIZESCALE, o);
                break;

              case 2:
                i.setVector3(yt.POSITIONSCALE, a.getWorldLossyScale()), i.setVector3(yt.SIZESCALE, n._ONE);
            }
            n.scale(Nt.gravity, r.gravityModifier, this._finalGravity), i.setVector3(yt.GRAVITY, this._finalGravity), 
            i.setInt(yt.SIMULATIONSPACE, r.simulationSpace), i.setBool(yt.THREEDSTARTROTATION, r.threeDStartRotation), 
            i.setInt(yt.SCALINGMODE, r.scaleMode), i.setNumber(yt.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale), 
            i.setNumber(yt.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale), 
            i.setNumber(yt.CURRENTTIME, r._currentTime);
        }
        get bounds() {
            return this._boundsChange && (this._calculateBoundingBox(), this._boundsChange = !1), 
            this._bounds;
        }
        _destroy() {
            super._destroy(), this._mesh && (this._mesh._removeReference(), this._mesh = null);
        }
    }
    class bt {
        constructor() {}
    }
    bt.PARTICLE_CORNERTEXTURECOORDINATE0 = 0, bt.PARTICLE_POSITION0 = 1, bt.PARTICLE_COLOR0 = 2, 
    bt.PARTICLE_TEXTURECOORDINATE0 = 3, bt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME = 4, 
    bt.PARTICLE_DIRECTIONTIME = 5, bt.PARTICLE_STARTCOLOR0 = 6, bt.PARTICLE_ENDCOLOR0 = 7, 
    bt.PARTICLE_STARTSIZE = 8, bt.PARTICLE_STARTROTATION = 9, bt.PARTICLE_STARTSPEED = 10, 
    bt.PARTICLE_RANDOM0 = 11, bt.PARTICLE_RANDOM1 = 12, bt.PARTICLE_SIMULATIONWORLDPOSTION = 13, 
    bt.PARTICLE_SIMULATIONWORLDROTATION = 14;
    class Vt extends bt {
        static get vertexDeclaration() {
            return Vt._vertexDeclaration;
        }
        static __init__() {
            Vt._vertexDeclaration = new Ee(152, [ new Te(0, me.Vector4, bt.PARTICLE_CORNERTEXTURECOORDINATE0), new Te(16, me.Vector4, bt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME), new Te(32, me.Vector4, bt.PARTICLE_DIRECTIONTIME), new Te(48, me.Vector4, bt.PARTICLE_STARTCOLOR0), new Te(64, me.Vector3, bt.PARTICLE_STARTSIZE), new Te(76, me.Vector3, bt.PARTICLE_STARTROTATION), new Te(88, me.Single, bt.PARTICLE_STARTSPEED), new Te(92, me.Vector4, bt.PARTICLE_RANDOM0), new Te(108, me.Vector4, bt.PARTICLE_RANDOM1), new Te(124, me.Vector3, bt.PARTICLE_SIMULATIONWORLDPOSTION), new Te(136, me.Vector4, bt.PARTICLE_SIMULATIONWORLDROTATION) ]);
        }
        get cornerTextureCoordinate() {
            return this._cornerTextureCoordinate;
        }
        get positionStartLifeTime() {
            return this._positionStartLifeTime;
        }
        get velocity() {
            return this._velocity;
        }
        get startColor() {
            return this._startColor;
        }
        get startSize() {
            return this._startSize;
        }
        get startRotation0() {
            return this._startRotation0;
        }
        get startRotation1() {
            return this._startRotation1;
        }
        get startRotation2() {
            return this._startRotation2;
        }
        get startLifeTime() {
            return this._startLifeTime;
        }
        get time() {
            return this._time;
        }
        get startSpeed() {
            return this._startSpeed;
        }
        get random0() {
            return this._randoms0;
        }
        get random1() {
            return this._randoms1;
        }
        get simulationWorldPostion() {
            return this._simulationWorldPostion;
        }
        constructor(e, t, r, i, a, n, s, o, l, _, h, c, d, u) {
            super(), this._cornerTextureCoordinate = e, this._positionStartLifeTime = t, this._velocity = r, 
            this._startColor = i, this._startSize = a, this._startRotation0 = n, this._startRotation1 = s, 
            this._startRotation2 = o, this._startLifeTime = l, this._time = _, this._startSpeed = h, 
            this._randoms0 = this.random0, this._randoms1 = this.random1, this._simulationWorldPostion = u;
        }
    }
    class wt extends bt {
        static __init__() {
            wt._vertexDeclaration = new Ee(172, [ new Te(0, me.Vector3, bt.PARTICLE_POSITION0), new Te(12, me.Vector4, bt.PARTICLE_COLOR0), new Te(28, me.Vector2, bt.PARTICLE_TEXTURECOORDINATE0), new Te(36, me.Vector4, bt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME), new Te(52, me.Vector4, bt.PARTICLE_DIRECTIONTIME), new Te(68, me.Vector4, bt.PARTICLE_STARTCOLOR0), new Te(84, me.Vector3, bt.PARTICLE_STARTSIZE), new Te(96, me.Vector3, bt.PARTICLE_STARTROTATION), new Te(108, me.Single, bt.PARTICLE_STARTSPEED), new Te(112, me.Vector4, bt.PARTICLE_RANDOM0), new Te(128, me.Vector4, bt.PARTICLE_RANDOM1), new Te(144, me.Vector3, bt.PARTICLE_SIMULATIONWORLDPOSTION), new Te(156, me.Vector4, bt.PARTICLE_SIMULATIONWORLDROTATION) ]);
        }
        static get vertexDeclaration() {
            return wt._vertexDeclaration;
        }
        get cornerTextureCoordinate() {
            return this._cornerTextureCoordinate;
        }
        get position() {
            return this._positionStartLifeTime;
        }
        get velocity() {
            return this._velocity;
        }
        get startColor() {
            return this._startColor;
        }
        get startSize() {
            return this._startSize;
        }
        get startRotation0() {
            return this._startRotation0;
        }
        get startRotation1() {
            return this._startRotation1;
        }
        get startRotation2() {
            return this._startRotation2;
        }
        get startLifeTime() {
            return this._startLifeTime;
        }
        get time() {
            return this._time;
        }
        get startSpeed() {
            return this._startSpeed;
        }
        get random0() {
            return this._randoms0;
        }
        get random1() {
            return this._randoms1;
        }
        get simulationWorldPostion() {
            return this._simulationWorldPostion;
        }
        constructor(e, t, r, i, a, n, s, o, l, _, h, c, d, u) {
            super(), this._cornerTextureCoordinate = e, this._positionStartLifeTime = t, this._velocity = r, 
            this._startColor = i, this._startSize = a, this._startRotation0 = n, this._startRotation1 = s, 
            this._startRotation2 = o, this._startLifeTime = l, this._time = _, this._startSpeed = h, 
            this._randoms0 = this.random0, this._randoms1 = this.random1, this._simulationWorldPostion = u;
        }
    }
    class Ft {
        constructor(e, t) {
            this.center = e, this.radius = t;
        }
        toDefault() {
            this.center.toDefault(), this.radius = 0;
        }
        static createFromSubPoints(e, t, r, i) {
            if (null == e) throw new Error("points");
            if (t < 0 || t >= e.length) throw new Error("start" + t + "Must be in the range [0, " + (e.length - 1) + "]");
            if (r < 0 || t + r > e.length) throw new Error("count" + r + "Must be in the range <= " + e.length + "}");
            var a = t + r, s = Ft._tempVector3;
            s.x = 0, s.y = 0, s.z = 0;
            for (var o = t; o < a; ++o) n.add(e[o], s, s);
            var l = i.center;
            n.scale(s, 1 / r, l);
            var _ = 0;
            for (o = t; o < a; ++o) {
                var h = n.distanceSquared(l, e[o]);
                h > _ && (_ = h);
            }
            i.radius = Math.sqrt(_);
        }
        static createfromPoints(e, t) {
            if (null == e) throw new Error("points");
            Ft.createFromSubPoints(e, 0, e.length, t);
        }
        intersectsRayDistance(e) {
            return Ae.intersectsRayAndSphereRD(e, this);
        }
        intersectsRayPoint(e, t) {
            return Ae.intersectsRayAndSphereRP(e, this, t);
        }
        cloneTo(e) {
            var t = e;
            this.center.cloneTo(t.center), t.radius = this.radius;
        }
        clone() {
            var e = new Ft(new n(), 0);
            return this.cloneTo(e), e;
        }
    }
    Ft._tempVector3 = new n();
    class Bt {
        constructor(e) {
            this._temp = new Uint32Array(1), this.seeds = new Uint32Array(4), this.seeds[0] = e, 
            this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1, 
            this.seeds[3] = 1812433253 * this.seeds[2] + 1;
        }
        static getFloatFromInt(e) {
            return 1 / 8388607 * (8388607 & e);
        }
        static getByteFromInt(e) {
            return (8388607 & e) >>> 15;
        }
        get seed() {
            return this.seeds[0];
        }
        set seed(e) {
            this.seeds[0] = e, this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1, 
            this.seeds[3] = 1812433253 * this.seeds[2] + 1;
        }
        getUint() {
            return this._temp[0] = this.seeds[0] ^ this.seeds[0] << 11, this.seeds[0] = this.seeds[1], 
            this.seeds[1] = this.seeds[2], this.seeds[2] = this.seeds[3], this.seeds[3] = this.seeds[3] ^ this.seeds[3] >>> 19 ^ this._temp[0] ^ this._temp[0] >>> 8, 
            this.seeds[3];
        }
        getFloat() {
            return this.getUint(), (8388607 & this.seeds[3]) * (1 / 8388607);
        }
        getSignedFloat() {
            return 2 * this.getFloat() - 1;
        }
    }
    class Ut {
        constructor() {
            this._emissionRate = 10, this._destroyed = !1, this._bursts = [];
        }
        set emissionRate(e) {
            if (e < 0) throw new Error("ParticleBaseShape:emissionRate value must large or equal than 0.");
            this._emissionRate = e;
        }
        get emissionRate() {
            return this._emissionRate;
        }
        get destroyed() {
            return this._destroyed;
        }
        destroy() {
            this._bursts = null, this._destroyed = !0;
        }
        getBurstsCount() {
            return this._bursts.length;
        }
        getBurstByIndex(e) {
            return this._bursts[e];
        }
        addBurst(e) {
            var t = this._bursts.length;
            if (t > 0) for (var r = 0; r < t; r++) this._bursts[r].time > e.time && this._bursts.splice(r, 0, e);
            this._bursts.push(e);
        }
        removeBurst(e) {
            var t = this._bursts.indexOf(e);
            -1 !== t && this._bursts.splice(t, 1);
        }
        removeBurstByIndex(e) {
            this._bursts.splice(e, 1);
        }
        clearBurst() {
            this._bursts.length = 0;
        }
        cloneTo(e) {
            var t = e, r = t._bursts;
            r.length = this._bursts.length;
            for (var i = 0, a = this._bursts.length; i < a; i++) {
                var n = r[i];
                n ? this._bursts[i].cloneTo(n) : r[i] = this._bursts[i].clone();
            }
            t._emissionRate = this._emissionRate, t.enable = this.enable;
        }
        clone() {
            var e = new Ut();
            return this.cloneTo(e), e;
        }
    }
    class Gt {
        constructor() {}
        static _getStartLifetimeFromGradient(e, r) {
            for (var i = 1, a = e.gradientCount; i < a; i++) {
                var n = e.getKeyByIndex(i);
                if (n >= r) {
                    var s = e.getKeyByIndex(i - 1), o = (r - s) / (n - s);
                    return t.MathUtil.lerp(e.getValueByIndex(i - 1), e.getValueByIndex(i), o);
                }
            }
            throw new Error("ShurikenParticleData: can't get value foam startLifeTimeGradient.");
        }
        static _randomInvertRoationArray(e, t, r, i, a) {
            var n;
            i ? (i.seed = a[6], n = i.getFloat(), a[6] = i.seed) : n = Math.random(), n < r ? (t.x = -e.x, 
            t.y = -e.y, t.z = -e.z) : (t.x = e.x, t.y = e.y, t.z = e.z);
        }
        static _randomInvertRoation(e, t, r, i) {
            var a;
            return r ? (r.seed = i[6], a = r.getFloat(), i[6] = r.seed) : a = Math.random(), 
            a < t && (e = -e), e;
        }
        static create(e, r, i) {
            var n = e.autoRandomSeed, s = e._rand, o = e._randomSeeds;
            switch (e.startColorType) {
              case 0:
                var l = e.startColorConstant;
                Gt.startColor.x = l.x, Gt.startColor.y = l.y, Gt.startColor.z = l.z, Gt.startColor.w = l.w;
                break;

              case 2:
                n ? a.lerp(e.startColorConstantMin, e.startColorConstantMax, Math.random(), Gt.startColor) : (s.seed = o[3], 
                a.lerp(e.startColorConstantMin, e.startColorConstantMax, s.getFloat(), Gt.startColor), 
                o[3] = s.seed);
            }
            var _ = e.colorOverLifetime;
            if (_ && _.enable) {
                var h = _.color;
                switch (h.type) {
                  case 0:
                    Gt.startColor.x = Gt.startColor.x * h.constant.x, Gt.startColor.y = Gt.startColor.y * h.constant.y, 
                    Gt.startColor.z = Gt.startColor.z * h.constant.z, Gt.startColor.w = Gt.startColor.w * h.constant.w;
                    break;

                  case 2:
                    var c;
                    n ? c = Math.random() : (s.seed = o[10], c = s.getFloat(), o[10] = s.seed);
                    var d = h.constantMin, u = h.constantMax;
                    Gt.startColor.x = Gt.startColor.x * t.MathUtil.lerp(d.x, u.x, c), Gt.startColor.y = Gt.startColor.y * t.MathUtil.lerp(d.y, u.y, c), 
                    Gt.startColor.z = Gt.startColor.z * t.MathUtil.lerp(d.z, u.z, c), Gt.startColor.w = Gt.startColor.w * t.MathUtil.lerp(d.w, u.w, c);
                }
            }
            var f = Gt.startSize;
            switch (e.startSizeType) {
              case 0:
                if (e.threeDStartSize) {
                    var m = e.startSizeConstantSeparate;
                    f[0] = m.x, f[1] = m.y, f[2] = m.z;
                } else f[0] = f[1] = f[2] = e.startSizeConstant;
                break;

              case 2:
                if (e.threeDStartSize) {
                    var E = e.startSizeConstantMinSeparate, T = e.startSizeConstantMaxSeparate;
                    n ? (f[0] = t.MathUtil.lerp(E.x, T.x, Math.random()), f[1] = t.MathUtil.lerp(E.y, T.y, Math.random()), 
                    f[2] = t.MathUtil.lerp(E.z, T.z, Math.random())) : (s.seed = o[4], f[0] = t.MathUtil.lerp(E.x, T.x, s.getFloat()), 
                    f[1] = t.MathUtil.lerp(E.y, T.y, s.getFloat()), f[2] = t.MathUtil.lerp(E.z, T.z, s.getFloat()), 
                    o[4] = s.seed);
                } else n ? f[0] = f[1] = f[2] = t.MathUtil.lerp(e.startSizeConstantMin, e.startSizeConstantMax, Math.random()) : (s.seed = o[4], 
                f[0] = f[1] = f[2] = t.MathUtil.lerp(e.startSizeConstantMin, e.startSizeConstantMax, s.getFloat()), 
                o[4] = s.seed);
            }
            var g = e.sizeOverLifetime;
            if (g && g.enable && 1 === g.size.type) {
                var p, S = g.size;
                if (S.separateAxes) n ? (f[0] = f[0] * t.MathUtil.lerp(S.constantMinSeparate.x, S.constantMaxSeparate.x, Math.random()), 
                f[1] = f[1] * t.MathUtil.lerp(S.constantMinSeparate.y, S.constantMaxSeparate.y, Math.random()), 
                f[2] = f[2] * t.MathUtil.lerp(S.constantMinSeparate.z, S.constantMaxSeparate.z, Math.random())) : (s.seed = o[11], 
                f[0] = f[0] * t.MathUtil.lerp(S.constantMinSeparate.x, S.constantMaxSeparate.x, s.getFloat()), 
                f[1] = f[1] * t.MathUtil.lerp(S.constantMinSeparate.y, S.constantMaxSeparate.y, s.getFloat()), 
                f[2] = f[2] * t.MathUtil.lerp(S.constantMinSeparate.z, S.constantMaxSeparate.z, s.getFloat()), 
                o[11] = s.seed); else n ? p = t.MathUtil.lerp(S.constantMin, S.constantMax, Math.random()) : (s.seed = o[11], 
                p = t.MathUtil.lerp(S.constantMin, S.constantMax, s.getFloat()), o[11] = s.seed), 
                f[0] = f[0] * p, f[1] = f[1] * p, f[2] = f[2] * p;
            }
            var R = r.renderMode;
            if (1 !== R) switch (e.startRotationType) {
              case 0:
                if (e.threeDStartRotation) {
                    var v = e.startRotationConstantSeparate, I = Gt._tempVector30;
                    Gt._randomInvertRoationArray(v, I, e.randomizeRotationDirection, n ? null : s, o), 
                    Gt.startRotation[0] = I.x, Gt.startRotation[1] = I.y, Gt.startRotation[2] = 4 !== R ? -I.z : I.z;
                } else Gt.startRotation[0] = Gt._randomInvertRoation(e.startRotationConstant, e.randomizeRotationDirection, n ? null : s, o), 
                Gt.startRotation[1] = 0, Gt.startRotation[2] = 0;
                break;

              case 2:
                if (e.threeDStartRotation) {
                    var x = e.startRotationConstantMinSeparate, A = e.startRotationConstantMaxSeparate, D = Gt._tempVector30;
                    n ? (D.x = t.MathUtil.lerp(x.x, A.x, Math.random()), D.y = t.MathUtil.lerp(x.y, A.y, Math.random()), 
                    D.z = t.MathUtil.lerp(x.z, A.z, Math.random())) : (s.seed = o[5], D.x = t.MathUtil.lerp(x.x, A.x, s.getFloat()), 
                    D.y = t.MathUtil.lerp(x.y, A.y, s.getFloat()), D.z = t.MathUtil.lerp(x.z, A.z, s.getFloat()), 
                    o[5] = s.seed), Gt._randomInvertRoationArray(D, D, e.randomizeRotationDirection, n ? null : s, o), 
                    Gt.startRotation[0] = D.x, Gt.startRotation[1] = D.y, Gt.startRotation[2] = 4 !== R ? -D.z : D.z;
                } else n ? Gt.startRotation[0] = Gt._randomInvertRoation(t.MathUtil.lerp(e.startRotationConstantMin, e.startRotationConstantMax, Math.random()), e.randomizeRotationDirection, n ? null : s, o) : (s.seed = o[5], 
                Gt.startRotation[0] = Gt._randomInvertRoation(t.MathUtil.lerp(e.startRotationConstantMin, e.startRotationConstantMax, s.getFloat()), e.randomizeRotationDirection, n ? null : s, o), 
                o[5] = s.seed);
            }
            switch (e.startLifetimeType) {
              case 0:
                Gt.startLifeTime = e.startLifetimeConstant;
                break;

              case 1:
                Gt.startLifeTime = Gt._getStartLifetimeFromGradient(e.startLifeTimeGradient, e.emissionTime);
                break;

              case 2:
                n ? Gt.startLifeTime = t.MathUtil.lerp(e.startLifetimeConstantMin, e.startLifetimeConstantMax, Math.random()) : (s.seed = o[7], 
                Gt.startLifeTime = t.MathUtil.lerp(e.startLifetimeConstantMin, e.startLifetimeConstantMax, s.getFloat()), 
                o[7] = s.seed);
                break;

              case 3:
                var M = e.emissionTime;
                n ? Gt.startLifeTime = t.MathUtil.lerp(Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMin, M), Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMax, M), Math.random()) : (s.seed = o[7], 
                Gt.startLifeTime = t.MathUtil.lerp(Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMin, M), Gt._getStartLifetimeFromGradient(e.startLifeTimeGradientMax, M), s.getFloat()), 
                o[7] = s.seed);
            }
            var L = e.textureSheetAnimation;
            if (L && L.enable) {
                var C, y = L.tiles, O = y.x, N = y.y, P = 1 / O, b = 1 / N, V = L.startFrame;
                switch (V.type) {
                  case 0:
                    C = V.constant;
                    break;

                  case 1:
                    n ? C = t.MathUtil.lerp(V.constantMin, V.constantMax, Math.random()) : (s.seed = o[14], 
                    C = t.MathUtil.lerp(V.constantMin, V.constantMax, s.getFloat()), o[14] = s.seed);
                }
                var w = L.frame, F = L.cycles;
                switch (w.type) {
                  case 0:
                    C += w.constant * F;
                    break;

                  case 2:
                    n ? C += t.MathUtil.lerp(w.constantMin, w.constantMax, Math.random()) * F : (s.seed = o[15], 
                    C += t.MathUtil.lerp(w.constantMin, w.constantMax, s.getFloat()) * F, o[15] = s.seed);
                }
                var B = 0;
                switch (L.type) {
                  case 0:
                    B = Math.floor(C / O);
                    break;

                  case 1:
                    L.randomRow ? n ? B = Math.floor(Math.random() * N) : (s.seed = o[13], B = Math.floor(s.getFloat() * N), 
                    o[13] = s.seed) : B = L.rowIndex;
                }
                var U = Math.floor(C % O);
                Gt.startUVInfo = Gt.startUVInfo, Gt.startUVInfo[0] = P, Gt.startUVInfo[1] = b, Gt.startUVInfo[2] = U * P, 
                Gt.startUVInfo[3] = B * b;
            } else Gt.startUVInfo = Gt.startUVInfo, Gt.startUVInfo[0] = 1, Gt.startUVInfo[1] = 1, 
            Gt.startUVInfo[2] = 0, Gt.startUVInfo[3] = 0;
        }
    }
    Gt._tempVector30 = new n(), Gt.startColor = new a(), Gt.startSize = new Float32Array(3), 
    Gt.startRotation = new Float32Array(3), Gt.startUVInfo = new Float32Array(4);
    class zt extends ue {
        constructor(e) {
            super(), this._boundingSphere = null, this._boundingBox = null, this._boundingBoxCorners = null, 
            this._owner = null, this._ownerRender = null, this._vertices = null, this._floatCountPerVertex = 0, 
            this._startLifeTimeIndex = 0, this._timeIndex = 0, this._simulateUpdate = !1, this._firstActiveElement = 0, 
            this._firstNewElement = 0, this._firstFreeElement = 0, this._firstRetiredElement = 0, 
            this._drawCounter = 0, this._bufferMaxParticles = 0, this._emission = null, this._shape = null, 
            this._isEmitting = !1, this._isPlaying = !1, this._isPaused = !1, this._playStartDelay = 0, 
            this._frameRateTime = 0, this._emissionTime = 0, this._totalDelayTime = 0, this._burstsIndex = 0, 
            this._velocityOverLifetime = null, this._colorOverLifetime = null, this._sizeOverLifetime = null, 
            this._rotationOverLifetime = null, this._textureSheetAnimation = null, this._startLifetimeType = 0, 
            this._startLifetimeConstant = 0, this._startLifeTimeGradient = null, this._startLifetimeConstantMin = 0, 
            this._startLifetimeConstantMax = 0, this._startLifeTimeGradientMin = null, this._startLifeTimeGradientMax = null, 
            this._maxStartLifetime = 0, this._uvLength = new i(), this._vertexStride = 0, this._indexStride = 0, 
            this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = new ye(), 
            this._currentTime = 0, this._startUpdateLoopCount = 0, this._rand = null, this._randomSeeds = null, 
            this.duration = 0, this.looping = !1, this.prewarm = !1, this.startDelayType = 0, 
            this.startDelay = 0, this.startDelayMin = 0, this.startDelayMax = 0, this.startSpeedType = 0, 
            this.startSpeedConstant = 0, this.startSpeedConstantMin = 0, this.startSpeedConstantMax = 0, 
            this.threeDStartSize = !1, this.startSizeType = 0, this.startSizeConstant = 0, this.startSizeConstantSeparate = null, 
            this.startSizeConstantMin = 0, this.startSizeConstantMax = 0, this.startSizeConstantMinSeparate = null, 
            this.startSizeConstantMaxSeparate = null, this.threeDStartRotation = !1, this.startRotationType = 0, 
            this.startRotationConstant = 0, this.startRotationConstantSeparate = null, this.startRotationConstantMin = 0, 
            this.startRotationConstantMax = 0, this.startRotationConstantMinSeparate = null, 
            this.startRotationConstantMaxSeparate = null, this.randomizeRotationDirection = 0, 
            this.startColorType = 0, this.startColorConstant = new a(1, 1, 1, 1), this.startColorConstantMin = new a(0, 0, 0, 0), 
            this.startColorConstantMax = new a(1, 1, 1, 1), this.gravityModifier = 0, this.simulationSpace = 0, 
            this.simulationSpeed = 1, this.scaleMode = 0, this.playOnAwake = !1, this.randomSeed = null, 
            this.autoRandomSeed = !1, this.isPerformanceMode = !1, this._firstActiveElement = 0, 
            this._firstNewElement = 0, this._firstFreeElement = 0, this._firstRetiredElement = 0, 
            this._owner = e, this._ownerRender = e.particleRenderer, this._boundingBoxCorners = [], 
            this._boundingSphere = new Ft(new n(), Number.MAX_VALUE), this._boundingBox = new $e(new n(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new n(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE)), 
            this._currentTime = 0, this._isEmitting = !1, this._isPlaying = !1, this._isPaused = !1, 
            this._burstsIndex = 0, this._frameRateTime = 0, this._emissionTime = 0, this._totalDelayTime = 0, 
            this._simulateUpdate = !1, this._bufferMaxParticles = 1, this.duration = 5, this.looping = !0, 
            this.prewarm = !1, this.startDelayType = 0, this.startDelay = 0, this.startDelayMin = 0, 
            this.startDelayMax = 0, this._startLifetimeType = 0, this._startLifetimeConstant = 5, 
            this._startLifeTimeGradient = new mt(), this._startLifetimeConstantMin = 0, this._startLifetimeConstantMax = 5, 
            this._startLifeTimeGradientMin = new mt(), this._startLifeTimeGradientMax = new mt(), 
            this._maxStartLifetime = 5, this.startSpeedType = 0, this.startSpeedConstant = 5, 
            this.startSpeedConstantMin = 0, this.startSpeedConstantMax = 5, this.threeDStartSize = !1, 
            this.startSizeType = 0, this.startSizeConstant = 1, this.startSizeConstantSeparate = new n(1, 1, 1), 
            this.startSizeConstantMin = 0, this.startSizeConstantMax = 1, this.startSizeConstantMinSeparate = new n(0, 0, 0), 
            this.startSizeConstantMaxSeparate = new n(1, 1, 1), this.threeDStartRotation = !1, 
            this.startRotationType = 0, this.startRotationConstant = 0, this.startRotationConstantSeparate = new n(0, 0, 0), 
            this.startRotationConstantMin = 0, this.startRotationConstantMax = 0, this.startRotationConstantMinSeparate = new n(0, 0, 0), 
            this.startRotationConstantMaxSeparate = new n(0, 0, 0), this.gravityModifier = 0, 
            this.simulationSpace = 1, this.scaleMode = 0, this.playOnAwake = !0, this._rand = new Bt(0), 
            this.autoRandomSeed = !0, this.randomSeed = new Uint32Array(1), this._randomSeeds = new Uint32Array(zt._RANDOMOFFSET.length), 
            this.isPerformanceMode = !0, this._emission = new Ut(), this._emission.enable = !0;
        }
        get maxParticles() {
            return this._bufferMaxParticles - 1;
        }
        set maxParticles(e) {
            var t = e + 1;
            t !== this._bufferMaxParticles && (this._bufferMaxParticles = t, this._initBufferDatas());
        }
        get emission() {
            return this._emission;
        }
        get aliveParticleCount() {
            return this._firstNewElement >= this._firstRetiredElement ? this._firstNewElement - this._firstRetiredElement : this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;
        }
        get emissionTime() {
            return this._emissionTime > this.duration ? this.duration : this._emissionTime;
        }
        get shape() {
            return this._shape;
        }
        set shape(e) {
            this._shape !== e && (e && e.enable ? this._owner._render._shaderValues.addDefine(yt.SHADERDEFINE_SHAPE) : this._owner._render._shaderValues.removeDefine(yt.SHADERDEFINE_SHAPE), 
            this._shape = e);
        }
        get isAlive() {
            return !!(this._isPlaying || this.aliveParticleCount > 0);
        }
        get isEmitting() {
            return this._isEmitting;
        }
        get isPlaying() {
            return this._isPlaying;
        }
        get isPaused() {
            return this._isPaused;
        }
        get startLifetimeType() {
            return this._startLifetimeType;
        }
        set startLifetimeType(e) {
            var t, r;
            switch (this.startLifetimeType) {
              case 0:
                this._maxStartLifetime = this.startLifetimeConstant;
                break;

              case 1:
                this._maxStartLifetime = -Number.MAX_VALUE;
                var i = i;
                for (t = 0, r = i.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, i.getValueByIndex(t));
                break;

              case 2:
                this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                break;

              case 3:
                this._maxStartLifetime = -Number.MAX_VALUE;
                var a = a;
                for (t = 0, r = a.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, a.getValueByIndex(t));
                var n = n;
                for (t = 0, r = n.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, n.getValueByIndex(t));
            }
            this._startLifetimeType = e;
        }
        get startLifetimeConstant() {
            return this._startLifetimeConstant;
        }
        set startLifetimeConstant(e) {
            0 === this._startLifetimeType && (this._maxStartLifetime = e), this._startLifetimeConstant = e;
        }
        get startLifeTimeGradient() {
            return this._startLifeTimeGradient;
        }
        set startLifeTimeGradient(e) {
            if (1 === this._startLifetimeType) {
                this._maxStartLifetime = -Number.MAX_VALUE;
                for (var t = 0, r = e.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
            }
            this._startLifeTimeGradient = e;
        }
        get startLifetimeConstantMin() {
            return this._startLifetimeConstantMin;
        }
        set startLifetimeConstantMin(e) {
            2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(e, this._startLifetimeConstantMax)), 
            this._startLifetimeConstantMin = e;
        }
        get startLifetimeConstantMax() {
            return this._startLifetimeConstantMax;
        }
        set startLifetimeConstantMax(e) {
            2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, e)), 
            this._startLifetimeConstantMax = e;
        }
        get startLifeTimeGradientMin() {
            return this._startLifeTimeGradientMin;
        }
        set startLifeTimeGradientMin(e) {
            if (3 === this._startLifetimeType) {
                var t, r;
                for (this._maxStartLifetime = -Number.MAX_VALUE, t = 0, r = e.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
                for (t = 0, r = this._startLifeTimeGradientMax.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(t));
            }
            this._startLifeTimeGradientMin = e;
        }
        get startLifeTimeGradientMax() {
            return this._startLifeTimeGradientMax;
        }
        set startLifeTimeGradientMax(e) {
            if (3 === this._startLifetimeType) {
                var t, r;
                for (this._maxStartLifetime = -Number.MAX_VALUE, t = 0, r = this._startLifeTimeGradientMin.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(t));
                for (t = 0, r = e.gradientCount; t < r; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
            }
            this._startLifeTimeGradientMax = e;
        }
        get velocityOverLifetime() {
            return this._velocityOverLifetime;
        }
        set velocityOverLifetime(e) {
            var t = this._owner._render._shaderValues;
            if (e) {
                var r = e.velocity, i = r.type;
                if (e.enable) switch (i) {
                  case 0:
                    t.addDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);
                    break;

                  case 1:
                    t.addDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);
                    break;

                  case 2:
                    t.addDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);
                    break;

                  case 3:
                    t.addDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                } else t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE), 
                t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                switch (i) {
                  case 0:
                    t.setVector3(yt.VOLVELOCITYCONST, r.constant);
                    break;

                  case 1:
                    t.setBuffer(yt.VOLVELOCITYGRADIENTX, r.gradientX._elements), t.setBuffer(yt.VOLVELOCITYGRADIENTY, r.gradientY._elements), 
                    t.setBuffer(yt.VOLVELOCITYGRADIENTZ, r.gradientZ._elements);
                    break;

                  case 2:
                    t.setVector3(yt.VOLVELOCITYCONST, r.constantMin), t.setVector3(yt.VOLVELOCITYCONSTMAX, r.constantMax);
                    break;

                  case 3:
                    t.setBuffer(yt.VOLVELOCITYGRADIENTX, r.gradientXMin._elements), t.setBuffer(yt.VOLVELOCITYGRADIENTXMAX, r.gradientXMax._elements), 
                    t.setBuffer(yt.VOLVELOCITYGRADIENTY, r.gradientYMin._elements), t.setBuffer(yt.VOLVELOCITYGRADIENTYMAX, r.gradientYMax._elements), 
                    t.setBuffer(yt.VOLVELOCITYGRADIENTZ, r.gradientZMin._elements), t.setBuffer(yt.VOLVELOCITYGRADIENTZMAX, r.gradientZMax._elements);
                }
                t.setInt(yt.VOLSPACETYPE, e.space);
            } else t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE), 
            t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), t.removeDefine(yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
            this._velocityOverLifetime = e;
        }
        get colorOverLifetime() {
            return this._colorOverLifetime;
        }
        set colorOverLifetime(e) {
            var t = this._owner._render._shaderValues;
            if (e) {
                var r = e.color;
                if (e.enable) switch (r.type) {
                  case 1:
                    t.addDefine(yt.SHADERDEFINE_COLOROVERLIFETIME);
                    break;

                  case 3:
                    t.addDefine(yt.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                } else t.removeDefine(yt.SHADERDEFINE_COLOROVERLIFETIME), t.removeDefine(yt.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                switch (r.type) {
                  case 1:
                    var i = r.gradient;
                    t.setBuffer(yt.COLOROVERLIFEGRADIENTALPHAS, i._alphaElements), t.setBuffer(yt.COLOROVERLIFEGRADIENTCOLORS, i._rgbElements);
                    break;

                  case 3:
                    var a = r.gradientMin, n = r.gradientMax;
                    t.setBuffer(yt.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), t.setBuffer(yt.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements), 
                    t.setBuffer(yt.MAXCOLOROVERLIFEGRADIENTALPHAS, n._alphaElements), t.setBuffer(yt.MAXCOLOROVERLIFEGRADIENTCOLORS, n._rgbElements);
                }
            } else t.removeDefine(yt.SHADERDEFINE_COLOROVERLIFETIME), t.removeDefine(yt.SHADERDEFINE_RANDOMCOLOROVERLIFETIME), 
            t.setBuffer(yt.COLOROVERLIFEGRADIENTALPHAS, i._alphaElements), t.setBuffer(yt.COLOROVERLIFEGRADIENTCOLORS, i._rgbElements), 
            t.setBuffer(yt.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), t.setBuffer(yt.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements), 
            t.setBuffer(yt.MAXCOLOROVERLIFEGRADIENTALPHAS, n._alphaElements), t.setBuffer(yt.MAXCOLOROVERLIFEGRADIENTCOLORS, n._rgbElements);
            this._colorOverLifetime = e;
        }
        get sizeOverLifetime() {
            return this._sizeOverLifetime;
        }
        set sizeOverLifetime(e) {
            var t = this._owner._render._shaderValues;
            if (e) {
                var r = e.size, i = r.separateAxes, a = r.type;
                if (e.enable) switch (a) {
                  case 0:
                    i ? t.addDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE) : t.addDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMECURVE);
                    break;

                  case 2:
                    i ? t.addDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE) : t.addDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);
                } else t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMECURVE), t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE), 
                t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);
                switch (a) {
                  case 0:
                    i ? (t.setBuffer(yt.SOLSIZEGRADIENTX, r.gradientX._elements), t.setBuffer(yt.SOLSIZEGRADIENTY, r.gradientY._elements), 
                    t.setBuffer(yt.SOLSizeGradientZ, r.gradientZ._elements)) : t.setBuffer(yt.SOLSIZEGRADIENT, r.gradient._elements);
                    break;

                  case 2:
                    i ? (t.setBuffer(yt.SOLSIZEGRADIENTX, r.gradientXMin._elements), t.setBuffer(yt.SOLSIZEGRADIENTXMAX, r.gradientXMax._elements), 
                    t.setBuffer(yt.SOLSIZEGRADIENTY, r.gradientYMin._elements), t.setBuffer(yt.SOLSIZEGRADIENTYMAX, r.gradientYMax._elements), 
                    t.setBuffer(yt.SOLSizeGradientZ, r.gradientZMin._elements), t.setBuffer(yt.SOLSizeGradientZMAX, r.gradientZMax._elements)) : (t.setBuffer(yt.SOLSIZEGRADIENT, r.gradientMin._elements), 
                    t.setBuffer(yt.SOLSizeGradientMax, r.gradientMax._elements));
                }
            } else t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMECURVE), t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE), 
            t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), t.removeDefine(yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);
            this._sizeOverLifetime = e;
        }
        get rotationOverLifetime() {
            return this._rotationOverLifetime;
        }
        set rotationOverLifetime(e) {
            var t = this._owner._render._shaderValues;
            if (e) {
                var r = e.angularVelocity;
                if (!r) return;
                var i = r.separateAxes, a = r.type;
                if (e.enable) switch (i ? t.addDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE) : t.addDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIME), 
                a) {
                  case 0:
                    t.addDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);
                    break;

                  case 1:
                    t.addDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);
                    break;

                  case 2:
                    t.addDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);
                    break;

                  case 3:
                    t.addDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                } else t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIME), t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE), 
                t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE), 
                t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                switch (a) {
                  case 0:
                    i ? t.setVector3(yt.ROLANGULARVELOCITYCONSTSEPRARATE, r.constantSeparate) : t.setNumber(yt.ROLANGULARVELOCITYCONST, r.constant);
                    break;

                  case 1:
                    i ? (t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTX, r.gradientX._elements), t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTY, r.gradientY._elements), 
                    t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTZ, r.gradientZ._elements)) : t.setBuffer(yt.ROLANGULARVELOCITYGRADIENT, r.gradient._elements);
                    break;

                  case 2:
                    i ? (t.setVector3(yt.ROLANGULARVELOCITYCONSTSEPRARATE, r.constantMinSeparate), t.setVector3(yt.ROLANGULARVELOCITYCONSTMAXSEPRARATE, r.constantMaxSeparate)) : (t.setNumber(yt.ROLANGULARVELOCITYCONST, r.constantMin), 
                    t.setNumber(yt.ROLANGULARVELOCITYCONSTMAX, r.constantMax));
                    break;

                  case 3:
                    i ? (t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTX, r.gradientXMin._elements), t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTXMAX, r.gradientXMax._elements), 
                    t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTY, r.gradientYMin._elements), t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTYMAX, r.gradientYMax._elements), 
                    t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTZ, r.gradientZMin._elements), t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTZMAX, r.gradientZMax._elements)) : (t.setBuffer(yt.ROLANGULARVELOCITYGRADIENT, r.gradientMin._elements), 
                    t.setBuffer(yt.ROLANGULARVELOCITYGRADIENTMAX, r.gradientMax._elements));
                }
            } else t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIME), t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE), 
            t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE), 
            t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), t.removeDefine(yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
            this._rotationOverLifetime = e;
        }
        get textureSheetAnimation() {
            return this._textureSheetAnimation;
        }
        set textureSheetAnimation(e) {
            var t = this._owner._render._shaderValues;
            if (e) {
                var r = e.frame, i = r.type;
                if (e.enable) switch (i) {
                  case 1:
                    t.addDefine(yt.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);
                    break;

                  case 3:
                    t.addDefine(yt.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                } else t.removeDefine(yt.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), t.removeDefine(yt.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                if (1 === i || 3 === i) {
                    t.setNumber(yt.TEXTURESHEETANIMATIONCYCLES, e.cycles);
                    var a = e.tiles, n = this._uvLength;
                    n.x = 1 / a.x, n.y = 1 / a.y, t.setVector2(yt.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);
                }
                switch (i) {
                  case 1:
                    t.setBuffer(yt.TEXTURESHEETANIMATIONGRADIENTUVS, r.frameOverTimeData._elements);
                    break;

                  case 3:
                    t.setBuffer(yt.TEXTURESHEETANIMATIONGRADIENTUVS, r.frameOverTimeDataMin._elements), 
                    t.setBuffer(yt.TEXTURESHEETANIMATIONGRADIENTMAXUVS, r.frameOverTimeDataMax._elements);
                }
            } else t.removeDefine(yt.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), t.removeDefine(yt.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
            this._textureSheetAnimation = e;
        }
        _getVertexBuffer(e = 0) {
            return 0 === e ? this._vertexBuffer : null;
        }
        _getIndexBuffer() {
            return this._indexBuffer;
        }
        _generateBoundingSphere() {
            var e = this._boundingSphere.center;
            e.x = 0, e.y = 0, e.z = 0, this._boundingSphere.radius = Number.MAX_VALUE;
        }
        _generateBoundingBox() {
            var e, t, r, i, a, s, o, l, _, h = this._owner.particleRenderer, c = this._boundingBox.min, d = this._boundingBox.max;
            switch (this.startLifetimeType) {
              case 0:
                r = this.startLifetimeConstant;
                break;

              case 1:
                r = -Number.MAX_VALUE;
                var u = u;
                for (e = 0, t = u.gradientCount; e < t; e++) r = Math.max(r, u.getValueByIndex(e));
                break;

              case 2:
                r = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                break;

              case 3:
                r = -Number.MAX_VALUE;
                var f = f;
                for (e = 0, t = f.gradientCount; e < t; e++) r = Math.max(r, f.getValueByIndex(e));
                var m = m;
                for (e = 0, t = m.gradientCount; e < t; e++) r = Math.max(r, m.getValueByIndex(e));
            }
            switch (this.startSpeedType) {
              case 0:
                i = a = this.startSpeedConstant;
                break;

              case 1:
                break;

              case 2:
                i = this.startLifetimeConstantMin, a = this.startLifetimeConstantMax;
            }
            this._shape && this._shape.enable || (s = o = n._ZERO, l = n._ZERO, _ = n._UnitZ);
            var E, T, g = new n(l.x * i, l.y * i, l.z * i), p = new n(_.x * a, _.y * a, _.z * a);
            if (this._velocityOverLifetime && this._velocityOverLifetime.enable) {
                var S = this._velocityOverLifetime.velocity;
                switch (S.type) {
                  case 0:
                    S.constant;
                    break;

                  case 1:
                    new n(S.gradientX.getAverageValue(), S.gradientY.getAverageValue(), S.gradientZ.getAverageValue());
                    break;

                  case 2:
                    S.constantMin, S.constantMax;
                    break;

                  case 3:
                    new n(S.gradientXMin.getAverageValue(), S.gradientYMin.getAverageValue(), S.gradientZMin.getAverageValue()), 
                    new n(S.gradientXMax.getAverageValue(), S.gradientYMax.getAverageValue(), S.gradientZMax.getAverageValue());
                }
            }
            var R, v, I, x, A = this._owner.transform, D = A.position, M = zt._tempVector39, L = h.renderMode;
            switch (this.scaleMode) {
              case 0:
                var C = A.getWorldLossyScale();
                E = C, M.x = C.x, M.y = C.z, M.z = C.y, 1 === L && (T = C);
                break;

              case 1:
                var y = A.localScale;
                E = y, M.x = y.x, M.y = y.z, M.z = y.y, 1 === L && (T = y);
                break;

              case 2:
                E = A.getWorldLossyScale(), M.x = M.y = M.z = 1, 1 === L && (T = n._ONE);
            }
            switch (this._velocityOverLifetime && this._velocityOverLifetime.enable || (R = new n(g.x * r, g.y * r, g.z * r), 
            v = new n(p.x * r, p.y * r, p.z * r), 2 != this.scaleMode ? (n.add(s, R, c), n.multiply(E, c, c), 
            n.add(o, v, d), n.multiply(E, d, d)) : (n.multiply(E, s, c), n.add(c, R, c), n.multiply(E, o, d), 
            n.add(d, v, d))), this.simulationSpace) {
              case 0:
                break;

              case 1:
                n.add(c, D, c), n.add(d, D, d);
            }
            switch (this.startSizeType) {
              case 0:
                if (this.threeDStartSize) {
                    var O = O;
                    I = Math.max(O.x, O.y), 1 === L && (x = O.y);
                } else I = this.startSizeConstant, 1 === L && (x = this.startSizeConstant);
                break;

              case 1:
                break;

              case 2:
                if (this.threeDStartSize) {
                    var N = N;
                    I = Math.max(N.x, N.y), 1 === L && (x = N.y);
                } else I = this.startSizeConstantMax, 1 === L && (x = this.startSizeConstantMax);
            }
            if (this._sizeOverLifetime && this._sizeOverLifetime.enable) {
                this._sizeOverLifetime.size;
                I *= this._sizeOverLifetime.size.getMaxSizeInGradient();
            }
            var P, b, V = zt._tempVector30;
            switch (L) {
              case 0:
                P = I * zt.halfKSqrtOf2, n.scale(M, I, V), n.subtract(c, V, c), n.add(d, V, d);
                break;

              case 1:
                var w = zt._tempVector31, F = zt._tempVector32, B = zt._tempVector33, U = zt._tempVector34;
                this._velocityOverLifetime && this._velocityOverLifetime.enable || (n.multiply(T, p, F), 
                n.multiply(T, g, B));
                var G = x * h.stretchedBillboardLengthScale, z = n.scalarLength(F) * h.stretchedBillboardSpeedScale + G, H = n.scalarLength(B) * h.stretchedBillboardSpeedScale + G, W = zt._tempVector35, k = zt._tempVector36;
                n.normalize(F, W), n.scale(W, z, U), n.subtract(v, U, U), n.normalize(B, k), n.scale(k, H, w), 
                n.add(R, w, w), P = I * zt.halfKSqrtOf2, n.scale(M, P, V);
                var X = zt._tempVector37, Y = zt._tempVector38;
                n.scale(W, .5, X), n.scale(k, .5, Y), n.multiply(X, M, X), n.multiply(Y, M, Y), 
                n.add(c, Y, c), n.min(c, U, c), n.subtract(c, V, c), n.subtract(d, X, d), n.max(d, w, d), 
                n.add(d, V, d);
                break;

              case 2:
                b = .5 * (I *= Math.cos(.7853981633974483)), V.x = M.x * b, V.y = M.z * b, n.subtract(c, V, c), 
                n.add(d, V, d);
                break;

              case 3:
                b = .5 * (I *= Math.cos(.7853981633974483)), n.scale(M, b, V), n.subtract(c, V, c), 
                n.add(d, V, d);
            }
            this._boundingBox.getCorners(this._boundingBoxCorners);
        }
        _updateEmission() {
            if (this.isAlive) if (this._simulateUpdate) this._simulateUpdate = !1; else {
                var e = this._startUpdateLoopCount === t.Stat.loopCount || this._isPaused ? 0 : this._owner._scene.timer._delta / 1e3;
                e = Math.min(zt._maxElapsedTime, e * this.simulationSpeed), this._updateParticles(e);
            }
        }
        _updateParticles(e) {
            (4 !== this._ownerRender.renderMode || this._ownerRender.mesh) && (this._currentTime += e, 
            this._retireActiveParticles(), this._freeRetiredParticles(), this._totalDelayTime += e, 
            this._totalDelayTime < this._playStartDelay || this._emission.enable && this._isEmitting && !this._isPaused && this._advanceTime(e, this._currentTime));
        }
        _updateParticlesSimulationRestart(e) {
            this._firstActiveElement = 0, this._firstNewElement = 0, this._firstFreeElement = 0, 
            this._firstRetiredElement = 0, this._burstsIndex = 0, this._frameRateTime = e, this._emissionTime = 0, 
            this._totalDelayTime = 0, this._currentTime = e;
            var t = e;
            t < this._playStartDelay ? this._totalDelayTime = t : this._emission.enable && this._advanceTime(e, e);
        }
        _retireActiveParticles() {
            for (;this._firstActiveElement != this._firstNewElement; ) {
                var e = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride, t = e + this._timeIndex;
                if (this._currentTime - this._vertices[t] + 1e-4 < this._vertices[e + this._startLifeTimeIndex]) break;
                this._vertices[t] = this._drawCounter, this._firstActiveElement++, this._firstActiveElement >= this._bufferMaxParticles && (this._firstActiveElement = 0);
            }
        }
        _freeRetiredParticles() {
            for (;this._firstRetiredElement != this._firstActiveElement; ) {
                var e = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];
                if (this.isPerformanceMode && e < 3) break;
                this._firstRetiredElement++, this._firstRetiredElement >= this._bufferMaxParticles && (this._firstRetiredElement = 0);
            }
        }
        _burst(e, r) {
            for (var i = 0, a = this._emission._bursts, n = a.length; this._burstsIndex < n; this._burstsIndex++) {
                var s, o = a[this._burstsIndex], l = o.time;
                if (!(e <= l && l < r)) break;
                this.autoRandomSeed ? s = t.MathUtil.lerp(o.minCount, o.maxCount, Math.random()) : (this._rand.seed = this._randomSeeds[0], 
                s = t.MathUtil.lerp(o.minCount, o.maxCount, this._rand.getFloat()), this._randomSeeds[0] = this._rand.seed), 
                i += s;
            }
            return i;
        }
        _advanceTime(e, t) {
            var r, i = this._emissionTime;
            this._emissionTime += e;
            var a = 0;
            if (this._emissionTime > this.duration) {
                if (!this.looping) {
                    for (a = Math.min(this.maxParticles - this.aliveParticleCount, a), r = 0; r < a; r++) this.emit(t);
                    return this._isPlaying = !1, void this.stop();
                }
                a += this._burst(i, this._emissionTime), this._emissionTime -= this.duration, this._burstsIndex = 0, 
                a += this._burst(0, this._emissionTime);
            } else a += this._burst(i, this._emissionTime);
            for (a = Math.min(this.maxParticles - this.aliveParticleCount, a), r = 0; r < a; r++) this.emit(t);
            var n = this.emission.emissionRate;
            if (n > 0) {
                var s = 1 / n;
                for (this._frameRateTime += s, this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime; this._frameRateTime <= t && this.emit(this._frameRateTime); ) this._frameRateTime += s;
                this._frameRateTime = Math.floor(t / s) * s;
            }
        }
        _initBufferDatas() {
            this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy());
            var r = t.LayaGL.instance, i = this._ownerRender, a = i.renderMode;
            if (-1 !== a && this.maxParticles > 0) {
                var n, s, o, l, _, h, c, d = 0, u = 0, f = i.mesh;
                if (4 === a) {
                    if (f) {
                        c = wt.vertexDeclaration, this._floatCountPerVertex = c.vertexStride / 4, this._startLifeTimeIndex = 12, 
                        this._timeIndex = 16, this._vertexStride = f._vertexCount;
                        var m = this._bufferMaxParticles * this._vertexStride, E = m % 65535;
                        if (Math.floor(m / 65535) + 1 > 1) throw new Error("ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.");
                        d = c.vertexStride * E, this._vertexBuffer = new fe(d, r.DYNAMIC_DRAW), this._vertexBuffer.vertexDeclaration = c, 
                        this._vertices = new Float32Array(this._floatCountPerVertex * E), this._indexStride = f._indexBuffer.indexCount;
                        var T = f._indexBuffer.getData(), g = this._bufferMaxParticles * this._indexStride;
                        for (this._indexBuffer = new be(e.IndexFormat.UInt16, g, r.STATIC_DRAW), n = new Uint16Array(g), 
                        u = d + 2 * g, _ = 0, s = 0; s < this._bufferMaxParticles; s++) {
                            var p = s * this._vertexStride;
                            for (o = 0, l = T.length; o < l; o++) n[_++] = p + T[o];
                        }
                        this._indexBuffer.setData(n), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
                        this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
                    }
                } else {
                    for (c = Vt.vertexDeclaration, this._floatCountPerVertex = c.vertexStride / 4, this._startLifeTimeIndex = 7, 
                    this._timeIndex = 11, this._vertexStride = 4, d = c.vertexStride * this._bufferMaxParticles * this._vertexStride, 
                    this._vertexBuffer = new fe(d, r.DYNAMIC_DRAW), this._vertexBuffer.vertexDeclaration = c, 
                    this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride), 
                    s = 0; s < this._bufferMaxParticles; s++) h = s * this._floatCountPerVertex * this._vertexStride, 
                    this._vertices[h] = -.5, this._vertices[h + 1] = -.5, this._vertices[h + 2] = 0, 
                    this._vertices[h + 3] = 1, h += this._floatCountPerVertex, this._vertices[h] = .5, 
                    this._vertices[h + 1] = -.5, this._vertices[h + 2] = 1, this._vertices[h + 3] = 1, 
                    h += this._floatCountPerVertex, this._vertices[h] = .5, this._vertices[h + 1] = .5, 
                    this._vertices[h + 2] = 1, this._vertices[h + 3] = 0, h += this._floatCountPerVertex, 
                    this._vertices[h] = -.5, this._vertices[h + 1] = .5, this._vertices[h + 2] = 0, 
                    this._vertices[h + 3] = 0;
                    for (this._indexStride = 6, this._indexBuffer = new be(e.IndexFormat.UInt16, 6 * this._bufferMaxParticles, r.STATIC_DRAW), 
                    n = new Uint16Array(6 * this._bufferMaxParticles), s = 0; s < this._bufferMaxParticles; s++) {
                        _ = 6 * s;
                        var S = s * this._vertexStride, R = S + 2;
                        n[_++] = S, n[_++] = R, n[_++] = S + 1, n[_++] = S, n[_++] = S + 3, n[_++] = R;
                    }
                    this._indexBuffer.setData(n), u = d + 6 * this._bufferMaxParticles * 2, this._bufferState.bind(), 
                    this._bufferState.applyVertexBuffer(this._vertexBuffer), this._bufferState.applyIndexBuffer(this._indexBuffer), 
                    this._bufferState.unBind();
                }
                t.Resource._addMemory(u, u);
            }
        }
        destroy() {
            super.destroy();
            var e = this._vertexBuffer._byteLength + 2 * this._indexBuffer.indexCount;
            t.Resource._addMemory(-e, -e), this._bufferState.destroy(), this._vertexBuffer.destroy(), 
            this._indexBuffer.destroy(), this._emission.destroy(), this._bufferState = null, 
            this._vertexBuffer = null, this._indexBuffer = null, this._owner = null, this._vertices = null, 
            this._indexBuffer = null, this._emission = null, this._shape = null, this.startLifeTimeGradient = null, 
            this.startLifeTimeGradientMin = null, this.startLifeTimeGradientMax = null, this.startSizeConstantSeparate = null, 
            this.startSizeConstantMinSeparate = null, this.startSizeConstantMaxSeparate = null, 
            this.startRotationConstantSeparate = null, this.startRotationConstantMinSeparate = null, 
            this.startRotationConstantMaxSeparate = null, this.startColorConstant = null, this.startColorConstantMin = null, 
            this.startColorConstantMax = null, this._velocityOverLifetime = null, this._colorOverLifetime = null, 
            this._sizeOverLifetime = null, this._rotationOverLifetime = null, this._textureSheetAnimation = null;
        }
        emit(e) {
            var t = zt._tempPosition, r = zt._tempDirection;
            return this._shape && this._shape.enable ? this.autoRandomSeed ? this._shape.generatePositionAndDirection(t, r) : this._shape.generatePositionAndDirection(t, r, this._rand, this._randomSeeds) : (t.x = t.y = t.z = 0, 
            r.x = r.y = 0, r.z = 1), this.addParticle(t, r, e);
        }
        addParticle(e, r, i) {
            n.normalize(r, r);
            var a = this._firstFreeElement + 1;
            if (a >= this._bufferMaxParticles && (a = 0), a === this._firstRetiredElement) return !1;
            var s, o, l, _, h, c, d, u, f, m, E = this._owner.transform;
            if (Gt.create(this, this._ownerRender, E), this._currentTime - i >= Gt.startLifeTime) return !0;
            switch (0 == this.simulationSpace && (s = E.position, o = E.rotation), this.startSpeedType) {
              case 0:
                l = this.startSpeedConstant;
                break;

              case 2:
                this.autoRandomSeed ? l = t.MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, Math.random()) : (this._rand.seed = this._randomSeeds[8], 
                l = t.MathUtil.lerp(this.startSpeedConstantMin, this.startSpeedConstantMax, this._rand.getFloat()), 
                this._randomSeeds[8] = this._rand.seed);
            }
            var T = this._velocityOverLifetime && this._velocityOverLifetime.enable;
            if (T) {
                var g = this._velocityOverLifetime.velocity.type;
                2 === g || 3 === g ? this.autoRandomSeed ? (_ = Math.random(), h = Math.random(), 
                c = Math.random()) : (this._rand.seed = this._randomSeeds[9], _ = this._rand.getFloat(), 
                h = this._rand.getFloat(), c = this._rand.getFloat(), this._randomSeeds[9] = this._rand.seed) : T = !1;
            } else T = !1;
            var p = this._colorOverLifetime && this._colorOverLifetime.enable;
            p ? 3 === this._colorOverLifetime.color.type ? this.autoRandomSeed ? d = Math.random() : (this._rand.seed = this._randomSeeds[10], 
            d = this._rand.getFloat(), this._randomSeeds[10] = this._rand.seed) : p = !1 : p = !1;
            var S = this._sizeOverLifetime && this._sizeOverLifetime.enable;
            S ? 3 === this._sizeOverLifetime.size.type ? this.autoRandomSeed ? u = Math.random() : (this._rand.seed = this._randomSeeds[11], 
            u = this._rand.getFloat(), this._randomSeeds[11] = this._rand.seed) : S = !1 : S = !1;
            var R = this._rotationOverLifetime && this._rotationOverLifetime.enable;
            if (R) {
                var v = this._rotationOverLifetime.angularVelocity.type;
                2 === v || 3 === v ? this.autoRandomSeed ? f = Math.random() : (this._rand.seed = this._randomSeeds[12], 
                f = this._rand.getFloat(), this._randomSeeds[12] = this._rand.seed) : R = !1;
            } else R = !1;
            var I = this._textureSheetAnimation && this._textureSheetAnimation.enable;
            I ? 3 === this._textureSheetAnimation.frame.type ? this.autoRandomSeed ? m = Math.random() : (this._rand.seed = this._randomSeeds[15], 
            m = this._rand.getFloat(), this._randomSeeds[15] = this._rand.seed) : I = !1 : I = !1;
            var x, A, D, M, L, C, y = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride, O = Gt.startUVInfo[0], N = Gt.startUVInfo[1], P = Gt.startUVInfo[2], b = Gt.startUVInfo[3], V = this._ownerRender;
            if (4 === V.renderMode) {
                var w = V.mesh._vertexBuffer;
                x = w.getFloat32Data();
                var F = w.vertexDeclaration;
                D = F.getVertexElementByUsage(ge.MESH_POSITION0)._offset / 4;
                var B = F.getVertexElementByUsage(ge.MESH_COLOR0);
                M = B ? B._offset / 4 : -1;
                var U = F.getVertexElementByUsage(ge.MESH_TEXTURECOORDINATE0);
                L = U ? U._offset / 4 : -1, A = F.vertexStride / 4, C = 0;
            } else {
                this._vertices[y + 2] = P, this._vertices[y + 3] = b + N;
                var G = y + this._floatCountPerVertex;
                this._vertices[G + 2] = P + O, this._vertices[G + 3] = b + N;
                var z = G + this._floatCountPerVertex;
                this._vertices[z + 2] = P + O, this._vertices[z + 3] = b;
                var H = z + this._floatCountPerVertex;
                this._vertices[H + 2] = P, this._vertices[H + 3] = b;
            }
            for (var W = y, k = y + this._floatCountPerVertex * this._vertexStride; W < k; W += this._floatCountPerVertex) {
                var X;
                if (4 === V.renderMode) {
                    X = W;
                    var Y = A * C++, Z = Y + D;
                    this._vertices[X++] = x[Z++], this._vertices[X++] = x[Z++], this._vertices[X++] = x[Z], 
                    -1 === M ? (this._vertices[X++] = 1, this._vertices[X++] = 1, this._vertices[X++] = 1, 
                    this._vertices[X++] = 1) : (Z = Y + M, this._vertices[X++] = x[Z++], this._vertices[X++] = x[Z++], 
                    this._vertices[X++] = x[Z++], this._vertices[X++] = x[Z]), -1 === L ? (this._vertices[X++] = 0, 
                    this._vertices[X++] = 0) : (Z = Y + L, this._vertices[X++] = P + x[Z++] * O, this._vertices[X++] = b + x[Z] * N);
                } else X = W + 4;
                switch (this._vertices[X++] = e.x, this._vertices[X++] = e.y, this._vertices[X++] = e.z, 
                this._vertices[X++] = Gt.startLifeTime, this._vertices[X++] = r.x, this._vertices[X++] = r.y, 
                this._vertices[X++] = r.z, this._vertices[X++] = i, this._vertices[X++] = Gt.startColor.x, 
                this._vertices[X++] = Gt.startColor.y, this._vertices[X++] = Gt.startColor.z, this._vertices[X++] = Gt.startColor.w, 
                this._vertices[X++] = Gt.startSize[0], this._vertices[X++] = Gt.startSize[1], this._vertices[X++] = Gt.startSize[2], 
                this._vertices[X++] = Gt.startRotation[0], this._vertices[X++] = Gt.startRotation[1], 
                this._vertices[X++] = Gt.startRotation[2], this._vertices[X++] = l, p && (this._vertices[X + 1] = d), 
                S && (this._vertices[X + 2] = u), R && (this._vertices[X + 3] = f), I && (this._vertices[X + 4] = m), 
                T && (this._vertices[X + 5] = _, this._vertices[X + 6] = h, this._vertices[X + 7] = c), 
                this.simulationSpace) {
                  case 0:
                    X += 8, this._vertices[X++] = s.x, this._vertices[X++] = s.y, this._vertices[X++] = s.z, 
                    this._vertices[X++] = o.x, this._vertices[X++] = o.y, this._vertices[X++] = o.z, 
                    this._vertices[X++] = o.w;
                    break;

                  case 1:
                    break;

                  default:
                    throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
                }
            }
            return this._firstFreeElement = a, !0;
        }
        addNewParticlesToVertexBuffer() {
            var e, t = this._vertexStride * this._floatCountPerVertex * 4;
            this._firstNewElement < this._firstFreeElement ? (e = this._firstNewElement * t, 
            this._vertexBuffer.setData(this._vertices.buffer, e, e, (this._firstFreeElement - this._firstNewElement) * t)) : (e = this._firstNewElement * t, 
            this._vertexBuffer.setData(this._vertices.buffer, e, e, (this._bufferMaxParticles - this._firstNewElement) * t), 
            this._firstFreeElement > 0 && this._vertexBuffer.setData(this._vertices.buffer, 0, 0, this._firstFreeElement * t)), 
            this._firstNewElement = this._firstFreeElement;
        }
        _getType() {
            return zt._type;
        }
        _prepareRender(e) {
            return this._updateEmission(), this._firstNewElement != this._firstFreeElement && this.addNewParticlesToVertexBuffer(), 
            this._drawCounter++, this._firstActiveElement != this._firstFreeElement;
        }
        _render(e) {
            var r;
            this._bufferState.bind();
            var i = t.LayaGL.instance;
            this._firstActiveElement < this._firstFreeElement ? (r = (this._firstFreeElement - this._firstActiveElement) * this._indexStride, 
            i.drawElements(i.TRIANGLES, r, i.UNSIGNED_SHORT, 2 * this._firstActiveElement * this._indexStride), 
            t.Stat.trianglesFaces += r / 3, t.Stat.renderBatches++) : (r = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride, 
            i.drawElements(i.TRIANGLES, r, i.UNSIGNED_SHORT, 2 * this._firstActiveElement * this._indexStride), 
            t.Stat.trianglesFaces += r / 3, t.Stat.renderBatches++, this._firstFreeElement > 0 && (r = this._firstFreeElement * this._indexStride, 
            i.drawElements(i.TRIANGLES, r, i.UNSIGNED_SHORT, 0), t.Stat.trianglesFaces += r / 3, 
            t.Stat.renderBatches++));
        }
        play() {
            if (this._burstsIndex = 0, this._isEmitting = !0, this._isPlaying = !0, this._isPaused = !1, 
            this._emissionTime = 0, this._totalDelayTime = 0, !this.autoRandomSeed) for (var e = 0, r = this._randomSeeds.length; e < r; e++) this._randomSeeds[e] = this.randomSeed[0] + zt._RANDOMOFFSET[e];
            switch (this.startDelayType) {
              case 0:
                this._playStartDelay = this.startDelay;
                break;

              case 1:
                this.autoRandomSeed ? this._playStartDelay = t.MathUtil.lerp(this.startDelayMin, this.startDelayMax, Math.random()) : (this._rand.seed = this._randomSeeds[2], 
                this._playStartDelay = t.MathUtil.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat()), 
                this._randomSeeds[2] = this._rand.seed);
                break;

              default:
                throw new Error("Utils3D: startDelayType is invalid.");
            }
            this._frameRateTime = this._currentTime + this._playStartDelay, this._startUpdateLoopCount = t.Stat.loopCount;
        }
        pause() {
            this._isPaused = !0;
        }
        simulate(e, t = !0) {
            this._simulateUpdate = !0, t ? this._updateParticlesSimulationRestart(e) : (this._isPaused = !1, 
            this._updateParticles(e)), this.pause();
        }
        stop() {
            this._burstsIndex = 0, this._isEmitting = !1, this._emissionTime = 0;
        }
        cloneTo(e) {
            var t = e;
            t.duration = this.duration, t.looping = this.looping, t.prewarm = this.prewarm, 
            t.startDelayType = this.startDelayType, t.startDelay = this.startDelay, t.startDelayMin = this.startDelayMin, 
            t.startDelayMax = this.startDelayMax, t._maxStartLifetime = this._maxStartLifetime, 
            t.startLifetimeType = this.startLifetimeType, t.startLifetimeConstant = this.startLifetimeConstant, 
            this.startLifeTimeGradient.cloneTo(t.startLifeTimeGradient), t.startLifetimeConstantMin = this.startLifetimeConstantMin, 
            t.startLifetimeConstantMax = this.startLifetimeConstantMax, this.startLifeTimeGradientMin.cloneTo(t.startLifeTimeGradientMin), 
            this.startLifeTimeGradientMax.cloneTo(t.startLifeTimeGradientMax), t.startSpeedType = this.startSpeedType, 
            t.startSpeedConstant = this.startSpeedConstant, t.startSpeedConstantMin = this.startSpeedConstantMin, 
            t.startSpeedConstantMax = this.startSpeedConstantMax, t.threeDStartSize = this.threeDStartSize, 
            t.startSizeType = this.startSizeType, t.startSizeConstant = this.startSizeConstant, 
            this.startSizeConstantSeparate.cloneTo(t.startSizeConstantSeparate), t.startSizeConstantMin = this.startSizeConstantMin, 
            t.startSizeConstantMax = this.startSizeConstantMax, this.startSizeConstantMinSeparate.cloneTo(t.startSizeConstantMinSeparate), 
            this.startSizeConstantMaxSeparate.cloneTo(t.startSizeConstantMaxSeparate), t.threeDStartRotation = this.threeDStartRotation, 
            t.startRotationType = this.startRotationType, t.startRotationConstant = this.startRotationConstant, 
            this.startRotationConstantSeparate.cloneTo(t.startRotationConstantSeparate), t.startRotationConstantMin = this.startRotationConstantMin, 
            t.startRotationConstantMax = this.startRotationConstantMax, this.startRotationConstantMinSeparate.cloneTo(t.startRotationConstantMinSeparate), 
            this.startRotationConstantMaxSeparate.cloneTo(t.startRotationConstantMaxSeparate), 
            t.randomizeRotationDirection = this.randomizeRotationDirection, t.startColorType = this.startColorType, 
            this.startColorConstant.cloneTo(t.startColorConstant), this.startColorConstantMin.cloneTo(t.startColorConstantMin), 
            this.startColorConstantMax.cloneTo(t.startColorConstantMax), t.gravityModifier = this.gravityModifier, 
            t.simulationSpace = this.simulationSpace, t.scaleMode = this.scaleMode, t.playOnAwake = this.playOnAwake, 
            t.autoRandomSeed = this.autoRandomSeed, t.randomSeed[0] = this.randomSeed[0], t.maxParticles = this.maxParticles, 
            this._emission && (t._emission = this._emission.clone()), this.shape && (t.shape = this.shape.clone()), 
            this.velocityOverLifetime && (t.velocityOverLifetime = this.velocityOverLifetime.clone()), 
            this.colorOverLifetime && (t.colorOverLifetime = this.colorOverLifetime.clone()), 
            this.sizeOverLifetime && (t.sizeOverLifetime = this.sizeOverLifetime.clone()), this.rotationOverLifetime && (t.rotationOverLifetime = this.rotationOverLifetime.clone()), 
            this.textureSheetAnimation && (t.textureSheetAnimation = this.textureSheetAnimation.clone()), 
            t.isPerformanceMode = this.isPerformanceMode, t._isEmitting = this._isEmitting, 
            t._isPlaying = this._isPlaying, t._isPaused = this._isPaused, t._playStartDelay = this._playStartDelay, 
            t._frameRateTime = this._frameRateTime, t._emissionTime = this._emissionTime, t._totalDelayTime = this._totalDelayTime, 
            t._burstsIndex = this._burstsIndex;
        }
        clone() {
            var e = new zt(null);
            return this.cloneTo(e), e;
        }
    }
    zt._RANDOMOFFSET = new Uint32Array([ 592910910, 3276756734, 322376503, 306581307, 1793934638, 3737431713, 2527743459, 2368504881, 4085612399, 3774601268, 326370691, 1494990940, 1089181156, 3159510623, 2941263940, 2786374529, 271901988, 4233252447 ]), 
    zt.halfKSqrtOf2 = .71, zt._maxElapsedTime = 1 / 3, zt._tempVector30 = new n(), zt._tempVector31 = new n(), 
    zt._tempVector32 = new n(), zt._tempVector33 = new n(), zt._tempVector34 = new n(), 
    zt._tempVector35 = new n(), zt._tempVector36 = new n(), zt._tempVector37 = new n(), 
    zt._tempVector38 = new n(), zt._tempVector39 = new n(), zt._tempPosition = new n(), 
    zt._tempDirection = new n(), zt._type = ue._typeCounter++;
    class Ht extends _e {
        static __init__() {
            yt.SHADERDEFINE_RENDERMODE_BILLBOARD = G.getDefineByName("SPHERHBILLBOARD"), yt.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = G.getDefineByName("STRETCHEDBILLBOARD"), 
            yt.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = G.getDefineByName("HORIZONTALBILLBOARD"), 
            yt.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = G.getDefineByName("VERTICALBILLBOARD"), 
            yt.SHADERDEFINE_COLOROVERLIFETIME = G.getDefineByName("COLOROVERLIFETIME"), yt.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = G.getDefineByName("RANDOMCOLOROVERLIFETIME"), 
            yt.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = G.getDefineByName("VELOCITYOVERLIFETIMECONSTANT"), 
            yt.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = G.getDefineByName("VELOCITYOVERLIFETIMECURVE"), 
            yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = G.getDefineByName("VELOCITYOVERLIFETIMERANDOMCONSTANT"), 
            yt.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = G.getDefineByName("VELOCITYOVERLIFETIMERANDOMCURVE"), 
            yt.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = G.getDefineByName("TEXTURESHEETANIMATIONCURVE"), 
            yt.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = G.getDefineByName("TEXTURESHEETANIMATIONRANDOMCURVE"), 
            yt.SHADERDEFINE_ROTATIONOVERLIFETIME = G.getDefineByName("ROTATIONOVERLIFETIME"), 
            yt.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = G.getDefineByName("ROTATIONOVERLIFETIMESEPERATE"), 
            yt.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = G.getDefineByName("ROTATIONOVERLIFETIMECONSTANT"), 
            yt.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = G.getDefineByName("ROTATIONOVERLIFETIMECURVE"), 
            yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = G.getDefineByName("ROTATIONOVERLIFETIMERANDOMCONSTANTS"), 
            yt.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = G.getDefineByName("ROTATIONOVERLIFETIMERANDOMCURVES"), 
            yt.SHADERDEFINE_SIZEOVERLIFETIMECURVE = G.getDefineByName("SIZEOVERLIFETIMECURVE"), 
            yt.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = G.getDefineByName("SIZEOVERLIFETIMECURVESEPERATE"), 
            yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = G.getDefineByName("SIZEOVERLIFETIMERANDOMCURVES"), 
            yt.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = G.getDefineByName("SIZEOVERLIFETIMERANDOMCURVESSEPERATE"), 
            yt.SHADERDEFINE_RENDERMODE_MESH = G.getDefineByName("RENDERMODE_MESH"), yt.SHADERDEFINE_SHAPE = G.getDefineByName("SHAPE");
        }
        get particleSystem() {
            return this._particleSystem;
        }
        get particleRenderer() {
            return this._render;
        }
        constructor() {
            super(null), this._render = new Pt(this), this._particleSystem = new zt(this);
            var e = this._render._renderElements[0] = new Ze();
            e.setTransform(this._transform), e.render = this._render, e.setGeometry(this._particleSystem), 
            e.material = Ot.defaultMaterial;
        }
        _parseModule(e, r) {
            for (var i in r) switch (i) {
              case "bases":
                var a = r.bases;
                for (var n in a) e[n] = a[n];
                break;

              case "vector2s":
                var s = r.vector2s;
                for (var n in s) {
                    var o = e[n], l = s[n];
                    o.setValue(l[0], l[1]), e[n] = o;
                }
                break;

              case "vector3s":
                var _ = r.vector3s;
                for (var n in _) {
                    var h = e[n], c = _[n];
                    h.setValue(c[0], c[1], c[2]), e[n] = h;
                }
                break;

              case "vector4s":
                var d = r.vector4s;
                for (var n in d) {
                    var u = e[n], f = d[n];
                    u.setValue(f[0], f[1], f[2], f[3]), e[n] = u;
                }
                break;

              case "gradientDataNumbers":
                var m = r.gradientDataNumbers;
                for (var n in m) {
                    for (var E = e[n], T = r[n], g = 0, p = T.length; g < p; g++) {
                        var S = T[g];
                        E.add(S.key, S.value);
                    }
                    e[n] = E;
                }
                break;

              case "resources":
                var R = r.resources;
                for (var n in R) e[n] = t.Loader.getRes(R[n]);
                break;

              case "bursts":
                var v = r.bursts;
                for (g = 0, p = v.length; g < p; g++) {
                    var I = v[g];
                    e.addBurst(new _t(I.time, I.min, I.max));
                }
                break;

              case "randomSeed":
                e.randomSeed[0] = r.randomSeed;
                break;

              case "shapeType":
              case "type":
              case "color":
              case "size":
              case "frame":
              case "startFrame":
              case "angularVelocity":
              case "velocity":
                break;

              default:
                throw "ShurikenParticle3D:unknown type.";
            }
        }
        _parse(e, t) {
            if (super._parse(e, t), e.main) {
                var r = this.particleSystem, i = this.particleRenderer;
                this._parseModule(i, e.renderer), this._parseModule(r, e.main), this._parseModule(r.emission, e.emission);
                var s = e.shape;
                if (s) {
                    var o;
                    switch (s.shapeType) {
                      case 0:
                        o = new At();
                        break;

                      case 1:
                        o = new xt();
                        break;

                      case 2:
                        o = new It();
                        break;

                      case 3:
                        o = new Rt();
                        break;

                      case 7:
                        o = new vt();
                        break;

                      default:
                        throw "ShuriKenParticle3D:unknown shape type.";
                    }
                    this._parseModule(o, s), r.shape = o;
                }
                var l = e.velocityOverLifetime;
                if (l) {
                    var _, h = l.velocity;
                    switch (h.type) {
                      case 0:
                        var c = h.constant;
                        _ = Tt.createByConstant(c ? new n(c[0], c[1], c[2]) : new n(0, 0, 0));
                        break;

                      case 1:
                        _ = Tt.createByGradient(this._initParticleVelocity(h.gradientX), this._initParticleVelocity(h.gradientY), this._initParticleVelocity(h.gradientZ));
                        break;

                      case 2:
                        var d = h.constantMin, u = h.constantMax;
                        _ = Tt.createByRandomTwoConstant(d ? new n(d[0], d[1], d[2]) : new n(0, 0, 0), u ? new n(u[0], u[1], u[2]) : new n(0, 0, 0));
                        break;

                      case 3:
                        _ = Tt.createByRandomTwoGradient(this._initParticleVelocity(h.gradientXMin), this._initParticleVelocity(h.gradientXMax), this._initParticleVelocity(h.gradientYMin), this._initParticleVelocity(h.gradientYMax), this._initParticleVelocity(h.gradientZMin), this._initParticleVelocity(h.gradientZMax));
                    }
                    var f = new Ct(_);
                    this._parseModule(f, l), r.velocityOverLifetime = f;
                }
                var m = e.colorOverLifetime;
                if (m) {
                    var E, T = m.color;
                    switch (T.type) {
                      case 0:
                        var g = T.constant;
                        E = ht.createByConstant(g ? new a(g[0], g[1], g[2], g[3]) : new a(0, 0, 0, 0));
                        break;

                      case 1:
                        E = ht.createByGradient(this._initParticleColor(T.gradient));
                        break;

                      case 2:
                        var p = T.constantMin, S = T.constantMax;
                        E = ht.createByRandomTwoConstant(p ? new a(p[0], p[1], p[2], p[3]) : new a(0, 0, 0, 0), p ? new a(S[0], S[1], S[2], S[3]) : new a(0, 0, 0, 0));
                        break;

                      case 3:
                        E = ht.createByRandomTwoGradient(this._initParticleColor(T.gradientMin), this._initParticleColor(T.gradientMax));
                    }
                    var R = new ct(E);
                    this._parseModule(R, m), r.colorOverLifetime = R;
                }
                var v = e.sizeOverLifetime;
                if (v) {
                    var I, x = v.size;
                    switch (x.type) {
                      case 0:
                        I = x.separateAxes ? Et.createByGradientSeparate(this._initParticleSize(x.gradientX), this._initParticleSize(x.gradientY), this._initParticleSize(x.gradientZ)) : Et.createByGradient(this._initParticleSize(x.gradient));
                        break;

                      case 1:
                        if (x.separateAxes) {
                            var A = x.constantMinSeparate, D = x.constantMaxSeparate;
                            I = Et.createByRandomTwoConstantSeparate(A ? new n(A[0], A[1], A[2]) : new n(0, 0, 0), D ? new n(D[0], D[1], D[2]) : new n(0, 0, 0));
                        } else I = Et.createByRandomTwoConstant(x.constantMin || 0, x.constantMax || 0);
                        break;

                      case 2:
                        I = x.separateAxes ? Et.createByRandomTwoGradientSeparate(this._initParticleSize(x.gradientXMin), this._initParticleSize(x.gradientYMin), this._initParticleSize(x.gradientZMin), this._initParticleSize(x.gradientXMax), this._initParticleSize(x.gradientYMax), this._initParticleSize(x.gradientZMax)) : Et.createByRandomTwoGradient(this._initParticleSize(x.gradientMin), this._initParticleSize(x.gradientMax));
                    }
                    var M = new Dt(I);
                    this._parseModule(M, v), r.sizeOverLifetime = M;
                }
                var L = e.rotationOverLifetime;
                if (L) {
                    var C, y = L.angularVelocity;
                    switch (y.type) {
                      case 0:
                        if (y.separateAxes) {
                            var O = y.constantSeparate;
                            C = ut.createByConstantSeparate(O ? new n(O[0], O[1], O[2]) : new n(0, 0, Math.PI / 4));
                        } else C = ut.createByConstant(y.constant || Math.PI / 4);
                        break;

                      case 1:
                        C = y.separateAxes ? ut.createByGradientSeparate(this._initParticleRotation(y.gradientX), this._initParticleRotation(y.gradientY), this._initParticleRotation(y.gradientZ)) : ut.createByGradient(this._initParticleRotation(y.gradient));
                        break;

                      case 2:
                        if (y.separateAxes) {
                            var N = y.constantMinSeparate, P = y.constantMaxSeparate;
                            C = ut.createByRandomTwoConstantSeparate(N ? new n(N[0], N[1], N[2]) : new n(0, 0, 0), P ? new n(P[0], P[1], P[2]) : new n(0, 0, Math.PI / 4));
                        } else C = ut.createByRandomTwoConstant(y.constantMin || 0, y.constantMax || Math.PI / 4);
                        break;

                      case 3:
                        y.separateAxes || (C = ut.createByRandomTwoGradient(this._initParticleRotation(y.gradientMin), this._initParticleRotation(y.gradientMax)));
                    }
                    var b = new gt(C);
                    this._parseModule(b, L), r.rotationOverLifetime = b;
                }
                var V = e.textureSheetAnimation;
                if (V) {
                    var w, F = V.frame;
                    switch (F.type) {
                      case 0:
                        w = dt.createByConstant(F.constant);
                        break;

                      case 1:
                        w = dt.createByOverTime(this._initParticleFrame(F.overTime));
                        break;

                      case 2:
                        w = dt.createByRandomTwoConstant(F.constantMin, F.constantMax);
                        break;

                      case 3:
                        w = dt.createByRandomTwoOverTime(this._initParticleFrame(F.overTimeMin), this._initParticleFrame(F.overTimeMax));
                    }
                    var B, U = V.startFrame;
                    switch (U.type) {
                      case 0:
                        B = Mt.createByConstant(U.constant);
                        break;

                      case 1:
                        B = Mt.createByRandomTwoConstant(U.constantMin, U.constantMax);
                    }
                    var G = new Lt(w, B);
                    this._parseModule(G, V), r.textureSheetAnimation = G;
                }
            } else this._parseOld(e);
        }
        _activeHierarchy(e) {
            super._activeHierarchy(e), this.particleSystem.playOnAwake && this.particleSystem.play();
        }
        _inActiveHierarchy(e) {
            super._inActiveHierarchy(e), this.particleSystem.isAlive && this.particleSystem.simulate(0, !0);
        }
        _cloneTo(e, t, r) {
            var i = e, a = i._particleSystem;
            this._particleSystem.cloneTo(a);
            var n = i._render, s = this._render;
            n.sharedMaterials = s.sharedMaterials, n.enable = s.enable, n.renderMode = s.renderMode, 
            n.mesh = s.mesh, n.stretchedBillboardCameraSpeedScale = s.stretchedBillboardCameraSpeedScale, 
            n.stretchedBillboardSpeedScale = s.stretchedBillboardSpeedScale, n.stretchedBillboardLengthScale = s.stretchedBillboardLengthScale, 
            n.sortingFudge = s.sortingFudge, super._cloneTo(e, t, r);
        }
        destroy(e = !0) {
            this.destroyed || (super.destroy(e), this._particleSystem.destroy(), this._particleSystem = null);
        }
        _create() {
            return new Ht();
        }
        _parseOld(e) {
            const r = Math.PI / 180;
            var s, o, l, _ = this.particleRenderer, h = e.material;
            h && (l = t.Loader.getRes(h.path)), _.sharedMaterial = l;
            var c = e.meshPath;
            c && (_.mesh = t.Loader.getRes(c)), _.renderMode = e.renderMode, _.stretchedBillboardCameraSpeedScale = e.stretchedBillboardCameraSpeedScale, 
            _.stretchedBillboardSpeedScale = e.stretchedBillboardSpeedScale, _.stretchedBillboardLengthScale = e.stretchedBillboardLengthScale, 
            _.sortingFudge = e.sortingFudge ? e.sortingFudge : 0;
            var d = this.particleSystem;
            d.isPerformanceMode = e.isPerformanceMode, d.duration = e.duration, d.looping = e.looping, 
            d.prewarm = e.prewarm, d.startDelayType = e.startDelayType, d.startDelay = e.startDelay, 
            d.startDelayMin = e.startDelayMin, d.startDelayMax = e.startDelayMax, d.startLifetimeType = e.startLifetimeType, 
            d.startLifetimeConstant = e.startLifetimeConstant, d.startLifeTimeGradient = Ht._initStartLife(e.startLifetimeGradient), 
            d.startLifetimeConstantMin = e.startLifetimeConstantMin, d.startLifetimeConstantMax = e.startLifetimeConstantMax, 
            d.startLifeTimeGradientMin = Ht._initStartLife(e.startLifetimeGradientMin), d.startLifeTimeGradientMax = Ht._initStartLife(e.startLifetimeGradientMax), 
            d.startSpeedType = e.startSpeedType, d.startSpeedConstant = e.startSpeedConstant, 
            d.startSpeedConstantMin = e.startSpeedConstantMin, d.startSpeedConstantMax = e.startSpeedConstantMax, 
            d.threeDStartSize = e.threeDStartSize, d.startSizeType = e.startSizeType, d.startSizeConstant = e.startSizeConstant;
            var u = e.startSizeConstantSeparate, f = d.startSizeConstantSeparate;
            f.x = u[0], f.y = u[1], f.z = u[2], d.startSizeConstantMin = e.startSizeConstantMin, 
            d.startSizeConstantMax = e.startSizeConstantMax;
            var m = e.startSizeConstantMinSeparate, E = d.startSizeConstantMinSeparate;
            E.x = m[0], E.y = m[1], E.z = m[2];
            var T = e.startSizeConstantMaxSeparate, g = d.startSizeConstantMaxSeparate;
            g.x = T[0], g.y = T[1], g.z = T[2], d.threeDStartRotation = e.threeDStartRotation, 
            d.startRotationType = e.startRotationType, d.startRotationConstant = e.startRotationConstant * r;
            var p = e.startRotationConstantSeparate, S = d.startRotationConstantSeparate;
            S.x = p[0] * r, S.y = p[1] * r, S.z = p[2] * r, d.startRotationConstantMin = e.startRotationConstantMin * r, 
            d.startRotationConstantMax = e.startRotationConstantMax * r;
            var R = e.startRotationConstantMinSeparate, v = d.startRotationConstantMinSeparate;
            v.x = R[0] * r, v.y = R[1] * r, v.z = R[2] * r;
            var I = e.startRotationConstantMaxSeparate, x = d.startRotationConstantMaxSeparate;
            x.x = I[0] * r, x.y = I[1] * r, x.z = I[2] * r, d.randomizeRotationDirection = e.randomizeRotationDirection, 
            d.startColorType = e.startColorType;
            var A = e.startColorConstant, D = d.startColorConstant;
            D.x = A[0], D.y = A[1], D.z = A[2], D.w = A[3];
            var M = e.startColorConstantMin, L = d.startColorConstantMin;
            L.x = M[0], L.y = M[1], L.z = M[2], L.w = M[3];
            var C = e.startColorConstantMax, y = d.startColorConstantMax;
            y.x = C[0], y.y = C[1], y.z = C[2], y.w = C[3], d.gravityModifier = e.gravityModifier, 
            d.simulationSpace = e.simulationSpace, void 0 !== e.simulationSpeed && (d.simulationSpeed = e.simulationSpeed), 
            d.scaleMode = e.scaleMode, d.playOnAwake = e.playOnAwake, d.maxParticles = e.maxParticles;
            var O = e.autoRandomSeed;
            null != O && (d.autoRandomSeed = O);
            var N = e.randomSeed;
            null != N && (d.randomSeed[0] = N);
            var P = e.emission, b = d.emission;
            if (P) {
                b.emissionRate = P.emissionRate;
                var V = P.bursts;
                if (V) for (s = 0, o = V.length; s < o; s++) {
                    var w = V[s];
                    b.addBurst(new _t(w.time, w.min, w.max));
                }
                b.enable = P.enable;
            } else b.enable = !1;
            var F = e.shape;
            if (F) {
                var B;
                switch (F.shapeType) {
                  case 0:
                    var U;
                    B = U = new At(), U.radius = F.sphereRadius, U.emitFromShell = F.sphereEmitFromShell, 
                    U.randomDirection = F.sphereRandomDirection;
                    break;

                  case 1:
                    var G;
                    B = G = new xt(), G.radius = F.hemiSphereRadius, G.emitFromShell = F.hemiSphereEmitFromShell, 
                    G.randomDirection = F.hemiSphereRandomDirection;
                    break;

                  case 2:
                    var z;
                    B = z = new It(), z.angle = F.coneAngle * r, z.radius = F.coneRadius, z.length = F.coneLength, 
                    z.emitType = F.coneEmitType, z.randomDirection = F.coneRandomDirection;
                    break;

                  case 3:
                    var H;
                    B = H = new Rt(), H.x = F.boxX, H.y = F.boxY, H.z = F.boxZ, H.randomDirection = F.boxRandomDirection;
                    break;

                  case 7:
                    var W;
                    B = W = new vt(), W.radius = F.circleRadius, W.arc = F.circleArc * r, W.emitFromEdge = F.circleEmitFromEdge, 
                    W.randomDirection = F.circleRandomDirection;
                    break;

                  default:
                    var k;
                    B = k = new vt(), k.radius = F.circleRadius, k.arc = F.circleArc * r, k.emitFromEdge = F.circleEmitFromEdge, 
                    k.randomDirection = F.circleRandomDirection;
                }
                B.enable = F.enable, d.shape = B;
            }
            var X = e.velocityOverLifetime;
            if (X) {
                var Y, Z = X.velocity;
                switch (Z.type) {
                  case 0:
                    var j = Z.constant;
                    Y = Tt.createByConstant(new n(j[0], j[1], j[2]));
                    break;

                  case 1:
                    Y = Tt.createByGradient(this._initParticleVelocity(Z.gradientX), this._initParticleVelocity(Z.gradientY), this._initParticleVelocity(Z.gradientZ));
                    break;

                  case 2:
                    var q = Z.constantMin, Q = Z.constantMax;
                    Y = Tt.createByRandomTwoConstant(new n(q[0], q[1], q[2]), new n(Q[0], Q[1], Q[2]));
                    break;

                  case 3:
                    Y = Tt.createByRandomTwoGradient(this._initParticleVelocity(Z.gradientXMin), this._initParticleVelocity(Z.gradientXMax), this._initParticleVelocity(Z.gradientYMin), this._initParticleVelocity(Z.gradientYMax), this._initParticleVelocity(Z.gradientZMin), this._initParticleVelocity(Z.gradientZMax));
                }
                var K = new Ct(Y);
                K.space = X.space, K.enable = X.enable, d.velocityOverLifetime = K;
            }
            var J = e.colorOverLifetime;
            if (J) {
                var $, ee = J.color;
                switch (ee.type) {
                  case 0:
                    var te = ee.constant;
                    $ = ht.createByConstant(new a(te[0], te[1], te[2], te[3]));
                    break;

                  case 1:
                    $ = ht.createByGradient(this._initParticleColor(ee.gradient));
                    break;

                  case 2:
                    var re = ee.constantMin, ie = ee.constantMax;
                    $ = ht.createByRandomTwoConstant(new a(re[0], re[1], re[2], re[3]), new a(ie[0], ie[1], ie[2], ie[3]));
                    break;

                  case 3:
                    $ = ht.createByRandomTwoGradient(this._initParticleColor(ee.gradientMin), this._initParticleColor(ee.gradientMax));
                }
                var ae = new ct($);
                ae.enable = J.enable, d.colorOverLifetime = ae;
            }
            var ne = e.sizeOverLifetime;
            if (ne) {
                var se, oe = ne.size;
                switch (oe.type) {
                  case 0:
                    se = oe.separateAxes ? Et.createByGradientSeparate(this._initParticleSize(oe.gradientX), this._initParticleSize(oe.gradientY), this._initParticleSize(oe.gradientZ)) : Et.createByGradient(this._initParticleSize(oe.gradient));
                    break;

                  case 1:
                    if (oe.separateAxes) {
                        var le = oe.constantMinSeparate, _e = oe.constantMaxSeparate;
                        se = Et.createByRandomTwoConstantSeparate(new n(le[0], le[1], le[2]), new n(_e[0], _e[1], _e[2]));
                    } else se = Et.createByRandomTwoConstant(oe.constantMin, oe.constantMax);
                    break;

                  case 2:
                    se = oe.separateAxes ? Et.createByRandomTwoGradientSeparate(this._initParticleSize(oe.gradientXMin), this._initParticleSize(oe.gradientYMin), this._initParticleSize(oe.gradientZMin), this._initParticleSize(oe.gradientXMax), this._initParticleSize(oe.gradientYMax), this._initParticleSize(oe.gradientZMax)) : Et.createByRandomTwoGradient(this._initParticleSize(oe.gradientMin), this._initParticleSize(oe.gradientMax));
                }
                var he = new Dt(se);
                he.enable = ne.enable, d.sizeOverLifetime = he;
            }
            var ce = e.rotationOverLifetime;
            if (ce) {
                var de, ue = ce.angularVelocity;
                switch (ue.type) {
                  case 0:
                    if (ue.separateAxes) {
                        var fe = ue.constantSeparate;
                        de = ut.createByConstantSeparate(new n(fe[0] * r, fe[1] * r, fe[2] * r));
                    } else de = ut.createByConstant(ue.constant * r);
                    break;

                  case 1:
                    de = ue.separateAxes ? ut.createByGradientSeparate(this._initParticleRotation(ue.gradientX), this._initParticleRotation(ue.gradientY), this._initParticleRotation(ue.gradientZ)) : ut.createByGradient(this._initParticleRotation(ue.gradient));
                    break;

                  case 2:
                    if (ue.separateAxes) {
                        var me = ue.constantMinSeparate, Ee = ue.constantMaxSeparate;
                        de = ut.createByRandomTwoConstantSeparate(new n(me[0] * r, me[1] * r, me[2] * r), new n(Ee[0] * r, Ee[1] * r, Ee[2] * r));
                    } else de = ut.createByRandomTwoConstant(ue.constantMin * r, ue.constantMax * r);
                    break;

                  case 3:
                    ue.separateAxes || (de = ut.createByRandomTwoGradient(this._initParticleRotation(ue.gradientMin), this._initParticleRotation(ue.gradientMax)));
                }
                var Te = new gt(de);
                Te.enable = ce.enable, d.rotationOverLifetime = Te;
            }
            var ge = e.textureSheetAnimation;
            if (ge) {
                var pe, Se = ge.frame;
                switch (Se.type) {
                  case 0:
                    pe = dt.createByConstant(Se.constant);
                    break;

                  case 1:
                    pe = dt.createByOverTime(this._initParticleFrame(Se.overTime));
                    break;

                  case 2:
                    pe = dt.createByRandomTwoConstant(Se.constantMin, Se.constantMax);
                    break;

                  case 3:
                    pe = dt.createByRandomTwoOverTime(this._initParticleFrame(Se.overTimeMin), this._initParticleFrame(Se.overTimeMax));
                }
                var Re, ve = ge.startFrame;
                switch (ve.type) {
                  case 0:
                    Re = Mt.createByConstant(ve.constant);
                    break;

                  case 1:
                    Re = Mt.createByRandomTwoConstant(ve.constantMin, ve.constantMax);
                }
                var Ie = new Lt(pe, Re);
                Ie.enable = ge.enable;
                var xe = ge.tiles;
                Ie.tiles = new i(xe[0], xe[1]), Ie.type = ge.type, Ie.randomRow = ge.randomRow;
                var Ae = ge.rowIndex;
                void 0 !== Ae && (Ie.rowIndex = Ae), Ie.cycles = ge.cycles, d.textureSheetAnimation = Ie;
            }
        }
        _initParticleColor(e) {
            var t = new lt(4, 4);
            if (e) {
                var r, i, a = e.alphas;
                if (a) for (r = 0, i = a.length; r < i; r++) {
                    3 == r && i > 4 && (r = i - 1, console.warn("GradientDataColor warning:alpha data length is large than 4, will ignore the middle data."));
                    var n = a[r];
                    t.addColorAlpha(n.key, n.value);
                } else t.addColorAlpha(0, 1), t.addColorAlpha(1, 1);
                var s = e.rgbs;
                if (s) for (r = 0, i = s.length; r < i; r++) {
                    3 == r && i > 4 && (r = i - 1, console.warn("GradientDataColor warning:rgb data length is large than 4, will ignore the middle data."));
                    var o = s[r], l = o.value;
                    t.addColorRGB(o.key, new ne(l[0], l[1], l[2], 1));
                } else t.addColorRGB(0, new ne(1, 1, 1, 1)), t.addColorRGB(1, new ne(1, 1, 1, 1));
            } else t.addColorAlpha(0, 1), t.addColorAlpha(1, 1), t.addColorRGB(0, new ne(1, 1, 1, 1)), 
            t.addColorRGB(1, new ne(1, 1, 1, 1));
            return t;
        }
        _initParticleFrame(e) {
            var t = new ft();
            if (e) for (var r = e.frames, i = 0, a = r.length; i < a; i++) {
                var n = r[i];
                t.add(n.key, n.value);
            } else t.add(0, 0), t.add(1, 1);
            return t;
        }
        static _initStartLife(e) {
            for (var t = new mt(), r = e.startLifetimes, i = 0, a = r.length; i < a; i++) {
                var n = r[i];
                t.add(n.key, n.value);
            }
            return t;
        }
        _initParticleVelocity(e) {
            for (var t = new mt(), r = e.velocitys, i = 0, a = r.length; i < a; i++) {
                var n = r[i];
                t.add(n.key, n.value);
            }
            return t;
        }
        _initParticleSize(e) {
            var t = new mt();
            if (e) for (var r = e.sizes, i = 0, a = r.length; i < a; i++) {
                var n = r[i];
                t.add(n.key, n.value);
            } else t.add(0, 0), t.add(1, 1);
            return t;
        }
        _initParticleRotation(e) {
            for (var t = new mt(), r = e.angularVelocitys, i = 0, a = r.length; i < a; i++) {
                var n = r[i];
                t.add(n.key, n.value / 180 * Math.PI);
            }
            return t;
        }
    }
    class Wt extends Y {
        constructor() {
            super(), this.setShaderName("LineShader"), this._shaderValues.setVector(Wt.COLOR, new a(1, 1, 1, 1));
        }
        static __initDefine__() {}
        get color() {
            return this._shaderValues.getVector(Wt.COLOR);
        }
        set color(e) {
            this._shaderValues.setVector(Wt.COLOR, e);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(Wt.DEPTH_WRITE, e);
        }
        get depthWrite() {
            return this._shaderValues.getBool(Wt.DEPTH_WRITE);
        }
        set cull(e) {
            this._shaderValues.setInt(Wt.CULL, e);
        }
        get cull() {
            return this._shaderValues.getInt(Wt.CULL);
        }
        set blend(e) {
            this._shaderValues.setInt(Wt.BLEND, e);
        }
        get blend() {
            return this._shaderValues.getInt(Wt.BLEND);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(Wt.BLEND_SRC, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(Wt.BLEND_SRC);
        }
        set blendDst(e) {
            this._shaderValues.setInt(Wt.BLEND_DST, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(Wt.BLEND_DST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(Wt.DEPTH_TEST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(Wt.DEPTH_TEST);
        }
        clone() {
            var e = new Wt();
            return this.cloneTo(e), e;
        }
    }
    Wt.COLOR = G.propertyNameToID("u_Color"), Wt.CULL = G.propertyNameToID("s_Cull"), 
    Wt.BLEND = G.propertyNameToID("s_Blend"), Wt.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), 
    Wt.BLEND_DST = G.propertyNameToID("s_BlendDst"), Wt.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), 
    Wt.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class kt {
        static get vertexDeclaration() {
            return kt._vertexDeclaration;
        }
        static __init__() {
            kt._vertexDeclaration = new Ee(28, [ new Te(0, me.Vector3, ge.MESH_POSITION0), new Te(12, me.Vector4, ge.MESH_COLOR0) ]);
        }
        get vertexDeclaration() {
            return kt._vertexDeclaration;
        }
        constructor() {}
    }
    class Xt extends Qe {
        constructor() {
            super();
        }
        add(e) {
            if (-1 !== e._getIndexInList()) throw "SimpleSingletonList:" + e + " has  in  SingletonList.";
            this._add(e), e._setIndexInList(this.length++);
        }
        remove(e) {
            var t = e._getIndexInList();
            if (this.length--, t !== this.length) {
                var r = this.elements[this.length];
                this.elements[t] = r, r._setIndexInList(t);
            }
            e._setIndexInList(-1);
        }
        clear() {
            for (var e, t = this.elements, r = this.length; e < r; e++) t[e]._setIndexInList(-1);
            this.length = 0;
        }
    }
    class Yt {
        constructor() {
            this._pressedSprite = null, this._pressedLoopCount = -1, this.sprite = null, this.mousePositionX = 0, 
            this.mousePositionY = 0;
        }
    }
    class Zt {
        constructor() {
            this._indexInList = -1, this._identifier = -1, this._position = new i();
        }
        get identifier() {
            return this._identifier;
        }
        get position() {
            return this._position;
        }
        _getIndexInList() {
            return this._indexInList;
        }
        _setIndexInList(e) {
            this._indexInList = e;
        }
    }
    class jt {
        constructor() {
            this.succeeded = !1, this.collider = null, this.point = new n(), this.normal = new n(), 
            this.hitFraction = 0;
        }
    }
    class qt extends Qe {
        constructor() {
            super();
        }
        add(e) {
            if (-1 !== e._inPhysicUpdateListIndex) throw "PhysicsUpdateList:element has  in  PhysicsUpdateList.";
            this._add(e), e._inPhysicUpdateListIndex = this.length++;
        }
        remove(e) {
            var t = e._inPhysicUpdateListIndex;
            if (this.length--, t !== this.length) {
                var r = this.elements[this.length];
                this.elements[t] = r, r._inPhysicUpdateListIndex = t;
            }
            e._inPhysicUpdateListIndex = -1;
        }
    }
    class Qt {
        constructor() {
            this._idCounter = 0, this.colliderA = null, this.colliderB = null, this.distance = 0, 
            this.normal = new n(), this.positionOnA = new n(), this.positionOnB = new n(), this._id = ++this._idCounter;
        }
    }
    class Kt {
        constructor() {
            this._lastUpdateFrame = -2147483648, this._updateFrame = -2147483648, this._isTrigger = !1, 
            this.contacts = [];
        }
        _setUpdateFrame(e) {
            this._lastUpdateFrame = this._updateFrame, this._updateFrame = e;
        }
    }
    class Jt {
        constructor() {
            this._hitResultsPoolIndex = 0, this._hitResultsPool = [], this._contactPonintsPoolIndex = 0, 
            this._contactPointsPool = [], this._collisionsPool = [], this._collisions = {};
        }
        getHitResult() {
            var e = this._hitResultsPool[this._hitResultsPoolIndex++];
            return e || (e = new jt(), this._hitResultsPool.push(e)), e;
        }
        recoverAllHitResultsPool() {
            this._hitResultsPoolIndex = 0;
        }
        getContactPoints() {
            var e = this._contactPointsPool[this._contactPonintsPoolIndex++];
            return e || (e = new Qt(), this._contactPointsPool.push(e)), e;
        }
        recoverAllContactPointsPool() {
            this._contactPonintsPoolIndex = 0;
        }
        getCollision(e, t) {
            var r, i = e.id, a = t.id, n = this._collisions[i];
            return n && (r = n[a]), r || (n || (n = {}, this._collisions[i] = n), (r = 0 === this._collisionsPool.length ? new Kt() : this._collisionsPool.pop())._colliderA = e, 
            r._colliderB = t, n[a] = r), r;
        }
        recoverCollision(e) {
            var t = e._colliderA.id, r = e._colliderB.id;
            this._collisions[t][r] = null, this._collisionsPool.push(e);
        }
        garbageCollection() {
            for (var e in this._hitResultsPoolIndex = 0, this._hitResultsPool.length = 0, this._contactPonintsPoolIndex = 0, 
            this._contactPointsPool.length = 0, this._collisionsPool.length = 0, this._collisionsPool) {
                var t = this._collisionsPool[e], r = !0;
                for (var i in t) t[i] ? r = !1 : delete t[i];
                r && delete this._collisionsPool[e];
            }
        }
    }
    class $t {
        constructor() {
            this._scale = new n(1, 1, 1), this._centerMatrix = new L(), this._attatched = !1, 
            this._indexInCompound = -1, this._compoundParent = null, this._attatchedCollisionObject = null, 
            this._referenceCount = 0, this._localOffset = new n(0, 0, 0), this._localRotation = new u(0, 0, 0, 1), 
            this.needsCustomCollisionCallback = !1;
        }
        static __init__() {
            var e = R._bullet;
            $t._btScale = e.btVector3_create(1, 1, 1), $t._btVector30 = e.btVector3_create(0, 0, 0), 
            $t._btQuaternion0 = e.btQuaternion_create(0, 0, 0, 1), $t._btTransform0 = e.btTransform_create();
        }
        static _createAffineTransformation(e, t, r) {
            var i = t.x, a = t.y, n = t.z, s = t.w, o = i + i, l = a + a, _ = n + n, h = i * o, c = i * l, d = i * _, u = a * l, f = a * _, m = n * _, E = s * o, T = s * l, g = s * _;
            r[0] = 1 - (u + m), r[1] = c + g, r[2] = d - T, r[3] = 0, r[4] = c - g, r[5] = 1 - (h + m), 
            r[6] = f + E, r[7] = 0, r[8] = d + T, r[9] = f - E, r[10] = 1 - (h + u), r[11] = 0, 
            r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1;
        }
        get type() {
            return this._type;
        }
        get localOffset() {
            return this._localOffset;
        }
        set localOffset(e) {
            this._localOffset = e, this._compoundParent && this._compoundParent._updateChildTransform(this);
        }
        get localRotation() {
            return this._localRotation;
        }
        set localRotation(e) {
            this._localRotation = e, this._compoundParent && this._compoundParent._updateChildTransform(this);
        }
        _setScale(e) {
            if (this._compoundParent) this.updateLocalTransformations(); else {
                var t = R._bullet;
                t.btVector3_setValue($t._btScale, e.x, e.y, e.z), t.btCollisionShape_setLocalScaling(this._btShape, $t._btScale);
            }
        }
        _addReference() {
            this._referenceCount++;
        }
        _removeReference() {
            this._referenceCount--;
        }
        updateLocalTransformations() {
            if (this._compoundParent) {
                var e = $t._tempVector30;
                n.multiply(this.localOffset, this._scale, e), $t._createAffineTransformation(e, this.localRotation, this._centerMatrix.elements);
            } else $t._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);
        }
        cloneTo(e) {
            var t = e;
            this._localOffset.cloneTo(t.localOffset), this._localRotation.cloneTo(t.localRotation), 
            t.localOffset = t.localOffset, t.localRotation = t.localRotation;
        }
        clone() {
            return null;
        }
        destroy() {
            this._btShape && (R._bullet.btCollisionShape_destroy(this._btShape), this._btShape = null);
        }
    }
    $t.SHAPEORIENTATION_UPX = 0, $t.SHAPEORIENTATION_UPY = 1, $t.SHAPEORIENTATION_UPZ = 2, 
    $t.SHAPETYPES_BOX = 0, $t.SHAPETYPES_SPHERE = 1, $t.SHAPETYPES_CYLINDER = 2, $t.SHAPETYPES_CAPSULE = 3, 
    $t.SHAPETYPES_CONVEXHULL = 4, $t.SHAPETYPES_COMPOUND = 5, $t.SHAPETYPES_STATICPLANE = 6, 
    $t.SHAPETYPES_CONE = 7, $t._tempVector30 = new n();
    class er extends $t {
        static __init__() {
            er._btSize = R._bullet.btVector3_create(0, 0, 0);
        }
        get sizeX() {
            return this._sizeX;
        }
        get sizeY() {
            return this._sizeY;
        }
        get sizeZ() {
            return this._sizeZ;
        }
        constructor(e = 1, t = 1, r = 1) {
            super(), this._sizeX = e, this._sizeY = t, this._sizeZ = r, this._type = $t.SHAPETYPES_BOX;
            var i = R._bullet;
            i.btVector3_setValue(er._btSize, e / 2, t / 2, r / 2), this._btShape = i.btBoxShape_create(er._btSize);
        }
        clone() {
            var e = new er(this._sizeX, this._sizeY, this._sizeZ);
            return this.cloneTo(e), e;
        }
    }
    class tr extends $t {
        constructor(e = .5, t = 1.25, r = $t.SHAPEORIENTATION_UPY) {
            super(), this._radius = e, this._length = t, this._orientation = r, this._type = $t.SHAPETYPES_CAPSULE;
            var i = R._bullet;
            switch (r) {
              case $t.SHAPEORIENTATION_UPX:
                this._btShape = i.btCapsuleShapeX_create(e, t - 2 * e);
                break;

              case $t.SHAPEORIENTATION_UPY:
                this._btShape = i.btCapsuleShape_create(e, t - 2 * e);
                break;

              case $t.SHAPEORIENTATION_UPZ:
                this._btShape = i.btCapsuleShapeZ_create(e, t - 2 * e);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
        }
        get radius() {
            return this._radius;
        }
        get length() {
            return this._length;
        }
        get orientation() {
            return this._orientation;
        }
        _setScale(e) {
            var t = tr._tempVector30;
            switch (this.orientation) {
              case $t.SHAPEORIENTATION_UPX:
                t.x = e.x, t.y = t.z = Math.max(e.y, e.z);
                break;

              case $t.SHAPEORIENTATION_UPY:
                t.y = e.y, t.x = t.z = Math.max(e.x, e.z);
                break;

              case $t.SHAPEORIENTATION_UPZ:
                t.z = e.z, t.x = t.y = Math.max(e.x, e.y);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
            super._setScale(t);
        }
        clone() {
            var e = new tr(this._radius, this._length, this._orientation);
            return this.cloneTo(e), e;
        }
    }
    tr._tempVector30 = new n();
    class rr extends $t {
        constructor() {
            super(), this._childColliderShapes = [], this._type = $t.SHAPETYPES_COMPOUND, this._btShape = R._bullet.btCompoundShape_create();
        }
        static __init__() {
            var e = R._bullet;
            rr._btVector3One = e.btVector3_create(1, 1, 1), rr._btTransform = e.btTransform_create(), 
            rr._btOffset = e.btVector3_create(0, 0, 0), rr._btRotation = e.btQuaternion_create(0, 0, 0, 1);
        }
        _clearChildShape(e) {
            e._attatched = !1, e._compoundParent = null, e._indexInCompound = -1;
        }
        _addReference() {}
        _removeReference() {}
        _updateChildTransform(e) {
            var t = R._bullet, r = e.localOffset, i = e.localRotation, a = $t._btVector30, n = $t._btQuaternion0, s = $t._btTransform0;
            t.btVector3_setValue(a, -r.x, r.y, r.z), t.btQuaternion_setValue(n, -i.x, i.y, i.z, -i.w), 
            t.btTransform_setOrigin(s, a), t.btTransform_setRotation(s, n), t.btCompoundShape_updateChildTransform(this._btShape, e._indexInCompound, s, !0);
        }
        addChildShape(e) {
            if (e._attatched) throw "CompoundColliderShape: this shape has attatched to other entity.";
            e._attatched = !0, e._compoundParent = this, e._indexInCompound = this._childColliderShapes.length, 
            this._childColliderShapes.push(e);
            var t = e.localOffset, r = e.localRotation, i = R._bullet;
            i.btVector3_setValue(rr._btOffset, -t.x, t.y, t.z), i.btQuaternion_setValue(rr._btRotation, -r.x, r.y, r.z, -r.w), 
            i.btTransform_setOrigin(rr._btTransform, rr._btOffset), i.btTransform_setRotation(rr._btTransform, rr._btRotation);
            var a = i.btCollisionShape_getLocalScaling(this._btShape);
            i.btCollisionShape_setLocalScaling(this._btShape, rr._btVector3One), i.btCompoundShape_addChildShape(this._btShape, rr._btTransform, e._btShape), 
            i.btCollisionShape_setLocalScaling(this._btShape, a), this._attatchedCollisionObject && (this._attatchedCollisionObject.colliderShape = this);
        }
        removeChildShape(e) {
            if (e._compoundParent === this) {
                var t = e._indexInCompound;
                this._clearChildShape(e);
                var r = this._childColliderShapes[this._childColliderShapes.length - 1];
                r._indexInCompound = t, this._childColliderShapes[t] = r, this._childColliderShapes.pop(), 
                R._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, t);
            }
        }
        clearChildShape() {
            for (var e = 0, t = this._childColliderShapes.length; e < t; e++) this._clearChildShape(this._childColliderShapes[e]), 
            R._bullet.btCompoundShape_removeChildShapeByIndex(this._btShape, 0);
            this._childColliderShapes.length = 0;
        }
        getChildShapeCount() {
            return this._childColliderShapes.length;
        }
        cloneTo(e) {
            var t = e;
            t.clearChildShape();
            for (var r = 0, i = this._childColliderShapes.length; r < i; r++) t.addChildShape(this._childColliderShapes[r].clone());
        }
        clone() {
            var e = new rr();
            return this.cloneTo(e), e;
        }
        destroy() {
            super.destroy();
            for (var e = 0, t = this._childColliderShapes.length; e < t; e++) {
                var r = this._childColliderShapes[e];
                0 === r._referenceCount && r.destroy();
            }
        }
    }
    class ir extends $t {
        constructor(e = .5, t = 1, r = $t.SHAPEORIENTATION_UPY) {
            super(), this._radius = 1, this._height = .5, this._radius = e, this._height = t, 
            this._orientation = r, this._type = $t.SHAPETYPES_CYLINDER;
            var i = R._bullet;
            switch (r) {
              case $t.SHAPEORIENTATION_UPX:
                this._btShape = i.btConeShapeX_create(e, t);
                break;

              case $t.SHAPEORIENTATION_UPY:
                this._btShape = i.btConeShape_create(e, t);
                break;

              case $t.SHAPEORIENTATION_UPZ:
                this._btShape = i.btConeShapeZ_create(e, t);
                break;

              default:
                throw "ConeColliderShape:unknown orientation.";
            }
        }
        get radius() {
            return this._radius;
        }
        get height() {
            return this._height;
        }
        get orientation() {
            return this._orientation;
        }
        clone() {
            var e = new ir(this._radius, this._height, this._orientation);
            return this.cloneTo(e), e;
        }
    }
    class ar extends $t {
        constructor(e = .5, t = 1, r = $t.SHAPEORIENTATION_UPY) {
            super(), this._radius = 1, this._height = .5, this._radius = e, this._height = t, 
            this._orientation = r, this._type = $t.SHAPETYPES_CYLINDER;
            var i = R._bullet;
            switch (r) {
              case $t.SHAPEORIENTATION_UPX:
                i.btVector3_setValue(ar._btSize, t / 2, e, e), this._btShape = i.btCylinderShapeX_create(ar._btSize);
                break;

              case $t.SHAPEORIENTATION_UPY:
                i.btVector3_setValue(ar._btSize, e, t / 2, e), this._btShape = i.btCylinderShape_create(ar._btSize);
                break;

              case $t.SHAPEORIENTATION_UPZ:
                i.btVector3_setValue(ar._btSize, e, e, t / 2), this._btShape = i.btCylinderShapeZ_create(ar._btSize);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
        }
        static __init__() {
            ar._btSize = R._bullet.btVector3_create(0, 0, 0);
        }
        get radius() {
            return this._radius;
        }
        get height() {
            return this._height;
        }
        get orientation() {
            return this._orientation;
        }
        clone() {
            var e = new ar(this._radius, this._height, this._orientation);
            return this.cloneTo(e), e;
        }
    }
    class nr extends $t {
        constructor() {
            super(), this._mesh = null, this._convex = !1;
        }
        get mesh() {
            return this._mesh;
        }
        set mesh(e) {
            if (this._mesh !== e) {
                var t = R._bullet;
                this._mesh && t.destroy(this._btShape), e && (this._btShape = t.btGImpactMeshShape_create(e._getPhysicMesh()), 
                t.btGImpactShapeInterface_updateBound(this._btShape)), this._mesh = e;
            }
        }
        get convex() {
            return this._convex;
        }
        set convex(e) {
            this._convex = e;
        }
        _setScale(e) {
            if (this._compoundParent) this.updateLocalTransformations(); else {
                var t = R._bullet;
                t.btVector3_setValue($t._btScale, e.x, e.y, e.z), t.btCollisionShape_setLocalScaling(this._btShape, $t._btScale), 
                t.btGImpactShapeInterface_updateBound(this._btShape);
            }
        }
        cloneTo(e) {
            var t = e;
            t.convex = this._convex, t.mesh = this._mesh, super.cloneTo(e);
        }
        clone() {
            var e = new nr();
            return this.cloneTo(e), e;
        }
        destroy() {
            this._btShape && (R._bullet.btCollisionShape_destroy(this._btShape), this._btShape = null);
        }
    }
    class sr extends $t {
        get radius() {
            return this._radius;
        }
        constructor(e = .5) {
            super(), this._radius = e, this._type = $t.SHAPETYPES_SPHERE, this._btShape = R._bullet.btSphereShape_create(e);
        }
        clone() {
            var e = new sr(this._radius);
            return this.cloneTo(e), e;
        }
    }
    class or extends t.Component {
        constructor(e, t) {
            super(), this._restitution = 0, this._friction = .5, this._rollingFriction = 0, 
            this._ccdMotionThreshold = 0, this._ccdSweptSphereRadius = 0, this._collisionGroup = Nt.COLLISIONFILTERGROUP_DEFAULTFILTER, 
            this._canCollideWith = Nt.COLLISIONFILTERGROUP_ALLFILTER, this._colliderShape = null, 
            this._transformFlag = 2147483647, this._enableProcessCollisions = !0, this._inPhysicUpdateListIndex = -1, 
            this.canScaleShape = !0, this._collisionGroup = e, this._canCollideWith = t, or._physicObjectsMap[this.id] = this;
        }
        static __init__() {
            var e = R._bullet;
            or._btVector30 = e.btVector3_create(0, 0, 0), or._btQuaternion0 = e.btQuaternion_create(0, 0, 0, 1);
        }
        static _createAffineTransformationArray(e, t, r, i, a, n, s, o, l) {
            var _ = i + i, h = a + a, c = n + n, d = i * _, u = i * h, f = i * c, m = a * h, E = a * c, T = n * c, g = s * _, p = s * h, S = s * c, R = o[0], v = o[1], I = o[2];
            l[0] = (1 - (m + T)) * R, l[1] = (u + S) * R, l[2] = (f - p) * R, l[3] = 0, l[4] = (u - S) * v, 
            l[5] = (1 - (d + T)) * v, l[6] = (E + g) * v, l[7] = 0, l[8] = (f + p) * I, l[9] = (E - g) * I, 
            l[10] = (1 - (d + m)) * I, l[11] = 0, l[12] = e, l[13] = t, l[14] = r, l[15] = 1;
        }
        static _creatShape(e) {
            var r;
            switch (e.type) {
              case "BoxColliderShape":
                var i = e.size;
                r = i ? new er(i[0], i[1], i[2]) : new er();
                break;

              case "SphereColliderShape":
                r = new sr(e.radius);
                break;

              case "CapsuleColliderShape":
                r = new tr(e.radius, e.height, e.orientation);
                break;

              case "MeshColliderShape":
                var a = new nr();
                e.mesh && (a.mesh = t.Loader.getRes(e.mesh)), r = a;
                break;

              case "ConeColliderShape":
                r = new ir(e.radius, e.height, e.orientation);
                break;

              case "CylinderColliderShape":
                r = new ar(e.radius, e.height, e.orientation);
                break;

              default:
                throw "unknown shape type.";
            }
            if (e.center) {
                var n = r.localOffset;
                n.fromArray(e.center), r.localOffset = n;
            }
            return r;
        }
        static physicVector3TransformQuat(e, t, r, i, a, n) {
            var s = e.x, o = e.y, l = e.z, _ = a * s + r * l - i * o, h = a * o + i * s - t * l, c = a * l + t * o - r * s, d = -t * s - r * o - i * l;
            n.x = _ * a + d * -t + h * -i - c * -r, n.y = h * a + d * -r + c * -t - _ * -i, 
            n.z = c * a + d * -i + _ * -r - h * -t;
        }
        static physicQuaternionMultiply(e, t, r, i, a, n) {
            var s = a.x, o = a.y, l = a.z, _ = a.w, h = t * l - r * o, c = r * s - e * l, d = e * o - t * s, u = e * s + t * o + r * l;
            n.x = e * _ + s * i + h, n.y = t * _ + o * i + c, n.z = r * _ + l * i + d, n.w = i * _ - u;
        }
        get restitution() {
            return this._restitution;
        }
        set restitution(e) {
            this._restitution = e, this._btColliderObject && R._bullet.btCollisionObject_setRestitution(this._btColliderObject, e);
        }
        get friction() {
            return this._friction;
        }
        set friction(e) {
            this._friction = e, this._btColliderObject && R._bullet.btCollisionObject_setFriction(this._btColliderObject, e);
        }
        get rollingFriction() {
            return this._rollingFriction;
        }
        set rollingFriction(e) {
            this._rollingFriction = e, this._btColliderObject && R._bullet.btCollisionObject_setRollingFriction(this._btColliderObject, e);
        }
        get ccdMotionThreshold() {
            return this._ccdMotionThreshold;
        }
        set ccdMotionThreshold(e) {
            this._ccdMotionThreshold = e, this._btColliderObject && R._bullet.btCollisionObject_setCcdMotionThreshold(this._btColliderObject, e);
        }
        get ccdSweptSphereRadius() {
            return this._ccdSweptSphereRadius;
        }
        set ccdSweptSphereRadius(e) {
            this._ccdSweptSphereRadius = e, this._btColliderObject && R._bullet.btCollisionObject_setCcdSweptSphereRadius(this._btColliderObject, e);
        }
        get isActive() {
            return !!this._btColliderObject && R._bullet.btCollisionObject_isActive(this._btColliderObject);
        }
        get enabled() {
            return super.enabled;
        }
        set enabled(e) {
            this._enabled != e && (this._simulation && this._colliderShape && (e ? (this._derivePhysicsTransformation(!0), 
            this._addToSimulation()) : this._removeFromSimulation()), super.enabled = e);
        }
        get colliderShape() {
            return this._colliderShape;
        }
        set colliderShape(e) {
            var t = this._colliderShape;
            if (t && (t._attatched = !1, t._attatchedCollisionObject = null), this._colliderShape = e, 
            e) {
                if (e._attatched) throw "PhysicsComponent: this shape has attatched to other entity.";
                if (e._attatched = !0, e._attatchedCollisionObject = this, this._btColliderObject) {
                    R._bullet.btCollisionObject_setCollisionShape(this._btColliderObject, e._btShape);
                    var r = this._simulation && this._enabled;
                    r && t && this._removeFromSimulation(), this._onShapeChange(e), r && (this._derivePhysicsTransformation(!0), 
                    this._addToSimulation());
                }
            } else this._simulation && this._enabled && t && this._removeFromSimulation();
        }
        get simulation() {
            return this._simulation;
        }
        get collisionGroup() {
            return this._collisionGroup;
        }
        set collisionGroup(e) {
            this._collisionGroup !== e && (this._collisionGroup = e, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
            this._addToSimulation()));
        }
        get canCollideWith() {
            return this._canCollideWith;
        }
        set canCollideWith(e) {
            this._canCollideWith !== e && (this._canCollideWith = e, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
            this._addToSimulation()));
        }
        _parseShape(e) {
            var t = e.length;
            if (1 === t) {
                var r = or._creatShape(e[0]);
                this.colliderShape = r;
            } else {
                for (var i = new rr(), a = 0; a < t; a++) r = or._creatShape(e[a]), i.addChildShape(r);
                this.colliderShape = i;
            }
        }
        _onScaleChange(e) {
            this._colliderShape._setScale(e);
        }
        _onEnable() {
            this._simulation = this.owner._scene.physicsSimulation, R._bullet.btCollisionObject_setContactProcessingThreshold(this._btColliderObject, 1e30), 
            this._colliderShape && this._enabled && (this._derivePhysicsTransformation(!0), 
            this._addToSimulation());
        }
        _onDisable() {
            this._colliderShape && this._enabled && (this._removeFromSimulation(), -1 !== this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.remove(this)), 
            this._simulation = null;
        }
        _onDestroy() {
            delete or._physicObjectsMap[this.id], R._bullet.btCollisionObject_destroy(this._btColliderObject), 
            this._colliderShape.destroy(), super._onDestroy(), this._btColliderObject = null, 
            this._colliderShape = null, this._simulation = null, this.owner.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onTransformChanged);
        }
        _isValid() {
            return this._simulation && this._colliderShape && this._enabled;
        }
        _parse(e) {
            null != e.collisionGroup && (this.collisionGroup = e.collisionGroup), null != e.canCollideWith && (this.canCollideWith = e.canCollideWith), 
            null != e.ccdMotionThreshold && (this.ccdMotionThreshold = e.ccdMotionThreshold), 
            null != e.ccdSweptSphereRadius && (this.ccdSweptSphereRadius = e.ccdSweptSphereRadius);
        }
        _setTransformFlag(e, t) {
            t ? this._transformFlag |= e : this._transformFlag &= ~e;
        }
        _getTransformFlag(e) {
            return 0 != (this._transformFlag & e);
        }
        _addToSimulation() {}
        _removeFromSimulation() {}
        _derivePhysicsTransformation(e) {
            this._innerDerivePhysicsTransformation(R._bullet.btCollisionObject_getWorldTransform(this._btColliderObject), e);
        }
        _innerDerivePhysicsTransformation(e, t) {
            var r = R._bullet, i = this.owner._transform;
            if (t || this._getTransformFlag(oe.TRANSFORM_WORLDPOSITION)) {
                var a = this._colliderShape.localOffset, s = i.position, o = or._btVector30;
                if (0 !== a.x || 0 !== a.y || 0 !== a.z) {
                    var l = or._tempVector30, _ = i.worldMatrix;
                    n.transformCoordinate(a, _, l), r.btVector3_setValue(o, -l.x, l.y, l.z);
                } else r.btVector3_setValue(o, -s.x, s.y, s.z);
                r.btTransform_setOrigin(e, o), this._setTransformFlag(oe.TRANSFORM_WORLDPOSITION, !1);
            }
            if (t || this._getTransformFlag(oe.TRANSFORM_WORLDQUATERNION)) {
                var h = this._colliderShape.localRotation, c = or._btQuaternion0, d = i.rotation;
                if (0 !== h.x || 0 !== h.y || 0 !== h.z || 1 !== h.w) {
                    var u = or._tempQuaternion0;
                    or.physicQuaternionMultiply(d.x, d.y, d.z, d.w, h, u), r.btQuaternion_setValue(c, -u.x, u.y, u.z, -u.w);
                } else r.btQuaternion_setValue(c, -d.x, d.y, d.z, -d.w);
                r.btTransform_setRotation(e, c), this._setTransformFlag(oe.TRANSFORM_WORLDQUATERNION, !1);
            }
            (t || this._getTransformFlag(oe.TRANSFORM_WORLDSCALE)) && (this._onScaleChange(i.getWorldLossyScale()), 
            this._setTransformFlag(oe.TRANSFORM_WORLDSCALE, !1));
        }
        _updateTransformComponent(e) {
            var t = R._bullet, r = this._colliderShape.localOffset, i = this._colliderShape.localRotation, a = this.owner._transform, n = a.position, s = a.rotation, o = t.btTransform_getOrigin(e), l = t.btTransform_getRotation(e), _ = -t.btQuaternion_x(l), h = t.btQuaternion_y(l), c = t.btQuaternion_z(l), d = -t.btQuaternion_w(l);
            if (0 !== r.x || 0 !== r.y || 0 !== r.z) {
                var u = or._tempVector30;
                or.physicVector3TransformQuat(r, _, h, c, d, u), n.x = -t.btVector3_x(o) - u.x, 
                n.y = t.btVector3_y(o) - u.y, n.z = t.btVector3_z(o) - u.z;
            } else n.x = -t.btVector3_x(o), n.y = t.btVector3_y(o), n.z = t.btVector3_z(o);
            if (a.position = n, 0 !== i.x || 0 !== i.y || 0 !== i.z || 1 !== i.w) {
                var f = or._tempQuaternion0;
                i.invert(f), or.physicQuaternionMultiply(_, h, c, d, f, s);
            } else s.x = _, s.y = h, s.z = c, s.w = d;
            a.rotation = s;
        }
        _onShapeChange(e) {
            var t = this._btColliderObject, r = R._bullet, i = r.btCollisionObject_getCollisionFlags(t);
            e.needsCustomCollisionCallback ? 0 == (i & or.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) && r.btCollisionObject_setCollisionFlags(t, i | or.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) : (i & or.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK) > 0 && r.btCollisionObject_setCollisionFlags(t, i ^ or.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK);
        }
        _onAdded() {
            this.enabled = this._enabled, this.restitution = this._restitution, this.friction = this._friction, 
            this.rollingFriction = this._rollingFriction, this.ccdMotionThreshold = this._ccdMotionThreshold, 
            this.ccdSweptSphereRadius = this._ccdSweptSphereRadius, this.owner.transform.on(t.Event.TRANSFORM_CHANGED, this, this._onTransformChanged);
        }
        _onTransformChanged(e) {
            or._addUpdateList && (e &= oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDSCALE) && (this._transformFlag |= e, 
            this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
        }
        _cloneTo(e) {
            var t = e;
            t.restitution = this._restitution, t.friction = this._friction, t.rollingFriction = this._rollingFriction, 
            t.ccdMotionThreshold = this._ccdMotionThreshold, t.ccdSweptSphereRadius = this._ccdSweptSphereRadius, 
            t.collisionGroup = this._collisionGroup, t.canCollideWith = this._canCollideWith, 
            t.canScaleShape = this.canScaleShape, this._colliderShape && (t.colliderShape = this._colliderShape.clone());
        }
    }
    or.ACTIVATIONSTATE_ACTIVE_TAG = 1, or.ACTIVATIONSTATE_ISLAND_SLEEPING = 2, or.ACTIVATIONSTATE_WANTS_DEACTIVATION = 3, 
    or.ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4, or.ACTIVATIONSTATE_DISABLE_SIMULATION = 5, 
    or.COLLISIONFLAGS_STATIC_OBJECT = 1, or.COLLISIONFLAGS_KINEMATIC_OBJECT = 2, or.COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4, 
    or.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8, or.COLLISIONFLAGS_CHARACTER_OBJECT = 16, 
    or.COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32, or.COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64, 
    or._tempVector30 = new n(), or._tempQuaternion0 = new u(), or._tempQuaternion1 = new u(), 
    or._tempMatrix4x40 = new L(), or._physicObjectsMap = {}, or._addUpdateList = !0;
    class lr {
        constructor(e, t = 0) {
            this._gravity = new n(0, -10, 0), this._btVector3Zero = R._bullet.btVector3_create(0, 0, 0), 
            this._btDefaultQuaternion = R._bullet.btQuaternion_create(0, 0, 0, -1), this._collisionsUtils = new Jt(), 
            this._previousFrameCollisions = [], this._currentFrameCollisions = [], this._physicsUpdateList = new qt(), 
            this._characters = [], this._updatedRigidbodies = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60, 
            this.maxSubSteps = e.maxSubSteps, this.fixedTimeStep = e.fixedTimeStep;
            var r = R._bullet;
            this._btCollisionConfiguration = r.btDefaultCollisionConfiguration_create(), this._btDispatcher = r.btCollisionDispatcher_create(this._btCollisionConfiguration), 
            this._btBroadphase = r.btDbvtBroadphase_create(), r.btOverlappingPairCache_setInternalGhostPairCallback(r.btDbvtBroadphase_getOverlappingPairCache(this._btBroadphase), r.btGhostPairCallback_create());
            var i = e.flags;
            if (i & lr.PHYSICSENGINEFLAGS_COLLISIONSONLY) this._btCollisionWorld = new r.btCollisionWorld(this._btDispatcher, this._btBroadphase, this._btCollisionConfiguration); else {
                if (i & lr.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT) throw "PhysicsSimulation:SoftBody processing is not yet available";
                var a = r.btSequentialImpulseConstraintSolver_create();
                this._btDiscreteDynamicsWorld = r.btDiscreteDynamicsWorld_create(this._btDispatcher, this._btBroadphase, a, this._btCollisionConfiguration), 
                this._btCollisionWorld = this._btDiscreteDynamicsWorld;
            }
            this._btDiscreteDynamicsWorld && (this._btSolverInfo = r.btDynamicsWorld_getSolverInfo(this._btDiscreteDynamicsWorld), 
            this._btDispatchInfo = r.btCollisionWorld_getDispatchInfo(this._btDiscreteDynamicsWorld)), 
            this._btClosestRayResultCallback = r.ClosestRayResultCallback_create(this._btVector3Zero, this._btVector3Zero), 
            this._btAllHitsRayResultCallback = r.AllHitsRayResultCallback_create(this._btVector3Zero, this._btVector3Zero), 
            this._btClosestConvexResultCallback = r.ClosestConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero), 
            this._btAllConvexResultCallback = r.AllConvexResultCallback_create(this._btVector3Zero, this._btVector3Zero), 
            r.btGImpactCollisionAlgorithm_RegisterAlgorithm(this._btDispatcher);
        }
        static __init__() {
            var e = R._bullet;
            lr._btTempVector30 = e.btVector3_create(0, 0, 0), lr._btTempVector31 = e.btVector3_create(0, 0, 0), 
            lr._btTempQuaternion0 = e.btQuaternion_create(0, 0, 0, 1), lr._btTempQuaternion1 = e.btQuaternion_create(0, 0, 0, 1), 
            lr._btTempTransform0 = e.btTransform_create(), lr._btTempTransform1 = e.btTransform_create();
        }
        static createConstraint() {}
        get continuousCollisionDetection() {
            return R._bullet.btCollisionWorld_get_m_useContinuous(this._btDispatchInfo);
        }
        set continuousCollisionDetection(e) {
            R._bullet.btCollisionWorld_set_m_useContinuous(this._btDispatchInfo, e);
        }
        get gravity() {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            return this._gravity;
        }
        set gravity(e) {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._gravity = e;
            var t = R._bullet, r = lr._btTempVector30;
            t.btVector3_setValue(r, -e.x, e.y, e.z), t.btDiscreteDynamicsWorld_setGravity(this._btDiscreteDynamicsWorld, r);
        }
        get speculativeContactRestitution() {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
            return R._bullet.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld);
        }
        set speculativeContactRestitution(e) {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
            R._bullet.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution(this._btDiscreteDynamicsWorld, e);
        }
        _simulate(e) {
            this._updatedRigidbodies = 0;
            var t = R._bullet;
            this._btDiscreteDynamicsWorld ? t.btDiscreteDynamicsWorld_stepSimulation(this._btDiscreteDynamicsWorld, e, this.maxSubSteps, this.fixedTimeStep) : t.PerformDiscreteCollisionDetection(this._btCollisionWorld);
        }
        _destroy() {
            var e = R._bullet;
            this._btDiscreteDynamicsWorld ? (e.btCollisionWorld_destroy(this._btDiscreteDynamicsWorld), 
            this._btDiscreteDynamicsWorld = null) : (e.btCollisionWorld_destroy(this._btCollisionWorld), 
            this._btCollisionWorld = null), e.btDbvtBroadphase_destroy(this._btBroadphase), 
            this._btBroadphase = null, e.btCollisionDispatcher_destroy(this._btDispatcher), 
            this._btDispatcher = null, e.btDefaultCollisionConfiguration_destroy(this._btCollisionConfiguration), 
            this._btCollisionConfiguration = null;
        }
        _addPhysicsCollider(e, t, r) {
            R._bullet.btCollisionWorld_addCollisionObject(this._btCollisionWorld, e._btColliderObject, t, r);
        }
        _removePhysicsCollider(e) {
            R._bullet.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, e._btColliderObject);
        }
        _addRigidBody(e, t, r) {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            R._bullet.btDiscreteDynamicsWorld_addRigidBody(this._btCollisionWorld, e._btColliderObject, t, r);
        }
        _removeRigidBody(e) {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            R._bullet.btDiscreteDynamicsWorld_removeRigidBody(this._btCollisionWorld, e._btColliderObject);
        }
        _addCharacter(e, t, r) {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            var i = R._bullet;
            i.btCollisionWorld_addCollisionObject(this._btCollisionWorld, e._btColliderObject, t, r), 
            i.btDynamicsWorld_addAction(this._btCollisionWorld, e._btKinematicCharacter);
        }
        _removeCharacter(e) {
            if (!this._btDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            var t = R._bullet;
            t.btCollisionWorld_removeCollisionObject(this._btCollisionWorld, e._btColliderObject), 
            t.btDynamicsWorld_removeAction(this._btCollisionWorld, e._btKinematicCharacter);
        }
        raycastFromTo(e, t, r = null, i = Nt.COLLISIONFILTERGROUP_ALLFILTER, a = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            var n = R._bullet, s = this._btClosestRayResultCallback, o = lr._btTempVector30, l = lr._btTempVector31;
            if (n.btVector3_setValue(o, -e.x, e.y, e.z), n.btVector3_setValue(l, -t.x, t.y, t.z), 
            n.ClosestRayResultCallback_set_m_rayFromWorld(s, o), n.ClosestRayResultCallback_set_m_rayToWorld(s, l), 
            n.RayResultCallback_set_m_collisionFilterGroup(s, i), n.RayResultCallback_set_m_collisionFilterMask(s, a), 
            n.RayResultCallback_set_m_collisionObject(s, null), n.RayResultCallback_set_m_closestHitFraction(s, 1), 
            n.btCollisionWorld_rayTest(this._btCollisionWorld, o, l, s), n.RayResultCallback_hasHit(s)) {
                if (r) {
                    r.succeeded = !0, r.collider = or._physicObjectsMap[n.btCollisionObject_getUserIndex(n.RayResultCallback_get_m_collisionObject(s))], 
                    r.hitFraction = n.RayResultCallback_get_m_closestHitFraction(s);
                    var _ = n.ClosestRayResultCallback_get_m_hitPointWorld(s), h = r.point;
                    h.x = -n.btVector3_x(_), h.y = n.btVector3_y(_), h.z = n.btVector3_z(_);
                    var c = n.ClosestRayResultCallback_get_m_hitNormalWorld(s), d = r.normal;
                    d.x = -n.btVector3_x(c), d.y = n.btVector3_y(c), d.z = n.btVector3_z(c);
                }
                return !0;
            }
            return r && (r.succeeded = !1), !1;
        }
        raycastAllFromTo(e, t, r, i = Nt.COLLISIONFILTERGROUP_ALLFILTER, a = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            var n = R._bullet, s = this._btAllHitsRayResultCallback, o = lr._btTempVector30, l = lr._btTempVector31;
            r.length = 0, n.btVector3_setValue(o, -e.x, e.y, e.z), n.btVector3_setValue(l, -t.x, t.y, t.z), 
            n.AllHitsRayResultCallback_set_m_rayFromWorld(s, o), n.AllHitsRayResultCallback_set_m_rayToWorld(s, l), 
            n.RayResultCallback_set_m_collisionFilterGroup(s, i), n.RayResultCallback_set_m_collisionFilterMask(s, a);
            var _ = n.AllHitsRayResultCallback_get_m_collisionObjects(s), h = n.AllHitsRayResultCallback_get_m_hitPointWorld(s), c = n.AllHitsRayResultCallback_get_m_hitNormalWorld(s), d = n.AllHitsRayResultCallback_get_m_hitFractions(s);
            n.tBtCollisionObjectArray_clear(_), n.tVector3Array_clear(h), n.tVector3Array_clear(c), 
            n.tScalarArray_clear(d), n.btCollisionWorld_rayTest(this._btCollisionWorld, o, l, s);
            var u = n.tBtCollisionObjectArray_size(_);
            if (u > 0) {
                this._collisionsUtils.recoverAllHitResultsPool();
                for (var f = 0; f < u; f++) {
                    var m = this._collisionsUtils.getHitResult();
                    r.push(m), m.succeeded = !0, m.collider = or._physicObjectsMap[n.btCollisionObject_getUserIndex(n.tBtCollisionObjectArray_at(_, f))], 
                    m.hitFraction = n.tScalarArray_at(d, f);
                    var E = n.tVector3Array_at(h, f), T = m.point;
                    T.x = -n.btVector3_x(E), T.y = n.btVector3_y(E), T.z = n.btVector3_z(E);
                    var g = n.tVector3Array_at(c, f), p = m.normal;
                    p.x = -n.btVector3_x(g), p.y = n.btVector3_y(g), p.z = n.btVector3_z(g);
                }
                return !0;
            }
            return !1;
        }
        rayCast(e, t = null, r = 2147483647, i = Nt.COLLISIONFILTERGROUP_ALLFILTER, a = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            var s = e.origin, o = lr._tempVector30;
            return n.normalize(e.direction, o), n.scale(o, r, o), n.add(s, o, o), this.raycastFromTo(s, o, t, i, a);
        }
        rayCastAll(e, t, r = 2147483647, i = Nt.COLLISIONFILTERGROUP_ALLFILTER, a = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            var s = e.origin, o = lr._tempVector30;
            return n.normalize(e.direction, o), n.scale(o, r, o), n.add(s, o, o), this.raycastAllFromTo(s, o, t, i, a);
        }
        shapeCast(e, t, r, i = null, a = null, n = null, s = Nt.COLLISIONFILTERGROUP_ALLFILTER, o = Nt.COLLISIONFILTERGROUP_ALLFILTER, l = 0) {
            var _ = R._bullet, h = this._btClosestConvexResultCallback, c = lr._btTempVector30, d = lr._btTempVector31, u = lr._btTempQuaternion0, f = lr._btTempQuaternion1, m = lr._btTempTransform0, E = lr._btTempTransform1, T = e._btShape;
            if (_.btVector3_setValue(c, -t.x, t.y, t.z), _.btVector3_setValue(d, -r.x, r.y, r.z), 
            _.ConvexResultCallback_set_m_collisionFilterGroup(h, s), _.ConvexResultCallback_set_m_collisionFilterMask(h, o), 
            _.btTransform_setOrigin(m, c), _.btTransform_setOrigin(E, d), a ? (_.btQuaternion_setValue(u, -a.x, a.y, a.z, -a.w), 
            _.btTransform_setRotation(m, u)) : _.btTransform_setRotation(m, this._btDefaultQuaternion), 
            n ? (_.btQuaternion_setValue(f, -n.x, n.y, n.z, -n.w), _.btTransform_setRotation(E, f)) : _.btTransform_setRotation(E, this._btDefaultQuaternion), 
            _.ClosestConvexResultCallback_set_m_hitCollisionObject(h, null), _.ConvexResultCallback_set_m_closestHitFraction(h, 1), 
            _.btCollisionWorld_convexSweepTest(this._btCollisionWorld, T, m, E, h, l), _.ConvexResultCallback_hasHit(h)) {
                if (i) {
                    i.succeeded = !0, i.collider = or._physicObjectsMap[_.btCollisionObject_getUserIndex(_.ClosestConvexResultCallback_get_m_hitCollisionObject(h))], 
                    i.hitFraction = _.ConvexResultCallback_get_m_closestHitFraction(h);
                    var g = _.ClosestConvexResultCallback_get_m_hitPointWorld(h), p = _.ClosestConvexResultCallback_get_m_hitNormalWorld(h), S = i.point, v = i.normal;
                    S.x = -_.btVector3_x(g), S.y = _.btVector3_y(g), S.z = _.btVector3_z(g), v.x = -_.btVector3_x(p), 
                    v.y = _.btVector3_y(p), v.z = _.btVector3_z(p);
                }
                return !0;
            }
            return i && (i.succeeded = !1), !1;
        }
        shapeCastAll(e, t, r, i, a = null, n = null, s = Nt.COLLISIONFILTERGROUP_ALLFILTER, o = Nt.COLLISIONFILTERGROUP_ALLFILTER, l = 0) {
            var _ = R._bullet, h = this._btAllConvexResultCallback, c = lr._btTempVector30, d = lr._btTempVector31, u = lr._btTempQuaternion0, f = lr._btTempQuaternion1, m = lr._btTempTransform0, E = lr._btTempTransform1, T = e._btShape;
            i.length = 0, _.btVector3_setValue(c, -t.x, t.y, t.z), _.btVector3_setValue(d, -r.x, r.y, r.z), 
            _.ConvexResultCallback_set_m_collisionFilterGroup(h, s), _.ConvexResultCallback_set_m_collisionFilterMask(h, o), 
            _.btTransform_setOrigin(m, c), _.btTransform_setOrigin(E, d), a ? (_.btQuaternion_setValue(u, -a.x, a.y, a.z, -a.w), 
            _.btTransform_setRotation(m, u)) : _.btTransform_setRotation(m, this._btDefaultQuaternion), 
            n ? (_.btQuaternion_setValue(f, -n.x, n.y, n.z, -n.w), _.btTransform_setRotation(E, f)) : _.btTransform_setRotation(E, this._btDefaultQuaternion);
            var g = _.AllConvexResultCallback_get_m_collisionObjects(h);
            _.tBtCollisionObjectArray_clear(g), _.btCollisionWorld_convexSweepTest(this._btCollisionWorld, T, m, E, h, l);
            var p = _.tBtCollisionObjectArray_size(g);
            if (p > 0) {
                for (var S = _.AllConvexResultCallback_get_m_hitPointWorld(h), v = _.AllConvexResultCallback_get_m_hitNormalWorld(h), I = _.AllConvexResultCallback_get_m_hitFractions(h), x = 0; x < p; x++) {
                    var A = this._collisionsUtils.getHitResult();
                    i.push(A), A.succeeded = !0, A.collider = or._physicObjectsMap[_.btCollisionObject_getUserIndex(_.tBtCollisionObjectArray_at(g, x))], 
                    A.hitFraction = _.tScalarArray_at(I, x);
                    var D = _.tVector3Array_at(S, x), M = A.point;
                    M.x = -_.btVector3_x(D), M.y = _.btVector3_y(D), M.z = _.btVector3_z(D);
                    var L = _.tVector3Array_at(v, x), C = A.normal;
                    C.x = -_.btVector3_x(L), C.y = _.btVector3_y(L), C.z = _.btVector3_z(L);
                }
                return !0;
            }
            return !1;
        }
        addConstraint(e, t = !1) {
            if (!this._btDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            e._simulation = this;
        }
        removeConstraint(e) {
            if (!this._btDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
        }
        _updatePhysicsTransformFromRender() {
            for (var e = this._physicsUpdateList.elements, t = 0, r = this._physicsUpdateList.length; t < r; t++) {
                var i = e[t];
                i._derivePhysicsTransformation(!1), i._inPhysicUpdateListIndex = -1;
            }
            this._physicsUpdateList.length = 0;
        }
        _updateCharacters() {
            for (var e = 0, t = this._characters.length; e < t; e++) {
                var r = this._characters[e];
                r._updateTransformComponent(R._bullet.btCollisionObject_getWorldTransform(r._btColliderObject));
            }
        }
        _updateCollisions() {
            this._collisionsUtils.recoverAllContactPointsPool();
            var e = this._currentFrameCollisions;
            this._currentFrameCollisions = this._previousFrameCollisions, this._currentFrameCollisions.length = 0, 
            this._previousFrameCollisions = e;
            for (var r = t.Stat.loopCount, i = R._bullet, a = i.btDispatcher_getNumManifolds(this._btDispatcher), n = 0; n < a; n++) {
                var s, o = i.btDispatcher_getManifoldByIndexInternal(this._btDispatcher, n), l = or._physicObjectsMap[i.btCollisionObject_getUserIndex(i.btPersistentManifold_getBody0(o))], _ = or._physicObjectsMap[i.btCollisionObject_getUserIndex(i.btPersistentManifold_getBody1(o))], h = null, c = null;
                if ((l.isTrigger || _.isTrigger) && (l.owner._needProcessTriggers || _.owner._needProcessTriggers)) for (var d = i.btPersistentManifold_getNumContacts(o), u = 0; u < d; u++) {
                    var f = i.btPersistentManifold_getContactPoint(o, u), m = i.btManifoldPoint_getDistance(f);
                    if (m <= 0) {
                        c = (h = this._collisionsUtils.getCollision(l, _)).contacts, (s = h._updateFrame !== r) && (h._isTrigger = !0, 
                        c.length = 0);
                        break;
                    }
                } else if ((l.owner._needProcessCollisions || _.owner._needProcessCollisions) && (l._enableProcessCollisions || _._enableProcessCollisions)) for (d = i.btPersistentManifold_getNumContacts(o), 
                u = 0; u < d; u++) if (f = i.btPersistentManifold_getContactPoint(o, u), (m = i.btManifoldPoint_getDistance(f)) <= 0) {
                    var E = this._collisionsUtils.getContactPoints();
                    E.colliderA = l, E.colliderB = _, E.distance = m;
                    var T = i.btManifoldPoint_get_m_normalWorldOnB(f), g = E.normal;
                    g.x = -i.btVector3_x(T), g.y = i.btVector3_y(T), g.z = i.btVector3_z(T);
                    var p = i.btManifoldPoint_get_m_positionWorldOnA(f), S = E.positionOnA;
                    S.x = -i.btVector3_x(p), S.y = i.btVector3_y(p), S.z = i.btVector3_z(p);
                    var v = i.btManifoldPoint_get_m_positionWorldOnB(f), I = E.positionOnB;
                    I.x = -i.btVector3_x(v), I.y = i.btVector3_y(v), I.z = i.btVector3_z(v), h || (c = (h = this._collisionsUtils.getCollision(l, _)).contacts, 
                    (s = h._updateFrame !== r) && (h._isTrigger = !1, c.length = 0)), c.push(E);
                }
                h && s && (this._currentFrameCollisions.push(h), h._setUpdateFrame(r));
            }
        }
        _eventScripts() {
            for (var e = t.Stat.loopCount, r = 0, i = this._currentFrameCollisions.length; r < i; r++) {
                var a = this._currentFrameCollisions[r], n = a._colliderA, s = a._colliderB;
                if (!n.destroyed && !s.destroyed) if (e - a._lastUpdateFrame == 1) {
                    var o = n.owner, l = o._scripts;
                    if (l) if (a._isTrigger) {
                        if (o._needProcessTriggers) for (var _ = 0, h = l.length; _ < h; _++) l[_].onTriggerStay(s);
                    } else if (o._needProcessCollisions) for (_ = 0, h = l.length; _ < h; _++) a.other = s, 
                    l[_].onCollisionStay(a);
                    var c = s.owner, d = c._scripts;
                    if (d) if (a._isTrigger) {
                        if (c._needProcessTriggers) for (_ = 0, h = d.length; _ < h; _++) d[_].onTriggerStay(n);
                    } else if (c._needProcessCollisions) for (_ = 0, h = d.length; _ < h; _++) a.other = n, 
                    d[_].onCollisionStay(a);
                } else {
                    if (l = (o = n.owner)._scripts) if (a._isTrigger) {
                        if (o._needProcessTriggers) for (_ = 0, h = l.length; _ < h; _++) l[_].onTriggerEnter(s);
                    } else if (o._needProcessCollisions) for (_ = 0, h = l.length; _ < h; _++) a.other = s, 
                    l[_].onCollisionEnter(a);
                    if (d = (c = s.owner)._scripts) if (a._isTrigger) {
                        if (c._needProcessTriggers) for (_ = 0, h = d.length; _ < h; _++) d[_].onTriggerEnter(n);
                    } else if (c._needProcessCollisions) for (_ = 0, h = d.length; _ < h; _++) a.other = n, 
                    d[_].onCollisionEnter(a);
                }
            }
            for (r = 0, i = this._previousFrameCollisions.length; r < i; r++) {
                var u = this._previousFrameCollisions[r], f = u._colliderA, m = u._colliderB;
                if (!f.destroyed && !m.destroyed && e - u._updateFrame == 1) {
                    if (this._collisionsUtils.recoverCollision(u), l = (o = f.owner)._scripts) if (u._isTrigger) {
                        if (o._needProcessTriggers) for (_ = 0, h = l.length; _ < h; _++) l[_].onTriggerExit(m);
                    } else if (o._needProcessCollisions) for (_ = 0, h = l.length; _ < h; _++) u.other = m, 
                    l[_].onCollisionExit(u);
                    if (d = (c = m.owner)._scripts) if (u._isTrigger) {
                        if (c._needProcessTriggers) for (_ = 0, h = d.length; _ < h; _++) d[_].onTriggerExit(f);
                    } else if (c._needProcessCollisions) for (_ = 0, h = d.length; _ < h; _++) u.other = f, 
                    d[_].onCollisionExit(u);
                }
            }
        }
        clearForces() {
            if (!this._btDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            R._bullet.btDiscreteDynamicsWorld_clearForces(this._btDiscreteDynamicsWorld);
        }
    }
    lr.PHYSICSENGINEFLAGS_NONE = 0, lr.PHYSICSENGINEFLAGS_COLLISIONSONLY = 1, lr.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 2, 
    lr.PHYSICSENGINEFLAGS_MULTITHREADED = 4, lr.PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 8, 
    lr.SOLVERMODE_RANDMIZE_ORDER = 1, lr.SOLVERMODE_FRICTION_SEPARATE = 2, lr.SOLVERMODE_USE_WARMSTARTING = 4, 
    lr.SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16, lr.SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32, 
    lr.SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64, lr.SOLVERMODE_CACHE_FRIENDLY = 128, 
    lr.SOLVERMODE_SIMD = 256, lr.SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512, 
    lr.SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024, lr._tempVector30 = new n(), 
    lr.disableSimulation = !1;
    class _r {
        constructor() {
            this._eventList = [], this._mouseTouch = new Yt(), this._touchPool = [], this._touches = new Xt(), 
            this._multiTouchEnabled = !0, this._pushEventList = (e => {
                e.cancelable && e.preventDefault(), this._eventList.push(e);
            }).bind(this);
        }
        __init__(e, t) {
            this._scene = t, e.oncontextmenu = function(e) {
                return !1;
            };
        }
        _onCanvasEvent(e) {
            e.addEventListener("mousedown", this._pushEventList), e.addEventListener("mouseup", this._pushEventList, !0), 
            e.addEventListener("mousemove", this._pushEventList, !0), e.addEventListener("touchstart", this._pushEventList), 
            e.addEventListener("touchend", this._pushEventList, !0), e.addEventListener("touchmove", this._pushEventList, !0), 
            e.addEventListener("touchcancel", this._pushEventList, !0);
        }
        _offCanvasEvent(e) {
            e.removeEventListener("mousedown", this._pushEventList), e.removeEventListener("mouseup", this._pushEventList, !0), 
            e.removeEventListener("mousemove", this._pushEventList, !0), e.removeEventListener("touchstart", this._pushEventList), 
            e.removeEventListener("touchend", this._pushEventList, !0), e.removeEventListener("touchmove", this._pushEventList, !0), 
            e.removeEventListener("touchcancel", this._pushEventList, !0), this._eventList.length = 0, 
            this._touches.clear();
        }
        touchCount() {
            return this._touches.length;
        }
        get multiTouchEnabled() {
            return this._multiTouchEnabled;
        }
        set multiTouchEnabled(e) {
            this._multiTouchEnabled = e;
        }
        _getTouch(e) {
            var t = this._touchPool[e];
            return t || (t = new Zt(), this._touchPool[e] = t, t._identifier = e), t;
        }
        _mouseTouchDown() {
            var e = this._mouseTouch, r = e.sprite;
            if (e._pressedSprite = r, e._pressedLoopCount = t.Stat.loopCount, r) {
                var i = r._scripts;
                if (i) for (var a = 0, n = i.length; a < n; a++) i[a].onMouseDown();
            }
        }
        _mouseTouchUp() {
            var e, t, r = this._mouseTouch, i = r._pressedSprite;
            r._pressedSprite = null, r._pressedLoopCount = -1;
            var a = r.sprite;
            if (a && a === i) {
                var n = a._scripts;
                if (n) for (e = 0, t = n.length; e < t; e++) n[e].onMouseClick();
            }
            if (i) {
                var s = i._scripts;
                if (s) for (e = 0, t = s.length; e < t; e++) s[e].onMouseUp();
            }
        }
        _mouseTouchRayCast(e) {
            var t = _r._tempHitResult0, r = _r._tempVector20, i = _r._tempRay0;
            t.succeeded = !1;
            var a = this._mouseTouch.mousePositionX, n = this._mouseTouch.mousePositionY;
            r.x = a, r.y = n;
            for (var s = e.length - 1; s >= 0; s--) {
                var o = e[s], l = o.viewport;
                if (r.x >= l.x && r.y >= l.y && r.x <= l.width && r.y <= l.height) if (o.viewportPointToRay(r, i), 
                this._scene._physicsSimulation.rayCast(i, t) || o.clearFlag === Be.CLEARFLAG_SOLIDCOLOR || o.clearFlag === Be.CLEARFLAG_SKY) break;
            }
            var _ = this._mouseTouch, h = _.sprite;
            if (t.succeeded) {
                var c = t.collider.owner;
                _.sprite = c;
                var d = c._scripts;
                if (h !== c && d) for (var u = 0, f = d.length; u < f; u++) d[u].onMouseEnter();
            } else _.sprite = null;
            if (h && h !== c) {
                var m = h._scripts;
                if (m) for (u = 0, f = m.length; u < f; u++) m[u].onMouseOut();
            }
        }
        _changeTouches(e, r) {
            for (var i = 0, a = 0, n = this._touches.length, s = 0, o = e.length; s < o; s++) {
                var l = e[s], _ = l.identifier;
                if (this._multiTouchEnabled || 0 === _) {
                    var h = this._getTouch(_), c = h._position, d = _r._tempPoint;
                    d.setTo(l.pageX, l.pageY), t.ILaya.stage._canvasTransform.invertTransformPoint(d);
                    var u = d.x, f = d.y;
                    switch (r) {
                      case 0:
                        this._touches.add(h), i += u, a += f;
                        break;

                      case 1:
                        this._touches.remove(h), i -= u, a -= f;
                        break;

                      case 2:
                        i = u - c.x, a = f - c.y;
                    }
                    c.x = u, c.y = f;
                }
            }
            var m = this._touches.length;
            0 === m ? (this._mouseTouch.mousePositionX = 0, this._mouseTouch.mousePositionY = 0) : (this._mouseTouch.mousePositionX = (this._mouseTouch.mousePositionX * n + i) / m, 
            this._mouseTouch.mousePositionY = (this._mouseTouch.mousePositionY * n + a) / m);
        }
        _update() {
            var e, r, i, a, n = R._enablePhysics && !lr.disableSimulation;
            r = this._eventList.length;
            var s = this._scene._cameraPool;
            if (r > 0) {
                var o = !1;
                for (e = 0; e < r; e++) {
                    var l = this._eventList[e];
                    switch (l.type) {
                      case "mousedown":
                        n && this._mouseTouchDown();
                        break;

                      case "mouseup":
                        n && this._mouseTouchUp();
                        break;

                      case "mousemove":
                        var _ = _r._tempPoint;
                        _.setTo(l.pageX, l.pageY), t.ILaya.stage._canvasTransform.invertTransformPoint(_), 
                        this._mouseTouch.mousePositionX = _.x, this._mouseTouch.mousePositionY = _.y, n && (o = !0);
                        break;

                      case "touchstart":
                        var h = this._touches.length;
                        this._changeTouches(l.changedTouches, 0), n && (o = !0, 0 === h && this._mouseTouchDown());
                        break;

                      case "touchend":
                      case "touchcancel":
                        this._changeTouches(l.changedTouches, 1), n && 0 === this._touches.length && this._mouseTouchUp();
                        break;

                      case "touchmove":
                        this._changeTouches(l.changedTouches, 2), n && (o = !0);
                        break;

                      default:
                        throw "Input3D:unkonwn event type.";
                    }
                }
                o && this._mouseTouchRayCast(s), this._eventList.length = 0;
            }
            if (n) {
                var c = this._mouseTouch, d = c._pressedSprite;
                if (d && t.Stat.loopCount > c._pressedLoopCount) {
                    var u = d._scripts;
                    if (u) for (i = 0, a = u.length; i < a; i++) u[i].onMouseDrag();
                }
                var f = c.sprite;
                if (f) {
                    var m = f._scripts;
                    if (m) for (i = 0, a = m.length; i < a; i++) m[i].onMouseOver();
                }
            }
        }
        getTouch(e) {
            return e < this._touches.length ? this._touches.elements[e] : null;
        }
    }
    _r._tempPoint = new t.Point(), _r._tempVector20 = new i(), _r._tempRay0 = new Ie(new n(), new n()), 
    _r._tempHitResult0 = new jt();
    class hr {
        constructor() {
            this.flags = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60;
        }
    }
    class cr {
        static get vertexDeclaration() {
            return cr._vertexDeclaration;
        }
        static __init__() {
            cr._vertexDeclaration = new Ee(20, [ new Te(0, me.Vector3, ge.MESH_POSITION0), new Te(12, me.Vector2, ge.MESH_TEXTURECOORDINATE0) ]);
        }
        get position() {
            return this._position;
        }
        get textureCoordinate0() {
            return this._textureCoordinate0;
        }
        get vertexDeclaration() {
            return cr._vertexDeclaration;
        }
        constructor(e, t) {
            this._position = e, this._textureCoordinate0 = t;
        }
    }
    class dr extends Ve {
        constructor(r = 48, i = 48) {
            super();
            var a = t.LayaGL.instance;
            this._stacks = r, this._slices = i;
            for (var n = cr.vertexDeclaration, s = n.vertexStride / 4, o = (this._stacks + 1) * (this._slices + 1), l = 3 * this._stacks * (this._slices + 1) * 2, _ = new Float32Array(o * s), h = new Uint16Array(l), c = Math.PI / this._stacks, d = 2 * Math.PI / this._slices, u = 0, f = 0, m = 0, E = 0; E < this._stacks + 1; E++) for (var T = Math.sin(E * c), g = Math.cos(E * c), p = 0; p < this._slices + 1; p++) {
                var S = T * Math.sin(p * d), R = T * Math.cos(p * d);
                _[f + 0] = S * dr._radius, _[f + 1] = g * dr._radius, _[f + 2] = R * dr._radius, 
                _[f + 3] = -p / this._slices + .75, _[f + 4] = E / this._stacks, f += s, E != this._stacks - 1 && (h[m++] = u + 1, 
                h[m++] = u, h[m++] = u + (this._slices + 1), h[m++] = u + (this._slices + 1), h[m++] = u, 
                h[m++] = u + this._slices, u++);
            }
            this._vertexBuffer = new fe(4 * _.length, a.STATIC_DRAW, !1), this._vertexBuffer.vertexDeclaration = n, 
            this._indexBuffer = new be(e.IndexFormat.UInt16, h.length, a.STATIC_DRAW, !1), this._vertexBuffer.setData(_.buffer), 
            this._indexBuffer.setData(h);
            var v = new ye();
            v.bind(), v.applyVertexBuffer(this._vertexBuffer), v.applyIndexBuffer(this._indexBuffer), 
            v.unBind(), this._bufferState = v;
        }
        static __init__() {
            dr.instance = new dr();
        }
        get stacks() {
            return this._stacks;
        }
        get slices() {
            return this._slices;
        }
        _render(e) {
            var r = t.LayaGL.instance, i = this._indexBuffer.indexCount;
            r.drawElements(r.TRIANGLES, i, r.UNSIGNED_SHORT, 0), t.Stat.trianglesFaces += i / 3, 
            t.Stat.renderBatches++;
        }
    }
    dr._radius = 1;
    class ur {
        constructor() {
            this._length = 0, this._elements = [];
        }
        add(e) {
            this._length === this._elements.length ? this._elements.push(e) : this._elements[this._length] = e, 
            this._length++;
        }
        remove(e) {
            var t = this._elements.indexOf(e);
            if (this._length--, t !== this._length) {
                var r = this._elements[this._length];
                this._elements[t] = r;
            }
        }
        shift() {
            return this._length--, this._elements.shift();
        }
    }
    class fr extends ur {
        getSunLight() {
            for (var e, t = -1, r = this._elements, i = 0; i < this._length; i++) {
                var a = r[i]._intensity;
                t < a && (t = a, e = i);
            }
            return e;
        }
    }
    class mr extends ur {
        remove(e) {
            var t = this._elements.indexOf(e);
            this._elements.splice(t, 1), this._length--;
        }
    }
    class Er extends ue {
        constructor(e, r) {
            super(), this._floatCountPerVertices = 7, this._minUpdate = Number.MAX_VALUE, this._maxUpdate = Number.MIN_VALUE, 
            this._bufferState = new ye(), this._floatBound = new Float32Array(6), this._calculateBound = !1, 
            this._maxLineCount = 0, this._lineCount = 0;
            var i = 2 * r;
            this._owner = e, this._maxLineCount = r, this._vertices = new Float32Array(i * this._floatCountPerVertices), 
            this._vertexBuffer = new fe(kt.vertexDeclaration.vertexStride * i, t.LayaGL.instance.STATIC_DRAW, !1), 
            this._vertexBuffer.vertexDeclaration = kt.vertexDeclaration, this._bufferState.bind(), 
            this._bufferState.applyVertexBuffer(this._vertexBuffer), this._bufferState.unBind();
            var a = Er._tempVector0, n = Er._tempVector1;
            a.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), n.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), 
            this._bounds = new et(a, n);
        }
        _getType() {
            return Er._type;
        }
        _resizeLineData(e) {
            var r = 2 * e, i = this._vertices;
            this._vertexBuffer.destroy(), this._maxLineCount = e;
            var a = r * this._floatCountPerVertices;
            this._vertices = new Float32Array(a), this._vertexBuffer = new fe(kt.vertexDeclaration.vertexStride * r, t.LayaGL.instance.STATIC_DRAW, !1), 
            this._vertexBuffer.vertexDeclaration = kt.vertexDeclaration, a < i.length ? (this._vertices.set(new Float32Array(i.buffer, 0, a)), 
            this._vertexBuffer.setData(this._vertices.buffer, 0, 0, 4 * a)) : (this._vertices.set(i), 
            this._vertexBuffer.setData(this._vertices.buffer, 0, 0, 4 * i.length)), this._bufferState.bind(), 
            this._bufferState.applyVertexBuffer(this._vertexBuffer), this._bufferState.unBind();
        }
        _updateLineVertices(e, t, r, i, a) {
            t && (this._vertices[e + 0] = t.x, this._vertices[e + 1] = t.y, this._vertices[e + 2] = t.z), 
            i && (this._vertices[e + 3] = i.r, this._vertices[e + 4] = i.g, this._vertices[e + 5] = i.b, 
            this._vertices[e + 6] = i.a), r && (this._vertices[e + 7] = r.x, this._vertices[e + 8] = r.y, 
            this._vertices[e + 9] = r.z), a && (this._vertices[e + 10] = a.r, this._vertices[e + 11] = a.g, 
            this._vertices[e + 12] = a.b, this._vertices[e + 13] = a.a), this._minUpdate = Math.min(this._minUpdate, e), 
            this._maxUpdate = Math.max(this._maxUpdate, e + 2 * this._floatCountPerVertices);
            var s = this._bounds, o = this._floatBound, l = s.getMin(), _ = s.getMax();
            n.min(l, t, l), n.min(l, r, l), n.max(_, t, _), n.max(_, r, _), s.setMin(l), s.setMax(_), 
            o[0] = l.x, o[1] = l.y, o[2] = l.z, o[3] = _.x, o[4] = _.y, o[5] = _.z;
        }
        _reCalculateBound() {
            if (this._calculateBound) {
                var e = this._vertices, t = Er._tempVector0, r = Er._tempVector1;
                t.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), r.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
                for (var i = 0; i < 2 * this._lineCount; ++i) {
                    var a = this._floatCountPerVertices * i, n = e[a + 0], s = e[a + 1], o = e[a + 2];
                    t.x = Math.min(n, t.x), t.y = Math.min(s, t.y), t.z = Math.min(o, t.z), r.x = Math.max(n, r.x), 
                    r.y = Math.max(s, r.y), r.z = Math.max(o, r.z);
                }
                this._bounds.setMin(t), this._bounds.setMax(r);
                var l = this._floatBound;
                l[0] = t.x, l[1] = t.y, l[2] = t.z, l[3] = r.x, l[4] = r.y, l[5] = r.z, this._calculateBound = !1;
            }
        }
        _removeLineData(e) {
            var t = 2 * this._floatCountPerVertices, r = e + 1, i = e * t, a = this._vertices, n = new Float32Array(a.buffer, r * t * 4, (this._lineCount - r) * t);
            a.set(n, i), this._minUpdate = Math.min(this._minUpdate, i), this._maxUpdate = Math.max(this._maxUpdate, i + n.length), 
            this._lineCount--;
            var s = this._floatBound, o = a[i], l = a[i + 1], _ = a[i + 2], h = a[i + 7], c = a[i + 8], d = a[i + 9], u = s[0], f = s[1], m = s[2], E = s[3], T = s[4], g = s[5];
            o !== u && o !== E && l !== f && l !== T && _ !== m && _ !== g && h !== u && h !== E && c !== f && c !== T && d !== m && d !== g || (this._calculateBound = !0);
        }
        _updateLineData(e, t, r, i, a) {
            var n = 2 * this._floatCountPerVertices;
            this._updateLineVertices(e * n, t, r, i, a);
        }
        _updateLineDatas(e, t) {
            for (var r = 2 * this._floatCountPerVertices, i = t.length, a = 0; a < i; a++) {
                var n = t[a];
                this._updateLineVertices((e + a) * r, n.startPosition, n.endPosition, n.startColor, n.endColor);
            }
        }
        _getLineData(e, t) {
            var r = t.startPosition, i = t.startColor, a = t.endPosition, n = t.endColor, s = this._vertices, o = e * this._floatCountPerVertices * 2;
            r.x = s[o + 0], r.y = s[o + 1], r.z = s[o + 2], i.r = s[o + 3], i.g = s[o + 4], 
            i.b = s[o + 5], i.a = s[o + 6], a.x = s[o + 7], a.y = s[o + 8], a.z = s[o + 9], 
            n.r = s[o + 10], n.g = s[o + 11], n.b = s[o + 12], n.a = s[o + 13];
        }
        _prepareRender(e) {
            return !0;
        }
        _render(e) {
            if (this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE && (this._vertexBuffer.setData(this._vertices.buffer, 4 * this._minUpdate, 4 * this._minUpdate, 4 * (this._maxUpdate - this._minUpdate)), 
            this._minUpdate = Number.MAX_VALUE, this._maxUpdate = Number.MIN_VALUE), this._lineCount > 0) {
                this._bufferState.bind();
                var r = t.LayaGL.instance;
                r.drawArrays(r.LINES, 0, 2 * this._lineCount), t.Stat.renderBatches++;
            }
        }
        destroy() {
            this._destroyed || (super.destroy(), this._bufferState.destroy(), this._vertexBuffer.destroy(), 
            this._bufferState = null, this._vertexBuffer = null, this._vertices = null);
        }
    }
    Er._tempVector0 = new n(), Er._tempVector1 = new n(), Er._type = ue._typeCounter++;
    class Tr extends tt {
        constructor(e) {
            super(e), this._projectionViewWorldMatrix = new L();
        }
        _calculateBoundingBox() {
            var e = this._owner.transform.worldMatrix, r = this._owner._geometryFilter;
            if (r._reCalculateBound(), r._bounds._tranform(e, this._bounds), t.Render.supportWebGLPlusCulling) {
                var i = this._bounds.getMin(), a = this._bounds.getMax(), n = ce._cullingBuffer;
                n[this._cullingBufferIndex + 1] = i.x, n[this._cullingBufferIndex + 2] = i.y, n[this._cullingBufferIndex + 3] = i.z, 
                n[this._cullingBufferIndex + 4] = a.x, n[this._cullingBufferIndex + 5] = a.y, n[this._cullingBufferIndex + 6] = a.z;
            }
        }
        _renderUpdateWithCamera(e, t) {
            var r = e.projectionViewMatrix, i = this._shaderValues;
            if (t) {
                var a = t.worldMatrix;
                i.setMatrix4x4(le.WORLDMATRIX, a), L.multiply(r, a, this._projectionViewWorldMatrix), 
                i.setMatrix4x4(le.MVPMATRIX, this._projectionViewWorldMatrix);
            } else i.setMatrix4x4(le.WORLDMATRIX, L.DEFAULT), i.setMatrix4x4(le.MVPMATRIX, r);
        }
    }
    class gr extends _e {
        get maxLineCount() {
            return this._geometryFilter._maxLineCount;
        }
        set maxLineCount(e) {
            this._geometryFilter._resizeLineData(e), this._geometryFilter._lineCount = Math.min(this._geometryFilter._lineCount, e);
        }
        get lineCount() {
            return this._geometryFilter._lineCount;
        }
        set lineCount(e) {
            if (e > this.maxLineCount) throw "PixelLineSprite3D: lineCount can't large than maxLineCount";
            this._geometryFilter._lineCount = e;
        }
        get pixelLineRenderer() {
            return this._render;
        }
        constructor(e = 2, t = null) {
            super(t), this._geometryFilter = new Er(this, e), this._render = new Tr(this), this._changeRenderObjects(this._render, 0, Wt.defaultMaterial);
        }
        _changeRenderObjects(e, t, r) {
            var i = this._render._renderElements;
            r || (r = Wt.defaultMaterial);
            var a = i[t];
            a || (a = i[t] = new Ze()), a.setTransform(this._transform), a.setGeometry(this._geometryFilter), 
            a.render = this._render, a.material = r;
        }
        addLine(e, t, r, i) {
            if (this._geometryFilter._lineCount === this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount has equal with maxLineCount.";
            this._geometryFilter._updateLineData(this._geometryFilter._lineCount++, e, t, r, i);
        }
        addLines(e) {
            var t = this._geometryFilter._lineCount, r = e.length;
            if (t + r > this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.";
            this._geometryFilter._updateLineDatas(t, e), this._geometryFilter._lineCount += r;
        }
        removeLine(e) {
            if (!(e < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._removeLineData(e);
        }
        setLine(e, t, r, i, a) {
            if (!(e < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._updateLineData(e, t, r, i, a);
        }
        getLine(e, t) {
            if (!(e < this.lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._getLineData(e, t);
        }
        clear() {
            this._geometryFilter._lineCount = 0;
        }
        _create() {
            return new gr();
        }
    }
    class pr {
        constructor(e = !1) {
            this.isTransparent = !1, this.elements = new Qe(), this.lastTransparentRenderElement = null, 
            this.lastTransparentBatched = !1, this.isTransparent = e;
        }
        _compare(e, t) {
            var r = e.material.renderQueue - t.material.renderQueue;
            return 0 === r ? (this.isTransparent ? t.render._distanceForSort - e.render._distanceForSort : e.render._distanceForSort - t.render._distanceForSort) + t.render.sortingFudge - e.render.sortingFudge : r;
        }
        _partitionRenderObject(e, t) {
            for (var r = this.elements.elements, i = r[Math.floor((t + e) / 2)]; e <= t; ) {
                for (;this._compare(r[e], i) < 0; ) e++;
                for (;this._compare(r[t], i) > 0; ) t--;
                if (e < t) {
                    var a = r[e];
                    r[e] = r[t], r[t] = a, e++, t--;
                } else if (e === t) {
                    e++;
                    break;
                }
            }
            return e;
        }
        _quickSort(e, t) {
            if (this.elements.length > 1) {
                var r = this._partitionRenderObject(e, t), i = r - 1;
                e < i && this._quickSort(e, i), r < t && this._quickSort(r, t);
            }
        }
        _render(e) {
            for (var t = this.elements.elements, r = 0, i = this.elements.length; r < i; r++) t[r]._render(e);
        }
        clear() {
            this.elements.length = 0, this.lastTransparentRenderElement = null, this.lastTransparentBatched = !1;
        }
    }
    class Sr {
        constructor(e, t, r, i) {
            this._bounds = new $e(new n(), new n()), this._objects = [], this._isContaion = !1, 
            this.center = new n(), this.baseLength = 0, this._setValues(e, t, r, i);
        }
        static _encapsulates(e, t) {
            return Ae.boxContainsBox(e, t) == xe.Contains;
        }
        _setValues(e, t, r, i) {
            this._octree = e, this._parent = t, this.baseLength = r, i.cloneTo(this.center);
            var a = this._bounds.min, n = this._bounds.max, s = e._looseness * r / 2;
            a.setValue(i.x - s, i.y - s, i.z - s), n.setValue(i.x + s, i.y + s, i.z + s);
        }
        _getChildBound(e) {
            if (null != this._children && this._children[e]) return this._children[e]._bounds;
            var t = this.baseLength / 4, r = this.baseLength / 2 * this._octree._looseness / 2, i = Sr._tempBoundBox, a = i.min, n = i.max;
            switch (e) {
              case 0:
                a.x = this.center.x - t - r, a.y = this.center.y + t - r, a.z = this.center.z - t - r, 
                n.x = this.center.x - t + r, n.y = this.center.y + t + r, n.z = this.center.z - t + r;
                break;

              case 1:
                a.x = this.center.x + t - r, a.y = this.center.y + t - r, a.z = this.center.z - t - r, 
                n.x = this.center.x + t + r, n.y = this.center.y + t + r, n.z = this.center.z - t + r;
                break;

              case 2:
                a.x = this.center.x - t - r, a.y = this.center.y + t - r, a.z = this.center.z + t - r, 
                n.x = this.center.x - t + r, n.y = this.center.y + t + r, n.z = this.center.z + t + r;
                break;

              case 3:
                a.x = this.center.x + t - r, a.y = this.center.y + t - r, a.z = this.center.z + t - r, 
                n.x = this.center.x + t + r, n.y = this.center.y + t + r, n.z = this.center.z + t + r;
                break;

              case 4:
                a.x = this.center.x - t - r, a.y = this.center.y - t - r, a.z = this.center.z - t - r, 
                n.x = this.center.x - t + r, n.y = this.center.y - t + r, n.z = this.center.z - t + r;
                break;

              case 5:
                a.x = this.center.x + t - r, a.y = this.center.y - t - r, a.z = this.center.z - t - r, 
                n.x = this.center.x + t + r, n.y = this.center.y - t + r, n.z = this.center.z - t + r;
                break;

              case 6:
                a.x = this.center.x - t - r, a.y = this.center.y - t - r, a.z = this.center.z + t - r, 
                n.x = this.center.x - t + r, n.y = this.center.y - t + r, n.z = this.center.z + t + r;
                break;

              case 7:
                a.x = this.center.x + t - r, a.y = this.center.y - t - r, a.z = this.center.z + t - r, 
                n.x = this.center.x + t + r, n.y = this.center.y - t + r, n.z = this.center.z + t + r;
            }
            return i;
        }
        _getChildCenter(e) {
            if (null != this._children) return this._children[e].center;
            var t = this.baseLength / 4, r = Sr._tempVector30;
            switch (e) {
              case 0:
                r.x = this.center.x - t, r.y = this.center.y + t, r.z = this.center.z - t;
                break;

              case 1:
                r.x = this.center.x + t, r.y = this.center.y + t, r.z = this.center.z - t;
                break;

              case 2:
                r.x = this.center.x - t, r.y = this.center.y + t, r.z = this.center.z + t;
                break;

              case 3:
                r.x = this.center.x + t, r.y = this.center.y + t, r.z = this.center.z + t;
                break;

              case 4:
                r.x = this.center.x - t, r.y = this.center.y - t, r.z = this.center.z - t;
                break;

              case 5:
                r.x = this.center.x + t, r.y = this.center.y - t, r.z = this.center.z - t;
                break;

              case 6:
                r.x = this.center.x - t, r.y = this.center.y - t, r.z = this.center.z + t;
                break;

              case 7:
                r.x = this.center.x + t, r.y = this.center.y - t, r.z = this.center.z + t;
            }
            return r;
        }
        _getChild(e) {
            var t = this.baseLength / 4;
            switch (this._children || (this._children = []), e) {
              case 0:
                return this._children[0] || (this._children[0] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x + -t, this.center.y + t, this.center.z - t)));

              case 1:
                return this._children[1] || (this._children[1] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x + t, this.center.y + t, this.center.z - t)));

              case 2:
                return this._children[2] || (this._children[2] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x - t, this.center.y + t, this.center.z + t)));

              case 3:
                return this._children[3] || (this._children[3] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x + t, this.center.y + t, this.center.z + t)));

              case 4:
                return this._children[4] || (this._children[4] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x - t, this.center.y - t, this.center.z - t)));

              case 5:
                return this._children[5] || (this._children[5] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x + t, this.center.y - t, this.center.z - t)));

              case 6:
                return this._children[6] || (this._children[6] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x - t, this.center.y - t, this.center.z + t)));

              case 7:
                return this._children[7] || (this._children[7] = new Sr(this._octree, this, this.baseLength / 2, new n(this.center.x + t, this.center.y - t, this.center.z + t)));

              default:
                throw "BoundsOctreeNode: unknown index.";
            }
        }
        _shouldMerge() {
            for (var e = this._objects.length, t = 0; t < 8; t++) {
                var r = this._children[t];
                if (r) {
                    if (null != r._children) return !1;
                    e += r._objects.length;
                }
            }
            return e <= Sr._NUM_OBJECTS_ALLOWED;
        }
        _mergeChildren() {
            for (var e = 0; e < 8; e++) {
                var t = this._children[e];
                if (t) {
                    t._parent = null;
                    for (var r = t._objects, i = r.length - 1; i >= 0; i--) {
                        var a = r[i];
                        this._objects.push(a), a._setOctreeNode(this);
                    }
                }
            }
            this._children = null;
        }
        _merge() {
            if (null === this._children) {
                var e = this._parent;
                e && e._shouldMerge() && (e._mergeChildren(), e._merge());
            }
        }
        _checkAddNode(e) {
            if (null == this._children) {
                if (this._objects.length < Sr._NUM_OBJECTS_ALLOWED || this.baseLength / 2 < this._octree._minSize) return this;
                for (var t = this._objects.length - 1; t >= 0; t--) {
                    var r = this._objects[t], i = this._bestFitChild(r.bounds.getCenter());
                    Sr._encapsulates(this._getChildBound(i), r.bounds._getBoundBox()) && (this._objects.splice(this._objects.indexOf(r), 1), 
                    this._getChild(i)._add(r));
                }
            }
            var a = this._bestFitChild(e.bounds.getCenter());
            return Sr._encapsulates(this._getChildBound(a), e.bounds._getBoundBox()) ? this._getChild(a)._checkAddNode(e) : this;
        }
        _add(e) {
            var t = this._checkAddNode(e);
            t._objects.push(e), e._setOctreeNode(t);
        }
        _remove(e) {
            var t = this._objects.indexOf(e);
            this._objects.splice(t, 1), e._setOctreeNode(null), this._merge();
        }
        _addUp(e) {
            return Ae.boxContainsBox(this._bounds, e.bounds._getBoundBox()) === xe.Contains ? (this._add(e), 
            !0) : !!this._parent && this._parent._addUp(e);
        }
        _getCollidingWithFrustum(e, r, i, a, s, o, l) {
            if (i) {
                var _ = r.containsBoundBox(this._bounds);
                if (t.Stat.octreeNodeCulling++, _ === xe.Disjoint) return;
                i = _ === xe.Intersects;
            }
            this._isContaion = !i;
            for (var h = e.camera, c = e.scene, d = 0, u = this._objects.length; d < u; d++) {
                var f = this._objects[d];
                if (l ? f._castShadow && f._enable : h._isLayerVisible(f._owner._layer) && f._enable) {
                    if (i && (t.Stat.frustumCulling++, !f._needRender(r, e))) continue;
                    f._distanceForSort = n.distance(f.bounds.getCenter(), a);
                    for (var m = f._renderElements, E = 0, T = m.length; E < T; E++) {
                        m[E]._update(c, e, s, o);
                    }
                }
            }
            if (null != this._children) for (d = 0; d < 8; d++) {
                var g = this._children[d];
                g && g._getCollidingWithFrustum(e, r, i, a, s, o, l);
            }
        }
        _getCollidingWithBoundBox(e, t, r) {
            if (t) {
                var i = Ae.boxContainsBox(this._bounds, e);
                if (i === xe.Disjoint) return;
                t = i === xe.Intersects;
            }
            if (t) for (var a = 0, n = this._objects.length; a < n; a++) {
                var s = this._objects[a];
                Ae.intersectsBoxAndBox(s.bounds._getBoundBox(), e) && r.push(s);
            }
            if (null != this._children) for (a = 0; a < 8; a++) {
                this._children[a]._getCollidingWithBoundBox(e, t, r);
            }
        }
        _bestFitChild(e) {
            return (e.x <= this.center.x ? 0 : 1) + (e.y >= this.center.y ? 0 : 4) + (e.z <= this.center.z ? 0 : 2);
        }
        _update(e) {
            if (Ae.boxContainsBox(this._bounds, e.bounds._getBoundBox()) === xe.Contains) {
                var t = this._checkAddNode(e);
                if (t !== e._getOctreeNode()) {
                    t._objects.push(e), e._setOctreeNode(t);
                    var r = this._objects.indexOf(e);
                    this._objects.splice(r, 1), this._merge();
                }
                return !0;
            }
            if (this._parent) {
                var i = this._parent._addUp(e);
                return i && (r = this._objects.indexOf(e), this._objects.splice(r, 1), this._merge()), 
                i;
            }
            return !1;
        }
        add(e) {
            return !!Sr._encapsulates(this._bounds, e.bounds._getBoundBox()) && (this._add(e), 
            !0);
        }
        remove(e) {
            return e._getOctreeNode() === this && (this._remove(e), !0);
        }
        update(e) {
            return e._getOctreeNode() === this && this._update(e);
        }
        shrinkIfPossible(e) {
            if (this.baseLength < 2 * e) return this;
            for (var t = -1, r = 0, i = this._objects.length; r < i; r++) {
                var a = this._objects[r], n = this._bestFitChild(a.bounds.getCenter());
                if (0 != r && n != t) return this;
                var s = this._getChildBound(n);
                if (!Sr._encapsulates(s, a.bounds._getBoundBox())) return this;
                0 == r && (t = n);
            }
            if (null == this._children) {
                if (-1 != t) {
                    var o = this._getChildCenter(t);
                    this._setValues(this._octree, null, this.baseLength / 2, o);
                }
                return this;
            }
            var l = !1;
            for (r = 0, i = this._children.length; r < i; r++) {
                var _ = this._children[r];
                if (_ && _.hasAnyObjects()) {
                    if (l) return this;
                    if (t >= 0 && t != r) return this;
                    l = !0, t = r;
                }
            }
            if (-1 != t) {
                var h = this._children[t];
                return h._parent = null, h;
            }
            return this;
        }
        hasAnyObjects() {
            if (this._objects.length > 0) return !0;
            if (null != this._children) for (var e = 0; e < 8; e++) {
                var t = this._children[e];
                if (t && t.hasAnyObjects()) return !0;
            }
            return !1;
        }
        getCollidingWithBoundBox(e, t) {
            this._getCollidingWithBoundBox(e, !0, t);
        }
        getCollidingWithRay(e, t, r = Number.MAX_VALUE) {
            var i = Ae.intersectsRayAndBoxRD(e, this._bounds);
            if (!(-1 == i || i > r)) {
                for (var a = 0, n = this._objects.length; a < n; a++) {
                    var s = this._objects[a];
                    -1 !== (i = Ae.intersectsRayAndBoxRD(e, s.bounds._getBoundBox())) && i <= r && t.push(s);
                }
                if (null != this._children) for (a = 0; a < 8; a++) {
                    this._children[a].getCollidingWithRay(e, t, r);
                }
            }
        }
        getCollidingWithFrustum(e, t, r, i) {
            var a = e.camera.transform.position, n = e.camera.boundFrustum;
            this._getCollidingWithFrustum(e, n, !0, a, t, r, i);
        }
        isCollidingWithBoundBox(e) {
            if (!Ae.intersectsBoxAndBox(this._bounds, e)) return !1;
            for (var t = 0, r = this._objects.length; t < r; t++) {
                var i = this._objects[t];
                if (Ae.intersectsBoxAndBox(i.bounds._getBoundBox(), e)) return !0;
            }
            if (null != this._children) for (t = 0; t < 8; t++) {
                if (this._children[t].isCollidingWithBoundBox(e)) return !0;
            }
            return !1;
        }
        isCollidingWithRay(e, t = Number.MAX_VALUE) {
            var r = Ae.intersectsRayAndBoxRD(e, this._bounds);
            if (-1 == r || r > t) return !1;
            for (var i = 0, a = this._objects.length; i < a; i++) {
                var n = this._objects[i];
                if (-1 !== (r = Ae.intersectsRayAndBoxRD(e, n.bounds._getBoundBox())) && r <= t) return !0;
            }
            if (null != this._children) for (i = 0; i < 8; i++) {
                if (this._children[i].isCollidingWithRay(e, t)) return !0;
            }
            return !1;
        }
        getBound() {
            return this._bounds;
        }
        drawAllBounds(e, t, r) {
            if (null !== this._children || 0 != this._objects.length) {
                t++;
                var i = Sr._tempColor0;
                if (this._isContaion) i.r = 0, i.g = 0, i.b = 1; else {
                    var a = r ? t / r : 0;
                    i.r = 1 - a, i.g = a, i.b = 0;
                }
                if (i.a = .3, v._drawBound(e, this._bounds, i), null != this._children) for (var n = 0; n < 8; n++) {
                    var s = this._children[n];
                    s && s.drawAllBounds(e, t, r);
                }
            }
        }
        drawAllObjects(e, t, r) {
            t++;
            var i = Sr._tempColor0;
            if (this._isContaion) i.r = 0, i.g = 0, i.b = 1; else {
                var a = r ? t / r : 0;
                i.r = 1 - a, i.g = a, i.b = 0;
            }
            i.a = 1;
            for (var n = 0, s = this._objects.length; n < s; n++) v._drawBound(e, this._objects[n].bounds._getBoundBox(), i);
            if (null != this._children) for (n = 0; n < 8; n++) {
                var o = this._children[n];
                o && o.drawAllObjects(e, t, r);
            }
        }
    }
    Sr._tempVector3 = new n(), Sr._tempVector30 = new n(), Sr._tempVector31 = new n(), 
    Sr._tempColor0 = new ne(), Sr._tempBoundBox = new $e(new n(), new n()), Sr._NUM_OBJECTS_ALLOWED = 8;
    class Rr extends Qe {
        constructor() {
            super();
        }
        add(e) {
            if (-1 !== e._getIndexInMotionList()) throw "OctreeMotionList:element has  in  PhysicsUpdateList.";
            this._add(e), e._setIndexInMotionList(this.length++);
        }
        remove(e) {
            var t = e._getIndexInMotionList();
            if (this.length--, t !== this.length) {
                var r = this.elements[this.length];
                this.elements[t] = r, r._setIndexInMotionList(t);
            }
            e._setIndexInMotionList(-1);
        }
    }
    class vr {
        constructor(e, t, r, i) {
            this._motionObjects = new Rr(), this.count = 0, r > e && (console.warn("Minimum node size must be at least as big as the initial world size. Was: " + r + " Adjusted to: " + e), 
            r = e), this._initialSize = e, this._minSize = r, this._looseness = Math.min(Math.max(i, 1), 2), 
            this._rootNode = new Sr(this, null, e, t);
        }
        _getMaxDepth(e, t) {
            t++;
            var r = e._children;
            if (null != r) for (var i = t, a = 0, n = r.length; a < n; a++) {
                var s = r[a];
                s && (t = Math.max(this._getMaxDepth(s, i), t));
            }
            return t;
        }
        _grow(e) {
            var t = e.x >= 0 ? 1 : -1, r = e.y >= 0 ? 1 : -1, i = e.z >= 0 ? 1 : -1, a = this._rootNode, s = this._rootNode.baseLength / 2, o = 2 * this._rootNode.baseLength, l = this._rootNode.center, _ = new n(l.x + t * s, l.y + r * s, l.z + i * s);
            if (this._rootNode = new Sr(this, null, o, _), a.hasAnyObjects()) {
                for (var h = this._rootNode._bestFitChild(a.center), c = [], d = 0; d < 8; d++) d == h && (a._parent = this._rootNode, 
                c[d] = a);
                this._rootNode._children = c;
            }
        }
        add(e) {
            for (var t = 0; !this._rootNode.add(e); ) {
                var r = vr._tempVector30;
                if (n.subtract(e.bounds.getCenter(), this._rootNode.center, r), this._grow(r), ++t > 20) throw "Aborted Add operation as it seemed to be going on forever (" + (t - 1) + ") attempts at growing the octree.";
            }
            this.count++;
        }
        remove(e) {
            var t = e._getOctreeNode().remove(e);
            return t && this.count--, t;
        }
        update(e) {
            var t = 0, r = e._getOctreeNode();
            if (r) {
                for (;!r._update(e); ) {
                    var i = vr._tempVector30;
                    if (n.subtract(e.bounds.getCenter(), this._rootNode.center, i), this._grow(i), ++t > 20) throw "Aborted Add operation as it seemed to be going on forever (" + (t - 1) + ") attempts at growing the octree.";
                }
                return !0;
            }
            return !1;
        }
        shrinkRootIfPossible() {
            this._rootNode = this._rootNode.shrinkIfPossible(this._initialSize);
        }
        addMotionObject(e) {
            this._motionObjects.add(e);
        }
        removeMotionObject(e) {
            this._motionObjects.remove(e);
        }
        updateMotionObjects() {
            for (var e = this._motionObjects.elements, t = 0, r = this._motionObjects.length; t < r; t++) {
                var i = e[t];
                this.update(i), i._setIndexInMotionList(-1);
            }
            this._motionObjects.length = 0;
        }
        isCollidingWithBoundBox(e) {
            return this._rootNode.isCollidingWithBoundBox(e);
        }
        isCollidingWithRay(e, t = Number.MAX_VALUE) {
            return this._rootNode.isCollidingWithRay(e, t);
        }
        getCollidingWithBoundBox(e, t) {
            this._rootNode.getCollidingWithBoundBox(e, t);
        }
        getCollidingWithRay(e, t, r = Number.MAX_VALUE) {
            this._rootNode.getCollidingWithRay(e, t, r);
        }
        getCollidingWithFrustum(e, t, r, i) {
            this._rootNode.getCollidingWithFrustum(e, t, r, i);
        }
        getMaxBounds() {
            return this._rootNode.getBound();
        }
        drawAllBounds(e) {
            var t = this._getMaxDepth(this._rootNode, -1);
            this._rootNode.drawAllBounds(e, -1, t);
        }
        drawAllObjects(e) {
            var t = this._getMaxDepth(this._rootNode, -1);
            this._rootNode.drawAllObjects(e, -1, t);
        }
    }
    vr._tempVector30 = new n();
    class Ir extends t.Sprite {
        constructor() {
            if (super(), this._lightCount = 0, this._pointLights = new ur(), this._spotLights = new ur(), 
            this._directionLights = new fr(), this._alternateLights = new mr(), this._lightmaps = [], 
            this._skyRenderer = new Fe(), this._reflectionMode = 1, this._input = new _r(), 
            this._timer = t.ILaya.timer, this._collsionTestList = [], this._renders = new Xt(), 
            this._opaqueQueue = new pr(!1), this._transparentQueue = new pr(!0), this._cameraPool = [], 
            this._animatorPool = new Xt(), this._scriptPool = new Array(), this._tempScriptPool = new Array(), 
            this._needClearScriptPool = !1, this.currentCreationLayer = Math.pow(2, 0), this.enableLight = !0, 
            this._key = new t.SubmitKey(), this._time = 0, this._pickIdToSprite = new Object(), 
            R._enablePhysics && (this._physicsSimulation = new lr(Ir.physicsSettings)), this._shaderValues = new z(null), 
            this.parallelSplitShadowMaps = [], this.enableFog = !1, this.fogStart = 300, this.fogRange = 1e3, 
            this.fogColor = new n(.7, .7, .7), this.ambientColor = new n(.212, .227, .259), 
            this.reflectionIntensity = 1, s._config._multiLighting || this._shaderValues.addDefine(G.SHADERDEFINE_LEGACYSINGALLIGHTING), 
            t.Render.supportWebGLPlusCulling && (this._cullingBufferIndices = new Int32Array(1024), 
            this._cullingBufferResult = new Int32Array(1024)), this._scene = this, this._input.__init__(t.Render.canvas, this), 
            Ir.octreeCulling && (this._octree = new vr(Ir.octreeInitialSize, Ir.octreeInitialCenter, Ir.octreeMinNodeSize, Ir.octreeLooseness)), 
            ce.debugFrustumCulling) {
                this._debugTool = new gr();
                var e = new Wt();
                e.renderQueue = Y.RENDERQUEUE_TRANSPARENT, e.alphaTest = !1, e.depthWrite = !1, 
                e.cull = q.CULL_BACK, e.blend = q.BLEND_ENABLE_ALL, e.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                e.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, e.depthTest = q.DEPTHTEST_LESS, this._debugTool.pixelLineRenderer.sharedMaterial = e;
            }
        }
        static __init__() {
            var e = s._config;
            if (e._multiLighting) {
                const i = 4;
                var t = e.maxLightCount, r = e.lightClusterCount;
                Re.instance = new Re(r.x, r.y, r.z, Math.min(e.maxLightCount, e._maxAreaLightCountPerClusterAverage)), 
                Ir._lightTexture = v._createFloatTextureBuffer(i, t), Ir._lightTexture.lock = !0, 
                Ir._lightPixles = new Float32Array(t * i * 4);
            }
            j.SHADERDEFINE_FOG = G.getDefineByName("FOG"), j.SHADERDEFINE_DIRECTIONLIGHT = G.getDefineByName("DIRECTIONLIGHT"), 
            j.SHADERDEFINE_POINTLIGHT = G.getDefineByName("POINTLIGHT"), j.SHADERDEFINE_SPOTLIGHT = G.getDefineByName("SPOTLIGHT"), 
            j.SHADERDEFINE_CAST_SHADOW = G.getDefineByName("CASTSHADOW"), j.SHADERDEFINE_SHADOW_PSSM1 = G.getDefineByName("SHADOWMAP_PSSM1"), 
            j.SHADERDEFINE_SHADOW_PSSM2 = G.getDefineByName("SHADOWMAP_PSSM2"), j.SHADERDEFINE_SHADOW_PSSM3 = G.getDefineByName("SHADOWMAP_PSSM3"), 
            j.SHADERDEFINE_SHADOW_PCF_NO = G.getDefineByName("SHADOWMAP_PCF_NO"), j.SHADERDEFINE_SHADOW_PCF1 = G.getDefineByName("SHADOWMAP_PCF1"), 
            j.SHADERDEFINE_SHADOW_PCF2 = G.getDefineByName("SHADOWMAP_PCF2"), j.SHADERDEFINE_SHADOW_PCF3 = G.getDefineByName("SHADOWMAP_PCF3"), 
            j.SHADERDEFINE_REFLECTMAP = G.getDefineByName("REFLECTMAP");
        }
        static load(e, r) {
            t.ILaya.loader.create(e, r, null, Ir.HIERARCHY);
        }
        _allotPickColorByID(e, t) {
            var r = Math.floor(e / 65025);
            e -= 255 * r * 255;
            var i = Math.floor(e / 255), a = e -= 255 * i;
            t.x = r / 255, t.y = i / 255, t.z = a / 255, t.w = 1;
        }
        _searchIDByPickColor(e) {
            return 255 * e.x * 255 + 255 * e.y + e.z;
        }
        get url() {
            return this._url;
        }
        get enableFog() {
            return this._enableFog;
        }
        set enableFog(e) {
            this._enableFog !== e && (this._enableFog = e, e ? this._shaderValues.addDefine(j.SHADERDEFINE_FOG) : this._shaderValues.removeDefine(j.SHADERDEFINE_FOG));
        }
        get fogColor() {
            return this._shaderValues.getVector3(Ir.FOGCOLOR);
        }
        set fogColor(e) {
            this._shaderValues.setVector3(Ir.FOGCOLOR, e);
        }
        get fogStart() {
            return this._shaderValues.getNumber(Ir.FOGSTART);
        }
        set fogStart(e) {
            this._shaderValues.setNumber(Ir.FOGSTART, e);
        }
        get fogRange() {
            return this._shaderValues.getNumber(Ir.FOGRANGE);
        }
        set fogRange(e) {
            this._shaderValues.setNumber(Ir.FOGRANGE, e);
        }
        get ambientColor() {
            return this._shaderValues.getVector3(Ir.AMBIENTCOLOR);
        }
        set ambientColor(e) {
            this._shaderValues.setVector3(Ir.AMBIENTCOLOR, e);
        }
        get skyRenderer() {
            return this._skyRenderer;
        }
        get customReflection() {
            return this._shaderValues.getTexture(Ir.REFLECTIONTEXTURE);
        }
        set customReflection(e) {
            this._shaderValues.setTexture(Ir.REFLECTIONTEXTURE, e), e ? this._shaderValues.addDefine(j.SHADERDEFINE_REFLECTMAP) : this._shaderValues.removeDefine(j.SHADERDEFINE_REFLECTMAP);
        }
        get reflectionIntensity() {
            return this._shaderValues.getNumber(Ir.REFLETIONINTENSITY);
        }
        set reflectionIntensity(e) {
            e = Math.max(Math.min(e, 1), 0), this._shaderValues.setNumber(Ir.REFLETIONINTENSITY, e);
        }
        get physicsSimulation() {
            return this._physicsSimulation;
        }
        get reflectionMode() {
            return this._reflectionMode;
        }
        set reflectionMode(e) {
            this._reflectionMode = e;
        }
        get timer() {
            return this._timer;
        }
        set timer(e) {
            this._timer = e;
        }
        get input() {
            return this._input;
        }
        _setLightmapToChildNode(e) {
            e instanceof _e && e._render._applyLightMapParams();
            for (var t = e._children, r = 0, i = t.length; r < i; r++) this._setLightmapToChildNode(t[r]);
        }
        _update() {
            var e = this.timer._delta / 1e3;
            this._time += e, this._shaderValues.setNumber(Ir.TIME, this._time);
            var t = this._physicsSimulation;
            R._enablePhysics && !lr.disableSimulation && (t._updatePhysicsTransformFromRender(), 
            or._addUpdateList = !1, t._simulate(e), t._updateCharacters(), or._addUpdateList = !0, 
            t._updateCollisions(), t._eventScripts()), this._input._update(), this._clearScript(), 
            this._updateScript(), N._update(this), this._lateUpdateScript();
        }
        _binarySearchIndexInCameraPool(e) {
            for (var t, r = 0, i = this._cameraPool.length - 1; r <= i; ) {
                t = Math.floor((r + i) / 2);
                var a = this._cameraPool[t]._renderingOrder;
                if (a == e._renderingOrder) return t;
                a > e._renderingOrder ? i = t - 1 : r = t + 1;
            }
            return r;
        }
        onEnable() {
            this._input._onCanvasEvent(t.Render.canvas);
        }
        onDisable() {
            this._input._offCanvasEvent(t.Render.canvas);
        }
        _setCreateURL(e) {
            this._url = t.URL.formatURL(e);
        }
        _getGroup() {
            return this._group;
        }
        _setGroup(e) {
            this._group = e;
        }
        _clearScript() {
            if (this._needClearScriptPool) {
                for (var e = this._scriptPool, t = 0, r = e.length; t < r; t++) {
                    var i = e[t];
                    i && (i._indexInPool = this._tempScriptPool.length, this._tempScriptPool.push(i));
                }
                this._scriptPool = this._tempScriptPool, e.length = 0, this._tempScriptPool = e, 
                this._needClearScriptPool = !1;
            }
        }
        _updateScript() {
            for (var e = this._scriptPool, t = 0, r = e.length; t < r; t++) {
                var i = e[t];
                i && i.enabled && i.onUpdate();
            }
        }
        _lateUpdateScript() {
            for (var e = this._scriptPool, t = 0, r = e.length; t < r; t++) {
                var i = e[t];
                i && i.enabled && i.onLateUpdate();
            }
        }
        _addScript(e) {
            var t = this._scriptPool;
            e._indexInPool = t.length, t.push(e);
        }
        _removeScript(e) {
            this._scriptPool[e._indexInPool] = null, e._indexInPool = -1, this._needClearScriptPool = !0;
        }
        _preRenderScript() {
            for (var e = this._scriptPool, t = 0, r = e.length; t < r; t++) {
                var i = e[t];
                i && i.enabled && i.onPreRender();
            }
        }
        _postRenderScript() {
            for (var e = this._scriptPool, t = 0, r = e.length; t < r; t++) {
                var i = e[t];
                i && i.enabled && i.onPostRender();
            }
        }
        _prepareSceneToRender() {
            var e = this._shaderValues;
            if (s._config._multiLighting) {
                var t = Ir._lightTexture, r = Ir._lightPixles;
                const s = t.width, R = 4 * s;
                var i = 0, a = this._directionLights._length, o = this._directionLights._elements;
                if (a > 0) {
                    for (var l = this._directionLights.getSunLight(), _ = 0; _ < a; _++, i++) {
                        var h = (p = o[_])._direction, c = p._intensityColor, d = R * i;
                        n.scale(p.color, p._intensity, c), p.transform.worldMatrix.getForward(h), n.normalize(h, h), 
                        r[d] = c.x, r[d + 1] = c.y, r[d + 2] = c.z, r[d + 4] = h.x, r[d + 5] = h.y, r[d + 6] = h.z, 
                        _ == l && (e.setVector3(Ir.SUNLIGHTDIRCOLOR, c), e.setVector3(Ir.SUNLIGHTDIRECTION, h));
                    }
                    e.addDefine(j.SHADERDEFINE_DIRECTIONLIGHT);
                } else e.removeDefine(j.SHADERDEFINE_DIRECTIONLIGHT);
                var u = this._pointLights._length;
                if (u > 0) {
                    var f = this._pointLights._elements;
                    for (_ = 0; _ < u; _++, i++) {
                        var m = (S = f[_]).transform.position;
                        c = S._intensityColor, d = R * i;
                        n.scale(S.color, S._intensity, c), r[d] = c.x, r[d + 1] = c.y, r[d + 2] = c.z, r[d + 3] = S.range, 
                        r[d + 4] = m.x, r[d + 5] = m.y, r[d + 6] = m.z;
                    }
                    e.addDefine(j.SHADERDEFINE_POINTLIGHT);
                } else e.removeDefine(j.SHADERDEFINE_POINTLIGHT);
                var E = this._spotLights._length;
                if (E > 0) {
                    var T = this._spotLights._elements;
                    for (_ = 0; _ < E; _++, i++) {
                        var g = T[_];
                        h = g._direction, m = g.transform.position, c = g._intensityColor, d = R * i;
                        n.scale(g.color, g._intensity, c), g.transform.worldMatrix.getForward(h), n.normalize(h, h), 
                        r[d] = c.x, r[d + 1] = c.y, r[d + 2] = c.z, r[d + 3] = g.range, r[d + 4] = m.x, 
                        r[d + 5] = m.y, r[d + 6] = m.z, r[d + 7] = g.spotAngle * Math.PI / 180, r[d + 8] = h.x, 
                        r[d + 9] = h.y, r[d + 10] = h.z;
                    }
                    e.addDefine(j.SHADERDEFINE_SPOTLIGHT);
                } else e.removeDefine(j.SHADERDEFINE_SPOTLIGHT);
                i > 0 && t.setSubPixels(0, 0, s, i, r, 0), e.setTexture(Ir.LIGHTBUFFER, t), e.setInt(Ir.DIRECTIONLIGHTCOUNT, this._directionLights._length), 
                e.setTexture(Ir.CLUSTERBUFFER, Re.instance._clusterTexture);
            } else {
                if (this._directionLights._length > 0) {
                    var p = this._directionLights._elements[0];
                    n.scale(p.color, p._intensity, p._intensityColor), p.transform.worldMatrix.getForward(p._direction), 
                    n.normalize(p._direction, p._direction), e.setVector3(Ir.LIGHTDIRCOLOR, p._intensityColor), 
                    e.setVector3(Ir.LIGHTDIRECTION, p._direction), e.setVector3(Ir.SUNLIGHTDIRCOLOR, p._intensityColor), 
                    e.setVector3(Ir.SUNLIGHTDIRECTION, p._direction), e.addDefine(j.SHADERDEFINE_DIRECTIONLIGHT);
                } else e.removeDefine(j.SHADERDEFINE_DIRECTIONLIGHT);
                if (this._pointLights._length > 0) {
                    var S = this._pointLights._elements[0];
                    n.scale(S.color, S._intensity, S._intensityColor), e.setVector3(Ir.POINTLIGHTCOLOR, S._intensityColor), 
                    e.setVector3(Ir.POINTLIGHTPOS, S.transform.position), e.setNumber(Ir.POINTLIGHTRANGE, S.range), 
                    e.addDefine(j.SHADERDEFINE_POINTLIGHT);
                } else e.removeDefine(j.SHADERDEFINE_POINTLIGHT);
                if (this._spotLights._length > 0) {
                    var R = this._spotLights._elements[0];
                    n.scale(R.color, R._intensity, R._intensityColor), e.setVector3(Ir.SPOTLIGHTCOLOR, R._intensityColor), 
                    e.setVector3(Ir.SPOTLIGHTPOS, R.transform.position), R.transform.worldMatrix.getForward(R._direction), 
                    n.normalize(R._direction, R._direction), e.setVector3(Ir.SPOTLIGHTDIRECTION, R._direction), 
                    e.setNumber(Ir.SPOTLIGHTRANGE, R.range), e.setNumber(Ir.SPOTLIGHTSPOTANGLE, R.spotAngle * Math.PI / 180), 
                    e.addDefine(j.SHADERDEFINE_SPOTLIGHT);
                } else e.removeDefine(j.SHADERDEFINE_SPOTLIGHT);
            }
        }
        _addCamera(e) {
            for (var t = this._binarySearchIndexInCameraPool(e), r = e._renderingOrder, i = this._cameraPool.length; t < i && this._cameraPool[t]._renderingOrder <= r; ) t++;
            this._cameraPool.splice(t, 0, e);
        }
        _removeCamera(e) {
            this._cameraPool.splice(this._cameraPool.indexOf(e), 1);
        }
        _preCulling(e, t, r, i) {
            ce.renderObjectCulling(t, this, e, r, i, !1);
        }
        _clear(e, r) {
            var i, a, n, s = r.viewport, o = r.camera, l = o._getRenderTexture(), _ = s.width, h = s.height;
            o._needInternalRenderTexture() ? (i = 0, a = 0) : (i = s.x, a = o._getCanvasHeight() - s.y - h), 
            e.viewport(i, a, _, h);
            var c = o.clearFlag;
            switch (c !== Be.CLEARFLAG_SKY || o.skyRenderer._isAvailable() || this._skyRenderer._isAvailable() || (c = Be.CLEARFLAG_SOLIDCOLOR), 
            c) {
              case Be.CLEARFLAG_SOLIDCOLOR:
                var d = o.clearColor;
                if (e.enable(e.SCISSOR_TEST), e.scissor(i, a, _, h), d ? e.clearColor(d.x, d.y, d.z, d.w) : e.clearColor(0, 0, 0, 0), 
                l) switch (n = e.COLOR_BUFFER_BIT, l.depthStencilFormat) {
                  case t.RenderTextureDepthFormat.DEPTH_16:
                    n |= e.DEPTH_BUFFER_BIT;
                    break;

                  case t.RenderTextureDepthFormat.STENCIL_8:
                    n |= e.STENCIL_BUFFER_BIT;
                    break;

                  case t.RenderTextureDepthFormat.DEPTHSTENCIL_16_8:
                    n |= e.DEPTH_BUFFER_BIT, n |= e.STENCIL_BUFFER_BIT;
                } else n = e.COLOR_BUFFER_BIT | e.DEPTH_BUFFER_BIT;
                t.WebGLContext.setDepthMask(e, !0), e.clear(n), e.disable(e.SCISSOR_TEST);
                break;

              case Be.CLEARFLAG_SKY:
              case Be.CLEARFLAG_DEPTHONLY:
                if (e.enable(e.SCISSOR_TEST), e.scissor(i, a, _, h), l) switch (l.depthStencilFormat) {
                  case t.RenderTextureDepthFormat.DEPTH_16:
                    n = e.DEPTH_BUFFER_BIT;
                    break;

                  case t.RenderTextureDepthFormat.STENCIL_8:
                    n = e.STENCIL_BUFFER_BIT;
                    break;

                  case t.RenderTextureDepthFormat.DEPTHSTENCIL_16_8:
                    n = e.DEPTH_BUFFER_BIT | e.STENCIL_BUFFER_BIT;
                } else n = e.DEPTH_BUFFER_BIT;
                t.WebGLContext.setDepthMask(e, !0), e.clear(n), e.disable(e.SCISSOR_TEST);
                break;

              case Be.CLEARFLAG_NONE:
                break;

              default:
                throw new Error("BaseScene:camera clearFlag invalid.");
            }
        }
        _renderScene(e) {
            var t = e.camera;
            if (this._opaqueQueue._render(e), t.clearFlag === Be.CLEARFLAG_SKY && (t.skyRenderer._isAvailable() ? t.skyRenderer._render(e) : this._skyRenderer._isAvailable() && this._skyRenderer._render(e)), 
            this._transparentQueue._render(e), ce.debugFrustumCulling) for (var r = this._debugTool._render._renderElements, i = 0, a = r.length; i < a; i++) r[i]._update(this, e, null, null), 
            r[i]._render(e);
        }
        _parse(e, r) {
            var i = e.lightmaps;
            if (i) {
                for (var a = i.length, n = [], s = 0; s < a; s++) n[s] = t.Loader.getRes(i[s].path);
                this.setlightmaps(n);
            }
            var o = e.ambientColor;
            if (o) {
                var l = this.ambientColor;
                l.fromArray(o), this.ambientColor = l;
            }
            var _ = e.sky;
            if (_) switch (this._skyRenderer.material = t.Loader.getRes(_.material.path), _.mesh) {
              case "SkyBox":
                this._skyRenderer.mesh = we.instance;
                break;

              case "SkyDome":
                this._skyRenderer.mesh = dr.instance;
                break;

              default:
                this.skyRenderer.mesh = we.instance;
            }
            var h = e.reflectionTexture;
            h && (this.customReflection = t.Loader.getRes(h)), this.enableFog = e.enableFog, 
            this.fogStart = e.fogStart, this.fogRange = e.fogRange;
            var c = e.fogColor;
            if (c) {
                var d = this.fogColor;
                d.fromArray(c), this.fogColor = d;
            }
        }
        _onActive() {
            super._onActive(), t.ILaya.stage._scene3Ds.push(this);
        }
        _onInActive() {
            super._onInActive();
            var e = t.ILaya.stage._scene3Ds;
            e.splice(e.indexOf(this), 1);
        }
        _addRenderObject(e) {
            if (this._octree && e._supportOctree) this._octree.add(e); else if (this._renders.add(e), 
            t.Render.supportWebGLPlusCulling) {
                var r = e._getIndexInList(), i = this._cullingBufferIndices.length;
                if (r >= i) {
                    var a = this._cullingBufferIndices, n = this._cullingBufferResult;
                    this._cullingBufferIndices = new Int32Array(i + 1024), this._cullingBufferResult = new Int32Array(i + 1024), 
                    this._cullingBufferIndices.set(a, 0), this._cullingBufferResult.set(n, 0);
                }
                this._cullingBufferIndices[r] = e._cullingBufferIndex;
            }
        }
        _removeRenderObject(e) {
            var r;
            this._octree && e._supportOctree ? this._octree.remove(e) : (t.Render.supportWebGLPlusCulling && (r = this._renders.elements[this._renders.length - 1]), 
            this._renders.remove(e), t.Render.supportWebGLPlusCulling && (this._cullingBufferIndices[r._getIndexInList()] = r._cullingBufferIndex));
        }
        _getRenderQueue(e) {
            return e <= 2500 ? this._opaqueQueue : this._transparentQueue;
        }
        setlightmaps(e) {
            for (var t = this._lightmaps, r = 0, i = t.length; r < i; r++) t[r]._removeReference();
            if (!e) throw new Error("Scene3D: value value can't be null.");
            var a = e.length;
            for (t.length = a, r = 0; r < a; r++) {
                var n = e[r];
                n._addReference(), t[r] = n;
            }
            for (r = 0, i = this._children.length; r < i; r++) this._setLightmapToChildNode(this._children[r]);
        }
        getlightmaps() {
            return this._lightmaps.slice();
        }
        destroy(e = !0) {
            this.destroyed || (super.destroy(e), this._skyRenderer.destroy(), this._skyRenderer = null, 
            this._directionLights = null, this._pointLights = null, this._spotLights = null, 
            this._alternateLights = null, this._lightmaps = null, this._shaderValues = null, 
            this._renders = null, this._cameraPool = null, this._octree = null, this.parallelSplitShadowMaps = null, 
            this._physicsSimulation && this._physicsSimulation._destroy(), t.Loader.clearRes(this.url));
        }
        render(e, r, i) {
            e._curSubmit = t.SubmitBase.RENDERBASE, this._children.length > 0 && e.addRenderObject(this);
        }
        renderSubmit() {
            var e, r, i;
            t.LayaGL.instance;
            for (this._prepareSceneToRender(), e = 0, i = (r = this._cameraPool.length) - 1; e < r; e++) {
                t.Render.supportWebGLPlusRendering && z.setRuntimeValueMode(e == i);
                var a = this._cameraPool[e];
                a.enableRender && a.render();
            }
            return t.Context.set2DRenderConfig(), 1;
        }
        getRenderType() {
            return 0;
        }
        releaseRender() {}
        reUse(e, t) {
            return 0;
        }
    }
    Ir.HIERARCHY = "HIERARCHY", Ir.physicsSettings = new hr(), Ir.octreeCulling = !1, 
    Ir.octreeInitialSize = 64, Ir.octreeInitialCenter = new n(0, 0, 0), Ir.octreeMinNodeSize = 2, 
    Ir.octreeLooseness = 1.25, Ir.REFLECTIONMODE_SKYBOX = 0, Ir.REFLECTIONMODE_CUSTOM = 1, 
    Ir.FOGCOLOR = G.propertyNameToID("u_FogColor"), Ir.FOGSTART = G.propertyNameToID("u_FogStart"), 
    Ir.FOGRANGE = G.propertyNameToID("u_FogRange"), Ir.DIRECTIONLIGHTCOUNT = G.propertyNameToID("u_DirationLightCount"), 
    Ir.LIGHTBUFFER = G.propertyNameToID("u_LightBuffer"), Ir.CLUSTERBUFFER = G.propertyNameToID("u_LightClusterBuffer"), 
    Ir.SUNLIGHTDIRECTION = G.propertyNameToID("u_SunLight.direction"), Ir.SUNLIGHTDIRCOLOR = G.propertyNameToID("u_SunLight.color"), 
    Ir.LIGHTDIRECTION = G.propertyNameToID("u_DirectionLight.direction"), Ir.LIGHTDIRCOLOR = G.propertyNameToID("u_DirectionLight.color"), 
    Ir.POINTLIGHTPOS = G.propertyNameToID("u_PointLight.position"), Ir.POINTLIGHTRANGE = G.propertyNameToID("u_PointLight.range"), 
    Ir.POINTLIGHTATTENUATION = G.propertyNameToID("u_PointLight.attenuation"), Ir.POINTLIGHTCOLOR = G.propertyNameToID("u_PointLight.color"), 
    Ir.SPOTLIGHTPOS = G.propertyNameToID("u_SpotLight.position"), Ir.SPOTLIGHTDIRECTION = G.propertyNameToID("u_SpotLight.direction"), 
    Ir.SPOTLIGHTSPOTANGLE = G.propertyNameToID("u_SpotLight.spot"), Ir.SPOTLIGHTRANGE = G.propertyNameToID("u_SpotLight.range"), 
    Ir.SPOTLIGHTCOLOR = G.propertyNameToID("u_SpotLight.color"), Ir.SHADOWDISTANCE = G.propertyNameToID("u_shadowPSSMDistance"), 
    Ir.SHADOWLIGHTVIEWPROJECT = G.propertyNameToID("u_lightShadowVP"), Ir.SHADOWMAPPCFOFFSET = G.propertyNameToID("u_shadowPCFoffset"), 
    Ir.SHADOWMAPTEXTURE1 = G.propertyNameToID("u_shadowMap1"), Ir.SHADOWMAPTEXTURE2 = G.propertyNameToID("u_shadowMap2"), 
    Ir.SHADOWMAPTEXTURE3 = G.propertyNameToID("u_shadowMap3"), Ir.AMBIENTCOLOR = G.propertyNameToID("u_AmbientColor"), 
    Ir.REFLECTIONTEXTURE = G.propertyNameToID("u_ReflectTexture"), Ir.REFLETIONINTENSITY = G.propertyNameToID("u_ReflectIntensity"), 
    Ir.TIME = G.propertyNameToID("u_Time");
    class xr {}
    class Ar extends rt {
        constructor(e) {
            super(e), this._bones = [], this._skinnedDataLoopMarks = [], this._localBounds = new et(n._ZERO, n._ZERO), 
            this._cacheAnimationNode = [];
        }
        get localBounds() {
            return this._localBounds;
        }
        set localBounds(e) {
            this._localBounds = e;
        }
        get rootBone() {
            return this._cacheRootBone;
        }
        set rootBone(e) {
            this._cacheRootBone != e && (this._cacheRootBone ? this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange) : this._owner.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange), 
            e ? e.transform.on(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange) : this._owner.transform.on(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange), 
            this._cacheRootBone = e, this._onWorldMatNeedChange(oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDSCALE));
        }
        get bones() {
            return this._bones;
        }
        _computeSkinnedData() {
            if (this._cacheMesh && this._cacheAvatar || this._cacheMesh && !this._cacheAvatar) for (var e = this._cacheMesh._inverseBindPoses, t = this._cacheMesh._bindPoseIndices, r = this._cacheMesh._skinDataPathMarks, i = 0, a = this._cacheMesh.subMeshCount; i < a; i++) for (var n = this._cacheMesh.getSubMesh(i)._boneIndicesList, s = this._skinnedData[i], o = 0, l = n.length; o < l; o++) {
                var _ = n[o];
                this._computeSubSkinnedData(e, _, t, s[o], r);
            }
        }
        _computeSubSkinnedData(e, r, i, a, n) {
            for (var s = 0, o = r.length; s < o; s++) {
                var l = r[s];
                if (this._skinnedDataLoopMarks[l] === t.Stat.loopCount) for (var _ = n[l], h = this._skinnedData[_[0]][_[1]], c = 16 * _[2], d = 16 * s, u = 0; u < 16; u++) a[d + u] = h[c + u]; else {
                    if (this._cacheAvatar) v._mulMatrixArray(this._cacheAnimationNode[l].transform.getWorldMatrix(), e[i[l]], a, 16 * s); else {
                        var f = i[l];
                        v._mulMatrixArray(this._bones[f].transform.worldMatrix.elements, e[f], a, 16 * s);
                    }
                    this._skinnedDataLoopMarks[l] = t.Stat.loopCount;
                }
            }
        }
        _onWorldMatNeedChange(e) {
            this._boundsChange = !0, this._octreeNode && (this._cacheAvatar ? -1 === this._indexInOctreeMotionList && this._octreeNode._octree.addMotionObject(this) : (e &= oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDSCALE) && -1 === this._indexInOctreeMotionList && this._octreeNode._octree.addMotionObject(this));
        }
        _createRenderElement() {
            return new Ze();
        }
        _onMeshChange(e) {
            super._onMeshChange(e), this._cacheMesh = e;
            var t = e.subMeshCount;
            this._skinnedData = [], this._skinnedDataLoopMarks.length = e._bindPoseIndices.length;
            for (var r = 0; r < t; r++) for (var i = e.getSubMesh(r)._boneIndicesList, a = i.length, n = this._skinnedData[r] = [], s = 0; s < a; s++) n[s] = new Float32Array(16 * i[s].length);
            this._cacheAvatar && e && this._getCacheAnimationNodes();
        }
        _setCacheAnimator(e) {
            this._cacheAnimator = e, this._shaderValues.addDefine(xr.SHADERDEFINE_BONE), this._setRootNode();
        }
        _calculateBoundingBox() {
            if (this._cacheAvatar) if (this._cacheAnimator && this._rootBone) {
                var e = Ar._tempMatrix4x4;
                v.matrix4x4MultiplyMFM(this._cacheAnimator.owner.transform.worldMatrix, this._cacheRootAnimationNode.transform.getWorldMatrix(), e), 
                this._localBounds._tranform(e, this._bounds);
            } else super._calculateBoundingBox(); else this._cacheRootBone ? this._localBounds._tranform(this._cacheRootBone.transform.worldMatrix, this._bounds) : this._localBounds._tranform(this._owner.transform.worldMatrix, this._bounds);
            if (t.Render.supportWebGLPlusCulling) {
                var r = this._bounds.getMin(), i = this._bounds.getMax(), a = ce._cullingBuffer;
                a[this._cullingBufferIndex + 1] = r.x, a[this._cullingBufferIndex + 2] = r.y, a[this._cullingBufferIndex + 3] = r.z, 
                a[this._cullingBufferIndex + 4] = i.x, a[this._cullingBufferIndex + 5] = i.y, a[this._cullingBufferIndex + 6] = i.z;
            }
        }
        _renderUpdate(e, t) {
            if (this._cacheAnimator) if (this._computeSkinnedData(), this._cacheAvatar) {
                var r = this._cacheAnimator.owner._transform;
                this._shaderValues.setMatrix4x4(le.WORLDMATRIX, r.worldMatrix);
            } else this._shaderValues.setMatrix4x4(le.WORLDMATRIX, L.DEFAULT); else this._shaderValues.setMatrix4x4(le.WORLDMATRIX, t.worldMatrix);
        }
        _renderUpdateWithCamera(e, t) {
            var r = e.projectionViewMatrix;
            if (this._cacheAnimator) if (this._cacheAvatar) {
                var i = this._cacheAnimator.owner._transform;
                L.multiply(r, i.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(le.MVPMATRIX, this._projectionViewWorldMatrix);
            } else this._shaderValues.setMatrix4x4(le.MVPMATRIX, r); else L.multiply(r, t.worldMatrix, this._projectionViewWorldMatrix), 
            this._shaderValues.setMatrix4x4(le.MVPMATRIX, this._projectionViewWorldMatrix);
        }
        _destroy() {
            super._destroy(), this._cacheAvatar ? this._cacheRootAnimationNode && this._cacheRootAnimationNode.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange) : this._cacheRootBone ? !this._cacheRootBone.destroyed && this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange) : this._owner && !this._owner.destroyed && this._owner.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange);
        }
        get bounds() {
            return (this._boundsChange || this._cacheAvatar) && (this._calculateBoundingBox(), 
            this._boundsChange = !1), this._bounds;
        }
        _setRootBone(e) {
            this._rootBone = e, this._setRootNode();
        }
        _setRootNode() {
            var e;
            e = this._cacheAnimator && this._rootBone && this._cacheAvatar ? this._cacheAnimator._avatarNodeMap[this._rootBone] : null, 
            this._cacheRootAnimationNode != e && (this._onWorldMatNeedChange(oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDSCALE), 
            this._owner.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange), 
            this._cacheRootAnimationNode && this._cacheRootAnimationNode.transform.off(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange), 
            e && e.transform.on(t.Event.TRANSFORM_CHANGED, this, this._onWorldMatNeedChange), 
            this._cacheRootAnimationNode = e);
        }
        _getCacheAnimationNodes() {
            var e = this._cacheMesh._boneNames, r = this._cacheMesh._bindPoseIndices, i = r.length;
            if (t.Render.supportWebGLPlusAnimation) {
                this._cacheAnimationNodeIndices = new Uint16Array(i);
                var a = this._cacheAnimator._avatarNodeMap;
                for (o = 0; o < i; o++) {
                    var n = a[e[r[o]]];
                    this._cacheAnimationNodeIndices[o] = n ? n._worldMatrixIndex : 0;
                }
            } else {
                this._cacheAnimationNode.length = i;
                for (var s = this._cacheAnimator._avatarNodeMap, o = 0; o < i; o++) {
                    var l = s[e[r[o]]];
                    this._cacheAnimationNode[o] = l;
                }
            }
        }
        _setCacheAvatar(e) {
            this._cacheAvatar !== e && (this._cacheMesh ? (this._cacheAvatar = e, e && (this._shaderValues.addDefine(xr.SHADERDEFINE_BONE), 
            this._getCacheAnimationNodes())) : this._cacheAvatar = e, this._setRootNode());
        }
        _computeSubSkinnedDataNative(e, r, i, a, n, s) {
            t.LayaGL.instance.computeSubSkinnedData(e, r, i, a, n, s);
        }
        _computeSkinnedDataForNative() {
            if (this._cacheMesh && this._cacheAvatar || this._cacheMesh && !this._cacheAvatar) for (var e = this._cacheMesh._inverseBindPoses, r = this._cacheMesh._bindPoseIndices, i = this._cacheMesh._skinDataPathMarks, a = 0, n = this._cacheMesh.subMeshCount; a < n; a++) for (var s = this._cacheMesh.getSubMesh(a)._boneIndicesList, o = this._skinnedData[a], l = 0, _ = s.length; l < _; l++) {
                var h = s[l];
                this._cacheAvatar && t.Render.supportWebGLPlusAnimation ? this._computeSubSkinnedDataNative(this._cacheAnimator._animationNodeWorldMatrixs, this._cacheAnimationNodeIndices, this._cacheMesh._inverseBindPosesBuffer, h, r, o[l]) : this._computeSubSkinnedData(e, h, r, o[l], i);
            }
        }
    }
    Ar._tempMatrix4x4 = new L();
    class Dr extends _e {
        constructor(e = null, t = null) {
            super(t), this._meshFilter = new it(this), this._render = new Ar(this), e && (this._meshFilter.sharedMesh = e);
        }
        static __init__() {
            xr.SHADERDEFINE_BONE = G.getDefineByName("BONE");
        }
        get meshFilter() {
            return this._meshFilter;
        }
        get skinnedMeshRenderer() {
            return this._render;
        }
        _parse(e, r) {
            super._parse(e, r);
            var i = this.skinnedMeshRenderer, s = e.lightmapIndex;
            null != s && (i.lightmapIndex = s);
            var o, l = e.lightmapScaleOffset;
            if (l && (i.lightmapScaleOffset = new a(l[0], l[1], l[2], l[3])), o = e.meshPath) {
                var _ = t.Loader.getRes(o);
                _ && (this.meshFilter.sharedMesh = _);
            }
            var h = e.materials;
            if (h) {
                var c = i.sharedMaterials, d = h.length;
                c.length = d;
                for (var u = 0; u < d; u++) c[u] = t.Loader.getRes(h[u].path);
                i.sharedMaterials = c;
            }
            var f = e.boundBox, m = f.min, E = f.max;
            if (i.localBounds.setMin(new n(m[0], m[1], m[2])), i.localBounds.setMax(new n(E[0], E[1], E[2])), 
            r) {
                var T = e.rootBone;
                i.rootBone = r[T];
                var g, p = e.bones;
                for (u = 0, g = p.length; u < g; u++) i.bones.push(r[p[u]]);
            } else e.rootBone && i._setRootBone(e.rootBone);
        }
        _changeHierarchyAnimator(e) {
            super._changeHierarchyAnimator(e), this.skinnedMeshRenderer._setCacheAnimator(e);
        }
        _changeAnimatorAvatar(e) {
            this.skinnedMeshRenderer._setCacheAvatar(e);
        }
        _cloneTo(e, t, r) {
            var i = e;
            i.meshFilter.sharedMesh = this.meshFilter.sharedMesh;
            var a = this._render, n = i._render;
            n.enable = a.enable, n.sharedMaterials = a.sharedMaterials, n.castShadow = a.castShadow;
            var s = a.lightmapScaleOffset;
            s && (n.lightmapScaleOffset = s.clone()), n.receiveShadow = a.receiveShadow, n.sortingFudge = a.sortingFudge, 
            n._rootBone = a._rootBone;
            var o = a.bones, l = n.bones, _ = o.length;
            l.length = _;
            var h = a.rootBone;
            if (h) {
                var c = v._getHierarchyPath(t, h, Dr._tempArray0);
                n.rootBone = c ? v._getNodeByHierarchyPath(r, c) : h;
            }
            for (var d = 0; d < o.length; d++) c = v._getHierarchyPath(t, o[d], Dr._tempArray0), 
            l[d] = c ? v._getNodeByHierarchyPath(r, c) : o[d];
            var u = a.localBounds;
            u && u.cloneTo(n.localBounds), super._cloneTo(e, t, r);
        }
        destroy(e = !0) {
            this.destroyed || (super.destroy(e), this._meshFilter.destroy());
        }
        _create() {
            return new Dr();
        }
    }
    Dr._tempArray0 = [], Dr.BONES = G.propertyNameToID("u_Bones");
    class Mr extends Y {
        constructor() {
            super(), this.setShaderName("Trail"), this._color = new a(1, 1, 1, 1), this._shaderValues.setVector(Mr.TINTCOLOR, new a(1, 1, 1, 1)), 
            this.renderMode = Mr.RENDERMODE_ALPHABLENDED;
        }
        static __initDefine__() {
            Mr.SHADERDEFINE_MAINTEXTURE = G.getDefineByName("MAINTEXTURE"), Mr.SHADERDEFINE_TILINGOFFSET = G.getDefineByName("TILINGOFFSET"), 
            Mr.SHADERDEFINE_ADDTIVEFOG = G.getDefineByName("ADDTIVEFOG");
        }
        get _TintColorR() {
            return this._color.x;
        }
        set _TintColorR(e) {
            this._color.x = e, this.color = this._color;
        }
        get _TintColorG() {
            return this._color.y;
        }
        set _TintColorG(e) {
            this._color.y = e, this.color = this._color;
        }
        get _TintColorB() {
            return this._color.z;
        }
        set _TintColorB(e) {
            this._color.z = e, this.color = this._color;
        }
        get _TintColorA() {
            return this._color.w;
        }
        set _TintColorA(e) {
            this._color.w = e, this.color = this._color;
        }
        get _MainTex_STX() {
            return this._shaderValues.getVector(Mr.TILINGOFFSET).x;
        }
        set _MainTex_STX(e) {
            var t = this._shaderValues.getVector(Mr.TILINGOFFSET);
            t.x = e, this.tilingOffset = t;
        }
        get _MainTex_STY() {
            return this._shaderValues.getVector(Mr.TILINGOFFSET).y;
        }
        set _MainTex_STY(e) {
            var t = this._shaderValues.getVector(Mr.TILINGOFFSET);
            t.y = e, this.tilingOffset = t;
        }
        get _MainTex_STZ() {
            return this._shaderValues.getVector(Mr.TILINGOFFSET).z;
        }
        set _MainTex_STZ(e) {
            var t = this._shaderValues.getVector(Mr.TILINGOFFSET);
            t.z = e, this.tilingOffset = t;
        }
        get _MainTex_STW() {
            return this._shaderValues.getVector(Mr.TILINGOFFSET).w;
        }
        set _MainTex_STW(e) {
            var t = this._shaderValues.getVector(Mr.TILINGOFFSET);
            t.w = e, this.tilingOffset = t;
        }
        set renderMode(e) {
            switch (e) {
              case Mr.RENDERMODE_ADDTIVE:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_NONE, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE, this.depthTest = q.DEPTHTEST_LESS, this._shaderValues.addDefine(Mr.SHADERDEFINE_ADDTIVEFOG);
                break;

              case Mr.RENDERMODE_ALPHABLENDED:
                this.renderQueue = Y.RENDERQUEUE_TRANSPARENT, this.alphaTest = !1, this.depthWrite = !1, 
                this.cull = q.CULL_NONE, this.blend = q.BLEND_ENABLE_ALL, this.blendSrc = q.BLENDPARAM_SRC_ALPHA, 
                this.blendDst = q.BLENDPARAM_ONE_MINUS_SRC_ALPHA, this.depthTest = q.DEPTHTEST_LESS, 
                this._shaderValues.removeDefine(Mr.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("TrailMaterial : renderMode value error.");
            }
        }
        get colorR() {
            return this._TintColorR;
        }
        set colorR(e) {
            this._TintColorR = e;
        }
        get colorG() {
            return this._TintColorG;
        }
        set colorG(e) {
            this._TintColorG = e;
        }
        get colorB() {
            return this._TintColorB;
        }
        set colorB(e) {
            this._TintColorB = e;
        }
        get colorA() {
            return this._TintColorA;
        }
        set colorA(e) {
            this._TintColorA = e;
        }
        get color() {
            return this._shaderValues.getVector(Mr.TINTCOLOR);
        }
        set color(e) {
            this._shaderValues.setVector(Mr.TINTCOLOR, e);
        }
        get texture() {
            return this._shaderValues.getTexture(Mr.MAINTEXTURE);
        }
        set texture(e) {
            e ? this._shaderValues.addDefine(Mr.SHADERDEFINE_MAINTEXTURE) : this._shaderValues.removeDefine(Mr.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(Mr.MAINTEXTURE, e);
        }
        get tilingOffsetX() {
            return this._MainTex_STX;
        }
        set tilingOffsetX(e) {
            this._MainTex_STX = e;
        }
        get tilingOffsetY() {
            return this._MainTex_STY;
        }
        set tilingOffsetY(e) {
            this._MainTex_STY = e;
        }
        get tilingOffsetZ() {
            return this._MainTex_STZ;
        }
        set tilingOffsetZ(e) {
            this._MainTex_STZ = e;
        }
        get tilingOffsetW() {
            return this._MainTex_STW;
        }
        set tilingOffsetW(e) {
            this._MainTex_STW = e;
        }
        get tilingOffset() {
            return this._shaderValues.getVector(Mr.TILINGOFFSET);
        }
        set tilingOffset(e) {
            e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._shaderValues.addDefine(Mr.SHADERDEFINE_TILINGOFFSET) : this._shaderValues.removeDefine(Mr.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(Mr.TILINGOFFSET, e);
        }
        set depthWrite(e) {
            this._shaderValues.setBool(Mr.DEPTH_WRITE, e);
        }
        get depthWrite() {
            return this._shaderValues.getBool(Mr.DEPTH_WRITE);
        }
        set cull(e) {
            this._shaderValues.setInt(Mr.CULL, e);
        }
        get cull() {
            return this._shaderValues.getInt(Mr.CULL);
        }
        set blend(e) {
            this._shaderValues.setInt(Mr.BLEND, e);
        }
        get blend() {
            return this._shaderValues.getInt(Mr.BLEND);
        }
        set blendSrc(e) {
            this._shaderValues.setInt(Mr.BLEND_SRC, e);
        }
        get blendSrc() {
            return this._shaderValues.getInt(Mr.BLEND_SRC);
        }
        set blendDst(e) {
            this._shaderValues.setInt(Mr.BLEND_DST, e);
        }
        get blendDst() {
            return this._shaderValues.getInt(Mr.BLEND_DST);
        }
        set depthTest(e) {
            this._shaderValues.setInt(Mr.DEPTH_TEST, e);
        }
        get depthTest() {
            return this._shaderValues.getInt(Mr.DEPTH_TEST);
        }
        clone() {
            var e = new Mr();
            return this.cloneTo(e), e;
        }
    }
    Mr.RENDERMODE_ALPHABLENDED = 0, Mr.RENDERMODE_ADDTIVE = 1, Mr.MAINTEXTURE = G.propertyNameToID("u_MainTexture"), 
    Mr.TINTCOLOR = G.propertyNameToID("u_MainColor"), Mr.TILINGOFFSET = G.propertyNameToID("u_TilingOffset"), 
    Mr.CULL = G.propertyNameToID("s_Cull"), Mr.BLEND = G.propertyNameToID("s_Blend"), 
    Mr.BLEND_SRC = G.propertyNameToID("s_BlendSrc"), Mr.BLEND_DST = G.propertyNameToID("s_BlendDst"), 
    Mr.DEPTH_TEST = G.propertyNameToID("s_DepthTest"), Mr.DEPTH_WRITE = G.propertyNameToID("s_DepthWrite");
    class Lr {}
    Lr.Stretch = 0, Lr.Tile = 1, (Pe = e.TrailAlignment || (e.TrailAlignment = {}))[Pe.View = 0] = "View", 
    Pe[Pe.TransformZ = 1] = "TransformZ";
    class Cr {
        static get vertexDeclaration1() {
            return Cr._vertexDeclaration1;
        }
        static get vertexDeclaration2() {
            return Cr._vertexDeclaration2;
        }
        get vertexDeclaration() {
            return Cr._vertexDeclaration1;
        }
        static __init__() {
            Cr._vertexDeclaration1 = new Ee(32, [ new Te(0, me.Vector3, Cr.TRAIL_POSITION0), new Te(12, me.Vector3, Cr.TRAIL_OFFSETVECTOR), new Te(24, me.Single, Cr.TRAIL_TIME0), new Te(28, me.Single, Cr.TRAIL_TEXTURECOORDINATE0Y) ]), 
            Cr._vertexDeclaration2 = new Ee(20, [ new Te(0, me.Single, Cr.TRAIL_TEXTURECOORDINATE0X), new Te(4, me.Color, Cr.TRAIL_COLOR) ]);
        }
    }
    Cr.TRAIL_POSITION0 = 0, Cr.TRAIL_OFFSETVECTOR = 1, Cr.TRAIL_TIME0 = 2, Cr.TRAIL_TEXTURECOORDINATE0Y = 3, 
    Cr.TRAIL_TEXTURECOORDINATE0X = 4, Cr.TRAIL_COLOR = 5;
    class yr extends ue {
        constructor(e) {
            super(), this._floatCountPerVertices1 = 8, this._floatCountPerVertices2 = 5, this._increaseSegementCount = 16, 
            this._activeIndex = 0, this._endIndex = 0, this._needAddFirstVertex = !1, this._isTempEndVertex = !1, 
            this._vertices1 = null, this._vertices2 = null, this._lastFixedVertexPosition = new n(), 
            this._bufferState = new ye(), this.tmpColor = new ne(), this._disappearBoundsMode = !1, 
            this._owner = e, this._segementCount = this._increaseSegementCount, this._resizeData(this._segementCount, this._bufferState);
            var r = this._owner._owner.trailRenderer.bounds, i = this._owner._owner.transform.position;
            r.setMin(i), r.setMax(i), t.Render.supportWebGLPlusCulling && this._calculateBoundingBoxForNative();
        }
        _resizeData(e, r) {
            this._subBirthTime = new Float32Array(e), this._subDistance = new Float64Array(e);
            var i = t.LayaGL.instance, a = 2 * e, n = Cr.vertexDeclaration1, s = Cr.vertexDeclaration2, o = [], l = a * n.vertexStride, _ = a * s.vertexStride, h = l + _;
            this._vertices1 = new Float32Array(a * this._floatCountPerVertices1), this._vertices2 = new Float32Array(a * this._floatCountPerVertices2), 
            this._vertexBuffer1 = new fe(l, i.STATIC_DRAW, !1), this._vertexBuffer1.vertexDeclaration = n, 
            this._vertexBuffer2 = new fe(_, i.DYNAMIC_DRAW, !1), this._vertexBuffer2.vertexDeclaration = s, 
            o.push(this._vertexBuffer1), o.push(this._vertexBuffer2), r.bind(), r.applyVertexBuffers(o), 
            r.unBind(), t.Resource._addMemory(h, h);
        }
        _resetData() {
            var e = this._endIndex - this._activeIndex, t = new Float32Array(this._vertices1.buffer, 2 * this._floatCountPerVertices1 * this._activeIndex * 4, 2 * this._floatCountPerVertices1 * e), r = new Float32Array(this._vertices2.buffer, 2 * this._floatCountPerVertices2 * this._activeIndex * 4, 2 * this._floatCountPerVertices2 * e), i = new Float64Array(this._subDistance.buffer, 8 * this._activeIndex, e), a = new Float32Array(this._subBirthTime.buffer, 4 * this._activeIndex, e);
            e === this._segementCount && (this._vertexBuffer1.destroy(), this._vertexBuffer2.destroy(), 
            this._segementCount += this._increaseSegementCount, this._resizeData(this._segementCount, this._bufferState)), 
            this._vertices1.set(t, 0), this._vertices2.set(r, 0), this._subDistance.set(i, 0), 
            this._subBirthTime.set(a, 0), this._endIndex = e, this._activeIndex = 0, this._vertexBuffer1.setData(this._vertices1.buffer, 0, 2 * this._floatCountPerVertices1 * this._activeIndex * 4, 2 * this._floatCountPerVertices1 * e * 4), 
            this._vertexBuffer2.setData(this._vertices2.buffer, 0, 2 * this._floatCountPerVertices2 * this._activeIndex * 4, 2 * this._floatCountPerVertices2 * e * 4);
        }
        _updateTrail(e, t, r) {
            n.equals(t, r) || (this._endIndex - this._activeIndex == 0 ? this._addTrailByFirstPosition(e, r) : this._addTrailByNextPosition(e, r));
        }
        _addTrailByFirstPosition(e, t) {
            this._endIndex === this._segementCount && this._resetData(), this._subDistance[this._endIndex] = 0, 
            this._subBirthTime[this._endIndex] = this._owner._curtime, this._endIndex++, t.cloneTo(this._lastFixedVertexPosition), 
            this._needAddFirstVertex = !0;
        }
        _addTrailByNextPosition(t, i) {
            var a = yr._tempVector30, s = yr._tempVector31;
            switch (this._owner.alignment) {
              case e.TrailAlignment.View:
                var o = t.viewMatrix;
                n.transformCoordinate(i, o, yr._tempVector33), n.transformCoordinate(this._lastFixedVertexPosition, o, yr._tempVector34), 
                n.subtract(yr._tempVector33, yr._tempVector34, a), n.cross(yr._tempVector33, a, s);
                break;

              case e.TrailAlignment.TransformZ:
                n.subtract(i, this._lastFixedVertexPosition, a);
                var l = yr._tempVector32;
                this._owner._owner.transform.localMatrix.getForward(l), n.cross(a, l, s);
            }
            n.normalize(s, s), n.scale(s, this._owner.widthMultiplier / 2, s);
            var _, h, c = n.scalarLength(a);
            this._needAddFirstVertex && (this._updateVerticesByPositionData(i, s, this._endIndex - 1), 
            this._needAddFirstVertex = !1), c - this._owner.minVertexDistance >= r.zeroTolerance ? (this._isTempEndVertex ? (_ = this._endIndex - 1, 
            h = c - this._subDistance[_], this._updateVerticesByPosition(i, s, c, _), this._owner._totalLength += h) : (this._endIndex === this._segementCount && this._resetData(), 
            this._updateVerticesByPosition(i, s, c, this._endIndex), this._owner._totalLength += c, 
            this._endIndex++), i.cloneTo(this._lastFixedVertexPosition), this._isTempEndVertex = !1) : (this._isTempEndVertex ? (_ = this._endIndex - 1, 
            h = c - this._subDistance[_], this._updateVerticesByPosition(i, s, c, _), this._owner._totalLength += h) : (this._endIndex === this._segementCount && this._resetData(), 
            this._updateVerticesByPosition(i, s, c, this._endIndex), this._owner._totalLength += c, 
            this._endIndex++), this._isTempEndVertex = !0);
        }
        _updateVerticesByPositionData(e, r, i) {
            var a = 2 * this._floatCountPerVertices1 * i, s = this._owner._curtime;
            this._vertices1[a] = e.x, this._vertices1[a + 1] = e.y, this._vertices1[a + 2] = e.z, 
            this._vertices1[a + 3] = -r.x, this._vertices1[a + 4] = -r.y, this._vertices1[a + 5] = -r.z, 
            this._vertices1[a + 6] = s, this._vertices1[a + 7] = 1, this._vertices1[a + 8] = e.x, 
            this._vertices1[a + 9] = e.y, this._vertices1[a + 10] = e.z, this._vertices1[a + 11] = r.x, 
            this._vertices1[a + 12] = r.y, this._vertices1[a + 13] = r.z, this._vertices1[a + 14] = s, 
            this._vertices1[a + 15] = 0;
            var o = this._owner._owner.trailRenderer.bounds, l = o.getMin(), _ = o.getMax(), h = yr._tempVector35, c = yr._tempVector36, d = yr._tempVector32;
            n.add(e, r, h), n.subtract(e, r, c), n.min(c, h, d), n.min(l, d, l), o.setMin(l), 
            n.max(h, c, d), n.max(_, d, _), o.setMax(_), t.Render.supportWebGLPlusCulling && this._calculateBoundingBoxForNative();
            var u = 2 * this._floatCountPerVertices1;
            this._vertexBuffer1.setData(this._vertices1.buffer, 4 * a, 4 * a, 4 * u);
        }
        _updateVerticesByPosition(e, t, r, i) {
            this._updateVerticesByPositionData(e, t, i), this._subDistance[i] = r, this._subBirthTime[i] = this._owner._curtime;
        }
        _updateVertexBufferUV() {
            var e, r, i;
            this._disappearBoundsMode && (r = (e = this._owner._owner.trailRenderer.bounds).getMin(), 
            i = e.getMax(), r.setValue(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), 
            i.setValue(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), t.Render.supportWebGLPlusCulling && this._calculateBoundingBoxForNative());
            for (var a = this._endIndex, s = 0, o = this._owner.colorGradient, l = o.colorAlphaKeysCount - 1, _ = o.colorRGBKeysCount - 1, h = this._owner._totalLength, c = 2 * this._floatCountPerVertices2, d = this._activeIndex; d < a; d++) {
                var u, f;
                d !== this._activeIndex && (s += this._subDistance[d]), this._owner.textureMode == Lr.Stretch ? f = u = 1 - s / h : (f = 1 - s / h, 
                u = 1 - (h - s)), _ = o.evaluateColorRGB(f, this.tmpColor, _, !0), l = o.evaluateColorAlpha(f, this.tmpColor, l, !0);
                var m = d * c;
                if (this._vertices2[m + 0] = u, this._vertices2[m + 1] = this.tmpColor.r, this._vertices2[m + 2] = this.tmpColor.g, 
                this._vertices2[m + 3] = this.tmpColor.b, this._vertices2[m + 4] = this.tmpColor.a, 
                this._vertices2[m + 5] = u, this._vertices2[m + 6] = this.tmpColor.r, this._vertices2[m + 7] = this.tmpColor.g, 
                this._vertices2[m + 8] = this.tmpColor.b, this._vertices2[m + 9] = this.tmpColor.a, 
                this._disappearBoundsMode) {
                    var E = 2 * this._floatCountPerVertices1 * d, T = yr._tempVector32, g = yr._tempVector33, p = yr._tempVector34;
                    T.setValue(this._vertices1[E + 0], this._vertices1[E + 1], this._vertices1[E + 2]), 
                    g.setValue(this._vertices1[E + 3], this._vertices1[E + 4], this._vertices1[E + 5]), 
                    n.add(T, g, p), n.min(p, r, r), n.max(p, i, i), n.subtract(T, g, p), n.min(p, r, r), 
                    n.max(p, i, i);
                }
            }
            this._disappearBoundsMode && (e.setMin(r), e.setMax(i), this._disappearBoundsMode = !1, 
            t.Render.supportWebGLPlusCulling && this._calculateBoundingBoxForNative());
            var S = this._activeIndex * c;
            this._vertexBuffer2.setData(this._vertices2.buffer, 4 * S, 4 * S, 4 * (a * c - S));
        }
        _updateDisappear() {
            for (var e = this._endIndex, t = this._activeIndex; t < e && this._owner._curtime - this._subBirthTime[t] >= this._owner.time + r.zeroTolerance; t++) {
                var i = t + 1;
                if (i !== e && (this._owner._totalLength -= this._subDistance[i]), this._isTempEndVertex && i === e - 1) {
                    this._floatCountPerVertices1;
                    var a = this._lastFixedVertexPosition;
                    a.x = this._vertices1[0], a.y = this._vertices1[1], a.z = this._vertices1[2], this._isTempEndVertex = !1;
                }
                this._activeIndex++, this._disappearBoundsMode = !0;
            }
        }
        _getType() {
            return yr._type;
        }
        _prepareRender(e) {
            return this._endIndex - this._activeIndex > 1;
        }
        _render(e) {
            this._bufferState.bind();
            var r = t.LayaGL.instance, i = 2 * this._activeIndex, a = 2 * this._endIndex - i;
            r.drawArrays(r.TRIANGLE_STRIP, i, a), t.Stat.renderBatches++, t.Stat.trianglesFaces += a - 2;
        }
        destroy() {
            super.destroy();
            var e = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;
            t.Resource._addMemory(-e, -e), this._bufferState.destroy(), this._vertexBuffer1.destroy(), 
            this._vertexBuffer2.destroy(), this._bufferState = null, this._vertices1 = null, 
            this._vertexBuffer1 = null, this._vertices2 = null, this._vertexBuffer2 = null, 
            this._subBirthTime = null, this._subDistance = null, this._lastFixedVertexPosition = null, 
            this._disappearBoundsMode = !1;
        }
        _calculateBoundingBoxForNative() {
            var e = this._owner._owner.trailRenderer, t = e.bounds, r = t.getMin(), i = t.getMax(), a = ce._cullingBuffer;
            a[e._cullingBufferIndex + 1] = r.x, a[e._cullingBufferIndex + 2] = r.y, a[e._cullingBufferIndex + 3] = r.z, 
            a[e._cullingBufferIndex + 4] = i.x, a[e._cullingBufferIndex + 5] = i.y, a[e._cullingBufferIndex + 6] = i.z;
        }
    }
    yr.ALIGNMENT_VIEW = 0, yr.ALIGNMENT_TRANSFORM_Z = 1, yr._tempVector30 = new n(), 
    yr._tempVector31 = new n(), yr._tempVector32 = new n(), yr._tempVector33 = new n(), 
    yr._tempVector34 = new n(), yr._tempVector35 = new n(), yr._tempVector36 = new n(), 
    yr._type = ue._typeCounter++;
    class Or {
        constructor(e) {
            this._totalLength = 0, this._lastPosition = new n(), this._curtime = 0, this.alignment = Or.ALIGNMENT_VIEW, 
            this._owner = e, this._initDefaultData(), this.addRenderElement();
        }
        get time() {
            return this._time;
        }
        set time(e) {
            this._time = e, this._owner._render._shaderValues.setNumber(Or.LIFETIME, e);
        }
        get minVertexDistance() {
            return this._minVertexDistance;
        }
        set minVertexDistance(e) {
            this._minVertexDistance = e;
        }
        get widthMultiplier() {
            return this._widthMultiplier;
        }
        set widthMultiplier(e) {
            this._widthMultiplier = e;
        }
        get widthCurve() {
            return this._widthCurve;
        }
        set widthCurve(e) {
            this._widthCurve = e;
            var t, r, i = new Float32Array(4 * e.length), a = 0;
            for (t = 0, r = e.length; t < r; t++) i[a++] = e[t].time, i[a++] = e[t].inTangent, 
            i[a++] = e[t].outTangent, i[a++] = e[t].value;
            this._owner._render._shaderValues.setBuffer(Or.WIDTHCURVE, i), this._owner._render._shaderValues.setInt(Or.WIDTHCURVEKEYLENGTH, e.length);
        }
        get colorGradient() {
            return this._colorGradient;
        }
        set colorGradient(e) {
            this._colorGradient = e;
        }
        get textureMode() {
            return this._textureMode;
        }
        set textureMode(e) {
            this._textureMode = e;
        }
        addRenderElement() {
            var e = this._owner._render, t = e._renderElements, r = e.sharedMaterials[0];
            r || (r = Mr.defaultMaterial);
            var i = new Ze();
            i.setTransform(this._owner._transform), i.render = e, i.material = r, this._trialGeometry = new yr(this), 
            i.setGeometry(this._trialGeometry), t.push(i);
        }
        _update(e) {
            var t = this._owner._render;
            this._curtime += e.scene.timer._delta / 1e3, t._shaderValues.setNumber(Or.CURTIME, this._curtime);
            var r = this._owner.transform.position, i = t._renderElements[0]._geometry;
            i._updateDisappear(), i._updateTrail(e.camera, this._lastPosition, r), i._updateVertexBufferUV(), 
            r.cloneTo(this._lastPosition);
        }
        _initDefaultData() {
            this.time = 5, this.minVertexDistance = .1, this.widthMultiplier = 1, this.textureMode = Lr.Stretch;
            var e = [], t = new c();
            t.time = 0, t.inTangent = 0, t.outTangent = 0, t.value = 1, e.push(t);
            var r = new c();
            r.time = 1, r.inTangent = 0, r.outTangent = 0, r.value = 1, e.push(r), this.widthCurve = e;
            var i = new lt(2, 2);
            i.mode = ot.Blend, i.addColorRGB(0, ne.WHITE), i.addColorRGB(1, ne.WHITE), i.addColorAlpha(0, 1), 
            i.addColorAlpha(1, 1), this.colorGradient = i;
        }
        destroy() {
            this._trialGeometry.destroy(), this._trialGeometry = null, this._widthCurve = null, 
            this._colorGradient = null;
        }
    }
    Or.CURTIME = G.propertyNameToID("u_CurTime"), Or.LIFETIME = G.propertyNameToID("u_LifeTime"), 
    Or.WIDTHCURVE = G.propertyNameToID("u_WidthCurve"), Or.WIDTHCURVEKEYLENGTH = G.propertyNameToID("u_WidthCurveKeyLength"), 
    Or.ALIGNMENT_VIEW = 0, Or.ALIGNMENT_TRANSFORM_Z = 1;
    class Nr extends tt {
        constructor(e) {
            super(e), this._projectionViewWorldMatrix = new L();
        }
        _calculateBoundingBox() {}
        _needRender(e, t) {
            return this._owner.trailFilter._update(t), !e || e.intersects(this.bounds._getBoundBox());
        }
        _updateForNative(e) {
            this._owner.trailFilter._update(e);
        }
        _renderUpdate(e, t) {
            super._renderUpdate(e, t);
        }
        _renderUpdateWithCamera(e, t) {
            var r = e.projectionViewMatrix;
            t ? (L.multiply(r, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(le.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(le.MVPMATRIX, r);
        }
    }
    class Pr extends _e {
        static __init__() {}
        get trailFilter() {
            return this._geometryFilter;
        }
        get trailRenderer() {
            return this._render;
        }
        constructor(e = null) {
            super(e), this._render = new Nr(this), this._geometryFilter = new Or(this);
        }
        _parse(e, r) {
            super._parse(e, r);
            var i, a, n = this._render, s = this._geometryFilter, o = e.materials;
            if (o) {
                var l = n.sharedMaterials, _ = o.length;
                for (l.length = _, i = 0; i < _; i++) l[i] = t.Loader.getRes(o[i].path);
                n.sharedMaterials = l;
            }
            s.time = e.time, s.minVertexDistance = e.minVertexDistance, s.widthMultiplier = e.widthMultiplier, 
            s.textureMode = e.textureMode, null != e.alignment && (s.alignment = e.alignment);
            var h = [], d = e.widthCurve;
            for (i = 0, a = d.length; i < a; i++) {
                var u = new c();
                u.time = d[i].time, u.inTangent = d[i].inTangent, u.outTangent = d[i].outTangent, 
                u.value = d[i].value, h.push(u);
            }
            s.widthCurve = h;
            var f = e.colorGradient, m = f.colorKeys, E = f.alphaKeys, T = new lt(m.length, E.length);
            for (T.mode = f.mode, i = 0, a = m.length; i < a; i++) {
                var g = m[i];
                T.addColorRGB(g.time, new ne(g.value[0], g.value[1], g.value[2], 1));
            }
            for (i = 0, a = E.length; i < a; i++) {
                var p = E[i];
                T.addColorAlpha(p.time, p.value);
            }
            s.colorGradient = T;
        }
        _onActive() {
            super._onActive(), this._transform.position.cloneTo(this._geometryFilter._lastPosition);
        }
        _cloneTo(e, t, r) {
            var i, a;
            super._cloneTo(e, t, r);
            var n = e, s = n.trailFilter;
            s.time = this.trailFilter.time, s.minVertexDistance = this.trailFilter.minVertexDistance, 
            s.widthMultiplier = this.trailFilter.widthMultiplier, s.textureMode = this.trailFilter.textureMode, 
            s.alignment = this.trailFilter.alignment;
            var o = this.trailFilter.widthCurve, l = [];
            for (i = 0, a = o.length; i < a; i++) {
                var _ = new c();
                o[i].cloneTo(_), l.push(_);
            }
            s.widthCurve = l;
            var h = new lt(this.trailFilter.colorGradient.maxColorRGBKeysCount, this.trailFilter.colorGradient.maxColorAlphaKeysCount);
            this.trailFilter.colorGradient.cloneTo(h), s.colorGradient = h, n.trailRenderer.sharedMaterial = this.trailRenderer.sharedMaterial;
        }
        destroy(e = !0) {
            this.destroyed || (super.destroy(e), this._geometryFilter.destroy(), this._geometryFilter = null);
        }
        _create() {
            return new Pr();
        }
    }
    class br {
        constructor(e, t, r, i) {
            this._position = e, this._normal = t, this._textureCoord0 = r, this._textureCoord1 = i;
        }
        static __init__() {
            br._vertexDeclaration = new Ee(40, [ new Te(0, me.Vector3, br.TERRAIN_POSITION0), new Te(12, me.Vector3, br.TERRAIN_NORMAL0), new Te(24, me.Vector2, br.TERRAIN_TEXTURECOORDINATE0), new Te(32, me.Vector2, br.TERRAIN_TEXTURECOORDINATE1) ]);
        }
        static get vertexDeclaration() {
            return br._vertexDeclaration;
        }
        get position() {
            return this._position;
        }
        get normal() {
            return this._normal;
        }
        get textureCoord0() {
            return this._textureCoord0;
        }
        get textureCoord1() {
            return this._textureCoord1;
        }
        get vertexDeclaration() {
            return br._vertexDeclaration;
        }
    }
    br.TERRAIN_POSITION0 = 0, br.TERRAIN_NORMAL0 = 1, br.TERRAIN_TEXTURECOORDINATE0 = 2, 
    br.TERRAIN_TEXTURECOORDINATE1 = 3;
    class Vr {}
    Vr._interactive = {
        getWorldTransform: (e, t) => {},
        setWorldTransform: (e, t) => {
            var r = or._physicObjectsMap[e];
            r._simulation._updatedRigidbodies++, r._updateTransformComponent(t);
        }
    };
    class wr extends or {
        constructor(e = .1, t = null, r = Nt.COLLISIONFILTERGROUP_DEFAULTFILTER, i = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            super(r, i), this._upAxis = new n(0, 1, 0), this._maxSlope = 45, this._jumpSpeed = 10, 
            this._fallSpeed = 55, this._gravity = new n(0, 3 * -9.8, 0), this._btKinematicCharacter = null, 
            this._stepHeight = e, t && (this._upAxis = t);
        }
        static __init__() {
            wr._btTempVector30 = R._bullet.btVector3_create(0, 0, 0);
        }
        get fallSpeed() {
            return this._fallSpeed;
        }
        set fallSpeed(e) {
            this._fallSpeed = e, R._bullet.btKinematicCharacterController_setFallSpeed(this._btKinematicCharacter, e);
        }
        get jumpSpeed() {
            return this._jumpSpeed;
        }
        set jumpSpeed(e) {
            this._jumpSpeed = e, R._bullet.btKinematicCharacterController_setJumpSpeed(this._btKinematicCharacter, e);
        }
        get gravity() {
            return this._gravity;
        }
        set gravity(e) {
            this._gravity = e;
            var t = R._bullet, r = wr._btTempVector30;
            t.btVector3_setValue(r, -e.x, e.y, e.z), t.btKinematicCharacterController_setGravity(this._btKinematicCharacter, r);
        }
        get maxSlope() {
            return this._maxSlope;
        }
        set maxSlope(e) {
            this._maxSlope = e, R._bullet.btKinematicCharacterController_setMaxSlope(this._btKinematicCharacter, e / 180 * Math.PI);
        }
        get isGrounded() {
            return R._bullet.btKinematicCharacterController_onGround(this._btKinematicCharacter);
        }
        get stepHeight() {
            return this._stepHeight;
        }
        set stepHeight(e) {
            this._stepHeight = e, this._constructCharacter();
        }
        get upAxis() {
            return this._upAxis;
        }
        set upAxis(e) {
            this._upAxis = e, this._constructCharacter();
        }
        _constructCharacter() {
            var e = R._bullet;
            this._btKinematicCharacter && e.btKinematicCharacterController_destroy(this._btKinematicCharacter);
            var t = wr._btTempVector30;
            e.btVector3_setValue(t, this._upAxis.x, this._upAxis.y, this._upAxis.z), this._btKinematicCharacter = e.btKinematicCharacterController_create(this._btColliderObject, this._colliderShape._btShape, this._stepHeight, t), 
            this.fallSpeed = this._fallSpeed, this.maxSlope = this._maxSlope, this.jumpSpeed = this._jumpSpeed, 
            this.gravity = this._gravity;
        }
        _onShapeChange(e) {
            super._onShapeChange(e), this._constructCharacter();
        }
        _onAdded() {
            var e = R._bullet, t = e.btPairCachingGhostObject_create();
            e.btCollisionObject_setUserIndex(t, this.id), e.btCollisionObject_setCollisionFlags(t, or.COLLISIONFLAGS_CHARACTER_OBJECT), 
            this._btColliderObject = t, this._colliderShape && this._constructCharacter(), super._onAdded();
        }
        _addToSimulation() {
            this._simulation._characters.push(this), this._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);
        }
        _removeFromSimulation() {
            this._simulation._removeCharacter(this);
            var e = this._simulation._characters;
            e.splice(e.indexOf(this), 1);
        }
        _cloneTo(e) {
            super._cloneTo(e);
            var t = e;
            t.stepHeight = this._stepHeight, t.upAxis = this._upAxis, t.maxSlope = this._maxSlope, 
            t.jumpSpeed = this._jumpSpeed, t.fallSpeed = this._fallSpeed, t.gravity = this._gravity;
        }
        _onDestroy() {
            R._bullet.btKinematicCharacterController_destroy(this._btKinematicCharacter), super._onDestroy(), 
            this._btKinematicCharacter = null;
        }
        move(e) {
            var t = wr._btVector30, r = R._bullet;
            r.btVector3_setValue(t, -e.x, e.y, e.z), r.btKinematicCharacterController_setWalkDirection(this._btKinematicCharacter, t);
        }
        jump(e = null) {
            var t = R._bullet, r = wr._btVector30;
            e ? (v._convertToBulletVec3(e, r, !0), t.btKinematicCharacterController_jump(this._btKinematicCharacter, r)) : (t.btVector3_setValue(r, 0, 0, 0), 
            t.btKinematicCharacterController_jump(this._btKinematicCharacter, r));
        }
    }
    wr.UPAXIS_X = 0, wr.UPAXIS_Y = 1, wr.UPAXIS_Z = 2;
    class Fr extends or {
        constructor(e, t) {
            super(e, t), this._isTrigger = !1;
        }
        get isTrigger() {
            return this._isTrigger;
        }
        set isTrigger(e) {
            this._isTrigger = e;
            var t = R._bullet;
            if (this._btColliderObject) {
                var r = t.btCollisionObject_getCollisionFlags(this._btColliderObject);
                e ? 0 == (r & or.COLLISIONFLAGS_NO_CONTACT_RESPONSE) && t.btCollisionObject_setCollisionFlags(this._btColliderObject, r | or.COLLISIONFLAGS_NO_CONTACT_RESPONSE) : 0 != (r & or.COLLISIONFLAGS_NO_CONTACT_RESPONSE) && t.btCollisionObject_setCollisionFlags(this._btColliderObject, r ^ or.COLLISIONFLAGS_NO_CONTACT_RESPONSE);
            }
        }
        _onAdded() {
            super._onAdded(), this.isTrigger = this._isTrigger;
        }
        _cloneTo(e) {
            super._cloneTo(e), e.isTrigger = this._isTrigger;
        }
    }
    class Br extends Fr {
        constructor(e = Nt.COLLISIONFILTERGROUP_DEFAULTFILTER, t = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            super(e, t), this._enableProcessCollisions = !1;
        }
        _addToSimulation() {
            this._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);
        }
        _removeFromSimulation() {
            this._simulation._removePhysicsCollider(this);
        }
        _onTransformChanged(e) {
            (e &= oe.TRANSFORM_WORLDPOSITION | oe.TRANSFORM_WORLDQUATERNION | oe.TRANSFORM_WORLDSCALE) && (this._transformFlag |= e, 
            this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
        }
        _parse(e) {
            null != e.friction && (this.friction = e.friction), null != e.rollingFriction && (this.rollingFriction = e.rollingFriction), 
            null != e.restitution && (this.restitution = e.restitution), null != e.isTrigger && (this.isTrigger = e.isTrigger), 
            super._parse(e), this._parseShape(e.shapes);
        }
        _onAdded() {
            var e = R._bullet, t = e.btCollisionObject_create();
            e.btCollisionObject_setUserIndex(t, this.id), e.btCollisionObject_forceActivationState(t, or.ACTIVATIONSTATE_DISABLE_SIMULATION);
            var r = e.btCollisionObject_getCollisionFlags(t);
            this.owner.isStatic ? ((r & or.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0 && (r ^= or.COLLISIONFLAGS_KINEMATIC_OBJECT), 
            r |= or.COLLISIONFLAGS_STATIC_OBJECT) : ((r & or.COLLISIONFLAGS_STATIC_OBJECT) > 0 && (r ^= or.COLLISIONFLAGS_STATIC_OBJECT), 
            r |= or.COLLISIONFLAGS_KINEMATIC_OBJECT), e.btCollisionObject_setCollisionFlags(t, r), 
            this._btColliderObject = t, super._onAdded();
        }
    }
    class Ur extends Fr {
        constructor(e = Nt.COLLISIONFILTERGROUP_DEFAULTFILTER, t = Nt.COLLISIONFILTERGROUP_ALLFILTER) {
            super(e, t), this._isKinematic = !1, this._mass = 1, this._gravity = new n(0, -10, 0), 
            this._angularDamping = 0, this._linearDamping = 0, this._overrideGravity = !1, this._totalTorque = new n(0, 0, 0), 
            this._totalForce = new n(0, 0, 0), this._linearVelocity = new n(), this._angularVelocity = new n(), 
            this._linearFactor = new n(1, 1, 1), this._angularFactor = new n(1, 1, 1), this._detectCollisions = !0;
        }
        static __init__() {
            var e = R._bullet;
            Ur._btTempVector30 = e.btVector3_create(0, 0, 0), Ur._btTempVector31 = e.btVector3_create(0, 0, 0), 
            Ur._btVector3Zero = e.btVector3_create(0, 0, 0), Ur._btInertia = e.btVector3_create(0, 0, 0), 
            Ur._btImpulse = e.btVector3_create(0, 0, 0), Ur._btImpulseOffset = e.btVector3_create(0, 0, 0), 
            Ur._btGravity = e.btVector3_create(0, 0, 0);
        }
        get mass() {
            return this._mass;
        }
        set mass(e) {
            e = Math.max(e, 1e-7), this._mass = e, this._isKinematic || this._updateMass(e);
        }
        get isKinematic() {
            return this._isKinematic;
        }
        set isKinematic(e) {
            this._isKinematic = e;
            var t = R._bullet, r = !!(this._simulation && this._enabled && this._colliderShape);
            r && this._removeFromSimulation();
            var i = this._btColliderObject, a = t.btCollisionObject_getCollisionFlags(i);
            e ? (a |= or.COLLISIONFLAGS_KINEMATIC_OBJECT, t.btCollisionObject_setCollisionFlags(i, a), 
            t.btCollisionObject_forceActivationState(this._btColliderObject, or.ACTIVATIONSTATE_DISABLE_DEACTIVATION), 
            this._enableProcessCollisions = !1, this._updateMass(0)) : ((a & or.COLLISIONFLAGS_KINEMATIC_OBJECT) > 0 && (a ^= or.COLLISIONFLAGS_KINEMATIC_OBJECT), 
            t.btCollisionObject_setCollisionFlags(i, a), t.btCollisionObject_setActivationState(this._btColliderObject, or.ACTIVATIONSTATE_ACTIVE_TAG), 
            this._enableProcessCollisions = !0, this._updateMass(this._mass));
            var n = Ur._btVector3Zero;
            t.btCollisionObject_setInterpolationLinearVelocity(i, n), t.btRigidBody_setLinearVelocity(i, n), 
            t.btCollisionObject_setInterpolationAngularVelocity(i, n), t.btRigidBody_setAngularVelocity(i, n), 
            r && this._addToSimulation();
        }
        get linearDamping() {
            return this._linearDamping;
        }
        set linearDamping(e) {
            this._linearDamping = e, this._btColliderObject && R._bullet.btRigidBody_setDamping(this._btColliderObject, e, this._angularDamping);
        }
        get angularDamping() {
            return this._angularDamping;
        }
        set angularDamping(e) {
            this._angularDamping = e, this._btColliderObject && R._bullet.btRigidBody_setDamping(this._btColliderObject, this._linearDamping, e);
        }
        get overrideGravity() {
            return this._overrideGravity;
        }
        set overrideGravity(e) {
            this._overrideGravity = e;
            var t = R._bullet;
            if (this._btColliderObject) {
                var r = t.btRigidBody_getFlags(this._btColliderObject);
                e ? 0 == (r & Ur._BT_DISABLE_WORLD_GRAVITY) && t.btRigidBody_setFlags(this._btColliderObject, r | Ur._BT_DISABLE_WORLD_GRAVITY) : (r & Ur._BT_DISABLE_WORLD_GRAVITY) > 0 && t.btRigidBody_setFlags(this._btColliderObject, r ^ Ur._BT_DISABLE_WORLD_GRAVITY);
            }
        }
        get gravity() {
            return this._gravity;
        }
        set gravity(e) {
            this._gravity = e;
            var t = R._bullet;
            t.btVector3_setValue(Ur._btGravity, -e.x, e.y, e.z), t.btRigidBody_setGravity(this._btColliderObject, Ur._btGravity);
        }
        get totalForce() {
            if (this._btColliderObject) {
                var e = R._bullet.btRigidBody_getTotalForce(this._btColliderObject);
                return v._convertToLayaVec3(e, this._totalForce, !0), this._totalForce;
            }
            return null;
        }
        get linearFactor() {
            return this._btColliderObject ? this._linearFactor : null;
        }
        set linearFactor(e) {
            if (this._linearFactor = e, this._btColliderObject) {
                var t = Ur._btTempVector30;
                v._convertToBulletVec3(e, t, !1), R._bullet.btRigidBody_setLinearFactor(this._btColliderObject, t);
            }
        }
        get linearVelocity() {
            return this._btColliderObject && v._convertToLayaVec3(R._bullet.btRigidBody_getLinearVelocity(this._btColliderObject), this._linearVelocity, !0), 
            this._linearVelocity;
        }
        set linearVelocity(e) {
            if (this._linearVelocity = e, this._btColliderObject) {
                var t = Ur._btTempVector30;
                v._convertToBulletVec3(e, t, !0), this.isSleeping && this.wakeUp(), R._bullet.btRigidBody_setLinearVelocity(this._btColliderObject, t);
            }
        }
        get angularFactor() {
            return this._btColliderObject ? this._angularFactor : null;
        }
        set angularFactor(e) {
            if (this._angularFactor = e, this._btColliderObject) {
                var t = Ur._btTempVector30;
                v._convertToBulletVec3(e, t, !1), R._bullet.btRigidBody_setAngularFactor(this._btColliderObject, t);
            }
        }
        get angularVelocity() {
            return this._btColliderObject && v._convertToLayaVec3(R._bullet.btRigidBody_getAngularVelocity(this._btColliderObject), this._angularVelocity, !0), 
            this._angularVelocity;
        }
        set angularVelocity(e) {
            if (this._angularVelocity = e, this._btColliderObject) {
                var t = Ur._btTempVector30;
                v._convertToBulletVec3(e, t, !0), this.isSleeping && this.wakeUp(), R._bullet.btRigidBody_setAngularVelocity(this._btColliderObject, t);
            }
        }
        get totalTorque() {
            if (this._btColliderObject) {
                var e = R._bullet.btRigidBody_getTotalTorque(this._btColliderObject);
                return v._convertToLayaVec3(e, this._totalTorque, !0), this._totalTorque;
            }
            return null;
        }
        get detectCollisions() {
            return this._detectCollisions;
        }
        set detectCollisions(e) {
            this._detectCollisions !== e && (this._detectCollisions = e, this._colliderShape && this._enabled && this._simulation && (this._simulation._removeRigidBody(this), 
            this._simulation._addRigidBody(this, this._collisionGroup, e ? this._canCollideWith : 0)));
        }
        get isSleeping() {
            return !!this._btColliderObject && R._bullet.btCollisionObject_getActivationState(this._btColliderObject) === or.ACTIVATIONSTATE_ISLAND_SLEEPING;
        }
        get sleepLinearVelocity() {
            return R._bullet.btRigidBody_getLinearSleepingThreshold(this._btColliderObject);
        }
        set sleepLinearVelocity(e) {
            var t = R._bullet;
            t.btRigidBody_setSleepingThresholds(this._btColliderObject, e, t.btRigidBody_getAngularSleepingThreshold(this._btColliderObject));
        }
        get sleepAngularVelocity() {
            return R._bullet.btRigidBody_getAngularSleepingThreshold(this._btColliderObject);
        }
        set sleepAngularVelocity(e) {
            var t = R._bullet;
            t.btRigidBody_setSleepingThresholds(this._btColliderObject, t.btRigidBody_getLinearSleepingThreshold(this._btColliderObject), e);
        }
        _updateMass(e) {
            if (this._btColliderObject && this._colliderShape) {
                var t = R._bullet;
                t.btCollisionShape_calculateLocalInertia(this._colliderShape._btShape, e, Ur._btInertia), 
                t.btRigidBody_setMassProps(this._btColliderObject, e, Ur._btInertia), t.btRigidBody_updateInertiaTensor(this._btColliderObject);
            }
        }
        _onScaleChange(e) {
            super._onScaleChange(e), this._updateMass(this._isKinematic ? 0 : this._mass);
        }
        _onAdded() {
            var e = R._bullet, t = e.layaMotionState_create();
            e.layaMotionState_set_rigidBodyID(t, this._id), this._btLayaMotionState = t;
            var r = e.btRigidBodyConstructionInfo_create(0, t, null, Ur._btVector3Zero), i = e.btRigidBody_create(r);
            e.btCollisionObject_setUserIndex(i, this.id), this._btColliderObject = i, super._onAdded(), 
            this.mass = this._mass, this.linearFactor = this._linearFactor, this.angularFactor = this._angularFactor, 
            this.linearDamping = this._linearDamping, this.angularDamping = this._angularDamping, 
            this.overrideGravity = this._overrideGravity, this.gravity = this._gravity, this.isKinematic = this._isKinematic, 
            e.btRigidBodyConstructionInfo_destroy(r);
        }
        _onShapeChange(e) {
            if (super._onShapeChange(e), this._isKinematic) this._updateMass(0); else {
                var t = R._bullet;
                t.btRigidBody_setCenterOfMassTransform(this._btColliderObject, t.btCollisionObject_getWorldTransform(this._btColliderObject)), 
                this._updateMass(this._mass);
            }
        }
        _parse(e) {
            null != e.friction && (this.friction = e.friction), null != e.rollingFriction && (this.rollingFriction = e.rollingFriction), 
            null != e.restitution && (this.restitution = e.restitution), null != e.isTrigger && (this.isTrigger = e.isTrigger), 
            null != e.mass && (this.mass = e.mass), null != e.isKinematic && (this.isKinematic = e.isKinematic), 
            null != e.linearDamping && (this.linearDamping = e.linearDamping), null != e.angularDamping && (this.angularDamping = e.angularDamping), 
            null != e.overrideGravity && (this.overrideGravity = e.overrideGravity), e.gravity && (this.gravity.fromArray(e.gravity), 
            this.gravity = this.gravity), super._parse(e), this._parseShape(e.shapes);
        }
        _onDestroy() {
            R._bullet.btMotionState_destroy(this._btLayaMotionState), super._onDestroy(), this._btLayaMotionState = null, 
            this._gravity = null, this._totalTorque = null, this._linearVelocity = null, this._angularVelocity = null, 
            this._linearFactor = null, this._angularFactor = null;
        }
        _addToSimulation() {
            this._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);
        }
        _removeFromSimulation() {
            this._simulation._removeRigidBody(this);
        }
        _cloneTo(e) {
            super._cloneTo(e);
            var t = e;
            t.isKinematic = this._isKinematic, t.mass = this._mass, t.gravity = this._gravity, 
            t.angularDamping = this._angularDamping, t.linearDamping = this._linearDamping, 
            t.overrideGravity = this._overrideGravity, t.linearVelocity = this._linearVelocity, 
            t.angularVelocity = this._angularVelocity, t.linearFactor = this._linearFactor, 
            t.angularFactor = this._angularFactor, t.detectCollisions = this._detectCollisions;
        }
        applyForce(e, t = null) {
            if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var r = R._bullet, i = Ur._btTempVector30;
            if (r.btVector3_setValue(i, -e.x, e.y, e.z), t) {
                var a = Ur._btTempVector31;
                r.btVector3_setValue(a, -t.x, t.y, t.z), r.btRigidBody_applyForce(this._btColliderObject, i, a);
            } else r.btRigidBody_applyCentralForce(this._btColliderObject, i);
        }
        applyTorque(e) {
            if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var t = R._bullet, r = Ur._btTempVector30;
            t.btVector3_setValue(r, -e.x, e.y, e.z), t.btRigidBody_applyTorque(this._btColliderObject, r);
        }
        applyImpulse(e, t = null) {
            if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var r = R._bullet;
            r.btVector3_setValue(Ur._btImpulse, -e.x, e.y, e.z), t ? (r.btVector3_setValue(Ur._btImpulseOffset, -t.x, t.y, t.z), 
            r.btRigidBody_applyImpulse(this._btColliderObject, Ur._btImpulse, Ur._btImpulseOffset)) : r.btRigidBody_applyCentralImpulse(this._btColliderObject, Ur._btImpulse);
        }
        applyTorqueImpulse(e) {
            if (null == this._btColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var t = R._bullet, r = Ur._btTempVector30;
            t.btVector3_setValue(r, -e.x, e.y, e.z), t.btRigidBody_applyTorqueImpulse(this._btColliderObject, r);
        }
        wakeUp() {
            this._btColliderObject && R._bullet.btCollisionObject_activate(this._btColliderObject, !1);
        }
        clearForces() {
            var e = this._btColliderObject;
            if (null == e) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var t = R._bullet;
            t.btRigidBody_clearForces(e);
            var r = Ur._btVector3Zero;
            t.btCollisionObject_setInterpolationLinearVelocity(e, r), t.btRigidBody_setLinearVelocity(e, r), 
            t.btCollisionObject_setInterpolationAngularVelocity(e, r), t.btRigidBody_setAngularVelocity(e, r);
        }
    }
    Ur.TYPE_STATIC = 0, Ur.TYPE_DYNAMIC = 1, Ur.TYPE_KINEMATIC = 2, Ur._BT_DISABLE_WORLD_GRAVITY = 1, 
    Ur._BT_ENABLE_GYROPSCOPIC_FORCE = 2;
    class Gr extends $t {
        static __init__() {
            Gr._btNormal = R._bullet.btVector3_create(0, 0, 0);
        }
        constructor(e, t) {
            super(), this._normal = e, this._offset = t, this._type = $t.SHAPETYPES_STATICPLANE;
            var r = R._bullet;
            r.btVector3_setValue(Gr._btNormal, -e.x, e.y, e.z), this._btShape = r.btStaticPlaneShape_create(Gr._btNormal, t);
        }
        clone() {
            var e = new Gr(this._normal, this._offset);
            return this.cloneTo(e), e;
        }
    }
    class zr extends ue {
        constructor(e) {
            super(), this._id = ++zr._uniqueIDCounter, this._mesh = e, this._boneIndicesList = [], 
            this._subIndexBufferStart = [], this._subIndexBufferCount = [];
        }
        get indexCount() {
            return this._indexCount;
        }
        _setIndexRange(e, t) {
            this._indexStart = e, this._indexCount = t, this._indices = new Uint16Array(this._indexBuffer.getData().buffer, 2 * e, t);
        }
        _getType() {
            return zr._type;
        }
        _prepareRender(e) {
            return this._mesh._uploadVerticesData(), !0;
        }
        _render(r) {
            var i = this._mesh;
            if (i.indexFormat !== e.IndexFormat.UInt32 || t.LayaGL.layaGPUInstance.supportElementIndexUint32()) {
                var a, n = t.LayaGL.instance, s = r.renderElement.render._skinnedData;
                switch (i.indexFormat) {
                  case e.IndexFormat.UInt32:
                    a = n.UNSIGNED_INT;
                    break;

                  case e.IndexFormat.UInt16:
                    a = n.UNSIGNED_SHORT;
                    break;

                  case e.IndexFormat.UInt8:
                    a = n.UNSIGNED_BYTE;
                }
                if (i._bufferState.bind(), s) for (var o = s[this._indexInMesh], l = 0, _ = this._boneIndicesList.length; l < _; l++) r.shader.uploadCustomUniform(Dr.BONES, o[l]), 
                n.drawElements(n.TRIANGLES, this._subIndexBufferCount[l], a, 2 * this._subIndexBufferStart[l]); else n.drawElements(n.TRIANGLES, this._indexCount, a, 2 * this._indexStart);
                t.Stat.trianglesFaces += this._indexCount / 3, t.Stat.renderBatches++;
            } else console.warn("SubMesh:this device do not support IndexFormat.UInt32.");
        }
        getIndices() {
            if (this._mesh._isReadable) return this._indices.slice();
            throw "SubMesh:can't get indices on subMesh,mesh's isReadable must be true.";
        }
        setIndices(e) {
            this._indexBuffer.setData(e, this._indexStart, 0, this._indexCount);
        }
        destroy() {
            this._destroyed || (super.destroy(), this._indexBuffer.destroy(), this._indexBuffer = null, 
            this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null, 
            this._subIndexBufferCount = null, this._skinAnimationDatas = null);
        }
    }
    zr._uniqueIDCounter = 0, zr._type = ue._typeCounter++;
    class Hr {
        static parse(e, t, r, i) {
            Hr._mesh = r, Hr._subMeshes = i, Hr._version = t, Hr._readData = e, Hr.READ_DATA(), 
            Hr.READ_BLOCK(), Hr.READ_STRINGS();
            for (var a = 0, n = Hr._BLOCK.count; a < n; a++) {
                Hr._readData.pos = Hr._BLOCK.blockStarts[a];
                var s = Hr._readData.getUint16(), o = Hr._strings[s], l = Hr["READ_" + o];
                if (null == l) throw new Error("model file err,no this function:" + s + " " + o);
                l.call(null);
            }
            Hr._mesh._bindPoseIndices = new Uint16Array(Hr._bindPoseIndices), Hr._bindPoseIndices.length = 0, 
            Hr._strings.length = 0, Hr._readData = null, Hr._version = null, Hr._mesh = null, 
            Hr._subMeshes = null;
        }
        static _readString() {
            return Hr._strings[Hr._readData.getUint16()];
        }
        static READ_DATA() {
            Hr._DATA.offset = Hr._readData.getUint32(), Hr._DATA.size = Hr._readData.getUint32();
        }
        static READ_BLOCK() {
            for (var e = Hr._BLOCK.count = Hr._readData.getUint16(), t = Hr._BLOCK.blockStarts = [], r = Hr._BLOCK.blockLengths = [], i = 0; i < e; i++) t.push(Hr._readData.getUint32()), 
            r.push(Hr._readData.getUint32());
        }
        static READ_STRINGS() {
            var e = Hr._readData.getUint32(), t = Hr._readData.getUint16(), r = Hr._readData.pos;
            Hr._readData.pos = e + Hr._DATA.offset;
            for (var i = 0; i < t; i++) Hr._strings[i] = Hr._readData.readUTFString();
            Hr._readData.pos = r;
        }
        static READ_MESH() {
            var r, i = t.LayaGL.instance, a = (Hr._readString(), Hr._readData.__getBuffer()), n = 0, s = Hr._readData.getInt16(), o = Hr._DATA.offset;
            for (r = 0; r < s; r++) {
                var l, _ = o + Hr._readData.getUint32(), h = Hr._readData.getUint32(), c = a.slice(_, _ + h), d = new Float32Array(c), u = Hr._readString();
                switch (Hr._version) {
                  case "LAYAMODEL:0301":
                  case "LAYAMODEL:0400":
                    l = ge.getVertexDeclaration(u);
                    break;

                  case "LAYAMODEL:0401":
                    l = ge.getVertexDeclaration(u, !1);
                    break;

                  default:
                    throw new Error("LoadModelV03: unknown version.");
                }
                if (!l) throw new Error("LoadModelV03: unknown vertexDeclaration.");
                var f = new fe(4 * d.length, i.STATIC_DRAW, !0);
                f.vertexDeclaration = l, f.setData(d.buffer), Hr._mesh._vertexBuffer = f, Hr._mesh._vertexCount += f._byteLength / l.vertexStride, 
                n += 4 * d.length;
            }
            var m = o + Hr._readData.getUint32(), E = Hr._readData.getUint32(), T = new Uint16Array(a.slice(m, m + E)), g = new be(e.IndexFormat.UInt16, E / 2, i.STATIC_DRAW, !0);
            g.setData(T), Hr._mesh._indexBuffer = g, n += 2 * g.indexCount, Hr._mesh._setBuffer(Hr._mesh._vertexBuffer, g), 
            Hr._mesh._setCPUMemory(n), Hr._mesh._setGPUMemory(n);
            var p = Hr._mesh._boneNames = [], S = Hr._readData.getUint16();
            for (p.length = S, r = 0; r < S; r++) p[r] = Hr._strings[Hr._readData.getUint16()];
            Hr._readData.pos += 8;
            var R = Hr._readData.getUint32(), v = Hr._readData.getUint32(), I = new Float32Array(a.slice(o + R, o + R + v)), x = I.length, A = Hr._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * x);
            for (Hr._mesh._inverseBindPoses = [], r = 0; r < x; r += 16) {
                var D = new L(I[r + 0], I[r + 1], I[r + 2], I[r + 3], I[r + 4], I[r + 5], I[r + 6], I[r + 7], I[r + 8], I[r + 9], I[r + 10], I[r + 11], I[r + 12], I[r + 13], I[r + 14], I[r + 15], new Float32Array(A, 4 * r, 16));
                Hr._mesh._inverseBindPoses[r / 16] = D;
            }
            return !0;
        }
        static READ_SUBMESH() {
            var e = Hr._readData.__getBuffer(), t = new zr(Hr._mesh);
            Hr._readData.getInt16(), Hr._readData.getUint32(), Hr._readData.getUint32();
            var r = Hr._readData.getUint32(), i = Hr._readData.getUint32(), a = Hr._mesh._indexBuffer;
            t._indexBuffer = a, t._setIndexRange(r, i);
            var n = Hr._mesh._vertexBuffer;
            t._vertexBuffer = n;
            var s = Hr._DATA.offset, o = t._subIndexBufferStart, l = t._subIndexBufferCount, _ = t._boneIndicesList, h = Hr._readData.getUint16();
            o.length = h, l.length = h, _.length = h;
            for (var c = Hr._mesh._skinDataPathMarks, d = Hr._bindPoseIndices, u = Hr._subMeshes.length, f = 0; f < h; f++) {
                o[f] = Hr._readData.getUint32(), l[f] = Hr._readData.getUint32();
                for (var m = Hr._readData.getUint32(), E = Hr._readData.getUint32(), T = _[f] = new Uint16Array(e.slice(s + m, s + m + E)), g = 0, p = T.length; g < p; g++) {
                    var S = T[g], R = d.indexOf(S);
                    -1 === R ? (T[g] = d.length, d.push(S), c.push([ u, f, g ])) : T[g] = R;
                }
            }
            return Hr._subMeshes.push(t), !0;
        }
    }
    Hr._BLOCK = {
        count: 0
    }, Hr._DATA = {
        offset: 0,
        size: 0
    }, Hr._strings = [], Hr._bindPoseIndices = [];
    class Wr {
        static parse(e, t, r, i) {
            Wr._mesh = r, Wr._subMeshes = i, Wr._version = t, Wr._readData = e, Wr.READ_DATA(), 
            Wr.READ_BLOCK(), Wr.READ_STRINGS();
            for (var a = 0, n = Wr._BLOCK.count; a < n; a++) {
                Wr._readData.pos = Wr._BLOCK.blockStarts[a];
                var s = Wr._readData.getUint16(), o = Wr._strings[s], l = Wr["READ_" + o];
                if (null == l) throw new Error("model file err,no this function:" + s + " " + o);
                l.call(null);
            }
            Wr._mesh._bindPoseIndices = new Uint16Array(Wr._bindPoseIndices), Wr._bindPoseIndices.length = 0, 
            Wr._strings.length = 0, Wr._readData = null, Wr._version = null, Wr._mesh = null, 
            Wr._subMeshes = null;
        }
        static _readString() {
            return Wr._strings[Wr._readData.getUint16()];
        }
        static READ_DATA() {
            Wr._DATA.offset = Wr._readData.getUint32(), Wr._DATA.size = Wr._readData.getUint32();
        }
        static READ_BLOCK() {
            for (var e = Wr._BLOCK.count = Wr._readData.getUint16(), t = Wr._BLOCK.blockStarts = [], r = Wr._BLOCK.blockLengths = [], i = 0; i < e; i++) t.push(Wr._readData.getUint32()), 
            r.push(Wr._readData.getUint32());
        }
        static READ_STRINGS() {
            var e = Wr._readData.getUint32(), t = Wr._readData.getUint16(), r = Wr._readData.pos;
            Wr._readData.pos = e + Wr._DATA.offset;
            for (var i = 0; i < t; i++) Wr._strings[i] = Wr._readData.readUTFString();
            Wr._readData.pos = r;
        }
        static READ_MESH() {
            var r, i = t.LayaGL.instance, a = 0, n = (Wr._readString(), Wr._readData), s = n.__getBuffer(), o = n.getInt16(), l = Wr._DATA.offset;
            for (r = 0; r < o; r++) {
                var _, h, c, d = l + n.getUint32(), u = n.getUint32(), f = Wr._readString(), m = ge.getVertexDeclaration(f, !1), E = m.vertexStride, g = f.split(","), p = g.length, S = Wr._mesh;
                switch (Wr._version) {
                  case "LAYAMODEL:05":
                    _ = s.slice(d, d + u * E), h = new Float32Array(_), c = new Uint8Array(_);
                    break;

                  case "LAYAMODEL:COMPRESSION_05":
                    _ = new ArrayBuffer(E * u), h = new Float32Array(_), c = new Uint8Array(_);
                    var R = n.pos;
                    n.pos = d;
                    for (var v = 0; v < u; v++) for (var I, x = v * E, A = 0; A < p; A++) switch (g[A]) {
                      case "POSITION":
                        h[I = x / 4] = T.convertToNumber(n.getUint16()), h[I + 1] = T.convertToNumber(n.getUint16()), 
                        h[I + 2] = T.convertToNumber(n.getUint16()), x += 12;
                        break;

                      case "NORMAL":
                        h[I = x / 4] = n.getUint8() / 127.5 - 1, h[I + 1] = n.getUint8() / 127.5 - 1, h[I + 2] = n.getUint8() / 127.5 - 1, 
                        x += 12;
                        break;

                      case "COLOR":
                        h[I = x / 4] = n.getUint8() / 255, h[I + 1] = n.getUint8() / 255, h[I + 2] = n.getUint8() / 255, 
                        h[I + 3] = n.getUint8() / 255, x += 16;
                        break;

                      case "UV":
                      case "UV1":
                        h[I = x / 4] = T.convertToNumber(n.getUint16()), h[I + 1] = T.convertToNumber(n.getUint16()), 
                        x += 8;
                        break;

                      case "BLENDWEIGHT":
                        h[I = x / 4] = n.getUint8() / 255, h[I + 1] = n.getUint8() / 255, h[I + 2] = n.getUint8() / 255, 
                        h[I + 3] = n.getUint8() / 255, x += 16;
                        break;

                      case "BLENDINDICES":
                        c[x] = n.getUint8(), c[x + 1] = n.getUint8(), c[x + 2] = n.getUint8(), c[x + 3] = n.getUint8(), 
                        x += 4;
                        break;

                      case "TANGENT":
                        h[I = x / 4] = n.getUint8() / 127.5 - 1, h[I + 1] = n.getUint8() / 127.5 - 1, h[I + 2] = n.getUint8() / 127.5 - 1, 
                        h[I + 3] = n.getUint8() / 127.5 - 1, x += 16;
                    }
                    n.pos = R;
                }
                var D = new fe(_.byteLength, i.STATIC_DRAW, !0);
                D.vertexDeclaration = m, D.setData(_);
                u = D._byteLength / m.vertexStride;
                S._indexFormat = u > 65535 ? e.IndexFormat.UInt32 : e.IndexFormat.UInt16, S._vertexBuffer = D, 
                S._vertexCount += u, a += 4 * h.length;
            }
            var M, C = l + n.getUint32(), y = n.getUint32();
            M = S.indexFormat == e.IndexFormat.UInt32 ? new Uint32Array(s.slice(C, C + y)) : new Uint16Array(s.slice(C, C + y));
            var O = new be(S.indexFormat, M.length, i.STATIC_DRAW, !0);
            O.setData(M), S._indexBuffer = O, S._setBuffer(S._vertexBuffer, O), a += 2 * O.indexCount, 
            S._setCPUMemory(a), S._setGPUMemory(a);
            var N = S._boneNames = [], P = n.getUint16();
            for (N.length = P, r = 0; r < P; r++) N[r] = Wr._strings[n.getUint16()];
            var b = n.getUint32(), V = n.getUint32(), w = new Float32Array(s.slice(l + b, l + b + V)), F = w.length, B = S._inverseBindPosesBuffer = new ArrayBuffer(4 * F);
            for (S._inverseBindPoses = [], r = 0; r < F; r += 16) {
                var U = new L(w[r + 0], w[r + 1], w[r + 2], w[r + 3], w[r + 4], w[r + 5], w[r + 6], w[r + 7], w[r + 8], w[r + 9], w[r + 10], w[r + 11], w[r + 12], w[r + 13], w[r + 14], w[r + 15], new Float32Array(B, 4 * r, 16));
                S._inverseBindPoses[r / 16] = U;
            }
            return !0;
        }
        static READ_SUBMESH() {
            var e = Wr._readData, t = e.__getBuffer(), r = new zr(Wr._mesh);
            e.getInt16();
            var i = e.getUint32(), a = e.getUint32(), n = Wr._mesh._indexBuffer;
            r._indexBuffer = n, r._setIndexRange(i, a);
            var s = Wr._mesh._vertexBuffer;
            r._vertexBuffer = s;
            var o = Wr._DATA.offset, l = r._subIndexBufferStart, _ = r._subIndexBufferCount, h = r._boneIndicesList, c = e.getUint16();
            l.length = c, _.length = c, h.length = c;
            for (var d = Wr._mesh._skinDataPathMarks, u = Wr._bindPoseIndices, f = Wr._subMeshes.length, m = 0; m < c; m++) {
                l[m] = e.getUint32(), _[m] = e.getUint32();
                for (var E = e.getUint32(), T = e.getUint32(), g = h[m] = new Uint16Array(t.slice(o + E, o + E + T)), p = 0, S = g.length; p < S; p++) {
                    var R = g[p], v = u.indexOf(R);
                    -1 === v ? (g[p] = u.length, u.push(R), d.push([ f, m, p ])) : g[p] = v;
                }
            }
            return Wr._subMeshes.push(r), !0;
        }
    }
    Wr._BLOCK = {
        count: 0
    }, Wr._DATA = {
        offset: 0,
        size: 0
    }, Wr._strings = [], Wr._bindPoseIndices = [];
    class kr {
        constructor() {}
        static read(e, r, i) {
            var a = new t.Byte(e);
            a.pos = 0;
            var n = a.readUTFString();
            switch (n) {
              case "LAYAMODEL:0301":
              case "LAYAMODEL:0400":
              case "LAYAMODEL:0401":
                Hr.parse(a, n, r, i);
                break;

              case "LAYAMODEL:05":
              case "LAYAMODEL:COMPRESSION_05":
                Wr.parse(a, n, r, i);
                break;

              default:
                throw new Error("MeshReader: unknown mesh version.");
            }
            r._setSubMeshes(i);
        }
    }
    class Xr extends t.Resource {
        constructor(t = !0) {
            super(), this._tempVector30 = new n(), this._tempVector31 = new n(), this._tempVector32 = new n(), 
            this._minVerticesUpdate = -1, this._maxVerticesUpdate = -1, this._needUpdateBounds = !0, 
            this._bounds = new et(new n(), new n()), this._bufferState = new ye(), this._instanceBufferState = new ye(), 
            this._vertexBuffer = null, this._indexBuffer = null, this._vertexCount = 0, this._indexFormat = e.IndexFormat.UInt16, 
            this._isReadable = t, this._subMeshes = [], this._skinDataPathMarks = [];
        }
        static __init__() {
            var e = R._bullet;
            e && (Xr._nativeTempVector30 = e.btVector3_create(0, 0, 0), Xr._nativeTempVector31 = e.btVector3_create(0, 0, 0), 
            Xr._nativeTempVector32 = e.btVector3_create(0, 0, 0));
        }
        static _parse(e, t = null, r = null) {
            var i = new Xr();
            return kr.read(e, i, i._subMeshes), i;
        }
        static load(e, r) {
            t.ILaya.loader.create(e, r, null, Xr.MESH);
        }
        get inverseAbsoluteBindPoses() {
            return this._inverseBindPoses;
        }
        get vertexCount() {
            return this._vertexCount;
        }
        get indexCount() {
            return this._indexBuffer.indexCount;
        }
        get subMeshCount() {
            return this._subMeshes.length;
        }
        get bounds() {
            return this._bounds;
        }
        set bounds(e) {
            this._bounds !== e && e.cloneTo(this._bounds);
        }
        get indexFormat() {
            return this._indexFormat;
        }
        _getPositionElement(e) {
            for (var t = e.vertexDeclaration._vertexElements, r = 0, i = t.length; r < i; r++) {
                var a = t[r];
                if (a._elementFormat === me.Vector3 && a._elementUsage === ge.MESH_POSITION0) return a;
            }
            return null;
        }
        _getVerticeElementData(e, t) {
            e.length = this._vertexCount;
            var r = this._vertexBuffer.vertexDeclaration, s = r.getVertexElementByUsage(t);
            if (s) {
                var o = this._vertexBuffer.getUint8Data(), l = this._vertexBuffer.getFloat32Data(), _ = r.vertexStride, h = _ / 4, c = s._offset, d = c / 4;
                switch (t) {
                  case ge.MESH_TEXTURECOORDINATE0:
                  case ge.MESH_TEXTURECOORDINATE1:
                    for (var u = 0; u < this._vertexCount; u++) {
                        var f = h * u + d;
                        e[u] = new i(l[f], l[f + 1]);
                    }
                    break;

                  case ge.MESH_POSITION0:
                  case ge.MESH_NORMAL0:
                    for (u = 0; u < this._vertexCount; u++) {
                        f = h * u + d;
                        e[u] = new n(l[f], l[f + 1], l[f + 2]);
                    }
                    break;

                  case ge.MESH_TANGENT0:
                  case ge.MESH_BLENDWEIGHT0:
                    for (u = 0; u < this._vertexCount; u++) {
                        f = h * u + d;
                        e[u] = new a(l[f], l[f + 1], l[f + 2], l[f + 3]);
                    }
                    break;

                  case ge.MESH_COLOR0:
                    for (u = 0; u < this._vertexCount; u++) {
                        f = h * u + d;
                        e[u] = new ne(l[f], l[f + 1], l[f + 2], l[f + 3]);
                    }
                    break;

                  case ge.MESH_BLENDINDICES0:
                    for (u = 0; u < this._vertexCount; u++) {
                        f = _ * u + c;
                        e[u] = new a(o[f], o[f + 1], o[f + 2], o[f + 3]);
                    }
                    break;

                  default:
                    throw "Mesh:Unknown elementUsage.";
                }
            }
        }
        _setVerticeElementData(e, t) {
            var r = this._vertexBuffer.vertexDeclaration, i = r.getVertexElementByUsage(t);
            if (i) {
                var a = this._vertexBuffer.getUint8Data(), n = this._vertexBuffer.getFloat32Data(), s = r.vertexStride, o = s / 4, l = i._offset, _ = l / 4;
                switch (t) {
                  case ge.MESH_TEXTURECOORDINATE0:
                  case ge.MESH_TEXTURECOORDINATE1:
                    for (var h = 0, c = e.length; h < c; h++) {
                        var d = o * h + _, u = e[h];
                        n[d] = u.x, n[d + 1] = u.y;
                    }
                    break;

                  case ge.MESH_POSITION0:
                  case ge.MESH_NORMAL0:
                    for (h = 0, c = e.length; h < c; h++) {
                        d = o * h + _;
                        var f = e[h];
                        n[d] = f.x, n[d + 1] = f.y, n[d + 2] = f.z;
                    }
                    break;

                  case ge.MESH_TANGENT0:
                  case ge.MESH_BLENDWEIGHT0:
                    for (h = 0, c = e.length; h < c; h++) {
                        d = o * h + _;
                        var m = e[h];
                        n[d] = m.x, n[d + 1] = m.y, n[d + 2] = m.z, n[d + 3] = m.w;
                    }
                    break;

                  case ge.MESH_COLOR0:
                    for (h = 0, c = e.length; h < c; h++) {
                        d = o * h + _;
                        var E = e[h];
                        n[d] = E.r, n[d + 1] = E.g, n[d + 2] = E.b, n[d + 2] = E.a;
                    }
                    break;

                  case ge.MESH_BLENDINDICES0:
                    for (h = 0, c = e.length; h < c; h++) {
                        d = s * h + l, m = e[h];
                        a[d] = m.x, a[d + 1] = m.y, a[d + 2] = m.z, a[d + 3] = m.w;
                    }
                    break;

                  default:
                    throw "Mesh:Unknown elementUsage.";
                }
                this._minVerticesUpdate = 0, this._maxVerticesUpdate = Number.MAX_SAFE_INTEGER;
            } else console.warn("Mesh: the mesh don't have  this VertexElement.");
        }
        _disposeResource() {
            for (var e = 0, t = this._subMeshes.length; e < t; e++) this._subMeshes[e].destroy();
            this._btTriangleMesh && R._bullet.btStridingMeshInterface_destroy(this._btTriangleMesh), 
            this._vertexBuffer.destroy(), this._indexBuffer.destroy(), this._bufferState.destroy(), 
            this._instanceBufferState.destroy(), this._setCPUMemory(0), this._setGPUMemory(0), 
            this._bufferState = null, this._instanceBufferState = null, this._vertexBuffer = null, 
            this._indexBuffer = null, this._subMeshes = null, this._btTriangleMesh = null, this._indexBuffer = null, 
            this._boneNames = null, this._inverseBindPoses = null;
        }
        _setSubMeshes(e) {
            this._subMeshes = e;
            for (var t = 0, r = e.length; t < r; t++) e[t]._indexInMesh = t;
            this.calculateBounds();
        }
        _setBuffer(e, t) {
            var r = this._bufferState;
            r.bind(), r.applyVertexBuffer(e), r.applyIndexBuffer(t), r.unBind();
            var i = this._instanceBufferState;
            i.bind(), i.applyVertexBuffer(e), i.applyInstanceVertexBuffer(pe.instance.instanceWorldMatrixBuffer), 
            i.applyInstanceVertexBuffer(pe.instance.instanceMVPMatrixBuffer), i.applyIndexBuffer(t), 
            i.unBind();
        }
        _getPhysicMesh() {
            if (!this._btTriangleMesh) {
                for (var e = R._bullet, t = e.btTriangleMesh_create(), r = Xr._nativeTempVector30, i = Xr._nativeTempVector31, a = Xr._nativeTempVector32, n = this._tempVector30, s = this._tempVector31, o = this._tempVector32, l = this._vertexBuffer, _ = this._getPositionElement(l), h = l.getFloat32Data(), c = l.vertexDeclaration.vertexStride / 4, d = _._offset / 4, u = this._indexBuffer.getData(), f = 0, m = u.length; f < m; f += 3) {
                    var E = u[f] * c + d, T = u[f + 1] * c + d, g = u[f + 2] * c + d;
                    n.setValue(h[E], h[E + 1], h[E + 2]), s.setValue(h[T], h[T + 1], h[T + 2]), o.setValue(h[g], h[g + 1], h[g + 2]), 
                    v._convertToBulletVec3(n, r, !0), v._convertToBulletVec3(s, i, !0), v._convertToBulletVec3(o, a, !0), 
                    e.btTriangleMesh_addTriangle(t, r, i, a, !0);
                }
                this._btTriangleMesh = t;
            }
            return this._btTriangleMesh;
        }
        _uploadVerticesData() {
            var e = this._minVerticesUpdate, t = this._maxVerticesUpdate;
            if (-1 !== e && -1 !== t) {
                var r = e;
                this._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer, r, r, t - e), 
                this._minVerticesUpdate = -1, this._maxVerticesUpdate = -1;
            }
        }
        getSubMesh(e) {
            return this._subMeshes[e];
        }
        getPositions(e) {
            if (!this._isReadable) throw "Mesh:can't get positions on mesh,isReadable must be true.";
            this._getVerticeElementData(e, ge.MESH_POSITION0);
        }
        setPositions(e) {
            if (!this._isReadable) throw "Mesh:setPosition() need isReadable must be true or use setVertices().";
            this._setVerticeElementData(e, ge.MESH_POSITION0), this._needUpdateBounds = !0;
        }
        getColors(e) {
            if (!this._isReadable) throw "Mesh:can't get colors on mesh,isReadable must be true.";
            this._getVerticeElementData(e, ge.MESH_COLOR0);
        }
        setColors(e) {
            if (!this._isReadable) throw "Mesh:setColors() need isReadable must be true or use setVertices().";
            this._setVerticeElementData(e, ge.MESH_COLOR0);
        }
        getUVs(e, t = 0) {
            if (!this._isReadable) throw "Mesh:can't get uvs on mesh,isReadable must be true.";
            switch (t) {
              case 0:
                this._getVerticeElementData(e, ge.MESH_TEXTURECOORDINATE0);
                break;

              case 1:
                this._getVerticeElementData(e, ge.MESH_TEXTURECOORDINATE1);
                break;

              default:
                throw "Mesh:Invalid channel.";
            }
        }
        setUVs(e, t = 0) {
            if (!this._isReadable) throw "Mesh:setUVs() need isReadable must be true or use setVertices().";
            switch (t) {
              case 0:
                this._setVerticeElementData(e, ge.MESH_TEXTURECOORDINATE0);
                break;

              case 1:
                this._setVerticeElementData(e, ge.MESH_TEXTURECOORDINATE1);
                break;

              default:
                throw "Mesh:Invalid channel.";
            }
        }
        getNormals(e) {
            if (!this._isReadable) throw "Mesh:can't get colors on mesh,isReadable must be true.";
            this._getVerticeElementData(e, ge.MESH_NORMAL0);
        }
        setNormals(e) {
            if (!this._isReadable) throw "Mesh:setNormals() need must be true or use setVertices().";
            this._setVerticeElementData(e, ge.MESH_NORMAL0);
        }
        getTangents(e) {
            if (!this._isReadable) throw "Mesh:can't get colors on mesh,isReadable must be true.";
            this._getVerticeElementData(e, ge.MESH_TANGENT0);
        }
        setTangents(e) {
            if (!this._isReadable) throw "Mesh:setTangents() need isReadable must be true or use setVertices().";
            this._setVerticeElementData(e, ge.MESH_TANGENT0);
        }
        getBoneWeights(e) {
            if (!this._isReadable) throw "Mesh:can't get boneWeights on mesh,isReadable must be true.";
            this._getVerticeElementData(e, ge.MESH_BLENDWEIGHT0);
        }
        setBoneWeights(e) {
            if (!this._isReadable) throw "Mesh:setBoneWeights() need isReadable must be true or use setVertices().";
            this._setVerticeElementData(e, ge.MESH_BLENDWEIGHT0);
        }
        getBoneIndices(e) {
            if (!this._isReadable) throw "Mesh:can't get boneIndices on mesh,isReadable must be true.";
            this._getVerticeElementData(e, ge.MESH_BLENDINDICES0);
        }
        setBoneIndices(e) {
            if (!this._isReadable) throw "Mesh:setBoneIndices() need isReadable must be true or use setVertices().";
            this._setVerticeElementData(e, ge.MESH_BLENDINDICES0);
        }
        markAsUnreadbale() {
            this._uploadVerticesData(), this._vertexBuffer.markAsUnreadbale(), this._isReadable = !1;
        }
        getVertexDeclaration() {
            return this._vertexBuffer._vertexDeclaration;
        }
        getVertices() {
            if (this._isReadable) return this._vertexBuffer.getUint8Data().buffer.slice(0);
            throw "Mesh:can't get vertices on mesh,isReadable must be true.";
        }
        setVertices(e) {
            this._vertexBuffer.setData(e), this._needUpdateBounds = !0;
        }
        getIndices() {
            if (this._isReadable) return this._indexBuffer.getData().slice();
            throw "Mesh:can't get indices on subMesh,mesh's isReadable must be true.";
        }
        setIndices(r) {
            var i;
            r instanceof Uint32Array ? i = e.IndexFormat.UInt32 : r instanceof Uint16Array ? i = e.IndexFormat.UInt16 : r instanceof Uint8Array && (i = e.IndexFormat.UInt8);
            var a = this._indexBuffer;
            this._indexFormat === i && a.indexCount === r.length || (a.destroy(), this._indexBuffer = a = new be(i, r.length, t.LayaGL.instance.STATIC_DRAW, this._isReadable)), 
            a.setData(r), this._indexFormat = i;
        }
        calculateBounds() {
            if (!this._isReadable) throw "Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.";
            if (this._needUpdateBounds) {
                var e = this._tempVector30, t = this._tempVector31;
                e.x = e.y = e.z = Number.MAX_VALUE, t.x = t.y = t.z = -Number.MAX_VALUE;
                for (var r = this._vertexBuffer, i = this._getPositionElement(r), a = r.getFloat32Data(), n = r.vertexDeclaration.vertexStride / 4, s = i._offset / 4, o = 0, l = a.length; o < l; o += n) {
                    var _ = o + s, h = a[_], c = a[_ + 1], d = a[_ + 2];
                    e.x = Math.min(e.x, h), e.y = Math.min(e.y, c), e.z = Math.min(e.z, d), t.x = Math.max(t.x, h), 
                    t.y = Math.max(t.y, c), t.z = Math.max(t.z, d);
                }
                this._bounds.setMin(e), this._bounds.setMax(t), this._needUpdateBounds = !1;
            }
        }
        cloneTo(t) {
            var r = t, i = this._vertexBuffer, a = new fe(i._byteLength, i.bufferUsage, i.canRead);
            a.vertexDeclaration = i.vertexDeclaration, a.setData(i.getUint8Data().slice().buffer), 
            r._vertexBuffer = a, r._vertexCount = this._vertexCount;
            var n, s = this._indexBuffer, o = new be(e.IndexFormat.UInt16, s.indexCount, s.bufferUsage, s.canRead);
            o.setData(s.getData().slice()), r._indexBuffer = o, r._setBuffer(r._vertexBuffer, o), 
            r._setCPUMemory(this.cpuMemory), r._setGPUMemory(this.gpuMemory);
            var l = this._boneNames, _ = r._boneNames = [];
            for (n = 0; n < l.length; n++) _[n] = l[n];
            var h = this._inverseBindPoses, c = r._inverseBindPoses = [];
            for (n = 0; n < h.length; n++) c[n] = h[n];
            for (r._bindPoseIndices = new Uint16Array(this._bindPoseIndices), n = 0; n < this._skinDataPathMarks.length; n++) r._skinDataPathMarks[n] = this._skinDataPathMarks[n].slice();
            for (n = 0; n < this.subMeshCount; n++) {
                var d = this._subMeshes[n], u = d._subIndexBufferStart, f = d._subIndexBufferCount, m = d._boneIndicesList, E = new zr(r);
                E._subIndexBufferStart.length = u.length, E._subIndexBufferCount.length = f.length, 
                E._boneIndicesList.length = m.length;
                for (var T = 0; T < u.length; T++) E._subIndexBufferStart[T] = u[T];
                for (T = 0; T < f.length; T++) E._subIndexBufferCount[T] = f[T];
                for (T = 0; T < m.length; T++) E._boneIndicesList[T] = new Uint16Array(m[T]);
                E._indexBuffer = o, E._indexStart = d._indexStart, E._indexCount = d._indexCount, 
                E._indices = new Uint16Array(o.getData().buffer, 2 * d._indexStart, d._indexCount);
                var g = r._vertexBuffer;
                E._vertexBuffer = g, r._subMeshes.push(E);
            }
            r._setSubMeshes(r._subMeshes);
        }
        clone() {
            var e = new Xr();
            return this.cloneTo(e), e;
        }
    }
    Xr.MESH = "MESH";
    class Yr {
        static __init__() {}
        static _createMesh(r, i, a) {
            var n = t.LayaGL.instance, s = new Xr(), o = new zr(s), l = new fe(4 * i.length, n.STATIC_DRAW, !0);
            l.vertexDeclaration = r, l.setData(i.buffer), s._vertexBuffer = l, s._vertexCount = l._byteLength / r.vertexStride;
            var _ = new be(e.IndexFormat.UInt16, a.length, n.STATIC_DRAW, !0);
            _.setData(a), s._indexBuffer = _, s._setBuffer(l, _), o._vertexBuffer = l, o._indexBuffer = _, 
            o._setIndexRange(0, _.indexCount);
            var h = o._subIndexBufferStart, c = o._subIndexBufferCount, d = o._boneIndicesList;
            h.length = 1, c.length = 1, d.length = 1, h[0] = 0, c[0] = _.indexCount;
            var u = [];
            u.push(o), s._setSubMeshes(u);
            var f = l._byteLength + _._byteLength;
            return s._setCPUMemory(f), s._setGPUMemory(f), s;
        }
        static createBox(e = 1, t = 1, r = 1) {
            var i = ge.getVertexDeclaration("POSITION,NORMAL,UV"), a = e / 2, n = t / 2, s = r / 2, o = new Float32Array([ -a, n, -s, 0, 1, 0, 0, 0, a, n, -s, 0, 1, 0, 1, 0, a, n, s, 0, 1, 0, 1, 1, -a, n, s, 0, 1, 0, 0, 1, -a, -n, -s, 0, -1, 0, 0, 1, a, -n, -s, 0, -1, 0, 1, 1, a, -n, s, 0, -1, 0, 1, 0, -a, -n, s, 0, -1, 0, 0, 0, -a, n, -s, -1, 0, 0, 0, 0, -a, n, s, -1, 0, 0, 1, 0, -a, -n, s, -1, 0, 0, 1, 1, -a, -n, -s, -1, 0, 0, 0, 1, a, n, -s, 1, 0, 0, 1, 0, a, n, s, 1, 0, 0, 0, 0, a, -n, s, 1, 0, 0, 0, 1, a, -n, -s, 1, 0, 0, 1, 1, -a, n, s, 0, 0, 1, 0, 0, a, n, s, 0, 0, 1, 1, 0, a, -n, s, 0, 0, 1, 1, 1, -a, -n, s, 0, 0, 1, 0, 1, -a, n, -s, 0, 0, -1, 1, 0, a, n, -s, 0, 0, -1, 0, 0, a, -n, -s, 0, 0, -1, 0, 1, -a, -n, -s, 0, 0, -1, 1, 1 ]), l = new Uint16Array([ 0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 8, 9, 10, 10, 11, 8, 12, 15, 14, 14, 13, 12, 16, 17, 18, 18, 19, 16, 20, 23, 22, 22, 21, 20 ]);
            return Yr._createMesh(i, o, l);
        }
        static createCapsule(e = .5, t = 2, r = 16, i = 32) {
            var a, n, s = (r + 1) * (i + 1) * 2 + 2 * (i + 1), o = 3 * r * (i + 1) * 2 * 2 + 2 * i * 3, l = ge.getVertexDeclaration("POSITION,NORMAL,UV"), _ = l.vertexStride / 4, h = new Float32Array(s * _), c = new Uint16Array(o), d = Math.PI / 2 / r, u = 2 * Math.PI / i, f = t / 2 - e, m = 0, E = 0, T = 0, g = 0, p = 0, S = 0;
            for (a = 0; a <= r; a++) for (n = 0; n <= i; n++) m = e * Math.cos(a * d) * Math.cos(n * u + Math.PI), 
            E = e * Math.sin(a * d), T = e * Math.cos(a * d) * Math.sin(n * u + Math.PI), h[g++] = m, 
            h[g++] = E + f, h[g++] = T, h[g++] = m, h[g++] = E, h[g++] = T, h[g++] = 1 - n / i, 
            h[g++] = (1 - a / r) * (Math.PI * e / 2 / (t + Math.PI * e)), a < r && (c[p++] = a * (i + 1) + n + (i + 1), 
            c[p++] = a * (i + 1) + n, c[p++] = a * (i + 1) + n + 1, c[p++] = a * (i + 1) + n + i, 
            c[p++] = a * (i + 1) + n, c[p++] = a * (i + 1) + n + (i + 1));
            for (S += (r + 1) * (i + 1), a = 0; a <= r; a++) for (n = 0; n <= i; n++) m = e * Math.cos(a * d) * Math.cos(n * u + Math.PI), 
            E = e * Math.sin(-a * d), T = e * Math.cos(a * d) * Math.sin(n * u + Math.PI), h[g++] = m, 
            h[g++] = E - f, h[g++] = T, h[g++] = m, h[g++] = E, h[g++] = T, h[g++] = 1 - n / i, 
            h[g++] = (a / r * (Math.PI * e / 2) + (t + Math.PI * e / 2)) / (t + Math.PI * e), 
            a < r && (c[p++] = S + a * (i + 1) + n, c[p++] = S + a * (i + 1) + n + (i + 1), 
            c[p++] = S + a * (i + 1) + n + 1, c[p++] = S + a * (i + 1) + n, c[p++] = S + a * (i + 1) + n + i, 
            c[p++] = S + a * (i + 1) + n + (i + 1));
            for (S += (r + 1) * (i + 1), n = 0; n <= i; n++) m = e * Math.cos(n * u + Math.PI), 
            E = f, T = e * Math.sin(n * u + Math.PI), h[g++] = m, h[g + 8 * (i + 1) - 1] = m, 
            h[g++] = E, h[g + 8 * (i + 1) - 1] = -E, h[g++] = T, h[g + 8 * (i + 1) - 1] = T, 
            h[g++] = m, h[g + 8 * (i + 1) - 1] = m, h[g++] = 0, h[g + 8 * (i + 1) - 1] = 0, 
            h[g++] = T, h[g + 8 * (i + 1) - 1] = T, h[g++] = 1 - 1 * n / i, h[g + 8 * (i + 1) - 1] = 1 - 1 * n / i, 
            h[g++] = Math.PI * e / 2 / (t + Math.PI * e), h[g + 8 * (i + 1) - 1] = (Math.PI * e / 2 + t) / (t + Math.PI * e);
            for (n = 0; n < i; n++) c[p++] = n + S + (i + 1), c[p++] = n + S + 1, c[p++] = n + S, 
            c[p++] = n + S + (i + 1), c[p++] = n + S + (i + 1) + 1, c[p++] = n + S + 1;
            return S += 2 * (i + 1), Yr._createMesh(l, h, c);
        }
        static createCone(e = .5, t = 1, r = 32) {
            for (var i, a = r + 1 + 1 + 2 * (r + 1), s = 6 * r + 3 * r, o = ge.getVertexDeclaration("POSITION,NORMAL,UV"), l = o.vertexStride / 4, _ = new Float32Array(a * l), h = new Uint16Array(s), c = 2 * Math.PI / r, d = t / 2, f = 0, m = 0, E = 0, T = 0, g = 0, p = new n(), S = new n(0, -1, 0), R = new n(0, d, 0), v = new n(), I = new n(), x = new u(), A = new n(), D = 0, M = 0, L = 0; L <= r; L++) f = L * c, 
            E = Math.cos(f + Math.PI) * e, T = d, g = Math.sin(f + Math.PI) * e, _[D++] = 0, 
            _[D + 8 * (r + 1) - 1] = E, _[D++] = T, _[D + 8 * (r + 1) - 1] = -T, _[D++] = 0, 
            _[D + 8 * (r + 1) - 1] = g, p.x = E, p.y = 0, p.z = g, v.x = E, v.y = -T, v.z = g, 
            n.subtract(v, R, I), n.normalize(I, I), i = Math.acos(n.dot(S, I)), n.cross(S, I, A), 
            n.normalize(A, A), u.createFromAxisAngle(A, i, x), n.normalize(p, p), n.transformQuat(p, x, p), 
            n.normalize(p, p), _[D++] = p.x, _[D + 8 * (r + 1) - 1] = p.x, _[D++] = p.y, _[D + 8 * (r + 1) - 1] = p.y, 
            _[D++] = p.z, _[D + 8 * (r + 1) - 1] = p.z, _[D++] = 1 - 1 * L / r, _[D + 8 * (r + 1) - 1] = 1 - 1 * L / r, 
            _[D++] = 0, _[D + 8 * (r + 1) - 1] = 1;
            D += 8 * (r + 1);
            for (var C = 0; C < r; C++) h[M++] = C + m + (r + 1), h[M++] = C + m + 1, h[M++] = C + m, 
            h[M++] = C + m + (r + 1), h[M++] = C + m + (r + 1) + 1, h[M++] = C + m + 1;
            m += 2 * (r + 1);
            for (var y = 0; y <= r; y++) 0 === y && (_[D++] = 0, _[D++] = -d, _[D++] = 0, _[D++] = 0, 
            _[D++] = -1, _[D++] = 0, _[D++] = .5, _[D++] = .5), f = y * c, E = Math.cos(f + Math.PI) * e, 
            T = -d, g = Math.sin(f + Math.PI) * e, _[D++] = E, _[D++] = T, _[D++] = g, _[D++] = 0, 
            _[D++] = -1, _[D++] = 0, _[D++] = .5 + .5 * Math.cos(f), _[D++] = .5 + .5 * Math.sin(f);
            for (var O = 0; O < r; O++) h[M++] = 0 + m, h[M++] = O + 2 + m, h[M++] = O + 1 + m;
            return m += r + 1 + 1, Yr._createMesh(o, _, h);
        }
        static createCylinder(e = .5, t = 2, r = 32) {
            for (var i = r + 1 + 1 + 2 * (r + 1) + (r + 1 + 1), a = 3 * r + 6 * r + 3 * r, n = ge.getVertexDeclaration("POSITION,NORMAL,UV"), s = n.vertexStride / 4, o = new Float32Array(i * s), l = new Uint16Array(a), _ = 2 * Math.PI / r, h = t / 2, c = 0, d = 0, u = 0, f = 0, m = 0, E = 0, T = 0, g = 0; g <= r; g++) 0 === g && (o[E++] = 0, 
            o[E++] = h, o[E++] = 0, o[E++] = 0, o[E++] = 1, o[E++] = 0, o[E++] = .5, o[E++] = .5), 
            c = g * _, u = Math.cos(c) * e, f = h, m = Math.sin(c) * e, o[E++] = u, o[E++] = f, 
            o[E++] = m, o[E++] = 0, o[E++] = 1, o[E++] = 0, o[E++] = .5 + .5 * Math.cos(c), 
            o[E++] = .5 + .5 * Math.sin(c);
            for (var p = 0; p < r; p++) l[T++] = 0, l[T++] = p + 1, l[T++] = p + 2;
            d += r + 1 + 1;
            for (var S = 0; S <= r; S++) c = S * _, u = Math.cos(c + Math.PI) * e, f = h, m = Math.sin(c + Math.PI) * e, 
            o[E++] = u, o[E + 8 * (r + 1) - 1] = u, o[E++] = f, o[E + 8 * (r + 1) - 1] = -f, 
            o[E++] = m, o[E + 8 * (r + 1) - 1] = m, o[E++] = u, o[E + 8 * (r + 1) - 1] = u, 
            o[E++] = 0, o[E + 8 * (r + 1) - 1] = 0, o[E++] = m, o[E + 8 * (r + 1) - 1] = m, 
            o[E++] = 1 - 1 * S / r, o[E + 8 * (r + 1) - 1] = 1 - 1 * S / r, o[E++] = 0, o[E + 8 * (r + 1) - 1] = 1;
            E += 8 * (r + 1);
            for (var R = 0; R < r; R++) l[T++] = R + d + (r + 1), l[T++] = R + d + 1, l[T++] = R + d, 
            l[T++] = R + d + (r + 1), l[T++] = R + d + (r + 1) + 1, l[T++] = R + d + 1;
            d += 2 * (r + 1);
            for (var v = 0; v <= r; v++) 0 === v && (o[E++] = 0, o[E++] = -h, o[E++] = 0, o[E++] = 0, 
            o[E++] = -1, o[E++] = 0, o[E++] = .5, o[E++] = .5), c = v * _, u = Math.cos(c + Math.PI) * e, 
            f = -h, m = Math.sin(c + Math.PI) * e, o[E++] = u, o[E++] = f, o[E++] = m, o[E++] = 0, 
            o[E++] = -1, o[E++] = 0, o[E++] = .5 + .5 * Math.cos(c), o[E++] = .5 + .5 * Math.sin(c);
            for (var I = 0; I < r; I++) l[T++] = 0 + d, l[T++] = I + 2 + d, l[T++] = I + 1 + d;
            return d += r + 1 + 1, Yr._createMesh(n, o, l);
        }
        static createPlane(e = 10, t = 10, r = 10, i = 10) {
            for (var a = (r + 1) * (i + 1), n = new Uint16Array(r * i * 2 * 3), s = ge.getVertexDeclaration("POSITION,NORMAL,UV"), o = s.vertexStride / 4, l = new Float32Array(a * o), _ = e / 2, h = t / 2, c = e / r, d = t / i, u = 0, f = 0; f <= i; f++) for (var m = 0; m <= r; m++) l[u++] = m * c - _, 
            l[u++] = 0, l[u++] = f * d - h, l[u++] = 0, l[u++] = 1, l[u++] = 0, l[u++] = 1 * m / r, 
            l[u++] = 1 * f / i;
            var E = 0;
            for (f = 0; f < i; f++) for (m = 0; m < r; m++) n[E++] = (f + 1) * (r + 1) + m, 
            n[E++] = f * (r + 1) + m, n[E++] = (f + 1) * (r + 1) + m + 1, n[E++] = f * (r + 1) + m, 
            n[E++] = f * (r + 1) + m + 1, n[E++] = (f + 1) * (r + 1) + m + 1;
            return Yr._createMesh(s, l, n);
        }
        static createQuad(e = 1, t = 1) {
            var r = ge.getVertexDeclaration("POSITION,NORMAL,UV"), i = e / 2, a = t / 2, n = new Float32Array([ -i, a, 0, 0, 0, 1, 0, 0, i, a, 0, 0, 0, 1, 1, 0, -i, -a, 0, 0, 0, 1, 0, 1, i, -a, 0, 0, 0, 1, 1, 1 ]), s = new Uint16Array([ 0, 1, 2, 3, 2, 1 ]);
            return Yr._createMesh(r, n, s);
        }
        static createSphere(e = .5, t = 32, r = 32) {
            var i = (t + 1) * (r + 1), a = 3 * t * (r + 1) * 2, n = new Uint16Array(a), s = ge.getVertexDeclaration("POSITION,NORMAL,UV"), o = s.vertexStride / 4, l = new Float32Array(i * o), _ = Math.PI / t, h = 2 * Math.PI / r, c = 0;
            i = 0, a = 0;
            for (var d = 0; d < t + 1; d++) for (var u = Math.sin(d * _), f = Math.cos(d * _), m = 0; m < r + 1; m++) {
                var E = u * Math.sin(m * h + 1 * Math.PI / 2), T = u * Math.cos(m * h + 1 * Math.PI / 2);
                l[i + 0] = E * e, l[i + 1] = f * e, l[i + 2] = T * e, l[i + 3] = E, l[i + 4] = f, 
                l[i + 5] = T, l[i + 6] = m / r, l[i + 7] = d / t, i += o, d != t - 1 && (n[a++] = c + (r + 1), 
                n[a++] = c, n[a++] = c + 1, n[a++] = c + r, n[a++] = c, n[a++] = c + (r + 1), c++);
            }
            return Yr._createMesh(s, l, n);
        }
    }
    class Zr extends t.BaseTexture {
        constructor(e, r = t.TextureFormat.R8G8B8, i = !1) {
            super(r, i), this._glTextureType = t.LayaGL.instance.TEXTURE_CUBE_MAP, this._width = e, 
            this._height = e;
            var a = t.LayaGL.instance;
            if (this._setWarpMode(a.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(a.TEXTURE_WRAP_T, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._setAnisotropy(this._anisoLevel), this._mipmap) {
                this._mipmapCount = Math.ceil(Math.log2(e));
                for (var n = 0; n < this._mipmapCount; n++) this._setPixels([], n, Math.max(e >> n, 1), Math.max(e >> n, 1));
                this._setGPUMemory(e * e * 4 * (1 + 1 / 3) * 6);
            } else this._mipmapCount = 1, this._setGPUMemory(e * e * 4 * 6);
        }
        static __init__() {
            var e = new Uint8Array(3);
            e[0] = 128, e[1] = 128, e[2] = 128, Zr.grayTexture = new Zr(1, t.TextureFormat.R8G8B8, !1), 
            Zr.grayTexture.setSixSidePixels([ e, e, e, e, e, e ]), Zr.grayTexture.lock = !0;
        }
        static _parse(e, t = null, r = null) {
            var i = r ? new Zr(0, r[0], r[1]) : new Zr(0);
            return i.setSixSideImageSources(e), i;
        }
        static load(e, r) {
            t.ILaya.loader.create(e, r, null, Zr.TEXTURECUBE);
        }
        get defaulteTexture() {
            return Zr.grayTexture;
        }
        _setPixels(e, r, i, a) {
            var n = t.LayaGL.instance, s = this._getGLFormat();
            t.WebGLContext.bindTexture(n, this._glTextureType, this._glTexture), this.format === t.TextureFormat.R8G8B8 ? (n.pixelStorei(n.UNPACK_ALIGNMENT, 1), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_Z, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[0]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_NEGATIVE_Z, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[1]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[2]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_NEGATIVE_X, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[3]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_Y, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[4]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_NEGATIVE_Y, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[5]), 
            n.pixelStorei(n.UNPACK_ALIGNMENT, 4)) : (n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_Z, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[0]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_NEGATIVE_Z, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[1]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[2]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_NEGATIVE_X, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[3]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_Y, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[4]), 
            n.texImage2D(n.TEXTURE_CUBE_MAP_NEGATIVE_Y, r, s, i, a, 0, s, n.UNSIGNED_BYTE, e[5]));
        }
        setSixSideImageSources(e, r = !1) {
            for (var i, a, n = 0; n < 6; n++) {
                var s = e[n];
                if (!s) return void console.log("TextureCube: image Source can't be null.");
                var o = s.width, l = s.height;
                if (n > 0 && i !== o) return void console.log("TextureCube: each side image's width and height must same.");
                if ((i = o) !== (a = l)) return void console.log("TextureCube: each side image's width and height must same.");
            }
            this._width = i, this._height = a;
            var _ = t.LayaGL.instance;
            t.WebGLContext.bindTexture(_, this._glTextureType, this._glTexture);
            var h = this._getGLFormat();
            if (t.Render.isConchApp) {
                if (1 == r) for (var c = 0; c < 6; c++) e[c].setPremultiplyAlpha(r);
                _.texImage2D(_.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, _.RGBA, _.RGBA, _.UNSIGNED_BYTE, e[0]), 
                _.texImage2D(_.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, _.RGBA, _.RGBA, _.UNSIGNED_BYTE, e[1]), 
                _.texImage2D(_.TEXTURE_CUBE_MAP_POSITIVE_X, 0, _.RGBA, _.RGBA, _.UNSIGNED_BYTE, e[2]), 
                _.texImage2D(_.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, _.RGBA, _.RGBA, _.UNSIGNED_BYTE, e[3]), 
                _.texImage2D(_.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, _.RGBA, _.RGBA, _.UNSIGNED_BYTE, e[4]), 
                _.texImage2D(_.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, _.RGBA, _.RGBA, _.UNSIGNED_BYTE, e[5]);
            } else r && _.pixelStorei(_.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0), _.texImage2D(_.TEXTURE_CUBE_MAP_POSITIVE_Z, 0, h, h, _.UNSIGNED_BYTE, e[0]), 
            _.texImage2D(_.TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, h, h, _.UNSIGNED_BYTE, e[1]), _.texImage2D(_.TEXTURE_CUBE_MAP_POSITIVE_X, 0, h, h, _.UNSIGNED_BYTE, e[2]), 
            _.texImage2D(_.TEXTURE_CUBE_MAP_NEGATIVE_X, 0, h, h, _.UNSIGNED_BYTE, e[3]), _.texImage2D(_.TEXTURE_CUBE_MAP_POSITIVE_Y, 0, h, h, _.UNSIGNED_BYTE, e[4]), 
            _.texImage2D(_.TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, h, h, _.UNSIGNED_BYTE, e[5]), r && _.pixelStorei(_.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1);
            this._mipmap && this._isPot(i) && this._isPot(a) ? (_.generateMipmap(this._glTextureType), 
            this._setGPUMemory(i * a * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(i * a * 4 * 6), 
            this._setWarpMode(_.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(_.TEXTURE_WRAP_T, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
        }
        setSixSidePixels(e, r = 0) {
            if (!e) throw new Error("TextureCube:pixels can't be null.");
            var i = Math.max(this._width >> r, 1), a = Math.max(this._height >> r, 1), n = i * a * this._getFormatByteCount();
            if (e[0].length < n) throw "TextureCube:pixels length should at least " + n + ".";
            if (this._setPixels(e, r, i, a), 0 === r) {
                var s = t.LayaGL.instance;
                this._setWarpMode(s.TEXTURE_WRAP_S, this._wrapModeU), this._setWarpMode(s.TEXTURE_WRAP_T, this._wrapModeV);
            }
            this._readyed = !0, this._activeResource();
        }
        _recoverResource() {}
    }
    Zr.TEXTURECUBE = "TEXTURECUBE";
    var jr = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D u_MainTex;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\r\n\tgl_FragColor = texture2D(u_MainTex, v_Texcoord0);\r\n}\r\n\r\n", qr = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_PositionTexcoord;\r\nuniform vec4 u_OffsetScale;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\t\r\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapGLPositionZ(gl_Position);\r\n}', Qr = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#ifdef COLOR\r\n\tvarying vec4 v_Color;\r\n#endif\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef MAINTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n#endif\r\n\r\nuniform vec4 u_AlbedoColor;\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\t#ifdef ADDTIVEFOG\r\n\t#else\r\n\t\tuniform vec3 u_FogColor;\r\n\t#endif\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 color =  2.0 * u_AlbedoColor;\r\n\t#ifdef COLOR\r\n\t\tcolor *= v_Color;\r\n\t#endif\r\n\t#ifdef MAINTEXTURE\r\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\r\n\t#endif\r\n\t\r\n\tgl_FragColor = color;\r\n\t\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\r\n\t\t#ifdef ADDTIVEFOG\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\r\n\t\t#endif\r\n\t#endif\r\n}\r\n\r\n", Kr = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec4 a_Color;\r\nattribute vec2 a_Texcoord0;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\n#ifdef COLOR\r\n\tvarying vec4 v_Color;\r\n#endif\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t#else\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n\t\t\r\n\t#ifdef COLOR\r\n\t\tv_Color = a_Color;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}', Jr = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Lighting.glsl";\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\r\n\tuniform vec3 u_CameraPos;\r\n\tvarying vec3 v_Normal;\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tuniform DirectionLight u_DirectionLight;\r\n\t\t#endif\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tuniform PointLight u_PointLight;\r\n\t\t#endif\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tuniform SpotLight u_SpotLight;\r\n\t\t#endif\r\n\t#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n\t#endif\r\n#endif\r\n\r\n#include "ShadowHelper.glsl"\r\n#ifdef RECEIVESHADOW\r\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\r\n\tuniform mat4 u_lightShadowVP[4];\r\n\t#endif\r\n\t#ifdef SHADOWMAP_PSSM1 \r\n\tvarying vec4 v_lightMVPPos;\r\n\t#endif\r\n#endif\r\nvarying float v_posViewZ;\r\n\r\nuniform vec3 u_AmbientColor;\r\n\r\nuniform sampler2D u_SplatAlphaTexture;\r\n\r\nuniform sampler2D u_DiffuseTexture1;\r\nuniform sampler2D u_DiffuseTexture2;\r\nuniform sampler2D u_DiffuseTexture3;\r\nuniform sampler2D u_DiffuseTexture4;\r\nuniform sampler2D u_DiffuseTexture5;\r\n\r\nuniform vec4 u_DiffuseScaleOffset1;\r\nuniform vec4 u_DiffuseScaleOffset2;\r\nuniform vec4 u_DiffuseScaleOffset3;\r\nuniform vec4 u_DiffuseScaleOffset4;\r\nuniform vec4 u_DiffuseScaleOffset5;\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef LIGHTMAP\r\n\tuniform sampler2D u_LightMap;\r\n\tvarying vec2 v_LightMapUV;\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 splatAlpha = vec4(1.0);\r\n\t#ifdef ExtendTerrain_DETAIL_NUM1\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r;\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM2\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r + color2.xyz * (1.0 - splatAlpha.r);\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM3\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * (1.0 - splatAlpha.r - splatAlpha.g);\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM4\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\r\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b);\r\n\t#endif\r\n\t#ifdef ExtendTerrain_DETAIL_NUM5\r\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\r\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\r\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\r\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\r\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\r\n\t\tvec4 color5 = texture2D(u_DiffuseTexture5, v_Texcoord0 * u_DiffuseScaleOffset5.xy);\r\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * splatAlpha.a + color5.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b - splatAlpha.a);\r\n\t#endif\r\n\t\tgl_FragColor.w = splatAlpha.a;\r\n\t\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tvec3 normal = v_Normal;\r\n\t\tvec3 dif, spe;\r\n\t#endif\r\n\r\n\tvec3 diffuse = vec3(0.0);\r\n\tvec3 specular= vec3(0.0);\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\r\n\t\tvec3 toEye;\r\n\t\t#ifdef FOG\r\n\t\t\ttoEye=u_CameraPos-v_PositionWorld;\r\n\t\t\tfloat toEyeLength=length(toEye);\r\n\t\t\ttoEye/=toEyeLength;\r\n\t\t#else\r\n\t\t\ttoEye=normalize(u_CameraPos-v_PositionWorld);\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tLayaAirBlinnPhongDiectionLight(vec3(0.0),1.0,normal,vec3(1.0),toEye,u_DirectionLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye,u_PointLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye,u_SpotLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\tLayaAirBlinnPhongDiectionLight(vec3(0.0),1.0,normal,vec3(1.0),toEye,directionLight,dif,spe);\r\n\t\t\t\tdiffuse+=dif;\r\n\t\t\t\tspecular+=spe;\r\n\t\t\t}\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye,pointLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,vec3(0.0),1.0,normal,vec3(1.0),toEye\t,spotLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\nvec3 globalDiffuse = u_AmbientColor;\r\n#ifdef LIGHTMAP\r\n\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\r\n#endif\r\n\r\n#ifdef RECEIVESHADOW\r\n\tfloat shadowValue = 1.0;\r\n\t#ifdef SHADOWMAP_PSSM3\r\n\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t#endif\r\n\t#ifdef SHADOWMAP_PSSM2\r\n\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t#endif \r\n\t#ifdef SHADOWMAP_PSSM1\r\n\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\r\n\t#endif\r\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse) * shadowValue, gl_FragColor.a);\r\n#else\r\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse), gl_FragColor.a);\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t#ifdef RECEIVESHADOW\r\n\t\tgl_FragColor.rgb += specular * shadowValue;\r\n\t#else\r\n\t\tgl_FragColor.rgb += specular;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef FOG\r\n\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\r\n\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\r\n#endif\r\n}\r\n\r\n\r\n\r\n\r\n\r\n', $r = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec2 a_Texcoord0;\r\n\r\nuniform mat4 u_MvpMatrix;\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(LIGHTMAP)\r\n\tattribute vec3 a_Normal;\r\n\tvarying vec3 v_Normal;\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\r\n\tuniform mat4 u_WorldMat;\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvarying vec2 v_LightMapUV;\r\n\tuniform vec4 u_LightmapScaleOffset;\r\n#endif\r\n\r\n#ifdef RECEIVESHADOW\r\n\tvarying float v_posViewZ;\r\n\t#ifdef SHADOWMAP_PSSM1 \r\n\t\tvarying vec4 v_lightMVPPos;\r\n\t\tuniform mat4 u_lightShadowVP[4];\r\n\t#endif\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tgl_Position = u_MvpMatrix * a_Position;\r\n  \r\n\tv_Texcoord0 = a_Texcoord0;\r\n  \r\n\t#ifdef LIGHTMAP\r\n\t\tv_LightMapUV = vec2(a_Texcoord0.x, 1.0 - a_Texcoord0.y) * u_LightmapScaleOffset.xy + u_LightmapScaleOffset.zw;\r\n\t\tv_LightMapUV.y = 1.0 - v_LightMapUV.y;\r\n\t#endif\r\n  \r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tv_Normal = a_Normal;\r\n\t#endif\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\r\n\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\r\n\t#endif\r\n\r\n\t#ifdef RECEIVESHADOW\r\n\t\tv_posViewZ = gl_Position.w;\r\n\t\t#ifdef SHADOWMAP_PSSM1\r\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\r\n\t\t#endif\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}', ei = "struct DirectionLight {\r\n\tvec3 color;\r\n\tvec3 direction;\r\n};\r\n\r\nstruct PointLight {\r\n\tvec3 color;\r\n\tvec3 position;\r\n\tfloat range;\r\n};\r\n\r\nstruct SpotLight {\r\n\tvec3 color;\r\n\tvec3 position;\r\n\tfloat range;\r\n\tvec3 direction;\r\n\tfloat spot;\r\n};\r\n\r\n\r\n\r\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT*CLUSTER_Y_COUNT;\r\nconst int c_ClusterBufferHeight = CLUSTER_Z_COUNT*(1+int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER)/4.0)));\r\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth*4;\r\n\r\nivec4 getClusterInfo(sampler2D clusterBuffer,mat4 viewMatrix,vec4 viewport,vec3 position,vec4 fragCoord,vec4 projectParams)\r\n{\r\n\tvec3 viewPos = vec3(viewMatrix*vec4(position, 1.0)); //position in viewspace\r\n\r\n\tint clusterXIndex = int(floor(fragCoord.x/ (float(viewport.z)/float(CLUSTER_X_COUNT))));\r\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z <0.0? 0.0 : 1.0) - fragCoord.y * projectParams.z)/ (float(viewport.w)/float(CLUSTER_Y_COUNT))));//Maybe Flipped ProjectMatrix\r\n\tfloat zSliceParam =float(CLUSTER_Z_COUNT)/log2(projectParams.y / projectParams.x);\r\n \tint clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam- log2(projectParams.x) * zSliceParam));//projectParams x:cameraNear y:cameraFar\r\n\r\n\tvec2 uv= vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT)+0.5)/float(c_ClusterBufferWidth),\r\n\t\t\t\t(float(clusterZIndex)+0.5)/float(c_ClusterBufferHeight));\r\n\tvec4 clusterPixel=texture2D(clusterBuffer, uv);\r\n\treturn ivec4(clusterPixel);//X:Point Count Y:Spot Count Z、W:Light Offset\r\n}\r\n\r\n\r\nint getLightIndex(sampler2D clusterBuffer,int offset,int index) \r\n{\r\n\tint totalOffset=offset+index;\r\n\tint row=totalOffset/c_ClusterBufferFloatWidth;\r\n\tint lastRowFloat=totalOffset-row*c_ClusterBufferFloatWidth;\r\n\tint col=lastRowFloat/4;\r\n\tvec2 uv=vec2((float(col)+0.5)/float(c_ClusterBufferWidth),\r\n\t\t\t\t(float(row)+0.5)/float(c_ClusterBufferHeight));\r\n\tvec4 texel = texture2D(clusterBuffer, uv);\r\n    int pixelComponent = lastRowFloat-col*4;\r\n    if (pixelComponent == 0) \r\n      return int(texel.x);\r\n    else if (pixelComponent == 1) \r\n      return int(texel.y);\r\n    else if (pixelComponent == 2) \r\n      return int(texel.z);\r\n    else if (pixelComponent == 3) \r\n      return int(texel.w);\r\n}\r\n\r\nDirectionLight getDirectionLight(sampler2D lightBuffer,int index) \r\n{\r\n    DirectionLight light;\r\n    float v = (float(index)+0.5)/ float(MAX_LIGHT_COUNT);\r\n    vec4 p1 = texture2D(lightBuffer, vec2(0.125,v));\r\n    vec4 p2 = texture2D(lightBuffer, vec2(0.375,v));\r\n\tlight.color=p1.rgb;\r\n    light.direction = p2.rgb;\r\n    return light;\r\n}\r\n\r\nPointLight getPointLight(sampler2D lightBuffer,sampler2D clusterBuffer,ivec4 clusterInfo,int index) \r\n{\r\n    PointLight light;\r\n\tint pointIndex=getLightIndex(clusterBuffer,clusterInfo.z*c_ClusterBufferFloatWidth+clusterInfo.w,index);\r\n    float v = (float(pointIndex)+0.5)/ float(MAX_LIGHT_COUNT);\r\n    vec4 p1 = texture2D(lightBuffer, vec2(0.125,v));\r\n    vec4 p2 = texture2D(lightBuffer, vec2(0.375,v));\r\n\tlight.color=p1.rgb;\r\n\tlight.range = p1.a;\r\n    light.position = p2.rgb;\r\n    return light;\r\n}\r\n\r\nSpotLight getSpotLight(sampler2D lightBuffer,sampler2D clusterBuffer,ivec4 clusterInfo,int index) \r\n{\r\n    SpotLight light;\r\n\tint spoIndex=getLightIndex(clusterBuffer,clusterInfo.z*c_ClusterBufferFloatWidth+clusterInfo.w,clusterInfo.x+index);\r\n    float v = (float(spoIndex)+0.5)/ float(MAX_LIGHT_COUNT);\r\n    vec4 p1 = texture2D(lightBuffer, vec2(0.125,v));\r\n    vec4 p2 = texture2D(lightBuffer, vec2(0.375,v));\r\n\tvec4 p3 = texture2D(lightBuffer, vec2(0.625,v));\r\n    light.color = p1.rgb;\r\n\tlight.range=p1.a;\r\n    light.position = p2.rgb;\r\n\tlight.spot = p2.a;\r\n\tlight.direction = p3.rgb;\r\n    return light;\r\n}\r\n\r\n\r\n\r\n// Laya中使用衰减纹理\r\nfloat LayaAttenuation(in vec3 L,in float invLightRadius) {\r\n\tfloat fRatio = clamp(length(L) * invLightRadius,0.0,1.0);\r\n\tfRatio *= fRatio;\r\n\treturn 1.0 / (1.0 + 25.0 * fRatio)* clamp(4.0*(1.0 - fRatio),0.0,1.0); //fade to black as if 4 pixel texture\r\n}\r\n\r\n// Same as Just Cause 2 and Crysis 2 (you can read GPU Pro 1 book for more information)\r\nfloat BasicAttenuation(in vec3 L,in float invLightRadius) {\r\n\tvec3 distance = L * invLightRadius;\r\n\tfloat attenuation = clamp(1.0 - dot(distance, distance),0.0,1.0); // Equals float attenuation = saturate(1.0f - dot(L, L) / (lightRadius *  lightRadius));\r\n\treturn attenuation * attenuation;\r\n}\r\n\r\n// Inspired on http://fools.slindev.com/viewtopic.php?f=11&t=21&view=unread#unread\r\nfloat NaturalAttenuation(in vec3 L,in float invLightRadius) {\r\n\tfloat attenuationFactor = 30.0;\r\n\tvec3 distance = L * invLightRadius;\r\n\tfloat attenuation = dot(distance, distance); // Equals float attenuation = dot(L, L) / (lightRadius *  lightRadius);\r\n\tattenuation = 1.0 / (attenuation * attenuationFactor + 1.0);\r\n\t// Second we move down the function therewith it reaches zero at abscissa 1:\r\n\tattenuationFactor = 1.0 / (attenuationFactor + 1.0); //attenuationFactor contains now the value we have to subtract\r\n\tattenuation = max(attenuation - attenuationFactor, 0.0); // The max fixes a bug.\r\n\t// Finally we expand the equation along the y-axis so that it starts with a function value of 1 again.\r\n\tattenuation /= 1.0 - attenuationFactor;\r\n\treturn attenuation;\r\n}\r\n\r\nvoid LayaAirBlinnPhongLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir,in vec3 lightColor, in vec3 lightVec,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tmediump vec3 h = normalize(viewDir-lightVec);\r\n\tlowp float ln = max (0.0, dot (-lightVec,normal));\r\n\tfloat nh = max (0.0, dot (h,normal));\r\n\tdiffuseColor=lightColor * ln;\r\n\tspecularColor=lightColor *specColor*pow (nh, specColorIntensity*128.0) * gloss;\r\n}\r\n\r\nvoid LayaAirBlinnPhongDiectionLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in DirectionLight light,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tvec3 lightVec=normalize(light.direction);\r\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.color,lightVec,diffuseColor,specularColor);\r\n}\r\n\r\nvoid LayaAirBlinnPhongPointLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in PointLight light,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tvec3 lightVec =  pos-light.position;\r\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.color,lightVec/length(lightVec),diffuseColor,specularColor);\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range);\r\n\tdiffuseColor *= attenuate;\r\n\tspecularColor*= attenuate;\r\n}\r\n\r\nvoid LayaAirBlinnPhongSpotLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in SpotLight light,out vec3 diffuseColor,out vec3 specularColor) {\r\n\tvec3 lightVec =  pos-light.position;\r\n\tvec3 normalLightVec=lightVec/length(lightVec);\r\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.color,normalLightVec,diffuseColor,specularColor);\r\n\tvec2 cosAngles=cos(vec2(light.spot,light.spot*0.5)*0.5);//ConeAttenuation\r\n\tfloat dl=dot(normalize(light.direction),normalLightVec);\r\n\tdl*=smoothstep(cosAngles[0],cosAngles[1],dl);\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range)*dl;\r\n\tdiffuseColor *=attenuate;\r\n\tspecularColor *=attenuate;\r\n}\r\n\r\nvec3 NormalSampleToWorldSpace(vec3 normalMapSample, vec3 unitNormal, vec3 tangent,vec3 binormal) {\r\n\tvec3 normalT =vec3(2.0*normalMapSample.x - 1.0,1.0-2.0*normalMapSample.y,2.0*normalMapSample.z - 1.0);\r\n\r\n\t// Build orthonormal basis.\r\n\tvec3 N = normalize(unitNormal);\r\n\tvec3 T = normalize(tangent);\r\n\tvec3 B = normalize(binormal);\r\n\tmat3 TBN = mat3(T, B, N);\r\n\r\n\t// Transform from tangent space to world space.\r\n\tvec3 bumpedNormal = TBN*normalT;\r\n\r\n\treturn bumpedNormal;\r\n}\r\n\r\nvec3 NormalSampleToWorldSpace1(vec4 normalMapSample, vec3 tangent, vec3 binormal, vec3 unitNormal) {\r\n\tvec3 normalT;\r\n\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\r\n\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\r\n\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\r\n\r\n\tvec3 T = normalize(tangent);\r\n\tvec3 B = normalize(binormal);\r\n\tvec3 N = normalize(unitNormal);\r\n\tmat3 TBN = mat3(T, B, N);\r\n\r\n\t// Transform from tangent space to world space.\r\n\tvec3 bumpedNormal = TBN * normalize(normalT);\r\n\r\n\treturn bumpedNormal;\r\n}\r\n\r\nvec3 DecodeLightmap(vec4 color) {\r\n\treturn color.rgb*color.a*5.0;\r\n}\r\n\r\nvec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\r\n\tvec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\r\n\ttransTexcoord.y+=1.0;\r\n\treturn transTexcoord;\r\n}\r\n\r\nvec4 remapGLPositionZ(vec4 position) {\r\n\tposition.z=position.z * 2.0 - position.w;\r\n\treturn position;\r\n}\r\n\r\nmat3 inverse(mat3 m) {\r\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\r\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\r\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\r\n\r\n  float b01 = a22 * a11 - a12 * a21;\r\n  float b11 = -a22 * a10 + a12 * a20;\r\n  float b21 = a21 * a10 - a11 * a20;\r\n\r\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\r\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\r\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\r\n}\r\n\r\n", ti = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nuniform vec4 u_Color;\r\n\r\nvoid main()\r\n{\r\n  gl_FragColor = v_Color * u_Color; \r\n}\r\n\r\n", ri = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nuniform mat4 u_MvpMatrix;\r\nuniform vec4 u_Color;\r\nattribute vec4 a_Color;\r\nvarying vec4 v_Color;\r\n\r\n\r\nvoid main()\r\n{\r\n\tgl_Position = u_MvpMatrix * a_Position;\r\n\tv_Color=a_Color*u_Color;\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}', ii = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n\tprecision highp int;\r\n#else\r\n\tprecision mediump float;\r\n\tprecision mediump int;\r\n#endif\r\n\r\n#include "Lighting.glsl";\r\n\r\nuniform vec4 u_DiffuseColor;\r\n\r\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\tvarying vec4 v_Color;\r\n#endif\r\n\r\n#ifdef ALPHATEST\r\n\tuniform float u_AlphaTestValue;\r\n#endif\r\n\r\n#ifdef DIFFUSEMAP\r\n\tuniform sampler2D u_DiffuseTexture;\r\n#endif\r\n\r\n\r\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tvarying vec2 v_LightMapUV;\r\n\tuniform sampler2D u_LightMap;\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\tvarying vec3 v_Normal;\r\n\tvarying vec3 v_ViewDir; \r\n\r\n\tuniform vec3 u_MaterialSpecular;\r\n\tuniform float u_Shininess;\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tuniform DirectionLight u_DirectionLight;\r\n\t\t#endif\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tuniform PointLight u_PointLight;\r\n\t\t#endif\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tuniform SpotLight u_SpotLight;\r\n\t\t#endif\r\n\t#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n\t#endif\r\n\r\n\t#ifdef SPECULARMAP \r\n\t\tuniform sampler2D u_SpecularTexture;\r\n\t#endif\r\n\t#ifdef NORMALMAP \r\n\t\tuniform sampler2D u_NormalTexture;\r\n\t\tvarying vec3 v_Tangent;\r\n\t\tvarying vec3 v_Binormal;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\n\r\nuniform vec3 u_AmbientColor;\r\n\r\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\n#include "ShadowHelper.glsl"\r\nvarying float v_posViewZ;\r\n#ifdef RECEIVESHADOW\r\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\r\n\t\tuniform mat4 u_lightShadowVP[4];\r\n\t#endif\r\n\t#ifdef SHADOWMAP_PSSM1 \r\n\t\tvarying vec4 v_lightMVPPos;\r\n\t#endif\r\n#endif\r\n\r\nvoid main_castShadow()\r\n{\r\n\t//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);\r\n\tgl_FragColor=packDepth(v_posViewZ);\r\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t\tfloat alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;\r\n\t\tif( alpha < u_AlphaTestValue )\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t#endif\r\n}\r\nvoid main_normal()\r\n{\r\n\tvec3 globalDiffuse=u_AmbientColor;\r\n\t#ifdef LIGHTMAP\t\r\n\t\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tvec3 normal;\r\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\r\n\t\t\tvec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;\r\n\t\t\tnormal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));\r\n\t\t#else\r\n\t\t\tnormal = normalize(v_Normal);\r\n\t\t#endif\r\n\t\tvec3 viewDir= normalize(v_ViewDir);\r\n\t#endif\r\n\t\r\n\tvec4 mainColor=u_DiffuseColor;\r\n\t#ifdef DIFFUSEMAP\r\n\t\tvec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);\r\n\t\tmainColor=mainColor*difTexColor;\r\n\t#endif \r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tmainColor=mainColor*v_Color;\r\n\t#endif \r\n    \r\n\t#ifdef ALPHATEST\r\n\t\tif(mainColor.a<u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n  \r\n\t\r\n\tvec3 diffuse = vec3(0.0);\r\n\tvec3 specular= vec3(0.0);\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tvec3 dif,spe;\r\n\t\t#ifdef SPECULARMAP\r\n\t\t\tvec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;\r\n\t\t#else\r\n\t\t\t#ifdef DIFFUSEMAP\r\n\t\t\t\tvec3 gloss=vec3(difTexColor.a);\r\n\t\t\t#else\r\n\t\t\t\tvec3 gloss=vec3(1.0);\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);\r\n\t\t\tdiffuse+=dif;\r\n\t\t\tspecular+=spe;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,directionLight,dif,spe);\r\n\t\t\t\tdiffuse+=dif;\r\n\t\t\t\tspecular+=spe;\r\n\t\t\t}\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,pointLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,spotLight,dif,spe);\r\n\t\t\t\t\tdiffuse+=dif;\r\n\t\t\t\t\tspecular+=spe;\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef RECEIVESHADOW\r\n\t\tfloat shadowValue = 1.0;\r\n\t\t#ifdef SHADOWMAP_PSSM3\r\n\t\t\tshadowValue = getShadowPSSM3(u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t\t#endif\r\n\t\t#ifdef SHADOWMAP_PSSM2\r\n\t\t\tshadowValue = getShadowPSSM2(u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t\t#endif \r\n\t\t#ifdef SHADOWMAP_PSSM1\r\n\t\t\tshadowValue = getShadowPSSM1(u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\r\n\t\t#endif\r\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse*shadowValue),mainColor.a);\r\n\t#else\r\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);\r\n\t#endif\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t#ifdef RECEIVESHADOW\r\n\t\t\tgl_FragColor.rgb+=specular*shadowValue;\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb+=specular;\r\n\t\t#endif\r\n\t#endif\r\n\t  \r\n\t#ifdef FOG\r\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\r\n\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\r\n\t#endif\r\n}\r\n\r\nvoid main()\r\n{\r\n\t#ifdef CASTSHADOW\t\t\r\n\t\tmain_castShadow();\r\n\t#else\r\n\t\tmain_normal();\r\n\t#endif  \r\n}\r\n\r\n', ai = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\n\r\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\r\n\tattribute vec2 a_Texcoord0;\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\n#if defined(LIGHTMAP)&&defined(UV1)\r\n\tattribute vec2 a_Texcoord1;\r\n#endif\r\n\r\n#ifdef LIGHTMAP\r\n\tuniform vec4 u_LightmapScaleOffset;\r\n\tvarying vec2 v_LightMapUV;\r\n#endif\r\n\r\n#ifdef COLOR\r\n\tattribute vec4 a_Color;\r\n\tvarying vec4 v_Color;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\tattribute vec3 a_Normal;\r\n\tvarying vec3 v_Normal; \r\n\tuniform vec3 u_CameraPos;\r\n\tvarying vec3 v_ViewDir; \r\n#endif\r\n\r\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\r\n\tattribute vec4 a_Tangent0;\r\n\tvarying vec3 v_Tangent;\r\n\tvarying vec3 v_Binormal;\r\n#endif\r\n\r\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\r\n\t#ifdef GPU_INSTANCE\r\n\t\tattribute mat4 a_WorldMat;\r\n\t#else\r\n\t\tuniform mat4 u_WorldMat;\r\n\t#endif\r\n\tvarying vec3 v_PositionWorld;\r\n#endif\r\n\r\nvarying float v_posViewZ;\r\n#ifdef RECEIVESHADOW\r\n  #ifdef SHADOWMAP_PSSM1 \r\n  varying vec4 v_lightMVPPos;\r\n  uniform mat4 u_lightShadowVP[4];\r\n  #endif\r\n#endif\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\nvoid main_castShadow()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\t//TODO没考虑UV动画呢\r\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n\tv_posViewZ = gl_Position.z;\r\n}\r\n\r\nvoid main_normal()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\r\n\t\tmat4 worldMat;\r\n\t\t#ifdef GPU_INSTANCE\r\n\t\t\tworldMat = a_WorldMat;\r\n\t\t#else\r\n\t\t\tworldMat = u_WorldMat;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tmat3 worldInvMat;\r\n\t\t#ifdef BONE\r\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\r\n\t\t#else\r\n\t\t\tworldInvMat=inverse(mat3(worldMat));\r\n\t\t#endif  \r\n\t\tv_Normal=a_Normal*worldInvMat;\r\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\r\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\r\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\r\n\t\tv_PositionWorld=(worldMat*position).xyz;\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\r\n\t#endif\r\n\r\n\t#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\r\n\t\t#ifdef TILINGOFFSET\r\n\t\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t\t#else\r\n\t\t\tv_Texcoord0=a_Texcoord0;\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t#ifdef LIGHTMAP\r\n\t\t#ifdef SCALEOFFSETLIGHTINGMAPUV\r\n\t\t\t#ifdef UV1\r\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\r\n\t\t\t#else\r\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\r\n\t\t\t#endif \r\n\t\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\r\n\t\t#else\r\n\t\t\t#ifdef UV1\r\n\t\t\t\tv_LightMapUV=a_Texcoord1;\r\n\t\t\t#else\r\n\t\t\t\tv_LightMapUV=a_Texcoord0;\r\n\t\t\t#endif \r\n\t\t#endif \r\n\t#endif\r\n\r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tv_Color=a_Color;\r\n\t#endif\r\n\r\n\t#ifdef RECEIVESHADOW\r\n\t\tv_posViewZ = gl_Position.w;\r\n\t\t#ifdef SHADOWMAP_PSSM1 \r\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\r\n\t\t#endif\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n\r\nvoid main()\r\n{\r\n\t#ifdef CASTSHADOW\r\n\t\tmain_castShadow();\r\n\t#else\r\n\t\tmain_normal();\r\n\t#endif\r\n}', ni = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  precision highp float;\r\n#else\r\n  precision mediump float;\r\n#endif\r\n\r\nvarying vec4 v_Color;\r\nvarying vec2 v_TextureCoordinate;\r\nuniform sampler2D u_texture;\r\nuniform vec4 u_Tintcolor;\r\n\r\n#ifdef RENDERMODE_MESH\r\n\tvarying vec4 v_MeshColor;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\t#ifdef ADDTIVEFOG\r\n\t#else\r\n\t\tuniform vec3 u_FogColor;\r\n\t#endif\r\n#endif\r\n\r\n\r\nvoid main()\r\n{\t\r\n\t#ifdef RENDERMODE_MESH\r\n\t\tgl_FragColor=v_MeshColor;\r\n\t#else\r\n\t\tgl_FragColor=vec4(1.0);\t\r\n\t#endif\r\n\t\t\r\n\t#ifdef DIFFUSEMAP\r\n\t\t#ifdef TINTCOLOR\r\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*u_Tintcolor*2.0*v_Color;\r\n\t\t#else\r\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*v_Color;\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef TINTCOLOR\r\n\t\t\tgl_FragColor*=u_Tintcolor*2.0*v_Color;\r\n\t\t#else\r\n\t\t\tgl_FragColor*=v_Color;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\r\n\t\t#ifdef ADDTIVEFOG\r\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,vec3(0.0,0.0,0.0),lerpFact);\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\r\n\t\t#endif\r\n\t#endif\r\n}", si = '#include "Lighting.glsl";\r\n\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n  precision highp float;\r\n#else\r\n  precision mediump float;\r\n#endif\r\n\r\n#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\r\n\tattribute vec4 a_CornerTextureCoordinate;\r\n#endif\r\n#ifdef RENDERMODE_MESH\r\n\tattribute vec3 a_MeshPosition;\r\n\tattribute vec4 a_MeshColor;\r\n\tattribute vec2 a_MeshTextureCoordinate;\r\n\tvarying vec4 v_MeshColor;\r\n#endif\r\n\r\nattribute vec4 a_ShapePositionStartLifeTime;\r\nattribute vec4 a_DirectionTime;\r\nattribute vec4 a_StartColor;\r\nattribute vec3 a_StartSize;\r\nattribute vec3 a_StartRotation0;\r\nattribute float a_StartSpeed;\r\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\n  attribute vec4 a_Random0;\r\n#endif\r\n#if defined(TEXTURESHEETANIMATIONRANDOMCURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n  attribute vec4 a_Random1;\r\n#endif\r\nattribute vec3 a_SimulationWorldPostion;\r\nattribute vec4 a_SimulationWorldRotation;\r\n\r\nvarying vec4 v_Color;\r\n#ifdef DIFFUSEMAP\r\n\tvarying vec2 v_TextureCoordinate;\r\n#endif\r\n\r\nuniform float u_CurrentTime;\r\nuniform vec3 u_Gravity;\r\n\r\nuniform vec3 u_WorldPosition;\r\nuniform vec4 u_WorldRotation;\r\nuniform bool u_ThreeDStartRotation;\r\nuniform int u_ScalingMode;\r\nuniform vec3 u_PositionScale;\r\nuniform vec3 u_SizeScale;\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\n\r\n#ifdef STRETCHEDBILLBOARD\r\n\tuniform vec3 u_CameraPos;\r\n#endif\r\nuniform vec3 u_CameraDirection;//TODO:只有几种广告牌模式需要用\r\nuniform vec3 u_CameraUp;\r\n\r\nuniform  float u_StretchedBillboardLengthScale;\r\nuniform  float u_StretchedBillboardSpeedScale;\r\nuniform int u_SimulationSpace;\r\n\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n  uniform  int  u_VOLSpaceType;\r\n#endif\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\r\n  uniform  vec3 u_VOLVelocityConst;\r\n#endif\r\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n  uniform  vec2 u_VOLVelocityGradientX[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientY[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientZ[4];//x为key,y为速度\r\n#endif\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n  uniform  vec3 u_VOLVelocityConstMax;\r\n#endif\r\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n  uniform  vec2 u_VOLVelocityGradientMaxX[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientMaxY[4];//x为key,y为速度\r\n  uniform  vec2 u_VOLVelocityGradientMaxZ[4];//x为key,y为速度\r\n#endif\r\n\r\n#ifdef COLOROVERLIFETIME\r\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\r\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\r\n#endif\r\n#ifdef RANDOMCOLOROVERLIFETIME\r\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\r\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\r\n  uniform  vec4 u_MaxColorOverLifeGradientColors[4];//x为key,yzw为Color\r\n  uniform  vec2 u_MaxColorOverLifeGradientAlphas[4];//x为key,y为Alpha\r\n#endif\r\n\r\n\r\n#if defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMERANDOMCURVES)\r\n  uniform  vec2 u_SOLSizeGradient[4];//x为key,y为尺寸\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n  uniform  vec2 u_SOLSizeGradientMax[4];//x为key,y为尺寸\r\n#endif\r\n#if defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\r\n  uniform  vec2 u_SOLSizeGradientX[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientY[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientZ[4];//x为key,y为尺寸\r\n#endif\r\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n  uniform  vec2 u_SOLSizeGradientMaxX[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientMaxY[4];//x为key,y为尺寸\r\n  uniform  vec2 u_SOLSizeGradientMaxZ[4];//x为key,y为尺寸\r\n#endif\r\n\r\n\r\n#ifdef ROTATIONOVERLIFETIME\r\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\r\n    uniform  float u_ROLAngularVelocityConst;\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    uniform  float u_ROLAngularVelocityConstMax;\r\n  #endif\r\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\n    uniform  vec2 u_ROLAngularVelocityGradient[4];//x为key,y为旋转\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    uniform  vec2 u_ROLAngularVelocityGradientMax[4];//x为key,y为旋转\r\n  #endif\r\n#endif\r\n#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\r\n    uniform  vec3 u_ROLAngularVelocityConstSeprarate;\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n    uniform  vec3 u_ROLAngularVelocityConstMaxSeprarate;\r\n  #endif\r\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\n    uniform  vec2 u_ROLAngularVelocityGradientX[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientY[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientZ[4];\r\n  #endif\r\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n    uniform  vec2 u_ROLAngularVelocityGradientMaxX[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientMaxY[4];\r\n    uniform  vec2 u_ROLAngularVelocityGradientMaxZ[4];\r\n\tuniform  vec2 u_ROLAngularVelocityGradientMaxW[4];\r\n  #endif\r\n#endif\r\n\r\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\r\n  uniform  float u_TSACycles;\r\n  uniform  vec2 u_TSASubUVLength;\r\n  uniform  vec2 u_TSAGradientUVs[4];//x为key,y为frame\r\n#endif\r\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n  uniform  vec2 u_TSAMaxGradientUVs[4];//x为key,y为frame\r\n#endif\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\nvec3 rotationByEuler(in vec3 vector,in vec3 rot)\r\n{\r\n\tfloat halfRoll = rot.z * 0.5;\r\n    float halfPitch = rot.x * 0.5;\r\n\tfloat halfYaw = rot.y * 0.5;\r\n\r\n\tfloat sinRoll = sin(halfRoll);\r\n\tfloat cosRoll = cos(halfRoll);\r\n\tfloat sinPitch = sin(halfPitch);\r\n\tfloat cosPitch = cos(halfPitch);\r\n\tfloat sinYaw = sin(halfYaw);\r\n\tfloat cosYaw = cos(halfYaw);\r\n\r\n\tfloat quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n\tfloat quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n\tfloat quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n\tfloat quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\r\n\t\r\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\t\r\n\tfloat x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n\tfloat xx = quaX * x;\r\n    float xy = quaX * y;\r\n\tfloat xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n\t\r\n}\r\n\r\n//假定axis已经归一化\r\nvec3 rotationByAxis(in vec3 vector,in vec3 axis, in float angle)\r\n{\r\n\tfloat halfAngle = angle * 0.5;\r\n\tfloat sin = sin(halfAngle);\r\n\t\r\n\tfloat quaX = axis.x * sin;\r\n\tfloat quaY = axis.y * sin;\r\n\tfloat quaZ = axis.z * sin;\r\n\tfloat quaW = cos(halfAngle);\r\n\t\r\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\r\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\r\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\r\n\t\r\n\tfloat x = quaX + quaX;\r\n    float y = quaY + quaY;\r\n    float z = quaZ + quaZ;\r\n    float wx = quaW * x;\r\n    float wy = quaW * y;\r\n    float wz = quaW * z;\r\n\tfloat xx = quaX * x;\r\n    float xy = quaX * y;\r\n\tfloat xz = quaX * z;\r\n    float yy = quaY * y;\r\n    float yz = quaY * z;\r\n    float zz = quaZ * z;\r\n\r\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\r\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\r\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\r\n\t\r\n}\r\n\r\nvec3 rotationByQuaternions(in vec3 v,in vec4 q) \r\n{\r\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\r\n}\r\n\r\n \r\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\r\nfloat getCurValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\r\n{\r\n\tfloat curValue;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientNumber=gradientNumbers[i];\r\n\t\tfloat key=gradientNumber.x;\r\n\t\tif(key>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\r\n\t\t\tfloat lastKey=lastGradientNumber.x;\r\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\r\n\t\t\tcurValue=mix(lastGradientNumber.y,gradientNumber.y,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn curValue;\r\n}\r\n#endif\r\n\r\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\r\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\r\n{\r\n\tfloat totalValue=0.0;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientNumber=gradientNumbers[i];\r\n\t\tfloat key=gradientNumber.x;\r\n\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\r\n\t\tfloat lastValue=lastGradientNumber.y;\r\n\t\t\r\n\t\tif(key>=normalizedAge){\r\n\t\t\tfloat lastKey=lastGradientNumber.x;\r\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\r\n\t\t\ttotalValue+=(lastValue+mix(lastValue,gradientNumber.y,age))/2.0*a_ShapePositionStartLifeTime.w*(normalizedAge-lastKey);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\telse{\r\n\t\t\ttotalValue+=(lastValue+gradientNumber.y)/2.0*a_ShapePositionStartLifeTime.w*(key-lastGradientNumber.x);\r\n\t\t}\r\n\t}\r\n\treturn totalValue;\r\n}\r\n#endif\r\n\r\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)\r\nvec4 getColorFromGradient(in vec2 gradientAlphas[4],in vec4 gradientColors[4],in float normalizedAge)\r\n{\r\n\tvec4 overTimeColor;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientAlpha=gradientAlphas[i];\r\n\t\tfloat alphaKey=gradientAlpha.x;\r\n\t\tif(alphaKey>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientAlpha=gradientAlphas[i-1];\r\n\t\t\tfloat lastAlphaKey=lastGradientAlpha.x;\r\n\t\t\tfloat age=(normalizedAge-lastAlphaKey)/(alphaKey-lastAlphaKey);\r\n\t\t\toverTimeColor.a=mix(lastGradientAlpha.y,gradientAlpha.y,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec4 gradientColor=gradientColors[i];\r\n\t\tfloat colorKey=gradientColor.x;\r\n\t\tif(colorKey>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec4 lastGradientColor=gradientColors[i-1];\r\n\t\t\tfloat lastColorKey=lastGradientColor.x;\r\n\t\t\tfloat age=(normalizedAge-lastColorKey)/(colorKey-lastColorKey);\r\n\t\t\toverTimeColor.rgb=mix(gradientColors[i-1].yzw,gradientColor.yzw,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn overTimeColor;\r\n}\r\n#endif\r\n\r\n\r\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\r\nfloat getFrameFromGradient(in vec2 gradientFrames[4],in float normalizedAge)\r\n{\r\n\tfloat overTimeFrame;\r\n\tfor(int i=1;i<4;i++)\r\n\t{\r\n\t\tvec2 gradientFrame=gradientFrames[i];\r\n\t\tfloat key=gradientFrame.x;\r\n\t\tif(key>=normalizedAge)\r\n\t\t{\r\n\t\t\tvec2 lastGradientFrame=gradientFrames[i-1];\r\n\t\t\tfloat lastKey=lastGradientFrame.x;\r\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\r\n\t\t\toverTimeFrame=mix(lastGradientFrame.y,gradientFrame.y,age);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn floor(overTimeFrame);\r\n}\r\n#endif\r\n\r\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\nvec3 computeParticleLifeVelocity(in float normalizedAge)\r\n{\r\n  vec3 outLifeVelocity;\r\n  #ifdef VELOCITYOVERLIFETIMECONSTANT\r\n\t outLifeVelocity=u_VOLVelocityConst; \r\n  #endif\r\n  #ifdef VELOCITYOVERLIFETIMECURVE\r\n     outLifeVelocity= vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\r\n  #endif\r\n  #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n\t outLifeVelocity=mix(u_VOLVelocityConst,u_VOLVelocityConstMax,vec3(a_Random1.y,a_Random1.z,a_Random1.w)); \r\n  #endif\r\n  #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n     outLifeVelocity=vec3(mix(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y),\r\n\t                 mix(getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z),\r\n\t\t\t\t\t mix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\r\n  #endif\r\n\t\t\t\t\t\r\n  return outLifeVelocity;\r\n} \r\n#endif\r\n\r\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity,in float age,in float normalizedAge,vec3 gravityVelocity,vec4 worldRotation)\r\n{\r\n   vec3 startPosition;\r\n   vec3 lifePosition;\r\n   #if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t#ifdef VELOCITYOVERLIFETIMECONSTANT\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=lifeVelocity*age;\r\n\t#endif\r\n\t#ifdef VELOCITYOVERLIFETIMECURVE\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\r\n\t#endif\r\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=lifeVelocity*age;\r\n\t#endif\r\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\r\n\t\t  startPosition=startVelocity*age;\r\n\t\t  lifePosition=vec3(mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y)\r\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z)\r\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\r\n\t#endif\r\n\t\r\n\tvec3 finalPosition;\r\n\tif(u_VOLSpaceType==0){\r\n\t  if(u_ScalingMode!=2)\r\n\t   finalPosition =rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition),worldRotation);\r\n\t  else\r\n\t   finalPosition =rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition,worldRotation);\r\n\t}\r\n\telse{\r\n\t  if(u_ScalingMode!=2)\r\n\t    finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation)+lifePosition;\r\n\t  else\r\n\t    finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation)+lifePosition;\r\n\t}\r\n  #else\r\n\t startPosition=startVelocity*age;\r\n\t vec3 finalPosition;\r\n\t if(u_ScalingMode!=2)\r\n\t\t\tfinalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation);\r\n\t else\r\n\t   \tfinalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation);\r\n  #endif\r\n  \r\n  if(u_SimulationSpace==0)\r\n    finalPosition=finalPosition+a_SimulationWorldPostion;\r\n  else if(u_SimulationSpace==1) \r\n    finalPosition=finalPosition+u_WorldPosition;\r\n  \r\n  finalPosition+=0.5*gravityVelocity*age;\r\n \r\n  return  finalPosition;\r\n}\r\n\r\n\r\nvec4 computeParticleColor(in vec4 color,in float normalizedAge)\r\n{\r\n\t#ifdef COLOROVERLIFETIME\r\n\t  color*=getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge);\r\n\t#endif\r\n\t\r\n\t#ifdef RANDOMCOLOROVERLIFETIME\r\n\t  color*=mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge),getColorFromGradient(u_MaxColorOverLifeGradientAlphas,u_MaxColorOverLifeGradientColors,normalizedAge),a_Random0.y);\r\n\t#endif\r\n\r\n    return color;\r\n}\r\n\r\nvec2 computeParticleSizeBillbard(in vec2 size,in float normalizedAge)\r\n{\r\n\t#ifdef SIZEOVERLIFETIMECURVE\r\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\r\n\t\tsize*=vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge));\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n\t    size*=vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\r\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z));\r\n\t#endif\r\n\treturn size;\r\n}\r\n\r\n#ifdef RENDERMODE_MESH\r\nvec3 computeParticleSizeMesh(in vec3 size,in float normalizedAge)\r\n{\r\n\t#ifdef SIZEOVERLIFETIMECURVE\r\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\r\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\r\n\t\tsize*=vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge));\r\n\t#endif\r\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\r\n\t    size*=vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\r\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z)\r\n\t\t,mix(getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ,normalizedAge),a_Random0.z));\r\n\t#endif\r\n\treturn size;\r\n}\r\n#endif\r\n\r\nfloat computeParticleRotationFloat(in float rotation,in float age,in float normalizedAge)\r\n{ \r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\r\n\t\t#endif\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tfloat ageRot=u_ROLAngularVelocityConstSeprarate.z*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge);\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConstSeprarate.z,u_ROLAngularVelocityConstMaxSeprarate.z,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\r\n\t\t#endif\r\n\t#endif\r\n\treturn rotation;\r\n}\r\n\r\n#if defined(RENDERMODE_MESH)&&(defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE))\r\nvec3 computeParticleRotationVec3(in vec3 rotation,in float age,in float normalizedAge)\r\n{ \r\n\t#ifdef ROTATIONOVERLIFETIME\r\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\r\n\t\t#endif\r\n\t#endif\r\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\r\n\t\t\tvec3 ageRot=u_ROLAngularVelocityConstSeprarate*age;\r\n\t        rotation+=ageRot;\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\r\n\t\t\trotation+=vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge));\r\n\t\t#endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\r\n\t\t\tvec3 ageRot=mix(u_ROLAngularVelocityConstSeprarate,u_ROLAngularVelocityConstMaxSeprarate,a_Random0.w)*age;\r\n\t        rotation+=ageRot;\r\n\t    #endif\r\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\r\n\t\t\trotation+=vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,normalizedAge),a_Random0.w)\r\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,normalizedAge),a_Random0.w)\r\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\r\n\t\t#endif\r\n\t#endif\r\n\treturn rotation;\r\n}\r\n#endif\r\n\r\nvec2 computeParticleUV(in vec2 uv,in float normalizedAge)\r\n{ \r\n\t#ifdef TEXTURESHEETANIMATIONCURVE\r\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\r\n\t\tfloat frame=getFrameFromGradient(u_TSAGradientUVs,cycleNormalizedAge-floor(cycleNormalizedAge));\r\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\r\n\t\tfloat floorTotalULength=floor(totalULength);\r\n\t    uv.x+=totalULength-floorTotalULength;\r\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\r\n    #endif\r\n\t#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\r\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\r\n\t\tfloat uvNormalizedAge=cycleNormalizedAge-floor(cycleNormalizedAge);\r\n\t    float frame=floor(mix(getFrameFromGradient(u_TSAGradientUVs,uvNormalizedAge),getFrameFromGradient(u_TSAMaxGradientUVs,uvNormalizedAge),a_Random1.x));\r\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\r\n\t\tfloat floorTotalULength=floor(totalULength);\r\n\t    uv.x+=totalULength-floorTotalULength;\r\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\r\n    #endif\r\n\treturn uv;\r\n}\r\n\r\nvoid main()\r\n{\r\n\tfloat age = u_CurrentTime - a_DirectionTime.w;\r\n\tfloat normalizedAge = age/a_ShapePositionStartLifeTime.w;\r\n\tvec3 lifeVelocity;\r\n\tif(normalizedAge<1.0)\r\n\t{ \r\n\t\tvec3 startVelocity=a_DirectionTime.xyz*a_StartSpeed;\r\n\t\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t\t\tlifeVelocity= computeParticleLifeVelocity(normalizedAge);//计算粒子生命周期速度\r\n\t\t#endif \r\n\t\tvec3 gravityVelocity=u_Gravity*age;\r\n\t\t\r\n\t\tvec4 worldRotation;\r\n\t\tif(u_SimulationSpace==0)\r\n\t\t\tworldRotation=a_SimulationWorldRotation;\r\n\t\telse\r\n\t\t\tworldRotation=u_WorldRotation;\r\n\t\t\r\n\t\tvec3 center=computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge,gravityVelocity,worldRotation);//计算粒子位置\r\n\t\r\n\t\r\n\t\t#ifdef SPHERHBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tvec3 cameraUpVector =normalize(u_CameraUp);//TODO:是否外面归一化\r\n\t\t\tvec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\r\n\t\t\tvec3 upVector = normalize(cross(sideVector,u_CameraDirection));\r\n\t\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z,age,normalizedAge));\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,rotation);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\t\t\tfloat c = cos(rot);\r\n\t\t\t\t\tfloat s = sin(rot);\r\n\t\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\t\t\tcorner=rotation*corner;\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\r\n\t\t\t\t}\r\n\t\t\t#else\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,a_StartRotation0);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tfloat c = cos(a_StartRotation0.x);\r\n\t\t\t\t\tfloat s = sin(a_StartRotation0.x);\r\n\t\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\t\t\tcorner=rotation*corner;\r\n\t\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef STRETCHEDBILLBOARD\r\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\tvec3 velocity;\r\n\t\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\r\n\t\t\tif(u_VOLSpaceType==0)\r\n\t\t\tvelocity=rotationByQuaternions(u_SizeScale*(startVelocity+lifeVelocity),worldRotation)+gravityVelocity;\r\n\t\t\telse\r\n\t\t\tvelocity=rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+lifeVelocity+gravityVelocity;\r\n\t\t#else\r\n\t\t\tvelocity= rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+gravityVelocity;\r\n\t\t#endif\t\r\n\t\t\tvec3 cameraUpVector = normalize(velocity);\r\n\t\t\tvec3 direction = normalize(center-u_CameraPos);\r\n\t\t\tvec3 sideVector = normalize(cross(direction,normalize(velocity)));\r\n\t\t\t\r\n\t\t\tsideVector=u_SizeScale.xzy*sideVector;\r\n\t\t\tcameraUpVector=length(vec3(u_SizeScale.x,0.0,0.0))*cameraUpVector;\r\n\t\t\t\r\n\t\t\tvec2 size=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\t\r\n\t\t\tconst mat2 rotaionZHalfPI=mat2(0.0, -1.0, 1.0, 0.0);\r\n\t\t\tcorner=rotaionZHalfPI*corner;\r\n\t\t\tcorner.y=corner.y-abs(corner.y);\r\n\t\t\t\r\n\t\t\tfloat speed=length(velocity);//TODO:\r\n\t\t\tcenter +=sign(u_SizeScale.x)*(sign(u_StretchedBillboardLengthScale)*size.x*corner.x*sideVector+(speed*u_StretchedBillboardSpeedScale+size.y*u_StretchedBillboardLengthScale)*corner.y*cameraUpVector);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef HORIZONTALBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tconst vec3 cameraUpVector=vec3(0.0,0.0,1.0);\r\n\t\t\tconst vec3 sideVector = vec3(-1.0,0.0,0.0);\r\n\t\t\t\r\n\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\tfloat c = cos(rot);\r\n\t\t\tfloat s = sin(rot);\r\n\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\tcorner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\r\n\t\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\tcenter +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef VERTICALBILLBOARD\r\n\t\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\r\n\t\t\tconst vec3 cameraUpVector =vec3(0.0,1.0,0.0);\r\n\t\t\tvec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\r\n\t\t\t\r\n\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\tfloat c = cos(rot);\r\n\t\t\tfloat s = sin(rot);\r\n\t\t\tmat2 rotation= mat2(c, -s, s, c);\r\n\t\t\tcorner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\r\n\t\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\r\n\t\t\tcenter +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef RENDERMODE_MESH\r\n\t\t\tvec3 size=computeParticleSizeMesh(a_StartSize,normalizedAge);\r\n\t\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z, age,normalizedAge));\r\n\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,rotation),worldRotation);\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\t#ifdef ROTATIONOVERLIFETIME\r\n\t\t\t\t\t\tfloat angle=computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\r\n\t\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\r\n\t\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),angle),worldRotation));//已验证\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse{\r\n\t\t\t\t\t\t\t#ifdef SHAPE\r\n\t\t\t\t\t\t\t\tcenter+= u_SizeScale.xzy*(rotationByQuaternions(rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),angle),worldRotation));\r\n\t\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\t\t\tcenter+=rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle);//已验证\r\n\t\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\t\t\tcenter+=rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle),worldRotation);//已验证\r\n\t\t\t\t\t\t\t#endif\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t#endif\r\n\t\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\r\n\t\t\t\t\t\t//TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\r\n\t\t\t\t\t\tvec3 angle=computeParticleRotationVec3(vec3(0.0,0.0,-a_StartRotation0.x), age,normalizedAge);\r\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByEuler(u_SizeScale*a_MeshPosition*size,vec3(angle.x,angle.y,angle.z)),worldRotation));//已验证\r\n\t\t\t\t\t#endif\t\t\r\n\t\t\t\t}\r\n\t\t\t#else\r\n\t\t\t\tif(u_ThreeDStartRotation){\r\n\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,a_StartRotation0),worldRotation);//已验证\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\r\n\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x);\r\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\tcenter+= (rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x),worldRotation));//已验证\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\t#ifdef SHAPE\r\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\t\tcenter+= u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x);\r\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x),worldRotation);\t\r\n\t\t\t\t\t\t#else\r\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\r\n\t\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x);\r\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\r\n\t\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x),worldRotation);//已验证\r\n\t\t\t\t\t\t#endif\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\tv_MeshColor=a_MeshColor;\r\n\t\t#endif\r\n\t\r\n\t\tgl_Position=u_Projection*u_View*vec4(center,1.0);\r\n\t\tv_Color = computeParticleColor(a_StartColor, normalizedAge);\r\n\t\t#ifdef DIFFUSEMAP\r\n\t\t\t#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\r\n\t\t\t\tv_TextureCoordinate =computeParticleUV(a_CornerTextureCoordinate.zw, normalizedAge);\r\n\t\t\t#endif\r\n\t\t\t#ifdef RENDERMODE_MESH\r\n\t\t\t\tv_TextureCoordinate =computeParticleUV(a_MeshTextureCoordinate, normalizedAge);\r\n\t\t\t#endif\r\n\t\t\t\r\n\t\t\t#ifdef TILINGOFFSET\r\n\t\t\t\tv_TextureCoordinate=TransformUV(v_TextureCoordinate,u_TilingOffset);\r\n\t\t\t#endif\r\n\t\t#endif\r\n   \t}\r\n   \telse\r\n\t{\r\n\t\tgl_Position=vec4(2.0,2.0,2.0,1.0);//Discard use out of X(-1,1),Y(-1,1),Z(0,1)\r\n\t}\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n\r\n', oi = "struct LayaGI\r\n{\r\n\tvec3 diffuse;\r\n\tvec3 specular;\r\n};\r\n\r\nvec4 LayaAirBRDF(in vec3 diffuseColor, in vec3 specularColor, in float oneMinusReflectivity, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\r\n{\r\n\tfloat perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);\r\n\tvec3 halfDir = SafeNormalize(viewDir - lightDir);\r\n\t\r\n\tfloat nv = abs(dot(normal, viewDir));\r\n\t\r\n\tfloat nl = clamp(dot(normal,   -lightDir),  0.0, 1.0);\r\n\tfloat nh = clamp(dot(normal,     halfDir),  0.0, 1.0);\r\n\tfloat lv = clamp(dot(lightDir,   viewDir),  0.0, 1.0);\r\n\tfloat lh = clamp(dot(lightDir,  -halfDir),  0.0, 1.0);\r\n\t\r\n\tfloat diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;\r\n\t\r\n\tfloat roughness = PerceptualRoughnessToRoughness(perceptualRoughness);\r\n\t\r\n\t//#if UNITY_BRDF_GGX\r\n\t // GGX with roughtness to 0 would mean no specular at all, using max(roughness, 0.002) here to match HDrenderloop roughtness remapping.\r\n\troughness = max(roughness,0.014);\r\n\tfloat V = SmithJointGGXVisibilityTerm(nl, nv, roughness);\r\n\tfloat D = GGXTerm(nh, roughness);\r\n\t\r\n\tfloat specularTerm = V * D * PI;\r\n\t\r\n\tspecularTerm = sqrt(max(0.0001, specularTerm));\r\n\tspecularTerm = max(0.0, specularTerm * nl);\r\n\t\r\n\tfloat surfaceReduction = 1.0 - 0.28 * roughness * perceptualRoughness;\r\n\tfloat grazingTerm = clamp(smoothness + (1.0 - oneMinusReflectivity), 0.0, 1.0);\r\n\t\r\n\tvec4 color;\r\n\tcolor.rgb = diffuseColor * (gi.diffuse+lightColor * diffuseTerm) \r\n\t\t\t  + specularTerm * lightColor * FresnelTerm (specularColor, lh);\r\n\t\t\t  //+ surfaceReduction * gi.specular * FresnelLerp(specularColor, vec3(grazingTerm), nv);\r\n\t\r\n\treturn color;\r\n}\r\nvec4 LayaAirStandardReflect(in vec4 albedoColor,in float metallic,in float smoothness,in LayaGI gi)\r\n{\r\n\tvec3 diffuseColor;\r\n\tvec3 specularColor;\r\n\tfloat alpha;\r\n\tfloat oneMinusReflectivity;\r\n\tdiffuseColor = DiffuseAndSpecularFromMetallic (albedoColor.rgb, metallic, specularColor, oneMinusReflectivity);\r\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\r\n\tfloat perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);\r\n\tfloat roughness = PerceptualRoughnessToRoughness(perceptualRoughness);\r\n\tfloat surfaceReduction = 1.0 - 0.28 * roughness * perceptualRoughness;\r\n\tvec4 color;\r\n\tcolor.rgb = surfaceReduction * gi.specular;\r\n\tcolor.a = alpha;\r\n\treturn color;\r\n\r\n}\r\n\r\nvec4 LayaAirSpecularReflect(in vec4 albedoColor,in vec3 specularColor,in float smoothness,in LayaGI gi)\r\n{\r\n\tfloat oneMinusReflectivity;\r\n\tvec3 diffuseColor;\r\n\tfloat alpha;\r\n\t\r\n\tdiffuseColor = EnergyConservationBetweenDiffuseAndSpecular (albedoColor.rgb, specularColor, oneMinusReflectivity);\r\n\t\r\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\r\n\r\n\tfloat perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);\r\n\tfloat roughness = PerceptualRoughnessToRoughness(perceptualRoughness);\r\n\tfloat surfaceReduction = 1.0 - 0.28 * roughness * perceptualRoughness;\r\n\tvec4 color;\r\n\tcolor.rgb = surfaceReduction * gi.specular;\r\n\tcolor.a = alpha;\r\n\treturn color;\r\n}", li = '#include "PBRUtils.glsl"\r\n#include "BRDF.glsl"\r\n\r\nvec4 PBRSpecularLight(in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\r\n{\r\n\tfloat oneMinusReflectivity;\r\n\tvec3 diffuseColor;\r\n\tfloat alpha;\r\n\t\r\n\tdiffuseColor = EnergyConservationBetweenDiffuseAndSpecular (albedoColor.rgb, specularColor, oneMinusReflectivity);\r\n\t\r\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\r\n\t\r\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\r\n\tcolor.a = alpha;\r\n\treturn color;\r\n}\r\n\r\nvec4 PBRSpecularDiectionLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi,in float shadowValue)\r\n{\r\n\tvec3 lightVec = normalize(light.direction);\r\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.color*shadowValue, gi);\r\n}\r\n#ifdef POINTLIGHT\r\nvec4 PBRSpecularPointLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi,in float shadowValue)\r\n{\r\n\tvec3 lightVec = pos-light.position;\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range);\r\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.color*shadowValue, gi) * attenuate;\r\n}\r\n#endif\r\nvec4 PBRSpecularSpotLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi,in float shadowValue)\r\n{\r\n\tvec3 lightVec =  pos - light.position;\r\n\tvec3 normalLightVec = normalize(lightVec);\r\n\tvec2 cosAngles = cos(vec2(light.spot, light.spot*0.5) * 0.5);//ConeAttenuation\r\n\tfloat dl = dot(normalize(light.direction), normalLightVec);\r\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range) * dl;\r\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.color*shadowValue, gi) * attenuate;\r\n}\r\n\r\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\r\n//{\r\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\r\n//\t\r\n//\tfloat distance = dot(lightCoord, lightCoord);\r\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\r\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\r\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\r\n//\tvec3 lightVec = normalize(pos - light.cosition);\r\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.color, gi) * attenuate;\r\n//}\r\n\r\nvec4 SpecularGloss(float albedoTextureAlpha, in vec2 uv0)\r\n{\r\n    vec4 sg;\r\n\t\r\n\t#ifdef SPECULARTEXTURE\r\n\t\tvec4 specularTextureColor = texture2D(u_SpecularTexture, uv0);\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\tsg.rgb = specularTextureColor.rgb;\r\n\t\t\tsg.a = albedoTextureAlpha;\r\n\t\t#else\r\n\t\t\tsg = specularTextureColor;\r\n\t\t#endif\r\n\t\tsg.a *= u_smoothnessScale;\r\n\t#else\r\n\t\tsg.rgb = u_SpecularColor.rgb;\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\tsg.a = albedoTextureAlpha * u_smoothnessScale;\r\n\t\t#else\r\n\t\t\tsg.a = u_smoothness;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n    return sg;\r\n}\r\n\r\n', _i = '#include "PBRUtils.glsl"\r\n#include "BRDF.glsl"\r\n\r\nvec4 PBRStandardLight(in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\r\n{\r\n\tfloat oneMinusReflectivity;\r\n\tvec3 diffuseColor;\r\n\tvec3 specularColor;\r\n\tfloat alpha;\r\n\t\r\n\tdiffuseColor = DiffuseAndSpecularFromMetallic (albedoColor.rgb, metallic, specularColor, oneMinusReflectivity);\r\n\t\r\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\r\n\t\r\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\r\n\tcolor.a = alpha;\r\n\treturn color;\r\n}\r\n\r\nvec4 PBRStandardDiectionLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi,in float shadowValue)\r\n{\r\n\tvec3 lightVec = normalize(light.direction);\r\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.color*shadowValue, gi);\r\n}\r\n#ifdef POINTLIGHT\r\nvec4 PBRStandardPointLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi,in float shadowValue)\r\n{\r\n\tvec3 lightVec = pos-light.position;\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range);\r\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.color*shadowValue, gi) * attenuate;\r\n}\r\n#endif\r\nvec4 PBRStandardSpotLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi,in float shadowValue)\r\n{\r\n\tvec3 lightVec =  pos - light.position;\r\n\tvec3 normalLightVec = normalize(lightVec);\r\n\tvec2 cosAngles = cos(vec2(light.spot, light.spot*0.5) * 0.5);//ConeAttenuation\r\n\tfloat dl = dot(normalize(light.direction), normalLightVec);\r\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\r\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.range) * dl;\r\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.color*shadowValue, gi) * attenuate;\r\n\t\r\n}\r\n\r\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\r\n//{\r\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\r\n//\t\r\n//\tfloat distance = dot(lightCoord, lightCoord);\r\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\r\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\r\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\r\n//\tvec3 lightVec = normalize(pos - light.position);\r\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.color, gi) * attenuate;\r\n//}\r\n\r\nvec2 MetallicGloss(in float albedoTextureAlpha, in vec2 uv0)\r\n{\r\n\tvec2 mg;\r\n\t\r\n\t#ifdef METALLICGLOSSTEXTURE\r\n\t\tvec4 metallicGlossTextureColor = texture2D(u_MetallicGlossTexture, uv0);\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\tmg.r = metallicGlossTextureColor.r;\r\n\t\t\tmg.g = albedoTextureAlpha;\r\n\t\t#else\r\n\t\t    mg = metallicGlossTextureColor.ra;\r\n\t\t#endif\r\n\t\tmg.g *= u_smoothnessScale;\r\n\t#else\r\n\t\tmg.r = u_metallic;\r\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\r\n\t\t\tmg.g = albedoTextureAlpha * u_smoothnessScale;\r\n\t\t#else\r\n\t\t\tmg.g = u_smoothness;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\treturn mg;\r\n}\r\n\r\n', hi = "\r\nvec3 UnpackScaleNormal(in vec2 uv0)\r\n{\r\n\t#ifdef NORMALTEXTURE\r\n\t\tvec3 normalT;\r\n\t\tvec4 normalMapSample = texture2D(u_NormalTexture, uv0);\r\n\t\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\r\n\t\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\r\n\t\tnormalT.xy *= u_normalScale;\r\n\t\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\r\n\t\t\r\n\t\tvec3 T = normalize(v_Tangent);\r\n\t\tvec3 B = normalize(v_Binormal);\r\n\t\tvec3 N = normalize(v_Normal);\r\n\t\tmat3 TBN = mat3(T, B, N);\r\n\t\t\r\n\t\tvec3 bumpedNormal = TBN * normalize(normalT);\r\n\t\treturn bumpedNormal;\r\n\t#else\r\n\t\treturn normalize(v_Normal);\r\n\t#endif\r\n}\r\n\r\nvec4 DielectricSpecularColor = vec4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301);\r\n\r\nfloat PI = 3.14159265359;\r\n\r\nvec3 FresnelTerm (in vec3 F0, in float cosA)\r\n{\r\n\treturn F0 + (vec3(1.0) - F0) * pow(1.0 - cosA, 5.0);\r\n}\r\n\r\nvec3 FresnelLerp (in vec3 F0, in vec3 F90, float cosA)\r\n{\r\n    float t = pow(1.0 - cosA, 5.0);\r\n    return mix(F0, F90, t);\r\n}\r\n\r\nfloat PerceptualRoughnessToRoughness(in float perceptualRoughness)\r\n{\r\n\treturn perceptualRoughness * perceptualRoughness;\r\n}\r\n\r\nfloat PerceptualRoughnessToSpecularPower(in float perceptualRoughness)\r\n{\r\n\tfloat m = PerceptualRoughnessToRoughness(perceptualRoughness);\r\n\tfloat sq = max(0.0001, m * m);\r\n\tfloat n = (2.0 / sq) - 2.0;\r\n\tn = max(n, 0.0001);\r\n\treturn n;\r\n}\r\n\r\nfloat RoughnessToPerceptualRoughness(in float roughness)\r\n{\r\n\treturn sqrt(roughness);\r\n}\r\n\r\nfloat SmoothnessToRoughness(in float smoothness)\r\n{\r\n\treturn (1.0 - smoothness) * (1.0 - smoothness);\r\n}\r\n\r\nfloat SmoothnessToPerceptualRoughness(in float smoothness)\r\n{\r\n\treturn (1.0 - smoothness);\r\n}\r\n\r\nvec3 SafeNormalize(in vec3 inVec)\r\n{\r\n\tfloat dp3 = max(0.001,dot(inVec,inVec));\r\n\treturn inVec * (1.0 / sqrt(dp3));\r\n}\r\n\r\nfloat DisneyDiffuse(in float NdotV, in float NdotL, in float LdotH, in float perceptualRoughness)\r\n{\r\n\tfloat fd90 = 0.5 + 2.0 * LdotH * LdotH * perceptualRoughness;\r\n\tfloat lightScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotL,5.0));\r\n\tfloat viewScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotV,5.0));\r\n\r\n\treturn lightScatter * viewScatter;\r\n}\r\n\r\nfloat SmithJointGGXVisibilityTerm (float NdotL, float NdotV, float roughness)\r\n{\r\n\tfloat a = roughness;\r\n\tfloat lambdaV = NdotL * (NdotV * (1.0 - a) + a);\r\n\tfloat lambdaL = NdotV * (NdotL * (1.0 - a) + a);\r\n\r\n\treturn 0.5 / (lambdaV + lambdaL + 0.00001);\r\n}\r\n\r\nfloat GGXTerm (float NdotH, float roughness)\r\n{\r\n\tfloat a2 = roughness * roughness;\r\n\tfloat d = (NdotH * a2 - NdotH) * NdotH + 1.0;\r\n\treturn 0.31830988618 * a2 / (d * d + 0.0000001);\r\n}\r\n\r\nfloat OneMinusReflectivityFromMetallic(in float metallic)\r\n{\r\n\tfloat oneMinusDielectricSpec = DielectricSpecularColor.a;\r\n\treturn oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;\r\n}\r\n\r\nfloat SpecularStrength(vec3 specular)\r\n{\r\n    //(SHADER_TARGET < 30)return specular.r; \r\n    return max (max (specular.r, specular.g), specular.b);\r\n}\r\n\r\nvec3 DiffuseAndSpecularFromMetallic(in vec3 diffuseColor, in float metallic, out vec3 specularColor, out float oneMinusReflectivity)\r\n{\r\n\tspecularColor = mix(DielectricSpecularColor.rgb, diffuseColor, metallic);\r\n\toneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);\r\n\treturn diffuseColor * oneMinusReflectivity;\r\n}\r\n\r\nvec3 EnergyConservationBetweenDiffuseAndSpecular(in vec3 diffuseColor, in vec3 specularColor, out float oneMinusReflectivity)\r\n{\r\n\toneMinusReflectivity = 1.0 - SpecularStrength(specularColor);\r\n\treturn diffuseColor * oneMinusReflectivity;\r\n}\r\n\r\nvec4 Occlusion(in vec2 uv0){\r\n\t#ifdef OCCLUSIONTEXTURE\r\n\t\tvec4 occlusionTextureColor = texture2D(u_OcclusionTexture, uv0);\r\n\t\tfloat occ = occlusionTextureColor.g;\r\n\t\tfloat oneMinusT = 1.0 - u_occlusionStrength;\r\n\t\tfloat lerpOneTo = oneMinusT + occ * u_occlusionStrength;\r\n\t\treturn occlusionTextureColor * lerpOneTo;\r\n\t#else\r\n\t\treturn vec4(1.0);\r\n\t#endif\r\n}\r\n\r\nvec2 ParallaxOffset(in vec3 viewDir){\r\n\t#ifdef PARALLAXTEXTURE\r\n\t\tfloat h = texture2D(u_ParallaxTexture, v_Texcoord0).g;\r\n\t\th = h * u_parallaxScale - u_parallaxScale / 2.0;\r\n\t\tvec3 v = viewDir;\r\n\t\tv.z += 0.42;\r\n\t\tvec2 offset = h * (v.xy / v.z);\r\n\t\treturn v_Texcoord0 + offset;\r\n\t#else\r\n\t\treturn v_Texcoord0;\r\n\t#endif\r\n}\r\n\r\nvec3 ReflectCubeMap(in vec3 viewDir, in vec3 normal){\r\n\t#ifdef REFLECTMAP\r\n\t\tvec3 incident = -viewDir;\r\n\t\tvec3 reflectionVector = reflect(incident, normal);\r\n\t\tvec3 reflectionColor = textureCube(u_ReflectTexture, vec3(-reflectionVector.x, reflectionVector.yz)).rgb;\r\n\t\treturn reflectionColor * u_ReflectIntensity;\r\n\t#else\r\n\t\treturn vec3(0.0);\r\n\t#endif\r\n}\r\n\r\n\r\n\r\nvec3 LayaPreMultiplyAlpha(vec3 diffColor, float alpha, float oneMinusReflectivity, out float outModifiedAlpha)\r\n{\r\n\t#ifdef ALPHAPREMULTIPLY\r\n\t\tdiffColor *= alpha;\r\n\t\toutModifiedAlpha = 1.0 - oneMinusReflectivity + alpha * oneMinusReflectivity;\r\n\t#else\r\n\t\toutModifiedAlpha = alpha;\r\n\t#endif\r\n\treturn diffColor;\r\n}\r\n\r\n", ci = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec3 v_PositionWorld;\r\n\r\nuniform vec3 u_AmbientColor;\r\nuniform vec4 u_AlbedoColor;\r\nuniform vec4 u_SpecularColor;\r\n\r\n#ifdef ALBEDOTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n#endif\r\n#ifdef SPECULARTEXTURE\r\n\tuniform sampler2D u_SpecularTexture;\r\n#endif\r\n#ifdef NORMALTEXTURE\r\n\tuniform sampler2D u_NormalTexture;\r\n\tuniform float u_normalScale;\r\n#endif\r\n#ifdef PARALLAXTEXTURE\r\n\tuniform sampler2D u_ParallaxTexture;\r\n\tuniform float u_parallaxScale;\r\n#endif\r\n#ifdef OCCLUSIONTEXTURE\r\n\tuniform sampler2D u_OcclusionTexture;\r\n\tuniform float u_occlusionStrength;\r\n#endif\r\n#ifdef EMISSION\r\n\t#ifdef EMISSIONTEXTURE\r\n\t\tuniform sampler2D u_EmissionTexture;\r\n\t#endif\r\n\tuniform vec4 u_EmissionColor;\r\n#endif\r\n#ifdef REFLECTMAP\r\n\tuniform samplerCube u_ReflectTexture;\r\n\tuniform float u_ReflectIntensity;\r\n#endif\r\n\r\nuniform float u_AlphaTestValue;\r\nuniform float u_metallic;\r\nuniform float u_smoothness;\r\nuniform float u_smoothnessScale;\r\n\r\n\r\n\r\n#include "Lighting.glsl";\r\n#include "PBRSpecularLighting.glsl"\r\n#include "ShadowHelper.glsl"\r\n\r\nvarying float v_posViewZ;\r\n#ifdef RECEIVESHADOW\r\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\r\n\t\tuniform mat4 u_lightShadowVP[4];\r\n\t#endif\r\n\t#ifdef SHADOWMAP_PSSM1 \r\n\t\tvarying vec4 v_lightMVPPos;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef LEGACYSINGLELIGHTING\r\n\t#ifdef DIRECTIONLIGHT\r\n\t\tuniform DirectionLight u_DirectionLight;\r\n\t#endif\r\n\t#ifdef POINTLIGHT\r\n\t\tuniform PointLight u_PointLight;\r\n\t#endif\r\n\t#ifdef SPOTLIGHT\r\n\t\tuniform SpotLight u_SpotLight;\r\n\t#endif\r\n#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\nvoid main_castShadow()\r\n{\r\n\tgl_FragColor=packDepth(v_posViewZ);\r\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\r\n\t\tif( alpha < u_AlphaTestValue )\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t#endif\r\n}\r\n\r\nvoid main_normal()\r\n{\t\r\n\tvec3 viewDir = normalize(v_ViewDir);\r\n\t\r\n\tvec2 uv0 = ParallaxOffset(viewDir);\r\n\t\r\n\tvec4 sg;\r\n\tvec4 albedoColor;\r\n\t#ifdef ALBEDOTEXTURE\r\n\t\tvec4 albedoTextureColor = texture2D(u_AlbedoTexture, uv0);\r\n\t\talbedoColor = albedoTextureColor * u_AlbedoColor;\r\n\t\tsg = SpecularGloss(albedoTextureColor.a, uv0);\r\n\t#else\r\n\t\talbedoColor = u_AlbedoColor;\r\n\t\tsg = SpecularGloss(1.0, uv0);\r\n\t#endif\r\n\t\r\n\t#ifdef ALPHATEST\r\n\t\tif(albedoColor.a < u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n  \r\n\tvec3 normal = UnpackScaleNormal(uv0);\r\n\t\r\n\tLayaGI gi;\r\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\r\n\tgi.specular = ReflectCubeMap(viewDir, normal);\r\n\t\r\n\t//float a = (sg.r+sg.g+sg.b) / 3.0;\r\n  \tfloat shadowValue = 1.0;\r\n\t#ifdef RECEIVESHADOW\r\n\t\t\r\n\t\t#ifdef SHADOWMAP_PSSM3\r\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t\t#endif\r\n\t\t#ifdef SHADOWMAP_PSSM2\r\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t\t#endif \r\n\t\t#ifdef SHADOWMAP_PSSM1\r\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\r\n\t\t#endif\r\n\t#endif\r\n\tvec4 color = vec4(0.0);\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tcolor += PBRSpecularDiectionLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_DirectionLight, gi,shadowValue);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tcolor.a = 0.0;\r\n\t\t\tcolor += PBRSpecularPointLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_PointLight, v_PositionWorld, gi,shadowValue);\r\n\t\t#endif\r\n\t\t\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tcolor.a = 0.0;\r\n\t\t\tcolor += PBRSpecularSpotLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_SpotLight, v_PositionWorld, gi,shadowValue);\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\tcolor.a = 0.0;\r\n\t\t\t\tcolor +=PBRSpecularDiectionLight(albedoColor, sg.rgb, sg.a, normal, viewDir, directionLight, gi,shadowValue);\r\n\t\t\t}\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tcolor.a = 0.0;\r\n\t\t\t\t\tcolor +=PBRSpecularPointLight(albedoColor, sg.rgb, sg.a, normal, viewDir, pointLight, v_PositionWorld, gi,shadowValue);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tcolor.a = 0.0;\r\n\t\t\t\t\tcolor += PBRSpecularSpotLight(albedoColor, sg.rgb, sg.a, normal, viewDir, spotLight, v_PositionWorld, gi,shadowValue);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t#ifdef REFLECTMAP\r\n\t \tcolor += LayaAirSpecularReflect(albedoColor,sg.rgb,sg.a,gi);\r\n\t#endif\r\n\r\n\t#ifdef EMISSION\r\n\t\tvec4 emissionColor = u_EmissionColor;\r\n\t\t#ifdef EMISSIONTEXTURE\r\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\r\n\t\t#endif\r\n\t\tcolor.rgb += emissionColor.rgb;\r\n\t#endif\r\n\r\n\tgl_FragColor = color;\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\r\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\r\n\t#endif\r\n}\r\n\r\nvoid main()\r\n{\r\n\t#ifdef CASTSHADOW\t\t\r\n\t\tmain_castShadow();\r\n\t#else\r\n\t\tmain_normal();\r\n\t#endif  \r\n}\r\n\r\n', di = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec3 a_Normal;\r\nattribute vec4 a_Tangent0;\r\nattribute vec2 a_Texcoord0;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_WorldMat;\r\n#else\r\n\tuniform mat4 u_WorldMat;\r\n#endif\r\nuniform vec3 u_CameraPos;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec3 v_PositionWorld;\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\nvarying float v_posViewZ;\r\n#ifdef RECEIVESHADOW\r\n  #ifdef SHADOWMAP_PSSM1 \r\n\t  varying vec4 v_lightMVPPos;\r\n\t  uniform mat4 u_lightShadowVP[4];\r\n  #endif\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nvoid main_castShadow()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t \r\n\t//TODO没考虑UV动画呢\r\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t\tv_Texcoord0 = a_Texcoord0;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n\tv_posViewZ = gl_Position.z;\r\n}\r\n\r\nvoid main_normal()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)||defined(REFLECTMAP)\r\n\t\tmat4 worldMat;\r\n\t\t#ifdef GPU_INSTANCE\r\n\t\t\tworldMat = a_WorldMat;\r\n\t\t#else\r\n\t\t\tworldMat = u_WorldMat;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\r\n\t\tmat3 worldInvMat;\r\n\t\t#ifdef BONE\r\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\r\n\t\t#else\r\n\t\t\tworldInvMat=inverse(mat3(worldMat));\r\n\t\t#endif  \r\n\t\tv_Normal=a_Normal*worldInvMat;\r\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))\r\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\r\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)||defined(REFLECTMAP)\r\n\t\tv_PositionWorld=(worldMat*position).xyz;\r\n\t#endif\r\n\t\r\n  \r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\r\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\r\n\t#endif\r\n\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t#else\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n  \r\n\t#ifdef RECEIVESHADOW\r\n\t\tv_posViewZ = gl_Position.w;\r\n\t\t#ifdef SHADOWMAP_PSSM1 \r\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\r\n\t\t#endif\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n\r\nvoid main()\r\n{\r\n\t#ifdef CASTSHADOW\r\n\t\tmain_castShadow();\r\n\t#else\r\n\t\tmain_normal();\r\n\t#endif\r\n}', ui = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec3 v_PositionWorld;\r\n\r\nuniform vec3 u_AmbientColor;\r\nuniform vec4 u_AlbedoColor;\r\n\r\n#ifdef ALBEDOTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n#endif\r\n#ifdef METALLICGLOSSTEXTURE\r\n\tuniform sampler2D u_MetallicGlossTexture;\r\n#endif\r\n#ifdef NORMALTEXTURE\r\n\tuniform sampler2D u_NormalTexture;\r\n\tuniform float u_normalScale;\r\n#endif\r\n#ifdef PARALLAXTEXTURE\r\n\tuniform sampler2D u_ParallaxTexture;\r\n\tuniform float u_parallaxScale;\r\n#endif\r\n#ifdef OCCLUSIONTEXTURE\r\n\tuniform sampler2D u_OcclusionTexture;\r\n\tuniform float u_occlusionStrength;\r\n#endif\r\n#ifdef EMISSION\r\n\t#ifdef EMISSIONTEXTURE\r\n\t\tuniform sampler2D u_EmissionTexture;\r\n\t#endif\r\n\tuniform vec4 u_EmissionColor;\r\n#endif\r\n#ifdef REFLECTMAP\r\n\tuniform samplerCube u_ReflectTexture;\r\n\tuniform float u_ReflectIntensity;\r\n#endif\r\n\r\nuniform float u_AlphaTestValue;\r\nuniform float u_metallic;\r\nuniform float u_smoothness;\r\nuniform float u_smoothnessScale;\r\n\r\n\r\n\r\n\r\n#include "Lighting.glsl";\r\n#include "PBRStandardLighting.glsl"\r\n#include "ShadowHelper.glsl"\r\n\r\nvarying float v_posViewZ;\r\n#ifdef RECEIVESHADOW\r\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\r\n\t\tuniform mat4 u_lightShadowVP[4];\r\n\t#endif\r\n\t#ifdef SHADOWMAP_PSSM1 \r\n\t\tvarying vec4 v_lightMVPPos;\r\n\t#endif\r\n#endif\r\n\r\n#ifdef LEGACYSINGLELIGHTING\r\n\t#ifdef DIRECTIONLIGHT\r\n\t\tuniform DirectionLight u_DirectionLight;\r\n\t#endif\r\n\t#ifdef POINTLIGHT\r\n\t\tuniform PointLight u_PointLight;\r\n\t#endif\r\n\t#ifdef SPOTLIGHT\r\n\t\tuniform SpotLight u_SpotLight;\r\n\t#endif\r\n#else\r\n\t\tuniform mat4 u_View;\r\n\t\tuniform vec4 u_ProjectionParams;\r\n\t\tuniform vec4 u_Viewport;\r\n\t\tuniform int u_DirationLightCount;\r\n\t\tuniform sampler2D u_LightBuffer;\r\n\t\tuniform sampler2D u_LightClusterBuffer;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\tuniform vec3 u_FogColor;\r\n#endif\r\n\r\nvoid main_castShadow()\r\n{\r\n\tgl_FragColor=packDepth(v_posViewZ);\r\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\r\n\t\tif( alpha < u_AlphaTestValue )\r\n\t\t{\r\n\t\t\tdiscard;\r\n\t\t}\r\n\t#endif\r\n}\r\n\r\nvoid main_normal()\r\n{\t\r\n\tvec3 viewDir = normalize(v_ViewDir);\r\n\t\r\n\tvec2 uv0 = ParallaxOffset(viewDir);\r\n\t\r\n\tvec2 mg;\r\n\tvec4 albedoColor;\r\n\t#ifdef ALBEDOTEXTURE\r\n\t\tvec4 abledoTextureColor = texture2D(u_AlbedoTexture, uv0);\r\n\t\talbedoColor = abledoTextureColor * u_AlbedoColor;\r\n\t\tmg = MetallicGloss(abledoTextureColor.a, uv0);\r\n\t#else\r\n\t\talbedoColor = u_AlbedoColor;\r\n\t\tmg = MetallicGloss(1.0, uv0);\r\n\t#endif\r\n\t\r\n\t#ifdef ALPHATEST\r\n\t\tif(albedoColor.a < u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n\t\r\n\tvec3 normal = UnpackScaleNormal(uv0);\r\n  \r\n\tLayaGI gi;\r\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\r\n\tgi.specular = ReflectCubeMap(viewDir, normal);\r\n  \r\n  \tfloat shadowValue = 1.0;\r\n\t#ifdef RECEIVESHADOW\r\n\t\r\n\t\t#ifdef SHADOWMAP_PSSM3\r\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t\t#endif\r\n\t\t#ifdef SHADOWMAP_PSSM2\r\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\r\n\t\t#endif \r\n\t\t#ifdef SHADOWMAP_PSSM1\r\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\r\n\t\t#endif\r\n\t#endif\r\n\r\n\tvec4 color = vec4(0.0);\r\n\t#ifdef LEGACYSINGLELIGHTING\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tcolor += PBRStandardDiectionLight(albedoColor, mg.r, mg.g, normal, viewDir, u_DirectionLight, gi,shadowValue);\r\n\t\t#endif\r\n\t\r\n\t\t#ifdef POINTLIGHT\r\n\t\t\tcolor.a = 0.0;\r\n\t\t\tcolor += PBRStandardPointLight(albedoColor, mg.r, mg.g, normal, viewDir, u_PointLight, v_PositionWorld, gi,shadowValue);\r\n\t\t#endif\r\n\t\t\r\n\t\t#ifdef SPOTLIGHT\r\n\t\t\tcolor.a = 0.0;\r\n\t\t\tcolor += PBRStandardSpotLight(albedoColor, mg.r, mg.g, normal, viewDir, u_SpotLight, v_PositionWorld, gi,shadowValue);\r\n\t\t#endif\r\n\t#else\r\n\t\t#ifdef DIRECTIONLIGHT\r\n\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t{\r\n\t\t\t\tif(i >= u_DirationLightCount)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tDirectionLight directionLight = getDirectionLight(u_LightBuffer,i);\r\n\t\t\t\tcolor.a = 0.0;\r\n\t\t\t\tcolor += PBRStandardDiectionLight(albedoColor, mg.r, mg.g, normal, viewDir, directionLight, gi,shadowValue);\r\n\t\t\t}\r\n\t\t#endif\r\n\t\t#if defined(POINTLIGHT)||defined(SPOTLIGHT)\r\n\t\t\tivec4 clusterInfo =getClusterInfo(u_LightClusterBuffer,u_View,u_Viewport, v_PositionWorld,gl_FragCoord,u_ProjectionParams);\r\n\t\t\t#ifdef POINTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.x)//PointLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tPointLight pointLight = getPointLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tcolor.a = 0.0;\r\n\t\t\t\t\tcolor += PBRStandardPointLight(albedoColor, mg.r, mg.g, normal, viewDir, pointLight, v_PositionWorld, gi,shadowValue);\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t\t#ifdef SPOTLIGHT\r\n\t\t\t\tfor (int i = 0; i < MAX_LIGHT_COUNT; i++) \r\n\t\t\t\t{\r\n\t\t\t\t\tif(i >= clusterInfo.y)//SpotLightCount\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tSpotLight spotLight = getSpotLight(u_LightBuffer,u_LightClusterBuffer,clusterInfo,i);\r\n\t\t\t\t\tcolor.a = 0.0;\r\n\t\t\t\t\tcolor += PBRStandardSpotLight(albedoColor, mg.r, mg.g, normal, viewDir, spotLight, v_PositionWorld, gi,shadowValue);\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t#endif\r\n\t\t#endif\r\n\t#endif\r\n\r\n\t\r\n\t#ifdef REFLECTMAP\r\n\t \tcolor += LayaAirStandardReflect(albedoColor,mg.r,mg.g,gi);\r\n\t#endif\r\n\r\n\t#ifdef EMISSION\r\n\t\tvec4 emissionColor = u_EmissionColor;\r\n\t\t#ifdef EMISSIONTEXTURE\r\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\r\n\t\t#endif\r\n\t\tcolor.rgb += emissionColor.rgb;\r\n\t#endif\r\n\t\r\n\t\tgl_FragColor = color;\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\r\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\r\n\t#endif\r\n}\r\n\r\nvoid main()\r\n{\r\n\t#ifdef CASTSHADOW\t\t\r\n\t\tmain_castShadow();\r\n\t#else\r\n\t\tmain_normal();\r\n\t#endif  \r\n}', fi = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec3 a_Normal;\r\nattribute vec4 a_Tangent0;\r\nattribute vec2 a_Texcoord0;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_WorldMat;\r\n#else\r\n\tuniform mat4 u_WorldMat;\r\n#endif\r\n\r\nuniform vec3 u_CameraPos;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec3 v_PositionWorld;\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\nvarying float v_posViewZ;\r\n#ifdef RECEIVESHADOW\r\n  #ifdef SHADOWMAP_PSSM1 \r\n\t  varying vec4 v_lightMVPPos;\r\n\t  uniform mat4 u_lightShadowVP[4];\r\n  #endif\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nvoid main_castShadow()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t \r\n\t//TODO没考虑UV动画呢\r\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\r\n\t\tv_Texcoord0 = a_Texcoord0;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n\tv_posViewZ = gl_Position.z;\r\n}\r\n\r\nvoid main_normal()\r\n{\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)||defined(REFLECTMAP)\r\n\t\tmat4 worldMat;\r\n\t\t#ifdef GPU_INSTANCE\r\n\t\t\tworldMat = a_WorldMat;\r\n\t\t#else\r\n\t\t\tworldMat = u_WorldMat;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)\r\n\t\tmat3 worldInvMat;\r\n\t\t#ifdef BONE\r\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\r\n\t\t#else\r\n\t\t\tworldInvMat=inverse(mat3(worldMat));\r\n\t\t#endif  \r\n\t\tv_Normal=a_Normal*worldInvMat;\r\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))\r\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\r\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n\t\r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)||defined(REFLECTMAP)\r\n\t\tv_PositionWorld=(worldMat*position).xyz;\r\n\t#endif\r\n\t\r\n  \r\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(REFLECTMAP)||defined(REFLECTMAP)\r\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\r\n\t#endif\r\n\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t#else\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n  \r\n\t#ifdef RECEIVESHADOW\r\n\t\tv_posViewZ = gl_Position.w;\r\n\t\t#ifdef SHADOWMAP_PSSM1 \r\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\r\n\t\t#endif\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n\r\nvoid main()\r\n{\r\n\t#ifdef CASTSHADOW\r\n\t\tmain_castShadow();\r\n\t#else\r\n\t\tmain_normal();\r\n\t#endif\r\n}', mi = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_PositionTexcoord;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapGLPositionZ(gl_Position);\r\n}', Ei = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\n\r\nvoid fragDownsample13() {\r\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = color;\r\n}\r\n\r\nvoid main() {\r\n\tfragDownsample13();\r\n}', Ti = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\n\r\nvoid fragDownsample4() {\r\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = color;\r\n}\r\n\r\nvoid main() {\r\n\tfragDownsample4();\r\n}', gi = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_AutoExposureTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\r\nuniform vec4 u_Params; // x: clamp, yzw: unused\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\r\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\r\n\tcolor *= autoExposure;\r\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\r\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n\treturn color;\r\n}\r\n\r\nvoid fragPrefilter13() {\r\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragPrefilter13();\r\n}', pi = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_AutoExposureTex;\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\r\nuniform vec4 u_Params; // x: clamp, yzw: unused\r\n\r\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\r\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\r\n\tcolor *= autoExposure;\r\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\r\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\r\n\treturn color;\r\n}\r\n\r\nvoid fragPrefilter4() {\r\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\r\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragPrefilter4();\r\n}', Si = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_BloomTex;\r\n\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform float u_SampleScale;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\r\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\r\n\treturn bloom + color;\r\n}\r\n\r\nvoid fragUpsampleBox() {\r\n\tmediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n\tgl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragUpsampleBox();\r\n}', Ri = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_BloomTex;\r\n\r\nuniform vec4 u_MainTex_TexelSize;\r\nuniform float u_SampleScale;\r\n\r\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\r\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\r\n\treturn bloom + color;\r\n}\r\n\r\nvoid fragUpsampleTent() {\r\n\tmediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\r\n\tgl_FragColor = combine(bloom, v_Texcoord0);\r\n}\r\n\r\nvoid main() {\r\n\tfragUpsampleTent();\r\n}', vi = '#include "StdLib.glsl";\r\n\r\n#define EPSILON 1.0e-4\r\n\r\n// Quadratic color thresholding\r\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\r\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\r\n\t// Pixel brightness\r\n\tmediump float br = max3(color.r, color.g, color.b);\r\n\r\n\t// Under-threshold part: quadratic curve\r\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\r\n\trq = curve.z * rq * rq;\r\n\r\n\t// Combine and apply the brightness response curve.\r\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\r\n\r\n\treturn color;\r\n}\r\n\r\n\r\n\r\n//\r\n// sRGB transfer functions\r\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\r\n//\r\nmediump vec3 sRGBToLinear(mediump vec3 c) {\r\n\t#ifdef USE_VERY_FAST_SRGB\r\n\t\treturn c * c;\r\n\t#elif defined(USE_FAST_SRGB)\r\n\t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\r\n\t#else\r\n\t\tmediump vec3 linearRGBLo = c / 12.92;\r\n\t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\r\n\t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\r\n\t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\r\n\t\treturn linearRGB;\r\n\t#endif\r\n}\r\n\r\nmediump vec4 sRGBToLinear(mediump vec4 c){\r\n    return vec4(sRGBToLinear(c.rgb), c.a);\r\n}\r\n\r\n\r\n\r\nmediump vec3 linearToSRGB(mediump vec3 c) {\r\n\t#ifdef USE_VERY_FAST_SRGB\r\n\t\treturn sqrt(c);\r\n\t#elif defined(USE_FAST_SRGB)\r\n\t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\r\n\t#else\r\n\t\tmediump vec3 sRGBLo = c * 12.92;\r\n\t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\r\n\t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\r\n\t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\r\n\t\treturn sRGB;\r\n\t#endif\r\n}\r\n\r\nmediump vec4 linearToSRGB(mediump vec4 c){\r\n    return vec4(linearToSRGB(c.rgb), c.a);\r\n}', Ii = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Colors.glsl";\r\n#include "Sampling.glsl";\r\n\r\nvarying vec2 v_Texcoord0;\r\n\r\nuniform sampler2D u_MainTex;\r\nuniform sampler2D u_BloomTex;\r\n\r\nuniform sampler2D u_AutoExposureTex;\r\nuniform sampler2D u_Bloom_DirtTex;\r\nuniform vec4 u_BloomTex_TexelSize;\r\nuniform vec4 u_Bloom_DirtTileOffset; // xy: tiling, zw: offset\r\nuniform mediump vec3 u_Bloom_Settings;// x: sampleScale, y: intensity, z: dirt intensity\r\nuniform mediump vec3 u_Bloom_Color;\r\n\r\nvoid main() {\r\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, v_Texcoord0).r;\r\n\tmediump vec4 color=vec4(0.0);\r\n\tcolor = texture2D(u_MainTex, v_Texcoord0);\r\n\t\r\n\tcolor = sRGBToLinear(color);\r\n\tcolor.rgb *= autoExposure;\r\n\t\r\n\t#if defined(BLOOM)||defined(BLOOM_LOW)\r\n\t\t#ifdef BLOOM\r\n\t\t\tmediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n\t\t#else\r\n\t\t\tmediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\r\n\t\t#endif\r\n\r\n\t\t// UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\r\n\t\t// but considering we use a cover-style scale on the dirt texture the difference\r\n\t\t// isn\'t massive so we chose to save a few ALUs here instead in case lens distortion\r\n\t\t// is active\r\n\t\tmediump vec4 dirt =vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\r\n\r\n\t\t// Additive bloom (artist friendly)\r\n\t\tbloom *= u_Bloom_Settings.y;\r\n\t\tdirt *= u_Bloom_Settings.z;\r\n\t\tmediump vec4 bloomColor=vec4(u_Bloom_Color, 1.0);\r\n\t\tcolor += bloom * bloomColor;\r\n\t\tcolor += dirt * bloom;\r\n\t#endif\r\n\t\r\n\tmediump vec4 finalColor = color;\r\n\tfinalColor = linearToSRGB(finalColor);\r\n\t//finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\r\n\tgl_FragColor = finalColor;\r\n}', xi = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_PositionTexcoord;\r\nvarying vec2 v_Texcoord0;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\r\n\tv_Texcoord0 = a_PositionTexcoord.zw;\r\n\tgl_Position = remapGLPositionZ(gl_Position);\r\n}', Ai = "// Better, temporally stable box filtering\r\n// [Jimenez14] http://goo.gl/eomGso\r\n// . . . . . . .\r\n// . A . B . C .\r\n// . . D . E . .\r\n// . F . G . H .\r\n// . . I . J . .\r\n// . K . L . M .\r\n// . . . . . . .\r\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    mediump vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\r\n    mediump vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\r\n    mediump vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\r\n    mediump vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\r\n    mediump vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\r\n    mediump vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\r\n    mediump vec4 G = texture2D(tex, uv);\r\n    mediump vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\r\n    mediump vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\r\n    mediump vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\r\n    mediump vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\r\n    mediump vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\r\n    mediump vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\r\n\r\n\tmediump vec2 scale= vec2(0.5, 0.125);\r\n    mediump vec2 div = (1.0 / 4.0) * scale;\r\n\r\n    mediump vec4 o = (D + E + I + J) * div.x;\r\n    o += (A + B + G + F) * div.y;\r\n    o += (B + C + H + G) * div.y;\r\n    o += (F + G + L + K) * div.y;\r\n    o += (G + H + M + L) * div.y;\r\n\r\n    return o;\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\r\n\r\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\r\n    s += texture2D(tex, uv + d.zy);\r\n    s += texture2D(tex, uv + d.xw);\r\n    s += texture2D(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}\r\n\r\n// 9-tap bilinear upsampler (tent filter)\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\n// . 2 . 4 . 2 .\r\n// . . . . . . .\r\n// . 1 . 2 . 1 .\r\n// . . . . . . .\r\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\r\n\r\n    mediump vec4 s =  texture2D(tex, uv - d.xy);\r\n    s += texture2D(tex, uv - d.wy) * 2.0;\r\n    s += texture2D(tex, uv - d.zy);\r\n\r\n    s += texture2D(tex, uv + d.zw) * 2.0;\r\n    s += texture2D(tex, uv) * 4.0;\r\n    s += texture2D(tex,\tuv + d.xw) * 2.0;\r\n\r\n    s += texture2D(tex, uv + d.zy);\r\n    s += texture2D(tex, uv + d.wy) * 2.0;\r\n    s += texture2D(tex, uv + d.xy);\r\n\r\n    return s * (1.0 / 16.0);\r\n}\r\n\r\n// Standard box filtering\r\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\r\n{\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\r\n\r\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\r\n    s += texture2D(tex, uv + d.zy);\r\n    s += texture2D(tex, uv + d.xw);\r\n    s += texture2D(tex, uv + d.zw);\r\n\r\n    return s * (1.0 / 4.0);\r\n}", Di = "#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\r\n\r\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\r\n\r\nmediump vec4 safeHDR(mediump vec4 c)\r\n{\r\n    return min(c, HALF_MAX);\r\n}\r\n\r\nfloat max3(float a, float b, float c)\r\n{\r\n    return max(max(a, b), c);\r\n}\r\n\r\nvec3 positivePow(vec3 base, vec3 power)\r\n{\r\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\r\n}", Mi = "uniform sampler2D u_shadowMap1;\r\nuniform sampler2D u_shadowMap2;\r\nuniform sampler2D u_shadowMap3;\r\nuniform vec2\t  u_shadowPCFoffset;\r\nuniform vec4     u_shadowPSSMDistance;\r\nvec4 packDepth(const in float depth)\r\n{\r\n\tconst vec4 bitShift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\r\n\tconst vec4 bitMask\t= vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\r\n\tvec4 res = mod(depth*bitShift*vec4(255), vec4(256))/vec4(255);\r\n\tres -= res.xxyz * bitMask;\r\n\treturn res;\r\n}\r\nfloat unpackDepth(const in vec4 rgbaDepth)\r\n{\r\n\tconst vec4 bitShift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\r\n\tfloat depth = dot(rgbaDepth, bitShift);\r\n\treturn depth;\r\n}\r\nfloat tex2DPCF( sampler2D shadowMap,vec2 texcoord,vec2 invsize,float zRef )\r\n{\r\n\tvec2 texelpos =texcoord / invsize;\r\n\tvec2 lerps = fract( texelpos );\r\n\tfloat sourcevals[4];\r\n\tsourcevals[0] = float( unpackDepth(texture2D(shadowMap,texcoord)) > zRef );\r\n\tsourcevals[1] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x,0))) > zRef );\r\n\tsourcevals[2] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(0,invsize.y))) > zRef );\r\n\tsourcevals[3] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x, invsize.y) )) > zRef );\r\n\treturn mix( mix(sourcevals[0],sourcevals[2],lerps.y),mix(sourcevals[1],sourcevals[3],lerps.y),lerps.x );\r\n}\r\nfloat getShadowPSSM3( sampler2D shadowMap1,sampler2D shadowMap2,sampler2D shadowMap3,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\r\n{\r\n\tfloat value = 1.0;\r\n\tint nPSNum = int(posViewZ>pssmDistance.x);\r\n\tnPSNum += int(posViewZ>pssmDistance.y);\r\n\tnPSNum += int(posViewZ>pssmDistance.z);\r\n\t//真SB,webgl不支持在PS中直接访问数组\r\n\tmat4 lightVP;\r\n\tif( nPSNum == 0 )\r\n\t{\r\n\t\tlightVP = lightShadowVP[1];\r\n\t}\r\n\telse if( nPSNum == 1 )\r\n\t{\r\n\t\tlightVP = lightShadowVP[2];\r\n\t}\r\n\telse if( nPSNum == 2 )\r\n\t{\r\n\t\tlightVP = lightShadowVP[3];\r\n\t}\r\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\r\n\t//为了效率，在CPU计算/2.0 + 0.5\r\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\r\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\r\n\tfloat fMyZ = vText.z - zBias;\r\n\t/*\r\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\r\n\tbool bInFrustum = all( bInFrustumVec );\r\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\r\n\tbool bFrustumTest = all( bFrustumTestVec );\r\n\tif ( bFrustumTest ) \r\n\t*/\r\n\tif( fMyZ <= 1.0 )\r\n\t{\r\n\t\tfloat zdepth=0.0;\r\n#ifdef SHADOWMAP_PCF3\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\r\n\t\t\tvalue = value/4.0;\r\n\t\t} \r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n\t\telse if( nPSNum == 2 )\r\n\t\t{\r\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\r\n\t\t\tzdepth = unpackDepth(color);\r\n\t\t\tvalue = float(fMyZ < zdepth);\r\n\t\t}\r\n#endif\r\n#ifdef SHADOWMAP_PCF2\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n\t\telse if( nPSNum == 2 )\r\n\t\t{\r\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\r\n\t\t\tzdepth = unpackDepth(color);\r\n\t\t\tvalue = float(fMyZ < zdepth);\r\n\t\t}\r\n\r\n#endif\r\n#ifdef SHADOWMAP_PCF1\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\r\n\t\t\tzdepth = unpackDepth(color);\r\n\t\t\tvalue = float(fMyZ < zdepth);\r\n\t\t}\r\n\t\telse if( nPSNum == 2 )\r\n\t\t{\r\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\r\n\t\t\tzdepth = unpackDepth(color);\r\n\t\t\tvalue = float(fMyZ < zdepth);\r\n\t\t}\r\n#endif\r\n#ifdef SHADOWMAP_PCF_NO\r\n\t\tvec4 color;\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\r\n\t\t}\r\n\t\telse if( nPSNum == 2 )\r\n\t\t{\r\n\t\t\tcolor = texture2D( shadowMap3,vText.xy );\r\n\t\t}\r\n\t\tzdepth = unpackDepth(color);\r\n\t\tvalue = float(fMyZ < zdepth);\r\n#endif\r\n\t}\r\n\treturn value;\r\n}\r\nfloat getShadowPSSM2( sampler2D shadowMap1,sampler2D shadowMap2,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\r\n{\r\n\tfloat value = 1.0;\r\n\tint nPSNum = int(posViewZ>pssmDistance.x);\r\n\tnPSNum += int(posViewZ>pssmDistance.y);\r\n\t//真SB,webgl不支持在PS中直接访问数组\r\n\tmat4 lightVP;\r\n\tif( nPSNum == 0 )\r\n\t{\r\n\t\tlightVP = lightShadowVP[1];\r\n\t}\r\n\telse if( nPSNum == 1 )\r\n\t{\r\n\t\tlightVP = lightShadowVP[2];\r\n\t}\r\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\r\n\t//为了效率，在CPU计算/2.0 + 0.5\r\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\r\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\r\n\tfloat fMyZ = vText.z - zBias;\r\n\t/*\r\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\r\n\tbool bInFrustum = all( bInFrustumVec );\r\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\r\n\tbool bFrustumTest = all( bFrustumTestVec );\r\n\tif ( bFrustumTest ) \r\n\t*/\r\n\tif( fMyZ <= 1.0 )\r\n\t{\r\n\t\tfloat zdepth=0.0;\r\n#ifdef SHADOWMAP_PCF3\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\r\n\t\t\tvalue = value/4.0;\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n#endif\r\n#ifdef SHADOWMAP_PCF2\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n#endif\r\n#ifdef SHADOWMAP_PCF1\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\r\n\t\t\tzdepth = unpackDepth(color);\r\n\t\t\tvalue = float(fMyZ < zdepth);\r\n\t\t}\r\n#endif\r\n#ifdef SHADOWMAP_PCF_NO\r\n\t\tvec4 color;\r\n\t\tif ( nPSNum == 0 )\r\n\t\t{\r\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\r\n\t\t}\r\n\t\telse if( nPSNum == 1 )\r\n\t\t{\r\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\r\n\t\t}\r\n\t\tzdepth = unpackDepth(color);\r\n\t\tvalue = float(fMyZ < zdepth);\r\n#endif\r\n\t}\r\n\treturn value;\r\n}\r\nfloat getShadowPSSM1( sampler2D shadowMap1,vec4 lightMVPPos,vec4 pssmDistance,vec2 shadowPCFOffset,float posViewZ,float zBias )\r\n{\r\n\tfloat value = 1.0;\r\n\tif( posViewZ < pssmDistance.x )\r\n\t{\r\n\t\tvec3 vText = lightMVPPos.xyz / lightMVPPos.w;\r\n\t\tfloat fMyZ = vText.z - zBias;\r\n\t\t/*\r\n\t\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\r\n\t\tbool bInFrustum = all( bInFrustumVec );\r\n\t\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\r\n\t\tbool bFrustumTest = all( bFrustumTestVec );\r\n\t\t*/\r\n\t\tif ( fMyZ <= 1.0 ) \r\n\t\t{\r\n\t\t\tfloat zdepth=0.0;\r\n#ifdef SHADOWMAP_PCF3\r\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,fMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,fMyZ );\r\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,fMyZ );\r\n\t\t\tvalue = value/4.0;\r\n#endif\r\n#ifdef SHADOWMAP_PCF2\t\t\r\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\r\n#endif\r\n#ifdef SHADOWMAP_PCF1\r\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\r\n#endif\r\n#ifdef SHADOWMAP_PCF_NO\t\t\r\n\t\t\tvec4 color = texture2D( shadowMap1,vText.xy );\r\n\t\t\tzdepth = unpackDepth(color);\r\n\t\t\tvalue = float(fMyZ < zdepth);\r\n#endif\r\n\t\t}\r\n\t}\r\n\treturn value;\r\n}", Li = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float;\r\n#else\r\nprecision mediump float;\r\n#endif\r\n\r\nvarying vec3 v_Texcoord;\r\n\r\nuniform samplerCube u_CubeTexture;\r\nuniform float u_Exposure;\r\nuniform vec4 u_TintColor;\r\n\r\n\r\nvoid main()\r\n{\t\r\n\tvec3 color=textureCube(u_CubeTexture, v_Texcoord).rgb*u_TintColor.rgb*u_Exposure*2.0;\r\n\tgl_FragColor=vec4(color,1.0);\r\n}\r\n\r\n", Ci = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nuniform mat4 u_ViewProjection;\r\nuniform float u_Rotation;\r\nvarying vec3 v_Texcoord;\r\n\r\n\r\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\r\n{\r\n\tfloat angle = degrees * 3.141593 / 180.0;\r\n\tfloat sina=sin(angle);\r\n\tfloat cosa=cos(angle);\r\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\r\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\r\n}\r\n\t\t\r\nvoid main()\r\n{\r\n\tvec4 position=rotateAroundYInDegrees(a_Position,u_Rotation);\r\n\tgl_Position = u_ViewProjection*position;\r\n\tv_Texcoord=vec3(-a_Position.x,a_Position.yz);//转换坐标系\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n', yi = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include "Lighting.glsl";\r\n\r\nconst float MIE_G = -0.990;\r\nconst float MIE_G2 = 0.9801;\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\n\r\nuniform float u_SunSize;\r\nuniform float u_SunSizeConvergence;\r\nuniform DirectionLight u_SunLight;\r\n\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Mie phase function\r\nfloat getMiePhase(float eyeCos, float eyeCos2) {\r\n\tfloat temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\r\n\ttemp = pow(temp, pow(u_SunSize,0.65) * 10.0);\r\n\ttemp = max(temp,1.0e-4); // prevent division by zero, esp. in half precision\r\n\ttemp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\r\n\treturn temp;\r\n}\r\n\r\n// Calculates the sun shape\r\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray) {\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tfloat focusedEyeCos = pow(clamp(dot(lightPos, ray),0.0,1.0), u_SunSizeConvergence);\r\n\t\treturn getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\r\n\t#else //SUN_SIMPLE\r\n\t\tvec3 delta = lightPos - ray;\r\n\t\tfloat dist = length(delta);\r\n\t\tfloat spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\r\n\t\treturn spot * spot;\r\n\t#endif\r\n}\r\n\r\nvoid main() {\r\n\t// if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\r\n\t// if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\r\n\t// if y < 0 [eyeRay.y > 0] - sky\r\n\tvec3 col = vec3(0.0, 0.0, 0.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tvec3 ray = normalize(v_Vertex);\r\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tvec3 ray = v_RayDir;\r\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\t\r\n\t#else\r\n\t\tfloat y = v_SkyGroundFactor;\r\n\t#endif\r\n\r\n\t// if we did precalculate color in vprog: just do lerp between them\r\n\tcol = mix(v_SkyColor, v_GroundColor, clamp(y,0.0,1.0));\r\n\r\n\t#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\t\tif (y < 0.0)\r\n\t\t\tcol += v_SunColor * calcSunAttenuation(-u_SunLight.direction, -ray);\r\n\t#endif\r\n\r\n\tcol = sqrt(col);//linear space convert to gamma space\r\n\tgl_FragColor=vec4(col,1.0);\r\n}\r\n\r\n', Oi = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#include \"Lighting.glsl\";\r\n\r\n#define OUTER_RADIUS 1.025\r\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\r\n#define MIE 0.0010             // Mie constant 米氏散射\r\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\r\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\r\n\r\nconst float SKY_GROUND_THRESHOLD = 0.02;\r\nconst float outerRadius = OUTER_RADIUS;\r\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\r\nconst float innerRadius = 1.0;\r\nconst float innerRadius2 = 1.0;\r\nconst float cameraHeight = 0.0001;\r\n\r\nconst float HDSundiskIntensityFactor = 15.0;\r\nconst float simpleSundiskIntensityFactor = 27.0;\r\n\r\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\r\nconst float kmESun = MIE * SUN_BRIGHTNESS;\r\nconst float km4PI = MIE * 4.0 * 3.14159265;\r\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\r\nconst float scaleDepth = 0.25;\r\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\r\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\r\n\r\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\r\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\r\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\r\n\r\nattribute vec4 a_Position;\r\n\r\nuniform mat4 u_ViewProjection;\r\nuniform vec3 u_SkyTint;\r\nuniform vec3 u_GroundTint;\r\nuniform float u_Exposure;\r\nuniform float u_AtmosphereThickness;\r\nuniform DirectionLight u_SunLight;\r\n\r\nvarying vec3 v_GroundColor;\r\nvarying vec3 v_SkyColor;\r\n\r\n#ifdef SUN_HIGH_QUALITY\r\n\tvarying vec3 v_Vertex;\r\n#elif defined(SUN_SIMPLE)\r\n\tvarying vec3 v_RayDir;\r\n#else\r\n\tvarying float v_SkyGroundFactor;\r\n#endif\r\n\r\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\r\n\tvarying vec3 v_SunColor;\r\n#endif\r\n\r\n// Calculates the Rayleigh phase function\r\nfloat getRayleighPhase(vec3 light, vec3 ray) \r\n{\r\n\tfloat eyeCos = dot(light, ray);\r\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\r\n}\r\n\r\nfloat scaleAngle(float inCos)\r\n{\r\n\tfloat x = 1.0 - inCos;\r\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\r\n}\r\n\r\n\r\nvoid main () {\r\n\tgl_Position = u_ViewProjection*a_Position;\r\n\r\n\tvec3 skyTintInGammaSpace = u_SkyTint;//支持非GAMMA空间后要调整\r\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\r\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\r\n\r\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\r\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\r\n\r\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\r\n\r\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\r\n\tvec3 eyeRay = normalize(a_Position.xyz);\r\n\r\n\tfloat far = 0.0;\r\n\tvec3 cIn, cOut;\r\n\tif (eyeRay.y >= 0.0) {// Sky\r\n\t\t// Calculate the length of the \"atmosphere\"\r\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat height = innerRadius + cameraHeight;\r\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\r\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\r\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\tvec3 frontColor = vec3(0.0);\r\n\t\t//unrolling this manually to avoid some platform for loop slow\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight.direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat lightAngle = dot(-u_SunLight.direction, samplePoint) / height;\r\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\r\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\r\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\r\n\t\tcIn = frontColor * (invWavelength * krESun);\r\n\t\tcOut = frontColor * kmESun;\r\n\t} else {// Ground\r\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\r\n\t\tvec3 pos = cameraPos + far * eyeRay;\r\n\r\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\r\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\r\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\r\n\t\tfloat lightAngle = dot(-u_SunLight.direction, pos);\r\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\r\n\t\tfloat lightScale = scaleAngle(lightAngle);\r\n\t\tfloat cameraOffset = depth*cameraScale;\r\n\t\tfloat temp = lightScale + cameraScale;\r\n\r\n\t\t// Initialize the scattering loop variables\r\n\t\tfloat sampleLength = far / samples;\r\n\t\tfloat scaledLength = sampleLength * scale;\r\n\t\tvec3 sampleRay = eyeRay * sampleLength;\r\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\r\n\r\n\t\t// Now loop through the sample rays\r\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\r\n\t\tvec3 attenuate;\r\n\r\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\r\n\t\t{\r\n\t\t\tfloat height = length(samplePoint);\r\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\r\n\t\t\tfloat scatter = depth*temp - cameraOffset;\r\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\r\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\r\n\t\t\tsamplePoint += sampleRay;\r\n\t\t}\r\n\r\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\r\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\r\n\t}\r\n\r\n\t#ifdef SUN_HIGH_QUALITY\r\n\t\tv_Vertex = -a_Position.xyz;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_RayDir = -eyeRay;\r\n\t#else\r\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\r\n\t#endif\r\n\r\n\t// if we want to calculate color in vprog:\r\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\r\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint*u_GroundTint * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\r\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight.direction, -eyeRay));\r\n\r\n\t\r\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\r\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\r\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\r\n\tfloat lightColorIntensity = clamp(length(u_SunLight.color), 0.25, 1.0);\r\n\r\n\t#ifdef SUN_HIGH_QUALITY \r\n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight.color / lightColorIntensity;\r\n\t#elif defined(SUN_SIMPLE) \r\n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight.color / lightColorIntensity;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n", Ni = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\nuniform sampler2D u_MainTexture;\r\nuniform vec4 u_MainColor;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nvoid main()\r\n{\r\n\tvec4 color = 2.0 * u_MainColor * v_Color;\r\n\t#ifdef MAINTEXTURE\r\n\t\tvec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\r\n\t\tcolor *= mainTextureColor;\r\n\t#endif\r\n\tgl_FragColor = color;\r\n}\r\n\r\n     ", Pi = '#include "Lighting.glsl";\r\n\r\nattribute vec3 a_Position;\r\nattribute vec3 a_OffsetVector;\r\nattribute vec4 a_Color;\r\nattribute float a_Texcoord0X;\r\nattribute float a_Texcoord0Y;\r\nattribute float a_BirthTime;\r\n\r\nuniform mat4 u_View;\r\nuniform mat4 u_Projection;\r\n\r\nuniform vec4 u_TilingOffset;\r\n\r\nuniform float u_CurTime;\r\nuniform float u_LifeTime;\r\nuniform vec4 u_WidthCurve[10];\r\nuniform int u_WidthCurveKeyLength;\r\n\r\nvarying vec2 v_Texcoord0;\r\nvarying vec4 v_Color;\r\n\r\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\r\n{\r\n\tfloat t2 = t * t;\r\n\tfloat t3 = t2 * t;\r\n\tfloat a = 2.0 * t3 - 3.0 * t2 + 1.0;\r\n\tfloat b = t3 - 2.0 * t2 + t;\r\n\tfloat c = t3 - t2;\r\n\tfloat d = -2.0 * t3 + 3.0 * t2;\r\n\treturn a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\r\n}\r\n\r\nfloat getCurWidth(in float normalizeTime)\r\n{\r\n\tfloat width;\r\n\tif(normalizeTime == 0.0){\r\n\t\twidth=u_WidthCurve[0].w;\r\n\t}\r\n\telse if(normalizeTime >= 1.0){\r\n\t\twidth=u_WidthCurve[u_WidthCurveKeyLength - 1].w;\r\n\t}\r\n\telse{\r\n\t\tfor(int i = 0; i < 10; i ++ )\r\n\t\t{\r\n\t\t\tif(normalizeTime == u_WidthCurve[i].x){\r\n\t\t\t\twidth=u_WidthCurve[i].w;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvec4 lastFrame = u_WidthCurve[i];\r\n\t\t\tvec4 nextFrame = u_WidthCurve[i + 1];\r\n\t\t\tif(normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\r\n\t\t\t{\r\n\t\t\t\tfloat duration = nextFrame.x - lastFrame.x;\r\n\t\t\t\tfloat t = (normalizeTime - lastFrame.x) / duration;\r\n\t\t\t\tfloat outTangent = lastFrame.z;\r\n\t\t\t\tfloat inTangent = nextFrame.y;\r\n\t\t\t\tfloat value1 = lastFrame.w;\r\n\t\t\t\tfloat value2 = nextFrame.w;\r\n\t\t\t\twidth=hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn width;\r\n}\t\r\n\r\nvoid main()\r\n{\r\n\tfloat normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\r\n\t\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\r\n\t#else\r\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, a_Texcoord0Y);\r\n\t#endif\r\n\t\r\n\tv_Color = a_Color;\r\n\t\r\n\tgl_Position = u_Projection * u_View * vec4(a_Position + a_OffsetVector * getCurWidth(normalizeTime),1.0);\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}\r\n', bi = "#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\tvarying vec4 v_Color;\r\n#endif\r\n\r\n#ifdef ALBEDOTEXTURE\r\n\tuniform sampler2D u_AlbedoTexture;\r\n\tvarying vec2 v_Texcoord0;\r\n#endif\r\n\r\nuniform vec4 u_AlbedoColor;\r\n\r\n#ifdef ALPHATEST\r\n\tuniform float u_AlphaTestValue;\r\n#endif\r\n\r\n#ifdef FOG\r\n\tuniform float u_FogStart;\r\n\tuniform float u_FogRange;\r\n\t#ifdef ADDTIVEFOG\r\n\t#else\r\n\t\tuniform vec3 u_FogColor;\r\n\t#endif\r\n#endif\r\n\r\nvoid main()\r\n{\r\n\tvec4 color =  u_AlbedoColor;\r\n\t#ifdef ALBEDOTEXTURE\r\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\r\n\t#endif\r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tcolor *= v_Color;\r\n\t#endif\r\n\t\r\n\t#ifdef ALPHATEST\r\n\t\tif(color.a < u_AlphaTestValue)\r\n\t\t\tdiscard;\r\n\t#endif\r\n\t\r\n\tgl_FragColor = color;\r\n\t\r\n\t#ifdef FOG\r\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\r\n\t\t#ifdef ADDTIVEFOG\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\r\n\t\t#else\r\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\r\n\t\t#endif\r\n\t#endif\r\n\t\r\n}\r\n\r\n", Vi = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\n\r\nattribute vec2 a_Texcoord0;\r\n\r\n#ifdef GPU_INSTANCE\r\n\tattribute mat4 a_MvpMatrix;\r\n#else\r\n\tuniform mat4 u_MvpMatrix;\r\n#endif\r\n\r\nattribute vec4 a_Color;\r\nvarying vec4 v_Color;\r\nvarying vec2 v_Texcoord0;\r\n\r\n#ifdef TILINGOFFSET\r\n\tuniform vec4 u_TilingOffset;\r\n#endif\r\n\r\n#ifdef BONE\r\n\tconst int c_MaxBoneCount = 24;\r\n\tattribute vec4 a_BoneIndices;\r\n\tattribute vec4 a_BoneWeights;\r\n\tuniform mat4 u_Bones[c_MaxBoneCount];\r\n#endif\r\n\r\nvoid main() {\r\n\tvec4 position;\r\n\t#ifdef BONE\r\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\r\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\r\n\t\tposition=skinTransform*a_Position;\r\n\t#else\r\n\t\tposition=a_Position;\r\n\t#endif\r\n\t#ifdef GPU_INSTANCE\r\n\t\tgl_Position = a_MvpMatrix * position;\r\n\t#else\r\n\t\tgl_Position = u_MvpMatrix * position;\r\n\t#endif\r\n\r\n\t#ifdef TILINGOFFSET\r\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\r\n\t#else\r\n\t\tv_Texcoord0=a_Texcoord0;\r\n\t#endif\r\n\r\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\r\n\t\tv_Color = a_Color;\r\n\t#endif\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}', wi = '#ifdef GL_FRAGMENT_PRECISION_HIGH\r\n\tprecision highp float;\r\n#else\r\n\tprecision mediump float;\r\n#endif\r\n\r\n#ifdef MAINTEXTURE\r\n\tuniform sampler2D u_MainTexture;\r\n#endif\r\n\r\n#ifdef NORMALTEXTURE\r\n\tuniform sampler2D u_NormalTexture;\r\n#endif\r\n\r\nuniform vec4 u_HorizonColor;\r\n\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec2 v_Texcoord0;\r\nvarying vec2 v_Texcoord1;\r\n\r\n#include "Lighting.glsl"\r\n\r\nvoid main()\r\n{\r\n\tvec4 bumpColor1 = texture2D(u_NormalTexture, v_Texcoord0);\r\n\tvec4 bumpColor2 = texture2D(u_NormalTexture, v_Texcoord1);\r\n\t\r\n\tvec3 normal1 = NormalSampleToWorldSpace1(bumpColor1, v_Tangent, v_Binormal, v_Normal);\r\n\tvec3 normal2 = NormalSampleToWorldSpace1(bumpColor2, v_Tangent, v_Binormal, v_Normal);\r\n\t\r\n\tvec3 normal = normalize((normal1 + normal2) * 0.5);\r\n\tvec3 viewDir = normalize(v_ViewDir);\r\n\tfloat fresnel = dot(viewDir, normal);\r\n\t\r\n\tvec4 waterColor = texture2D(u_MainTexture, vec2(fresnel, fresnel));\r\n\t\r\n\tvec4 color;\r\n\tcolor.rgb = mix(waterColor.rgb, u_HorizonColor.rgb, vec3(waterColor.a));\r\n\tcolor.a = u_HorizonColor.a;\r\n\t\r\n\tgl_FragColor = color;\r\n}\r\n\r\n', Fi = '#include "Lighting.glsl";\r\n\r\nattribute vec4 a_Position;\r\nattribute vec3 a_Normal;\r\nattribute vec4 a_Tangent0;\r\n\r\nuniform mat4 u_MvpMatrix;\r\nuniform mat4 u_WorldMat;\r\nuniform vec3 u_CameraPos;\r\nuniform float u_WaveScale;\r\nuniform vec4 u_WaveSpeed;\r\nuniform float u_Time;\r\n\r\nvarying vec3 v_Normal;\r\nvarying vec3 v_Tangent;\r\nvarying vec3 v_Binormal;\r\nvarying vec3 v_ViewDir;\r\nvarying vec2 v_Texcoord0;\r\nvarying vec2 v_Texcoord1;\r\n\r\nvoid main()\r\n{\r\n\tvec4 positionWorld = u_WorldMat * a_Position;\r\n\tvec4 position = u_MvpMatrix * a_Position;\r\n\t\r\n\tvec4 temp = vec4(positionWorld.x, positionWorld.z, positionWorld.x, positionWorld.z) * u_WaveScale + u_WaveSpeed * u_WaveScale * u_Time;\r\n\t\r\n\tv_Texcoord0 = temp.xy * vec2(0.4, 0.45);\r\n\tv_Texcoord1 = temp.wz;\r\n\t\r\n\tmat3 worldMat = mat3(u_WorldMat);\r\n\tv_Normal = worldMat * a_Normal;\r\n\tv_Tangent = worldMat * a_Tangent0.xyz;\r\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\r\n\t\r\n\tv_ViewDir = u_CameraPos - positionWorld.xyz;\r\n\tgl_Position = position;\r\n\tgl_Position=remapGLPositionZ(gl_Position);\r\n}';
    class Bi {
        constructor() {
            this.textureID = -1;
        }
    }
    class Ui extends t.Resource {
        constructor(e, t, r, i, a) {
            super(), this._stateParamsMap = [], this._uploadMark = -1, this._uploadRenderType = -1, 
            this._vs = e, this._ps = t, this._attributeMap = r, this._uniformMap = i, this._shaderPass = a, 
            this._create(), this.lock = !0;
        }
        _create() {
            var e = t.LayaGL.instance;
            for (var r in this._program = e.createProgram(), this._vshader = this._createShader(e, this._vs, e.VERTEX_SHADER), 
            this._pshader = this._createShader(e, this._ps, e.FRAGMENT_SHADER), e.attachShader(this._program, this._vshader), 
            e.attachShader(this._program, this._pshader), this._attributeMap) e.bindAttribLocation(this._program, this._attributeMap[r], r);
            if (e.linkProgram(this._program), !t.Render.isConchApp && G.debugMode && !e.getProgramParameter(this._program, e.LINK_STATUS)) throw e.getProgramInfoLog(this._program);
            var i = [], a = [], n = [], s = [], o = [];
            this._customUniformParamsMap = [];
            var l, _, h, c = e.getProgramParameter(this._program, e.ACTIVE_UNIFORMS);
            for (t.WebGLContext.useProgram(e, this._program), this._curActTexIndex = 0, _ = 0; _ < c; _++) {
                var d = e.getActiveUniform(this._program, _), u = d.name;
                (l = new Bi()).location = e.getUniformLocation(this._program, u), u.indexOf("[0]") > 0 ? (l.name = u = u.substr(0, u.length - 3), 
                l.isArray = !0) : (l.name = u, l.isArray = !1), l.type = d.type, this._addShaderUnifiormFun(l);
                var f = this._uniformMap[u];
                if (null != f) switch (l.dataOffset = G.propertyNameToID(u), f) {
                  case G.PERIOD_CUSTOM:
                    o.push(l);
                    break;

                  case G.PERIOD_MATERIAL:
                    s.push(l);
                    break;

                  case G.PERIOD_SPRITE:
                    n.push(l);
                    break;

                  case G.PERIOD_CAMERA:
                    a.push(l);
                    break;

                  case G.PERIOD_SCENE:
                    i.push(l);
                    break;

                  default:
                    throw new Error("Shader3D: period is unkonw.");
                }
            }
            for (this._sceneUniformParamsMap = t.LayaGL.instance.createCommandEncoder(4 * i.length * 5 + 4, 64, !0), 
            _ = 0, h = i.length; _ < h; _++) this._sceneUniformParamsMap.addShaderUniform(i[_]);
            for (this._cameraUniformParamsMap = t.LayaGL.instance.createCommandEncoder(4 * a.length * 5 + 4, 64, !0), 
            _ = 0, h = a.length; _ < h; _++) this._cameraUniformParamsMap.addShaderUniform(a[_]);
            for (this._spriteUniformParamsMap = t.LayaGL.instance.createCommandEncoder(4 * n.length * 5 + 4, 64, !0), 
            _ = 0, h = n.length; _ < h; _++) this._spriteUniformParamsMap.addShaderUniform(n[_]);
            for (this._materialUniformParamsMap = t.LayaGL.instance.createCommandEncoder(4 * s.length * 5 + 4, 64, !0), 
            _ = 0, h = s.length; _ < h; _++) this._materialUniformParamsMap.addShaderUniform(s[_]);
            for (this._customUniformParamsMap.length = o.length, _ = 0, h = o.length; _ < h; _++) {
                var m = o[_];
                this._customUniformParamsMap[m.dataOffset] = m;
            }
            var E = this._shaderPass._stateMap;
            for (var T in E) this._stateParamsMap[E[T]] = G.propertyNameToID(T);
        }
        _getRenderState(e, t) {
            var r = this._stateParamsMap[t];
            return null == r ? null : e[r];
        }
        _disposeResource() {
            t.LayaGL.instance.deleteShader(this._vshader), t.LayaGL.instance.deleteShader(this._pshader), 
            t.LayaGL.instance.deleteProgram(this._program), this._vshader = this._pshader = this._program = null, 
            this._setGPUMemory(0), this._curActTexIndex = 0;
        }
        _addShaderUnifiormFun(e) {
            var r = t.LayaGL.instance;
            e.caller = this;
            var i = e.isArray;
            switch (e.type) {
              case r.BOOL:
                e.fun = this._uniform1i, e.uploadedValue = new Array(1);
                break;

              case r.INT:
                e.fun = i ? this._uniform1iv : this._uniform1i, e.uploadedValue = new Array(1);
                break;

              case r.FLOAT:
                e.fun = i ? this._uniform1fv : this._uniform1f, e.uploadedValue = new Array(1);
                break;

              case r.FLOAT_VEC2:
                e.fun = i ? this._uniform_vec2v : this._uniform_vec2, e.uploadedValue = new Array(2);
                break;

              case r.FLOAT_VEC3:
                e.fun = i ? this._uniform_vec3v : this._uniform_vec3, e.uploadedValue = new Array(3);
                break;

              case r.FLOAT_VEC4:
                e.fun = i ? this._uniform_vec4v : this._uniform_vec4, e.uploadedValue = new Array(4);
                break;

              case r.FLOAT_MAT2:
                e.fun = this._uniformMatrix2fv;
                break;

              case r.FLOAT_MAT3:
                e.fun = this._uniformMatrix3fv;
                break;

              case r.FLOAT_MAT4:
                e.fun = i ? this._uniformMatrix4fv : this._uniformMatrix4f;
                break;

              case r.SAMPLER_2D:
                r.uniform1i(e.location, this._curActTexIndex), e.textureID = t.WebGLContext._glTextureIDs[this._curActTexIndex++], 
                e.fun = this._uniform_sampler2D;
                break;

              case 35679:
                r.uniform1i(e.location, this._curActTexIndex), e.textureID = t.WebGLContext._glTextureIDs[this._curActTexIndex++], 
                e.fun = this._uniform_sampler3D;
                break;

              case r.SAMPLER_CUBE:
                r.uniform1i(e.location, this._curActTexIndex), e.textureID = t.WebGLContext._glTextureIDs[this._curActTexIndex++], 
                e.fun = this._uniform_samplerCube;
                break;

              default:
                throw new Error("compile shader err!");
            }
        }
        _createShader(e, t, r) {
            var i = e.createShader(r);
            if (e.shaderSource(i, t), e.compileShader(i), G.debugMode && !e.getShaderParameter(i, e.COMPILE_STATUS)) throw e.getShaderInfoLog(i);
            return i;
        }
        _uniform1f(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r ? (t.LayaGL.instance.uniform1f(e.location, i[0] = r), 1) : 0;
        }
        _uniform1fv(e, r) {
            if (r.length < 4) {
                var i = e.uploadedValue;
                return i[0] !== r[0] || i[1] !== r[1] || i[2] !== r[2] || i[3] !== r[3] ? (t.LayaGL.instance.uniform1fv(e.location, r), 
                i[0] = r[0], i[1] = r[1], i[2] = r[2], i[3] = r[3], 1) : 0;
            }
            return t.LayaGL.instance.uniform1fv(e.location, r), 1;
        }
        _uniform_vec2(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r.x || i[1] !== r.y ? (t.LayaGL.instance.uniform2f(e.location, i[0] = r.x, i[1] = r.y), 
            1) : 0;
        }
        _uniform_vec2v(e, r) {
            if (r.length < 2) {
                var i = e.uploadedValue;
                return i[0] !== r[0] || i[1] !== r[1] || i[2] !== r[2] || i[3] !== r[3] ? (t.LayaGL.instance.uniform2fv(e.location, r), 
                i[0] = r[0], i[1] = r[1], i[2] = r[2], i[3] = r[3], 1) : 0;
            }
            return t.LayaGL.instance.uniform2fv(e.location, r), 1;
        }
        _uniform_vec3(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r.x || i[1] !== r.y || i[2] !== r.z ? (t.LayaGL.instance.uniform3f(e.location, i[0] = r.x, i[1] = r.y, i[2] = r.z), 
            1) : 0;
        }
        _uniform_vec3v(e, r) {
            return t.LayaGL.instance.uniform3fv(e.location, r), 1;
        }
        _uniform_vec4(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r.x || i[1] !== r.y || i[2] !== r.z || i[3] !== r.w ? (t.LayaGL.instance.uniform4f(e.location, i[0] = r.x, i[1] = r.y, i[2] = r.z, i[3] = r.w), 
            1) : 0;
        }
        _uniform_vec4v(e, r) {
            return t.LayaGL.instance.uniform4fv(e.location, r), 1;
        }
        _uniformMatrix2fv(e, r) {
            return t.LayaGL.instance.uniformMatrix2fv(e.location, !1, r), 1;
        }
        _uniformMatrix3fv(e, r) {
            return t.LayaGL.instance.uniformMatrix3fv(e.location, !1, r), 1;
        }
        _uniformMatrix4f(e, r) {
            var i = r.elements;
            return t.LayaGL.instance.uniformMatrix4fv(e.location, !1, i), 1;
        }
        _uniformMatrix4fv(e, r) {
            return t.LayaGL.instance.uniformMatrix4fv(e.location, !1, r), 1;
        }
        _uniform1i(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r ? (t.LayaGL.instance.uniform1i(e.location, i[0] = r), 1) : 0;
        }
        _uniform1iv(e, r) {
            return t.LayaGL.instance.uniform1iv(e.location, r), 1;
        }
        _uniform_ivec2(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r[0] || i[1] !== r[1] ? (t.LayaGL.instance.uniform2i(e.location, i[0] = r[0], i[1] = r[1]), 
            1) : 0;
        }
        _uniform_ivec2v(e, r) {
            return t.LayaGL.instance.uniform2iv(e.location, r), 1;
        }
        _uniform_vec3i(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r[0] || i[1] !== r[1] || i[2] !== r[2] ? (t.LayaGL.instance.uniform3i(e.location, i[0] = r[0], i[1] = r[1], i[2] = r[2]), 
            1) : 0;
        }
        _uniform_vec3vi(e, r) {
            return t.LayaGL.instance.uniform3iv(e.location, r), 1;
        }
        _uniform_vec4i(e, r) {
            var i = e.uploadedValue;
            return i[0] !== r[0] || i[1] !== r[1] || i[2] !== r[2] || i[3] !== r[3] ? (t.LayaGL.instance.uniform4i(e.location, i[0] = r[0], i[1] = r[1], i[2] = r[2], i[3] = r[3]), 
            1) : 0;
        }
        _uniform_vec4vi(e, r) {
            return t.LayaGL.instance.uniform4iv(e.location, r), 1;
        }
        _uniform_sampler2D(e, r) {
            var i = r._getSource() || r.defaulteTexture._getSource(), a = t.LayaGL.instance;
            return t.WebGLContext.activeTexture(a, e.textureID), t.WebGLContext.bindTexture(a, a.TEXTURE_2D, i), 
            0;
        }
        _uniform_sampler3D(e, r) {
            var i = r._getSource() || r.defaulteTexture._getSource(), a = t.LayaGL.instance;
            return t.WebGLContext.activeTexture(a, e.textureID), t.WebGLContext.bindTexture(a, WebGL2RenderingContext.TEXTURE_3D, i), 
            0;
        }
        _uniform_samplerCube(e, r) {
            var i = r._getSource() || r.defaulteTexture._getSource(), a = t.LayaGL.instance;
            return t.WebGLContext.activeTexture(a, e.textureID), t.WebGLContext.bindTexture(a, a.TEXTURE_CUBE_MAP, i), 
            0;
        }
        bind() {
            return t.WebGLContext.useProgram(t.LayaGL.instance, this._program);
        }
        uploadUniforms(e, r, i) {
            t.Stat.shaderCall += t.LayaGLRunner.uploadShaderUniforms(t.LayaGL.instance, e, r, i);
        }
        uploadRenderStateBlendDepth(e) {
            var r = t.LayaGL.instance, i = this._shaderPass.renderState, a = e.getData(), n = this._getRenderState(a, G.RENDER_STATE_DEPTH_WRITE), s = this._getRenderState(a, G.RENDER_STATE_DEPTH_TEST), o = this._getRenderState(a, G.RENDER_STATE_BLEND);
            switch (null == n && (n = i.depthWrite), null == s && (s = i.depthTest), null == o && (o = i.blend), 
            t.WebGLContext.setDepthMask(r, n), s === q.DEPTHTEST_OFF ? t.WebGLContext.setDepthTest(r, !1) : (t.WebGLContext.setDepthTest(r, !0), 
            t.WebGLContext.setDepthFunc(r, s)), o) {
              case q.BLEND_DISABLE:
                t.WebGLContext.setBlend(r, !1);
                break;

              case q.BLEND_ENABLE_ALL:
                var l = this._getRenderState(a, G.RENDER_STATE_BLEND_EQUATION), _ = this._getRenderState(a, G.RENDER_STATE_BLEND_SRC), h = this._getRenderState(a, G.RENDER_STATE_BLEND_DST);
                null == l && (l = i.blendEquation), null == _ && (_ = i.srcBlend), null == h && (h = i.dstBlend), 
                t.WebGLContext.setBlend(r, !0), t.WebGLContext.setBlendEquation(r, l), t.WebGLContext.setBlendFunc(r, _, h);
                break;

              case q.BLEND_ENABLE_SEPERATE:
                var c = this._getRenderState(a, G.RENDER_STATE_BLEND_EQUATION_RGB), d = this._getRenderState(a, G.RENDER_STATE_BLEND_EQUATION_ALPHA), u = this._getRenderState(a, G.RENDER_STATE_BLEND_SRC_RGB), f = this._getRenderState(a, G.RENDER_STATE_BLEND_DST_RGB), m = this._getRenderState(a, G.RENDER_STATE_BLEND_SRC_ALPHA), E = this._getRenderState(a, G.RENDER_STATE_BLEND_DST_ALPHA);
                null == c && (c = i.blendEquationRGB), null == d && (d = i.blendEquationAlpha), 
                null == u && (u = i.srcBlendRGB), null == f && (f = i.dstBlendRGB), null == m && (m = i.srcBlendAlpha), 
                null == E && (E = i.dstBlendAlpha), t.WebGLContext.setBlend(r, !0), t.WebGLContext.setBlendEquationSeparate(r, c, d), 
                t.WebGLContext.setBlendFuncSeperate(r, u, f, m, E);
            }
        }
        uploadRenderStateFrontFace(e, r, i) {
            var a, n = t.LayaGL.instance, s = this._shaderPass.renderState, o = e.getData(), l = this._getRenderState(o, G.RENDER_STATE_CULL);
            switch (null == l && (l = s.cull), l) {
              case q.CULL_NONE:
                t.WebGLContext.setCullFace(n, !1);
                break;

              case q.CULL_FRONT:
                t.WebGLContext.setCullFace(n, !0), a = r ? i ? n.CCW : n.CW : i ? n.CW : n.CCW, 
                t.WebGLContext.setFrontFace(n, a);
                break;

              case q.CULL_BACK:
                t.WebGLContext.setCullFace(n, !0), a = r ? i ? n.CW : n.CCW : i ? n.CCW : n.CW, 
                t.WebGLContext.setFrontFace(n, a);
            }
        }
        uploadCustomUniform(e, r) {
            t.Stat.shaderCall += t.LayaGLRunner.uploadCustomUniform(t.LayaGL.instance, this._customUniformParamsMap, e, r);
        }
        _uniformMatrix2fvForNative(e, r) {
            return t.LayaGL.instance.uniformMatrix2fvEx(e.location, !1, r), 1;
        }
        _uniformMatrix3fvForNative(e, r) {
            return t.LayaGL.instance.uniformMatrix3fvEx(e.location, !1, r), 1;
        }
        _uniformMatrix4fvForNative(e, r) {
            return t.LayaGL.instance.uniformMatrix4fvEx(e.location, !1, r), 1;
        }
    }
    class Gi extends t.ShaderCompile {
        constructor(e, t, r, i) {
            for (var a in super(t, r, null), this._cacheSharders = {}, this._cacheShaderHierarchy = 1, 
            this._renderState = new q(), this._validDefine = new w(), this._owner = e, this._stateMap = i, 
            this.defs) this._validDefine.add(G.getDefineByName(a));
        }
        get renderState() {
            return this._renderState;
        }
        _compileToTree(e, r, i, a, n) {
            var s, o, l, _, h, c, d, u, f, m, E;
            for (f = i; f < r.length; f++) if (!((l = r[f]).length < 1) && 0 !== (c = l.indexOf("//"))) {
                if (c >= 0 && (l = l.substr(0, c)), s = u || new t.ShaderNode(a), u = null, s.text = l, 
                (c = l.indexOf("#")) >= 0) {
                    for (_ = "#", E = c + 1, m = l.length; E < m; E++) {
                        var T = l.charAt(E);
                        if (" " === T || "\t" === T || "?" === T) break;
                        _ += T;
                    }
                    switch (s.name = _, _) {
                      case "#ifdef":
                      case "#ifndef":
                        if (s.setParent(e), e = s, n) for (d = l.substr(E).split(t.ShaderCompile._splitToWordExps3), 
                        E = 0; E < d.length; E++) (l = d[E]).length && (n[l] = !0);
                        continue;

                      case "#if":
                      case "#elif":
                        if (s.setParent(e), e = s, n) for (d = l.substr(E).split(t.ShaderCompile._splitToWordExps3), 
                        E = 0; E < d.length; E++) (l = d[E]).length && "defined" != l && (n[l] = !0);
                        continue;

                      case "#else":
                        o = (e = e.parent).childs[e.childs.length - 1], s.setParent(e), e = s;
                        continue;

                      case "#endif":
                        o = (e = e.parent).childs[e.childs.length - 1], s.setParent(e);
                        continue;

                      case "#include":
                        d = t.ShaderCompile.splitToWords(l, null);
                        var g = t.ShaderCompile.includes[d[1]];
                        if (!g) throw "ShaderCompile error no this include file:" + d[1];
                        if ((c = d[0].indexOf("?")) < 0) {
                            s.setParent(e), l = g.getWith("with" == d[2] ? d[3] : null), this._compileToTree(s, l.split("\n"), 0, a, n), 
                            s.text = "";
                            continue;
                        }
                        s.setCondition(d[0].substr(c + 1), t.ShaderCompile.IFDEF_YES), s.text = g.getWith("with" == d[2] ? d[3] : null);
                        break;

                      case "#import":
                        h = (d = t.ShaderCompile.splitToWords(l, null))[1], a.push({
                            node: s,
                            file: t.ShaderCompile.includes[h],
                            ofs: s.text.length
                        });
                        continue;
                    }
                } else {
                    if ((o = e.childs[e.childs.length - 1]) && !o.name) {
                        a.length > 0 && t.ShaderCompile.splitToWords(l, o), u = s, o.text += "\n" + l;
                        continue;
                    }
                    a.length > 0 && t.ShaderCompile.splitToWords(l, s);
                }
                s.setParent(e);
            }
        }
        _resizeCacheShaderMap(e, t, r) {
            var i = this._cacheShaderHierarchy - 1;
            if (t == i) {
                for (var a in e) for (var n = e[a], s = 0, o = r - i; s < o; s++) s == o - 1 ? e[0] = n : e = e[0 == s ? a : 0] = {};
                this._cacheShaderHierarchy = r;
            } else for (var a in e) this._resizeCacheShaderMap(e[a], ++t, r);
        }
        _addDebugShaderVariantCollection(e) {
            var t = G._debugShaderVariantInfo, r = this._owner, i = r._owner, a = Gi._debugDefineString;
            if (G._getNamesByDefineData(e, a), !s._config._multiLighting) {
                var n = a.indexOf("LEGACYSINGLELIGHTING");
                -1 !== n && a.splice(n, 1);
            }
            t ? t.setValue(i, i._subShaders.indexOf(r), r._passes.indexOf(this), a) : G._debugShaderVariantInfo = t = new B(i, i._subShaders.indexOf(r), r._passes.indexOf(this), a), 
            G.debugShaderVariantCollection.add(t);
        }
        withCompile(e) {
            e._intersectionDefineDatas(this._validDefine), G.debugMode && this._addDebugShaderVariantCollection(e);
            var t = this._cacheSharders, r = e._length;
            r > this._cacheShaderHierarchy && (this._resizeCacheShaderMap(t, 0, r), this._cacheShaderHierarchy = r);
            for (var i = e._mask, a = e._length - 1, n = this._cacheShaderHierarchy - 1, o = 0; o < n; o++) {
                var l = a < o ? 0 : i[o], _ = t[l];
                _ || (t[l] = _ = {}), t = _;
            }
            var h = a < n ? 0 : i[n], c = t[h];
            if (c) return c;
            var d = Gi._defineString;
            G._getNamesByDefineData(e, d);
            var u = s._config, f = u.lightClusterCount, m = {}, E = "#define MAX_LIGHT_COUNT " + u.maxLightCount + "\n";
            E += "#define MAX_LIGHT_COUNT_PER_CLUSTER " + u._maxAreaLightCountPerClusterAverage + "\n", 
            E += "#define CLUSTER_X_COUNT " + f.x + "\n", E += "#define CLUSTER_Y_COUNT " + f.y + "\n", 
            E += "#define CLUSTER_Z_COUNT " + f.z + "\n";
            o = 0;
            for (var T = d.length; o < T; o++) {
                var g = d[o];
                E += "#define " + g + "\n", m[g] = !0;
            }
            var p = this._VS.toscript(m, []), S = "";
            0 == p[0].indexOf("#version") && (S = p[0] + "\n", p.shift());
            var R = this._PS.toscript(m, []), v = "";
            if (0 == R[0].indexOf("#version") && (v = R[0] + "\n", R.shift()), c = new Ui(S + E + p.join("\n"), v + E + R.join("\n"), this._owner._attributeMap || this._owner._owner._attributeMap, this._owner._uniformMap || this._owner._owner._uniformMap, this), 
            t[h] = c, G.debugMode) {
                var I = "", x = "";
                if (!u._multiLighting) {
                    e.remove(G.SHADERDEFINE_LEGACYSINGALLIGHTING);
                    var A = d.indexOf("LEGACYSINGLELIGHTING");
                    -1 !== A && d.splice(A, 1);
                }
                for (o = 0, T = e._length; o < T; o++) x += o == T - 1 ? i[o] : i[o] + ",";
                for (o = 0, T = d.length; o < T; o++) I += o == T - 1 ? d[o] : d[o] + ",";
                console.log("%cLayaAir: Shader Compile Information---ShaderName:" + this._owner._owner._name + " SubShaderIndex:" + this._owner._owner._subShaders.indexOf(this._owner) + " PassIndex:" + this._owner._passes.indexOf(this) + " DefineMask:[" + x + "] DefineNames:[" + I + "]", "color:green");
            }
            return c;
        }
    }
    Gi._defineString = [], Gi._debugDefineString = [];
    class zi {
        constructor(e, t) {
            this._flags = {}, this._passes = [], this._attributeMap = e, this._uniformMap = t;
        }
        setFlag(e, t) {
            t ? this._flags[e] = t : delete this._flags[e];
        }
        getFlag(e) {
            return this._flags[e];
        }
        addShaderPass(e, t, r = null) {
            var i = new Gi(this, e, t, r);
            return this._passes.push(i), i;
        }
    }
    class Hi {
        constructor() {}
        static __init__() {
            G.SHADERDEFINE_LEGACYSINGALLIGHTING = G.getDefineByName("LEGACYSINGLELIGHTING"), 
            G.addInclude("Lighting.glsl", ei), G.addInclude("ShadowHelper.glsl", Mi), G.addInclude("BRDF.glsl", oi), 
            G.addInclude("PBRUtils.glsl", hi), G.addInclude("PBRStandardLighting.glsl", _i), 
            G.addInclude("PBRSpecularLighting.glsl", li), G.addInclude("Colors.glsl", vi), G.addInclude("Sampling.glsl", Ai), 
            G.addInclude("StdLib.glsl", Di);
            var e = {
                a_Position: ge.MESH_POSITION0,
                a_Color: ge.MESH_COLOR0,
                a_Normal: ge.MESH_NORMAL0,
                a_Texcoord0: ge.MESH_TEXTURECOORDINATE0,
                a_Texcoord1: ge.MESH_TEXTURECOORDINATE1,
                a_BoneWeights: ge.MESH_BLENDWEIGHT0,
                a_BoneIndices: ge.MESH_BLENDINDICES0,
                a_Tangent0: ge.MESH_TANGENT0,
                a_MvpMatrix: ge.MESH_MVPMATRIX_ROW0,
                a_WorldMat: ge.MESH_WORLDMATRIX_ROW0
            }, t = {
                u_Bones: G.PERIOD_CUSTOM,
                u_DiffuseTexture: G.PERIOD_MATERIAL,
                u_SpecularTexture: G.PERIOD_MATERIAL,
                u_NormalTexture: G.PERIOD_MATERIAL,
                u_AlphaTestValue: G.PERIOD_MATERIAL,
                u_DiffuseColor: G.PERIOD_MATERIAL,
                u_MaterialSpecular: G.PERIOD_MATERIAL,
                u_Shininess: G.PERIOD_MATERIAL,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_WorldMat: G.PERIOD_SPRITE,
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_LightmapScaleOffset: G.PERIOD_SPRITE,
                u_LightMap: G.PERIOD_SPRITE,
                u_CameraPos: G.PERIOD_CAMERA,
                u_Viewport: G.PERIOD_CAMERA,
                u_ProjectionParams: G.PERIOD_CAMERA,
                u_View: G.PERIOD_CAMERA,
                u_ReflectTexture: G.PERIOD_SCENE,
                u_ReflectIntensity: G.PERIOD_SCENE,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE,
                u_DirationLightCount: G.PERIOD_SCENE,
                u_LightBuffer: G.PERIOD_SCENE,
                u_LightClusterBuffer: G.PERIOD_SCENE,
                u_AmbientColor: G.PERIOD_SCENE,
                u_shadowMap1: G.PERIOD_SCENE,
                u_shadowMap2: G.PERIOD_SCENE,
                u_shadowMap3: G.PERIOD_SCENE,
                u_shadowPSSMDistance: G.PERIOD_SCENE,
                u_lightShadowVP: G.PERIOD_SCENE,
                u_shadowPCFoffset: G.PERIOD_SCENE,
                "u_DirectionLight.color": G.PERIOD_SCENE,
                "u_DirectionLight.direction": G.PERIOD_SCENE,
                "u_PointLight.position": G.PERIOD_SCENE,
                "u_PointLight.range": G.PERIOD_SCENE,
                "u_PointLight.color": G.PERIOD_SCENE,
                "u_SpotLight.position": G.PERIOD_SCENE,
                "u_SpotLight.direction": G.PERIOD_SCENE,
                "u_SpotLight.range": G.PERIOD_SCENE,
                "u_SpotLight.spot": G.PERIOD_SCENE,
                "u_SpotLight.color": G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("BLINNPHONG", null, null, !0), a = new zi(e, t);
            i.addSubShader(a), a.addShaderPass(ai, ii, r), e = {
                a_Position: ge.MESH_POSITION0,
                a_Color: ge.MESH_COLOR0
            }, t = {
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_Color: G.PERIOD_MATERIAL
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("LineShader"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(ri, ti, r), 
            e = {
                a_Position: ge.MESH_POSITION0,
                a_Normal: ge.MESH_NORMAL0,
                a_Tangent0: ge.MESH_TANGENT0,
                a_Texcoord0: ge.MESH_TEXTURECOORDINATE0,
                a_BoneWeights: ge.MESH_BLENDWEIGHT0,
                a_BoneIndices: ge.MESH_BLENDINDICES0,
                a_MvpMatrix: ge.MESH_MVPMATRIX_ROW0,
                a_WorldMat: ge.MESH_WORLDMATRIX_ROW0
            }, t = {
                u_Bones: G.PERIOD_CUSTOM,
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_WorldMat: G.PERIOD_SPRITE,
                u_CameraPos: G.PERIOD_CAMERA,
                u_View: G.PERIOD_CAMERA,
                u_ProjectionParams: G.PERIOD_CAMERA,
                u_Viewport: G.PERIOD_CAMERA,
                u_AlphaTestValue: G.PERIOD_MATERIAL,
                u_AlbedoColor: G.PERIOD_MATERIAL,
                u_EmissionColor: G.PERIOD_MATERIAL,
                u_AlbedoTexture: G.PERIOD_MATERIAL,
                u_NormalTexture: G.PERIOD_MATERIAL,
                u_ParallaxTexture: G.PERIOD_MATERIAL,
                u_MetallicGlossTexture: G.PERIOD_MATERIAL,
                u_OcclusionTexture: G.PERIOD_MATERIAL,
                u_EmissionTexture: G.PERIOD_MATERIAL,
                u_metallic: G.PERIOD_MATERIAL,
                u_smoothness: G.PERIOD_MATERIAL,
                u_smoothnessScale: G.PERIOD_MATERIAL,
                u_occlusionStrength: G.PERIOD_MATERIAL,
                u_normalScale: G.PERIOD_MATERIAL,
                u_parallaxScale: G.PERIOD_MATERIAL,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_ReflectTexture: G.PERIOD_SCENE,
                u_ReflectIntensity: G.PERIOD_SCENE,
                u_AmbientColor: G.PERIOD_SCENE,
                u_shadowMap1: G.PERIOD_SCENE,
                u_shadowMap2: G.PERIOD_SCENE,
                u_shadowMap3: G.PERIOD_SCENE,
                u_shadowPSSMDistance: G.PERIOD_SCENE,
                u_lightShadowVP: G.PERIOD_SCENE,
                u_shadowPCFoffset: G.PERIOD_SCENE,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE,
                u_DirationLightCount: G.PERIOD_SCENE,
                u_LightBuffer: G.PERIOD_SCENE,
                u_LightClusterBuffer: G.PERIOD_SCENE,
                "u_DirectionLight.direction": G.PERIOD_SCENE,
                "u_DirectionLight.color": G.PERIOD_SCENE,
                "u_PointLight.position": G.PERIOD_SCENE,
                "u_PointLight.range": G.PERIOD_SCENE,
                "u_PointLight.color": G.PERIOD_SCENE,
                "u_SpotLight.position": G.PERIOD_SCENE,
                "u_SpotLight.direction": G.PERIOD_SCENE,
                "u_SpotLight.range": G.PERIOD_SCENE,
                "u_SpotLight.spot": G.PERIOD_SCENE,
                "u_SpotLight.color": G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("PBRStandard", null, null, !0), a = new zi(e, t), i.addSubShader(a), 
            a.addShaderPass(fi, ui, r), e = {
                a_Position: ge.MESH_POSITION0,
                a_Normal: ge.MESH_NORMAL0,
                a_Tangent0: ge.MESH_TANGENT0,
                a_Texcoord0: ge.MESH_TEXTURECOORDINATE0,
                a_BoneWeights: ge.MESH_BLENDWEIGHT0,
                a_BoneIndices: ge.MESH_BLENDINDICES0,
                a_MvpMatrix: ge.MESH_MVPMATRIX_ROW0,
                a_WorldMat: ge.MESH_WORLDMATRIX_ROW0
            }, t = {
                u_Bones: G.PERIOD_CUSTOM,
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_WorldMat: G.PERIOD_SPRITE,
                u_CameraPos: G.PERIOD_CAMERA,
                u_View: G.PERIOD_CAMERA,
                u_ProjectionParams: G.PERIOD_CAMERA,
                u_Viewport: G.PERIOD_CAMERA,
                u_AlphaTestValue: G.PERIOD_MATERIAL,
                u_AlbedoColor: G.PERIOD_MATERIAL,
                u_SpecularColor: G.PERIOD_MATERIAL,
                u_EmissionColor: G.PERIOD_MATERIAL,
                u_AlbedoTexture: G.PERIOD_MATERIAL,
                u_NormalTexture: G.PERIOD_MATERIAL,
                u_ParallaxTexture: G.PERIOD_MATERIAL,
                u_SpecularTexture: G.PERIOD_MATERIAL,
                u_OcclusionTexture: G.PERIOD_MATERIAL,
                u_EmissionTexture: G.PERIOD_MATERIAL,
                u_smoothness: G.PERIOD_MATERIAL,
                u_smoothnessScale: G.PERIOD_MATERIAL,
                u_occlusionStrength: G.PERIOD_MATERIAL,
                u_normalScale: G.PERIOD_MATERIAL,
                u_parallaxScale: G.PERIOD_MATERIAL,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_ReflectTexture: G.PERIOD_SCENE,
                u_ReflectIntensity: G.PERIOD_SCENE,
                u_AmbientColor: G.PERIOD_SCENE,
                u_shadowMap1: G.PERIOD_SCENE,
                u_shadowMap2: G.PERIOD_SCENE,
                u_shadowMap3: G.PERIOD_SCENE,
                u_shadowPSSMDistance: G.PERIOD_SCENE,
                u_lightShadowVP: G.PERIOD_SCENE,
                u_shadowPCFoffset: G.PERIOD_SCENE,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE,
                u_DirationLightCount: G.PERIOD_SCENE,
                u_LightBuffer: G.PERIOD_SCENE,
                u_LightClusterBuffer: G.PERIOD_SCENE,
                "u_DirectionLight.direction": G.PERIOD_SCENE,
                "u_DirectionLight.color": G.PERIOD_SCENE,
                "u_PointLight.position": G.PERIOD_SCENE,
                "u_PointLight.range": G.PERIOD_SCENE,
                "u_PointLight.color": G.PERIOD_SCENE,
                "u_SpotLight.position": G.PERIOD_SCENE,
                "u_SpotLight.direction": G.PERIOD_SCENE,
                "u_SpotLight.range": G.PERIOD_SCENE,
                "u_SpotLight.spot": G.PERIOD_SCENE,
                "u_SpotLight.color": G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("PBRSpecular", null, null, !0), a = new zi(e, t), i.addSubShader(a), 
            a.addShaderPass(di, ci, r), e = {
                a_Position: ge.MESH_POSITION0,
                a_Color: ge.MESH_COLOR0,
                a_Texcoord0: ge.MESH_TEXTURECOORDINATE0,
                a_BoneWeights: ge.MESH_BLENDWEIGHT0,
                a_BoneIndices: ge.MESH_BLENDINDICES0,
                a_MvpMatrix: ge.MESH_MVPMATRIX_ROW0
            }, t = {
                u_Bones: G.PERIOD_CUSTOM,
                u_AlbedoTexture: G.PERIOD_MATERIAL,
                u_AlbedoColor: G.PERIOD_MATERIAL,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_AlphaTestValue: G.PERIOD_MATERIAL,
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("Unlit", null, null, !0), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(Vi, bi, r), 
            e = {
                a_Position: ge.MESH_POSITION0,
                a_Texcoord0: ge.MESH_TEXTURECOORDINATE0,
                a_BoneWeights: ge.MESH_BLENDWEIGHT0,
                a_BoneIndices: ge.MESH_BLENDINDICES0,
                a_MvpMatrix: ge.MESH_MVPMATRIX_ROW0
            }, t = {
                u_Bones: G.PERIOD_CUSTOM,
                u_AlbedoTexture: G.PERIOD_MATERIAL,
                u_AlbedoColor: G.PERIOD_MATERIAL,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_AlphaTestValue: G.PERIOD_MATERIAL,
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("Effect", null, null, !0), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(Kr, Qr, r), 
            e = {
                a_CornerTextureCoordinate: bt.PARTICLE_CORNERTEXTURECOORDINATE0,
                a_MeshPosition: bt.PARTICLE_POSITION0,
                a_MeshColor: bt.PARTICLE_COLOR0,
                a_MeshTextureCoordinate: bt.PARTICLE_TEXTURECOORDINATE0,
                a_ShapePositionStartLifeTime: bt.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,
                a_DirectionTime: bt.PARTICLE_DIRECTIONTIME,
                a_StartColor: bt.PARTICLE_STARTCOLOR0,
                a_EndColor: bt.PARTICLE_ENDCOLOR0,
                a_StartSize: bt.PARTICLE_STARTSIZE,
                a_StartRotation0: bt.PARTICLE_STARTROTATION,
                a_StartSpeed: bt.PARTICLE_STARTSPEED,
                a_Random0: bt.PARTICLE_RANDOM0,
                a_Random1: bt.PARTICLE_RANDOM1,
                a_SimulationWorldPostion: bt.PARTICLE_SIMULATIONWORLDPOSTION,
                a_SimulationWorldRotation: bt.PARTICLE_SIMULATIONWORLDROTATION
            }, t = {
                u_Tintcolor: G.PERIOD_MATERIAL,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_texture: G.PERIOD_MATERIAL,
                u_WorldPosition: G.PERIOD_SPRITE,
                u_WorldRotation: G.PERIOD_SPRITE,
                u_PositionScale: G.PERIOD_SPRITE,
                u_SizeScale: G.PERIOD_SPRITE,
                u_ScalingMode: G.PERIOD_SPRITE,
                u_Gravity: G.PERIOD_SPRITE,
                u_ThreeDStartRotation: G.PERIOD_SPRITE,
                u_StretchedBillboardLengthScale: G.PERIOD_SPRITE,
                u_StretchedBillboardSpeedScale: G.PERIOD_SPRITE,
                u_SimulationSpace: G.PERIOD_SPRITE,
                u_CurrentTime: G.PERIOD_SPRITE,
                u_ColorOverLifeGradientAlphas: G.PERIOD_SPRITE,
                u_ColorOverLifeGradientColors: G.PERIOD_SPRITE,
                u_MaxColorOverLifeGradientAlphas: G.PERIOD_SPRITE,
                u_MaxColorOverLifeGradientColors: G.PERIOD_SPRITE,
                u_VOLVelocityConst: G.PERIOD_SPRITE,
                u_VOLVelocityGradientX: G.PERIOD_SPRITE,
                u_VOLVelocityGradientY: G.PERIOD_SPRITE,
                u_VOLVelocityGradientZ: G.PERIOD_SPRITE,
                u_VOLVelocityConstMax: G.PERIOD_SPRITE,
                u_VOLVelocityGradientMaxX: G.PERIOD_SPRITE,
                u_VOLVelocityGradientMaxY: G.PERIOD_SPRITE,
                u_VOLVelocityGradientMaxZ: G.PERIOD_SPRITE,
                u_VOLSpaceType: G.PERIOD_SPRITE,
                u_SOLSizeGradient: G.PERIOD_SPRITE,
                u_SOLSizeGradientX: G.PERIOD_SPRITE,
                u_SOLSizeGradientY: G.PERIOD_SPRITE,
                u_SOLSizeGradientZ: G.PERIOD_SPRITE,
                u_SOLSizeGradientMax: G.PERIOD_SPRITE,
                u_SOLSizeGradientMaxX: G.PERIOD_SPRITE,
                u_SOLSizeGradientMaxY: G.PERIOD_SPRITE,
                u_SOLSizeGradientMaxZ: G.PERIOD_SPRITE,
                u_ROLAngularVelocityConst: G.PERIOD_SPRITE,
                u_ROLAngularVelocityConstSeprarate: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradient: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientX: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientY: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientZ: G.PERIOD_SPRITE,
                u_ROLAngularVelocityConstMax: G.PERIOD_SPRITE,
                u_ROLAngularVelocityConstMaxSeprarate: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientMax: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientMaxX: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientMaxY: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientMaxZ: G.PERIOD_SPRITE,
                u_ROLAngularVelocityGradientMaxW: G.PERIOD_SPRITE,
                u_TSACycles: G.PERIOD_SPRITE,
                u_TSASubUVLength: G.PERIOD_SPRITE,
                u_TSAGradientUVs: G.PERIOD_SPRITE,
                u_TSAMaxGradientUVs: G.PERIOD_SPRITE,
                u_CameraPos: G.PERIOD_CAMERA,
                u_CameraDirection: G.PERIOD_CAMERA,
                u_CameraUp: G.PERIOD_CAMERA,
                u_View: G.PERIOD_CAMERA,
                u_Projection: G.PERIOD_CAMERA,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("PARTICLESHURIKEN"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(si, ni, r), 
            e = {
                a_Position: ge.MESH_POSITION0
            }, t = {
                u_TintColor: G.PERIOD_MATERIAL,
                u_Exposure: G.PERIOD_MATERIAL,
                u_Rotation: G.PERIOD_MATERIAL,
                u_CubeTexture: G.PERIOD_MATERIAL,
                u_ViewProjection: G.PERIOD_CAMERA
            }, i = G.add("SkyBox"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(Ci, Li), 
            e = {
                a_Position: ge.MESH_POSITION0
            }, t = {
                u_SunSize: G.PERIOD_MATERIAL,
                u_SunSizeConvergence: G.PERIOD_MATERIAL,
                u_AtmosphereThickness: G.PERIOD_MATERIAL,
                u_SkyTint: G.PERIOD_MATERIAL,
                u_GroundTint: G.PERIOD_MATERIAL,
                u_Exposure: G.PERIOD_MATERIAL,
                u_ViewProjection: G.PERIOD_CAMERA,
                "u_SunLight.direction": G.PERIOD_SCENE,
                "u_SunLight.color": G.PERIOD_SCENE
            }, i = G.add("SkyBoxProcedural"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(Oi, yi), 
            e = {
                a_Position: ge.MESH_POSITION0,
                a_Normal: ge.MESH_NORMAL0,
                a_Texcoord0: ge.MESH_TEXTURECOORDINATE0
            }, t = {
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_WorldMat: G.PERIOD_SPRITE,
                u_CameraPos: G.PERIOD_CAMERA,
                u_Viewport: G.PERIOD_CAMERA,
                u_ProjectionParams: G.PERIOD_CAMERA,
                u_View: G.PERIOD_CAMERA,
                u_LightmapScaleOffset: G.PERIOD_SPRITE,
                u_LightMap: G.PERIOD_SPRITE,
                u_SplatAlphaTexture: G.PERIOD_MATERIAL,
                u_DiffuseTexture1: G.PERIOD_MATERIAL,
                u_DiffuseTexture2: G.PERIOD_MATERIAL,
                u_DiffuseTexture3: G.PERIOD_MATERIAL,
                u_DiffuseTexture4: G.PERIOD_MATERIAL,
                u_DiffuseTexture5: G.PERIOD_MATERIAL,
                u_DiffuseScaleOffset1: G.PERIOD_MATERIAL,
                u_DiffuseScaleOffset2: G.PERIOD_MATERIAL,
                u_DiffuseScaleOffset3: G.PERIOD_MATERIAL,
                u_DiffuseScaleOffset4: G.PERIOD_MATERIAL,
                u_DiffuseScaleOffset5: G.PERIOD_MATERIAL,
                u_FogStart: G.PERIOD_SCENE,
                u_FogRange: G.PERIOD_SCENE,
                u_FogColor: G.PERIOD_SCENE,
                u_DirationLightCount: G.PERIOD_SCENE,
                u_LightBuffer: G.PERIOD_SCENE,
                u_LightClusterBuffer: G.PERIOD_SCENE,
                u_AmbientColor: G.PERIOD_SCENE,
                u_shadowMap1: G.PERIOD_SCENE,
                u_shadowMap2: G.PERIOD_SCENE,
                u_shadowMap3: G.PERIOD_SCENE,
                u_shadowPSSMDistance: G.PERIOD_SCENE,
                u_lightShadowVP: G.PERIOD_SCENE,
                u_shadowPCFoffset: G.PERIOD_SCENE,
                "u_DirectionLight.color": G.PERIOD_SCENE,
                "u_DirectionLight.direction": G.PERIOD_SCENE,
                "u_PointLight.position": G.PERIOD_SCENE,
                "u_PointLight.range": G.PERIOD_SCENE,
                "u_PointLight.color": G.PERIOD_SCENE,
                "u_SpotLight.position": G.PERIOD_SCENE,
                "u_SpotLight.direction": G.PERIOD_SCENE,
                "u_SpotLight.range": G.PERIOD_SCENE,
                "u_SpotLight.spot": G.PERIOD_SCENE,
                "u_SpotLight.color": G.PERIOD_SCENE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("ExtendTerrain"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass($r, Jr, r), 
            e = {
                a_Position: Cr.TRAIL_POSITION0,
                a_OffsetVector: Cr.TRAIL_OFFSETVECTOR,
                a_Texcoord0X: Cr.TRAIL_TEXTURECOORDINATE0X,
                a_Texcoord0Y: Cr.TRAIL_TEXTURECOORDINATE0Y,
                a_BirthTime: Cr.TRAIL_TIME0,
                a_Color: Cr.TRAIL_COLOR
            }, t = {
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_View: G.PERIOD_CAMERA,
                u_Projection: G.PERIOD_CAMERA,
                u_TilingOffset: G.PERIOD_MATERIAL,
                u_MainTexture: G.PERIOD_MATERIAL,
                u_MainColor: G.PERIOD_MATERIAL,
                u_CurTime: G.PERIOD_SPRITE,
                u_LifeTime: G.PERIOD_SPRITE,
                u_WidthCurve: G.PERIOD_SPRITE,
                u_WidthCurveKeyLength: G.PERIOD_SPRITE,
                u_GradientColorkey: G.PERIOD_SPRITE,
                u_GradientAlphakey: G.PERIOD_SPRITE
            }, r = {
                s_Cull: G.RENDER_STATE_CULL,
                s_Blend: G.RENDER_STATE_BLEND,
                s_BlendSrc: G.RENDER_STATE_BLEND_SRC,
                s_BlendDst: G.RENDER_STATE_BLEND_DST,
                s_DepthTest: G.RENDER_STATE_DEPTH_TEST,
                s_DepthWrite: G.RENDER_STATE_DEPTH_WRITE
            }, i = G.add("Trail"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(Pi, Ni, r), 
            e = {
                a_Position: ge.MESH_POSITION0,
                a_Normal: ge.MESH_NORMAL0,
                a_Tangent0: ge.MESH_TANGENT0
            }, t = {
                u_MvpMatrix: G.PERIOD_SPRITE,
                u_WorldMat: G.PERIOD_SPRITE,
                u_CameraPos: G.PERIOD_CAMERA,
                u_Time: G.PERIOD_SCENE,
                u_MainTexture: G.PERIOD_MATERIAL,
                u_NormalTexture: G.PERIOD_MATERIAL,
                u_HorizonColor: G.PERIOD_MATERIAL,
                u_WaveScale: G.PERIOD_MATERIAL,
                u_WaveSpeed: G.PERIOD_MATERIAL
            }, i = G.add("WaterPrimary"), a = new zi(e, t), i.addSubShader(a), a.addShaderPass(Fi, wi), 
            e = {
                a_PositionTexcoord: ge.MESH_POSITION0
            }, t = {
                u_MainTex: G.PERIOD_MATERIAL,
                u_OffsetScale: G.PERIOD_MATERIAL
            }, i = G.add("BlitScreen"), a = new zi(e, t), i.addSubShader(a);
            var n = a.addShaderPass(qr, jr), s = n.renderState;
            s.depthTest = q.DEPTHTEST_ALWAYS, s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, 
            e = {
                a_PositionTexcoord: ge.MESH_POSITION0
            }, t = {
                u_MainTex: G.PERIOD_MATERIAL,
                u_BloomTex: G.PERIOD_MATERIAL,
                u_AutoExposureTex: G.PERIOD_MATERIAL,
                u_MainTex_TexelSize: G.PERIOD_MATERIAL,
                u_SampleScale: G.PERIOD_MATERIAL,
                u_Threshold: G.PERIOD_MATERIAL,
                u_Params: G.PERIOD_MATERIAL
            }, i = G.add("PostProcessBloom"), a = new zi(e, t), i.addSubShader(a), (s = (n = a.addShaderPass(mi, gi)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, a = new zi(e, t), 
            i.addSubShader(a), (s = (n = a.addShaderPass(mi, pi)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, a = new zi(e, t), 
            i.addSubShader(a), (s = (n = a.addShaderPass(mi, Ei)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, a = new zi(e, t), 
            i.addSubShader(a), (s = (n = a.addShaderPass(mi, Ti)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, a = new zi(e, t), 
            i.addSubShader(a), (s = (n = a.addShaderPass(mi, Ri)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, a = new zi(e, t), 
            i.addSubShader(a), (s = (n = a.addShaderPass(mi, Si)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE, e = {
                a_PositionTexcoord: ge.MESH_POSITION0
            }, t = {
                u_MainTex: G.PERIOD_MATERIAL,
                u_BloomTex: G.PERIOD_MATERIAL,
                u_AutoExposureTex: G.PERIOD_MATERIAL,
                u_Bloom_DirtTileOffset: G.PERIOD_MATERIAL,
                u_Bloom_DirtTex: G.PERIOD_MATERIAL,
                u_BloomTex_TexelSize: G.PERIOD_MATERIAL,
                u_Bloom_Settings: G.PERIOD_MATERIAL,
                u_Bloom_Color: G.PERIOD_MATERIAL
            }, i = G.add("PostProcessComposite"), a = new zi(e, t), i.addSubShader(a), (s = (n = a.addShaderPass(xi, Ii)).renderState).depthTest = q.DEPTHTEST_ALWAYS, 
            s.depthWrite = !1, s.cull = q.CULL_NONE, s.blend = q.BLEND_DISABLE;
        }
    }
    class Wi {
        constructor() {
            var e;
            for (this._spiltDistance = [], this._currentPSSM = -1, this._shadowMapCount = 3, 
            this._maxDistance = 200, this._ratioOfDistance = 1 / this._shadowMapCount, this._globalParallelLightDir = new n(0, -1, 0), 
            this._statesDirty = !0, this._shadowMapTextureSize = 1024, this._scene = null, this._boundingSphere = new Array(Wi.MAX_PSSM_COUNT + 1), 
            this._boundingBox = new Array(Wi.MAX_PSSM_COUNT + 1), this._frustumPos = new Array(4 * (Wi.MAX_PSSM_COUNT + 1)), 
            this._uniformDistance = new Array(Wi.MAX_PSSM_COUNT + 1), this._logDistance = new Array(Wi.MAX_PSSM_COUNT + 1), 
            this._dimension = new Array(Wi.MAX_PSSM_COUNT + 1), this._PCFType = 0, this._tempLookAt3 = new n(), 
            this._tempLookAt4 = new a(), this._tempValue = new a(), this._tempPos = new n(), 
            this._tempLightUp = new n(), this._tempMin = new a(), this._tempMax = new a(), this._tempMatrix44 = new L(), 
            this._splitFrustumCulling = new De(L.DEFAULT), this._tempScaleMatrix44 = new L(), 
            this._shadowPCFOffset = new i(1 / 1024, 1 / 1024), this._shaderValueDistance = new a(), 
            this._shaderValueLightVP = null, this.cameras = [], this._shaderValueVPs = [], e = 0; e < this._spiltDistance.length; e++) this._spiltDistance[e] = 0;
            for (e = 0; e < this._dimension.length; e++) this._dimension[e] = new i();
            for (e = 0; e < this._frustumPos.length; e++) this._frustumPos[e] = new n();
            for (e = 0; e < this._boundingBox.length; e++) this._boundingBox[e] = new $e(new n(), new n());
            for (e = 0; e < this._boundingSphere.length; e++) this._boundingSphere[e] = new Ft(new n(), 0);
            L.createScaling(new n(.5, .5, 1), this._tempScaleMatrix44), this._tempScaleMatrix44.elements[12] = .5, 
            this._tempScaleMatrix44.elements[13] = .5;
        }
        setInfo(e, t, r, i, a, n) {
            a > Wi.MAX_PSSM_COUNT && (this._shadowMapCount = Wi.MAX_PSSM_COUNT), this._scene = e, 
            this._maxDistance = t, this.shadowMapCount = a, this._globalParallelLightDir = r, 
            this._ratioOfDistance = 1 / this._shadowMapCount;
            for (var s = 0; s < this._spiltDistance.length; s++) this._spiltDistance[s] = 0;
            this._shadowMapTextureSize = i, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize, 
            this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this.setPCFType(n), this._statesDirty = !0;
        }
        setPCFType(e) {
            this._PCFType = e;
            var t = this._scene._shaderValues;
            switch (this._PCFType) {
              case 0:
                t.addDefine(j.SHADERDEFINE_SHADOW_PCF_NO), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF1), 
                t.removeDefine(j.SHADERDEFINE_SHADOW_PCF2), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 1:
                t.addDefine(j.SHADERDEFINE_SHADOW_PCF1), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF_NO), 
                t.removeDefine(j.SHADERDEFINE_SHADOW_PCF2), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 2:
                t.addDefine(j.SHADERDEFINE_SHADOW_PCF2), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF_NO), 
                t.removeDefine(j.SHADERDEFINE_SHADOW_PCF1), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 3:
                t.addDefine(j.SHADERDEFINE_SHADOW_PCF3), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF_NO), 
                t.removeDefine(j.SHADERDEFINE_SHADOW_PCF1), t.removeDefine(j.SHADERDEFINE_SHADOW_PCF2);
            }
        }
        getPCFType() {
            return this._PCFType;
        }
        setFarDistance(e) {
            this._maxDistance != e && (this._maxDistance = e, this._statesDirty = !0);
        }
        getFarDistance() {
            return this._maxDistance;
        }
        set shadowMapCount(e) {
            if (e = (e = e > 0 ? e : 1) <= Wi.MAX_PSSM_COUNT ? e : Wi.MAX_PSSM_COUNT, this._shadowMapCount != e) {
                this._shadowMapCount = e, this._ratioOfDistance = 1 / this._shadowMapCount, this._statesDirty = !0, 
                this._shaderValueLightVP = new Float32Array(16 * e), this._shaderValueVPs.length = e;
                for (var t = 0; t < e; t++) this._shaderValueVPs[t] = new Float32Array(this._shaderValueLightVP.buffer, 64 * t);
            }
        }
        get shadowMapCount() {
            return this._shadowMapCount;
        }
        _beginSampler(e, t) {
            if (e < 0 || e > this._shadowMapCount) throw new Error("ParallelSplitShadowMap: beginSample invalid index");
            this._currentPSSM = e, this._update(t);
        }
        endSampler(e) {
            this._currentPSSM = -1;
        }
        _calcAllLightCameraInfo(e) {
            if (1 === this._shadowMapCount) this._beginSampler(0, e), this.endSampler(e); else for (var t = 0, r = this._shadowMapCount + 1; t < r; t++) this._beginSampler(t, e), 
            this.endSampler(e);
        }
        _recalculate(e, t, r) {
            this._calcSplitDistance(e), this._calcBoundingBox(t, r), this._rebuildRenderInfo();
        }
        _update(e) {
            var t = e.nearPlane, r = e.fieldOfView, i = e.aspectRatio;
            (this._statesDirty || this.lastNearPlane !== t || this.lastFieldOfView !== r || this.lastAspectRatio !== i) && (this._recalculate(t, r, i), 
            this._uploadShaderValue(), this._statesDirty = !1, this.lastNearPlane = t, this.lastFieldOfView = r, 
            this.lastAspectRatio = i), this._calcLightViewProject(e);
        }
        _uploadShaderValue() {
            var e = this._scene._shaderValues;
            switch (this._shadowMapCount) {
              case 1:
                e.addDefine(j.SHADERDEFINE_SHADOW_PSSM1), e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM2), 
                e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM3);
                break;

              case 2:
                e.addDefine(j.SHADERDEFINE_SHADOW_PSSM2), e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM1), 
                e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM3);
                break;

              case 3:
                e.addDefine(j.SHADERDEFINE_SHADOW_PSSM3), e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM1), 
                e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM2);
            }
            switch (e.setVector(o.Scene3D.SHADOWDISTANCE, this._shaderValueDistance), e.setBuffer(o.Scene3D.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP), 
            e.setVector2(o.Scene3D.SHADOWMAPPCFOFFSET, this._shadowPCFOffset), this._shadowMapCount) {
              case 3:
                e.setTexture(o.Scene3D.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), e.setTexture(o.Scene3D.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget), 
                e.setTexture(o.Scene3D.SHADOWMAPTEXTURE3, this.cameras[3].renderTarget);
                break;

              case 2:
                e.setTexture(o.Scene3D.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), e.setTexture(o.Scene3D.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget);
                break;

              case 1:
                e.setTexture(o.Scene3D.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget);
            }
        }
        _calcSplitDistance(e) {
            var t, r = this._maxDistance, i = 1 / this._shadowMapCount;
            for (t = 0; t <= this._shadowMapCount; t++) this._uniformDistance[t] = e + (r - e) * t * i;
            var a = r / e;
            for (t = 0; t <= this._shadowMapCount; t++) {
                var n = Math.pow(a, t * i);
                this._logDistance[t] = e * n;
            }
            for (t = 0; t <= this._shadowMapCount; t++) this._spiltDistance[t] = this._uniformDistance[t] * this._ratioOfDistance + this._logDistance[t] * (1 - this._ratioOfDistance);
            this._shaderValueDistance.x = null != this._spiltDistance[1] && this._spiltDistance[1], 
            this._shaderValueDistance.y = null != this._spiltDistance[2] && this._spiltDistance[2], 
            this._shaderValueDistance.z = null != this._spiltDistance[3] && this._spiltDistance[3], 
            this._shaderValueDistance.w = null != this._spiltDistance[4] && this._spiltDistance[4];
        }
        _calcBoundingBox(e, t) {
            var r, i, a, n, s, o, l, _, h = 3.1415926 * e / 180, c = Math.tan(h / 2);
            for (n = 0; n <= this._shadowMapCount; n++) {
                i = (r = (a = this._spiltDistance[n]) * c) * t;
                var d = this._frustumPos[4 * n + 0];
                d.x = -i, d.y = -r, d.z = -a, (d = this._frustumPos[4 * n + 1]).x = i, d.y = -r, 
                d.z = -a, (d = this._frustumPos[4 * n + 2]).x = -i, d.y = r, d.z = -a, (d = this._frustumPos[4 * n + 3]).x = i, 
                d.y = r, d.z = -a, (d = this._dimension[n]).x = i, d.y = r;
            }
            for (n = 1; n <= this._shadowMapCount; n++) s = this._dimension[n], (o = this._boundingBox[n].min).x = -s.x, 
            o.y = -s.y, o.z = -this._spiltDistance[n], (l = this._boundingBox[n].max).x = s.x, 
            l.y = s.y, l.z = -this._spiltDistance[n - 1], (_ = this._boundingSphere[n].center).x = .5 * (o.x + l.x), 
            _.y = .5 * (o.y + l.y), _.z = .5 * (o.z + l.z), this._boundingSphere[n].radius = .5 * Math.sqrt(Math.pow(l.x - o.x, 2) + Math.pow(l.y - o.y, 2) + Math.pow(l.z - o.z, 2));
            o = this._boundingBox[0].min, s = this._dimension[this._shadowMapCount], o.x = -s.x, 
            o.y = -s.y, o.z = -this._spiltDistance[this._shadowMapCount], (l = this._boundingBox[0].max).x = s.x, 
            l.y = s.y, l.z = -this._spiltDistance[0], (_ = this._boundingSphere[0].center).x = .5 * (o.x + l.x), 
            _.y = .5 * (o.y + l.y), _.z = .5 * (o.z + l.z), this._boundingSphere[0].radius = .5 * Math.sqrt(Math.pow(l.x - o.x, 2) + Math.pow(l.y - o.y, 2) + Math.pow(l.z - o.z, 2));
        }
        calcSplitFrustum(e) {
            this._currentPSSM > 0 ? L.createPerspective(3.1416 * e.fieldOfView / 180, e.aspectRatio, this._spiltDistance[this._currentPSSM - 1], this._spiltDistance[this._currentPSSM], this._tempMatrix44) : L.createPerspective(3.1416 * e.fieldOfView / 180, e.aspectRatio, this._spiltDistance[0], this._spiltDistance[this._shadowMapCount], this._tempMatrix44), 
            L.multiply(this._tempMatrix44, e.viewMatrix, this._tempMatrix44), this._splitFrustumCulling.matrix = this._tempMatrix44;
        }
        _rebuildRenderInfo() {
            var e, r = this._shadowMapCount + 1;
            for (this.cameras.length = r, e = 0; e < r; e++) {
                if (!this.cameras[e]) {
                    var i = new Ye();
                    i.name = "lightCamera" + e, i.clearColor = new a(1, 1, 1, 1), this.cameras[e] = i;
                }
                var n = this.cameras[e].renderTarget;
                null != n && n.width == this._shadowMapTextureSize && n.height == this._shadowMapTextureSize || (n && n.destroy(), 
                (n = new V(this._shadowMapTextureSize, this._shadowMapTextureSize, t.RenderTextureFormat.R8G8B8A8, t.RenderTextureDepthFormat.DEPTH_16)).filterMode = t.BaseTexture.FILTERMODE_POINT, 
                this.cameras[e].renderTarget = n);
            }
        }
        _calcLightViewProject(e) {
            var t = this._boundingSphere[this._currentPSSM], r = e.transform.worldMatrix;
            t.radius;
            t.center.cloneTo(this._tempLookAt3), n.transformV3ToV4(this._tempLookAt3, r, this._tempLookAt4);
            var i = this._tempLookAt3, s = this._tempLookAt4;
            i.x = s.x, i.y = s.y, i.z = s.z;
            var l = this._tempLightUp;
            e.transform.worldMatrix.getForward(Wi._tempVector30);
            var _ = Wi._tempVector30;
            l.x = _.x, l.y = 1, l.z = _.z, n.normalize(this._tempLightUp, this._tempLightUp), 
            n.scale(this._globalParallelLightDir, 4 * t.radius, this._tempPos), n.subtract(this._tempLookAt3, this._tempPos, this._tempPos);
            var h = this.cameras[this._currentPSSM];
            h.transform.position = this._tempPos, h.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1);
            var c = this._tempMax, d = this._tempMin;
            c.x = c.y = c.z = -1e5, c.w = 1, d.x = d.y = d.z = 1e5, d.w = 1, L.multiply(h.viewMatrix, r, this._tempMatrix44);
            var u = this._tempValue, f = [];
            f.length = 8, this._boundingBox[this._currentPSSM].getCorners(f);
            for (var m = 0; m < 8; m++) {
                var E = f[m];
                u.x = E.x, u.y = E.y, u.z = E.z, u.w = 1, a.transformByM4x4(this._tempValue, this._tempMatrix44, this._tempValue), 
                d.x = u.x < d.x ? u.x : d.x, d.y = u.y < d.y ? u.y : d.y, d.z = u.z < d.z ? u.z : d.z, 
                c.x = u.x > c.x ? u.x : c.x, c.y = u.y > c.y ? u.y : c.y, c.z = u.z > c.z ? u.z : c.z;
            }
            a.add(this._tempMax, this._tempMin, this._tempValue), u.x *= .5, u.y *= .5, u.z *= .5, 
            u.w = 1, a.transformByM4x4(this._tempValue, h.transform.worldMatrix, this._tempValue);
            var T = Math.abs(-this._tempMax.z), g = T > this._maxDistance ? T : this._maxDistance;
            n.scale(this._globalParallelLightDir, g, this._tempPos);
            var p = this._tempPos;
            p.x = u.x - p.x, p.y = u.y - p.y, p.z = u.z - p.z, h.transform.position = this._tempPos, 
            h.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1), L.createOrthoOffCenter(d.x, c.x, d.y, c.y, 1, g + .5 * (c.z - d.z), h.projectionMatrix);
            var S = h.projectionViewMatrix;
            Wi.multiplyMatrixOutFloat32Array(this._tempScaleMatrix44, S, this._shaderValueVPs[this._currentPSSM]), 
            this._scene._shaderValues.setBuffer(o.Scene3D.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP);
        }
        static multiplyMatrixOutFloat32Array(e, t, r) {
            var i, a, n, s, o, l, _;
            for (a = e.elements, n = t.elements, i = 0; i < 4; i++) s = a[i], o = a[i + 4], 
            l = a[i + 8], _ = a[i + 12], r[i] = s * n[0] + o * n[1] + l * n[2] + _ * n[3], r[i + 4] = s * n[4] + o * n[5] + l * n[6] + _ * n[7], 
            r[i + 8] = s * n[8] + o * n[9] + l * n[10] + _ * n[11], r[i + 12] = s * n[12] + o * n[13] + l * n[14] + _ * n[15];
        }
        setShadowMapTextureSize(e) {
            e !== this._shadowMapTextureSize && (this._shadowMapTextureSize = e, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize, 
            this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this._statesDirty = !0);
        }
        disposeAllRenderTarget() {
            for (var e = 0, t = this._shadowMapCount + 1; e < t; e++) this.cameras[e].renderTarget && (this.cameras[e].renderTarget.destroy(), 
            this.cameras[e].renderTarget = null);
        }
    }
    Wi.MAX_PSSM_COUNT = 3, Wi._tempVector30 = new n();
    class ki extends le {
        constructor() {
            super(), this._isAlternate = !1, this._intensity = 1, this._intensityColor = new n(), 
            this.color = new n(1, 1, 1), this._shadow = !1, this._shadowFarPlane = 8, this._shadowMapSize = 512, 
            this._shadowMapCount = 1, this._shadowMapPCFType = 0, this._lightmapBakedType = ki.LIGHTMAPBAKEDTYPE_REALTIME;
        }
        get intensity() {
            return this._intensity;
        }
        set intensity(e) {
            this._intensity = e;
        }
        get shadow() {
            return this._shadow;
        }
        set shadow(e) {
            throw new Error("LightSprite: must override it.");
        }
        get shadowDistance() {
            return this._shadowFarPlane;
        }
        set shadowDistance(e) {
            this._shadowFarPlane = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setFarDistance(e);
        }
        get shadowResolution() {
            return this._shadowMapSize;
        }
        set shadowResolution(e) {
            this._shadowMapSize = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setShadowMapTextureSize(e);
        }
        get shadowPSSMCount() {
            return this._shadowMapCount;
        }
        set shadowPSSMCount(e) {
            this._shadowMapCount = e, this._parallelSplitShadowMap && (this._parallelSplitShadowMap.shadowMapCount = e);
        }
        get shadowPCFType() {
            return this._shadowMapPCFType;
        }
        set shadowPCFType(e) {
            this._shadowMapPCFType = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setPCFType(e);
        }
        get lightmapBakedType() {
            return this._lightmapBakedType;
        }
        set lightmapBakedType(e) {
            this._lightmapBakedType !== e && (this._lightmapBakedType = e, this.activeInHierarchy && (e !== ki.LIGHTMAPBAKEDTYPE_BAKED ? this._addToScene() : this._removeFromScene()));
        }
        _parse(e, t) {
            super._parse(e, t);
            var r = e.color;
            this.color.fromArray(r), this.intensity = e.intensity, this.lightmapBakedType = e.lightmapBakedType;
        }
        _addToScene() {
            var e = this._scene, t = s._config.maxLightCount;
            e._lightCount < t ? (e._lightCount++, this._addToLightQueue(), this._isAlternate = !1) : (e._alternateLights.add(this), 
            this._isAlternate = !0, console.warn("LightSprite:light count has large than maxLightCount,the latest added light will be ignore."));
        }
        _removeFromScene() {
            var e = this._scene;
            if (this._isAlternate) e._alternateLights.remove(this); else if (e._lightCount--, 
            this._removeFromLightQueue(), e._alternateLights._length > 0) {
                var t = e._alternateLights.shift();
                t._addToLightQueue(), t._isAlternate = !1, e._lightCount++;
            }
        }
        _addToLightQueue() {}
        _removeFromLightQueue() {}
        _onActive() {
            super._onActive(), this.lightmapBakedType !== ki.LIGHTMAPBAKEDTYPE_BAKED && this._addToScene();
        }
        _onInActive() {
            super._onInActive(), this.lightmapBakedType !== ki.LIGHTMAPBAKEDTYPE_BAKED && this._removeFromScene();
        }
        _create() {
            return new ki();
        }
        get diffuseColor() {
            return console.log("LightSprite: discard property,please use color property instead."), 
            this.color;
        }
        set diffuseColor(e) {
            console.log("LightSprite: discard property,please use color property instead."), 
            this.color = e;
        }
    }
    ki.LIGHTMAPBAKEDTYPE_REALTIME = 0, ki.LIGHTMAPBAKEDTYPE_MIXED = 1, ki.LIGHTMAPBAKEDTYPE_BAKED = 2;
    class Xi extends ki {
        set shadow(e) {
            this._shadow !== e && (this._shadow = e, this.scene && this._initShadow());
        }
        constructor() {
            super(), this._direction = new n();
        }
        _initShadow() {
            if (this._shadow) this._parallelSplitShadowMap = new Wi(), this.scene.parallelSplitShadowMaps.push(this._parallelSplitShadowMap), 
            this.transform.worldMatrix.getForward(this._direction), n.normalize(this._direction, this._direction), 
            this._parallelSplitShadowMap.setInfo(this.scene, this._shadowFarPlane, this._direction, this._shadowMapSize, this._shadowMapCount, this._shadowMapPCFType); else {
                var e = this._scene._shaderValues, t = this.scene.parallelSplitShadowMaps;
                t.splice(t.indexOf(this._parallelSplitShadowMap), 1), this._parallelSplitShadowMap.disposeAllRenderTarget(), 
                this._parallelSplitShadowMap = null, e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM1), 
                e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM2), e.removeDefine(j.SHADERDEFINE_SHADOW_PSSM3);
            }
        }
        _addToLightQueue() {
            this._scene._directionLights.add(this);
        }
        _removeFromLightQueue() {
            this._scene._directionLights.remove(this);
        }
    }
    class Yi extends ki {
        get range() {
            return this._range;
        }
        set range(e) {
            this._range = e;
        }
        constructor() {
            super(), this._range = 6;
        }
        _addToLightQueue() {
            this._scene._pointLights.add(this);
        }
        _removeFromLightQueue() {
            this._scene._pointLights.remove(this);
        }
        _parse(e, t) {
            super._parse(e, t), this.range = e.range;
        }
    }
    class Zi extends ki {
        get spotAngle() {
            return this._spotAngle;
        }
        set spotAngle(e) {
            this._spotAngle = Math.max(Math.min(e, 179), 0);
        }
        get range() {
            return this._range;
        }
        set range(e) {
            this._range = e;
        }
        constructor() {
            super(), this._spotAngle = 30, this._range = 10, this._direction = new n();
        }
        _addToLightQueue() {
            this._scene._spotLights.add(this);
        }
        _removeFromLightQueue() {
            this._scene._spotLights.remove(this);
        }
        _parse(e, t) {
            super._parse(e, t), this.range = e.range, this.spotAngle = e.spotAngle;
        }
    }
    class ji {
        static _createSprite3DInstance(e, t, r) {
            var i;
            switch (e.type) {
              case "Scene3D":
                i = new Ir();
                break;

              case "Sprite3D":
                i = new le();
                break;

              case "MeshSprite3D":
                i = new st(), r && e.props.isStatic && r.push(i);
                break;

              case "SkinnedMeshSprite3D":
                i = new Dr();
                break;

              case "ShuriKenParticle3D":
                i = new Ht();
                break;

              case "Camera":
                i = new Ye();
                break;

              case "DirectionLight":
                i = new Xi();
                break;

              case "PointLight":
                i = new Yi();
                break;

              case "SpotLight":
                i = new Zi();
                break;

              case "TrailSprite3D":
                i = new Pr();
                break;

              default:
                throw new Error("Utils3D:unidentified class type in (.lh) file.");
            }
            var a = e.child;
            if (a) for (var n = 0, s = a.length; n < s; n++) {
                var o = ji._createSprite3DInstance(a[n], t, r);
                i.addChild(o);
            }
            return t[e.instanceID] = i, i;
        }
        static _createComponentInstance(e, r) {
            var i = r[e.instanceID];
            i._parse(e.props, r);
            var a = e.child;
            if (a) for (var n = 0, s = a.length; n < s; n++) ji._createComponentInstance(a[n], r);
            var o = e.components;
            if (o) for (var l = 0, _ = o.length; l < _; l++) {
                var h = o[l], c = t.ClassUtils.getRegClass(h.type);
                if (c) i.addComponent(c)._parse(h); else console.warn("Unkown component type.");
            }
        }
        static _createNodeByJson02(e, t) {
            var r = {}, i = ji._createSprite3DInstance(e, r, t);
            return ji._createComponentInstance(e, r), i;
        }
        static _parse(e, t = null, r = null) {
            var i, a = e.data, n = [];
            switch (e.version) {
              case "LAYAHIERARCHY:02":
                i = ji._createNodeByJson02(a, n);
                break;

              default:
                i = ji._createNodeByJson(a, n);
            }
            return he.combine(i, n), i;
        }
        static _parseScene(e, t = null, r = null) {
            var i, a = e.data, n = [];
            switch (e.version) {
              case "LAYASCENE3D:02":
                i = ji._createNodeByJson02(a, n);
                break;

              default:
                i = ji._createNodeByJson(a, n);
            }
            return he.combine(null, n), i;
        }
        static _createNodeByJson(e, r) {
            var i;
            switch (e.type) {
              case "Scene3D":
                i = new Ir();
                break;

              case "Sprite3D":
                i = new le();
                break;

              case "MeshSprite3D":
                i = new st(), r && e.props.isStatic && r.push(i);
                break;

              case "SkinnedMeshSprite3D":
                i = new Dr();
                break;

              case "ShuriKenParticle3D":
                i = new Ht();
                break;

              case "Camera":
                i = new Ye();
                break;

              case "DirectionLight":
                i = new Xi();
                break;

              case "PointLight":
                i = new Yi();
                break;

              case "SpotLight":
                i = new Zi();
                break;

              case "TrailSprite3D":
                i = new Pr();
                break;

              default:
                throw new Error("Utils3D:unidentified class type in (.lh) file.");
            }
            var a = e.child;
            if (a) for (var n = 0, s = a.length; n < s; n++) {
                var o = ji._createNodeByJson(a[n], r);
                i.addChild(o);
            }
            var l = e.components;
            if (l) for (var _ = 0, h = l.length; _ < h; _++) {
                var c = l[_], d = t.ClassUtils.getRegClass(c.type);
                if (d) i.addComponent(d)._parse(c); else console.warn("Unkown component type.");
            }
            return i._parse(e.props, null), i;
        }
    }
    class qi {
        constructor() {}
        static get enablePhysics() {
            return R._enablePhysics;
        }
        static _cancelLoadByUrl(e) {
            t.Laya.loader.cancelLoadByUrl(e), qi._innerFirstLevelLoaderManager.cancelLoadByUrl(e), 
            qi._innerSecondLevelLoaderManager.cancelLoadByUrl(e), qi._innerThirdLevelLoaderManager.cancelLoadByUrl(e), 
            qi._innerFourthLevelLoaderManager.cancelLoadByUrl(e);
        }
        static _changeWebGLSize(e, r) {
            t.WebGL.onStageResize(e, r), b.clientWidth = e, b.clientHeight = r;
        }
        static __init__(e, r, i) {
            if (t.Config.isAntialias = i.isAntialias, t.Config.isAlpha = i.isAlpha, t.Config.premultipliedAlpha = i.premultipliedAlpha, 
            t.Config.isStencil = i.isStencil, t.WebGL.enable()) {
                t.RunDriver.changeWebGLSize = qi._changeWebGLSize, t.Render.is3DMode = !0, t.Laya.init(e, r), 
                t.Render.supportWebGLPlusRendering || (t.LayaGL.instance = t.WebGLContext.mainContext, 
                t.LayaGL.instance.createCommandEncoder = function(e = 128, r = 64, i = !1) {
                    return new t.CommandEncoder(this, e, r, i);
                }), i._multiLighting = i.enableMultiLight && Ce.supportTextureFormat(t.TextureFormat.R32G32B32A32), 
                o.Shader3D = G, o.Scene3D = Ir, o.MeshRenderStaticBatchManager = Ke, o.MeshRenderDynamicBatchManager = nt, 
                o.SubMeshDynamicBatch = at, o.Laya3D = qi, o.Matrix4x4 = L, qi.enableNative3D(), 
                me.__init__(), ge.__init__(), Vt.__init__(), wt.__init__(), cr.__init__(), Cr.__init__(), 
                br.__init__(), kt.__init__(), pe.__init__(), at.__init__(), R._bullet = window.Physics3D, 
                R._bullet && (Gr.__init__(), $t.__init__(), rr.__init__(), or.__init__(), lr.__init__(), 
                er.__init__(), ar.__init__(), wr.__init__(), Ur.__init__()), Hi.__init__(), Xr.__init__(), 
                Yr.__init__(), le.__init__(), _e.__init__(), st.__init__(), Dr.__init__(), Ht.__init__(), 
                Pr.__init__(), H.__init__(), Ir.__init__(), Ke.__init__(), Y.__initDefine__(), Z.__initDefine__(), 
                Q.__initDefine__(), ee.__initDefine__(), $.__initDefine__(), re.__initDefine__(), 
                ie.__initDefine__(), Mr.__initDefine__(), K.__initDefine__(), ae.__initDefine__(), 
                Ot.__initDefine__(), J.__initDefine__(), Wt.__initDefine__(), te.__initDefine__(), 
                ze.__init__(), t.ClassUtils.regClass("Laya.EffectMaterial", K), t.ClassUtils.regClass("Laya.UnlitMaterial", ie), 
                t.ClassUtils.regClass("Laya.BlinnPhongMaterial", Q), t.ClassUtils.regClass("Laya.SkyProceduralMaterial", re), 
                t.ClassUtils.regClass("Laya.PBRStandardMaterial", ee), t.ClassUtils.regClass("Laya.PBRSpecularMaterial", $), 
                t.ClassUtils.regClass("Laya.SkyBoxMaterial", te), t.ClassUtils.regClass("Laya.WaterPrimaryMaterial", ae), 
                t.ClassUtils.regClass("Laya.ExtendTerrainMaterial", J), t.ClassUtils.regClass("Laya.ShurikenParticleMaterial", Ot), 
                t.ClassUtils.regClass("Laya.TrailMaterial", Mr), t.ClassUtils.regClass("Laya.PhysicsCollider", Br), 
                t.ClassUtils.regClass("Laya.Rigidbody3D", Ur), t.ClassUtils.regClass("Laya.CharacterController", wr), 
                t.ClassUtils.regClass("Laya.Animator", N), t.ClassUtils.regClass("PhysicsCollider", Br), 
                t.ClassUtils.regClass("CharacterController", wr), t.ClassUtils.regClass("Animator", N), 
                t.ClassUtils.regClass("Rigidbody3D", Ur), Wt.defaultMaterial = new Wt(), Q.defaultMaterial = new Q(), 
                K.defaultMaterial = new K(), ee.defaultMaterial = new ee(), $.defaultMaterial = new $(), 
                ie.defaultMaterial = new ie(), Ot.defaultMaterial = new Ot(), Mr.defaultMaterial = new Mr(), 
                re.defaultMaterial = new re(), te.defaultMaterial = new te(), ae.defaultMaterial = new ae(), 
                Wt.defaultMaterial.lock = !0, Q.defaultMaterial.lock = !0, K.defaultMaterial.lock = !0, 
                ee.defaultMaterial.lock = !0, $.defaultMaterial.lock = !0, ie.defaultMaterial.lock = !0, 
                Ot.defaultMaterial.lock = !0, Mr.defaultMaterial.lock = !0, re.defaultMaterial.lock = !0, 
                te.defaultMaterial.lock = !0, ae.defaultMaterial.lock = !0, t.Texture2D.__init__(), 
                Zr.__init__(), we.__init__(), dr.__init__(), Ue.__init__(), Ge.__init__(), ce.__init__(), 
                T.__init__();
                var a = t.LoaderManager.createMap;
                a.lh = [ qi.HIERARCHY, ji._parse ], a.ls = [ qi.HIERARCHY, ji._parseScene ], a.lm = [ qi.MESH, Xr._parse ], 
                a.lmat = [ qi.MATERIAL, Y._parse ], a.ltc = [ qi.TEXTURECUBE, Zr._parse ], a.jpg = [ qi.TEXTURE2D, t.Texture2D._parse ], 
                a.jpeg = [ qi.TEXTURE2D, t.Texture2D._parse ], a.bmp = [ qi.TEXTURE2D, t.Texture2D._parse ], 
                a.gif = [ qi.TEXTURE2D, t.Texture2D._parse ], a.png = [ qi.TEXTURE2D, t.Texture2D._parse ], 
                a.dds = [ qi.TEXTURE2D, t.Texture2D._parse ], a.ktx = [ qi.TEXTURE2D, t.Texture2D._parse ], 
                a.pvr = [ qi.TEXTURE2D, t.Texture2D._parse ], a.lani = [ qi.ANIMATIONCLIP, I._parse ], 
                a.lav = [ qi.AVATAR, X._parse ];
                var n = t.Loader.parserMap;
                n[qi.HIERARCHY] = qi._loadHierarchy, n[qi.MESH] = qi._loadMesh, n[qi.MATERIAL] = qi._loadMaterial, 
                n[qi.TEXTURECUBE] = qi._loadTextureCube, n[qi.TEXTURE2D] = qi._loadTexture2D, n[qi.ANIMATIONCLIP] = qi._loadAnimationClip, 
                n[qi.AVATAR] = qi._loadAvatar, qi._innerFirstLevelLoaderManager.on(t.Event.ERROR, null, qi._eventLoadManagerError), 
                qi._innerSecondLevelLoaderManager.on(t.Event.ERROR, null, qi._eventLoadManagerError), 
                qi._innerThirdLevelLoaderManager.on(t.Event.ERROR, null, qi._eventLoadManagerError), 
                qi._innerFourthLevelLoaderManager.on(t.Event.ERROR, null, qi._eventLoadManagerError);
            } else alert("Laya3D init error,must support webGL!");
        }
        static enableNative3D() {
            var e = z, r = Ui, i = Ar, a = X, n = ce;
            if (t.Render.supportWebGLPlusRendering && (e.prototype._initData = e.prototype._initDataForNative, 
            e.prototype.setBool = e.prototype.setBoolForNative, e.prototype.getBool = e.prototype.getBoolForNative, 
            e.prototype.setInt = e.prototype.setIntForNative, e.prototype.getInt = e.prototype.getIntForNative, 
            e.prototype.setNumber = e.prototype.setNumberForNative, e.prototype.getNumber = e.prototype.getNumberForNative, 
            e.prototype.setVector = e.prototype.setVectorForNative, e.prototype.getVector = e.prototype.getVectorForNative, 
            e.prototype.setVector2 = e.prototype.setVector2ForNative, e.prototype.getVector2 = e.prototype.getVector2ForNative, 
            e.prototype.setVector3 = e.prototype.setVector3ForNative, e.prototype.getVector3 = e.prototype.getVector3ForNative, 
            e.prototype.setQuaternion = e.prototype.setQuaternionForNative, e.prototype.getQuaternion = e.prototype.getQuaternionForNative, 
            e.prototype.setMatrix4x4 = e.prototype.setMatrix4x4ForNative, e.prototype.getMatrix4x4 = e.prototype.getMatrix4x4ForNative, 
            e.prototype.setBuffer = e.prototype.setBufferForNative, e.prototype.getBuffer = e.prototype.getBufferForNative, 
            e.prototype.setTexture = e.prototype.setTextureForNative, e.prototype.getTexture = e.prototype.getTextureForNative, 
            e.prototype.setAttribute = e.prototype.setAttributeForNative, e.prototype.getAttribute = e.prototype.getAttributeForNative, 
            e.prototype.cloneTo = e.prototype.cloneToForNative, e.prototype.getData = e.prototype.getDataForNative, 
            r.prototype._uniformMatrix2fv = r.prototype._uniformMatrix2fvForNative, r.prototype._uniformMatrix3fv = r.prototype._uniformMatrix3fvForNative, 
            r.prototype._uniformMatrix4fv = r.prototype._uniformMatrix4fvForNative, t.LayaGLRunner.uploadShaderUniforms = t.LayaGLRunner.uploadShaderUniformsForNative), 
            t.Render.supportWebGLPlusCulling && (n.renderObjectCulling = ce.renderObjectCullingNative), 
            t.Render.supportWebGLPlusAnimation) {
                a.prototype._cloneDatasToAnimator = a.prototype._cloneDatasToAnimatorNative;
                var s = I;
                s.prototype._evaluateClipDatasRealTime = s.prototype._evaluateClipDatasRealTimeForNative, 
                i.prototype._computeSkinnedData = i.prototype._computeSkinnedDataForNative;
            }
        }
        static formatRelativePath(e, t) {
            var r;
            if (r = e + t, "." === t.charAt(0)) {
                for (var i = r.split("/"), a = 0, n = i.length; a < n; a++) if (".." == i[a]) {
                    var s = a - 1;
                    s > 0 && ".." !== i[s] && (i.splice(s, 2), a -= 2);
                }
                r = i.join("/");
            }
            return r;
        }
        static _endLoad(e, r = null, i = null) {
            if (i) for (var a = 0, n = i.length; a < n; a++) {
                var s = t.Loader.getRes(i[a]);
                s && s._removeReference();
            }
            e.endLoad(r);
        }
        static _eventLoadManagerError(e) {
            t.Laya.loader.event(t.Event.ERROR, e);
        }
        static _addHierarchyInnerUrls(e, t, r, i, a, n, s = null, o = null) {
            var l = qi.formatRelativePath(i, a);
            return r && (l += r), e.push({
                url: l,
                type: n,
                constructParams: s,
                propertyParams: o
            }), t.push(l), l;
        }
        static _getSprite3DHierarchyInnerUrls(e, t, r, i, a, n, s, o) {
            var l, _, h = e.props;
            switch (e.type) {
              case "Scene3D":
                var c = h.lightmaps;
                for (l = 0, _ = c.length; l < _; l++) {
                    var d = c[l];
                    d.path = qi._addHierarchyInnerUrls(a, n, s, o, d.path, qi.TEXTURE2D, d.constructParams, d.propertyParams);
                }
                var u = h.reflectionTexture;
                if (u && (h.reflectionTexture = qi._addHierarchyInnerUrls(i, n, s, o, u, qi.TEXTURECUBE)), 
                h.sky) {
                    var f = h.sky.material;
                    f && (f.path = qi._addHierarchyInnerUrls(r, n, s, o, f.path, qi.MATERIAL));
                }
                break;

              case "Camera":
                var m = h.skyboxMaterial;
                m && (m.path = qi._addHierarchyInnerUrls(r, n, s, o, m.path, qi.MATERIAL));
                break;

              case "TrailSprite3D":
              case "MeshSprite3D":
              case "SkinnedMeshSprite3D":
                var E = h.meshPath;
                E && (h.meshPath = qi._addHierarchyInnerUrls(t, n, s, o, E, qi.MESH));
                var T = h.materials;
                if (T) for (l = 0, _ = T.length; l < _; l++) T[l].path = qi._addHierarchyInnerUrls(r, n, s, o, T[l].path, qi.MATERIAL);
                break;

              case "ShuriKenParticle3D":
                if (h.main) {
                    var g = h.renderer.resources, p = g.mesh, S = g.material;
                    p && (g.mesh = qi._addHierarchyInnerUrls(t, n, s, o, p, qi.MESH)), S && (g.material = qi._addHierarchyInnerUrls(r, n, s, o, S, qi.MATERIAL));
                } else {
                    var R = h.meshPath;
                    R && (h.meshPath = qi._addHierarchyInnerUrls(t, n, s, o, R, qi.MESH)), h.material.path = qi._addHierarchyInnerUrls(r, n, s, o, h.material.path, qi.MATERIAL);
                }
                break;

              case "Terrain":
                qi._addHierarchyInnerUrls(a, n, s, o, h.dataPath, qi.TERRAINRES);
            }
            var v = e.components;
            if (v) for (var I = 0, x = v.length; I < x; I++) {
                var A = v[I];
                switch (A.type) {
                  case "Animator":
                    A.avatarPath;
                    var D = A.avatar;
                    D && (D.path = qi._addHierarchyInnerUrls(a, n, s, o, D.path, qi.AVATAR));
                    var M = A.clipPaths;
                    if (M) for (l = 0, _ = M.length; l < _; l++) M[l] = qi._addHierarchyInnerUrls(a, n, s, o, M[l], qi.ANIMATIONCLIP); else {
                        var L = A.layers;
                        for (l = 0; l < L.length; l++) for (var C = L[l].states, y = 0, O = C.length; y < O; y++) {
                            var N = C[y].clipPath;
                            N && (C[y].clipPath = qi._addHierarchyInnerUrls(a, n, s, o, N, qi.ANIMATIONCLIP));
                        }
                    }
                    break;

                  case "PhysicsCollider":
                  case "Rigidbody3D":
                  case "CharacterController":
                    var P = A.shapes;
                    for (l = 0; l < P.length; l++) {
                        var b = P[l];
                        if ("MeshColliderShape" === b.type) (p = b.mesh) && (b.mesh = qi._addHierarchyInnerUrls(t, n, s, o, p, qi.MESH));
                    }
                }
            }
            var V = e.child;
            for (l = 0, _ = V.length; l < _; l++) qi._getSprite3DHierarchyInnerUrls(V[l], t, r, i, a, n, s, o);
        }
        static _loadHierarchy(e) {
            e.on(t.Event.LOADED, null, qi._onHierarchylhLoaded, [ e ]), e.load(e.url, t.Loader.JSON, !1, null, !0);
        }
        static _onHierarchylhLoaded(e, r) {
            var i = e.url, a = v.getURLVerion(i), n = t.URL.getPath(i), s = [], o = [], l = [], _ = [], h = [];
            qi._getSprite3DHierarchyInnerUrls(r.data, s, o, l, _, h, a, n);
            var c = s.length + o.length + _.length, d = c + 1, u = 1 / d;
            if (qi._onProcessChange(e, 0, u, 1), _.length > 0) {
                var f = c / d, m = t.Handler.create(null, qi._onProcessChange, [ e, u, f ], !1);
                qi._innerFourthLevelLoaderManager._create(_, !1, t.Handler.create(null, qi._onHierarchyInnerForthLevResouLoaded, [ e, m, r, h, s, o, l, u + f * _.length, f ]), m, null, null, null, 1, !0);
            } else qi._onHierarchyInnerForthLevResouLoaded(e, null, r, h, s, o, l, u, f);
        }
        static _onHierarchyInnerForthLevResouLoaded(e, r, i, a, n, s, o, l, _) {
            if (r && r.recover(), o.length > 0) {
                var h = t.Handler.create(null, qi._onProcessChange, [ e, l, _ ], !1);
                qi._innerThirdLevelLoaderManager._create(o, !1, t.Handler.create(null, qi._onHierarchyInnerThirdLevResouLoaded, [ e, h, i, a, n, s, l + _ * s.length, _ ]), r, null, null, null, 1, !0);
            } else qi._onHierarchyInnerThirdLevResouLoaded(e, null, i, a, n, s, l, _);
        }
        static _onHierarchyInnerThirdLevResouLoaded(e, r, i, a, n, s, o, l) {
            if (r && r.recover(), s.length > 0) {
                var _ = t.Handler.create(null, qi._onProcessChange, [ e, o, l ], !1);
                qi._innerSecondLevelLoaderManager._create(s, !1, t.Handler.create(null, qi._onHierarchyInnerSecondLevResouLoaded, [ e, _, i, a, n, o + l * s.length, l ]), r, null, null, null, 1, !0);
            } else qi._onHierarchyInnerSecondLevResouLoaded(e, null, i, a, n, o, l);
        }
        static _onHierarchyInnerSecondLevResouLoaded(e, r, i, a, n, s, o) {
            if (r && r.recover(), n.length > 0) {
                var l = t.Handler.create(null, qi._onProcessChange, [ e, s, o ], !1);
                qi._innerFirstLevelLoaderManager._create(n, !1, t.Handler.create(null, qi._onHierarchyInnerFirstLevResouLoaded, [ e, l, i, a ]), r, null, null, null, 1, !0);
            } else qi._onHierarchyInnerFirstLevResouLoaded(e, null, i, a);
        }
        static _onHierarchyInnerFirstLevResouLoaded(e, t, r, i) {
            t && t.recover(), e._cache = e._createCache;
            var a = "Scene3D" === r.data.type ? ji._parseScene(r, e._propertyParams, e._constructParams) : ji._parse(r, e._propertyParams, e._constructParams);
            qi._endLoad(e, a, i);
        }
        static _loadMesh(e) {
            e.on(t.Event.LOADED, null, qi._onMeshLmLoaded, [ e ]), e.load(e.url, t.Loader.BUFFER, !1, null, !0);
        }
        static _onMeshLmLoaded(e, t) {
            e._cache = e._createCache;
            var r = Xr._parse(t, e._propertyParams, e._constructParams);
            qi._endLoad(e, r);
        }
        static _loadMaterial(e) {
            e.on(t.Event.LOADED, null, qi._onMaterilLmatLoaded, [ e ]), e.load(e.url, t.Loader.JSON, !1, null, !0);
        }
        static _onMaterilLmatLoaded(e, r) {
            var i, a = e.url, n = v.getURLVerion(a), s = t.URL.getPath(a), o = [], l = [];
            r.customProps;
            switch (r.version) {
              case "LAYAMATERIAL:01":
              case "LAYAMATERIAL:02":
                var _, h, c = r.props.textures;
                if (c) for (_ = 0, h = c.length; _ < h; _++) {
                    var d = c[_], u = d.path;
                    u && (i = qi.formatRelativePath(s, u), n && (i += n), o.push({
                        url: i,
                        constructParams: d.constructParams,
                        propertyParams: d.propertyParams
                    }), l.push(i), d.path = i);
                }
                break;

              default:
                throw new Error("Laya3D:unkonwn version.");
            }
            var f = o.length, m = f + 1, E = 1 / m;
            if (qi._onProcessChange(e, 0, E, 1), f > 0) {
                var T = t.Handler.create(null, qi._onProcessChange, [ e, E, f / m ], !1);
                qi._innerFourthLevelLoaderManager._create(o, !1, t.Handler.create(null, qi._onMateialTexturesLoaded, [ e, T, r, l ]), T, null, null, null, 1, !0);
            } else qi._onMateialTexturesLoaded(e, null, r, null);
        }
        static _onMateialTexturesLoaded(e, t, r, i) {
            e._cache = e._createCache;
            var a = Y._parse(r, e._propertyParams, e._constructParams);
            qi._endLoad(e, a, i), t && t.recover();
        }
        static _loadAvatar(e) {
            e.on(t.Event.LOADED, null, function(t) {
                e._cache = e._createCache;
                var r = X._parse(t, e._propertyParams, e._constructParams);
                qi._endLoad(e, r);
            }), e.load(e.url, t.Loader.JSON, !1, null, !0);
        }
        static _loadAnimationClip(e) {
            e.on(t.Event.LOADED, null, function(t) {
                e._cache = e._createCache;
                var r = I._parse(t, e._propertyParams, e._constructParams);
                qi._endLoad(e, r);
            }), e.load(e.url, t.Loader.BUFFER, !1, null, !0);
        }
        static _loadTexture2D(e) {
            var r, i = e.url, a = i.lastIndexOf(".") + 1, n = i.indexOf("?"), s = -1 == n ? i.length : n;
            switch (i.substr(a, s - a)) {
              case "jpg":
              case "jpeg":
              case "bmp":
              case "gif":
              case "png":
                r = "nativeimage";
                break;

              case "dds":
              case "ktx":
              case "pvr":
                r = t.Loader.BUFFER;
            }
            e.on(t.Event.LOADED, null, function(r) {
                e._cache = e._createCache;
                var i = t.Texture2D._parse(r, e._propertyParams, e._constructParams);
                qi._endLoad(e, i);
            }), e.load(e.url, r, !1, null, !0);
        }
        static _loadTextureCube(e) {
            e.on(t.Event.LOADED, null, qi._onTextureCubeLtcLoaded, [ e ]), e.load(e.url, t.Loader.JSON, !1, null, !0);
        }
        static _onTextureCubeLtcLoaded(e, r) {
            var i = t.URL.getPath(e.url), a = [ qi.formatRelativePath(i, r.front), qi.formatRelativePath(i, r.back), qi.formatRelativePath(i, r.left), qi.formatRelativePath(i, r.right), qi.formatRelativePath(i, r.up), qi.formatRelativePath(i, r.down) ];
            qi._onProcessChange(e, 0, 1 / 7, 1);
            var n = t.Handler.create(null, qi._onProcessChange, [ e, 1 / 7, 6 / 7 ], !1);
            qi._innerFourthLevelLoaderManager.load(a, t.Handler.create(null, qi._onTextureCubeImagesLoaded, [ e, a, n ]), n, "nativeimage");
        }
        static _onTextureCubeImagesLoaded(e, r, i) {
            for (var a = new Array(6), n = 0; n < 6; n++) a[n] = t.Loader.getRes(r[n]);
            e._cache = e._createCache;
            var s = Zr._parse(a, e._propertyParams, e._constructParams);
            for (i.recover(), n = 0; n < 6; n++) t.Loader.clearRes(r[n]);
            qi._endLoad(e, s);
        }
        static _onProcessChange(e, r, i, a) {
            (a = r + a * i) < 1 && e.event(t.Event.PROGRESS, a);
        }
        static init(e, t, r = null, i = null) {
            if (qi._isInit) i && i.run(); else {
                qi._isInit = !0, r && r.cloneTo(s._config), r = s._config, ce.debugFrustumCulling = r.debugFrustumCulling, 
                qi._editerEnvironment = r._editerEnvironment, Ir.octreeCulling = r.octreeCulling, 
                Ir.octreeInitialSize = r.octreeInitialSize, Ir.octreeInitialCenter = r.octreeInitialCenter, 
                Ir.octreeMinNodeSize = r.octreeMinNodeSize, Ir.octreeLooseness = r.octreeLooseness;
                var a = window.Physics3D;
                null == a ? (R._enablePhysics = !1, qi.__init__(e, t, r), i && i.run()) : (R._enablePhysics = !0, 
                a(16 * r.defaultPhysicsMemory, Vr._interactive).then(function() {
                    qi.__init__(e, t, r), i && i.run();
                }));
            }
        }
    }
    qi.HIERARCHY = "HIERARCHY", qi.MESH = "MESH", qi.MATERIAL = "MATERIAL", qi.TEXTURE2D = "TEXTURE2D", 
    qi.TEXTURECUBE = "TEXTURECUBE", qi.ANIMATIONCLIP = "ANIMATIONCLIP", qi.AVATAR = "AVATAR", 
    qi.TERRAINHEIGHTDATA = "TERRAINHEIGHTDATA", qi.TERRAINRES = "TERRAIN", qi._innerFirstLevelLoaderManager = new t.LoaderManager(), 
    qi._innerSecondLevelLoaderManager = new t.LoaderManager(), qi._innerThirdLevelLoaderManager = new t.LoaderManager(), 
    qi._innerFourthLevelLoaderManager = new t.LoaderManager(), qi._isInit = !1, qi._editerEnvironment = !1, 
    qi.physicsSettings = new hr(), window.Laya3D = qi;
    class Qi extends t.Component {
        constructor() {
            super(...arguments), this._indexInPool = -1;
        }
        get isSingleton() {
            return !1;
        }
        _checkProcessTriggers() {
            var e = Qi.prototype;
            return this.onTriggerEnter !== e.onTriggerEnter || (this.onTriggerStay !== e.onTriggerStay || this.onTriggerExit !== e.onTriggerExit);
        }
        _checkProcessCollisions() {
            var e = Qi.prototype;
            return this.onCollisionEnter !== e.onCollisionEnter || (this.onCollisionStay !== e.onCollisionStay || this.onCollisionExit !== e.onCollisionExit);
        }
        _onAwake() {
            this.onAwake(), this.onStart !== Qi.prototype.onStart && t.Laya.startTimer.callLater(this, this.onStart);
        }
        _onEnable() {
            this.owner._scene._addScript(this);
            var e = Qi.prototype;
            this.onKeyDown !== e.onKeyDown && t.Laya.stage.on(t.Event.KEY_DOWN, this, this.onKeyDown), 
            this.onKeyPress !== e.onKeyPress && t.Laya.stage.on(t.Event.KEY_PRESS, this, this.onKeyUp), 
            this.onKeyUp !== e.onKeyUp && t.Laya.stage.on(t.Event.KEY_UP, this, this.onKeyUp), 
            this.onEnable();
        }
        _onDisable() {
            this.owner._scene._removeScript(this), this.owner.offAllCaller(this), t.Laya.stage.offAllCaller(this), 
            this.onDisable();
        }
        _isScript() {
            return !0;
        }
        _onAdded() {
            var e = this.owner, t = e._scripts;
            t || (e._scripts = t = []), t.push(this), e._needProcessCollisions || (e._needProcessCollisions = this._checkProcessCollisions()), 
            e._needProcessTriggers || (e._needProcessTriggers = this._checkProcessTriggers());
        }
        _onDestroy() {
            var e = this.owner._scripts;
            e.splice(e.indexOf(this), 1);
            var t = this.owner;
            t._needProcessTriggers = !1;
            for (var r = 0, i = e.length; r < i; r++) if (e[r]._checkProcessTriggers()) {
                t._needProcessTriggers = !0;
                break;
            }
            for (t._needProcessCollisions = !1, r = 0, i = e.length; r < i; r++) if (e[r]._checkProcessCollisions()) {
                t._needProcessCollisions = !0;
                break;
            }
            this.onDestroy();
        }
        onAwake() {}
        onEnable() {}
        onStart() {}
        onTriggerEnter(e) {}
        onTriggerStay(e) {}
        onTriggerExit(e) {}
        onCollisionEnter(e) {}
        onCollisionStay(e) {}
        onCollisionExit(e) {}
        onMouseDown() {}
        onMouseDrag() {}
        onMouseClick() {}
        onMouseUp() {}
        onMouseEnter() {}
        onMouseOver() {}
        onMouseOut() {}
        onKeyDown(e) {}
        onKeyPress(e) {}
        onKeyUp(e) {}
        onUpdate() {}
        onLateUpdate() {}
        onPreRender() {}
        onPostRender() {}
        onDisable() {}
        onDestroy() {}
    }
    class Ki {
        constructor(e, t, r, i) {
            this._datas = [], this._w = e, this._h = t, this._minHeight = r, this._maxHeight = i;
        }
        static creatFromMesh(e, t, r, i) {
            for (var a = [], s = [], o = e.subMeshCount, l = 0; l < o; l++) {
                for (var _ = e.getSubMesh(l), h = _._vertexBuffer, c = h.getFloat32Data(), d = [], u = 0; u < c.length; u += h.vertexDeclaration.vertexStride / 4) {
                    var f = new n(c[u + 0], c[u + 1], c[u + 2]);
                    d.push(f);
                }
                a.push(d);
                var m = _._indexBuffer;
                s.push(m.getData());
            }
            var E = e.bounds, T = E.getMin().x, g = E.getMin().z, p = E.getMax().x, S = E.getMax().z, R = E.getMin().y, v = E.getMax().y, I = p - T, x = S - g, A = i.x = I / (t - 1), D = i.y = x / (r - 1), M = new Ki(t, r, R, v), L = Ki._tempRay, C = L.direction;
            C.x = 0, C.y = -1, C.z = 0;
            var y = v + .1;
            L.origin.y = y;
            for (var O = 0; O < r; O++) {
                var N = g + O * D;
                M._datas[O] = [];
                for (var P = 0; P < t; P++) {
                    var b = T + P * A, V = L.origin;
                    V.x = b, V.z = N;
                    var w = Ki._getPosition(L, a, s);
                    M._datas[O][P] = w === Number.MAX_VALUE ? NaN : y - w;
                }
            }
            return M;
        }
        static createFromImage(e, t, r) {
            for (var i = e.width, a = e.height, n = new Ki(i, a, t, r), s = (r - t) / 254, o = e.getPixels(), l = 0, _ = 0; _ < a; _++) for (var h = n._datas[_] = [], c = 0; c < i; c++) {
                var d = o[l++], u = o[l++], f = o[l++], m = o[l++];
                h[c] = 255 == d && 255 == u && 255 == f && 255 == m ? NaN : (d + u + f) / 3 * s + t;
            }
            return n;
        }
        static _getPosition(e, t, r) {
            for (var i = Number.MAX_VALUE, a = 0; a < t.length; a++) for (var n = t[a], s = r[a], o = 0; o < s.length; o += 3) {
                var l = n[s[o + 0]], _ = n[s[o + 1]], h = n[s[o + 2]], c = Le.rayIntersectsTriangle(e, l, _, h);
                !isNaN(c) && c < i && (i = c);
            }
            return i;
        }
        get width() {
            return this._w;
        }
        get height() {
            return this._h;
        }
        get maxHeight() {
            return this._maxHeight;
        }
        get minHeight() {
            return this._minHeight;
        }
        _inBounds(e, t) {
            return e >= 0 && e < this._h && t >= 0 && t < this._w;
        }
        getHeight(e, t) {
            return this._inBounds(e, t) ? this._datas[e][t] : NaN;
        }
    }
    Ki._tempRay = new Ie(new n(), new n());
    class Ji extends st {
        constructor(e, t, r = null) {
            super(e, r), this._heightMap = t, this._cellSize = new i();
        }
        static createFromMesh(e, t, r, i = null) {
            var a = new Ji(e, null, i);
            return a._initCreateFromMesh(t, r), a;
        }
        static createFromMeshAndHeightMap(e, t, r, i, a = null) {
            var n = new Ji(e, null, a);
            return n._initCreateFromMeshHeightMap(t, r, i), n;
        }
        get minX() {
            var e = this.transform.worldMatrix.elements;
            return this._minX * this._getScaleX() + e[12];
        }
        get minZ() {
            var e = this.transform.worldMatrix.elements;
            return this._minZ * this._getScaleZ() + e[14];
        }
        get width() {
            return (this._heightMap.width - 1) * this._cellSize.x * this._getScaleX();
        }
        get depth() {
            return (this._heightMap.height - 1) * this._cellSize.y * this._getScaleZ();
        }
        _disableRotation() {
            var e = this.transform.rotation;
            e.x = 0, e.y = 0, e.z = 0, e.w = 1, this.transform.rotation = e;
        }
        _getScaleX() {
            var e = this.transform.worldMatrix.elements, t = e[0], r = e[1], i = e[2];
            return Math.sqrt(t * t + r * r + i * i);
        }
        _getScaleZ() {
            var e = this.transform.worldMatrix.elements, t = e[8], r = e[9], i = e[10];
            return Math.sqrt(t * t + r * r + i * i);
        }
        _initCreateFromMesh(e, t) {
            this._heightMap = Ki.creatFromMesh(this.meshFilter.sharedMesh, e, t, this._cellSize);
            var r = this.meshFilter.sharedMesh.bounds, i = r.getMin();
            r.getMax();
            this._minX = i.x, this._minZ = i.z;
        }
        _initCreateFromMeshHeightMap(e, t, r) {
            var i = this.meshFilter.sharedMesh.bounds;
            this._heightMap = Ki.createFromImage(e, t, r), this._computeCellSize(i);
            var a = i.getMin();
            i.getMax();
            this._minX = a.x, this._minZ = a.z;
        }
        _computeCellSize(e) {
            var t = e.getMin(), r = e.getMax(), i = t.x, a = t.z, n = r.x - i, s = r.z - a;
            this._cellSize.x = n / (this._heightMap.width - 1), this._cellSize.y = s / (this._heightMap.height - 1);
        }
        _update(e) {
            this._disableRotation();
        }
        getHeight(e, t) {
            Ji._tempVector3.x = e, Ji._tempVector3.y = 0, Ji._tempVector3.z = t, this._disableRotation();
            var r = this.transform.worldMatrix;
            r.invert(Ji._tempMatrix4x4), n.transformCoordinate(Ji._tempVector3, Ji._tempMatrix4x4, Ji._tempVector3), 
            e = Ji._tempVector3.x, t = Ji._tempVector3.z;
            var i = (e - this._minX) / this._cellSize.x, a = (t - this._minZ) / this._cellSize.y, s = Math.floor(a), o = Math.floor(i), l = i - o, _ = a - s, h = r.elements, c = h[4], d = h[5], u = h[6], f = Math.sqrt(c * c + d * d + u * u), m = h[13], E = this._heightMap.getHeight(s, o + 1), T = this._heightMap.getHeight(s + 1, o);
            if (isNaN(E) || isNaN(T)) return NaN;
            if (l + _ <= 1) {
                var g = this._heightMap.getHeight(s, o);
                return isNaN(g) ? NaN : (g + l * (E - g) + _ * (T - g)) * f + m;
            }
            var p = this._heightMap.getHeight(s + 1, o + 1);
            return isNaN(p) ? NaN : (p + (1 - l) * (T - p) + (1 - _) * (E - p)) * f + m;
        }
    }
    Ji._tempVector3 = new n(), Ji._tempMatrix4x4 = new L();
    class $i {
        constructor() {
            this._currentLength = 0, this._elements = new Float32Array(12);
        }
        get gradientCount() {
            return this._currentLength / 3;
        }
        add(e, t) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("GradientDataVector2 warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t.x, 
            this._elements[this._currentLength++] = t.y) : console.log("GradientDataVector2 warning:data count must lessEqual than 4");
        }
        cloneTo(e) {
            var t = e;
            t._currentLength = this._currentLength;
            for (var r = t._elements, i = 0, a = this._elements.length; i < a; i++) r[i] = this._elements[i];
        }
        clone() {
            var e = new $i();
            return this.cloneTo(e), e;
        }
    }
    class ea {
        constructor() {}
        render(e) {}
    }
    class ta extends ea {
        constructor() {
            super(), this._shader = null, this._shaderData = new z(), this._linearColor = new ne(), 
            this._bloomTextureTexelSize = new a(), this._shaderThreshold = new a(), this._shaderParams = new a(), 
            this._pyramid = null, this._intensity = 0, this._threshold = 1, this._softKnee = .5, 
            this._diffusion = 7, this._anamorphicRatio = 0, this._dirtIntensity = 0, this._shaderSetting = new a(), 
            this._dirtTileOffset = new a(), this.clamp = 65472, this.color = new ne(1, 1, 1, 1), 
            this.fastMode = !1, this.dirtTexture = null, this._shader = G.find("PostProcessBloom"), 
            this._pyramid = new Array(2 * ta.MAXPYRAMIDSIZE);
        }
        get intensity() {
            return this._intensity;
        }
        set intensity(e) {
            this._intensity = Math.max(e, 0);
        }
        get threshold() {
            return this._threshold;
        }
        set threshold(e) {
            this._threshold = Math.max(e, 0);
        }
        get softKnee() {
            return this._softKnee;
        }
        set softKnee(e) {
            this._softKnee = Math.min(Math.max(e, 0), 1);
        }
        get diffusion() {
            return this._diffusion;
        }
        set diffusion(e) {
            this._diffusion = Math.min(Math.max(e, 1), 10);
        }
        get anamorphicRatio() {
            return this._anamorphicRatio;
        }
        set anamorphicRatio(e) {
            this._anamorphicRatio = Math.min(Math.max(e, -1), 1);
        }
        get dirtIntensity() {
            return this._dirtIntensity;
        }
        set dirtIntensity(e) {
            this._dirtIntensity = Math.max(e, 0);
        }
        render(e) {
            var r = e.command, i = e.camera.viewport;
            this._shaderData.setTexture(ta.SHADERVALUE_AUTOEXPOSURETEX, t.Texture2D.whiteTexture);
            var n, s = this._anamorphicRatio, o = s < 0 ? -s : 0, l = s > 0 ? s : 0, _ = Math.floor(i.width / (2 - o)), h = Math.floor(i.height / (2 - l)), c = Math.max(_, h);
            n = Math.log2(c) + this._diffusion - 10;
            var d = Math.floor(n), u = Math.min(Math.max(d, 1), ta.MAXPYRAMIDSIZE), f = .5 + n - d;
            this._shaderData.setNumber(ta.SHADERVALUE_SAMPLESCALE, f);
            var m = ne.gammaToLinearSpace(this.threshold), E = m * this._softKnee + 1e-5;
            this._shaderThreshold.setValue(m, m - E, 2 * E, .25 / E), this._shaderData.setVector(ta.SHADERVALUE_THRESHOLD, this._shaderThreshold);
            var T = ne.gammaToLinearSpace(this.clamp);
            this._shaderParams.setValue(T, 0, 0, 0), this._shaderData.setVector(ta.SHADERVALUE_PARAMS, this._shaderParams);
            for (var g = this.fastMode ? 1 : 0, p = e.source, S = 0; S < u; S++) {
                var R = 2 * S, v = R + 1, I = 0 == S ? ta.SUBSHADER_PREFILTER13 + g : ta.SUBSHADER_DOWNSAMPLE13 + g, x = V.createFromPool(_, h, t.RenderTextureFormat.R8G8B8, t.RenderTextureDepthFormat.DEPTHSTENCIL_NONE, t.BaseTexture.FILTERMODE_BILINEAR);
                if (this._pyramid[R] = x, S !== u - 1) {
                    var A = V.createFromPool(_, h, t.RenderTextureFormat.R8G8B8, t.RenderTextureDepthFormat.DEPTHSTENCIL_NONE, t.BaseTexture.FILTERMODE_BILINEAR);
                    this._pyramid[v] = A;
                }
                r.blitScreenTriangle(p, x, null, this._shader, this._shaderData, I), p = x, _ = Math.max(Math.floor(_ / 2), 1), 
                h = Math.max(Math.floor(h / 2), 1);
            }
            var D = this._pyramid[2 * (u - 1)];
            for (S = u - 2; S >= 0; S--) v = (R = 2 * S) + 1, x = this._pyramid[R], A = this._pyramid[v], 
            r.setShaderDataTexture(this._shaderData, ta.SHADERVALUE_BLOOMTEX, x), r.blitScreenTriangle(D, A, null, this._shader, this._shaderData, ta.SUBSHADER_UPSAMPLETENT + g), 
            D = A;
            var M = this._linearColor;
            this.color.toLinear(M);
            var L = Math.pow(2, this._intensity / 10) - 1, C = this._shaderSetting;
            this._shaderSetting.setValue(f, L, this._dirtIntensity, u);
            var y = this.dirtTexture ? this.dirtTexture : t.Texture2D.blackTexture, O = y.width / y.height, N = i.width / i.height, P = this._dirtTileOffset;
            O > N ? P.setValue(N / O, 1, .5 * (1 - P.x), 0) : O < N && P.setValue(1, O / N, 0, .5 * (1 - P.y));
            var b = e.compositeShaderData;
            for (this.fastMode ? b.addDefine(H.SHADERDEFINE_BLOOM_LOW) : b.addDefine(H.SHADERDEFINE_BLOOM), 
            this._bloomTextureTexelSize.setValue(1 / D.width, 1 / D.height, D.width, D.height), 
            b.setVector(H.SHADERVALUE_BLOOM_DIRTTILEOFFSET, P), b.setVector(H.SHADERVALUE_BLOOM_SETTINGS, C), 
            b.setVector(H.SHADERVALUE_BLOOM_COLOR, new a(M.r, M.g, M.b, M.a)), b.setTexture(H.SHADERVALUE_BLOOM_DIRTTEX, y), 
            b.setTexture(H.SHADERVALUE_BLOOMTEX, D), b.setVector(H.SHADERVALUE_BLOOMTEX_TEXELSIZE, this._bloomTextureTexelSize), 
            S = 0; S < u; S++) v = (R = 2 * S) + 1, V.recoverToPool(this._pyramid[R]), 0 !== S && S !== u - 1 && V.recoverToPool(this._pyramid[v]);
            e.deferredReleaseTextures.push(D);
        }
    }
    ta.SHADERVALUE_MAINTEX = G.propertyNameToID("u_MainTex"), ta.SHADERVALUE_AUTOEXPOSURETEX = G.propertyNameToID("u_AutoExposureTex"), 
    ta.SHADERVALUE_SAMPLESCALE = G.propertyNameToID("u_SampleScale"), ta.SHADERVALUE_THRESHOLD = G.propertyNameToID("u_Threshold"), 
    ta.SHADERVALUE_PARAMS = G.propertyNameToID("u_Params"), ta.SHADERVALUE_BLOOMTEX = G.propertyNameToID("u_BloomTex"), 
    ta.SUBSHADER_PREFILTER13 = 0, ta.SUBSHADER_PREFILTER4 = 1, ta.SUBSHADER_DOWNSAMPLE13 = 2, 
    ta.SUBSHADER_DOWNSAMPLE4 = 3, ta.SUBSHADER_UPSAMPLETENT = 4, ta.SUBSHADER_UPSAMPLEBOX = 5, 
    ta.MAXPYRAMIDSIZE = 16;
    class ra {
        constructor(e) {
            if (!(e instanceof Array) || 4 !== e.length) throw new Error("Rand:Seed must be an array with 4 numbers");
            this._state0U = 0 | e[0], this._state0L = 0 | e[1], this._state1U = 0 | e[2], this._state1L = 0 | e[3];
        }
        randomint() {
            var e = this._state0U, t = this._state0L, r = this._state1U, i = this._state1L, a = (i >>> 0) + (t >>> 0), n = r + e + (a / 2 >>> 31) >>> 0, s = a >>> 0;
            this._state0U = r, this._state0L = i;
            var o = 0, l = 0;
            o = (e ^= o = e << 23 | (-512 & t) >>> 9) ^ r, l = (t ^= l = t << 23) ^ i;
            o ^= e >>> 18, l ^= t >>> 18 | (262143 & e) << 14;
            return o ^= r >>> 5, l ^= i >>> 5 | (31 & r) << 27, this._state1U = o, this._state1L = l, 
            [ n, s ];
        }
        random() {
            var e = this.randomint(), t = e[0], r = 1023 << 20 | t >>> 12, i = 0 | (e[1] >>> 12 | (4095 & t) << 20);
            return ra._CONVERTION_BUFFER.setUint32(0, r, !1), ra._CONVERTION_BUFFER.setUint32(4, i, !1), 
            ra._CONVERTION_BUFFER.getFloat64(0, !1) - 1;
        }
    }
    ra._CONVERTION_BUFFER = new DataView(new ArrayBuffer(8)), ra.defaultRand = new ra([ 0, Date.now() / 65536, 0, Date.now() % 65536 ]);
    class ia {
        constructor(e, t) {
            this._width = 0, this._height = 0, this._width = e, this._height = t;
        }
        static get fullScreen() {
            return new ia(-1, -1);
        }
        get width() {
            return -1 === this._width ? b.clientWidth : this._width;
        }
        get height() {
            return -1 === this._height ? b.clientHeight : this._height;
        }
    }
    e.AlternateLightQueue = mr, e.AnimationClip = I, e.AnimationClipParser03 = E, e.AnimationClipParser04 = g, 
    e.AnimationEvent = _, e.AnimationNode = k, e.AnimationTransform3D = W, e.Animator = N, 
    e.AnimatorControllerLayer = A, e.AnimatorPlayState = x, e.AnimatorState = y, e.AnimatorStateScript = class {
        constructor() {}
        onStateEnter() {}
        onStateUpdate() {}
        onStateExit() {}
    }, e.Avatar = X, e.BaseCamera = Be, e.BaseMaterial = Z, e.BaseRender = tt, e.BaseShape = pt, 
    e.BatchMark = de, e.BlinnPhongMaterial = Q, e.BlitScreenQuadCMD = He, e.BloomEffect = ta, 
    e.BoundBox = $e, e.BoundFrustum = De, e.BoundSphere = Ft, e.Bounds = et, e.BoundsOctree = vr, 
    e.BoundsOctreeNode = Sr, e.BoxColliderShape = er, e.BoxShape = Rt, e.BufferState = ye, 
    e.BulletInteractive = Vr, e.Burst = _t, e.Camera = Ye, e.CapsuleColliderShape = tr, 
    e.CastShadowList = class extends Qe {
        constructor() {
            super();
        }
        add(e) {
            if (-1 !== e._indexInCastShadowList) throw "CastShadowList:element has  in  CastShadowList.";
            this._add(e), e._indexInCastShadowList = this.length++;
        }
        remove(e) {
            var t = e._indexInCastShadowList;
            if (this.length--, t !== this.length) {
                var r = this.elements[this.length];
                this.elements[t] = r, r._indexInCastShadowList = t;
            }
            e._indexInCastShadowList = -1;
        }
    }, e.CharacterController = wr, e.CircleShape = vt, e.Cluster = Re, e.ColliderShape = $t, 
    e.Collision = Kt, e.CollisionTool = Jt, e.CollisionUtils = Ae, e.Color = ne, e.ColorOverLifetime = ct, 
    e.Command = ze, e.CommandBuffer = Xe, e.CompoundColliderShape = rr, e.ConchQuaternion = C, 
    e.ConchVector3 = M, e.ConchVector4 = D, e.ConeColliderShape = ir, e.ConeShape = It, 
    e.Config3D = s, e.Constraint3D = class {
        constructor() {}
    }, e.ConstraintComponent = class extends t.Component {
        constructor() {
            super(), this._feedbackEnabled = !1;
        }
        get enabled() {
            return super.enabled;
        }
        set enabled(e) {
            this._btConstraint.IsEnabled = e, super.enabled = e;
        }
        get breakingImpulseThreshold() {
            return this._breakingImpulseThreshold;
        }
        set breakingImpulseThreshold(e) {
            this._btConstraint.BreakingImpulseThreshold = e, this._breakingImpulseThreshold = e;
        }
        get appliedImpulse() {
            return this._feedbackEnabled || (this._btConstraint.EnableFeedback(!0), this._feedbackEnabled = !0), 
            this._btConstraint.AppliedImpulse;
        }
        get connectedBody() {
            return this._connectedBody;
        }
        set connectedBody(e) {
            this._connectedBody = e;
        }
        _onDestroy() {
            R._bullet.destroy(this._btConstraint), this._btConstraint = null;
        }
    }, e.ContactPoint = Qt, e.ContainmentType = xe, e.CylinderColliderShape = ar, e.DefineDatas = w, 
    e.DirectionLight = Xi, e.DirectionLightQueue = fr, e.DynamicBatchManager = se, e.EffectMaterial = K, 
    e.Emission = Ut, e.ExtendTerrainMaterial = J, e.FloatKeyframe = c, e.FrameOverTime = dt, 
    e.FrustumCulling = ce, e.GeometryElement = ue, e.Gradient = lt, e.GradientAngularVelocity = ut, 
    e.GradientColor = ht, e.GradientDataInt = ft, e.GradientDataNumber = mt, e.GradientDataVector2 = $i, 
    e.GradientMode = ot, e.GradientSize = Et, e.GradientVelocity = Tt, e.HalfFloatUtils = T, 
    e.HeightMap = Ki, e.HeightfieldColliderShape = class {
        constructor() {}
    }, e.HemisphereShape = xt, e.HitResult = jt, e.ILaya3D = o, e.IndexBuffer3D = be, 
    e.Input3D = _r, e.Keyframe = h, e.KeyframeNode = l, e.KeyframeNodeList = p, e.KeyframeNodeOwner = O, 
    e.Laya3D = qi, e.LightQueue = ur, e.LightSprite = ki, e.LoadModelV04 = Hr, e.LoadModelV05 = Wr, 
    e.Material = Y, e.MathUtils3D = r, e.Matrix3x3 = d, e.Matrix4x4 = L, e.Mesh = Xr, 
    e.MeshColliderShape = nr, e.MeshFilter = it, e.MeshReader = kr, e.MeshRenderDynamicBatchManager = nt, 
    e.MeshRenderStaticBatchManager = Ke, e.MeshRenderer = rt, e.MeshSprite3D = st, e.MeshSprite3DShaderDeclaration = Je, 
    e.MeshTerrainSprite3D = Ji, e.MouseTouch = Yt, e.OctreeMotionList = Rr, e.PBRSpecularMaterial = $, 
    e.PBRStandardMaterial = ee, e.ParallelSplitShadowMap = Wi, e.Physics3D = R, e.Physics3DUtils = Nt, 
    e.PhysicsCollider = Br, e.PhysicsComponent = or, e.PhysicsSettings = hr, e.PhysicsSimulation = lr, 
    e.PhysicsTriggerComponent = Fr, e.PhysicsUpdateList = qt, e.Picker = Le, e.PixelLineData = class {
        constructor() {
            this.startPosition = new n(), this.endPosition = new n(), this.startColor = new ne(), 
            this.endColor = new ne();
        }
        cloneTo(e) {
            this.startPosition.cloneTo(e.startPosition), this.endPosition.cloneTo(e.endPosition), 
            this.startColor.cloneTo(e.startColor), this.endColor.cloneTo(e.endColor);
        }
    }, e.PixelLineFilter = Er, e.PixelLineMaterial = Wt, e.PixelLineRenderer = Tr, e.PixelLineSprite3D = gr, 
    e.PixelLineVertex = kt, e.Plane = ve, e.Point2PointConstraint = class {
        constructor() {
            this._pivotInA = new n(), this._pivotInB = new n();
        }
        get pivotInA() {
            return this._pivotInA;
        }
        set pivotInA(e) {
            this._pivotInA = e;
        }
        get pivotInB() {
            return this._pivotInB;
        }
        set pivotInB(e) {
            this._pivotInB = e;
        }
        get damping() {
            return this._damping;
        }
        set damping(e) {
            this._damping = e;
        }
        get impulseClamp() {
            return this._impulseClamp;
        }
        set impulseClamp(e) {
            this._impulseClamp = e;
        }
        get tau() {
            return this._tau;
        }
        set tau(e) {
            this._tau = e;
        }
    }, e.PointLight = Yi, e.PostProcess = H, e.PostProcessEffect = ea, e.PostProcessRenderContext = P, 
    e.PrimitiveMesh = Yr, e.Quaternion = u, e.QuaternionKeyframe = f, e.Rand = Bt, e.RandX = ra, 
    e.Ray = Ie, e.RenderContext3D = b, e.RenderElement = Ze, e.RenderQueue = pr, e.RenderState = q, 
    e.RenderTexture = V, e.RenderableSprite3D = _e, e.Rigidbody3D = Ur, e.RotationOverLifetime = gt, 
    e.Scene3D = Ir, e.Scene3DShaderDeclaration = j, e.Scene3DUtils = ji, e.SceneManager = class {
        constructor() {}
    }, e.ScreenQuad = Ue, e.ScreenTriangle = Ge, e.Script3D = Qi, e.SetRenderTargetCMD = We, 
    e.SetShaderDataTextureCMD = ke, e.Shader3D = G, e.ShaderData = z, e.ShaderDefine = F, 
    e.ShaderInit3D = Hi, e.ShaderInstance = Ui, e.ShaderPass = Gi, e.ShaderVariable = Bi, 
    e.ShaderVariant = B, e.ShaderVariantCollection = U, e.ShapeUtils = St, e.ShuriKenParticle3D = Ht, 
    e.ShuriKenParticle3DShaderDeclaration = yt, e.ShurikenParticleData = Gt, e.ShurikenParticleMaterial = Ot, 
    e.ShurikenParticleRenderer = Pt, e.ShurikenParticleSystem = zt, e.SimpleSingletonList = Xt, 
    e.SingletonList = Qe, e.Size = ia, e.SizeOverLifetime = Dt, e.SkinnedMeshRenderer = Ar, 
    e.SkinnedMeshSprite3D = Dr, e.SkinnedMeshSprite3DShaderDeclaration = xr, e.SkyBox = we, 
    e.SkyBoxMaterial = te, e.SkyDome = dr, e.SkyMesh = Ve, e.SkyProceduralMaterial = re, 
    e.SkyRenderer = Fe, e.SphereColliderShape = sr, e.SphereShape = At, e.SpotLight = Zi, 
    e.Sprite3D = le, e.StartFrame = Mt, e.StaticBatchManager = he, e.StaticPlaneColliderShape = Gr, 
    e.SubMesh = zr, e.SubMeshDynamicBatch = at, e.SubMeshInstanceBatch = pe, e.SubMeshRenderElement = je, 
    e.SubMeshStaticBatch = qe, e.SubShader = zi, e.SystemUtils = Ce, e.TextMesh = class {
        get text() {
            return this._text;
        }
        set text(e) {
            this._text = e;
        }
        get fontSize() {
            return this._fontSize;
        }
        set fontSize(e) {
            this._fontSize = e;
        }
        get color() {
            return this._color;
        }
        set color(e) {
            this._color = e;
        }
        constructor() {}
        _createVertexBuffer(e) {}
        _resizeVertexBuffer(e) {}
        _addChar() {}
    }, e.TextureCube = Zr, e.TextureGenerator = S, e.TextureMode = Lr, e.TextureSheetAnimation = Lt, 
    e.Touch = Zt, e.TrailFilter = Or, e.TrailGeometry = yr, e.TrailMaterial = Mr, e.TrailRenderer = Nr, 
    e.TrailSprite3D = Pr, e.Transform3D = oe, e.UnlitMaterial = ie, e.Utils3D = v, e.Vector2 = i, 
    e.Vector3 = n, e.Vector3Keyframe = m, e.Vector4 = a, e.VelocityOverLifetime = Ct, 
    e.VertexBuffer3D = fe, e.VertexDeclaration = Ee, e.VertexElement = Te, e.VertexElementFormat = me, 
    e.VertexMesh = ge, e.VertexPositionTerrain = br, e.VertexPositionTexture0 = cr, 
    e.VertexShuriKenParticle = bt, e.VertexShurikenParticleBillboard = Vt, e.VertexShurikenParticleMesh = wt, 
    e.VertexTrail = Cr, e.Viewport = Me, e.WaterPrimaryMaterial = ae;
}(window.Laya = window.Laya || {}, Laya);