! function(e, t, n) {
    var i = (n.un, n.uns, n["static"]),
        r = n["class"],
        a = n.getset,
        o = n.__newvec,
        s = laya.resource.BaseTexture,
        l = laya.utils.Browser,
        h = laya.webgl.utils.Buffer,
        u = laya.webgl.BufferStateBase,
        c = laya.utils.Byte,
        _ = laya.utils.ClassUtils,
        d = laya.layagl.CommandEncoder,
        f = laya.components.Component,
        m = n.Config,
        p = laya.resource.Context,
        T = (laya.events.Event,
            laya.events.EventDispatcher),
        E = laya.utils.Handler,
        v = (laya.webgl.utils.InlcudeFile,
            laya.layagl.LayaGL),
        g = laya.layagl.LayaGLRunner,
        S = laya.net.Loader,
        y = laya.net.LoaderManager,
        x = laya.maths.MathUtil,
        D = laya.display.Node,
        I = laya.maths.Point,
        R = laya.renders.Render,
        M = (laya.resource.RenderTexture2D,
            laya.resource.Resource),
        A = laya.utils.RunDriver,
        C = (laya.webgl.shader.Shader,
            laya.webgl.utils.ShaderCompile),
        L = laya.webgl.utils.ShaderNode,
        O = laya.display.Sprite,
        N = laya.utils.Stat,
        V = laya.webgl.submit.Submit,
        P = laya.webgl.submit.SubmitKey,
        w = laya.resource.Texture2D,
        b = (laya.utils.Timer,
            laya.net.URL),
        F = laya.webgl.WebGL,
        B = laya.webgl.WebGLContext;
    n["interface"]("laya.d3.core.IClone"), n["interface"]("laya.d3.graphics.IVertex"),
        n["interface"]("laya.d3.core.scene.IOctreeObject");
    var U = function() {
            function e(e, t, n, i, r) {
                void 0 === e && (e = 0), void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 1);
                var a;
                a = r ? r : new Float32Array(4), a[0] = e, a[1] = t, a[2] = n, a[3] = i, this.elements = a;
            }
            r(e, "laya.d3.math.Native.ConchQuaternion");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.scaling = function(e, t) {
                var n = t.elements,
                    i = this.elements;
                n[0] = i[0] * e, n[1] = i[1] * e, n[2] = i[2] * e, n[3] = i[3] * e;
            }, t.normalize = function(t) {
                e._normalizeArray(this.elements, t.elements);
            }, t.length = function() {
                var e = this.elements,
                    t = e[0],
                    n = e[1],
                    i = e[2],
                    r = e[3];
                return Math.sqrt(t * t + n * n + i * i + r * r);
            }, t.rotateX = function(e, t) {
                var n = t.elements,
                    i = this.elements;
                e *= .5;
                var r = i[0],
                    a = i[1],
                    o = i[2],
                    s = i[3],
                    l = Math.sin(e),
                    h = Math.cos(e);
                n[0] = r * h + s * l, n[1] = a * h + o * l, n[2] = o * h - a * l, n[3] = s * h - r * l;
            }, t.rotateY = function(e, t) {
                var n = t.elements,
                    i = this.elements;
                e *= .5;
                var r = i[0],
                    a = i[1],
                    o = i[2],
                    s = i[3],
                    l = Math.sin(e),
                    h = Math.cos(e);
                n[0] = r * h - o * l, n[1] = a * h + s * l, n[2] = o * h + r * l, n[3] = s * h - a * l;
            }, t.rotateZ = function(e, t) {
                var n = t.elements,
                    i = this.elements;
                e *= .5;
                var r = i[0],
                    a = i[1],
                    o = i[2],
                    s = i[3],
                    l = Math.sin(e),
                    h = Math.cos(e);
                n[0] = r * h + a * l, n[1] = a * h - r * l, n[2] = o * h + s * l, n[3] = s * h - o * l;
            }, t.getYawPitchRoll = function(t) {
                G.transformQuat(G.ForwardRH, this, e.TEMPVector31), G.transformQuat(G.Up, this, e.TEMPVector32);
                var n = e.TEMPVector32.elements;
                e.angleTo(G.ZERO, e.TEMPVector31, e.TEMPVector33);
                var i = e.TEMPVector33.elements;
                i[0] == Math.PI / 2 ? (i[1] = e.arcTanAngle(n[2], n[0]), i[2] = 0) : i[0] == -Math.PI / 2 ? (i[1] = e.arcTanAngle(-n[2], -n[0]),
                        i[2] = 0) : (Ht.createRotationY(-i[1], e.TEMPMatrix0), Ht.createRotationX(-i[0], e.TEMPMatrix1),
                        G.transformCoordinate(e.TEMPVector32, e.TEMPMatrix0, e.TEMPVector32), G.transformCoordinate(e.TEMPVector32, e.TEMPMatrix1, e.TEMPVector32),
                        i[2] = e.arcTanAngle(n[1], -n[0])), i[1] <= -Math.PI && (i[1] = Math.PI), i[2] <= -Math.PI && (i[2] = Math.PI),
                    i[1] >= Math.PI && i[2] >= Math.PI && (i[1] = 0, i[2] = 0, i[0] = Math.PI - i[0]);
                var r = t.elements;
                r[0] = i[1], r[1] = i[0], r[2] = i[2];
            }, t.invert = function(e) {
                var t = e.elements,
                    n = this.elements,
                    i = n[0],
                    r = n[1],
                    a = n[2],
                    o = n[3],
                    s = i * i + r * r + a * a + o * o,
                    l = s ? 1 / s : 0;
                t[0] = -i * l, t[1] = -r * l, t[2] = -a * l, t[3] = o * l;
            }, t.identity = function() {
                var e = this.elements;
                e[0] = 0, e[1] = 0, e[2] = 0, e[3] = 1;
            }, t.fromArray = function(e, t) {
                void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1],
                    this.elements[2] = e[t + 2], this.elements[3] = e[t + 3];
            }, t.cloneTo = function(e) {
                var t, n, i;
                if (n = this.elements, i = e.elements, n !== i)
                    for (t = 0; 4 > t; ++t) i[t] = n[t];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.equals = function(e) {
                var t = this.elements,
                    n = e.elements;
                return ie.nearEqual(t[0], n[0]) && ie.nearEqual(t[1], n[1]) && ie.nearEqual(t[2], n[2]) && ie.nearEqual(t[3], n[3]);
            }, t.lengthSquared = function() {
                var e = this.elements[0],
                    t = this.elements[1],
                    n = this.elements[2],
                    i = this.elements[3];
                return e * e + t * t + n * n + i * i;
            }, a(0, t, "x", function() {
                return this.elements[0];
            }, function(e) {
                this.elements[0] = e;
            }), a(0, t, "y", function() {
                return this.elements[1];
            }, function(e) {
                this.elements[1] = e;
            }), a(0, t, "z", function() {
                return this.elements[2];
            }, function(e) {
                this.elements[2] = e;
            }), a(0, t, "w", function() {
                return this.elements[3];
            }, function(e) {
                this.elements[3] = e;
            }), e._dotArray = function(e, t) {
                return e[0] * t[0] + e[1] * t[1] + e[2] * t[2] + e[3] * t[3];
            }, e._normalizeArray = function(e, t) {
                var n = e[0],
                    i = e[1],
                    r = e[2],
                    a = e[3],
                    o = n * n + i * i + r * r + a * a;
                o > 0 && (o = 1 / Math.sqrt(o), t[0] = n * o, t[1] = i * o, t[2] = r * o, t[3] = a * o);
            }, e._lerpArray = function(t, n, i, r) {
                var a = 1 - i;
                e._dotArray(t, n) >= 0 ? (r[0] = a * t[0] + i * n[0], r[1] = a * t[1] + i * n[1],
                        r[2] = a * t[2] + i * n[2], r[3] = a * t[3] + i * n[3]) : (r[0] = a * t[0] - i * n[0],
                        r[1] = a * t[1] - i * n[1], r[2] = a * t[2] - i * n[2], r[3] = a * t[3] - i * n[3]),
                    e._normalizeArray(r, r);
            }, e.createFromYawPitchRoll = function(e, t, n, i) {
                var r = .5 * n,
                    a = .5 * t,
                    o = .5 * e,
                    s = Math.sin(r),
                    l = Math.cos(r),
                    h = Math.sin(a),
                    u = Math.cos(a),
                    c = Math.sin(o),
                    _ = Math.cos(o),
                    d = i.elements;
                d[0] = _ * h * l + c * u * s, d[1] = c * u * l - _ * h * s, d[2] = _ * u * s - c * h * l,
                    d[3] = _ * u * l + c * h * s;
            }, e.multiply = function(e, t, n) {
                var i = e.elements,
                    r = t.elements,
                    a = n.elements,
                    o = i[0],
                    s = i[1],
                    l = i[2],
                    h = i[3],
                    u = r[0],
                    c = r[1],
                    _ = r[2],
                    d = r[3],
                    f = s * _ - l * c,
                    m = l * u - o * _,
                    p = o * c - s * u,
                    T = o * u + s * c + l * _;
                a[0] = o * d + u * h + f, a[1] = s * d + c * h + m, a[2] = l * d + _ * h + p, a[3] = h * d - T;
            }, e.arcTanAngle = function(e, t) {
                return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : 0 > e ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
            }, e.angleTo = function(t, n, i) {
                G.subtract(n, t, e.TEMPVector30), G.normalize(e.TEMPVector30, e.TEMPVector30), i.elements[0] = Math.asin(e.TEMPVector30.y),
                    i.elements[1] = e.arcTanAngle(-e.TEMPVector30.z, -e.TEMPVector30.x);
            }, e.createFromAxisAngle = function(e, t, n) {
                var i = n.elements,
                    r = e.elements;
                t = .5 * t;
                var a = Math.sin(t);
                i[0] = a * r[0], i[1] = a * r[1], i[2] = a * r[2], i[3] = Math.cos(t);
            }, e.createFromMatrix3x3 = function(e, t) {
                var n, i = t.elements,
                    r = e.elements,
                    a = r[0] + r[4] + r[8];
                if (a > 0) n = Math.sqrt(a + 1), i[3] = .5 * n, n = .5 / n, i[0] = (r[5] - r[7]) * n,
                    i[1] = (r[6] - r[2]) * n, i[2] = (r[1] - r[3]) * n;
                else {
                    var o = 0;
                    r[4] > r[0] && (o = 1), r[8] > r[3 * o + o] && (o = 2);
                    var s = (o + 1) % 3,
                        l = (o + 2) % 3;
                    n = Math.sqrt(r[3 * o + o] - r[3 * s + s] - r[3 * l + l] + 1), i[o] = .5 * n, n = .5 / n,
                        i[3] = (r[3 * s + l] - r[3 * l + s]) * n, i[s] = (r[3 * s + o] + r[3 * o + s]) * n,
                        i[l] = (r[3 * l + o] + r[3 * o + l]) * n;
                }
            }, e.createFromMatrix4x4 = function(e, t) {
                var n, i, r = e.elements,
                    a = t.elements,
                    o = r[0] + r[5] + r[10];
                o > 0 ? (n = Math.sqrt(o + 1), a[3] = .5 * n, n = .5 / n, a[0] = (r[6] - r[9]) * n,
                    a[1] = (r[8] - r[2]) * n, a[2] = (r[1] - r[4]) * n) : r[0] >= r[5] && r[0] >= r[10] ? (n = Math.sqrt(1 + r[0] - r[5] - r[10]),
                    i = .5 / n, a[0] = .5 * n, a[1] = (r[1] + r[4]) * i, a[2] = (r[2] + r[8]) * i, a[3] = (r[6] - r[9]) * i) : r[5] > r[10] ? (n = Math.sqrt(1 + r[5] - r[0] - r[10]),
                    i = .5 / n, a[0] = (r[4] + r[1]) * i, a[1] = .5 * n, a[2] = (r[9] + r[6]) * i, a[3] = (r[8] - r[2]) * i) : (n = Math.sqrt(1 + r[10] - r[0] - r[5]),
                    i = .5 / n, a[0] = (r[8] + r[2]) * i, a[1] = (r[9] + r[6]) * i, a[2] = .5 * n, a[3] = (r[1] - r[4]) * i);
            }, e.slerp = function(e, t, n, i) {
                var r, a, o, s, l, h = e.elements,
                    u = t.elements,
                    c = i.elements,
                    _ = h[0],
                    d = h[1],
                    f = h[2],
                    m = h[3],
                    p = u[0],
                    T = u[1],
                    E = u[2],
                    v = u[3];
                return a = _ * p + d * T + f * E + m * v, 0 > a && (a = -a, p = -p, T = -T, E = -E,
                        v = -v), 1 - a > 1e-6 ? (r = Math.acos(a), o = Math.sin(r), s = Math.sin((1 - n) * r) / o,
                        l = Math.sin(n * r) / o) : (s = 1 - n, l = n), c[0] = s * _ + l * p, c[1] = s * d + l * T,
                    c[2] = s * f + l * E, c[3] = s * m + l * v, c;
            }, e.lerp = function(t, n, i, r) {
                e._lerpArray(t.elements, n.elements, i, r.elements);
            }, e.add = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements;
                i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2], i[3] = r[3] + a[3];
            }, e.dot = function(t, n) {
                return e._dotArray(t.elements, n.elements);
            }, e.rotationLookAt = function(t, n, i) {
                e.lookAt(G.ZERO, t, n, i);
            }, e.lookAt = function(t, n, i, r) {
                Bt.lookAt(t, n, i, e._tempMatrix3x3), e.rotationMatrix(e._tempMatrix3x3, r);
            }, e.invert = function(e, t) {
                var n = e.elements,
                    i = t.elements,
                    r = e.lengthSquared();
                ie.isZero(r) || (r = 1 / r, i[0] = -n[0] * r, i[1] = -n[1] * r, i[2] = -n[2] * r,
                    i[3] = n[3] * r);
            }, e.rotationMatrix = function(e, t) {
                var n = e.elements,
                    i = n[0],
                    r = n[1],
                    a = n[2],
                    o = n[3],
                    s = n[4],
                    l = n[5],
                    h = n[6],
                    u = n[7],
                    c = n[8],
                    _ = t.elements,
                    d = NaN,
                    f = NaN,
                    m = i + s + c;
                m > 0 ? (d = Math.sqrt(m + 1), _[3] = .5 * d, d = .5 / d, _[0] = (l - u) * d, _[1] = (h - a) * d,
                    _[2] = (r - o) * d) : i >= s && i >= c ? (d = Math.sqrt(1 + i - s - c), f = .5 / d,
                    _[0] = .5 * d, _[1] = (r + o) * f, _[2] = (a + h) * f, _[3] = (l - u) * f) : s > c ? (d = Math.sqrt(1 + s - i - c),
                    f = .5 / d, _[0] = (o + r) * f, _[1] = .5 * d, _[2] = (u + l) * f, _[3] = (h - a) * f) : (d = Math.sqrt(1 + c - i - s),
                    f = .5 / d, _[0] = (h + a) * f, _[1] = (u + l) * f, _[2] = .5 * d, _[3] = (r - o) * f);
            }, e.DEFAULT = new e(), i(e, ["TEMPVector30", function() {
                return this.TEMPVector30 = new G();
            }, "TEMPVector31", function() {
                return this.TEMPVector31 = new G();
            }, "TEMPVector32", function() {
                return this.TEMPVector32 = new G();
            }, "TEMPVector33", function() {
                return this.TEMPVector33 = new G();
            }, "TEMPMatrix0", function() {
                return this.TEMPMatrix0 = new Ht();
            }, "TEMPMatrix1", function() {
                return this.TEMPMatrix1 = new Ht();
            }, "_tempMatrix3x3", function() {
                return this._tempMatrix3x3 = new Bt();
            }, "NAN", function() {
                return this.NAN = new e(NaN, NaN, NaN, NaN);
            }]), e;
        }(),
        z = function() {
            function e(e, t, n, i) {
                this.elements = null, void 0 === e && (e = 0), void 0 === t && (t = 0), void 0 === n && (n = 0),
                    void 0 === i && (i = 0);
                var r = this.elements = new Float32Array(4);
                r[0] = e, r[1] = t, r[2] = n, r[3] = i;
            }
            r(e, "laya.d3.math.Native.ConchVector4");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.fromArray = function(e, t) {
                void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1],
                    this.elements[2] = e[t + 2], this.elements[3] = e[t + 3];
            }, t.cloneTo = function(e) {
                var t = e,
                    n = t.elements,
                    i = this.elements;
                n[0] = i[0], n[1] = i[1], n[2] = i[2], n[3] = i[3];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.length = function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
            }, t.lengthSquared = function() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            }, a(0, t, "x", function() {
                return this.elements[0];
            }, function(e) {
                this.elements[0] = e;
            }), a(0, t, "y", function() {
                return this.elements[1];
            }, function(e) {
                this.elements[1] = e;
            }), a(0, t, "z", function() {
                return this.elements[2];
            }, function(e) {
                this.elements[2] = e;
            }), a(0, t, "w", function() {
                return this.elements[3];
            }, function(e) {
                this.elements[3] = e;
            }), e.lerp = function(e, t, n, i) {
                var r = i.elements,
                    a = e.elements,
                    o = t.elements,
                    s = a[0],
                    l = a[1],
                    h = a[2],
                    u = a[3];
                r[0] = s + n * (o[0] - s), r[1] = l + n * (o[1] - l), r[2] = h + n * (o[2] - h),
                    r[3] = u + n * (o[3] - u);
            }, e.transformByM4x4 = function(e, t, n) {
                var i = e.elements,
                    r = i[0],
                    a = i[1],
                    o = i[2],
                    s = i[3],
                    l = t.elements,
                    h = n.elements;
                h[0] = r * l[0] + a * l[4] + o * l[8] + s * l[12], h[1] = r * l[1] + a * l[5] + o * l[9] + s * l[13],
                    h[2] = r * l[2] + a * l[6] + o * l[10] + s * l[14], h[3] = r * l[3] + a * l[7] + o * l[11] + s * l[15];
            }, e.equals = function(e, t) {
                var n = e.elements,
                    i = t.elements;
                return ie.nearEqual(Math.abs(n[0]), Math.abs(i[0])) && ie.nearEqual(Math.abs(n[1]), Math.abs(i[1])) && ie.nearEqual(Math.abs(n[2]), Math.abs(i[2])) && ie.nearEqual(Math.abs(n[3]), Math.abs(i[3]));
            }, e.normalize = function(e, t) {
                var n = e.elements,
                    i = t.elements,
                    r = e.length();
                r > 0 && (i[0] = n[0] * r, i[1] = n[1] * r, i[2] = n[2] * r, i[3] = n[3] * r);
            }, e.add = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements;
                i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2], i[3] = r[3] + a[3];
            }, e.subtract = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements;
                i[0] = r[0] - a[0], i[1] = r[1] - a[1], i[2] = r[2] - a[2], i[3] = r[3] - a[3];
            }, e.multiply = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements;
                i[0] = r[0] * a[0], i[1] = r[1] * a[1], i[2] = r[2] * a[2], i[3] = r[3] * a[3];
            }, e.scale = function(e, t, n) {
                var i = n.elements,
                    r = e.elements;
                i[0] = r[0] * t, i[1] = r[1] * t, i[2] = r[2] * t, i[3] = r[3] * t;
            }, e.Clamp = function(e, t, n, i) {
                var r = e.elements,
                    a = r[0],
                    o = r[1],
                    s = r[2],
                    l = r[3],
                    h = t.elements,
                    u = h[0],
                    c = h[1],
                    _ = h[2],
                    d = h[3],
                    f = n.elements,
                    m = f[0],
                    p = f[1],
                    T = f[2],
                    E = f[3],
                    v = i.elements;
                a = a > m ? m : a, a = u > a ? u : a, o = o > p ? p : o, o = c > o ? c : o, s = s > T ? T : s,
                    s = _ > s ? _ : s, l = l > E ? E : l, l = d > l ? d : l, v[0] = a, v[1] = o, v[2] = s,
                    v[3] = l;
            }, e.distanceSquared = function(e, t) {
                var n = e.elements,
                    i = t.elements,
                    r = n[0] - i[0],
                    a = n[1] - i[1],
                    o = n[2] - i[2],
                    s = n[3] - i[3];
                return r * r + a * a + o * o + s * s;
            }, e.distance = function(e, t) {
                var n = e.elements,
                    i = t.elements,
                    r = n[0] - i[0],
                    a = n[1] - i[1],
                    o = n[2] - i[2],
                    s = n[3] - i[3];
                return Math.sqrt(r * r + a * a + o * o + s * s);
            }, e.dot = function(e, t) {
                var n = e.elements,
                    i = t.elements,
                    r = n[0] * i[0] + n[1] * i[1] + n[2] * i[2] + n[3] * i[3];
                return r;
            }, e.min = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements;
                i[0] = Math.min(r[0], a[0]), i[1] = Math.min(r[1], a[1]), i[2] = Math.min(r[2], a[2]),
                    i[3] = Math.min(r[3], a[3]);
            }, e.max = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements;
                i[0] = Math.max(r[0], a[0]), i[1] = Math.max(r[1], a[1]), i[2] = Math.max(r[2], a[2]),
                    i[3] = Math.max(r[3], a[3]);
            }, i(e, ["ZERO", function() {
                return this.ZERO = new e();
            }, "ONE", function() {
                return this.ONE = new e(1, 1, 1, 1);
            }, "UnitX", function() {
                return this.UnitX = new e(1, 0, 0, 0);
            }, "UnitY", function() {
                return this.UnitY = new e(0, 1, 0, 0);
            }, "UnitZ", function() {
                return this.UnitZ = new e(0, 0, 1, 0);
            }, "UnitW", function() {
                return this.UnitW = new e(0, 0, 0, 1);
            }]), e;
        }(),
        G = function() {
            function e(e, t, n, i) {
                this.elements = null, void 0 === e && (e = 0), void 0 === t && (t = 0), void 0 === n && (n = 0);
                var r;
                r = i ? i : new Float32Array(3), this.elements = r, r[0] = e, r[1] = t, r[2] = n;
            }
            r(e, "laya.d3.math.Native.ConchVector3");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.core.IClone": !0
                }), t.setValue = function(e, t, n) {
                    this.elements[0] = e, this.elements[1] = t, this.elements[2] = n;
                }, t.fromArray = function(e, t) {
                    void 0 === t && (t = 0), this.elements[0] = e[t + 0], this.elements[1] = e[t + 1],
                        this.elements[2] = e[t + 2];
                }, t.cloneTo = function(e) {
                    var t = e,
                        n = t.elements,
                        i = this.elements;
                    n[0] = i[0], n[1] = i[1], n[2] = i[2];
                }, t.clone = function() {
                    var e = new this.constructor();
                    return this.cloneTo(e), e;
                }, t.toDefault = function() {
                    this.elements[0] = 0, this.elements[1] = 0, this.elements[2] = 0;
                }, a(0, t, "x", function() {
                    return this.elements[0];
                }, function(e) {
                    this.elements[0] = e;
                }), a(0, t, "y", function() {
                    return this.elements[1];
                }, function(e) {
                    this.elements[1] = e;
                }), a(0, t, "z", function() {
                    return this.elements[2];
                }, function(e) {
                    this.elements[2] = e;
                }), e.distanceSquared = function(e, t) {
                    var n = e.elements,
                        i = t.elements,
                        r = n[0] - i[0],
                        a = n[1] - i[1],
                        o = n[2] - i[2];
                    return r * r + a * a + o * o;
                }, e.distance = function(e, t) {
                    var n = e.elements,
                        i = t.elements,
                        r = n[0] - i[0],
                        a = n[1] - i[1],
                        o = n[2] - i[2];
                    return Math.sqrt(r * r + a * a + o * o);
                }, e.min = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements,
                        a = t.elements;
                    i[0] = Math.min(r[0], a[0]), i[1] = Math.min(r[1], a[1]), i[2] = Math.min(r[2], a[2]);
                }, e.max = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements,
                        a = t.elements;
                    i[0] = Math.max(r[0], a[0]), i[1] = Math.max(r[1], a[1]), i[2] = Math.max(r[2], a[2]);
                }, e.transformQuat = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements,
                        a = t.elements,
                        o = r[0],
                        s = r[1],
                        l = r[2],
                        h = a[0],
                        u = a[1],
                        c = a[2],
                        _ = a[3],
                        d = _ * o + u * l - c * s,
                        f = _ * s + c * o - h * l,
                        m = _ * l + h * s - u * o,
                        p = -h * o - u * s - c * l;
                    i[0] = d * _ + p * -h + f * -c - m * -u, i[1] = f * _ + p * -u + m * -h - d * -c,
                        i[2] = m * _ + p * -c + d * -u - f * -h;
                }, e.scalarLength = function(e) {
                    var t = e.elements,
                        n = t[0],
                        i = t[1],
                        r = t[2];
                    return Math.sqrt(n * n + i * i + r * r);
                }, e.scalarLengthSquared = function(e) {
                    var t = e.elements,
                        n = t[0],
                        i = t[1],
                        r = t[2];
                    return n * n + i * i + r * r;
                }, e.normalize = function(e, t) {
                    var n = e.elements,
                        i = t.elements,
                        r = n[0],
                        a = n[1],
                        o = n[2],
                        s = r * r + a * a + o * o;
                    s > 0 && (s = 1 / Math.sqrt(s), i[0] = n[0] * s, i[1] = n[1] * s, i[2] = n[2] * s);
                }, e.multiply = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements,
                        a = t.elements;
                    i[0] = r[0] * a[0], i[1] = r[1] * a[1], i[2] = r[2] * a[2];
                }, e.scale = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements;
                    i[0] = r[0] * t, i[1] = r[1] * t, i[2] = r[2] * t;
                }, e.lerp = function(e, t, n, i) {
                    var r = i.elements,
                        a = e.elements,
                        o = t.elements,
                        s = a[0],
                        l = a[1],
                        h = a[2];
                    r[0] = s + n * (o[0] - s), r[1] = l + n * (o[1] - l), r[2] = h + n * (o[2] - h);
                }, e.transformV3ToV3 = function(t, n, i) {
                    var r = e._tempVector4;
                    e.transformV3ToV4(t, n, r);
                    var a = r.elements,
                        o = i.elements;
                    o[0] = a[0], o[1] = a[1], o[2] = a[2];
                }, e.transformV3ToV4 = function(e, t, n) {
                    var i = e.elements,
                        r = i[0],
                        a = i[1],
                        o = i[2],
                        s = t.elements,
                        l = n.elements;
                    l[0] = r * s[0] + a * s[4] + o * s[8] + s[12], l[1] = r * s[1] + a * s[5] + o * s[9] + s[13],
                        l[2] = r * s[2] + a * s[6] + o * s[10] + s[14], l[3] = r * s[3] + a * s[7] + o * s[11] + s[15];
                }, e.TransformNormal = function(e, t, n) {
                    var i = e.elements,
                        r = i[0],
                        a = i[1],
                        o = i[2],
                        s = t.elements,
                        l = n.elements;
                    l[0] = r * s[0] + a * s[4] + o * s[8], l[1] = r * s[1] + a * s[5] + o * s[9], l[2] = r * s[2] + a * s[6] + o * s[10];
                }, e.transformCoordinate = function(e, t, n) {
                    var i = e.elements,
                        r = i[0],
                        a = i[1],
                        o = i[2],
                        s = t.elements,
                        l = r * s[3] + a * s[7] + o * s[11] + s[15],
                        h = n.elements;
                    h[0] = r * s[0] + a * s[4] + o * s[8] + s[12] / l, h[1] = r * s[1] + a * s[5] + o * s[9] + s[13] / l,
                        h[2] = r * s[2] + a * s[6] + o * s[10] + s[14] / l;
                }, e.Clamp = function(e, t, n, i) {
                    var r = e.elements,
                        a = r[0],
                        o = r[1],
                        s = r[2],
                        l = t.elements,
                        h = l[0],
                        u = l[1],
                        c = l[2],
                        _ = n.elements,
                        d = _[0],
                        f = _[1],
                        m = _[2],
                        p = i.elements;
                    a = a > d ? d : a, a = h > a ? h : a, o = o > f ? f : o, o = u > o ? u : o, s = s > m ? m : s,
                        s = c > s ? c : s, p[0] = a, p[1] = o, p[2] = s;
                }, e.add = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements,
                        a = t.elements;
                    i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2];
                }, e.subtract = function(e, t, n) {
                    var i = n.elements,
                        r = e.elements,
                        a = t.elements;
                    i[0] = r[0] - a[0], i[1] = r[1] - a[1], i[2] = r[2] - a[2];
                }, e.cross = function(e, t, n) {
                    var i = e.elements,
                        r = t.elements,
                        a = n.elements,
                        o = i[0],
                        s = i[1],
                        l = i[2],
                        h = r[0],
                        u = r[1],
                        c = r[2];
                    a[0] = s * c - l * u, a[1] = l * h - o * c, a[2] = o * u - s * h;
                }, e.dot = function(e, t) {
                    var n = e.elements,
                        i = t.elements,
                        r = n[0] * i[0] + n[1] * i[1] + n[2] * i[2];
                    return r;
                }, e.equals = function(e, t) {
                    var n = e.elements,
                        i = t.elements;
                    return ie.nearEqual(n[0], i[0]) && ie.nearEqual(n[1], i[1]) && ie.nearEqual(n[2], i[2]);
                }, e.ZERO = new e(0, 0, 0), e.ONE = new e(1, 1, 1), e.NegativeUnitX = new e(-1, 0, 0),
                e.UnitX = new e(1, 0, 0), e.UnitY = new e(0, 1, 0), e.UnitZ = new e(0, 0, 1), e.ForwardRH = new e(0, 0, -1),
                e.ForwardLH = new e(0, 0, 1), e.Up = new e(0, 1, 0), e.NAN = new e(NaN, NaN, NaN),
                i(e, ["_tempVector4", function() {
                    return this._tempVector4 = new z();
                }]), e;
        }(),
        H = function() {
            function e(e) {
                this._color = null, this.enbale = !1, this._color = e;
            }
            r(e, "laya.d3.core.particleShuriKen.module.ColorOverLifetime");
            var t = e.prototype;
            return t.cloneTo = function(e) {
                var t = e;
                this._color.cloneTo(t._color), t.enbale = this.enbale;
            }, t.clone = function() {
                var e;
                switch (this._color.type) {
                    case 0:
                        e = re.createByConstant(this._color.constant.clone());
                        break;

                    case 1:
                        e = re.createByGradient(this._color.gradient.clone());
                        break;

                    case 2:
                        e = re.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());
                        break;

                    case 3:
                        e = re.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());
                }
                var t = new this.constructor(e);
                return t.enbale = this.enbale, t;
            }, a(0, t, "color", function() {
                return this._color;
            }), e;
        }(),
        k = function() {
            function e() {
                this.enable = !1, this.randomDirection = !1;
            }
            r(e, "laya.d3.core.particleShuriKen.module.shape.BaseShape");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t._getShapeBoundBox = function(e) {
                throw new Error("BaseShape: must override it.");
            }, t._getSpeedBoundBox = function(e) {
                throw new Error("BaseShape: must override it.");
            }, t.generatePositionAndDirection = function(e, t, n, i) {
                throw new Error("BaseShape: must override it.");
            }, t._calculateProceduralBounds = function(e, t, n) {
                this._getShapeBoundBox(e);
                var i = e.min,
                    r = e.max;
                Te.multiply(i, t, i), Te.multiply(r, t, r);
                var a = new zt(new Te(), new Te());
                this.randomDirection ? (a.min = new Te(-1, -1, -1), a.max = new Te(1, 1, 1)) : this._getSpeedBoundBox(a);
                var o = new zt(new Te(), new Te()),
                    s = o.min,
                    l = o.max;
                Te.scale(a.min, n.y, s), Te.scale(a.max, n.y, l), Te.add(e.min, s, s), Te.add(e.max, l, l),
                    Te.min(e.min, s, e.min), Te.max(e.max, s, e.max);
                var h = new zt(new Te(), new Te()),
                    u = h.min,
                    c = h.max;
                Te.scale(a.min, n.x, u), Te.scale(a.max, n.x, c), Te.min(h.min, c, s), Te.max(h.min, c, l),
                    Te.min(e.min, s, e.min), Te.max(e.max, s, e.max);
            }, t.cloneTo = function(e) {
                var t = e;
                t.enable = this.enable;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, e;
        }(),
        X = function() {
            function e() {
                this._attatched = !1, this._indexInCompound = -1, this._compoundParent = null, this._attatchedCollisionObject = null,
                    this._referenceCount = 0, this.needsCustomCollisionCallback = !1, this._scale = new Te(1, 1, 1),
                    this._centerMatrix = new Ht(), this._localOffset = new Te(0, 0, 0), this._localRotation = new he(0, 0, 0, 1);
            }
            r(e, "laya.d3.physics.shape.ColliderShape");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.core.IClone": !0
                }), t._setScale = function(t) {
                    this._compoundParent ? this.updateLocalTransformations() : (e._nativeScale.setValue(t.x, t.y, t.z),
                        this._nativeShape.setLocalScaling(e._nativeScale));
                }, t._addReference = function() {
                    this._referenceCount++;
                }, t._removeReference = function() {
                    this._referenceCount--;
                }, t.updateLocalTransformations = function() {
                    if (this._compoundParent) {
                        var t = e._tempVector30;
                        Te.multiply(this.localOffset, this._scale, t), e._createAffineTransformation(t, this.localRotation, this._centerMatrix.elements);
                    } else e._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);
                }, t.cloneTo = function(e) {
                    var t = e;
                    this._localOffset.cloneTo(t.localOffset), this._localRotation.cloneTo(t.localRotation),
                        t.localOffset = t.localOffset, t.localRotation = t.localRotation;
                }, t.clone = function() {
                    return null;
                }, t.destroy = function() {
                    this._nativeShape && (W._physics3D.destroy(this._nativeShape), this._nativeShape = null);
                }, a(0, t, "type", function() {
                    return this._type;
                }), a(0, t, "localOffset", function() {
                    return this._localOffset;
                }, function(e) {
                    this._localOffset = e, this._compoundParent && this._compoundParent._updateChildTransform(this);
                }), a(0, t, "localRotation", function() {
                    return this._localRotation;
                }, function(e) {
                    this._localRotation = e, this._compoundParent && this._compoundParent._updateChildTransform(this);
                }), e._creatShape = function(e) {
                    var t;
                    switch (e.type) {
                        case "BoxColliderShape":
                            var n = e.size;
                            t = n ? new hn(n[0], n[1], n[2]) : new hn();
                            break;

                        case "SphereColliderShape":
                            t = new en(e.radius);
                            break;

                        case "CapsuleColliderShape":
                            t = new an(e.radius, e.height, e.orientation);
                            break;

                        case "MeshColliderShape":
                            var i = new Dn();
                            e.mesh && (i.mesh = S.getRes(e.mesh)), t = i;
                            break;

                        case "ConeColliderShape":
                            t = new On(e.radius, e.height, e.orientation);
                            break;

                        case "CylinderColliderShape":
                            t = new pn(e.radius, e.height, e.orientation);
                            break;

                        default:
                            throw "unknown shape type.";
                    }
                    if (e.center) {
                        var r = t.localOffset;
                        r.fromArray(e.center), t.localOffset = r;
                    }
                    return t;
                }, e._createAffineTransformation = function(e, t, n) {
                    var i = t.x,
                        r = t.y,
                        a = t.z,
                        o = t.w,
                        s = i + i,
                        l = r + r,
                        h = a + a,
                        u = i * s,
                        c = i * l,
                        _ = i * h,
                        d = r * l,
                        f = r * h,
                        m = a * h,
                        p = o * s,
                        T = o * l,
                        E = o * h;
                    n[0] = 1 - (d + m), n[1] = c + E, n[2] = _ - T, n[3] = 0, n[4] = c - E, n[5] = 1 - (u + m),
                        n[6] = f + p, n[7] = 0, n[8] = _ + T, n[9] = f - p, n[10] = 1 - (u + d), n[11] = 0,
                        n[12] = e.x, n[13] = e.y, n[14] = e.z, n[15] = 1;
                }, e.SHAPEORIENTATION_UPX = 0, e.SHAPEORIENTATION_UPY = 1, e.SHAPEORIENTATION_UPZ = 2,
                e.SHAPETYPES_BOX = 0, e.SHAPETYPES_SPHERE = 1, e.SHAPETYPES_CYLINDER = 2, e.SHAPETYPES_CAPSULE = 3,
                e.SHAPETYPES_CONVEXHULL = 4, e.SHAPETYPES_COMPOUND = 5, e.SHAPETYPES_STATICPLANE = 6,
                e.SHAPETYPES_CONE = 7, i(e, ["_tempVector30", function() {
                    return this._tempVector30 = new Te();
                }, "_nativeScale", function() {
                    return this._nativeScale = new W._physics3D.btVector3(1, 1, 1);
                }, "_nativeVector30", function() {
                    return this._nativeVector30 = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativQuaternion0", function() {
                    return this._nativQuaternion0 = new W._physics3D.btQuaternion(0, 0, 0, 1);
                }, "_nativeTransform0", function() {
                    return this._nativeTransform0 = new W._physics3D.btTransform();
                }]), e;
        }(),
        W = function() {
            function t() {}
            return r(t, "Laya3D"), a(1, t, "enbalePhysics", function() {
                    return t._enbalePhysics;
                }), t._cancelLoadByUrl = function(e) {
                    n.loader.cancelLoadByUrl(e), t._innerFirstLevelLoaderManager.cancelLoadByUrl(e),
                        t._innerSecondLevelLoaderManager.cancelLoadByUrl(e), t._innerThirdLevelLoaderManager.cancelLoadByUrl(e),
                        t._innerFourthLevelLoaderManager.cancelLoadByUrl(e);
                }, t._changeWebGLSize = function(e, t) {
                    F.onStageResize(e, t), J.clientWidth = e, J.clientHeight = t;
                }, t.__init__ = function(e, i, r) {
                    if (m.isAntialias = r.isAntialias, m.isAlpha = r.isAlpha, m.premultipliedAlpha = r.premultipliedAlpha,
                        m.isStencil = r.isStencil, !F.enable()) return void alert("Laya3D init error,must support webGL!");
                    A.changeWebGLSize = t._changeWebGLSize, R.is3DMode = !0, n.init(e, i), R.supportWebGLPlusRendering || (v.instance = F.mainContext,
                            v.instance.createCommandEncoder = function(e, t, n) {
                                return void 0 === e && (e = 128), void 0 === t && (t = 64), void 0 === n && (n = !1),
                                    new d(this, e, t, n);
                            }), t.enableNative3D(), Fn.__init__(), Jn.__init__(), Ei.__init__(), Di.__init__(),
                        yi.__init__(), Bn.__init__(), ci.__init__(), oi.__init__(), fi.__init__(), ii.__init__(),
                        $n.__init__(), Si.__init__(), ni.__init__(), li.__init__(), hi.__init__(), si.__init__(),
                        _i.__init__(), ui.__init__(), He.__init__(), ri.defaultMaterial.lock = !0, ci.defaultMaterial.lock = !0,
                        li.defaultMaterial.lock = !0, oi.defaultMaterial.lock = !0, fi.defaultMaterial.lock = !0,
                        $n.defaultMaterial.lock = !0, si.defaultMaterial.lock = !0, ni.defaultMaterial.lock = !0,
                        ii.defaultMaterial.lock = !0, di.defaultMaterial.lock = !0, hi.defaultMaterial.lock = !0,
                        w.__init__(), Ti.__init__(), xn.__init__(), Ln.__init__(), Un.__init__(), Rt.__init__(),
                        wt.__init__(), Ce.__init__();
                    var a = y.createMap;
                    a.lh = ["HIERARCHY", Fn._parse], a.ls = ["HIERARCHY", Qn._parse], a.lm = ["MESH", Gn._parse],
                        a.lmat = ["MATERIAL", Bn._parse], a.ltc = ["TEXTURECUBE", Ti._parse], a.jpg = ["TEXTURE2D", w._parse],
                        a.jpeg = ["TEXTURE2D", w._parse], a.bmp = ["TEXTURE2D", w._parse], a.gif = ["TEXTURE2D", w._parse],
                        a.png = ["TEXTURE2D", w._parse], a.dds = ["TEXTURE2D", w._parse], a.ktx = ["TEXTURE2D", w._parse],
                        a.pvr = ["TEXTURE2D", w._parse], a.lani = ["ANIMATIONCLIP", kn._parse], a.lav = ["AVATAR", zn._parse],
                        a.thdata = ["TERRAINHEIGHTDATA", Hn._pharse];
                    var o = S.parserMap;
                    o.HIERARCHY = t._loadHierarchy, o.MESH = t._loadMesh, o.MATERIAL = t._loadMaterial,
                        o.TEXTURECUBE = t._loadTextureCube, o.TEXTURE2D = t._loadTexture2D, o.ANIMATIONCLIP = t._loadAnimationClip,
                        o.AVATAR = t._loadAvatar, t._innerFirstLevelLoaderManager.on("error", null, t._eventLoadManagerError),
                        t._innerSecondLevelLoaderManager.on("error", null, t._eventLoadManagerError), t._innerThirdLevelLoaderManager.on("error", null, t._eventLoadManagerError),
                        t._innerFourthLevelLoaderManager.on("error", null, t._eventLoadManagerError);
                }, t.enableNative3D = function() {
                    if (R.isConchApp) {
                        v = e.LayaGLContext;
                        var t = ue,
                            n = Xn,
                            i = zn,
                            r = wt,
                            a = jn;
                        if (R.supportWebGLPlusRendering && (t.prototype._initData = t.prototype._initDataForNative,
                                t.prototype.setBool = t.prototype.setBoolForNative, t.prototype.getBool = t.prototype.getBoolForNative,
                                t.prototype.setInt = t.prototype.setIntForNative, t.prototype.getInt = t.prototype.getIntForNative,
                                t.prototype.setNumber = t.prototype.setNumberForNative, t.prototype.getNumber = t.prototype.getNumberForNative,
                                t.prototype.setVector = t.prototype.setVectorForNative, t.prototype.getVector = t.prototype.getVectorForNative,
                                t.prototype.setVector2 = t.prototype.setVector2ForNative, t.prototype.getVector2 = t.prototype.getVector2ForNative,
                                t.prototype.setVector3 = t.prototype.setVector3ForNative, t.prototype.getVector3 = t.prototype.getVector3ForNative,
                                t.prototype.setQuaternion = t.prototype.setQuaternionForNative, t.prototype.getQuaternion = t.prototype.getQuaternionForNative,
                                t.prototype.setMatrix4x4 = t.prototype.setMatrix4x4ForNative, t.prototype.getMatrix4x4 = t.prototype.getMatrix4x4ForNative,
                                t.prototype.setBuffer = t.prototype.setBufferForNative, t.prototype.getBuffer = t.prototype.getBufferForNative,
                                t.prototype.setTexture = t.prototype.setTextureForNative, t.prototype.getTexture = t.prototype.getTextureForNative,
                                t.prototype.setAttribute = t.prototype.setAttributeForNative, t.prototype.getAttribute = t.prototype.getAttributeForNative,
                                t.prototype.cloneTo = t.prototype.cloneToForNative, t.prototype.getData = t.prototype.getDataForNative,
                                n.prototype._uniformMatrix2fv = n.prototype._uniformMatrix2fvForNative, n.prototype._uniformMatrix3fv = n.prototype._uniformMatrix3fvForNative,
                                n.prototype._uniformMatrix4fv = n.prototype._uniformMatrix4fvForNative, a.prototype._renderUpdateWithCamera = a.prototype._renderUpdateWithCameraForNative),
                            R.supportWebGLPlusCulling && (r.renderObjectCulling = wt.renderObjectCullingNative),
                            R.supportWebGLPlusAnimation) {
                            i.prototype._cloneDatasToAnimator = i.prototype._cloneDatasToAnimatorNative, Tn = e.conchFloatKeyframe,
                                Cn = e.conchFloatArrayKeyframe, Vn = e.conchFloatArrayKeyframe, St = e.conchKeyframeNode,
                                Qe = e.conchKeyframeNodeList;
                            var o = kn;
                            o.prototype._evaluateClipDatasRealTime = o.prototype._evaluateClipDatasRealTimeForNative;
                        }
                    }
                    F.shaderHighPrecision = !1;
                    var s = v.instance.getShaderPrecisionFormat(35632, 36338);
                    s.precision ? F.shaderHighPrecision = !0 : F.shaderHighPrecision = !1;
                }, t.formatRelativePath = function(e, t) {
                    var n;
                    n = e + t;
                    var i = t.charAt(0);
                    if ("." === i) {
                        for (var r = n.split("/"), a = 0, o = r.length; o > a; a++)
                            if (".." == r[a]) {
                                var s = a - 1;
                                s > 0 && ".." !== r[s] && (r.splice(s, 2), a -= 2);
                            }
                        n = r.join("/");
                    }
                    return n;
                }, t._endLoad = function(e, t, n) {
                    if (n)
                        for (var i = 0, r = n.length; r > i; i++) {
                            var a = S.getRes(n[i]);
                            a && a._removeReference();
                        }
                    e.endLoad(t);
                }, t._eventLoadManagerError = function(e) {
                    n.loader.event("error", e);
                }, t._addHierarchyInnerUrls = function(e, n, i, r, a, o, s, l) {
                    var h = t.formatRelativePath(r, a);
                    return i && (h += i), e.push({
                        url: h,
                        type: o,
                        constructParams: s,
                        propertyParams: l
                    }), n.push(h), h;
                }, t._getSprite3DHierarchyInnerUrls = function(e, n, i, r, a, o, s, l) {
                    var h = 0,
                        u = 0,
                        c = e.props;
                    switch (e.type) {
                        case "Scene3D":
                            var _ = c.lightmaps;
                            for (h = 0, u = _.length; u > h; h++) {
                                var d = _[h];
                                d.path = t._addHierarchyInnerUrls(a, o, s, l, d.path, "TEXTURE2D", d.constructParams, d.propertyParams);
                            }
                            var f = c.reflectionTexture;
                            if (f && (c.reflectionTexture = t._addHierarchyInnerUrls(r, o, s, l, f, "TEXTURECUBE")),
                                c.sky) {
                                var m = c.sky.material;
                                m && (m.path = t._addHierarchyInnerUrls(i, o, s, l, m.path, "MATERIAL"));
                            }
                            break;

                        case "Camera":
                            var p = c.skyboxMaterial;
                            p && (p.path = t._addHierarchyInnerUrls(i, o, s, l, p.path, "MATERIAL"));
                            break;

                        case "TrailSprite3D":
                        case "MeshSprite3D":
                        case "SkinnedMeshSprite3D":
                            var T = c.meshPath;
                            T && (c.meshPath = t._addHierarchyInnerUrls(n, o, s, l, T, "MESH"));
                            var E = c.materials;
                            if (E)
                                for (h = 0, u = E.length; u > h; h++) E[h].path = t._addHierarchyInnerUrls(i, o, s, l, E[h].path, "MATERIAL");
                            break;

                        case "ShuriKenParticle3D":
                            var v = c.meshPath;
                            v && (c.meshPath = t._addHierarchyInnerUrls(n, o, s, l, v, "MESH")), c.material.path = t._addHierarchyInnerUrls(i, o, s, l, c.material.path, "MATERIAL");
                            break;

                        case "Terrain":
                            t._addHierarchyInnerUrls(a, o, s, l, c.dataPath, "TERRAIN");
                    }
                    var g = e.components;
                    if (g)
                        for (var S = 0, y = g.length; y > S; S++) {
                            var x = g[S];
                            switch (x.type) {
                                case "Animator":
                                    var D = (x.avatarPath, x.avatar);
                                    D && (D.path = t._addHierarchyInnerUrls(a, o, s, l, D.path, "AVATAR"));
                                    var I = x.clipPaths;
                                    if (I)
                                        for (h = 0, u = I.length; u > h; h++) I[h] = t._addHierarchyInnerUrls(a, o, s, l, I[h], "ANIMATIONCLIP");
                                    else {
                                        var R = x.layers;
                                        for (h = 0; h < R.length; h++)
                                            for (var M = R[h].states, A = 0, C = M.length; C > A; A++) {
                                                var L = M[A].clipPath;
                                                L && (M[A].clipPath = t._addHierarchyInnerUrls(a, o, s, l, L, "ANIMATIONCLIP"));
                                            }
                                    }
                                    break;

                                case "PhysicsCollider":
                                case "Rigidbody3D":
                                case "CharacterController":
                                    var O = x.shapes;
                                    for (h = 0; h < O.length; h++) {
                                        var N = O[h];
                                        if ("MeshColliderShape" === N.type) {
                                            var V = N.mesh;
                                            V && (N.mesh = t._addHierarchyInnerUrls(n, o, s, l, V, "MESH"));
                                        }
                                    }
                            }
                        }
                    var P = e.child;
                    for (h = 0, u = P.length; u > h; h++) t._getSprite3DHierarchyInnerUrls(P[h], n, i, r, a, o, s, l);
                }, t._loadHierarchy = function(e) {
                    e.on("loaded", null, t._onHierarchylhLoaded, [e]), e.load(e.url, "json", !1, null, !0);
                }, t._onHierarchylhLoaded = function(e, n) {
                    var i = e.url,
                        r = ke.getURLVerion(i),
                        a = b.getPath(i),
                        o = [],
                        s = [],
                        l = [],
                        h = [],
                        u = [];
                    t._getSprite3DHierarchyInnerUrls(n.data, o, s, l, h, u, r, a);
                    var c = o.length + s.length + h.length,
                        _ = c + 1,
                        d = 1 / _;
                    if (t._onProcessChange(e, 0, d, 1), h.length > 0) {
                        var f = c / _,
                            m = E.create(null, t._onProcessChange, [e, d, f], !1);
                        t._innerFourthLevelLoaderManager._create(h, !1, E.create(null, t._onHierarchyInnerForthLevResouLoaded, [e, m, n, u, o, s, l, d + f * h.length, f]), m, null, null, null, 1, !0);
                    } else t._onHierarchyInnerForthLevResouLoaded(e, null, n, u, o, s, l, d, f);
                }, t._onHierarchyInnerForthLevResouLoaded = function(e, n, i, r, a, o, s, l, h) {
                    if (n && n.recover(), s.length > 0) {
                        var u = E.create(null, t._onProcessChange, [e, l, h], !1);
                        t._innerThirdLevelLoaderManager._create(s, !1, E.create(null, t._onHierarchyInnerThirdLevResouLoaded, [e, u, i, r, a, o, l + h * o.length, h]), n, null, null, null, 1, !0);
                    } else t._onHierarchyInnerThirdLevResouLoaded(e, null, i, r, a, o, l, h);
                }, t._onHierarchyInnerThirdLevResouLoaded = function(e, n, i, r, a, o, s, l) {
                    if (n && n.recover(), o.length > 0) {
                        var h = E.create(null, t._onProcessChange, [e, s, l], !1);
                        t._innerSecondLevelLoaderManager._create(o, !1, E.create(null, t._onHierarchyInnerSecondLevResouLoaded, [e, h, i, r, a, s + l * o.length, l]), n, null, null, null, 1, !0);
                    } else t._onHierarchyInnerSecondLevResouLoaded(e, null, i, r, a, s, l);
                }, t._onHierarchyInnerSecondLevResouLoaded = function(e, n, i, r, a, o, s) {
                    if (n && n.recover(), a.length > 0) {
                        var l = E.create(null, t._onProcessChange, [e, o, s], !1);
                        t._innerFirstLevelLoaderManager._create(a, !1, E.create(null, t._onHierarchyInnerFirstLevResouLoaded, [e, l, i, r]), n, null, null, null, 1, !0);
                    } else t._onHierarchyInnerFirstLevResouLoaded(e, null, i, r);
                }, t._onHierarchyInnerFirstLevResouLoaded = function(e, n, i, r) {
                    n && n.recover(), e._cache = e._createCache;
                    var a = "Scene3D" === i.data.type ? Qn._parse(i, e._propertyParams, e._constructParams) : Fn._parse(i, e._propertyParams, e._constructParams);
                    t._endLoad(e, a, r);
                }, t._loadMesh = function(e) {
                    e.on("loaded", null, t._onMeshLmLoaded, [e]), e.load(e.url, "arraybuffer", !1, null, !0);
                }, t._onMeshLmLoaded = function(e, n) {
                    e._cache = e._createCache;
                    var i = Gn._parse(n, e._propertyParams, e._constructParams);
                    t._endLoad(e, i);
                }, t._loadMaterial = function(e) {
                    e.on("loaded", null, t._onMaterilLmatLoaded, [e]), e.load(e.url, "json", !1, null, !0);
                }, t._onMaterilLmatLoaded = function(e, n) {
                    var i, r = e.url,
                        a = ke.getURLVerion(r),
                        o = b.getPath(r),
                        s = [],
                        l = [],
                        h = (n.customProps,
                            n.version);
                    switch (h) {
                        case "LAYAMATERIAL:01":
                        case "LAYAMATERIAL:02":
                            var u = 0,
                                c = 0,
                                _ = n.props.textures;
                            if (_)
                                for (u = 0, c = _.length; c > u; u++) {
                                    var d = _[u],
                                        f = d.path;
                                    f && (i = t.formatRelativePath(o, f), a && (i += a), s.push({
                                        url: i,
                                        constructParams: d.constructParams,
                                        propertyParams: d.propertyParams
                                    }), l.push(i), d.path = i);
                                }
                            break;

                        default:
                            throw new Error("Laya3D:unkonwn version.");
                    }
                    var m = s.length,
                        p = m + 1,
                        T = 1 / p;
                    if (t._onProcessChange(e, 0, T, 1), m > 0) {
                        var v = E.create(null, t._onProcessChange, [e, T, m / p], !1);
                        t._innerFourthLevelLoaderManager._create(s, !1, E.create(null, t._onMateialTexturesLoaded, [e, v, n, l]), v, null, null, null, 1, !0);
                    } else t._onMateialTexturesLoaded(e, null, n, null);
                }, t._onMateialTexturesLoaded = function(e, n, i, r) {
                    e._cache = e._createCache;
                    var a = Bn._parse(i, e._propertyParams, e._constructParams);
                    t._endLoad(e, a, r), n && n.recover();
                }, t._loadAvatar = function(e) {
                    e.on("loaded", null, function(n) {
                        e._cache = e._createCache;
                        var i = zn._parse(n, e._propertyParams, e._constructParams);
                        t._endLoad(e, i);
                    }), e.load(e.url, "json", !1, null, !0);
                }, t._loadAnimationClip = function(e) {
                    e.on("loaded", null, function(n) {
                        e._cache = e._createCache;
                        var i = kn._parse(n, e._propertyParams, e._constructParams);
                        t._endLoad(e, i);
                    }), e.load(e.url, "arraybuffer", !1, null, !0);
                }, t._loadTexture2D = function(e) {
                    var n, i = e.url,
                        r = i.lastIndexOf(".") + 1,
                        a = i.indexOf("?"),
                        o = -1 == a ? i.length : a,
                        s = i.substr(r, o - r);
                    switch (s) {
                        case "jpg":
                        case "jpeg":
                        case "bmp":
                        case "gif":
                        case "png":
                            n = "nativeimage";
                            break;

                        case "dds":
                        case "ktx":
                        case "pvr":
                            n = "arraybuffer";
                    }
                    e.on("loaded", null, function(n) {
                        e._cache = e._createCache;
                        var i = w._parse(n, e._propertyParams, e._constructParams);
                        t._endLoad(e, i);
                    }), e.load(e.url, n, !1, null, !0);
                }, t._loadTextureCube = function(e) {
                    e.on("loaded", null, t._onTextureCubeLtcLoaded, [e]), e.load(e.url, "json", !1, null, !0);
                }, t._onTextureCubeLtcLoaded = function(e, n) {
                    var i = b.getPath(e.url),
                        r = [t.formatRelativePath(i, n.front), t.formatRelativePath(i, n.back), t.formatRelativePath(i, n.left), t.formatRelativePath(i, n.right), t.formatRelativePath(i, n.up), t.formatRelativePath(i, n.down)],
                        a = 1 / 7;
                    t._onProcessChange(e, 0, a, 1);
                    var o = E.create(null, t._onProcessChange, [e, a, 6 / 7], !1);
                    t._innerFourthLevelLoaderManager.load(r, E.create(null, t._onTextureCubeImagesLoaded, [e, r, o]), o, "nativeimage");
                }, t._onTextureCubeImagesLoaded = function(e, n, i) {
                    for (var r = new Array(6), a = 0; 6 > a; a++) r[a] = S.getRes(n[a]);
                    e._cache = e._createCache;
                    var o = Ti._parse(r, e._propertyParams, e._constructParams);
                    for (i.recover(), a = 0; 6 > a; a++) S.clearRes(n[a]);
                    t._endLoad(e, o);
                }, t._onProcessChange = function(e, t, n, i) {
                    i = t + i * n, 1 > i && e.event("progress", i);
                }, t.init = function(n, i, r, a) {
                    if (!t._isInit) {
                        t._isInit = !0, r = r || ut._default, r.cloneTo(t._config), t._editerEnvironment = t._config._editerEnvironment;
                        var o = e.Physics3D;
                        null == o ? (t._enbalePhysics = !1, t.__init__(n, i, t._config), a && a.run()) : (t._enbalePhysics = !0,
                            o(1024 * t._config.defaultPhysicsMemory * 1024).then(function() {
                                t.__init__(n, i, t._config), a && a.run();
                            }));
                    }
                }, t.HIERARCHY = "HIERARCHY", t.MESH = "MESH", t.MATERIAL = "MATERIAL", t.TEXTURE2D = "TEXTURE2D",
                t.TEXTURECUBE = "TEXTURECUBE", t.ANIMATIONCLIP = "ANIMATIONCLIP", t.AVATAR = "AVATAR",
                t.TERRAINHEIGHTDATA = "TERRAINHEIGHTDATA", t.TERRAINRES = "TERRAIN", t._isInit = !1,
                t._enbalePhysics = !1, t._editerEnvironment = !1, i(t, ["_innerFirstLevelLoaderManager", function() {
                    return this._innerFirstLevelLoaderManager = new y();
                }, "_innerSecondLevelLoaderManager", function() {
                    return this._innerSecondLevelLoaderManager = new y();
                }, "_innerThirdLevelLoaderManager", function() {
                    return this._innerThirdLevelLoaderManager = new y();
                }, "_innerFourthLevelLoaderManager", function() {
                    return this._innerFourthLevelLoaderManager = new y();
                }, "_physics3D", function() {
                    return this._physics3D = e.Physics3D;
                }, "_config", function() {
                    return this._config = new ut();
                }, "physicsSettings", function() {
                    return this.physicsSettings = new ae();
                }]), t;
        }(),
        Y = function() {
            function e() {
                this._type = 0, this._constant = 0, this._overTime = null, this._constantMin = 0,
                    this._constantMax = 0, this._overTimeMin = null, this._overTimeMax = null;
            }
            r(e, "laya.d3.core.particleShuriKen.module.FrameOverTime");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._type = this._type, t._constant = this._constant, this._overTime.cloneTo(t._overTime),
                    t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._overTimeMin.cloneTo(t._overTimeMin),
                    this._overTimeMax.cloneTo(t._overTimeMax);
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "frameOverTimeData", function() {
                return this._overTime;
            }), a(0, t, "constant", function() {
                return this._constant;
            }), a(0, t, "type", function() {
                return this._type;
            }), a(0, t, "frameOverTimeDataMin", function() {
                return this._overTimeMin;
            }), a(0, t, "constantMin", function() {
                return this._constantMin;
            }), a(0, t, "frameOverTimeDataMax", function() {
                return this._overTimeMax;
            }), a(0, t, "constantMax", function() {
                return this._constantMax;
            }), e.createByConstant = function(t) {
                var n = new e();
                return n._type = 0, n._constant = t, n;
            }, e.createByOverTime = function(t) {
                var n = new e();
                return n._type = 1, n._overTime = t, n;
            }, e.createByRandomTwoConstant = function(t, n) {
                var i = new e();
                return i._type = 2, i._constantMin = t, i._constantMax = n, i;
            }, e.createByRandomTwoOverTime = function(t, n) {
                var i = new e();
                return i._type = 3, i._overTimeMin = t, i._overTimeMax = n, i;
            }, e;
        }(),
        Z = function() {
            function e() {
                this.cull = 0, this.blend = 0, this.srcBlend = 0, this.dstBlend = 0, this.srcBlendRGB = 0,
                    this.dstBlendRGB = 0, this.srcBlendAlpha = 0, this.dstBlendAlpha = 0, this.blendConstColor = null,
                    this.blendEquation = 0, this.blendEquationRGB = 0, this.blendEquationAlpha = 0,
                    this.depthTest = 0, this.depthWrite = !1, this.cull = 2, this.blend = 0, this.srcBlend = 1,
                    this.dstBlend = 0, this.srcBlendRGB = 1, this.dstBlendRGB = 0, this.srcBlendAlpha = 1,
                    this.dstBlendAlpha = 0, this.blendConstColor = new me(1, 1, 1, 1), this.blendEquation = 0,
                    this.blendEquationRGB = 0, this.blendEquationAlpha = 0, this.depthTest = 515, this.depthWrite = !0;
            }
            r(e, "laya.d3.core.material.RenderState");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.core.IClone": !0
                }), t.cloneTo = function(e) {
                    var t = e;
                    t.cull = this.cull, t.blend = this.blend, t.srcBlend = this.srcBlend, t.dstBlend = this.dstBlend,
                        t.srcBlendRGB = this.srcBlendRGB, t.dstBlendRGB = this.dstBlendRGB, t.srcBlendAlpha = this.srcBlendAlpha,
                        t.dstBlendAlpha = this.dstBlendAlpha, this.blendConstColor.cloneTo(t.blendConstColor),
                        t.blendEquation = this.blendEquation, t.blendEquationRGB = this.blendEquationRGB,
                        t.blendEquationAlpha = this.blendEquationAlpha, t.depthTest = this.depthTest, t.depthWrite = this.depthWrite;
                }, t.clone = function() {
                    var e = new this.constructor();
                    return this.cloneTo(e), e;
                }, e.CULL_NONE = 0, e.CULL_FRONT = 1, e.CULL_BACK = 2, e.BLEND_DISABLE = 0, e.BLEND_ENABLE_ALL = 1,
                e.BLEND_ENABLE_SEPERATE = 2, e.BLENDPARAM_ZERO = 0, e.BLENDPARAM_ONE = 1, e.BLENDPARAM_SRC_COLOR = 768,
                e.BLENDPARAM_ONE_MINUS_SRC_COLOR = 769, e.BLENDPARAM_DST_COLOR = 774, e.BLENDPARAM_ONE_MINUS_DST_COLOR = 775,
                e.BLENDPARAM_SRC_ALPHA = 770, e.BLENDPARAM_ONE_MINUS_SRC_ALPHA = 771, e.BLENDPARAM_DST_ALPHA = 772,
                e.BLENDPARAM_ONE_MINUS_DST_ALPHA = 773, e.BLENDPARAM_SRC_ALPHA_SATURATE = 776, e.BLENDEQUATION_ADD = 0,
                e.BLENDEQUATION_SUBTRACT = 1, e.BLENDEQUATION_REVERSE_SUBTRACT = 2, e.DEPTHTEST_OFF = 0,
                e.DEPTHTEST_NEVER = 512, e.DEPTHTEST_LESS = 513, e.DEPTHTEST_EQUAL = 514, e.DEPTHTEST_LEQUAL = 515,
                e.DEPTHTEST_GREATER = 516, e.DEPTHTEST_NOTEQUAL = 517, e.DEPTHTEST_GEQUAL = 518,
                e.DEPTHTEST_ALWAYS = 519, e;
        }(),
        j = function() {
            function e(e, t) {
                this.origin = null, this.direction = null, this.origin = e, this.direction = t;
            }
            return r(e, "laya.d3.math.Ray"), e;
        }(),
        K = function() {
            function e() {
                this._idCounter = 0, this.colliderA = null, this.colliderB = null, this.distance = 0,
                    this.normal = new Te(), this.positionOnA = new Te(), this.positionOnB = new Te(),
                    this._id = ++this._idCounter;
            }
            return r(e, "laya.d3.physics.ContactPoint"), e;
        }(),
        q = function() {
            function e() {
                this._initBatchSprites = [], this._staticBatches = {}, this._batchRenderElementPoolIndex = 0,
                    this._batchRenderElementPool = [];
            }
            r(e, "laya.d3.graphics.StaticBatchManager");
            var t = e.prototype;
            return t._partition = function(e, t, n) {
                for (var i = e[Math.floor((n + t) / 2)]; n >= t;) {
                    for (; this._compare(e[t], i) < 0;) t++;
                    for (; this._compare(e[n], i) > 0;) n--;
                    if (n > t) {
                        var r = e[t];
                        e[t] = e[n], e[n] = r, t++, n--;
                    } else if (t === n) {
                        t++;
                        break;
                    }
                }
                return t;
            }, t._quickSort = function(e, t, n) {
                if (e.length > 1) {
                    var i = this._partition(e, t, n),
                        r = i - 1;
                    r > t && this._quickSort(e, t, r), n > i && this._quickSort(e, i, n);
                }
            }, t._compare = function(e, t) {
                throw "StaticBatch:must override this function.";
            }, t._initStaticBatchs = function(e) {
                throw "StaticBatch:must override this function.";
            }, t._getBatchRenderElementFromPool = function() {
                throw "StaticBatch:must override this function.";
            }, t._addBatchSprite = function(e) {
                this._initBatchSprites.push(e);
            }, t._clear = function() {
                this._batchRenderElementPoolIndex = 0;
            }, t._garbageCollection = function() {
                throw "StaticBatchManager: must override it.";
            }, t.dispose = function() {
                this._staticBatches = null;
            }, e._registerManager = function(t) {
                e._managers.push(t);
            }, e._addToStaticBatchQueue = function(t, n) {
                t instanceof laya.d3.core.RenderableSprite3D && t.isStatic && n.push(t);
                for (var i = 0, r = t.numChildren; r > i; i++) e._addToStaticBatchQueue(t._children[i], n);
            }, e.combine = function(t, n) {
                n || (n = [], t && e._addToStaticBatchQueue(t, n));
                var i = n.length;
                if (i > 0) {
                    for (var r = 0; i > r; r++) {
                        var a = n[r];
                        a.isStatic && a._addToInitStaticBatchManager();
                    }
                    for (var o = 0, s = e._managers.length; s > o; o++) {
                        var l = e._managers[o];
                        l._initStaticBatchs(t);
                    }
                }
            }, e._managers = [], e;
        }(),
        Q = function() {
            function e() {}
            r(e, "laya.d3.core.render.command.Command");
            var t = e.prototype;
            return t.run = function() {}, t.recover = function() {}, e;
        }(),
        J = function() {
            function e() {}
            return r(e, "laya.d3.core.render.RenderContext3D"), e.clientWidth = 0, e.clientHeight = 0,
                i(e, ["_instance", function() {
                    return this._instance = new e();
                }]), e;
        }(),
        $ = (function() {
            function e() {}
            return r(e, "laya.d3.core.GradientMode"), e.Blend = 0, e.Fixed = 1, e;
        }(), function() {
            function e() {
                this.length = 0, this.elements = [];
            }
            r(e, "laya.d3.component.SingletonList");
            var t = e.prototype;
            return t._add = function(e) {
                this.length === this.elements.length ? this.elements.push(e) : this.elements[this.length] = e;
            }, e;
        }()),
        ee = function() {
            function e() {
                this._batchRenderElementPool = [];
            }
            r(e, "laya.d3.graphics.DynamicBatchManager");
            var t = e.prototype;
            return t._clear = function() {
                this._batchRenderElementPoolIndex = 0;
            }, t._getBatchRenderElementFromPool = function() {
                throw "StaticBatch:must override this function.";
            }, t.dispose = function() {}, e._registerManager = function(t) {
                e._managers.push(t);
            }, e._managers = [], e;
        }(),
        te = (function() {
            function e() {
                this._damping = NaN, this._impulseClamp = NaN, this._tau = NaN, this._pivotInA = new Te(),
                    this._pivotInB = new Te();
            }
            r(e, "laya.d3.physics.constraints.Point2PointConstraint");
            var t = e.prototype;
            return a(0, t, "pivotInA", function() {
                return this._pivotInA;
            }, function(e) {
                this._pivotInA = e;
            }), a(0, t, "pivotInB", function() {
                return this._pivotInB;
            }, function(e) {
                this._pivotInB = e;
            }), a(0, t, "damping", function() {
                return this._damping;
            }, function(e) {
                this._damping = e;
            }), a(0, t, "impulseClamp", function() {
                return this._impulseClamp;
            }, function(e) {
                this._impulseClamp = e;
            }), a(0, t, "tau", function() {
                return this._tau;
            }, function(e) {
                this._tau = e;
            }), e;
        }(), function() {
            function e() {
                this._destroyed = !1;
            }
            r(e, "laya.d3.core.GeometryElement");
            var t = e.prototype;
            return n.imps(t, {
                "laya.resource.IDestroy": !0
            }), t._getType = function() {
                throw "GeometryElement:must override it.";
            }, t._prepareRender = function(e) {
                return !0;
            }, t._render = function(e) {
                throw "GeometryElement:must override it.";
            }, t.destroy = function() {
                this._destroyed || (this._destroyed = !0);
            }, a(0, t, "destroyed", function() {
                return this._destroyed;
            }), e._typeCounter = 0, e;
        }()),
        ne = function() {
            function e(e, t) {
                this._position = null, this._textureCoordinate0 = null, this._position = e, this._textureCoordinate0 = t;
            }
            r(e, "laya.d3.graphics.Vertex.VertexPositionTexture0");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.graphics.IVertex": !0
            }), a(0, t, "position", function() {
                return this._position;
            }), a(0, t, "textureCoordinate0", function() {
                return this._textureCoordinate0;
            }), a(0, t, "vertexDeclaration", function() {
                return e._vertexDeclaration;
            }), a(1, e, "vertexDeclaration", function() {
                return e._vertexDeclaration;
            }), i(e, ["_vertexDeclaration", function() {
                return this._vertexDeclaration = new ft(20, [new ze(0, "vector3", 0), new ze(12, "vector2", 2)]);
            }]), e;
        }(),
        ie = function() {
            function e() {}
            return r(e, "laya.d3.math.MathUtils3D"), e.isZero = function(t) {
                return Math.abs(t) < e.zeroTolerance;
            }, e.nearEqual = function(t, n) {
                return e.isZero(t - n) ? !0 : !1;
            }, e.fastInvSqrt = function(t) {
                return e.isZero(t) ? t : 1 / Math.sqrt(t);
            }, i(e, ["zeroTolerance", function() {
                return this.zeroTolerance = 1e-6;
            }, "MaxValue", function() {
                return this.MaxValue = 3.40282347e38;
            }, "MinValue", function() {
                return this.MinValue = -3.40282347e38;
            }]), e;
        }(),
        re = function() {
            function e() {
                this._type = 0, this._constant = null, this._constantMin = null, this._constantMax = null,
                    this._gradient = null, this._gradientMin = null, this._gradientMax = null;
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientColor");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._type = this._type, this._constant.cloneTo(t._constant), this._constantMin.cloneTo(t._constantMin),
                    this._constantMax.cloneTo(t._constantMax), this._gradient.cloneTo(t._gradient),
                    this._gradientMin.cloneTo(t._gradientMin), this._gradientMax.cloneTo(t._gradientMax);
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradient", function() {
                return this._gradient;
            }), a(0, t, "constant", function() {
                return this._constant;
            }), a(0, t, "type", function() {
                return this._type;
            }), a(0, t, "gradientMin", function() {
                return this._gradientMin;
            }), a(0, t, "constantMin", function() {
                return this._constantMin;
            }), a(0, t, "gradientMax", function() {
                return this._gradientMax;
            }), a(0, t, "constantMax", function() {
                return this._constantMax;
            }), e.createByConstant = function(t) {
                var n = new e();
                return n._type = 0, n._constant = t, n;
            }, e.createByGradient = function(t) {
                var n = new e();
                return n._type = 1, n._gradient = t, n;
            }, e.createByRandomTwoConstant = function(t, n) {
                var i = new e();
                return i._type = 2, i._constantMin = t, i._constantMax = n, i;
            }, e.createByRandomTwoGradient = function(t, n) {
                var i = new e();
                return i._type = 3, i._gradientMin = t, i._gradientMax = n, i;
            }, e;
        }(),
        ae = (function() {
            function e(e, t) {
                this._width = 0, this._height = 0, this._width = e, this._height = t;
            }
            r(e, "laya.d3.utils.Size");
            var t = e.prototype;
            return a(0, t, "width", function() {
                return -1 === this._width ? J.clientWidth : this._width;
            }), a(0, t, "height", function() {
                return -1 === this._height ? J.clientHeight : this._height;
            }), a(1, e, "fullScreen", function() {
                return new e(-1, -1);
            }), e;
        }(), function() {
            function e() {
                this.flags = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60;
            }
            return r(e, "laya.d3.physics.PhysicsSettings"), e;
        }()),
        oe = function() {
            function e(e, t) {
                this.normal = null, this.distance = NaN, void 0 === t && (t = 0), this.normal = e,
                    this.distance = t;
            }
            r(e, "laya.d3.math.Plane");
            var t = e.prototype;
            return t.normalize = function() {
                    var e = this.normal.x,
                        t = this.normal.y,
                        n = this.normal.z,
                        i = 1 / Math.sqrt(e * e + t * t + n * n);
                    this.normal.x = e * i, this.normal.y = t * i, this.normal.z = n * i, this.distance *= i;
                }, e.createPlaneBy3P = function(t, n, i) {
                    var r = n.x - t.x,
                        a = n.y - t.y,
                        o = n.z - t.z,
                        s = i.x - t.x,
                        l = i.y - t.y,
                        h = i.z - t.z,
                        u = a * h - o * l,
                        c = o * s - r * h,
                        _ = r * l - a * s,
                        d = 1 / Math.sqrt(u * u + c * c + _ * _),
                        f = u * d,
                        m = c * d,
                        p = _ * d;
                    e._TEMPVec3.x = f, e._TEMPVec3.y = m, e._TEMPVec3.z = p;
                    var T = -(f * t.x + m * t.y + p * t.z),
                        E = new e(e._TEMPVec3, T);
                    return E;
                }, e.PlaneIntersectionType_Back = 0, e.PlaneIntersectionType_Front = 1, e.PlaneIntersectionType_Intersecting = 2,
                i(e, ["_TEMPVec3", function() {
                    return this._TEMPVec3 = new Te();
                }]), e;
        }(),
        se = function() {
            function e() {
                this.ambientColor = null, this.diffuseColor = null, this.specularColor = null;
            }
            return r(e, "laya.d3.terrain.unit.MaterialInfo"), e;
        }(),
        le = function() {
            function e(e, t) {
                this._mode = 0, this._maxColorRGBKeysCount = 0, this._maxColorAlphaKeysCount = 0,
                    this._colorRGBKeysCount = 0, this._colorAlphaKeysCount = 0, this._alphaElements = null,
                    this._rgbElements = null, this._maxColorRGBKeysCount = e, this._maxColorAlphaKeysCount = t,
                    this._rgbElements = new Float32Array(4 * e), this._alphaElements = new Float32Array(2 * t);
            }
            r(e, "laya.d3.core.Gradient");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.addColorRGB = function(e, t) {
                if (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {
                    var n = 4 * this._colorRGBKeysCount;
                    this._rgbElements[n] = e, this._rgbElements[n + 1] = t.r, this._rgbElements[n + 2] = t.g,
                        this._rgbElements[n + 3] = t.b, this._colorRGBKeysCount++;
                } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorRGBKeysCount);
            }, t.addColorAlpha = function(e, t) {
                if (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {
                    var n = 2 * this._colorAlphaKeysCount;
                    this._alphaElements[n] = e, this._alphaElements[n + 1] = t, this._colorAlphaKeysCount++;
                } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorAlphaKeysCount);
            }, t.updateColorRGB = function(e, t, n) {
                if (e < this._colorRGBKeysCount) {
                    var i = 4 * e;
                    this._rgbElements[i] = t, this._rgbElements[i + 1] = n.r, this._rgbElements[i + 2] = n.g,
                        this._rgbElements[i + 3] = n.b;
                } else console.warn("Gradient:warning:index must lessEqual than colorRGBKeysCount:" + this._colorRGBKeysCount);
            }, t.updateColorAlpha = function(e, t, n) {
                if (e < this._colorAlphaKeysCount) {
                    var i = 2 * e;
                    this._alphaElements[i] = t, this._alphaElements[i + 1] = n;
                } else console.warn("Gradient:warning:index must lessEqual than colorAlphaKeysCount:" + this._colorAlphaKeysCount);
            }, t.cloneTo = function(e) {
                var t = e,
                    n = 0,
                    i = 0;
                t._colorAlphaKeysCount = this._colorAlphaKeysCount;
                var r = t._alphaElements;
                for (r.length = this._alphaElements.length, n = 0, i = this._alphaElements.length; i > n; n++) r[n] = this._alphaElements[n];
                t._colorRGBKeysCount = this._colorRGBKeysCount;
                var a = t._rgbElements;
                for (a.length = this._rgbElements.length, n = 0, i = this._rgbElements.length; i > n; n++) a[n] = this._rgbElements[n];
            }, t.clone = function() {
                var t = new e(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);
                return this.cloneTo(t), t;
            }, a(0, t, "colorRGBKeysCount", function() {
                return this._colorRGBKeysCount / 4;
            }), a(0, t, "mode", function() {
                return this._mode;
            }, function(e) {
                this._mode = e;
            }), a(0, t, "colorAlphaKeysCount", function() {
                return this._colorAlphaKeysCount / 2;
            }), a(0, t, "maxColorRGBKeysCount", function() {
                return this._maxColorRGBKeysCount;
            }), a(0, t, "maxColorAlphaKeysCount", function() {
                return this._maxColorAlphaKeysCount;
            }), e;
        }(),
        he = function() {
            function e(e, t, n, i, r) {
                void 0 === e && (e = 0), void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 1),
                    this.x = e, this.y = t, this.z = n, this.w = i;
            }
            r(e, "laya.d3.math.Quaternion");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.scaling = function(e, t) {
                t.x = this.x * e, t.y = this.y * e, t.z = this.z * e, t.w = this.w * e;
            }, t.normalize = function(e) {
                var t = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
                t > 0 && (t = 1 / Math.sqrt(t), e.x = this.x * t, e.y = this.y * t, e.z = this.z * t,
                    e.w = this.w * t);
            }, t.length = function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
            }, t.rotateX = function(e, t) {
                e *= .5;
                var n = Math.sin(e),
                    i = Math.cos(e);
                t.x = this.x * i + this.w * n, t.y = this.y * i + this.z * n, t.z = this.z * i - this.y * n,
                    t.w = this.w * i - this.x * n;
            }, t.rotateY = function(e, t) {
                e *= .5;
                var n = Math.sin(e),
                    i = Math.cos(e);
                t.x = this.x * i - this.z * n, t.y = this.y * i + this.w * n, t.z = this.z * i + this.x * n,
                    t.w = this.w * i - this.y * n;
            }, t.rotateZ = function(e, t) {
                e *= .5;
                var n = Math.sin(e),
                    i = Math.cos(e);
                t.x = this.x * i + this.y * n, t.y = this.y * i - this.x * n, t.z = this.z * i + this.w * n,
                    t.w = this.w * i - this.z * n;
            }, t.getYawPitchRoll = function(t) {
                Te.transformQuat(Te._ForwardRH, this, e.TEMPVector31), Te.transformQuat(Te._Up, this, e.TEMPVector32);
                var n = e.TEMPVector32;
                e.angleTo(Te._ZERO, e.TEMPVector31, e.TEMPVector33);
                var i = e.TEMPVector33;
                i.x == Math.PI / 2 ? (i.y = e.arcTanAngle(n.z, n.x), i.z = 0) : i.x == -Math.PI / 2 ? (i.y = e.arcTanAngle(-n.z, -n.x),
                        i.z = 0) : (Ht.createRotationY(-i.y, e.TEMPMatrix0), Ht.createRotationX(-i.x, e.TEMPMatrix1),
                        Te.transformCoordinate(e.TEMPVector32, e.TEMPMatrix0, e.TEMPVector32), Te.transformCoordinate(e.TEMPVector32, e.TEMPMatrix1, e.TEMPVector32),
                        i.z = e.arcTanAngle(n.y, -n.x)), i.y <= -Math.PI && (i.y = Math.PI), i.z <= -Math.PI && (i.z = Math.PI),
                    i.y >= Math.PI && i.z >= Math.PI && (i.y = 0, i.z = 0, i.x = Math.PI - i.x);
                var r = t;
                r.x = i.y, r.y = i.x, r.z = i.z;
            }, t.invert = function(e) {
                var t = this.x,
                    n = this.y,
                    i = this.z,
                    r = this.w,
                    a = t * t + n * n + i * i + r * r,
                    o = a ? 1 / a : 0;
                e.x = -t * o, e.y = -n * o, e.z = -i * o, e.w = r * o;
            }, t.identity = function() {
                this.x = 0, this.y = 0, this.z = 0, this.w = 1;
            }, t.fromArray = function(e, t) {
                void 0 === t && (t = 0), this.x = e[t + 0], this.y = e[t + 1], this.z = e[t + 2],
                    this.w = e[t + 3];
            }, t.cloneTo = function(e) {
                this !== e && (e.x = this.x, e.y = this.y, e.z = this.z, e.w = this.w);
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.equals = function(e) {
                return ie.nearEqual(this.x, e.x) && ie.nearEqual(this.y, e.y) && ie.nearEqual(this.z, e.z) && ie.nearEqual(this.w, e.w);
            }, t.lengthSquared = function() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            }, t.forNativeElement = function(e) {
                e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z,
                        this.elements[3] = this.w) : this.elements = new Float32Array([this.x, this.y, this.z, this.w]),
                    Ee.rewriteNumProperty(this, "x", 0), Ee.rewriteNumProperty(this, "y", 1), Ee.rewriteNumProperty(this, "z", 2),
                    Ee.rewriteNumProperty(this, "w", 3);
            }, e.createFromYawPitchRoll = function(e, t, n, i) {
                var r = .5 * n,
                    a = .5 * t,
                    o = .5 * e,
                    s = Math.sin(r),
                    l = Math.cos(r),
                    h = Math.sin(a),
                    u = Math.cos(a),
                    c = Math.sin(o),
                    _ = Math.cos(o);
                i.x = _ * h * l + c * u * s, i.y = c * u * l - _ * h * s, i.z = _ * u * s - c * h * l,
                    i.w = _ * u * l + c * h * s;
            }, e.multiply = function(e, t, n) {
                var i = e.x,
                    r = e.y,
                    a = e.z,
                    o = e.w,
                    s = t.x,
                    l = t.y,
                    h = t.z,
                    u = t.w,
                    c = r * h - a * l,
                    _ = a * s - i * h,
                    d = i * l - r * s,
                    f = i * s + r * l + a * h;
                n.x = i * u + s * o + c, n.y = r * u + l * o + _, n.z = a * u + h * o + d, n.w = o * u - f;
            }, e.arcTanAngle = function(e, t) {
                return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : 0 > e ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
            }, e.angleTo = function(t, n, i) {
                Te.subtract(n, t, e.TEMPVector30), Te.normalize(e.TEMPVector30, e.TEMPVector30),
                    i.x = Math.asin(e.TEMPVector30.y), i.y = e.arcTanAngle(-e.TEMPVector30.z, -e.TEMPVector30.x);
            }, e.createFromAxisAngle = function(e, t, n) {
                t = .5 * t;
                var i = Math.sin(t);
                n.x = i * e.x, n.y = i * e.y, n.z = i * e.z, n.w = Math.cos(t);
            }, e.createFromMatrix4x4 = function(e, t) {
                var n, i, r = e.elements,
                    a = r[0] + r[5] + r[10];
                a > 0 ? (n = Math.sqrt(a + 1), t.w = .5 * n, n = .5 / n, t.x = (r[6] - r[9]) * n,
                    t.y = (r[8] - r[2]) * n, t.z = (r[1] - r[4]) * n) : r[0] >= r[5] && r[0] >= r[10] ? (n = Math.sqrt(1 + r[0] - r[5] - r[10]),
                    i = .5 / n, t.x = .5 * n, t.y = (r[1] + r[4]) * i, t.z = (r[2] + r[8]) * i, t.w = (r[6] - r[9]) * i) : r[5] > r[10] ? (n = Math.sqrt(1 + r[5] - r[0] - r[10]),
                    i = .5 / n, t.x = (r[4] + r[1]) * i, t.y = .5 * n, t.z = (r[9] + r[6]) * i, t.w = (r[8] - r[2]) * i) : (n = Math.sqrt(1 + r[10] - r[0] - r[5]),
                    i = .5 / n, t.x = (r[8] + r[2]) * i, t.y = (r[9] + r[6]) * i, t.z = .5 * n, t.w = (r[1] - r[4]) * i);
            }, e.slerp = function(e, t, n, i) {
                var r, a, o, s, l, h = e.x,
                    u = e.y,
                    c = e.z,
                    _ = e.w,
                    d = t.x,
                    f = t.y,
                    m = t.z,
                    p = t.w;
                return a = h * d + u * f + c * m + _ * p, 0 > a && (a = -a, d = -d, f = -f, m = -m,
                        p = -p), 1 - a > 1e-6 ? (r = Math.acos(a), o = Math.sin(r), s = Math.sin((1 - n) * r) / o,
                        l = Math.sin(n * r) / o) : (s = 1 - n, l = n), i.x = s * h + l * d, i.y = s * u + l * f,
                    i.z = s * c + l * m, i.w = s * _ + l * p, i;
            }, e.lerp = function(t, n, i, r) {
                var a = 1 - i;
                e.dot(t, n) >= 0 ? (r.x = a * t.x + i * n.x, r.y = a * t.y + i * n.y, r.z = a * t.z + i * n.z,
                    r.w = a * t.w + i * n.w) : (r.x = a * t.x - i * n.x, r.y = a * t.y - i * n.y, r.z = a * t.z - i * n.z,
                    r.w = a * t.w - i * n.w), r.normalize(r);
            }, e.add = function(e, t, n) {
                n.x = e.x + t.x, n.y = e.y + t.y, n.z = e.z + t.z, n.w = e.w + t.w;
            }, e.dot = function(e, t) {
                return e.x * t.x + e.y * t.y + e.z * t.z + e.w * t.w;
            }, e.rotationLookAt = function(t, n, i) {
                e.lookAt(Te._ZERO, t, n, i);
            }, e.lookAt = function(t, n, i, r) {
                Bt.lookAt(t, n, i, e._tempMatrix3x3), e.rotationMatrix(e._tempMatrix3x3, r);
            }, e.invert = function(e, t) {
                var n = e.lengthSquared();
                ie.isZero(n) || (n = 1 / n, t.x = -e.x * n, t.y = -e.y * n, t.z = -e.z * n, t.w = e.w * n);
            }, e.rotationMatrix = function(e, t) {
                var n = e.elements,
                    i = n[0],
                    r = n[1],
                    a = n[2],
                    o = n[3],
                    s = n[4],
                    l = n[5],
                    h = n[6],
                    u = n[7],
                    c = n[8],
                    _ = NaN,
                    d = NaN,
                    f = i + s + c;
                f > 0 ? (_ = Math.sqrt(f + 1), t.w = .5 * _, _ = .5 / _, t.x = (l - u) * _, t.y = (h - a) * _,
                    t.z = (r - o) * _) : i >= s && i >= c ? (_ = Math.sqrt(1 + i - s - c), d = .5 / _,
                    t.x = .5 * _, t.y = (r + o) * d, t.z = (a + h) * d, t.w = (l - u) * d) : s > c ? (_ = Math.sqrt(1 + s - i - c),
                    d = .5 / _, t.x = (o + r) * d, t.y = .5 * _, t.z = (u + l) * d, t.w = (h - a) * d) : (_ = Math.sqrt(1 + c - i - s),
                    d = .5 / _, t.x = (h + a) * d, t.y = (u + l) * d, t.z = .5 * _, t.w = (r - o) * d);
            }, e.DEFAULT = new e(), i(e, ["TEMPVector30", function() {
                return this.TEMPVector30 = new Te();
            }, "TEMPVector31", function() {
                return this.TEMPVector31 = new Te();
            }, "TEMPVector32", function() {
                return this.TEMPVector32 = new Te();
            }, "TEMPVector33", function() {
                return this.TEMPVector33 = new Te();
            }, "TEMPMatrix0", function() {
                return this.TEMPMatrix0 = new Ht();
            }, "TEMPMatrix1", function() {
                return this.TEMPMatrix1 = new Ht();
            }, "_tempMatrix3x3", function() {
                return this._tempMatrix3x3 = new Bt();
            }, "NAN", function() {
                return this.NAN = new e(NaN, NaN, NaN, NaN);
            }]), e;
        }(),
        ue = function() {
            function e(e) {
                this._ownerResource = null, this._data = null, this._int32Data = null, this._float32Data = null,
                    this._nativeArray = null, this._frameCount = 0, this._runtimeCopyValues = [], this._ownerResource = e,
                    this._initData();
            }
            r(e, "laya.d3.shader.ShaderData");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t._initData = function() {
                this._data = new Object();
            }, t.getData = function() {
                return this._data;
            }, t.getBool = function(e) {
                return this._data[e];
            }, t.setBool = function(e, t) {
                this._data[e] = t;
            }, t.getInt = function(e) {
                return this._data[e];
            }, t.setInt = function(e, t) {
                this._data[e] = t;
            }, t.getNumber = function(e) {
                return this._data[e];
            }, t.setNumber = function(e, t) {
                this._data[e] = t;
            }, t.getVector2 = function(e) {
                return this._data[e];
            }, t.setVector2 = function(e, t) {
                this._data[e] = t;
            }, t.getVector3 = function(e) {
                return this._data[e];
            }, t.setVector3 = function(e, t) {
                this._data[e] = t;
            }, t.getVector = function(e) {
                return this._data[e];
            }, t.setVector = function(e, t) {
                this._data[e] = t;
            }, t.getQuaternion = function(e) {
                return this._data[e];
            }, t.setQuaternion = function(e, t) {
                this._data[e] = t;
            }, t.getMatrix4x4 = function(e) {
                return this._data[e];
            }, t.setMatrix4x4 = function(e, t) {
                this._data[e] = t;
            }, t.getBuffer = function(e) {
                return this._data[e];
            }, t.setBuffer = function(e, t) {
                this._data[e] = t;
            }, t.setTexture = function(e, t) {
                var n = this._data[e];
                this._data[e] = t, this._ownerResource && this._ownerResource.referenceCount > 0 && (n && n._removeReference(),
                    t && t._addReference());
            }, t.getTexture = function(e) {
                return this._data[e];
            }, t.setAttribute = function(e, t) {
                this._data[e] = t;
            }, t.getAttribute = function(e) {
                return this._data[e];
            }, t.getLength = function() {
                return this._data.length;
            }, t.setLength = function(e) {
                this._data.length = e;
            }, t.cloneTo = function(e) {
                var t = e,
                    n = t._data;
                for (var i in this._data) {
                    var r = this._data[i];
                    if (null != r)
                        if ("number" == typeof r) n[i] = r;
                        else if ("number" == typeof r && Math.floor(r) == r) n[i] = r;
                    else if ("boolean" == typeof r) n[i] = r;
                    else if (r instanceof laya.d3.math.Vector2) {
                        var a = n[i] || (n[i] = new Ee());
                        r.cloneTo(a), n[i] = a;
                    } else if (r instanceof laya.d3.math.Vector3) {
                        var o = n[i] || (n[i] = new Te());
                        r.cloneTo(o), n[i] = o;
                    } else if (r instanceof laya.d3.math.Vector4) {
                        var s = n[i] || (n[i] = new me());
                        r.cloneTo(s), n[i] = s;
                    } else if (r instanceof laya.d3.math.Matrix4x4) {
                        var l = n[i] || (n[i] = new Ht());
                        r.cloneTo(l), n[i] = l;
                    } else r instanceof laya.resource.BaseTexture && (n[i] = r);
                }
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.cloneToForNative = function(e) {
                var t = e,
                    n = this._int32Data.length - t._int32Data.length;
                n > 0 && t.needRenewArrayBufferForNative(this._int32Data.length), t._int32Data.set(this._int32Data, 0);
                var i = t._nativeArray,
                    r = this._nativeArray.length;
                i.length = r;
                for (var a = 0; r > a; a++) {
                    var o = this._nativeArray[a];
                    if (o)
                        if ("number" == typeof o) i[a] = o, t.setNumber(a, o);
                        else if ("number" == typeof o && Math.floor(o) == o) i[a] = o,
                        t.setInt(a, o);
                    else if ("boolean" == typeof o) i[a] = o, t.setBool(a, o);
                    else if (o instanceof laya.d3.math.Vector2) {
                        var s = i[a] || (i[a] = new Ee());
                        o.cloneTo(s), i[a] = s, t.setVector2(a, s);
                    } else if (o instanceof laya.d3.math.Vector3) {
                        var l = i[a] || (i[a] = new Te());
                        o.cloneTo(l), i[a] = l, t.setVector3(a, l);
                    } else if (o instanceof laya.d3.math.Vector4) {
                        var h = i[a] || (i[a] = new me());
                        o.cloneTo(h), i[a] = h, t.setVector(a, h);
                    } else if (o instanceof laya.d3.math.Matrix4x4) {
                        var u = i[a] || (i[a] = new Ht());
                        o.cloneTo(u), i[a] = u, t.setMatrix4x4(a, u);
                    } else o instanceof laya.resource.BaseTexture && (i[a] = o, t.setTexture(a, o));
                }
            }, t._initDataForNative = function() {
                var e = 8;
                e || alert("ShaderData _initDataForNative error length=0"), this._frameCount = -1,
                    this._runtimeCopyValues.length = 0, this._nativeArray = [], this._data = new ArrayBuffer(4 * e),
                    this._int32Data = new Int32Array(this._data), this._float32Data = new Float32Array(this._data),
                    v.createArrayBufferRef(this._data, 0, !0);
            }, t.needRenewArrayBufferForNative = function(e) {
                if (e >= this._int32Data.length) {
                    var t = 4 * (e + 1),
                        n = this._int32Data,
                        i = this._data.conchRef,
                        r = this._data._ptrID;
                    this._data = new ArrayBuffer(t), this._int32Data = new Int32Array(this._data), this._float32Data = new Float32Array(this._data),
                        this._data.conchRef = i, this._data._ptrID = r, n && this._int32Data.set(n, 0),
                        conch.updateArrayBufferRef(this._data._ptrID, i.isSyncToRender(), this._data);
                }
            }, t.getDataForNative = function() {
                return this._nativeArray;
            }, t.getIntForNative = function(e) {
                return this._int32Data[e];
            }, t.setIntForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._int32Data[e] = t, this._nativeArray[e] = t;
            }, t.getBoolForNative = function(e) {
                return 1 == this._int32Data[e];
            }, t.setBoolForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._int32Data[e] = t, this._nativeArray[e] = t;
            }, t.getNumberForNative = function(e) {
                return this._float32Data[e];
            }, t.setNumberForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._float32Data[e] = t, this._nativeArray[e] = t;
            }, t.getMatrix4x4ForNative = function(e) {
                return this._nativeArray[e];
            }, t.setMatrix4x4ForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
                var n = this.setReferenceForNative(t.elements);
                this._int32Data[e] = n;
            }, t.getVectorForNative = function(e) {
                return this._nativeArray[e];
            }, t.setVectorForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
                var n = this.setReferenceForNative(t.elements);
                this._int32Data[e] = n;
            }, t.getVector2ForNative = function(e) {
                return this._nativeArray[e];
            }, t.setVector2ForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
                var n = this.setReferenceForNative(t.elements);
                this._int32Data[e] = n;
            }, t.getVector3ForNative = function(e) {
                return this._nativeArray[e];
            }, t.setVector3ForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
                var n = this.setReferenceForNative(t.elements);
                this._int32Data[e] = n;
            }, t.getQuaternionForNative = function(e) {
                return this._nativeArray[e];
            }, t.setQuaternionForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t, t.elements || t.forNativeElement();
                var n = this.setReferenceForNative(t.elements);
                this._int32Data[e] = n;
            }, t.getBufferForNative = function(e) {
                return this._nativeArray[e];
            }, t.setBufferForNative = function(e, t) {
                this.needRenewArrayBufferForNative(e), this._nativeArray[e] = t;
                var n = this.setReferenceForNative(t);
                this._int32Data[e] = n;
            }, t.getAttributeForNative = function(e) {
                return this._nativeArray[e];
            }, t.setAttributeForNative = function(e, t) {
                this._nativeArray[e] = t, t._ptrID || v.createArrayBufferRef(t, 0, !0), v.syncBufferToRenderThread(t),
                    this._int32Data[e] = t._ptrID;
            }, t.getTextureForNative = function(e) {
                return this._nativeArray[e];
            }, t.setTextureForNative = function(e, t) {
                if (t) {
                    this.needRenewArrayBufferForNative(e);
                    var n = this._nativeArray[e];
                    this._nativeArray[e] = t, this._int32Data[e] = t._glTexture.id, this._ownerResource && this._ownerResource.referenceCount > 0 && (n && n._removeReference(),
                        t && t._addReference());
                }
            }, t.setReferenceForNative = function(t) {
                this.clearRuntimeCopyArray();
                var n = 0,
                    i = 0;
                return e._SET_RUNTIME_VALUE_MODE_REFERENCE_ ? (v.createArrayBufferRefs(t, 0, !0, 0),
                    n = 0, i = t.getPtrID(n)) : (v.createArrayBufferRefs(t, 0, !0, 1), n = t.getRefNum() - 1,
                    i = t.getPtrID(n), this._runtimeCopyValues.push({
                        obj: t,
                        refID: n,
                        ptrID: i
                    })), v.syncBufferToRenderThread(t, n), i;
            }, t.clearRuntimeCopyArray = function() {
                var e = v.getFrameCount();
                if (this._frameCount != e) {
                    this._frameCount = e;
                    for (var t = 0, n = this._runtimeCopyValues.length; n > t; t++) {
                        var i = this._runtimeCopyValues[t];
                        i.obj.clearRefNum();
                    }
                    this._runtimeCopyValues.length = 0;
                }
            }, e.setRuntimeValueMode = function(t) {
                e._SET_RUNTIME_VALUE_MODE_REFERENCE_ = t;
            }, e._SET_RUNTIME_VALUE_MODE_REFERENCE_ = !0, e;
        }(),
        ce = function() {
            function e() {
                this._boundingSphere = null, this._boundingBox = null, this._sizeOfY = null, this._currentLODLevel = 0,
                    this._lastDistanceToEye = NaN, this._originalBoundingSphere = null, this._originalBoundingBox = null,
                    this._originalBoundingBoxCorners = null, this._bUseStrip = !1, this._gridSize = NaN,
                    this._beginGridX = 0, this._beginGridZ = 0, this._LODError = null, e.__init__(),
                    this._currentLODLevel = 0;
            }
            r(e, "laya.d3.terrain.TerrainLeaf");
            var t = e.prototype;
            return t.calcVertextNorml = function(t, n, i, r, a, o) {
                    var s = 0,
                        l = 0;
                    l = -1 * e.getHeightFromTerrainHeightData(t - 1, n - 1, i, r, a), l += -1 * e.getHeightFromTerrainHeightData(t - 1, n, i, r, a),
                        l += -1 * e.getHeightFromTerrainHeightData(t - 1, n + 1, i, r, a), l += 1 * e.getHeightFromTerrainHeightData(t + 1, n - 1, i, r, a),
                        l += 1 * e.getHeightFromTerrainHeightData(t + 1, n, i, r, a), l += 1 * e.getHeightFromTerrainHeightData(t + 1, n + 1, i, r, a),
                        s = -1 * e.getHeightFromTerrainHeightData(t - 1, n - 1, i, r, a), s += -1 * e.getHeightFromTerrainHeightData(t, n - 1, i, r, a),
                        s += -1 * e.getHeightFromTerrainHeightData(t + 1, n - 1, i, r, a), s += 1 * e.getHeightFromTerrainHeightData(t - 1, n + 1, i, r, a),
                        s += 1 * e.getHeightFromTerrainHeightData(t, n + 1, i, r, a), s += 1 * e.getHeightFromTerrainHeightData(t + 1, n + 1, i, r, a),
                        o.x = -l, o.y = 6, o.z = -s, Te.normalize(o, o);
                }, t.calcVertextNormlUV = function(e, t, n, i, r) {
                    r.x = e / n, r.y = t / i, r.z = t / i;
                }, t.calcVertextBuffer = function(t, n, i, r, a, o, s, l, h, u, c, _) {
                    if (1 == _ && !e.__ADAPT_MATRIX__) {
                        e.__ADAPT_MATRIX__ = new Ht();
                        var d = new Ht();
                        Ht.createRotationY(Math.PI, e.__ADAPT_MATRIX__), Ht.createTranslate(new Te(0, 0, (c - 1) * a), d),
                            Ht.multiply(d, e.__ADAPT_MATRIX__, e.__ADAPT_MATRIX__), e.__ADAPT_MATRIX_INV__ = new Ht(),
                            e.__ADAPT_MATRIX__.invert(e.__ADAPT_MATRIX_INV__);
                    }
                    this._gridSize = a, this._beginGridX = t * e.CHUNK_GRID_NUM + i, this._beginGridZ = n * e.CHUNK_GRID_NUM + r;
                    for (var f = s * l, m = 2147483647, p = -2147483648, T = new Te(), E = 0, v = e.LEAF_GRID_NUM + 1; v > E; E++)
                        for (var g = 0, S = e.LEAF_GRID_NUM + 1; S > g; g++) e.__VECTOR3__.x = (this._beginGridX + g) * this._gridSize,
                            e.__VECTOR3__.z = (this._beginGridZ + E) * this._gridSize, e.__VECTOR3__.y = h[(this._beginGridZ + E) * u + (this._beginGridX + g)],
                            m = e.__VECTOR3__.y < m ? e.__VECTOR3__.y : m, p = e.__VECTOR3__.y > p ? e.__VECTOR3__.y : p,
                            e.__ADAPT_MATRIX__ && Te.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__),
                            o[f] = e.__VECTOR3__.x, f++, o[f] = e.__VECTOR3__.y, f++, o[f] = e.__VECTOR3__.z,
                            f++, this.calcVertextNormlUV(this._beginGridX + g, this._beginGridZ + E, u, c, T),
                            o[f] = T.x, f++, o[f] = T.y, f++, o[f] = T.z, f++, o[f] = (i + g) / e.CHUNK_GRID_NUM,
                            f++, o[f] = (r + E) / e.CHUNK_GRID_NUM, f++, o[f] = this._beginGridX + g, f++, o[f] = this._beginGridZ + E,
                            f++;
                    this._sizeOfY = new Ee(m - 1, p + 1), this.calcLODErrors(h, u, c), this.calcOriginalBoudingBoxAndSphere();
                }, t.calcSkirtVertextBuffer = function(t, n, i, r, a, o, s, l, h, u, c) {
                    this._gridSize = a, this._beginGridX = t * e.CHUNK_GRID_NUM + i, this._beginGridZ = n * e.CHUNK_GRID_NUM + r;
                    var _ = s * l,
                        d = 0,
                        f = 0,
                        m = e.LEAF_GRID_NUM + 1,
                        p = new Te(),
                        T = 0,
                        E = 0;
                    for (d = 0; 2 > d; d++)
                        for (f = 0; m > f; f++) e.__VECTOR3__.x = (this._beginGridX + f) * this._gridSize,
                            e.__VECTOR3__.y = 1 == d ? h[this._beginGridZ * u + (this._beginGridX + f)] : -this._gridSize,
                            e.__VECTOR3__.z = (this._beginGridZ + 0) * this._gridSize, e.__ADAPT_MATRIX__ && Te.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__),
                            o[_] = e.__VECTOR3__.x, _++, o[_] = e.__VECTOR3__.y, _++, o[_] = e.__VECTOR3__.z,
                            _++, T = 0 == d ? this._beginGridZ - 1 : this._beginGridZ, this.calcVertextNormlUV(this._beginGridX + f, T, u, c, p),
                            o[_] = p.x, _++, o[_] = p.y, _++, o[_] = p.z, _++, o[_] = (i + f) / e.CHUNK_GRID_NUM,
                            _++, o[_] = (r + 0) / e.CHUNK_GRID_NUM, _++, o[_] = this._beginGridX + f, _++, o[_] = T,
                            _++;
                    for (d = 0; 2 > d; d++)
                        for (f = 0; m > f; f++) e.__VECTOR3__.x = (this._beginGridX + f) * this._gridSize,
                            e.__VECTOR3__.y = 0 == d ? h[(this._beginGridZ + e.LEAF_GRID_NUM) * u + (this._beginGridX + f)] : -this._gridSize,
                            e.__VECTOR3__.z = (this._beginGridZ + e.LEAF_GRID_NUM) * this._gridSize, e.__ADAPT_MATRIX__ && Te.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__),
                            o[_] = e.__VECTOR3__.x, _++, o[_] = e.__VECTOR3__.y, _++, o[_] = e.__VECTOR3__.z,
                            _++, T = 0 == d ? this._beginGridZ + e.LEAF_GRID_NUM : this._beginGridZ + e.LEAF_GRID_NUM + 1,
                            this.calcVertextNormlUV(this._beginGridX + f, T, u, c, p), o[_] = p.x, _++, o[_] = p.y,
                            _++, o[_] = p.z, _++, o[_] = (i + f) / e.CHUNK_GRID_NUM, _++, o[_] = (r + e.LEAF_GRID_NUM) / e.CHUNK_GRID_NUM,
                            _++, o[_] = this._beginGridX + f, _++, o[_] = T, _++;
                    for (d = 0; 2 > d; d++)
                        for (f = 0; m > f; f++) e.__VECTOR3__.x = (this._beginGridX + 0) * this._gridSize,
                            e.__VECTOR3__.y = 0 == d ? h[(this._beginGridZ + f) * u + (this._beginGridX + 0)] : -this._gridSize,
                            e.__VECTOR3__.z = (this._beginGridZ + f) * this._gridSize, e.__ADAPT_MATRIX__ && Te.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__),
                            o[_] = e.__VECTOR3__.x, _++, o[_] = e.__VECTOR3__.y, _++, o[_] = e.__VECTOR3__.z,
                            _++, E = 0 == d ? this._beginGridX : this._beginGridX - 1, this.calcVertextNormlUV(E, this._beginGridZ + f, u, c, p),
                            o[_] = p.x, _++, o[_] = p.y, _++, o[_] = p.z, _++, o[_] = (i + 0) / e.CHUNK_GRID_NUM,
                            _++, o[_] = (r + f) / e.CHUNK_GRID_NUM, _++, o[_] = E, _++, o[_] = this._beginGridZ + f,
                            _++;
                    for (d = 0; 2 > d; d++)
                        for (f = 0; m > f; f++) e.__VECTOR3__.x = (this._beginGridX + e.LEAF_GRID_NUM) * this._gridSize,
                            e.__VECTOR3__.y = 1 == d ? h[(this._beginGridZ + f) * u + (this._beginGridX + e.LEAF_GRID_NUM)] : -this._gridSize,
                            e.__VECTOR3__.z = (this._beginGridZ + f) * this._gridSize, e.__ADAPT_MATRIX__ && Te.transformV3ToV3(e.__VECTOR3__, e.__ADAPT_MATRIX__, e.__VECTOR3__),
                            o[_] = e.__VECTOR3__.x, _++, o[_] = e.__VECTOR3__.y, _++, o[_] = e.__VECTOR3__.z,
                            _++, E = 0 == d ? this._beginGridX + e.LEAF_GRID_NUM + 1 : this._beginGridX + e.LEAF_GRID_NUM,
                            this.calcVertextNormlUV(E, this._beginGridZ + f, u, c, p), o[_] = p.x, _++, o[_] = p.y,
                            _++, o[_] = p.z, _++, o[_] = (i + e.LEAF_GRID_NUM) / e.CHUNK_GRID_NUM, _++, o[_] = (r + f) / e.CHUNK_GRID_NUM,
                            _++, o[_] = E, _++, o[_] = this._beginGridZ + f, _++;
                }, t.calcOriginalBoudingBoxAndSphere = function() {
                    var t = new Te(this._beginGridX * this._gridSize, this._sizeOfY.x, this._beginGridZ * this._gridSize),
                        n = new Te((this._beginGridX + e.LEAF_GRID_NUM) * this._gridSize, this._sizeOfY.y, (this._beginGridZ + e.LEAF_GRID_NUM) * this._gridSize);
                    e.__ADAPT_MATRIX__ && (Te.transformV3ToV3(t, e.__ADAPT_MATRIX__, t), Te.transformV3ToV3(n, e.__ADAPT_MATRIX__, n)),
                        this._originalBoundingBox = new zt(t, n);
                    var i = new Te();
                    Te.subtract(n, t, i), Te.scale(i, .5, i);
                    var r = new Te();
                    Te.add(t, i, r), this._originalBoundingSphere = new Me(r, Te.scalarLength(i)), this._originalBoundingBoxCorners = o(8, null),
                        this._originalBoundingBox.getCorners(this._originalBoundingBoxCorners), this._boundingBox = new zt(new Te(-.5, -.5, -.5), new Te(.5, .5, .5)),
                        this._boundingSphere = new Me(new Te(0, 0, 0), 1);
                }, t.calcLeafBoudingBox = function(e) {
                    for (var t = 0; 8 > t; t++) Te.transformCoordinate(this._originalBoundingBoxCorners[t], e, Wt._tempBoundBoxCorners[t]);
                    zt.createfromPoints(Wt._tempBoundBoxCorners, this._boundingBox);
                }, t.calcLeafBoudingSphere = function(e, t) {
                    Te.transformCoordinate(this._originalBoundingSphere.center, e, this._boundingSphere.center),
                        this._boundingSphere.radius = this._originalBoundingSphere.radius * t;
                }, t.calcLODErrors = function(t, n, i) {
                    this._LODError = new Float32Array(e._maxLODLevel + 1);
                    for (var r = 1, a = 0, o = e._maxLODLevel + 1; o > a; a++) {
                        for (var s = 0, l = 0, h = e.LEAF_GRID_NUM; h > l; l += r)
                            for (var u = 0, c = e.LEAF_GRID_NUM; c > u; u += r)
                                for (var _ = t[(this._beginGridZ + l) * n + (this._beginGridX + u)], d = t[(this._beginGridZ + l) * n + (this._beginGridX + u) + r], f = t[(this._beginGridZ + l + r) * n + (this._beginGridX + u)], m = t[(this._beginGridZ + l + r) * n + (this._beginGridX + u) + r], p = 0; r > p; p++)
                                    for (var T = p / r, E = 0; r > E; E++) {
                                        var v = E / r,
                                            g = t[(this._beginGridZ + l + p) * n + (this._beginGridX + u) + E],
                                            S = 1 >= v + T ? _ + (d - _) * v + (f - _) * T : m + (f - m) * (1 - v) + (d - m) * (1 - T),
                                            y = Math.abs(S - g);
                                        s = Math.max(s, y);
                                    }
                        r *= 2, this._LODError[a] = s;
                    }
                }, t.determineLod = function(t, n, i, r) {
                    var a = Te.distance(t, this._boundingSphere.center),
                        o = e._maxLODLevel;
                    if (!r) {
                        if (this._lastDistanceToEye == a) return this._currentLODLevel;
                        this._lastDistanceToEye > a && (o = this._currentLODLevel);
                    }
                    for (var s = o; s >= 1; s--)
                        if (ti.LOD_DISTANCE_FACTOR * this._LODError[s] / a * n < i) {
                            this._currentLODLevel = s;
                            break;
                        }
                    return this._lastDistanceToEye = a, this._currentLODLevel;
                }, e.__init__ = function() {
                    if (!e._bInit) {
                        var t = e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM * (e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM);
                        e._planeLODIndex = o(t);
                        var n = 0,
                            i = 0,
                            r = 0,
                            a = 0,
                            s = 0,
                            l = 0,
                            h = null,
                            u = null;
                        for (n = 0; t > n; n++) e._planeLODIndex[n] = new Array(e._maxLODLevel + 1);
                        for (n = 0, a = e._maxLODLevel + 1; a > n; n++) e._planeLODIndex[0][n] = e.calcPlaneLODIndex(n);
                        for (n = 1; t > n; n++)
                            for (l = n * e.LEAF_PLANE_VERTEXT_COUNT, i = 0, s = e._maxLODLevel + 1; s > i; i++) {
                                for (h = e._planeLODIndex[0][i], u = new Uint16Array(h.length), r = 0; r < h.length; r++) u[r] = h[r] + l;
                                e._planeLODIndex[n][i] = u;
                            }
                        for (e._skirtLODIndex = o(t), n = 0; t > n; n++) e._skirtLODIndex[n] = new Array(e._maxLODLevel + 1);
                        for (n = 0, a = e._maxLODLevel + 1; a > n; n++) e._skirtLODIndex[0][n] = e.calcSkirtLODIndex(n);
                        for (n = 1; t > n; n++)
                            for (l = n * e.LEAF_SKIRT_VERTEXT_COUNT, i = 0, s = e._maxLODLevel + 1; s > i; i++) {
                                for (h = e._skirtLODIndex[0][i], u = new Uint16Array(h.length), r = 0; r < h.length; r++) u[r] = h[r] + l;
                                e._skirtLODIndex[n][i] = u;
                            }
                        e._bInit = !0;
                    }
                }, e.getPlaneLODIndex = function(t, n) {
                    return e._planeLODIndex[t][n];
                }, e.getSkirtLODIndex = function(t, n) {
                    return e._skirtLODIndex[t][n];
                }, e.calcPlaneLODIndex = function(t) {
                    t > e._maxLODLevel && (t = e._maxLODLevel);
                    var n = e.LEAF_GRID_NUM + 1,
                        i = 0,
                        r = null,
                        a = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / Math.pow(2, t);
                    r = new Uint16Array(a * a * 6);
                    for (var o = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / a, s = 0; s < e.LEAF_GRID_NUM; s += o)
                        for (var l = 0; l < e.LEAF_GRID_NUM; l += o) r[i] = (s + o) * n + l,
                            i++, r[i] = s * n + l, i++, r[i] = s * n + l + o, i++, r[i] = s * n + l + o, i++,
                            r[i] = (s + o) * n + l + o, i++, r[i] = (s + o) * n + l, i++;
                    return r;
                }, e.calcSkirtLODIndex = function(t) {
                    t > e._maxLODLevel && (t = e._maxLODLevel);
                    var n = e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM * (e.CHUNK_GRID_NUM / e.LEAF_GRID_NUM) * e.LEAF_PLANE_VERTEXT_COUNT,
                        i = e.LEAF_GRID_NUM + 1,
                        r = 0,
                        a = null,
                        o = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / Math.pow(2, t);
                    a = new Uint16Array(4 * o * 6);
                    for (var s = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / o, l = 0; 4 > l; l++) {
                        for (var h = 0; h < e.LEAF_GRID_NUM; h += s) a[r] = n + i + h, r++, a[r] = n + h,
                            r++, a[r] = n + h + s, r++, a[r] = n + h + s, r++, a[r] = n + i + h + s, r++, a[r] = n + i + h,
                            r++;
                        n += 2 * i;
                    }
                    return a;
                }, e.getHeightFromTerrainHeightData = function(e, t, n, i, r) {
                    return e = 0 > e ? 0 : e, e = e >= i ? i - 1 : e, t = 0 > t ? 0 : t, t = t >= r ? r - 1 : t,
                        n[t * i + e];
                }, e.CHUNK_GRID_NUM = 64, e.LEAF_GRID_NUM = 32, e.__ADAPT_MATRIX__ = null, e.__ADAPT_MATRIX_INV__ = null,
                e._planeLODIndex = null, e._skirtLODIndex = null, e._bInit = !1, i(e, ["LEAF_PLANE_VERTEXT_COUNT", function() {
                    return this.LEAF_PLANE_VERTEXT_COUNT = (e.LEAF_GRID_NUM + 1) * (e.LEAF_GRID_NUM + 1);
                }, "LEAF_SKIRT_VERTEXT_COUNT", function() {
                    return this.LEAF_SKIRT_VERTEXT_COUNT = 2 * (e.LEAF_GRID_NUM + 1) * 4;
                }, "LEAF_VERTEXT_COUNT", function() {
                    return this.LEAF_VERTEXT_COUNT = e.LEAF_PLANE_VERTEXT_COUNT + e.LEAF_SKIRT_VERTEXT_COUNT;
                }, "LEAF_PLANE_MAX_INDEX_COUNT", function() {
                    return this.LEAF_PLANE_MAX_INDEX_COUNT = e.LEAF_GRID_NUM * e.LEAF_GRID_NUM * 6;
                }, "LEAF_SKIRT_MAX_INDEX_COUNT", function() {
                    return this.LEAF_SKIRT_MAX_INDEX_COUNT = 4 * e.LEAF_GRID_NUM * 6;
                }, "LEAF_MAX_INDEX_COUNT", function() {
                    return this.LEAF_MAX_INDEX_COUNT = e.LEAF_PLANE_MAX_INDEX_COUNT + e.LEAF_SKIRT_MAX_INDEX_COUNT;
                }, "__VECTOR3__", function() {
                    return this.__VECTOR3__ = new Te();
                }, "_maxLODLevel", function() {
                    return this._maxLODLevel = Math.log2(e.LEAF_GRID_NUM);
                }]), e;
        }(),
        _e = function() {
            function e() {}
            return r(e, "laya.d3.graphics.Vertex.VertexShuriKenParticle"), e.PARTICLE_CORNERTEXTURECOORDINATE0 = 0,
                e.PARTICLE_POSITION0 = 1, e.PARTICLE_COLOR0 = 2, e.PARTICLE_TEXTURECOORDINATE0 = 3,
                e.PARTICLE_SHAPEPOSITIONSTARTLIFETIME = 4, e.PARTICLE_DIRECTIONTIME = 5, e.PARTICLE_STARTCOLOR0 = 6,
                e.PARTICLE_ENDCOLOR0 = 7, e.PARTICLE_STARTSIZE = 8, e.PARTICLE_STARTROTATION = 9,
                e.PARTICLE_STARTSPEED = 10, e.PARTICLE_RANDOM0 = 11, e.PARTICLE_RANDOM1 = 12, e.PARTICLE_SIMULATIONWORLDPOSTION = 13,
                e.PARTICLE_SIMULATIONWORLDROTATION = 14, e;
        }(),
        de = function() {
            function e(e) {
                this._size = null, this.enbale = !1, this._size = e;
            }
            r(e, "laya.d3.core.particleShuriKen.module.SizeOverLifetime");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                this._size.cloneTo(t._size), t.enbale = this.enbale;
            }, t.clone = function() {
                var e;
                switch (this._size.type) {
                    case 0:
                        e = this._size.separateAxes ? Et.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone()) : Et.createByGradient(this._size.gradient.clone());
                        break;

                    case 1:
                        e = this._size.separateAxes ? Et.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone()) : Et.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);
                        break;

                    case 2:
                        e = this._size.separateAxes ? Et.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone()) : Et.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());
                }
                var t = new this.constructor(e);
                return t.enbale = this.enbale, t;
            }, a(0, t, "size", function() {
                return this._size;
            }), e;
        }(),
        fe = function() {
            function e() {
                this.time = NaN;
            }
            r(e, "laya.d3.core.Keyframe");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t.time = this.time;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, e;
        }(),
        me = function() {
            function e(e, t, n, i) {
                this.x = NaN, this.y = NaN, this.z = NaN, this.w = NaN, void 0 === e && (e = 0),
                    void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), this.x = e,
                    this.y = t, this.z = n, this.w = i;
            }
            r(e, "laya.d3.math.Vector4");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.setValue = function(e, t, n, i) {
                this.x = e, this.y = t, this.z = n, this.w = i;
            }, t.fromArray = function(e, t) {
                void 0 === t && (t = 0), this.x = e[t + 0], this.y = e[t + 1], this.z = e[t + 2],
                    this.w = e[t + 3];
            }, t.cloneTo = function(e) {
                var t = e;
                t.x = this.x, t.y = this.y, t.z = this.z, t.w = this.w;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.length = function() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
            }, t.lengthSquared = function() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            }, t.forNativeElement = function(e) {
                e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z,
                        this.elements[3] = this.w) : this.elements = new Float32Array([this.x, this.y, this.z, this.w]),
                    Ee.rewriteNumProperty(this, "x", 0), Ee.rewriteNumProperty(this, "y", 1), Ee.rewriteNumProperty(this, "z", 2),
                    Ee.rewriteNumProperty(this, "w", 3);
            }, e.lerp = function(e, t, n, i) {
                var r = e.x,
                    a = e.y,
                    o = e.z,
                    s = e.w;
                i.x = r + n * (t.x - r), i.y = a + n * (t.y - a), i.z = o + n * (t.z - o), i.w = s + n * (t.w - s);
            }, e.transformByM4x4 = function(e, t, n) {
                var i = e.x,
                    r = e.y,
                    a = e.z,
                    o = e.w,
                    s = t.elements;
                n.x = i * s[0] + r * s[4] + a * s[8] + o * s[12], n.y = i * s[1] + r * s[5] + a * s[9] + o * s[13],
                    n.z = i * s[2] + r * s[6] + a * s[10] + o * s[14], n.w = i * s[3] + r * s[7] + a * s[11] + o * s[15];
            }, e.equals = function(e, t) {
                return ie.nearEqual(Math.abs(e.x), Math.abs(t.x)) && ie.nearEqual(Math.abs(e.y), Math.abs(t.y)) && ie.nearEqual(Math.abs(e.z), Math.abs(t.z)) && ie.nearEqual(Math.abs(e.w), Math.abs(t.w));
            }, e.normalize = function(e, t) {
                var n = e.length();
                n > 0 && (t.x = e.x * n, t.y = e.y * n, t.z = e.z * n, t.w = e.w * n);
            }, e.add = function(e, t, n) {
                n.x = e.x + t.x, n.y = e.y + t.y, n.z = e.z + t.z, n.w = e.w + t.w;
            }, e.subtract = function(e, t, n) {
                n.x = e.x - t.x, n.y = e.y - t.y, n.z = e.z - t.z, n.w = e.w - t.w;
            }, e.multiply = function(e, t, n) {
                n.x = e.x * t.x, n.y = e.y * t.y, n.z = e.z * t.z, n.w = e.w * t.w;
            }, e.scale = function(e, t, n) {
                n.x = e.x * t, n.y = e.y * t, n.z = e.z * t, n.w = e.w * t;
            }, e.Clamp = function(e, t, n, i) {
                var r = e.x,
                    a = e.y,
                    o = e.z,
                    s = e.w,
                    l = t.x,
                    h = t.y,
                    u = t.z,
                    c = t.w,
                    _ = n.x,
                    d = n.y,
                    f = n.z,
                    m = n.w;
                r = r > _ ? _ : r, r = l > r ? l : r, a = a > d ? d : a, a = h > a ? h : a, o = o > f ? f : o,
                    o = u > o ? u : o, s = s > m ? m : s, s = c > s ? c : s, i.x = r, i.y = a, i.z = o,
                    i.w = s;
            }, e.distanceSquared = function(e, t) {
                var n = e.x - t.x,
                    i = e.y - t.y,
                    r = e.z - t.z,
                    a = e.w - t.w;
                return n * n + i * i + r * r + a * a;
            }, e.distance = function(e, t) {
                var n = e.x - t.x,
                    i = e.y - t.y,
                    r = e.z - t.z,
                    a = e.w - t.w;
                return Math.sqrt(n * n + i * i + r * r + a * a);
            }, e.dot = function(e, t) {
                return e.x * t.x + e.y * t.y + e.z * t.z + e.w * t.w;
            }, e.min = function(e, t, n) {
                n.x = Math.min(e.x, t.x), n.y = Math.min(e.y, t.y), n.z = Math.min(e.z, t.z), n.w = Math.min(e.w, t.w);
            }, e.max = function(e, t, n) {
                n.x = Math.max(e.x, t.x), n.y = Math.max(e.y, t.y), n.z = Math.max(e.z, t.z), n.w = Math.max(e.w, t.w);
            }, i(e, ["ZERO", function() {
                return this.ZERO = new e();
            }, "ONE", function() {
                return this.ONE = new e(1, 1, 1, 1);
            }, "UnitX", function() {
                return this.UnitX = new e(1, 0, 0, 0);
            }, "UnitY", function() {
                return this.UnitY = new e(0, 1, 0, 0);
            }, "UnitZ", function() {
                return this.UnitZ = new e(0, 0, 1, 0);
            }, "UnitW", function() {
                return this.UnitW = new e(0, 0, 0, 1);
            }]), e;
        }(),
        pe = function() {
            function e(e) {
                if (this._counter = 0, this.defines = {}, e) {
                    this._counter = e._counter;
                    for (var t in e.defines) this.defines[t] = e.defines[t];
                }
            }
            r(e, "laya.d3.shader.ShaderDefines");
            var t = e.prototype;
            return t.registerDefine = function(e) {
                var t = Math.pow(2, this._counter++);
                return this.defines[t] = e, t;
            }, e;
        }(),
        Te = function() {
            function e(e, t, n, i) {
                this.x = NaN, this.y = NaN, this.z = NaN, void 0 === e && (e = 0), void 0 === t && (t = 0),
                    void 0 === n && (n = 0), this.x = e, this.y = t, this.z = n;
            }
            r(e, "laya.d3.math.Vector3");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.core.IClone": !0
                }), t.setValue = function(e, t, n) {
                    this.x = e, this.y = t, this.z = n;
                }, t.fromArray = function(e, t) {
                    void 0 === t && (t = 0), this.x = e[t + 0], this.y = e[t + 1], this.z = e[t + 2];
                }, t.cloneTo = function(e) {
                    var t = e;
                    t.x = this.x, t.y = this.y, t.z = this.z;
                }, t.clone = function() {
                    var e = new this.constructor();
                    return this.cloneTo(e), e;
                }, t.toDefault = function() {
                    this.x = 0, this.y = 0, this.z = 0;
                }, t.forNativeElement = function(e) {
                    e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z) : this.elements = new Float32Array([this.x, this.y, this.z]),
                        Ee.rewriteNumProperty(this, "x", 0), Ee.rewriteNumProperty(this, "y", 1), Ee.rewriteNumProperty(this, "z", 2);
                }, e.distanceSquared = function(e, t) {
                    var n = e.x - t.x,
                        i = e.y - t.y,
                        r = e.z - t.z;
                    return n * n + i * i + r * r;
                }, e.distance = function(e, t) {
                    var n = e.x - t.x,
                        i = e.y - t.y,
                        r = e.z - t.z;
                    return Math.sqrt(n * n + i * i + r * r);
                }, e.min = function(e, t, n) {
                    n.x = Math.min(e.x, t.x), n.y = Math.min(e.y, t.y), n.z = Math.min(e.z, t.z);
                }, e.max = function(e, t, n) {
                    n.x = Math.max(e.x, t.x), n.y = Math.max(e.y, t.y), n.z = Math.max(e.z, t.z);
                }, e.transformQuat = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z,
                        o = t.x,
                        s = t.y,
                        l = t.z,
                        h = t.w,
                        u = h * i + s * a - l * r,
                        c = h * r + l * i - o * a,
                        _ = h * a + o * r - s * i,
                        d = -o * i - s * r - l * a;
                    n.x = u * h + d * -o + c * -l - _ * -s, n.y = c * h + d * -s + _ * -o - u * -l,
                        n.z = _ * h + d * -l + u * -s - c * -o;
                }, e.scalarLength = function(e) {
                    var t = e.x,
                        n = e.y,
                        i = e.z;
                    return Math.sqrt(t * t + n * n + i * i);
                }, e.scalarLengthSquared = function(e) {
                    var t = e.x,
                        n = e.y,
                        i = e.z;
                    return t * t + n * n + i * i;
                }, e.normalize = function(e, t) {
                    var n = e.x,
                        i = e.y,
                        r = e.z,
                        a = n * n + i * i + r * r;
                    a > 0 && (a = 1 / Math.sqrt(a), t.x = e.x * a, t.y = e.y * a, t.z = e.z * a);
                }, e.multiply = function(e, t, n) {
                    n.x = e.x * t.x, n.y = e.y * t.y, n.z = e.z * t.z;
                }, e.scale = function(e, t, n) {
                    n.x = e.x * t, n.y = e.y * t, n.z = e.z * t;
                }, e.lerp = function(e, t, n, i) {
                    var r = e.x,
                        a = e.y,
                        o = e.z;
                    i.x = r + n * (t.x - r), i.y = a + n * (t.y - a), i.z = o + n * (t.z - o);
                }, e.transformV3ToV3 = function(t, n, i) {
                    var r = e._tempVector4;
                    e.transformV3ToV4(t, n, r), i.x = r.x, i.y = r.y, i.z = r.z;
                }, e.transformV3ToV4 = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z,
                        o = t.elements;
                    n.x = i * o[0] + r * o[4] + a * o[8] + o[12], n.y = i * o[1] + r * o[5] + a * o[9] + o[13],
                        n.z = i * o[2] + r * o[6] + a * o[10] + o[14], n.w = i * o[3] + r * o[7] + a * o[11] + o[15];
                }, e.TransformNormal = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z,
                        o = t.elements;
                    n.x = i * o[0] + r * o[4] + a * o[8], n.y = i * o[1] + r * o[5] + a * o[9], n.z = i * o[2] + r * o[6] + a * o[10];
                }, e.transformCoordinate = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z,
                        o = t.elements,
                        s = i * o[3] + r * o[7] + a * o[11] + o[15];
                    n.x = i * o[0] + r * o[4] + a * o[8] + o[12] / s, n.y = i * o[1] + r * o[5] + a * o[9] + o[13] / s,
                        n.z = i * o[2] + r * o[6] + a * o[10] + o[14] / s;
                }, e.Clamp = function(e, t, n, i) {
                    var r = e.x,
                        a = e.y,
                        o = e.z,
                        s = t.x,
                        l = t.y,
                        h = t.z,
                        u = n.x,
                        c = n.y,
                        _ = n.z;
                    r = r > u ? u : r, r = s > r ? s : r, a = a > c ? c : a, a = l > a ? l : a, o = o > _ ? _ : o,
                        o = h > o ? h : o, i.x = r, i.y = a, i.z = o;
                }, e.add = function(e, t, n) {
                    n.x = e.x + t.x, n.y = e.y + t.y, n.z = e.z + t.z;
                }, e.subtract = function(e, t, n) {
                    n.x = e.x - t.x, n.y = e.y - t.y, n.z = e.z - t.z;
                }, e.cross = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z,
                        o = t.x,
                        s = t.y,
                        l = t.z;
                    n.x = r * l - a * s, n.y = a * o - i * l, n.z = i * s - r * o;
                }, e.dot = function(e, t) {
                    return e.x * t.x + e.y * t.y + e.z * t.z;
                }, e.equals = function(e, t) {
                    return ie.nearEqual(e.x, t.x) && ie.nearEqual(e.y, t.y) && ie.nearEqual(e.z, t.z);
                }, e._ZERO = new e(0, 0, 0), e._ONE = new e(1, 1, 1), e._NegativeUnitX = new e(-1, 0, 0),
                e._UnitX = new e(1, 0, 0), e._UnitY = new e(0, 1, 0), e._UnitZ = new e(0, 0, 1),
                e._ForwardRH = new e(0, 0, -1), e._ForwardLH = new e(0, 0, 1), e._Up = new e(0, 1, 0),
                i(e, ["_tempVector4", function() {
                    return this._tempVector4 = new me();
                }]), e;
        }(),
        Ee = function() {
            function e(e, t) {
                this.x = NaN, this.y = NaN, void 0 === e && (e = 0), void 0 === t && (t = 0), this.x = e,
                    this.y = t;
            }
            r(e, "laya.d3.math.Vector2");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.setValue = function(e, t) {
                this.x = e, this.y = t;
            }, t.fromArray = function(e, t) {
                void 0 === t && (t = 0), this.x = e[t + 0], this.y = e[t + 1];
            }, t.cloneTo = function(e) {
                var t = e;
                t.x = this.x, t.y = this.y;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.forNativeElement = function(t) {
                t ? (this.elements = t, this.elements[0] = this.x, this.elements[1] = this.y) : this.elements = new Float32Array([this.x, this.y]),
                    e.rewriteNumProperty(this, "x", 0), e.rewriteNumProperty(this, "y", 1);
            }, e.scale = function(e, t, n) {
                n.x = e.x * t, n.y = e.y * t;
            }, e.dot = function(e, t) {
                return e.x * t.x + e.y * t.y;
            }, e.normalize = function(e, t) {
                var n = e.x,
                    i = e.y,
                    r = n * n + i * i;
                r > 0 && (r = 1 / Math.sqrt(r), t.x = n * r, t.y = i * r);
            }, e.scalarLength = function(e) {
                var t = e.x,
                    n = e.y;
                return Math.sqrt(t * t + n * n);
            }, e.rewriteNumProperty = function(e, t, n) {
                Object.defineProperty(e, t, {
                    get: function() {
                        return this.elements[n];
                    },
                    set: function(e) {
                        this.elements[n] = e;
                    }
                });
            }, i(e, ["ZERO", function() {
                return this.ZERO = new e(0, 0);
            }, "ONE", function() {
                return this.ONE = new e(1, 1);
            }]), e;
        }(),
        ve = function() {
            function e() {}
            r(e, "laya.d3.component.AnimatorPlayState");
            var t = e.prototype;
            return t._resetPlayState = function(e) {
                this._finish = !1, this._startPlayTime = e, this._elapsedTime = e, this._playEventIndex = 0,
                    this._lastIsFront = !0;
            }, t._cloneTo = function(e) {
                e._finish = this._finish, e._startPlayTime = this._startPlayTime, e._elapsedTime = this._elapsedTime,
                    e._playEventIndex = this._playEventIndex, e._lastIsFront = this._lastIsFront;
            }, a(0, t, "normalizedTime", function() {
                return this._normalizedTime;
            }), a(0, t, "duration", function() {
                return this._duration;
            }), e;
        }(),
        ge = function() {
            function e(e) {
                this._velocity = null, this.enbale = !1, this.space = 0, this._velocity = e;
            }
            r(e, "laya.d3.core.particleShuriKen.module.VelocityOverLifetime");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                this._velocity.cloneTo(t._velocity), t.enbale = this.enbale, t.space = this.space;
            }, t.clone = function() {
                var e;
                switch (this._velocity.type) {
                    case 0:
                        e = yt.createByConstant(this._velocity.constant.clone());
                        break;

                    case 1:
                        e = yt.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());
                        break;

                    case 2:
                        e = yt.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());
                        break;

                    case 3:
                        e = yt.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMax.clone());
                }
                var t = new this.constructor(e);
                return t.enbale = this.enbale, t.space = this.space, t;
            }, a(0, t, "velocity", function() {
                return this._velocity;
            }), e;
        }(),
        Se = function() {
            function e() {}
            return r(e, "laya.d3.loaders.MeshReader"), e.read = function(e, t, n) {
                var i = new c(e);
                i.pos = 0;
                var r = i.readUTFString();
                switch (r) {
                    case "LAYAMODEL:0301":
                    case "LAYAMODEL:0400":
                    case "LAYAMODEL:0401":
                        De.parse(i, r, t, n);
                        break;

                    case "LAYAMODEL:05":
                    case "LAYAMODEL:COMPRESSION_05":
                        ye.parse(i, r, t, n);
                        break;

                    default:
                        throw new Error("MeshReader: unknown mesh version.");
                }
                t._setSubMeshes(n);
            }, e;
        }(),
        ye = (function() {
            function e() {}
            return r(e, "laya.d3.core.scene.SceneManager"), e;
        }(), function() {
            function e() {}
            return r(e, "laya.d3.math.ContainmentType"), e.Disjoint = 0, e.Contains = 1, e.Intersects = 2,
                e;
        }(), function() {
            function e() {}
            return r(e, "laya.d3.loaders.LoadModelV05"), e.parse = function(t, n, i, r) {
                    e._mesh = i, e._subMeshes = r, e._version = n, e._readData = t, e.READ_DATA(), e.READ_BLOCK(),
                        e.READ_STRINGS();
                    for (var a = 0, o = e._BLOCK.count; o > a; a++) {
                        e._readData.pos = e._BLOCK.blockStarts[a];
                        var s = e._readData.getUint16(),
                            l = e._strings[s],
                            h = e["READ_" + l];
                        if (null == h) throw new Error("model file err,no this function:" + s + " " + l);
                        h.call(null);
                    }
                    e._mesh._bindPoseIndices = new Uint16Array(e._bindPoseIndices), e._bindPoseIndices.length = 0,
                        e._strings.length = 0, e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null;
                }, e._readString = function() {
                    return e._strings[e._readData.getUint16()];
                }, e.READ_DATA = function() {
                    e._DATA.offset = e._readData.getUint32(), e._DATA.size = e._readData.getUint32();
                }, e.READ_BLOCK = function() {
                    for (var t = e._BLOCK.count = e._readData.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; t > r; r++) n.push(e._readData.getUint32()),
                        i.push(e._readData.getUint32());
                }, e.READ_STRINGS = function() {
                    var t = e._readData.getUint32(),
                        n = e._readData.getUint16(),
                        i = e._readData.pos;
                    e._readData.pos = t + e._DATA.offset;
                    for (var r = 0; n > r; r++) e._strings[r] = e._readData.readUTFString();
                    e._readData.pos = i;
                }, e.READ_MESH = function() {
                    var t = 0,
                        n = 0,
                        i = (e._readString(), e._readData.__getBuffer()),
                        r = e._readData.getInt16(),
                        a = e._DATA.offset;
                    for (t = 0; r > t; t++) {
                        var s = a + e._readData.getUint32(),
                            l = e._readData.getUint32(),
                            h = e._readString(),
                            u = Ie.getVertexDeclaration(h, !1),
                            c = u.vertexStride,
                            _ = new ArrayBuffer(c * l),
                            d = new Float32Array(_),
                            f = h.split(","),
                            m = f.length;
                        switch (e._version) {
                            case "LAYAMODEL:05":
                                d = new Float32Array(i.slice(s, s + l * c));
                                break;

                            case "LAYAMODEL:COMPRESSION_05":
                                var p = e._readData.pos;
                                d = new Float32Array(_);
                                var T = new Uint8Array(_);
                                e._readData.pos = s;
                                for (var E = 0; l > E; E++)
                                    for (var v = 0, g = E * c, S = 0; m > S; S++) switch (f[S]) {
                                        case "POSITION":
                                            v = g / 4, d[v] = Ce.convertToNumber(e._readData.getUint16()), d[v + 1] = Ce.convertToNumber(e._readData.getUint16()),
                                                d[v + 2] = Ce.convertToNumber(e._readData.getUint16()), g += 12;
                                            break;

                                        case "NORMAL":
                                            v = g / 4, d[v] = e._readData.getUint8() / 127.5 - 1, d[v + 1] = e._readData.getUint8() / 127.5 - 1,
                                                d[v + 2] = e._readData.getUint8() / 127.5 - 1, g += 12;
                                            break;

                                        case "COLOR":
                                            v = g / 4, d[v] = e._readData.getUint8() / 255, d[v + 1] = e._readData.getUint8() / 255,
                                                d[v + 2] = e._readData.getUint8() / 255, d[v + 3] = e._readData.getUint8() / 255,
                                                g += 16;
                                            break;

                                        case "UV":
                                            v = g / 4, d[v] = Ce.convertToNumber(e._readData.getUint16()), d[v + 1] = Ce.convertToNumber(e._readData.getUint16()),
                                                g += 8;
                                            break;

                                        case "UV1":
                                            v = g / 4, d[v] = Ce.convertToNumber(e._readData.getUint16()), d[v + 1] = Ce.convertToNumber(e._readData.getUint16()),
                                                g += 8;
                                            break;

                                        case "BLENDWEIGHT":
                                            v = g / 4, d[v] = e._readData.getUint8() / 255, d[v + 1] = e._readData.getUint8() / 255,
                                                d[v + 2] = e._readData.getUint8() / 255, d[v + 3] = e._readData.getUint8() / 255,
                                                g += 16;
                                            break;

                                        case "BLENDINDICES":
                                            T[g] = e._readData.getUint8(), T[g + 1] = e._readData.getUint8(), T[g + 2] = e._readData.getUint8(),
                                                T[g + 3] = e._readData.getUint8(), g += 4;
                                            break;

                                        case "TANGENT":
                                            v = g / 4, d[v] = e._readData.getUint8() / 127.5 - 1, d[v + 1] = e._readData.getUint8() / 127.5 - 1,
                                                d[v + 2] = e._readData.getUint8() / 127.5 - 1, d[v + 3] = e._readData.getUint8() / 127.5 - 1,
                                                g += 16;
                                    }
                                e._readData.pos = p;
                        }
                        var y = new Kt(_.byteLength, 35044, !0);
                        y.vertexDeclaration = u, y.setData(d), e._mesh._vertexBuffers.push(y), e._mesh._vertexCount += y.vertexCount,
                            n += 4 * d.length;
                    }
                    var x = a + e._readData.getUint32(),
                        D = e._readData.getUint32(),
                        I = new Uint16Array(i.slice(x, x + D)),
                        R = new qt("ushort", D / 2, 35044, !0);
                    R.setData(I), e._mesh._indexBuffer = R, e._mesh._setBuffer(e._mesh._vertexBuffers, R),
                        n += 2 * R.indexCount, e._mesh._setCPUMemory(n), e._mesh._setGPUMemory(n);
                    var M = e._mesh._boneNames = [],
                        A = e._readData.getUint16();
                    for (M.length = A, t = 0; A > t; t++) M[t] = e._strings[e._readData.getUint16()];
                    var C = e._readData.getUint32(),
                        L = e._readData.getUint32(),
                        O = new Float32Array(i.slice(a + C, a + C + L)),
                        N = O.length,
                        V = N / 16,
                        P = e._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * N);
                    for (e._mesh._inverseBindPoses = o(V), t = 0; N > t; t += 16) {
                        var w = new Ht(O[t + 0], O[t + 1], O[t + 2], O[t + 3], O[t + 4], O[t + 5], O[t + 6], O[t + 7], O[t + 8], O[t + 9], O[t + 10], O[t + 11], O[t + 12], O[t + 13], O[t + 14], O[t + 15], new Float32Array(P, 4 * t, 16));
                        e._mesh._inverseBindPoses[t / 16] = w;
                    }
                    return !0;
                }, e.READ_SUBMESH = function() {
                    var t = e._readData.__getBuffer(),
                        n = new on(e._mesh),
                        i = e._readData.getInt16(),
                        r = e._readData.getUint32(),
                        a = e._readData.getUint32(),
                        o = e._mesh._indexBuffer;
                    n._indexBuffer = o, n._indexStart = r, n._indexCount = a, n._indices = new Uint16Array(o.getData().buffer, 2 * r, a);
                    var s = e._mesh._vertexBuffers[i];
                    n._vertexBuffer = s;
                    var l = e._DATA.offset,
                        h = n._subIndexBufferStart,
                        u = n._subIndexBufferCount,
                        c = n._boneIndicesList,
                        _ = e._readData.getUint16();
                    h.length = _, u.length = _, c.length = _;
                    for (var d = e._mesh._skinDataPathMarks, f = e._bindPoseIndices, m = e._subMeshes.length, p = 0; _ > p; p++) {
                        h[p] = e._readData.getUint32(), u[p] = e._readData.getUint32();
                        for (var T = e._readData.getUint32(), E = e._readData.getUint32(), v = c[p] = new Uint16Array(t.slice(l + T, l + T + E)), g = 0, S = v.length; S > g; g++) {
                            var y = v[g],
                                x = f.indexOf(y); -
                            1 === x ? (v[g] = f.length, f.push(y), d.push([m, p, g])) : v[g] = x;
                        }
                    }
                    return e._subMeshes.push(n), !0;
                }, e._strings = [], e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null,
                e._bindPoseIndices = [], i(e, ["_BLOCK", function() {
                    return this._BLOCK = {
                        count: 0
                    };
                }, "_DATA", function() {
                    return this._DATA = {
                        offset: 0,
                        size: 0
                    };
                }]), e;
        }()),
        xe = function() {
            function e(e, t, n, i) {
                this.r = NaN, this.g = NaN, this.b = NaN, this.a = NaN, void 0 === e && (e = 1),
                    void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === i && (i = 1), this.r = e,
                    this.g = t, this.b = n, this.a = i;
            }
            r(e, "laya.d3.math.Color");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.toLinear = function(e) {
                e.r = ke.gammaToLinearSpace(this.r), e.g = ke.gammaToLinearSpace(this.g), e.b = ke.gammaToLinearSpace(this.b);
            }, t.toGamma = function(e) {
                e.r = ke.linearToGammaSpace(this.r), e.g = ke.linearToGammaSpace(this.g), e.b = ke.linearToGammaSpace(this.b);
            }, t.cloneTo = function(e) {
                var t = e;
                t.r = this.r, t.g = this.g, t.b = this.b, t.a = this.a;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.forNativeElement = function(e) {
                e ? (this.elements = e, this.elements[0] = this.r, this.elements[1] = this.g, this.elements[2] = this.b,
                        this.elements[3] = this.a) : this.elements = new Float32Array([this.r, this.g, this.b, this.a]),
                    Ee.rewriteNumProperty(this, "r", 0), Ee.rewriteNumProperty(this, "g", 1), Ee.rewriteNumProperty(this, "b", 2),
                    Ee.rewriteNumProperty(this, "a", 3);
            }, i(e, ["RED", function() {
                return this.RED = new e(1, 0, 0, 1);
            }, "GREEN", function() {
                return this.GREEN = new e(0, 1, 0, 1);
            }, "BLUE", function() {
                return this.BLUE = new e(0, 0, 1, 1);
            }, "CYAN", function() {
                return this.CYAN = new e(0, 1, 1, 1);
            }, "YELLOW", function() {
                return this.YELLOW = new e(1, .92, .016, 1);
            }, "MAGENTA", function() {
                return this.MAGENTA = new e(1, 0, 1, 1);
            }, "GRAY", function() {
                return this.GRAY = new e(.5, .5, .5, 1);
            }, "WHITE", function() {
                return this.WHITE = new e(1, 1, 1, 1);
            }, "BLACK", function() {
                return this.BLACK = new e(0, 0, 0, 1);
            }]), e;
        }(),
        De = function() {
            function e() {}
            return r(e, "laya.d3.loaders.LoadModelV04"), e.parse = function(t, n, i, r) {
                    e._mesh = i, e._subMeshes = r, e._version = n, e._readData = t, e.READ_DATA(), e.READ_BLOCK(),
                        e.READ_STRINGS();
                    for (var a = 0, o = e._BLOCK.count; o > a; a++) {
                        e._readData.pos = e._BLOCK.blockStarts[a];
                        var s = e._readData.getUint16(),
                            l = e._strings[s],
                            h = e["READ_" + l];
                        if (null == h) throw new Error("model file err,no this function:" + s + " " + l);
                        h.call(null);
                    }
                    e._mesh._bindPoseIndices = new Uint16Array(e._bindPoseIndices), e._bindPoseIndices.length = 0,
                        e._strings.length = 0, e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null;
                }, e._readString = function() {
                    return e._strings[e._readData.getUint16()];
                }, e.READ_DATA = function() {
                    e._DATA.offset = e._readData.getUint32(), e._DATA.size = e._readData.getUint32();
                }, e.READ_BLOCK = function() {
                    for (var t = e._BLOCK.count = e._readData.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; t > r; r++) n.push(e._readData.getUint32()),
                        i.push(e._readData.getUint32());
                }, e.READ_STRINGS = function() {
                    var t = e._readData.getUint32(),
                        n = e._readData.getUint16(),
                        i = e._readData.pos;
                    e._readData.pos = t + e._DATA.offset;
                    for (var r = 0; n > r; r++) e._strings[r] = e._readData.readUTFString();
                    e._readData.pos = i;
                }, e.READ_MESH = function() {
                    var t = (e._readString(), e._readData.__getBuffer()),
                        n = 0,
                        i = 0,
                        r = e._readData.getInt16(),
                        a = e._DATA.offset;
                    for (n = 0; r > n; n++) {
                        var s, l = a + e._readData.getUint32(),
                            h = e._readData.getUint32(),
                            u = new Float32Array(t.slice(l, l + h)),
                            c = e._readString();
                        switch (e._version) {
                            case "LAYAMODEL:0301":
                            case "LAYAMODEL:0400":
                                s = Ie.getVertexDeclaration(c);
                                break;

                            case "LAYAMODEL:0401":
                                s = Ie.getVertexDeclaration(c, !1);
                                break;

                            default:
                                throw new Error("LoadModelV03: unknown version.");
                        }
                        if (!s) throw new Error("LoadModelV03: unknown vertexDeclaration.");
                        var _ = new Kt(4 * u.length, 35044, !0);
                        _.vertexDeclaration = s, _.setData(u), e._mesh._vertexBuffers.push(_), e._mesh._vertexCount += _.vertexCount,
                            i += 4 * u.length;
                    }
                    var d = a + e._readData.getUint32(),
                        f = e._readData.getUint32(),
                        m = new Uint16Array(t.slice(d, d + f)),
                        p = new qt("ushort", f / 2, 35044, !0);
                    p.setData(m), e._mesh._indexBuffer = p, i += 2 * p.indexCount, e._mesh._setBuffer(e._mesh._vertexBuffers, p),
                        e._mesh._setCPUMemory(i), e._mesh._setGPUMemory(i);
                    var T = e._mesh._boneNames = [],
                        E = e._readData.getUint16();
                    for (T.length = E, n = 0; E > n; n++) T[n] = e._strings[e._readData.getUint16()];
                    e._readData.pos += 8;
                    var v = e._readData.getUint32(),
                        g = e._readData.getUint32(),
                        S = new Float32Array(t.slice(a + v, a + v + g)),
                        y = S.length,
                        x = y / 16,
                        D = e._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * y);
                    for (e._mesh._inverseBindPoses = o(x), n = 0; y > n; n += 16) {
                        var I = new Ht(S[n + 0], S[n + 1], S[n + 2], S[n + 3], S[n + 4], S[n + 5], S[n + 6], S[n + 7], S[n + 8], S[n + 9], S[n + 10], S[n + 11], S[n + 12], S[n + 13], S[n + 14], S[n + 15], new Float32Array(D, 4 * n, 16));
                        e._mesh._inverseBindPoses[n / 16] = I;
                    }
                    return !0;
                }, e.READ_SUBMESH = function() {
                    var t = e._readData.__getBuffer(),
                        n = new on(e._mesh),
                        i = e._readData.getInt16();
                    e._readData.getUint32(), e._readData.getUint32();
                    var r = e._readData.getUint32(),
                        a = e._readData.getUint32(),
                        o = e._mesh._indexBuffer;
                    n._indexBuffer = o, n._indexStart = r, n._indexCount = a, n._indices = new Uint16Array(o.getData().buffer, 2 * r, a);
                    var s = e._mesh._vertexBuffers[i];
                    n._vertexBuffer = s;
                    var l = e._DATA.offset,
                        h = n._subIndexBufferStart,
                        u = n._subIndexBufferCount,
                        c = n._boneIndicesList,
                        _ = e._readData.getUint16();
                    h.length = _, u.length = _, c.length = _;
                    for (var d = e._mesh._skinDataPathMarks, f = e._bindPoseIndices, m = e._subMeshes.length, p = 0; _ > p; p++) {
                        h[p] = e._readData.getUint32(), u[p] = e._readData.getUint32();
                        for (var T = e._readData.getUint32(), E = e._readData.getUint32(), v = c[p] = new Uint16Array(t.slice(l + T, l + T + E)), g = 0, S = v.length; S > g; g++) {
                            var y = v[g],
                                x = f.indexOf(y); -
                            1 === x ? (v[g] = f.length, f.push(y), d.push([m, p, g])) : v[g] = x;
                        }
                    }
                    return e._subMeshes.push(n), !0;
                }, e._strings = [], e._readData = null, e._version = null, e._mesh = null, e._subMeshes = null,
                e._bindPoseIndices = [], i(e, ["_BLOCK", function() {
                    return this._BLOCK = {
                        count: 0
                    };
                }, "_DATA", function() {
                    return this._DATA = {
                        offset: 0,
                        size: 0
                    };
                }]), e;
        }(),
        Ie = function() {
            function e() {}
            return r(e, "laya.d3.graphics.Vertex.VertexMesh"), e.getVertexDeclaration = function(t, n) {
                    void 0 === n && (n = !0);
                    var i = e._vertexDeclarationMap[t + (n ? "_0" : "_1")];
                    if (!i) {
                        for (var r = t.split(","), a = 0, o = [], s = 0, l = r.length; l > s; s++) {
                            var h;
                            switch (r[s]) {
                                case "POSITION":
                                    h = new ze(a, "vector3", 0), a += 12;
                                    break;

                                case "NORMAL":
                                    h = new ze(a, "vector3", 3), a += 12;
                                    break;

                                case "COLOR":
                                    h = new ze(a, "vector4", 1), a += 16;
                                    break;

                                case "UV":
                                    h = new ze(a, "vector2", 2), a += 8;
                                    break;

                                case "UV1":
                                    h = new ze(a, "vector2", 7), a += 8;
                                    break;

                                case "BLENDWEIGHT":
                                    h = new ze(a, "vector4", 6), a += 16;
                                    break;

                                case "BLENDINDICES":
                                    n ? (h = new ze(a, "vector4", 5), a += 16) : (h = new ze(a, "byte4", 5), a += 4);
                                    break;

                                case "TANGENT":
                                    h = new ze(a, "vector4", 4), a += 16;
                                    break;

                                default:
                                    throw "VertexMesh: unknown vertex flag.";
                            }
                            o.push(h);
                        }
                        i = new ft(a, o), e._vertexDeclarationMap[t + (n ? "_0" : "_1")] = i;
                    }
                    return i;
                }, e.MESH_POSITION0 = 0, e.MESH_COLOR0 = 1, e.MESH_TEXTURECOORDINATE0 = 2, e.MESH_NORMAL0 = 3,
                e.MESH_TANGENT0 = 4, e.MESH_BLENDINDICES0 = 5, e.MESH_BLENDWEIGHT0 = 6, e.MESH_TEXTURECOORDINATE1 = 7,
                e.MESH_WORLDMATRIX_ROW0 = 8, e.MESH_WORLDMATRIX_ROW1 = 9, e.MESH_WORLDMATRIX_ROW2 = 10,
                e.MESH_WORLDMATRIX_ROW3 = 11, e.MESH_MVPMATRIX_ROW0 = 12, e.MESH_MVPMATRIX_ROW1 = 13,
                e.MESH_MVPMATRIX_ROW2 = 14, e.MESH_MVPMATRIX_ROW3 = 15, e._vertexDeclarationMap = {},
                i(e, ["instanceWorldMatrixDeclaration", function() {
                    return this.instanceWorldMatrixDeclaration = new ft(64, [new ze(0, "vector4", 8), new ze(16, "vector4", 9), new ze(32, "vector4", 10), new ze(48, "vector4", 11)]);
                }, "instanceMVPMatrixDeclaration", function() {
                    return this.instanceMVPMatrixDeclaration = new ft(64, [new ze(0, "vector4", 12), new ze(16, "vector4", 13), new ze(32, "vector4", 14), new ze(48, "vector4", 15)]);
                }]), e;
        }(),
        Re = function() {
            function e() {
                this._destroyed = !1, this._emissionRate = 0, this._bursts = null, this.enbale = !1,
                    this._destroyed = !1, this.emissionRate = 10, this._bursts = [];
            }
            r(e, "laya.d3.core.particleShuriKen.module.Emission");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0,
                "laya.resource.IDestroy": !0
            }), t.destroy = function() {
                this._bursts = null, this._destroyed = !0;
            }, t.getBurstsCount = function() {
                return this._bursts.length;
            }, t.getBurstByIndex = function(e) {
                return this._bursts[e];
            }, t.addBurst = function(e) {
                var t = this._bursts.length;
                if (t > 0)
                    for (var n = 0; t > n; n++) this._bursts[n].time > e.time && this._bursts.splice(n, 0, e);
                this._bursts.push(e);
            }, t.removeBurst = function(e) {
                var t = this._bursts.indexOf(e); -
                1 !== t && this._bursts.splice(t, 1);
            }, t.removeBurstByIndex = function(e) {
                this._bursts.splice(e, 1);
            }, t.clearBurst = function() {
                this._bursts.length = 0;
            }, t.cloneTo = function(e) {
                var t = e,
                    n = t._bursts;
                n.length = this._bursts.length;
                for (var i = 0, r = this._bursts.length; r > i; i++) {
                    var a = n[i];
                    a ? this._bursts[i].cloneTo(a) : n[i] = this._bursts[i].clone();
                }
                t._emissionRate = this._emissionRate, t.enbale = this.enbale;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "destroyed", function() {
                return this._destroyed;
            }), a(0, t, "emissionRate", function() {
                return this._emissionRate;
            }, function(e) {
                if (0 > e) throw new Error("ParticleBaseShape:emissionRate value must large or equal than 0.");
                this._emissionRate = e;
            }), e;
        }(),
        Me = function() {
            function e(e, t) {
                this.center = null, this.radius = NaN, this.center = e, this.radius = t;
            }
            r(e, "laya.d3.math.BoundSphere");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.toDefault = function() {
                this.center.toDefault(), this.radius = 0;
            }, t.intersectsRayDistance = function(e) {
                return Ft.intersectsRayAndSphereRD(e, this);
            }, t.intersectsRayPoint = function(e, t) {
                return Ft.intersectsRayAndSphereRP(e, this, t);
            }, t.cloneTo = function(e) {
                var t = e;
                this.center.cloneTo(t.center), t.radius = this.radius;
            }, t.clone = function() {
                var e = new this.constructor(new Te(), new Te());
                return this.cloneTo(e), e;
            }, e.createFromSubPoints = function(t, n, i, r) {
                if (null == t) throw new Error("points");
                if (0 > n || n >= t.length) throw new Error("start" + n + "Must be in the range [0, " + (t.length - 1) + "]");
                if (0 > i || n + i > t.length) throw new Error("count" + i + "Must be in the range <= " + t.length + "}");
                var a = n + i,
                    o = e._tempVector3;
                o.x = 0, o.y = 0, o.z = 0;
                for (var s = n; a > s; ++s) Te.add(t[s], o, o);
                var l = r.center;
                Te.scale(o, 1 / i, l);
                var h = 0;
                for (s = n; a > s; ++s) {
                    var u = Te.distanceSquared(l, t[s]);
                    u > h && (h = u);
                }
                r.radius = Math.sqrt(h);
            }, e.createfromPoints = function(t, n) {
                if (null == t) throw new Error("points");
                e.createFromSubPoints(t, 0, t.length, n);
            }, i(e, ["_tempVector3", function() {
                return this._tempVector3 = new Te();
            }]), e;
        }(),
        Ae = function() {
            function e() {
                this.renderType = 0;
            }
            r(e, "laya.d3.core.render.RenderElement");
            var t = e.prototype;
            return t.setTransform = function(e) {
                    this._transform = e;
                }, t.setGeometry = function(e) {
                    this._geometry = e;
                }, t.addToOpaqueRenderQueue = function(e, t) {
                    t.elements.push(this);
                }, t.addToTransparentRenderQueue = function(e, t) {
                    t.elements.push(this), t.lastTransparentBatched = !1, t.lastTransparentRenderElement = this;
                }, t._render = function(e, t, n, i) {
                    var r, a, o, s = Mi._updateMark,
                        l = e.scene,
                        h = e.camera,
                        u = this._transform,
                        c = this._geometry;
                    e.renderElement = this;
                    var _ = s !== this.render._updateMark || this.renderType !== this.render._updateRenderType;
                    if (_ && (this.render._renderUpdate(e, u), this.render._renderUpdateWithCamera(e, u),
                            this.render._updateMark = s, this.render._updateRenderType = this.renderType), c._prepareRender(e)) {
                        var d, f = this.material._shader.getSubShaderAt(0);
                        if (n)
                            if (i) {
                                var m = f.getFlag(i);
                                if (!m) return;
                                for (var p = n._subShaders, T = 0, E = p.length; E > T; T++) {
                                    var v = p[T];
                                    if (m === v.getFlag(i)) {
                                        d = v._passes;
                                        break;
                                    }
                                }
                                if (!d) return;
                            } else d = n.getSubShaderAt(0)._passes;
                        else d = f._passes;
                        for (var g = 0, S = d.length; S > g; g++) {
                            var y = e.shader = d[g].withCompile(l._defineDatas.value & ~this.material._disablePublicDefineDatas.value, this.render._defineDatas.value, this.material._defineDatas.value),
                                x = y.bind(),
                                D = s !== y._uploadMark,
                                I = y._uploadScene !== l || D;
                            (I || x) && (y.uploadUniforms(y._sceneUniformParamsMap, l._shaderValues, I), y._uploadScene = l);
                            var R = y._uploadRender !== this.render || y._uploadRenderType !== this.renderType || D;
                            (R || x) && (y.uploadUniforms(y._spriteUniformParamsMap, this.render._shaderValues, R),
                                y._uploadRender = this.render, y._uploadRenderType = this.renderType);
                            var M = y._uploadCamera !== h || D;
                            (M || x) && (y.uploadUniforms(y._cameraUniformParamsMap, h._shaderValues, M), y._uploadCamera = h);
                            var A = y._uploadMaterial !== this.material || D;
                            (A || x) && (y.uploadUniforms(y._materialUniformParamsMap, this.material._shaderValues, A),
                                y._uploadMaterial = this.material);
                            var C = this.material._shaderValues;
                            r !== this.material || a !== y ? (y.uploadRenderStateBlendDepth(C), y.uploadRenderStateFrontFace(C, t, u),
                                r = this.material, a = y, o = this.render) : o !== this.render && (y.uploadRenderStateFrontFace(C, t, u),
                                o = this.render), c._render(e), y._uploadMark = s;
                        }
                    }
                    _ && 0 !== this.renderType && this.render._revertBatchRenderUpdate(e), Mi._updateMark++;
                }, t.destroy = function() {
                    this._transform = null, this._geometry = null, this.material = null, this.render = null;
                }, e.RENDERTYPE_NORMAL = 0, e.RENDERTYPE_STATICBATCH = 1, e.RENDERTYPE_INSTANCEBATCH = 2,
                e.RENDERTYPE_VERTEXBATCH = 3, e;
        }(),
        Ce = function() {
            function e() {}
            return r(e, "laya.d3.math.HalfFloatUtils"), e.__init__ = function() {
                for (var t = 0; 256 > t; ++t) {
                    var n = t - 127; -
                    27 > n ? (e._baseTable[0 | t] = 0, e._baseTable[256 | t] = 32768, e._shiftTable[0 | t] = 24,
                        e._shiftTable[256 | t] = 24) : -14 > n ? (e._baseTable[0 | t] = 1024 >> -n - 14,
                        e._baseTable[256 | t] = 1024 >> -n - 14 | 32768, e._shiftTable[0 | t] = -n - 1,
                        e._shiftTable[256 | t] = -n - 1) : 15 >= n ? (e._baseTable[0 | t] = n + 15 << 10,
                        e._baseTable[256 | t] = n + 15 << 10 | 32768, e._shiftTable[0 | t] = 13, e._shiftTable[256 | t] = 13) : 128 > n ? (e._baseTable[0 | t] = 31744,
                        e._baseTable[256 | t] = 64512, e._shiftTable[0 | t] = 24, e._shiftTable[256 | t] = 24) : (e._baseTable[0 | t] = 31744,
                        e._baseTable[256 | t] = 64512, e._shiftTable[0 | t] = 13, e._shiftTable[256 | t] = 13);
                }
                for (e._mantissaTable[0] = 0, t = 1; 1024 > t; ++t) {
                    var i = t << 13;
                    for (n = 0; 0 === (8388608 & i);) n -= 8388608, i <<= 1;
                    i &= -8388609, n += 947912704, e._mantissaTable[t] = i | n;
                }
                for (t = 1024; 2048 > t; ++t) e._mantissaTable[t] = 939524096 + (t - 1024 << 13);
                for (e._exponentTable[0] = 0, t = 1; 31 > t; ++t) e._exponentTable[t] = t << 23;
                for (e._exponentTable[31] = 1199570944, e._exponentTable[32] = 2147483648, t = 33; 63 > t; ++t) e._exponentTable[t] = 2147483648 + (t - 32 << 23);
                for (e._exponentTable[63] = 3347054592, e._offsetTable[0] = 0, t = 1; 64 > t; ++t) 32 === t ? e._offsetTable[t] = 0 : e._offsetTable[t] = 1024;
            }, e.roundToFloat16Bits = function(t) {
                e._floatView[0] = t;
                var n = e._uint32View[0],
                    i = n >> 23 & 511;
                return e._baseTable[i] + ((8388607 & n) >> e._shiftTable[i]);
            }, e.convertToNumber = function(t) {
                var n = t >> 10;
                return e._uint32View[0] = e._mantissaTable[e._offsetTable[n] + (1023 & t)] + e._exponentTable[n],
                    e._floatView[0];
            }, i(e, ["_buffer", function() {
                return this._buffer = new ArrayBuffer(4);
            }, "_floatView", function() {
                return this._floatView = new Float32Array(e._buffer);
            }, "_uint32View", function() {
                return this._uint32View = new Uint32Array(e._buffer);
            }, "_baseTable", function() {
                return this._baseTable = new Uint32Array(512);
            }, "_shiftTable", function() {
                return this._shiftTable = new Uint32Array(512);
            }, "_mantissaTable", function() {
                return this._mantissaTable = new Uint32Array(2048);
            }, "_exponentTable", function() {
                return this._exponentTable = new Uint32Array(64);
            }, "_offsetTable", function() {
                return this._offsetTable = new Uint32Array(64);
            }]), e;
        }(),
        Le = function() {
            function e() {
                this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = null;
            }
            r(e, "laya.d3.resource.models.SkyMesh");
            var t = e.prototype;
            return t._render = function(e) {}, e;
        }(),
        Oe = function() {
            function e(e, t) {
                this._frame = null, this._startFrame = null, this.tiles = null, this.type = 0, this.randomRow = !1,
                    this.rowIndex = 0, this.cycles = 0, this.enableUVChannels = 0, this.enable = !1,
                    this.tiles = new Ee(1, 1), this.type = 0, this.randomRow = !0, this.rowIndex = 0,
                    this.cycles = 1, this.enableUVChannels = 1, this._frame = e, this._startFrame = t;
            }
            r(e, "laya.d3.core.particleShuriKen.module.TextureSheetAnimation");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                this.tiles.cloneTo(t.tiles), t.type = this.type, t.randomRow = this.randomRow, this._frame.cloneTo(t._frame),
                    this._startFrame.cloneTo(t._startFrame), t.cycles = this.cycles, t.enableUVChannels = this.enableUVChannels,
                    t.enable = this.enable;
            }, t.clone = function() {
                var e;
                switch (this._frame.type) {
                    case 0:
                        e = Y.createByConstant(this._frame.constant);
                        break;

                    case 1:
                        e = Y.createByOverTime(this._frame.frameOverTimeData.clone());
                        break;

                    case 2:
                        e = Y.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);
                        break;

                    case 3:
                        e = Y.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());
                }
                var t;
                switch (this._startFrame.type) {
                    case 0:
                        t = Dt.createByConstant(this._startFrame.constant);
                        break;

                    case 1:
                        t = Dt.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);
                }
                var n = new this.constructor(e, t);
                return this.tiles.cloneTo(n.tiles), n.type = this.type, n.randomRow = this.randomRow,
                    n.cycles = this.cycles, n.enableUVChannels = this.enableUVChannels, n.enable = this.enable,
                    n;
            }, a(0, t, "frame", function() {
                return this._frame;
            }), a(0, t, "startFrame", function() {
                return this._startFrame;
            }), e;
        }(),
        Ne = function() {
            function e() {}
            return r(e, "laya.d3.resource.TextureGenerator"), e.lightAttenTexture = function(e, t, n, i, r, a) {
                var o = e / n,
                    s = 1 / (1 + 25 * o);
                o >= .64 && (o > 1 ? s = 0 : s *= 1 - (o - .64) / .36), a[r] = Math.floor(255 * s + .5);
            }, e.haloTexture = function(e, t, n, i, r, a) {
                n >>= 1, i >>= 1;
                var o = (e - n) / n,
                    s = (t - i) / i,
                    l = o * o + s * s;
                l > 1 && (l = 1), a[r] = Math.floor(255 * (1 - l) + .5);
            }, e._generateTexture2D = function(e, t, n, i) {
                var r = 0,
                    a = 0;
                switch (e.format) {
                    case 0:
                        a = 3;
                        break;

                    case 1:
                        a = 4;
                        break;

                    case 2:
                        a = 1;
                        break;

                    default:
                        throw "GeneratedTexture._generateTexture: unkonw texture format.";
                }
                for (var o = new Uint8Array(t * n * a), s = 0; n > s; s++)
                    for (var l = 0; t > l; l++) i(l, s, t, n, r, o),
                        r += a;
                e.setPixels(o);
            }, e;
        }(),
        Ve = function() {
            function e(e, t, n, i) {
                this._attributeMap = null, this._uniformMap = null, this._enableInstancing = !1,
                    this._subShaders = [], this._name = e, this._attributeMap = t, this._uniformMap = n,
                    this._enableInstancing = i;
            }
            r(e, "laya.d3.shader.Shader3D");
            var t = e.prototype;
            return t.addSubShader = function(e) {
                    this._subShaders.push(e), e._owner = this;
                }, t.getSubShaderAt = function(e) {
                    return this._subShaders[e];
                }, e.propertyNameToID = function(t) {
                    if (null != e._propertyNameMap[t]) return e._propertyNameMap[t];
                    var n = e._propertyNameCounter++;
                    return e._propertyNameMap[t] = n, n;
                }, e.addInclude = function(e, t) {
                    C.addInclude(e, t);
                }, e.registerPublicDefine = function(t) {
                    var n = Math.pow(2, e._publicCounter++);
                    return e._globleDefines[n] = t, n;
                }, e.compileShader = function(e, t, n, i, r, a) {
                    var o = laya.d3.shader.Shader3D.find(e);
                    if (o) {
                        var s = o.getSubShaderAt(t);
                        if (s) {
                            var l = s._passes[n];
                            l ? F.shaderHighPrecision ? l.withCompile(i, r, a) : l.withCompile(i - laya.d3.shader.Shader3D.SHADERDEFINE_HIGHPRECISION, r, a) : console.warn("Shader3D: unknown passIndex.");
                        } else console.warn("Shader3D: unknown subShaderIndex.");
                    } else console.warn("Shader3D: unknown shader name.");
                }, e.add = function(t, n, i, r) {
                    return void 0 === r && (r = !1), laya.d3.shader.Shader3D._preCompileShader[t] = new e(t, n, i, r);
                }, e.find = function(e) {
                    return laya.d3.shader.Shader3D._preCompileShader[e];
                }, e.RENDER_STATE_CULL = 0, e.RENDER_STATE_BLEND = 1, e.RENDER_STATE_BLEND_SRC = 2,
                e.RENDER_STATE_BLEND_DST = 3, e.RENDER_STATE_BLEND_SRC_RGB = 4, e.RENDER_STATE_BLEND_DST_RGB = 5,
                e.RENDER_STATE_BLEND_SRC_ALPHA = 6, e.RENDER_STATE_BLEND_DST_ALPHA = 7, e.RENDER_STATE_BLEND_CONST_COLOR = 8,
                e.RENDER_STATE_BLEND_EQUATION = 9, e.RENDER_STATE_BLEND_EQUATION_RGB = 10, e.RENDER_STATE_BLEND_EQUATION_ALPHA = 11,
                e.RENDER_STATE_DEPTH_TEST = 12, e.RENDER_STATE_DEPTH_WRITE = 13, e.PERIOD_CUSTOM = 0,
                e.PERIOD_MATERIAL = 1, e.PERIOD_SPRITE = 2, e.PERIOD_CAMERA = 3, e.PERIOD_SCENE = 4,
                e.SHADERDEFINE_HIGHPRECISION = 0, e._propertyNameCounter = 0, e._propertyNameMap = {},
                e._publicCounter = 0, e._globleDefines = [], e._preCompileShader = {}, e.debugMode = !1,
                e;
        }(),
        Pe = function() {
            function e(e) {
                this._temp = new Uint32Array(1), this.seeds = new Uint32Array(4), this.seeds[0] = e,
                    this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1,
                    this.seeds[3] = 1812433253 * this.seeds[2] + 1;
            }
            r(e, "laya.d3.math.Rand");
            var t = e.prototype;
            return t.getUint = function() {
                return this._temp[0] = this.seeds[0] ^ this.seeds[0] << 11, this.seeds[0] = this.seeds[1],
                    this.seeds[1] = this.seeds[2], this.seeds[2] = this.seeds[3], this.seeds[3] = this.seeds[3] ^ this.seeds[3] >>> 19 ^ (this._temp[0] ^ this._temp[0] >>> 8),
                    this.seeds[3];
            }, t.getFloat = function() {
                return this.getUint(), (8388607 & this.seeds[3]) * (1 / 8388607);
            }, t.getSignedFloat = function() {
                return 2 * this.getFloat() - 1;
            }, a(0, t, "seed", function() {
                return this.seeds[0];
            }, function(e) {
                this.seeds[0] = e, this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1,
                    this.seeds[3] = 1812433253 * this.seeds[2] + 1;
            }), e.getFloatFromInt = function(e) {
                return (8388607 & e) * (1 / 8388607);
            }, e.getByteFromInt = function(e) {
                return (8388607 & e) >>> 15;
            }, e;
        }(),
        we = function() {
            function e() {
                this._currentPSSM = -1, this._shadowMapCount = 3, this._maxDistance = 200, this._ratioOfDistance = 1 / this._shadowMapCount,
                    this._statesDirty = !0, this._shadowMapTextureSize = 1024, this._scene = null, this._PCFType = 0,
                    this._shaderValueLightVP = null, this._spiltDistance = new Array(4), this._globalParallelLightDir = new Te(0, -1, 0),
                    this._boundingSphere = new Array(4), this._boundingBox = new Array(4), this._frustumPos = new Array(16),
                    this._uniformDistance = new Array(4), this._logDistance = new Array(4), this._dimension = new Array(4),
                    this._tempLookAt3 = new Te(), this._tempLookAt4 = new me(), this._tempValue = new me(),
                    this._tempPos = new Te(), this._tempLightUp = new Te(), this._tempMin = new me(),
                    this._tempMax = new me(), this._tempMatrix44 = new Ht(), this._splitFrustumCulling = new Vt(Ht.DEFAULT),
                    this._tempScaleMatrix44 = new Ht(), this._shadowPCFOffset = new Ee(1 / 1024, 1 / 1024),
                    this._shaderValueDistance = new me(), this.cameras = [], this._shaderValueVPs = [];
                var e = 0;
                for (e = 0; e < this._spiltDistance.length; e++) this._spiltDistance[e] = 0;
                for (e = 0; e < this._dimension.length; e++) this._dimension[e] = new Ee();
                for (e = 0; e < this._frustumPos.length; e++) this._frustumPos[e] = new Te();
                for (e = 0; e < this._boundingBox.length; e++) this._boundingBox[e] = new zt(new Te(), new Te());
                for (e = 0; e < this._boundingSphere.length; e++) this._boundingSphere[e] = new Me(new Te(), 0);
                Ht.createScaling(new Te(.5, .5, 1), this._tempScaleMatrix44), this._tempScaleMatrix44.elements[12] = .5,
                    this._tempScaleMatrix44.elements[13] = .5;
            }
            r(e, "laya.d3.shadowMap.ParallelSplitShadowMap");
            var t = e.prototype;
            return t.setInfo = function(e, t, n, i, r, a) {
                r > 3 && (this._shadowMapCount = 3), this._scene = e, this._maxDistance = t, this.shadowMapCount = r,
                    this._globalParallelLightDir = n, this._ratioOfDistance = 1 / this._shadowMapCount;
                for (var o = 0; o < this._spiltDistance.length; o++) this._spiltDistance[o] = 0;
                this._shadowMapTextureSize = i, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize,
                    this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this.setPCFType(a), this._statesDirty = !0;
            }, t.setPCFType = function(e) {
                this._PCFType = e;
                var t = this._scene._defineDatas;
                switch (this._PCFType) {
                    case 0:
                        t.add(Qn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Qn.SHADERDEFINE_SHADOW_PCF1), t.remove(Qn.SHADERDEFINE_SHADOW_PCF2),
                            t.remove(Qn.SHADERDEFINE_SHADOW_PCF3);
                        break;

                    case 1:
                        t.add(Qn.SHADERDEFINE_SHADOW_PCF1), t.remove(Qn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Qn.SHADERDEFINE_SHADOW_PCF2),
                            t.remove(Qn.SHADERDEFINE_SHADOW_PCF3);
                        break;

                    case 2:
                        t.add(Qn.SHADERDEFINE_SHADOW_PCF2), t.remove(Qn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Qn.SHADERDEFINE_SHADOW_PCF1),
                            t.remove(Qn.SHADERDEFINE_SHADOW_PCF3);
                        break;

                    case 3:
                        t.add(Qn.SHADERDEFINE_SHADOW_PCF3), t.remove(Qn.SHADERDEFINE_SHADOW_PCF_NO), t.remove(Qn.SHADERDEFINE_SHADOW_PCF1),
                            t.remove(Qn.SHADERDEFINE_SHADOW_PCF2);
                }
            }, t.getPCFType = function() {
                return this._PCFType;
            }, t.setFarDistance = function(e) {
                this._maxDistance != e && (this._maxDistance = e, this._statesDirty = !0);
            }, t.getFarDistance = function() {
                return this._maxDistance;
            }, t._beginSampler = function(e, t) {
                if (0 > e || e > this._shadowMapCount) throw new Error("ParallelSplitShadowMap: beginSample invalid index");
                this._currentPSSM = e, this._update(t);
            }, t.endSampler = function(e) {
                this._currentPSSM = -1;
            }, t._calcAllLightCameraInfo = function(e) {
                if (1 === this._shadowMapCount) this._beginSampler(0, e), this.endSampler(e);
                else
                    for (var t = 0, n = this._shadowMapCount + 1; n > t; t++) this._beginSampler(t, e),
                        this.endSampler(e);
            }, t._recalculate = function(e, t, n) {
                this._calcSplitDistance(e), this._calcBoundingBox(t, n), this._rebuildRenderInfo();
            }, t._update = function(e) {
                var t = e.nearPlane,
                    n = e.fieldOfView,
                    i = e.aspectRatio;
                (this._statesDirty || this.lastNearPlane !== t || this.lastFieldOfView !== n || this.lastAspectRatio !== i) && (this._recalculate(t, n, i),
                    this._uploadShaderValue(), this._statesDirty = !1, this.lastNearPlane = t, this.lastFieldOfView = n,
                    this.lastAspectRatio = i), this._calcLightViewProject(e);
            }, t._uploadShaderValue = function() {
                var e = this._scene._defineDatas;
                switch (this._shadowMapCount) {
                    case 1:
                        e.add(Qn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM2), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM3);
                        break;

                    case 2:
                        e.add(Qn.SHADERDEFINE_SHADOW_PSSM2), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM3);
                        break;

                    case 3:
                        e.add(Qn.SHADERDEFINE_SHADOW_PSSM3), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM2);
                }
                var t = this._scene._shaderValues;
                switch (t.setVector(Qn.SHADOWDISTANCE, this._shaderValueDistance), t.setBuffer(Qn.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP),
                    t.setVector2(Qn.SHADOWMAPPCFOFFSET, this._shadowPCFOffset), this._shadowMapCount) {
                    case 3:
                        t.setTexture(Qn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), t.setTexture(Qn.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget),
                            t.setTexture(Qn.SHADOWMAPTEXTURE3, this.cameras[3].renderTarget);
                        break;

                    case 2:
                        t.setTexture(Qn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), t.setTexture(Qn.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget);
                        break;

                    case 1:
                        t.setTexture(Qn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget);
                }
            }, t._calcSplitDistance = function(e) {
                var t = this._maxDistance,
                    n = 1 / this._shadowMapCount,
                    i = 0;
                for (i = 0; i <= this._shadowMapCount; i++) this._uniformDistance[i] = e + (t - e) * i * n;
                var r = t / e;
                for (i = 0; i <= this._shadowMapCount; i++) {
                    var a = Math.pow(r, i * n);
                    this._logDistance[i] = e * a;
                }
                for (i = 0; i <= this._shadowMapCount; i++) this._spiltDistance[i] = this._uniformDistance[i] * this._ratioOfDistance + this._logDistance[i] * (1 - this._ratioOfDistance);
                this._shaderValueDistance.x = this._spiltDistance[1], this._shaderValueDistance.y = this._spiltDistance[2],
                    this._shaderValueDistance.z = this._spiltDistance[3], this._shaderValueDistance.w = 0;
            }, t._calcBoundingBox = function(e, t) {
                var n = 3.1415926 * e / 180,
                    i = Math.tan(n / 2),
                    r = NaN,
                    a = NaN,
                    o = NaN,
                    s = 0;
                for (s = 0; s <= this._shadowMapCount; s++) {
                    o = this._spiltDistance[s], r = o * i, a = r * t;
                    var l = this._frustumPos[4 * s + 0];
                    l.x = -a, l.y = -r, l.z = -o, l = this._frustumPos[4 * s + 1], l.x = a, l.y = -r,
                        l.z = -o, l = this._frustumPos[4 * s + 2], l.x = -a, l.y = r, l.z = -o, l = this._frustumPos[4 * s + 3],
                        l.x = a, l.y = r, l.z = -o, l = this._dimension[s], l.x = a, l.y = r;
                }
                var h, u, c, _;
                for (s = 1; s <= this._shadowMapCount; s++) h = this._dimension[s], u = this._boundingBox[s].min,
                    u.x = -h.x, u.y = -h.y, u.z = -this._spiltDistance[s], c = this._boundingBox[s].max,
                    c.x = h.x, c.y = h.y, c.z = -this._spiltDistance[s - 1], _ = this._boundingSphere[s].center,
                    _.x = .5 * (u.x + c.x), _.y = .5 * (u.y + c.y), _.z = .5 * (u.z + c.z), this._boundingSphere[s].radius = .5 * Math.sqrt(Math.pow(c.x - u.x, 2) + Math.pow(c.y - u.y, 2) + Math.pow(c.z - u.z, 2));
                u = this._boundingBox[0].min, h = this._dimension[this._shadowMapCount], u.x = -h.x,
                    u.y = -h.y, u.z = -this._spiltDistance[this._shadowMapCount], c = this._boundingBox[0].max,
                    c.x = h.x, c.y = h.y, c.z = -this._spiltDistance[0], _ = this._boundingSphere[0].center,
                    _.x = .5 * (u.x + c.x), _.y = .5 * (u.y + c.y), _.z = .5 * (u.z + c.z), this._boundingSphere[0].radius = .5 * Math.sqrt(Math.pow(c.x - u.x, 2) + Math.pow(c.y - u.y, 2) + Math.pow(c.z - u.z, 2));
            }, t.calcSplitFrustum = function(e) {
                this._currentPSSM > 0 ? Ht.createPerspective(3.1416 * e.fieldOfView / 180, e.aspectRatio, this._spiltDistance[this._currentPSSM - 1], this._spiltDistance[this._currentPSSM], this._tempMatrix44) : Ht.createPerspective(3.1416 * e.fieldOfView / 180, e.aspectRatio, this._spiltDistance[0], this._spiltDistance[this._shadowMapCount], this._tempMatrix44),
                    Ht.multiply(this._tempMatrix44, e.viewMatrix, this._tempMatrix44), this._splitFrustumCulling.matrix = this._tempMatrix44;
            }, t._rebuildRenderInfo = function() {
                var e = this._shadowMapCount + 1,
                    t = 0;
                for (this.cameras.length = e, t = 0; e > t; t++) {
                    if (!this.cameras[t]) {
                        var n = new Mi();
                        n.name = "lightCamera" + t, n.clearColor = new me(1, 1, 1, 1), this.cameras[t] = n;
                    }
                    var i = this.cameras[t].renderTarget;
                    (null == i || i.width != this._shadowMapTextureSize || i.height != this._shadowMapTextureSize) && (i && i.destroy(),
                        i = new pi(this._shadowMapTextureSize, this._shadowMapTextureSize, 1, 0), i.filterMode = 0,
                        this.cameras[t].renderTarget = i);
                }
            }, t._calcLightViewProject = function(t) {
                var n = this._boundingSphere[this._currentPSSM],
                    i = t.transform.worldMatrix;
                n.radius;
                n.center.cloneTo(this._tempLookAt3), Te.transformV3ToV4(this._tempLookAt3, i, this._tempLookAt4);
                var r = this._tempLookAt3,
                    a = this._tempLookAt4;
                r.x = a.x, r.y = a.y, r.z = a.z;
                var o = this._tempLightUp;
                t.transform.worldMatrix.getForward(e._tempVector30);
                var s = e._tempVector30;
                o.x = s.x, o.y = 1, o.z = s.z, Te.normalize(this._tempLightUp, this._tempLightUp),
                    Te.scale(this._globalParallelLightDir, 4 * n.radius, this._tempPos), Te.subtract(this._tempLookAt3, this._tempPos, this._tempPos);
                var l = this.cameras[this._currentPSSM];
                l.transform.position = this._tempPos, l.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1);
                var h = this._tempMax,
                    u = this._tempMin;
                h.x = h.y = h.z = -1e5, h.w = 1, u.x = u.y = u.z = 1e5, u.w = 1, Ht.multiply(l.viewMatrix, i, this._tempMatrix44);
                var c = this._tempValue,
                    _ = [];
                _.length = 8, this._boundingBox[this._currentPSSM].getCorners(_);
                for (var d = 0; 8 > d; d++) {
                    var f = _[d];
                    c.x = f.x, c.y = f.y, c.z = f.z, c.w = 1, me.transformByM4x4(this._tempValue, this._tempMatrix44, this._tempValue),
                        u.x = c.x < u.x ? c.x : u.x, u.y = c.y < u.y ? c.y : u.y, u.z = c.z < u.z ? c.z : u.z,
                        h.x = c.x > h.x ? c.x : h.x, h.y = c.y > h.y ? c.y : h.y, h.z = c.z > h.z ? c.z : h.z;
                }
                me.add(this._tempMax, this._tempMin, this._tempValue), c.x *= .5, c.y *= .5, c.z *= .5,
                    c.w = 1, me.transformByM4x4(this._tempValue, l.transform.worldMatrix, this._tempValue);
                var m = Math.abs(-this._tempMax.z),
                    p = m > this._maxDistance ? m : this._maxDistance;
                Te.scale(this._globalParallelLightDir, p, this._tempPos);
                var T = this._tempPos;
                T.x = c.x - T.x, T.y = c.y - T.y, T.z = c.z - T.z, l.transform.position = this._tempPos,
                    l.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1), Ht.createOrthoOffCenter(u.x, h.x, u.y, h.y, 1, p + .5 * (h.z - u.z), l.projectionMatrix);
                var E = l.projectionViewMatrix;
                e.multiplyMatrixOutFloat32Array(this._tempScaleMatrix44, E, this._shaderValueVPs[this._currentPSSM]),
                    this._scene._shaderValues.setBuffer(Qn.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP);
            }, t.setShadowMapTextureSize = function(e) {
                e !== this._shadowMapTextureSize && (this._shadowMapTextureSize = e, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize,
                    this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this._statesDirty = !0);
            }, t.disposeAllRenderTarget = function() {
                for (var e = 0, t = this._shadowMapCount + 1; t > e; e++) this.cameras[e].renderTarget && (this.cameras[e].renderTarget.destroy(),
                    this.cameras[e].renderTarget = null);
            }, a(0, t, "shadowMapCount", function() {
                return this._shadowMapCount;
            }, function(e) {
                if (e = e > 0 ? e : 1, e = 3 >= e ? e : 3, this._shadowMapCount != e) {
                    this._shadowMapCount = e, this._ratioOfDistance = 1 / this._shadowMapCount, this._statesDirty = !0,
                        this._shaderValueLightVP = new Float32Array(16 * e), this._shaderValueVPs.length = e;
                    for (var t = 0; e > t; t++) this._shaderValueVPs[t] = new Float32Array(this._shaderValueLightVP.buffer, 64 * t);
                }
            }), e.multiplyMatrixOutFloat32Array = function(e, t, n) {
                var i, r, a, o, s, l, h;
                for (r = e.elements, a = t.elements, i = 0; 4 > i; i++) o = r[i], s = r[i + 4],
                    l = r[i + 8], h = r[i + 12], n[i] = o * a[0] + s * a[1] + l * a[2] + h * a[3], n[i + 4] = o * a[4] + s * a[5] + l * a[6] + h * a[7],
                    n[i + 8] = o * a[8] + s * a[9] + l * a[10] + h * a[11], n[i + 12] = o * a[12] + s * a[13] + l * a[14] + h * a[15];
            }, e.MAX_PSSM_COUNT = 3, i(e, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }]), e;
        }(),
        be = (function() {
            function e() {}
            return r(e, "laya.d3.resource.models.PrimitiveMesh"), e._createMesh = function(e, t, n) {
                var i = new Gn(),
                    r = new on(i),
                    a = new Kt(4 * t.length, 35044, !0);
                a.vertexDeclaration = e, a.setData(t), i._vertexBuffers.push(a), i._vertexCount += a.vertexCount;
                var s = new qt("ushort", n.length, 35044, !0);
                s.setData(n), i._indexBuffer = s;
                var l = o(1, null);
                l[0] = a, i._setBuffer(l, s), r._vertexBuffer = a, r._indexBuffer = s, r._indexStart = 0,
                    r._indexCount = s.indexCount;
                var h = r._subIndexBufferStart,
                    u = r._subIndexBufferCount,
                    c = r._boneIndicesList;
                h.length = 1, u.length = 1, c.length = 1, h[0] = 0, u[0] = s.indexCount;
                var _ = [];
                _.push(r), i._setSubMeshes(_);
                var d = a._byteLength + s._byteLength;
                return i._setCPUMemory(d), i._setGPUMemory(d), i;
            }, e.createBox = function(t, n, i) {
                void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === i && (i = 1);
                var r = Ie.getVertexDeclaration("POSITION,NORMAL,UV"),
                    a = t / 2,
                    o = n / 2,
                    s = i / 2,
                    l = new Float32Array([-a, o, -s, 0, 1, 0, 0, 0, a, o, -s, 0, 1, 0, 1, 0, a, o, s, 0, 1, 0, 1, 1, -a, o, s, 0, 1, 0, 0, 1, -a, -o, -s, 0, -1, 0, 0, 1, a, -o, -s, 0, -1, 0, 1, 1, a, -o, s, 0, -1, 0, 1, 0, -a, -o, s, 0, -1, 0, 0, 0, -a, o, -s, -1, 0, 0, 0, 0, -a, o, s, -1, 0, 0, 1, 0, -a, -o, s, -1, 0, 0, 1, 1, -a, -o, -s, -1, 0, 0, 0, 1, a, o, -s, 1, 0, 0, 1, 0, a, o, s, 1, 0, 0, 0, 0, a, -o, s, 1, 0, 0, 0, 1, a, -o, -s, 1, 0, 0, 1, 1, -a, o, s, 0, 0, 1, 0, 0, a, o, s, 0, 0, 1, 1, 0, a, -o, s, 0, 0, 1, 1, 1, -a, -o, s, 0, 0, 1, 0, 1, -a, o, -s, 0, 0, -1, 1, 0, a, o, -s, 0, 0, -1, 0, 0, a, -o, -s, 0, 0, -1, 0, 1, -a, -o, -s, 0, 0, -1, 1, 1]),
                    h = new Uint16Array([0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 8, 9, 10, 10, 11, 8, 12, 15, 14, 14, 13, 12, 16, 17, 18, 18, 19, 16, 20, 23, 22, 22, 21, 20]);
                return e._createMesh(r, l, h);
            }, e.createCapsule = function(t, n, i, r) {
                void 0 === t && (t = .5), void 0 === n && (n = 2), void 0 === i && (i = 16), void 0 === r && (r = 32);
                var a = (i + 1) * (r + 1) * 2 + 2 * (r + 1),
                    o = 3 * i * (r + 1) * 2 * 2 + 2 * r * 3,
                    s = Ie.getVertexDeclaration("POSITION,NORMAL,UV"),
                    l = s.vertexStride / 4,
                    h = new Float32Array(a * l),
                    u = new Uint16Array(o),
                    c = Math.PI / 2 / i,
                    _ = 2 * Math.PI / r,
                    d = n / 2 - t,
                    f = 0,
                    m = 0,
                    p = 0,
                    T = 0,
                    E = 0,
                    v = 0,
                    g = 0,
                    S = 0;
                for (g = 0; i >= g; g++)
                    for (S = 0; r >= S; S++) f = t * Math.cos(g * c) * Math.cos(S * _ + Math.PI),
                        m = t * Math.sin(g * c), p = t * Math.cos(g * c) * Math.sin(S * _ + Math.PI), h[T++] = f,
                        h[T++] = m + d, h[T++] = p, h[T++] = f, h[T++] = m, h[T++] = p, h[T++] = 1 - S / r,
                        h[T++] = (1 - g / i) * (Math.PI * t / 2 / (n + Math.PI * t)), i > g && (u[E++] = g * (r + 1) + S + (r + 1),
                            u[E++] = g * (r + 1) + S, u[E++] = g * (r + 1) + S + 1, u[E++] = g * (r + 1) + S + r,
                            u[E++] = g * (r + 1) + S, u[E++] = g * (r + 1) + S + (r + 1));
                for (v += (i + 1) * (r + 1), g = 0; i >= g; g++)
                    for (S = 0; r >= S; S++) f = t * Math.cos(g * c) * Math.cos(S * _ + Math.PI),
                        m = t * Math.sin(-g * c), p = t * Math.cos(g * c) * Math.sin(S * _ + Math.PI), h[T++] = f,
                        h[T++] = m - d, h[T++] = p, h[T++] = f, h[T++] = m, h[T++] = p, h[T++] = 1 - S / r,
                        h[T++] = (g / i * (Math.PI * t / 2) + (n + Math.PI * t / 2)) / (n + Math.PI * t),
                        i > g && (u[E++] = v + g * (r + 1) + S, u[E++] = v + g * (r + 1) + S + (r + 1),
                            u[E++] = v + g * (r + 1) + S + 1, u[E++] = v + g * (r + 1) + S, u[E++] = v + g * (r + 1) + S + r,
                            u[E++] = v + g * (r + 1) + S + (r + 1));
                for (v += (i + 1) * (r + 1), S = 0; r >= S; S++) f = t * Math.cos(S * _ + Math.PI),
                    m = d, p = t * Math.sin(S * _ + Math.PI), h[T++] = f, h[T + 8 * (r + 1) - 1] = f,
                    h[T++] = m, h[T + 8 * (r + 1) - 1] = -m, h[T++] = p, h[T + 8 * (r + 1) - 1] = p,
                    h[T++] = f, h[T + 8 * (r + 1) - 1] = f, h[T++] = 0, h[T + 8 * (r + 1) - 1] = 0,
                    h[T++] = p, h[T + 8 * (r + 1) - 1] = p, h[T++] = 1 - 1 * S / r, h[T + 8 * (r + 1) - 1] = 1 - 1 * S / r,
                    h[T++] = Math.PI * t / 2 / (n + Math.PI * t), h[T + 8 * (r + 1) - 1] = (Math.PI * t / 2 + n) / (n + Math.PI * t);
                for (S = 0; r > S; S++) u[E++] = S + v + (r + 1), u[E++] = S + v + 1, u[E++] = S + v,
                    u[E++] = S + v + (r + 1), u[E++] = S + v + (r + 1) + 1, u[E++] = S + v + 1;
                return v += 2 * (r + 1), e._createMesh(s, h, u);
            }, e.createCone = function(t, n, i) {
                void 0 === t && (t = .5), void 0 === n && (n = 1), void 0 === i && (i = 32);
                for (var r = i + 1 + 1 + 2 * (i + 1), a = 6 * i + 3 * i, o = Ie.getVertexDeclaration("POSITION,NORMAL,UV"), s = o.vertexStride / 4, l = new Float32Array(r * s), h = new Uint16Array(a), u = 2 * Math.PI / i, c = n / 2, _ = 0, d = 0, f = 0, m = 0, p = 0, T = new Te(), E = new Te(0, -1, 0), v = new Te(0, c, 0), g = new Te(), S = new Te(), y = new he(), x = new Te(), D = NaN, I = 0, R = 0, M = 0; i >= M; M++) _ = M * u,
                    f = Math.cos(_ + Math.PI) * t, m = c, p = Math.sin(_ + Math.PI) * t, l[I++] = 0,
                    l[I + 8 * (i + 1) - 1] = f, l[I++] = m, l[I + 8 * (i + 1) - 1] = -m, l[I++] = 0,
                    l[I + 8 * (i + 1) - 1] = p, T.x = f, T.y = 0, T.z = p, g.x = f, g.y = -m, g.z = p,
                    Te.subtract(g, v, S), Te.normalize(S, S), D = Math.acos(Te.dot(E, S)), Te.cross(E, S, x),
                    Te.normalize(x, x), he.createFromAxisAngle(x, D, y), Te.normalize(T, T), Te.transformQuat(T, y, T),
                    Te.normalize(T, T), l[I++] = T.x, l[I + 8 * (i + 1) - 1] = T.x, l[I++] = T.y, l[I + 8 * (i + 1) - 1] = T.y,
                    l[I++] = T.z, l[I + 8 * (i + 1) - 1] = T.z, l[I++] = 1 - 1 * M / i, l[I + 8 * (i + 1) - 1] = 1 - 1 * M / i,
                    l[I++] = 0, l[I + 8 * (i + 1) - 1] = 1;
                I += 8 * (i + 1);
                for (var A = 0; i > A; A++) h[R++] = A + d + (i + 1), h[R++] = A + d + 1, h[R++] = A + d,
                    h[R++] = A + d + (i + 1), h[R++] = A + d + (i + 1) + 1, h[R++] = A + d + 1;
                d += 2 * (i + 1);
                for (var C = 0; i >= C; C++) 0 === C && (l[I++] = 0, l[I++] = -c, l[I++] = 0, l[I++] = 0,
                        l[I++] = -1, l[I++] = 0, l[I++] = .5, l[I++] = .5), _ = C * u, f = Math.cos(_ + Math.PI) * t,
                    m = -c, p = Math.sin(_ + Math.PI) * t, l[I++] = f, l[I++] = m, l[I++] = p, l[I++] = 0,
                    l[I++] = -1, l[I++] = 0, l[I++] = .5 + .5 * Math.cos(_), l[I++] = .5 + .5 * Math.sin(_);
                for (var L = 0; i > L; L++) h[R++] = 0 + d, h[R++] = L + 2 + d, h[R++] = L + 1 + d;
                return d += i + 1 + 1, e._createMesh(o, l, h);
            }, e.createCylinder = function(t, n, i) {
                void 0 === t && (t = .5), void 0 === n && (n = 2), void 0 === i && (i = 32);
                for (var r = i + 1 + 1 + 2 * (i + 1) + (i + 1 + 1), a = 3 * i + 6 * i + 3 * i, o = Ie.getVertexDeclaration("POSITION,NORMAL,UV"), s = o.vertexStride / 4, l = new Float32Array(r * s), h = new Uint16Array(a), u = 2 * Math.PI / i, c = n / 2, _ = 0, d = 0, f = 0, m = 0, p = 0, T = 0, E = 0, v = 0; i >= v; v++) 0 === v && (l[T++] = 0,
                        l[T++] = c, l[T++] = 0, l[T++] = 0, l[T++] = 1, l[T++] = 0, l[T++] = .5, l[T++] = .5),
                    _ = v * u, f = Math.cos(_) * t, m = c, p = Math.sin(_) * t, l[T++] = f, l[T++] = m,
                    l[T++] = p, l[T++] = 0, l[T++] = 1, l[T++] = 0, l[T++] = .5 + .5 * Math.cos(_),
                    l[T++] = .5 + .5 * Math.sin(_);
                for (var g = 0; i > g; g++) h[E++] = 0, h[E++] = g + 1, h[E++] = g + 2;
                d += i + 1 + 1;
                for (var S = 0; i >= S; S++) _ = S * u, f = Math.cos(_ + Math.PI) * t, m = c, p = Math.sin(_ + Math.PI) * t,
                    l[T++] = f, l[T + 8 * (i + 1) - 1] = f, l[T++] = m, l[T + 8 * (i + 1) - 1] = -m,
                    l[T++] = p, l[T + 8 * (i + 1) - 1] = p, l[T++] = f, l[T + 8 * (i + 1) - 1] = f,
                    l[T++] = 0, l[T + 8 * (i + 1) - 1] = 0, l[T++] = p, l[T + 8 * (i + 1) - 1] = p,
                    l[T++] = 1 - 1 * S / i, l[T + 8 * (i + 1) - 1] = 1 - 1 * S / i, l[T++] = 0, l[T + 8 * (i + 1) - 1] = 1;
                T += 8 * (i + 1);
                for (var y = 0; i > y; y++) h[E++] = y + d + (i + 1), h[E++] = y + d + 1, h[E++] = y + d,
                    h[E++] = y + d + (i + 1), h[E++] = y + d + (i + 1) + 1, h[E++] = y + d + 1;
                d += 2 * (i + 1);
                for (var x = 0; i >= x; x++) 0 === x && (l[T++] = 0, l[T++] = -c, l[T++] = 0, l[T++] = 0,
                        l[T++] = -1, l[T++] = 0, l[T++] = .5, l[T++] = .5), _ = x * u, f = Math.cos(_ + Math.PI) * t,
                    m = -c, p = Math.sin(_ + Math.PI) * t, l[T++] = f, l[T++] = m, l[T++] = p, l[T++] = 0,
                    l[T++] = -1, l[T++] = 0, l[T++] = .5 + .5 * Math.cos(_), l[T++] = .5 + .5 * Math.sin(_);
                for (var D = 0; i > D; D++) h[E++] = 0 + d, h[E++] = D + 2 + d, h[E++] = D + 1 + d;
                return d += i + 1 + 1, e._createMesh(o, l, h);
            }, e.createPlane = function(t, n, i, r) {
                void 0 === t && (t = 10), void 0 === n && (n = 10), void 0 === i && (i = 10), void 0 === r && (r = 10);
                for (var a = (i + 1) * (r + 1), o = i * r * 2 * 3, s = new Uint16Array(o), l = Ie.getVertexDeclaration("POSITION,NORMAL,UV"), h = l.vertexStride / 4, u = new Float32Array(a * h), c = t / 2, _ = n / 2, d = t / i, f = n / r, m = 0, p = 0; r >= p; p++)
                    for (var T = 0; i >= T; T++) u[m++] = T * d - c,
                        u[m++] = 0, u[m++] = p * f - _, u[m++] = 0, u[m++] = 1, u[m++] = 0, u[m++] = 1 * T / i,
                        u[m++] = 1 * p / r;
                var E = 0;
                for (p = 0; r > p; p++)
                    for (T = 0; i > T; T++) s[E++] = (p + 1) * (i + 1) + T,
                        s[E++] = p * (i + 1) + T, s[E++] = (p + 1) * (i + 1) + T + 1, s[E++] = p * (i + 1) + T,
                        s[E++] = p * (i + 1) + T + 1, s[E++] = (p + 1) * (i + 1) + T + 1;
                return e._createMesh(l, u, s);
            }, e.createQuad = function(t, n) {
                void 0 === t && (t = 1), void 0 === n && (n = 1);
                var i = Ie.getVertexDeclaration("POSITION,NORMAL,UV"),
                    r = (i.vertexStride / 4,
                        t / 2),
                    a = n / 2,
                    o = new Float32Array([-r, a, 0, 0, 0, 1, 0, 0, r, a, 0, 0, 0, 1, 1, 0, -r, -a, 0, 0, 0, 1, 0, 1, r, -a, 0, 0, 0, 1, 1, 1]),
                    s = new Uint16Array([0, 1, 2, 3, 2, 1]);
                return e._createMesh(i, o, s);
            }, e.createSphere = function(t, n, i) {
                void 0 === t && (t = .5), void 0 === n && (n = 32), void 0 === i && (i = 32);
                var r = (n + 1) * (i + 1),
                    a = 3 * n * (i + 1) * 2,
                    o = new Uint16Array(a),
                    s = Ie.getVertexDeclaration("POSITION,NORMAL,UV"),
                    l = s.vertexStride / 4,
                    h = new Float32Array(r * l),
                    u = Math.PI / n,
                    c = 2 * Math.PI / i,
                    _ = 0;
                r = 0, a = 0;
                for (var d = 0; n + 1 > d; d++)
                    for (var f = Math.sin(d * u), m = Math.cos(d * u), p = 0; i + 1 > p; p++) {
                        var T = f * Math.sin(p * c + 1 * Math.PI / 2),
                            E = f * Math.cos(p * c + 1 * Math.PI / 2);
                        h[r + 0] = T * t, h[r + 1] = m * t, h[r + 2] = E * t, h[r + 3] = T, h[r + 4] = m,
                            h[r + 5] = E, h[r + 6] = p / i, h[r + 7] = d / n, r += l, d != n - 1 && (o[a++] = _ + (i + 1),
                                o[a++] = _, o[a++] = _ + 1, o[a++] = _ + i, o[a++] = _, o[a++] = _ + (i + 1), _++);
                    }
                return e._createMesh(s, h, o);
            }, e;
        }(), function() {
            function e() {}
            r(e, "laya.d3.core.render.PostProcessEffect");
            var t = e.prototype;
            return t.render = function(e) {}, e;
        }()),
        Fe = function() {
            function e() {}
            return r(e, "laya.d3.animation.AnimationClipParser04"), e.READ_DATA = function() {
                    e._DATA.offset = e._reader.getUint32(), e._DATA.size = e._reader.getUint32();
                }, e.READ_BLOCK = function() {
                    for (var t = e._BLOCK.count = e._reader.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; t > r; r++) n.push(e._reader.getUint32()),
                        i.push(e._reader.getUint32());
                }, e.READ_STRINGS = function() {
                    var t = e._reader.getUint32(),
                        n = e._reader.getUint16(),
                        i = e._reader.pos;
                    e._reader.pos = t + e._DATA.offset;
                    for (var r = 0; n > r; r++) e._strings[r] = e._reader.readUTFString();
                    e._reader.pos = i;
                }, e.parse = function(t, n, i) {
                    e._animationClip = t, e._reader = n, e._version = i, e.READ_DATA(), e.READ_BLOCK(),
                        e.READ_STRINGS();
                    for (var r = 0, a = e._BLOCK.count; a > r; r++) {
                        var o = n.getUint16(),
                            s = e._strings[o],
                            l = e["READ_" + s];
                        if (null == l) throw new Error("model file err,no this function:" + o + " " + s);
                        l.call(null);
                    }
                    e._version = null, e._reader = null, e._animationClip = null;
                }, e.READ_ANIMATIONS = function() {
                    var t, n = 0,
                        i = 0,
                        r = e._reader,
                        a = (r.__getBuffer(), []),
                        o = r.getUint16();
                    for (a.length = o, n = 0; o > n; n++) a[n] = r.getFloat32();
                    var s = e._animationClip;
                    s.name = e._strings[r.getUint16()];
                    var l = s._duration = r.getFloat32();
                    s.islooping = !!r.getByte(), s._frameRate = r.getInt16();
                    var h = r.getInt16(),
                        u = s._nodes;
                    u.count = h;
                    var c = s._nodesMap = {},
                        _ = s._nodesDic = {};
                    for (n = 0; h > n; n++) {
                        t = new St(), u.setNodeByIndex(n, t), t._indexInList = n;
                        var d = t.type = r.getUint8(),
                            f = r.getUint16();
                        for (t._setOwnerPathCount(f), i = 0; f > i; i++) t._setOwnerPathByIndex(i, e._strings[r.getUint16()]);
                        var m = t._joinOwnerPath("/"),
                            p = c[m];
                        p || (c[m] = p = []), p.push(t), t.propertyOwner = e._strings[r.getUint16()];
                        var T = r.getUint16();
                        for (t._setPropertyCount(T), i = 0; T > i; i++) t._setPropertyByIndex(i, e._strings[r.getUint16()]);
                        var E = m + "." + t.propertyOwner + "." + t._joinProperty(".");
                        _[E] = t, t.fullPath = E;
                        var v = r.getUint16();
                        t._setKeyframeCount(v);
                        var g = NaN;
                        switch (d) {
                            case 0:
                                break;

                            case 1:
                            case 3:
                            case 4:
                                t.data = R.supportWebGLPlusAnimation ? new G() : new Te();
                                break;

                            case 2:
                                t.data = R.supportWebGLPlusAnimation ? new U() : new he();
                                break;

                            default:
                                throw "AnimationClipParser04:unknown type.";
                        }
                        switch (e._version) {
                            case "LAYAANIMATION:04":
                                for (i = 0; v > i; i++) switch (d) {
                                    case 0:
                                        var S = new Tn();
                                        t._setKeyframeByIndex(i, S), g = S.time = a[r.getUint16()], S.inTangent = r.getFloat32(),
                                            S.outTangent = r.getFloat32(), S.value = r.getFloat32();
                                        break;

                                    case 1:
                                    case 3:
                                    case 4:
                                        var y = new Cn();
                                        if (t._setKeyframeByIndex(i, y), g = y.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                                            for (var x = y.data = new Float32Array(9), D = 0; 3 > D; D++) x[D] = r.getFloat32();
                                            for (D = 0; 3 > D; D++) x[3 + D] = r.getFloat32();
                                            for (D = 0; 3 > D; D++) x[6 + D] = r.getFloat32();
                                        } else {
                                            var I = y.inTangent,
                                                M = y.outTangent,
                                                A = y.value;
                                            I.x = r.getFloat32(), I.y = r.getFloat32(), I.z = r.getFloat32(), M.x = r.getFloat32(),
                                                M.y = r.getFloat32(), M.z = r.getFloat32(), A.x = r.getFloat32(), A.y = r.getFloat32(),
                                                A.z = r.getFloat32();
                                        }
                                        break;

                                    case 2:
                                        var C = new Vn();
                                        if (t._setKeyframeByIndex(i, C), g = C.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                                            for (x = C.data = new Float32Array(12), D = 0; 4 > D; D++) x[D] = r.getFloat32();
                                            for (D = 0; 4 > D; D++) x[4 + D] = r.getFloat32();
                                            for (D = 0; 4 > D; D++) x[8 + D] = r.getFloat32();
                                        } else {
                                            var L = C.inTangent,
                                                O = C.outTangent,
                                                N = C.value;
                                            L.x = r.getFloat32(), L.y = r.getFloat32(), L.z = r.getFloat32(), L.w = r.getFloat32(),
                                                O.x = r.getFloat32(), O.y = r.getFloat32(), O.z = r.getFloat32(), O.w = r.getFloat32(),
                                                N.x = r.getFloat32(), N.y = r.getFloat32(), N.z = r.getFloat32(), N.w = r.getFloat32();
                                        }
                                        break;

                                    default:
                                        throw "AnimationClipParser04:unknown type.";
                                }
                                break;

                            case "LAYAANIMATION:COMPRESSION_04":
                                for (i = 0; v > i; i++) switch (d) {
                                    case 0:
                                        S = new Tn(), t._setKeyframeByIndex(i, S), g = S.time = a[r.getUint16()], S.inTangent = Ce.convertToNumber(r.getUint16()),
                                            S.outTangent = Ce.convertToNumber(r.getUint16()), S.value = Ce.convertToNumber(r.getUint16());
                                        break;

                                    case 1:
                                    case 3:
                                    case 4:
                                        if (y = new Cn(), t._setKeyframeByIndex(i, y), g = y.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                                            for (x = y.data = new Float32Array(9), D = 0; 3 > D; D++) x[D] = Ce.convertToNumber(r.getUint16());
                                            for (D = 0; 3 > D; D++) x[3 + D] = Ce.convertToNumber(r.getUint16());
                                            for (D = 0; 3 > D; D++) x[6 + D] = Ce.convertToNumber(r.getUint16());
                                        } else I = y.inTangent, M = y.outTangent, A = y.value, I.x = Ce.convertToNumber(r.getUint16()),
                                            I.y = Ce.convertToNumber(r.getUint16()), I.z = Ce.convertToNumber(r.getUint16()),
                                            M.x = Ce.convertToNumber(r.getUint16()), M.y = Ce.convertToNumber(r.getUint16()),
                                            M.z = Ce.convertToNumber(r.getUint16()), A.x = Ce.convertToNumber(r.getUint16()),
                                            A.y = Ce.convertToNumber(r.getUint16()), A.z = Ce.convertToNumber(r.getUint16());
                                        break;

                                    case 2:
                                        if (C = new Vn(), t._setKeyframeByIndex(i, C), g = C.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                                            for (x = C.data = new Float32Array(12), D = 0; 4 > D; D++) x[D] = Ce.convertToNumber(r.getUint16());
                                            for (D = 0; 4 > D; D++) x[4 + D] = Ce.convertToNumber(r.getUint16());
                                            for (D = 0; 4 > D; D++) x[8 + D] = Ce.convertToNumber(r.getUint16());
                                        } else L = C.inTangent, O = C.outTangent, N = C.value, L.x = Ce.convertToNumber(r.getUint16()),
                                            L.y = Ce.convertToNumber(r.getUint16()), L.z = Ce.convertToNumber(r.getUint16()),
                                            L.w = Ce.convertToNumber(r.getUint16()), O.x = Ce.convertToNumber(r.getUint16()),
                                            O.y = Ce.convertToNumber(r.getUint16()), O.z = Ce.convertToNumber(r.getUint16()),
                                            O.w = Ce.convertToNumber(r.getUint16()), N.x = Ce.convertToNumber(r.getUint16()),
                                            N.y = Ce.convertToNumber(r.getUint16()), N.z = Ce.convertToNumber(r.getUint16()),
                                            N.w = Ce.convertToNumber(r.getUint16());
                                        break;

                                    default:
                                        throw "AnimationClipParser04:unknown type.";
                                }
                        }
                    }
                    var V = r.getUint16();
                    for (n = 0; V > n; n++) {
                        var P = new it();
                        P.time = Math.min(l, r.getFloat32()), P.eventName = e._strings[r.getUint16()];
                        var w, b = r.getUint16();
                        for (b > 0 && (P.params = w = []), i = 0; b > i; i++) {
                            var F = r.getByte();
                            switch (F) {
                                case 0:
                                    w.push(!!r.getByte());
                                    break;

                                case 1:
                                    w.push(r.getInt32());
                                    break;

                                case 2:
                                    w.push(r.getFloat32());
                                    break;

                                case 3:
                                    w.push(e._strings[r.getUint16()]);
                                    break;

                                default:
                                    throw new Error("unknown type.");
                            }
                        }
                        s.addEvent(P);
                    }
                }, e._animationClip = null, e._reader = null, e._strings = [], e._version = null,
                i(e, ["_BLOCK", function() {
                    return this._BLOCK = {
                        count: 0
                    };
                }, "_DATA", function() {
                    return this._DATA = {
                        offset: 0,
                        size: 0
                    };
                }]), e;
        }(),
        Be = function() {
            function e() {}
            return r(e, "laya.d3.animation.AnimationClipParser03"), e.READ_DATA = function() {
                e._DATA.offset = e._reader.getUint32(), e._DATA.size = e._reader.getUint32();
            }, e.READ_BLOCK = function() {
                for (var t = e._BLOCK.count = e._reader.getUint16(), n = e._BLOCK.blockStarts = [], i = e._BLOCK.blockLengths = [], r = 0; t > r; r++) n.push(e._reader.getUint32()),
                    i.push(e._reader.getUint32());
            }, e.READ_STRINGS = function() {
                var t = e._reader.getUint32(),
                    n = e._reader.getUint16(),
                    i = e._reader.pos;
                e._reader.pos = t + e._DATA.offset;
                for (var r = 0; n > r; r++) e._strings[r] = e._reader.readUTFString();
                e._reader.pos = i;
            }, e.parse = function(t, n) {
                e._animationClip = t, e._reader = n;
                n.__getBuffer();
                e.READ_DATA(), e.READ_BLOCK(), e.READ_STRINGS();
                for (var i = 0, r = e._BLOCK.count; r > i; i++) {
                    var a = n.getUint16(),
                        o = e._strings[a],
                        s = e["READ_" + o];
                    if (null == s) throw new Error("model file err,no this function:" + a + " " + o);
                    s.call(null);
                }
            }, e.READ_ANIMATIONS = function() {
                var t, n = 0,
                    i = 0,
                    r = e._reader,
                    a = (r.__getBuffer(), []),
                    o = r.getUint16();
                for (a.length = o, n = 0; o > n; n++) a[n] = r.getFloat32();
                var s = e._animationClip;
                s.name = e._strings[r.getUint16()];
                var l = s._duration = r.getFloat32();
                s.islooping = !!r.getByte(), s._frameRate = r.getInt16();
                var h = r.getInt16(),
                    u = s._nodes;
                u.count = h;
                var c = s._nodesMap = {},
                    _ = s._nodesDic = {};
                for (n = 0; h > n; n++) {
                    t = new St(), u.setNodeByIndex(n, t), t._indexInList = n;
                    var d = t.type = r.getUint8(),
                        f = r.getUint16();
                    for (t._setOwnerPathCount(f), i = 0; f > i; i++) t._setOwnerPathByIndex(i, e._strings[r.getUint16()]);
                    var m = t._joinOwnerPath("/"),
                        p = c[m];
                    p || (c[m] = p = []), p.push(t), t.propertyOwner = e._strings[r.getUint16()];
                    var T = r.getUint16();
                    for (t._setPropertyCount(T), i = 0; T > i; i++) t._setPropertyByIndex(i, e._strings[r.getUint16()]);
                    var E = m + "." + t.propertyOwner + "." + t._joinProperty(".");
                    _[E] = t, t.fullPath = E;
                    var v = r.getUint16();
                    t._setKeyframeCount(v);
                    var g = NaN;
                    switch (d) {
                        case 0:
                            break;

                        case 1:
                        case 3:
                        case 4:
                            t.data = R.supportWebGLPlusAnimation ? new G() : new Te();
                            break;

                        case 2:
                            t.data = R.supportWebGLPlusAnimation ? new U() : new he();
                            break;

                        default:
                            throw "AnimationClipParser03:unknown type.";
                    }
                    for (i = 0; v > i; i++) switch (d) {
                        case 0:
                            var S = new Tn();
                            t._setKeyframeByIndex(i, S), g = S.time = a[r.getUint16()], S.inTangent = r.getFloat32(),
                                S.outTangent = r.getFloat32(), S.value = r.getFloat32();
                            break;

                        case 1:
                        case 3:
                        case 4:
                            var y = new Cn();
                            if (t._setKeyframeByIndex(i, y), g = y.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                                for (var x = y.data = new Float32Array(9), D = 0; 3 > D; D++) x[D] = r.getFloat32();
                                for (D = 0; 3 > D; D++) x[3 + D] = r.getFloat32();
                                for (D = 0; 3 > D; D++) x[6 + D] = r.getFloat32();
                            } else {
                                var I = y.inTangent,
                                    M = y.outTangent,
                                    A = y.value;
                                I.x = r.getFloat32(), I.y = r.getFloat32(), I.z = r.getFloat32(), M.x = r.getFloat32(),
                                    M.y = r.getFloat32(), M.z = r.getFloat32(), A.x = r.getFloat32(), A.y = r.getFloat32(),
                                    A.z = r.getFloat32();
                            }
                            break;

                        case 2:
                            var C = new Vn();
                            if (t._setKeyframeByIndex(i, C), g = C.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                                for (x = C.data = new Float32Array(12), D = 0; 4 > D; D++) x[D] = r.getFloat32();
                                for (D = 0; 4 > D; D++) x[4 + D] = r.getFloat32();
                                for (D = 0; 4 > D; D++) x[8 + D] = r.getFloat32();
                            } else {
                                var L = C.inTangent,
                                    O = C.outTangent,
                                    N = C.value;
                                L.x = r.getFloat32(), L.y = r.getFloat32(), L.z = r.getFloat32(), L.w = r.getFloat32(),
                                    O.x = r.getFloat32(), O.y = r.getFloat32(), O.z = r.getFloat32(), O.w = r.getFloat32(),
                                    N.x = r.getFloat32(), N.y = r.getFloat32(), N.z = r.getFloat32(), N.w = r.getFloat32();
                            }
                            break;

                        default:
                            throw "AnimationClipParser03:unknown type.";
                    }
                }
                var V = r.getUint16();
                for (n = 0; V > n; n++) {
                    var P = new it();
                    P.time = Math.min(l, r.getFloat32()), P.eventName = e._strings[r.getUint16()];
                    var w, b = r.getUint16();
                    for (b > 0 && (P.params = w = []), i = 0; b > i; i++) {
                        var F = r.getByte();
                        switch (F) {
                            case 0:
                                w.push(!!r.getByte());
                                break;

                            case 1:
                                w.push(r.getInt32());
                                break;

                            case 2:
                                w.push(r.getFloat32());
                                break;

                            case 3:
                                w.push(e._strings[r.getUint16()]);
                                break;

                            default:
                                throw new Error("unknown type.");
                        }
                    }
                    s.addEvent(P);
                }
            }, e._animationClip = null, e._reader = null, e._strings = [], i(e, ["_BLOCK", function() {
                return this._BLOCK = {
                    count: 0
                };
            }, "_DATA", function() {
                return this._DATA = {
                    offset: 0,
                    size: 0
                };
            }]), e;
        }(),
        Ue = function() {
            function e() {
                this.value = 0;
            }
            r(e, "laya.d3.shader.DefineDatas");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.add = function(e) {
                this.value |= e;
            }, t.remove = function(e) {
                this.value &= ~e;
            }, t.has = function(e) {
                return (this.value & e) > 0;
            }, t.cloneTo = function(e) {
                var t = e;
                t.value = this.value;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, e;
        }(),
        ze = function() {
            function e(e, t, n) {
                this.offset = 0, this.elementFormat = null, this.elementUsage = 0, this.offset = e,
                    this.elementFormat = t, this.elementUsage = n;
            }
            return r(e, "laya.d3.graphics.VertexElement"), e;
        }(),
        Ge = function() {
            function e(e, t, n, i) {
                this._datas = null, this._w = 0, this._h = 0, this._minHeight = NaN, this._maxHeight = NaN,
                    this._datas = [], this._w = e, this._h = t, this._minHeight = n, this._maxHeight = i;
            }
            r(e, "laya.d3.core.HeightMap");
            var t = e.prototype;
            return t._inBounds = function(e, t) {
                return e >= 0 && e < this._h && t >= 0 && t < this._w;
            }, t.getHeight = function(e, t) {
                return this._inBounds(e, t) ? this._datas[e][t] : NaN;
            }, a(0, t, "width", function() {
                return this._w;
            }), a(0, t, "height", function() {
                return this._h;
            }), a(0, t, "maxHeight", function() {
                return this._maxHeight;
            }), a(0, t, "minHeight", function() {
                return this._minHeight;
            }), e.creatFromMesh = function(t, n, i, r) {
                for (var a = [], o = [], s = t.subMeshCount, l = 0; s > l; l++) {
                    for (var h = t._getSubMesh(l), u = h._vertexBuffer, c = u.getData(), _ = [], d = 0; d < c.length; d += u.vertexDeclaration.vertexStride / 4) {
                        var f = new Te(c[d + 0], c[d + 1], c[d + 2]);
                        _.push(f);
                    }
                    a.push(_);
                    var m = h._indexBuffer;
                    o.push(m.getData());
                }
                var p = t.bounds,
                    T = p.getMin().x,
                    E = p.getMin().z,
                    v = p.getMax().x,
                    g = p.getMax().z,
                    S = p.getMin().y,
                    y = p.getMax().y,
                    x = v - T,
                    D = g - E,
                    I = r.x = x / (n - 1),
                    R = r.y = D / (i - 1),
                    M = new e(n, i, S, y),
                    A = e._tempRay,
                    C = A.direction;
                C.x = 0, C.y = -1, C.z = 0;
                var L = .1,
                    O = y + L;
                A.origin.y = O;
                for (var N = 0; i > N; N++) {
                    var V = E + N * R;
                    M._datas[N] = [];
                    for (var P = 0; n > P; P++) {
                        var w = T + P * I,
                            b = A.origin;
                        b.x = w, b.z = V;
                        var F = e._getPosition(A, a, o);
                        M._datas[N][P] = F === Number.MAX_VALUE ? NaN : O - F;
                    }
                }
                return M;
            }, e.createFromImage = function(t, n, i) {
                for (var r = t.width, a = t.height, o = new e(r, a, n, i), s = (i - n) / 254, l = t.getPixels(), h = 0, u = 0; a > u; u++)
                    for (var c = o._datas[u] = [], _ = 0; r > _; _++) {
                        var d = l[h++],
                            f = l[h++],
                            m = l[h++],
                            p = l[h++];
                        255 == d && 255 == f && 255 == m && 255 == p ? c[_] = NaN : c[_] = (d + f + m) / 3 * s + n;
                    }
                return o;
            }, e._getPosition = function(e, t, n) {
                for (var i = Number.MAX_VALUE, r = 0; r < t.length; r++)
                    for (var a = t[r], o = n[r], s = 0; s < o.length; s += 3) {
                        var l = a[o[s + 0]],
                            h = a[o[s + 1]],
                            u = a[o[s + 2]],
                            c = ct.rayIntersectsTriangle(e, l, h, u);
                        !isNaN(c) && i > c && (i = c);
                    }
                return i;
            }, i(e, ["_tempRay", function() {
                return this._tempRay = new j(new Te(), new Te());
            }]), e;
        }(),
        He = function() {
            function e() {}
            return r(e, "laya.d3.shader.ShaderInit3D"), e.__init__ = function() {
                e._rangeAttenTex = ke._buildTexture2D(1024, 1, 2, Ne.lightAttenTexture), e._rangeAttenTex.wrapModeU = 1,
                    e._rangeAttenTex.wrapModeV = 1, e._rangeAttenTex.lock = !0, Ve.SHADERDEFINE_HIGHPRECISION = Ve.registerPublicDefine("HIGHPRECISION"),
                    Qn.SHADERDEFINE_FOG = Ve.registerPublicDefine("FOG"), Qn.SHADERDEFINE_DIRECTIONLIGHT = Ve.registerPublicDefine("DIRECTIONLIGHT"),
                    Qn.SHADERDEFINE_POINTLIGHT = Ve.registerPublicDefine("POINTLIGHT"), Qn.SHADERDEFINE_SPOTLIGHT = Ve.registerPublicDefine("SPOTLIGHT"),
                    Qn.SHADERDEFINE_CAST_SHADOW = Ve.registerPublicDefine("CASTSHADOW"), Qn.SHADERDEFINE_SHADOW_PSSM1 = Ve.registerPublicDefine("SHADOWMAP_PSSM1"),
                    Qn.SHADERDEFINE_SHADOW_PSSM2 = Ve.registerPublicDefine("SHADOWMAP_PSSM2"), Qn.SHADERDEFINE_SHADOW_PSSM3 = Ve.registerPublicDefine("SHADOWMAP_PSSM3"),
                    Qn.SHADERDEFINE_SHADOW_PCF_NO = Ve.registerPublicDefine("SHADOWMAP_PCF_NO"), Qn.SHADERDEFINE_SHADOW_PCF1 = Ve.registerPublicDefine("SHADOWMAP_PCF1"),
                    Qn.SHADERDEFINE_SHADOW_PCF2 = Ve.registerPublicDefine("SHADOWMAP_PCF2"), Qn.SHADERDEFINE_SHADOW_PCF3 = Ve.registerPublicDefine("SHADOWMAP_PCF3"),
                    Qn.SHADERDEFINE_REFLECTMAP = Ve.registerPublicDefine("REFLECTMAP"), Ve.addInclude("Lighting.glsl", "\nstruct DirectionLight {\n\tvec3 Color;\n\tvec3 Direction;\n};\n\nstruct PointLight {\n\tvec3 Color;\n\tvec3 Position;\n\tfloat Range;\n};\n\nstruct SpotLight {\n\tvec3 Color;\n\tvec3 Position;\n\tvec3 Direction;\n\tfloat Spot;\n\tfloat Range;\n};\n\n// Laya中使用衰减纹理\nfloat LayaAttenuation(in vec3 L,in float invLightRadius) {\n\tfloat fRatio = clamp(length(L) * invLightRadius,0.0,1.0);\n\tfRatio *= fRatio;\n\treturn 1.0 / (1.0 + 25.0 * fRatio)* clamp(4.0*(1.0 - fRatio),0.0,1.0); //fade to black as if 4 pixel texture\n}\n\n// Same as Just Cause 2 and Crysis 2 (you can read GPU Pro 1 book for more information)\nfloat BasicAttenuation(in vec3 L,in float invLightRadius) {\n\tvec3 distance = L * invLightRadius;\n\tfloat attenuation = clamp(1.0 - dot(distance, distance),0.0,1.0); // Equals float attenuation = saturate(1.0f - dot(L, L) / (lightRadius *  lightRadius));\n\treturn attenuation * attenuation;\n}\n\n// Inspired on http://fools.slindev.com/viewtopic.php?f=11&t=21&view=unread#unread\nfloat NaturalAttenuation(in vec3 L,in float invLightRadius) {\n\tfloat attenuationFactor = 30.0;\n\tvec3 distance = L * invLightRadius;\n\tfloat attenuation = dot(distance, distance); // Equals float attenuation = dot(L, L) / (lightRadius *  lightRadius);\n\tattenuation = 1.0 / (attenuation * attenuationFactor + 1.0);\n\t// Second we move down the function therewith it reaches zero at abscissa 1:\n\tattenuationFactor = 1.0 / (attenuationFactor + 1.0); //attenuationFactor contains now the value we have to subtract\n\tattenuation = max(attenuation - attenuationFactor, 0.0); // The max fixes a bug.\n\t// Finally we expand the equation along the y-axis so that it starts with a function value of 1 again.\n\tattenuation /= 1.0 - attenuationFactor;\n\treturn attenuation;\n}\n\nvoid LayaAirBlinnPhongLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir,in vec3 lightColor, in vec3 lightVec,out vec3 diffuseColor,out vec3 specularColor) {\n\tmediump vec3 h = normalize(viewDir-lightVec);\n\tlowp float ln = max (0.0, dot (-lightVec,normal));\n\tfloat nh = max (0.0, dot (h,normal));\n\tdiffuseColor=lightColor * ln;\n\tspecularColor=lightColor *specColor*pow (nh, specColorIntensity*128.0) * gloss;\n}\n\nvoid LayaAirBlinnPhongDiectionLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in DirectionLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec=normalize(light.Direction);\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,lightVec,diffuseColor,specularColor);\n}\n\nvoid LayaAirBlinnPhongPointLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in PointLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec =  pos-light.Position;\n\t//if( length(lightVec) > light.Range )\n\t//\treturn;\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,lightVec/length(lightVec),diffuseColor,specularColor);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range);\n\tdiffuseColor *= attenuate;\n\tspecularColor*= attenuate;\n}\n\nvoid LayaAirBlinnPhongSpotLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in SpotLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec =  pos-light.Position;\n\t//if( length(lightVec) > light.Range)\n\t//\treturn;\n\n\tvec3 normalLightVec=lightVec/length(lightVec);\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,normalLightVec,diffuseColor,specularColor);\n\tvec2 cosAngles=cos(vec2(light.Spot,light.Spot*0.5)*0.5);//ConeAttenuation\n\tfloat dl=dot(normalize(light.Direction),normalLightVec);\n\tdl*=smoothstep(cosAngles[0],cosAngles[1],dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range)*dl;\n\tdiffuseColor *=attenuate;\n\tspecularColor *=attenuate;\n}\n\nvec3 NormalSampleToWorldSpace(vec3 normalMapSample, vec3 unitNormal, vec3 tangent,vec3 binormal) {\n\tvec3 normalT =vec3(2.0*normalMapSample.x - 1.0,1.0-2.0*normalMapSample.y,2.0*normalMapSample.z - 1.0);\n\n\t// Build orthonormal basis.\n\tvec3 N = normalize(unitNormal);\n\tvec3 T = normalize(tangent);\n\tvec3 B = normalize(binormal);\n\tmat3 TBN = mat3(T, B, N);\n\n\t// Transform from tangent space to world space.\n\tvec3 bumpedNormal = TBN*normalT;\n\n\treturn bumpedNormal;\n}\n\nvec3 NormalSampleToWorldSpace1(vec4 normalMapSample, vec3 tangent, vec3 binormal, vec3 unitNormal) {\n\tvec3 normalT;\n\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\n\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\n\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\n\n\tvec3 T = normalize(tangent);\n\tvec3 B = normalize(binormal);\n\tvec3 N = normalize(unitNormal);\n\tmat3 TBN = mat3(T, B, N);\n\n\t// Transform from tangent space to world space.\n\tvec3 bumpedNormal = TBN * normalize(normalT);\n\n\treturn bumpedNormal;\n}\n\nvec3 DecodeLightmap(vec4 color) {\n\treturn color.rgb*color.a*5.0;\n}\n\nvec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\n\tvec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\n\ttransTexcoord.y+=1.0;\n\treturn transTexcoord;\n}\n\nvec4 remapGLPositionZ(vec4 position) {\n\tposition.z=position.z * 2.0 - position.w;\n\treturn position;\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\n"),
                    Ve.addInclude("ShadowHelper.glsl", "uniform sampler2D u_shadowMap1;\nuniform sampler2D u_shadowMap2;\nuniform sampler2D u_shadowMap3;\nuniform vec2\t  u_shadowPCFoffset;\nuniform vec4     u_shadowPSSMDistance;\nvec4 packDepth(const in float depth)\n{\n\tconst vec4 bitShift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n\tconst vec4 bitMask\t= vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n\tvec4 res = mod(depth*bitShift*vec4(255), vec4(256))/vec4(255);\n\tres -= res.xxyz * bitMask;\n\treturn res;\n}\nfloat unpackDepth(const in vec4 rgbaDepth)\n{\n\tconst vec4 bitShift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n\tfloat depth = dot(rgbaDepth, bitShift);\n\treturn depth;\n}\nfloat tex2DPCF( sampler2D shadowMap,vec2 texcoord,vec2 invsize,float zRef )\n{\n\tvec2 texelpos =texcoord / invsize;\n\tvec2 lerps = fract( texelpos );\n\tfloat sourcevals[4];\n\tsourcevals[0] = float( unpackDepth(texture2D(shadowMap,texcoord)) > zRef );\n\tsourcevals[1] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x,0))) > zRef );\n\tsourcevals[2] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(0,invsize.y))) > zRef );\n\tsourcevals[3] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x, invsize.y) )) > zRef );\n\treturn mix( mix(sourcevals[0],sourcevals[2],lerps.y),mix(sourcevals[1],sourcevals[3],lerps.y),lerps.x );\n}\nfloat getShadowPSSM3( sampler2D shadowMap1,sampler2D shadowMap2,sampler2D shadowMap3,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tint nPSNum = int(posViewZ>pssmDistance.x);\n\tnPSNum += int(posViewZ>pssmDistance.y);\n\tnPSNum += int(posViewZ>pssmDistance.z);\n\t//真SB,webgl不支持在PS中直接访问数组\n\tmat4 lightVP;\n\tif( nPSNum == 0 )\n\t{\n\t\tlightVP = lightShadowVP[1];\n\t}\n\telse if( nPSNum == 1 )\n\t{\n\t\tlightVP = lightShadowVP[2];\n\t}\n\telse if( nPSNum == 2 )\n\t{\n\t\tlightVP = lightShadowVP[3];\n\t}\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\n\t//为了效率，在CPU计算/2.0 + 0.5\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\n\tfloat fMyZ = vText.z - zBias;\n\t/*\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\tbool bInFrustum = all( bInFrustumVec );\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\tbool bFrustumTest = all( bFrustumTestVec );\n\tif ( bFrustumTest ) \n\t*/\n\tif( fMyZ <= 1.0 )\n\t{\n\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue = value/4.0;\n\t\t} \n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF2\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF_NO\n\t\tvec4 color;\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap3,vText.xy );\n\t\t}\n\t\tzdepth = unpackDepth(color);\n\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t}\n\treturn value;\n}\nfloat getShadowPSSM2( sampler2D shadowMap1,sampler2D shadowMap2,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tint nPSNum = int(posViewZ>pssmDistance.x);\n\tnPSNum += int(posViewZ>pssmDistance.y);\n\t//真SB,webgl不支持在PS中直接访问数组\n\tmat4 lightVP;\n\tif( nPSNum == 0 )\n\t{\n\t\tlightVP = lightShadowVP[1];\n\t}\n\telse if( nPSNum == 1 )\n\t{\n\t\tlightVP = lightShadowVP[2];\n\t}\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\n\t//为了效率，在CPU计算/2.0 + 0.5\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\n\tfloat fMyZ = vText.z - zBias;\n\t/*\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\tbool bInFrustum = all( bInFrustumVec );\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\tbool bFrustumTest = all( bFrustumTestVec );\n\tif ( bFrustumTest ) \n\t*/\n\tif( fMyZ <= 1.0 )\n\t{\n\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue = value/4.0;\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF2\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF_NO\n\t\tvec4 color;\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\n\t\t}\n\t\tzdepth = unpackDepth(color);\n\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t}\n\treturn value;\n}\nfloat getShadowPSSM1( sampler2D shadowMap1,vec4 lightMVPPos,vec4 pssmDistance,vec2 shadowPCFOffset,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tif( posViewZ < pssmDistance.x )\n\t{\n\t\tvec3 vText = lightMVPPos.xyz / lightMVPPos.w;\n\t\tfloat fMyZ = vText.z - zBias;\n\t\t/*\n\t\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\t\tbool bInFrustum = all( bInFrustumVec );\n\t\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\t\tbool bFrustumTest = all( bFrustumTestVec );\n\t\t*/\n\t\tif ( fMyZ <= 1.0 ) \n\t\t{\n\t\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,fMyZ );\n\t\t\tvalue = value/4.0;\n#endif\n#ifdef SHADOWMAP_PCF2\t\t\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n#endif\n#ifdef SHADOWMAP_PCF_NO\t\t\n\t\t\tvec4 color = texture2D( shadowMap1,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t\t}\n\t}\n\treturn value;\n}"),
                    Ve.addInclude("BRDF.glsl", "struct LayaGI\n{\n\tvec3 diffuse;\n\tvec3 specular;\n};\n\nvec4 LayaAirBRDF(in vec3 diffuseColor, in vec3 specularColor, in float oneMinusReflectivity, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);\n\tvec3 halfDir = SafeNormalize(viewDir - lightDir);\n\t\n\tfloat nv = abs(dot(normal, viewDir));\n\t\n\tfloat nl = clamp(dot(normal,   -lightDir),  0.0, 1.0);\n\tfloat nh = clamp(dot(normal,     halfDir),  0.0, 1.0);\n\tfloat lv = clamp(dot(lightDir,   viewDir),  0.0, 1.0);\n\tfloat lh = clamp(dot(lightDir,  -halfDir),  0.0, 1.0);\n\t\n\tfloat diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;\n\t\n\tfloat roughness = PerceptualRoughnessToRoughness(perceptualRoughness);\n\t\n\t//#if UNITY_BRDF_GGX\n\tfloat V = SmithJointGGXVisibilityTerm(nl, nv, roughness);\n\tfloat D = GGXTerm(nh, roughness);\n\t\n\tfloat specularTerm = V * D * PI;\n\t\n\tspecularTerm = sqrt(max(0.0001, specularTerm));\n\tspecularTerm = max(0.0, specularTerm * nl);\n\t\n\tfloat surfaceReduction = 1.0 - 0.28 * roughness * perceptualRoughness;\n\tfloat grazingTerm = clamp(smoothness + (1.0 - oneMinusReflectivity), 0.0, 1.0);\n\t\n\tvec4 color;\n\tcolor.rgb = diffuseColor * (gi.diffuse + lightColor * diffuseTerm) \n\t\t\t  + specularTerm * lightColor * FresnelTerm (specularColor, lh)\n\t\t\t  + surfaceReduction * gi.specular * FresnelLerp(specularColor, vec3(grazingTerm), nv);\n\t\n\treturn color;\n}"),
                    Ve.addInclude("PBRUtils.glsl", "struct DirectionLight\n{\n\tvec3 Color;\n\tvec3 Direction;\n};\n\nstruct PointLight\n{\n\tvec3 Color;\n\tvec3 Position;\n\tfloat Range;\n};\n\nstruct SpotLight\n{\n\tvec3 Color;\n\tvec3 Position;\n\tvec3 Direction;\n\tfloat SpotAngle;\n\tfloat Range;\n};\n\nvec3 UnpackScaleNormal(in vec2 uv0)\n{\n\t#ifdef NORMALTEXTURE\n\t\tvec3 normalT;\n\t\tvec4 normalMapSample = texture2D(u_NormalTexture, uv0);\n\t\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\n\t\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\n\t\tnormalT.xy *= u_normalScale;\n\t\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\n\t\t\n\t\tvec3 T = normalize(v_Tangent);\n\t\tvec3 B = normalize(v_Binormal);\n\t\tvec3 N = normalize(v_Normal);\n\t\tmat3 TBN = mat3(T, B, N);\n\t\t\n\t\tvec3 bumpedNormal = TBN * normalize(normalT);\n\t\treturn bumpedNormal;\n\t#else\n\t\treturn normalize(v_Normal);\n\t#endif\n}\n\nvec4 DielectricSpecularColor = vec4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301);\n\nfloat PI = 3.14159265359;\n\nvec3 FresnelTerm (in vec3 F0, in float cosA)\n{\n\treturn F0 + (vec3(1.0) - F0) * pow(1.0 - cosA, 5.0);\n}\n\nvec3 FresnelLerp (in vec3 F0, in vec3 F90, float cosA)\n{\n    float t = pow(1.0 - cosA, 5.0);\n    return mix(F0, F90, t);\n}\n\nfloat PerceptualRoughnessToRoughness(in float perceptualRoughness)\n{\n\treturn perceptualRoughness * perceptualRoughness;\n}\n\nfloat PerceptualRoughnessToSpecularPower(in float perceptualRoughness)\n{\n\tfloat m = PerceptualRoughnessToRoughness(perceptualRoughness);\n\tfloat sq = max(0.0001, m * m);\n\tfloat n = (2.0 / sq) - 2.0;\n\tn = max(n, 0.0001);\n\treturn n;\n}\n\nfloat RoughnessToPerceptualRoughness(in float roughness)\n{\n\treturn sqrt(roughness);\n}\n\nfloat SmoothnessToRoughness(in float smoothness)\n{\n\treturn (1.0 - smoothness) * (1.0 - smoothness);\n}\n\nfloat SmoothnessToPerceptualRoughness(in float smoothness)\n{\n\treturn (1.0 - smoothness);\n}\n\nvec3 SafeNormalize(in vec3 inVec)\n{\n\tfloat dp3 = max(0.001,dot(inVec,inVec));\n\treturn inVec * (1.0 / sqrt(dp3));\n}\n\nfloat DisneyDiffuse(in float NdotV, in float NdotL, in float LdotH, in float perceptualRoughness)\n{\n\tfloat fd90 = 0.5 + 2.0 * LdotH * LdotH * perceptualRoughness;\n\tfloat lightScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotL,5.0));\n\tfloat viewScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotV,5.0));\n\n\treturn lightScatter * viewScatter;\n}\n\nfloat SmithJointGGXVisibilityTerm (float NdotL, float NdotV, float roughness)\n{\n\tfloat a = roughness;\n\tfloat lambdaV = NdotL * (NdotV * (1.0 - a) + a);\n\tfloat lambdaL = NdotV * (NdotL * (1.0 - a) + a);\n\n\treturn 0.5 / (lambdaV + lambdaL + 0.00001);\n}\n\nfloat GGXTerm (float NdotH, float roughness)\n{\n\tfloat a2 = roughness * roughness;\n\tfloat d = (NdotH * a2 - NdotH) * NdotH + 1.0;\n\treturn 0.31830988618 * a2 / (d * d + 0.0000001);\n}\n\nfloat OneMinusReflectivityFromMetallic(in float metallic)\n{\n\tfloat oneMinusDielectricSpec = DielectricSpecularColor.a;\n\treturn oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;\n}\n\nfloat SpecularStrength(vec3 specular)\n{\n    //(SHADER_TARGET < 30)return specular.r; \n    return max (max (specular.r, specular.g), specular.b);\n}\n\nvec3 DiffuseAndSpecularFromMetallic(in vec3 diffuseColor, in float metallic, out vec3 specularColor, out float oneMinusReflectivity)\n{\n\tspecularColor = mix(DielectricSpecularColor.rgb, diffuseColor, metallic);\n\toneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);\n\treturn diffuseColor * oneMinusReflectivity;\n}\n\nvec3 EnergyConservationBetweenDiffuseAndSpecular(in vec3 diffuseColor, in vec3 specularColor, out float oneMinusReflectivity)\n{\n\toneMinusReflectivity = 1.0 - SpecularStrength(specularColor);\n\treturn diffuseColor * oneMinusReflectivity;\n}\n\nvec4 Occlusion(in vec2 uv0){\n\t#ifdef OCCLUSIONTEXTURE\n\t\tvec4 occlusionTextureColor = texture2D(u_OcclusionTexture, uv0);\n\t\tfloat occ = occlusionTextureColor.g;\n\t\tfloat oneMinusT = 1.0 - u_occlusionStrength;\n\t\tfloat lerpOneTo = oneMinusT + occ * u_occlusionStrength;\n\t\treturn occlusionTextureColor * lerpOneTo;\n\t#else\n\t\treturn vec4(1.0);\n\t#endif\n}\n\nvec2 ParallaxOffset(in vec3 viewDir){\n\t#ifdef PARALLAXTEXTURE\n\t\tfloat h = texture2D(u_ParallaxTexture, v_Texcoord0).g;\n\t\th = h * u_parallaxScale - u_parallaxScale / 2.0;\n\t\tvec3 v = viewDir;\n\t\tv.z += 0.42;\n\t\tvec2 offset = h * (v.xy / v.z);\n\t\treturn v_Texcoord0 + offset;\n\t#else\n\t\treturn v_Texcoord0;\n\t#endif\n}\n\nvec3 ReflectCubeMap(in vec3 viewDir, in vec3 normal){\n\t#ifdef REFLECTMAP\n\t\tvec3 incident = -viewDir;\n\t\tvec3 reflectionVector = reflect(incident, normal);\n\t\tvec3 reflectionColor = textureCube(u_ReflectTexture, vec3(-reflectionVector.x, reflectionVector.yz)).rgb;\n\t\treturn reflectionColor * u_ReflectIntensity;\n\t#else\n\t\treturn vec3(0.0);\n\t#endif\n}\n\nfloat LayaAttenuation(in vec3 L, in float invLightRadius)\n{\n\tfloat fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\n\tfRatio *= fRatio;\n\treturn 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0*(1.0 - fRatio), 0.0, 1.0); //fade to black as if 4 pixel texture\n}\n\nvec3 LayaPreMultiplyAlpha(vec3 diffColor, float alpha, float oneMinusReflectivity, out float outModifiedAlpha)\n{\n\t#ifdef ALPHAPREMULTIPLY\n\t\tdiffColor *= alpha;\n\t\toutModifiedAlpha = 1.0 - oneMinusReflectivity + alpha * oneMinusReflectivity;\n\t#else\n\t\toutModifiedAlpha = alpha;\n\t#endif\n\treturn diffColor;\n}\n\n"),
                    Ve.addInclude("PBRStandardLighting.glsl", '#include "PBRUtils.glsl"\n#include "BRDF.glsl"\n\nvec4 PBRStandardLight(in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat oneMinusReflectivity;\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat alpha;\n\t\n\tdiffuseColor = DiffuseAndSpecularFromMetallic (albedoColor.rgb, metallic, specularColor, oneMinusReflectivity);\n\t\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\n\t\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\n\tcolor.a = alpha;\n\treturn color;\n}\n\nvec4 PBRStandardDiectionLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi)\n{\n\tvec3 lightVec = normalize(light.Direction);\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi);\n}\n\nvec4 PBRStandardPointLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightCoord = (u_PointLightMatrix * vec4(pos, 1.0)).xyz;\n\tfloat distance = dot(lightCoord, lightCoord);\n\tfloat attenuate = texture2D(u_RangeTexture, vec2(distance)).w;\n\tvec3 lightVec = normalize(pos - light.Position);\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\nvec4 PBRStandardSpotLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightVec =  pos - light.Position;\n\tvec3 normalLightVec = normalize(lightVec);\n\tvec2 cosAngles = cos(vec2(light.SpotAngle, light.SpotAngle*0.5) * 0.5);//ConeAttenuation\n\tfloat dl = dot(normalize(light.Direction), normalLightVec);\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range) * dl;\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n//{\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\n//\t\n//\tfloat distance = dot(lightCoord, lightCoord);\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\n//\tvec3 lightVec = normalize(pos - light.Position);\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n//}\n\nvec2 MetallicGloss(in float albedoTextureAlpha, in vec2 uv0)\n{\n\tvec2 mg;\n\t\n\t#ifdef METALLICGLOSSTEXTURE\n\t\tvec4 metallicGlossTextureColor = texture2D(u_MetallicGlossTexture, uv0);\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tmg.r = metallicGlossTextureColor.r;\n\t\t\tmg.g = albedoTextureAlpha;\n\t\t#else\n\t\t    mg = metallicGlossTextureColor.ra;\n\t\t#endif\n\t\tmg.g *= u_smoothnessScale;\n\t#else\n\t\tmg.r = u_metallic;\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tmg.g = albedoTextureAlpha * u_smoothnessScale;\n\t\t#else\n\t\t\tmg.g = u_smoothness;\n\t\t#endif\n\t#endif\n\t\n\treturn mg;\n}\n\n'),
                    Ve.addInclude("PBRSpecularLighting.glsl", '#include "PBRUtils.glsl"\n#include "BRDF.glsl"\n\nvec4 PBRSpecularLight(in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat oneMinusReflectivity;\n\tvec3 diffuseColor;\n\tfloat alpha;\n\t\n\tdiffuseColor = EnergyConservationBetweenDiffuseAndSpecular (albedoColor.rgb, specularColor, oneMinusReflectivity);\n\t\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\n\t\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\n\tcolor.a = alpha;\n\treturn color;\n}\n\nvec4 PBRSpecularDiectionLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi)\n{\n\tvec3 lightVec = normalize(light.Direction);\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi);\n}\n\nvec4 PBRSpecularPointLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightCoord = (u_PointLightMatrix * vec4(pos, 1.0)).xyz;\n\tfloat distance = dot(lightCoord, lightCoord);\n\tfloat attenuate = texture2D(u_RangeTexture, vec2(distance)).w;\n\tvec3 lightVec = normalize(pos - light.Position);\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\nvec4 PBRSpecularSpotLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightVec =  pos - light.Position;\n\tvec3 normalLightVec = normalize(lightVec);\n\tvec2 cosAngles = cos(vec2(light.SpotAngle, light.SpotAngle*0.5) * 0.5);//ConeAttenuation\n\tfloat dl = dot(normalize(light.Direction), normalLightVec);\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range) * dl;\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n//{\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\n//\t\n//\tfloat distance = dot(lightCoord, lightCoord);\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\n//\tvec3 lightVec = normalize(pos - light.Position);\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n//}\n\nvec4 SpecularGloss(float albedoTextureAlpha, in vec2 uv0)\n{\n    vec4 sg;\n\t\n\t#ifdef SPECULARTEXTURE\n\t\tvec4 specularTextureColor = texture2D(u_SpecularTexture, uv0);\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tsg.rgb = specularTextureColor.rgb;\n\t\t\tsg.a = albedoTextureAlpha;\n\t\t#else\n\t\t\tsg = specularTextureColor;\n\t\t#endif\n\t\tsg.a *= u_smoothnessScale;\n\t#else\n\t\tsg.rgb = u_SpecularColor.rgb;\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tsg.a = albedoTextureAlpha * u_smoothnessScale;\n\t\t#else\n\t\t\tsg.a = u_smoothness;\n\t\t#endif\n\t#endif\n\t\n    return sg;\n}\n\n'),
                    Ve.addInclude("Colors.glsl", '#include "StdLib.glsl";\n\n#define EPSILON 1.0e-4\n\n// Quadratic color thresholding\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\n\t// Pixel brightness\n\tmediump float br = max3(color.r, color.g, color.b);\n\n\t// Under-threshold part: quadratic curve\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\n\trq = curve.z * rq * rq;\n\n\t// Combine and apply the brightness response curve.\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\n\n\treturn color;\n}\n\n//\n// sRGB transfer functions\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\n//\nmediump vec3 SRGBToLinear(mediump vec3 c) {\n\t#ifdef USE_VERY_FAST_SRGB\n\t\treturn c * c;\n\t#elif defined(USE_FAST_SRGB)\n\t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\n\t#else\n\t\tmediump vec3 linearRGBLo = c / 12.92;\n\t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\n\t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\n\t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\n\t\treturn linearRGB;\n\t#endif\n}\n\nmediump vec3 LinearToSRGB(mediump vec3 c) {\n\t#ifdef USE_VERY_FAST_SRGB\n\t\treturn sqrt(c);\n\t#elif defined(USE_FAST_SRGB)\n\t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\n\t#else\n\t\tmediump vec3 sRGBLo = c * 12.92;\n\t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\n\t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\n\t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\n\t\treturn sRGB;\n\t#endif\n}'),
                    Ve.addInclude("Sampling.glsl", "// Better, temporally stable box filtering\n// [Jimenez14] http://goo.gl/eomGso\n// . . . . . . .\n// . A . B . C .\n// . . D . E . .\n// . F . G . H .\n// . . I . J . .\n// . K . L . M .\n// . . . . . . .\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    mediump vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\n    mediump vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\n    mediump vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\n    mediump vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\n    mediump vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\n    mediump vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\n    mediump vec4 G = texture2D(tex, uv);\n    mediump vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\n    mediump vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\n    mediump vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\n    mediump vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\n    mediump vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\n    mediump vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\n\n\tmediump vec2 scale= vec2(0.5, 0.125);\n    mediump vec2 div = (1.0 / 4.0) * scale;\n\n    mediump vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n\n    return o;\n}\n\n// Standard box filtering\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}\n\n// 9-tap bilinear upsampler (tent filter)\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\n// . 2 . 4 . 2 .\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\n\n    mediump vec4 s =  texture2D(tex, uv - d.xy);\n    s += texture2D(tex, uv - d.wy) * 2.0;\n    s += texture2D(tex, uv - d.zy);\n\n    s += texture2D(tex, uv + d.zw) * 2.0;\n    s += texture2D(tex, uv) * 4.0;\n    s += texture2D(tex,\tuv + d.xw) * 2.0;\n\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.wy) * 2.0;\n    s += texture2D(tex, uv + d.xy);\n\n    return s * (1.0 / 16.0);\n}\n\n// Standard box filtering\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * (sampleScale * 0.5);\n\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}"),
                    Ve.addInclude("StdLib.glsl", "#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\n\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nmediump vec4 safeHDR(mediump vec4 c)\n{\n    return min(c, HALF_MAX);\n}\n\nfloat max3(float a, float b, float c)\n{\n    return max(max(a, b), c);\n}\n\nvec3 positivePow(vec3 base, vec3 power)\n{\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\n}");
                var t, n, i = {
                        a_Position: 0,
                        a_Color: 1,
                        a_Normal: 3,
                        a_Texcoord0: 2,
                        a_Texcoord1: 7,
                        a_BoneWeights: 6,
                        a_BoneIndices: 5,
                        a_Tangent0: 4,
                        a_MvpMatrix: 12,
                        a_WorldMat: 8
                    },
                    r = {
                        u_Bones: 0,
                        u_DiffuseTexture: 1,
                        u_SpecularTexture: 1,
                        u_NormalTexture: 1,
                        u_AlphaTestValue: 1,
                        u_DiffuseColor: 1,
                        u_MaterialSpecular: 1,
                        u_Shininess: 1,
                        u_TilingOffset: 1,
                        u_WorldMat: 2,
                        u_MvpMatrix: 2,
                        u_LightmapScaleOffset: 2,
                        u_LightMap: 2,
                        u_CameraPos: 3,
                        u_ReflectTexture: 4,
                        u_ReflectIntensity: 4,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4,
                        "u_DirectionLight.Color": 4,
                        "u_DirectionLight.Direction": 4,
                        "u_PointLight.Position": 4,
                        "u_PointLight.Range": 4,
                        "u_PointLight.Color": 4,
                        "u_SpotLight.Position": 4,
                        "u_SpotLight.Direction": 4,
                        "u_SpotLight.Range": 4,
                        "u_SpotLight.Spot": 4,
                        "u_SpotLight.Color": 4,
                        u_AmbientColor: 4,
                        u_shadowMap1: 4,
                        u_shadowMap2: 4,
                        u_shadowMap3: 4,
                        u_shadowPSSMDistance: 4,
                        u_lightShadowVP: 4,
                        u_shadowPCFoffset: 4
                    },
                    a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    };
                t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\n\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\n\tattribute vec2 a_Texcoord0;\n\tvarying vec2 v_Texcoord0;\n#endif\n\n#if defined(LIGHTMAP)&&defined(UV1)\n\tattribute vec2 a_Texcoord1;\n#endif\n\n#ifdef LIGHTMAP\n\tuniform vec4 u_LightmapScaleOffset;\n\tvarying vec2 v_LightMapUV;\n#endif\n\n#ifdef COLOR\n\tattribute vec4 a_Color;\n\tvarying vec4 v_Color;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tattribute vec3 a_Normal;\n\tvarying vec3 v_Normal; \n\tuniform vec3 u_CameraPos;\n\tvarying vec3 v_ViewDir; \n#endif\n\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\tattribute vec4 a_Tangent0;\n\tvarying vec3 v_Tangent;\n\tvarying vec3 v_Binormal;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t#ifdef GPU_INSTANCE\n\t\tattribute mat4 a_WorldMat;\n\t#else\n\t\tuniform mat4 u_WorldMat;\n\t#endif\n\tvarying vec3 v_PositionWorld;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n  varying vec4 v_lightMVPPos;\n  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvoid main_castShadow()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\tvec4 my_postion = remapGLPositionZ(gl_Position);\n    my_postion.y = sin(my_postion.z / 25.0) * 6.6 + my_postion.y;\n\tgl_Position=my_postion;\n  \n\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tmat4 worldMat;\n\t\t#ifdef GPU_INSTANCE\n\t\t\tworldMat = a_WorldMat;\n\t\t#else\n\t\t\tworldMat = u_WorldMat;\n\t\t#endif\n\t#endif\n\t\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(worldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tv_PositionWorld=(worldMat*position).xyz;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n\t\t#ifdef TILINGOFFSET\n\t\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t\t#else\n\t\t\tv_Texcoord0=a_Texcoord0;\n\t\t#endif\n\t#endif\n\n\t#ifdef LIGHTMAP\n\t\t#ifdef SCALEOFFSETLIGHTINGMAPUV\n\t\t\t#ifdef UV1\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t#else\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t#endif \n\t\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\n\t\t#else\n\t\t\t#ifdef UV1\n\t\t\t\tv_LightMapUV=a_Texcoord1;\n\t\t\t#else\n\t\t\t\tv_LightMapUV=a_Texcoord0;\n\t\t\t#endif \n\t\t#endif \n\t#endif\n\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tv_Color=a_Color;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n    //gl_Position=remapGLPositionZ(gl_Position);\n\tvec4 my_postion = remapGLPositionZ(gl_Position);\n    my_postion.y = sin(my_postion.z / 25.0) * 6.6 + my_postion.y;\n\tgl_Position=my_postion;\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}',
                    n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\nuniform vec4 u_DiffuseColor;\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\tvarying vec4 v_Color;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tvarying vec3 v_ViewDir; \n#endif\n\n#ifdef ALPHATEST\n\tuniform float u_AlphaTestValue;\n#endif\n\n#ifdef DIFFUSEMAP\n\tuniform sampler2D u_DiffuseTexture;\n#endif\n\n\n\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n\tvarying vec2 v_Texcoord0;\n#endif\n\n#ifdef LIGHTMAP\n\tvarying vec2 v_LightMapUV;\n\tuniform sampler2D u_LightMap;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tuniform vec3 u_MaterialSpecular;\n\tuniform float u_Shininess;\n\t#ifdef SPECULARMAP \n\t\tuniform sampler2D u_SpecularTexture;\n\t#endif\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tvarying vec3 v_Normal;\n#endif\n\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\tuniform sampler2D u_NormalTexture;\n\tvarying vec3 v_Tangent;\n\tvarying vec3 v_Binormal;\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\nuniform vec3 u_AmbientColor;\n\n\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#include "ShadowHelper.glsl"\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\nvoid main_castShadow()\n{\n\t//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\nvoid main_normal()\n{\n\tvec3 globalDiffuse=u_AmbientColor;\n\t#ifdef LIGHTMAP\t\n\t\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tvec3 normal;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\t\t\tvec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;\n\t\t\tnormal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));\n\t\t#else\n\t\t\tnormal = normalize(v_Normal);\n\t\t#endif\n\t\tvec3 viewDir= normalize(v_ViewDir);\n\t#endif\n\t\n\tvec4 mainColor=u_DiffuseColor;\n\t#ifdef DIFFUSEMAP\n\t\tvec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);\n\t\tmainColor=mainColor*difTexColor;\n\t#endif \n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tmainColor=mainColor*v_Color;\n\t#endif \n    \n\t#ifdef ALPHATEST\n\t\tif(mainColor.a<u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n  \n\t\n\tvec3 diffuse = vec3(0.0);\n\tvec3 specular= vec3(0.0);\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tvec3 dif,spe;\n\t\t#ifdef SPECULARMAP\n\t\t\tvec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;\n\t\t#else\n\t\t\t#ifdef DIFFUSEMAP\n\t\t\t\tvec3 gloss=vec3(difTexColor.a);\n\t\t\t#else\n\t\t\t\tvec3 gloss=vec3(1.0);\n\t\t\t#endif\n\t\t#endif\n\t#endif\n\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n\n\t#ifdef SPOTLIGHT\n\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3(u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2(u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1(u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse*shadowValue),mainColor.a);\n\t#else\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\t#ifdef RECEIVESHADOW\n\t\t\tgl_FragColor.rgb+=specular*shadowValue;\n\t\t#else\n\t\t\tgl_FragColor.rgb+=specular;\n\t\t#endif\n\t#endif\n\t  \n\t#ifdef FOG\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\n\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}\n\n';
                var o = Ve.add("BLINNPHONG", !0),
                    s = new ot(i, r, Di.shaderDefines, ci.shaderDefines);
                o.addSubShader(s), s.addShaderPass(t, n, a), i = {
                        a_Position: 0,
                        a_Color: 1
                    }, r = {
                        u_MvpMatrix: 2,
                        u_Color: 1
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\nuniform vec4 u_Color;\nattribute vec4 a_Color;\nvarying vec4 v_Color;\n\n\nvoid main()\n{\n\tgl_Position = u_MvpMatrix * a_Position;\n\tv_Color=a_Color*u_Color;\n\tgl_Position=remapGLPositionZ(gl_Position);\n}',
                    n = "#ifdef HIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec4 v_Color;\nuniform vec4 u_Color;\n\nvoid main()\n{\n  gl_FragColor = v_Color * u_Color; \n}\n\n",
                    o = Ve.add("LineShader"), s = new ot(i, r), o.addSubShader(s), s.addShaderPass(t, n, a),
                    i = {
                        a_Position: 0,
                        a_Normal: 3,
                        a_Tangent0: 4,
                        a_Texcoord0: 2,
                        a_BoneWeights: 6,
                        a_BoneIndices: 5,
                        a_MvpMatrix: 12,
                        a_WorldMat: 8
                    }, r = {
                        u_Bones: 0,
                        u_MvpMatrix: 2,
                        u_WorldMat: 2,
                        u_CameraPos: 3,
                        u_AlphaTestValue: 1,
                        u_AlbedoColor: 1,
                        u_EmissionColor: 1,
                        u_AlbedoTexture: 1,
                        u_NormalTexture: 1,
                        u_ParallaxTexture: 1,
                        u_MetallicGlossTexture: 1,
                        u_OcclusionTexture: 1,
                        u_EmissionTexture: 1,
                        u_metallic: 1,
                        u_smoothness: 1,
                        u_smoothnessScale: 1,
                        u_occlusionStrength: 1,
                        u_normalScale: 1,
                        u_parallaxScale: 1,
                        u_TilingOffset: 1,
                        "u_DirectionLight.Direction": 4,
                        "u_DirectionLight.Color": 4,
                        u_PointLightMatrix: 4,
                        "u_PointLight.Position": 4,
                        "u_PointLight.Range": 4,
                        "u_PointLight.Color": 4,
                        "u_SpotLight.Position": 4,
                        "u_SpotLight.Direction": 4,
                        "u_SpotLight.Range": 4,
                        "u_SpotLight.SpotAngle": 4,
                        "u_SpotLight.Color": 4,
                        u_RangeTexture: 4,
                        u_ReflectTexture: 4,
                        u_ReflectIntensity: 4,
                        u_AmbientColor: 4,
                        u_shadowMap1: 4,
                        u_shadowMap2: 4,
                        u_shadowMap3: 4,
                        u_shadowPSSMDistance: 4,
                        u_lightShadowVP: 4,
                        u_shadowPCFoffset: 4,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_WorldMat;\n#else\n\tuniform mat4 u_WorldMat;\n#endif\n\nuniform vec3 u_CameraPos;\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n\t  varying vec4 v_lightMVPPos;\n\t  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main_castShadow()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0 = a_Texcoord0;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tmat4 worldMat;\n\t\t#ifdef GPU_INSTANCE\n\t\t\tworldMat = a_WorldMat;\n\t\t#else\n\t\t\tworldMat = u_WorldMat;\n\t\t#endif\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(worldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\t\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tv_PositionWorld=(worldMat*position).xyz;\n\t#endif\n\t\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n  \n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}',
                    n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\nuniform vec3 u_AmbientColor;\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n#ifdef METALLICGLOSSTEXTURE\n\tuniform sampler2D u_MetallicGlossTexture;\n#endif\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n\tuniform float u_normalScale;\n#endif\n#ifdef PARALLAXTEXTURE\n\tuniform sampler2D u_ParallaxTexture;\n\tuniform float u_parallaxScale;\n#endif\n#ifdef OCCLUSIONTEXTURE\n\tuniform sampler2D u_OcclusionTexture;\n\tuniform float u_occlusionStrength;\n#endif\n#ifdef EMISSION\n\t#ifdef EMISSIONTEXTURE\n\t\tuniform sampler2D u_EmissionTexture;\n\t#endif\n\tuniform vec4 u_EmissionColor;\n#endif\n#ifdef REFLECTMAP\n\tuniform samplerCube u_ReflectTexture;\n\tuniform float u_ReflectIntensity;\n#endif\n\nuniform float u_AlphaTestValue;\nuniform float u_metallic;\nuniform float u_smoothness;\nuniform float u_smoothnessScale;\n\nuniform sampler2D u_RangeTexture;\n//uniform sampler2D u_AngleTexture;\nuniform mat4 u_PointLightMatrix;\n//uniform mat4 u_SpotLightMatrix;\n\n#include "PBRStandardLighting.glsl"\n#include "ShadowHelper.glsl"\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\nvoid main_castShadow()\n{\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\n\nvoid main_normal()\n{\t\n\tvec3 viewDir = normalize(v_ViewDir);\n\t\n\tvec2 uv0 = ParallaxOffset(viewDir);\n\t\n\tvec2 mg;\n\tvec4 albedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tvec4 abledoTextureColor = texture2D(u_AlbedoTexture, uv0);\n\t\talbedoColor = abledoTextureColor * u_AlbedoColor;\n\t\tmg = MetallicGloss(abledoTextureColor.a, uv0);\n\t#else\n\t\talbedoColor = u_AlbedoColor;\n\t\tmg = MetallicGloss(1.0, uv0);\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(albedoColor.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n\t\n\tvec3 normal = UnpackScaleNormal(uv0);\n  \n\tLayaGI gi;\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\n\tgi.specular = ReflectCubeMap(viewDir, normal);\n  \n\tvec4 color = vec4(0.0);\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tcolor += PBRStandardDiectionLight(albedoColor, mg.r, mg.g, normal, viewDir, u_DirectionLight, gi);\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRStandardPointLight(albedoColor, mg.r, mg.g, normal, viewDir, u_PointLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef SPOTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRStandardSpotLight(albedoColor, mg.r, mg.g, normal, viewDir, u_SpotLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef EMISSION\n\t\tvec4 emissionColor = u_EmissionColor;\n\t\t#ifdef EMISSIONTEXTURE\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\n\t\t#endif\n\t\tcolor.rgb += emissionColor.rgb;\n\t#endif\n\t\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor = vec4(color.rgb * shadowValue, color.a);\n\t#else\n\t\tgl_FragColor = color;\n\t#endif\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}',
                    o = Ve.add("PBRStandard", !0), s = new ot(i, r, Di.shaderDefines, oi.shaderDefines),
                    o.addSubShader(s), s.addShaderPass(t, n, a), i = {
                        a_Position: 0,
                        a_Normal: 3,
                        a_Tangent0: 4,
                        a_Texcoord0: 2,
                        a_BoneWeights: 6,
                        a_BoneIndices: 5,
                        a_MvpMatrix: 12,
                        a_WorldMat: 8
                    }, r = {
                        u_Bones: 0,
                        u_MvpMatrix: 2,
                        u_WorldMat: 2,
                        u_CameraPos: 3,
                        u_AlphaTestValue: 1,
                        u_AlbedoColor: 1,
                        u_SpecularColor: 1,
                        u_EmissionColor: 1,
                        u_AlbedoTexture: 1,
                        u_NormalTexture: 1,
                        u_ParallaxTexture: 1,
                        u_SpecularTexture: 1,
                        u_OcclusionTexture: 1,
                        u_EmissionTexture: 1,
                        u_smoothness: 1,
                        u_smoothnessScale: 1,
                        u_occlusionStrength: 1,
                        u_normalScale: 1,
                        u_parallaxScale: 1,
                        u_TilingOffset: 1,
                        "u_DirectionLight.Direction": 4,
                        "u_DirectionLight.Color": 4,
                        u_PointLightMatrix: 4,
                        "u_PointLight.Position": 4,
                        "u_PointLight.Range": 4,
                        "u_PointLight.Color": 4,
                        "u_SpotLight.Position": 4,
                        "u_SpotLight.Direction": 4,
                        "u_SpotLight.Range": 4,
                        "u_SpotLight.SpotAngle": 4,
                        "u_SpotLight.Color": 4,
                        u_RangeTexture: 4,
                        u_ReflectTexture: 4,
                        u_ReflectIntensity: 4,
                        u_AmbientColor: 4,
                        u_shadowMap1: 4,
                        u_shadowMap2: 4,
                        u_shadowMap3: 4,
                        u_shadowPSSMDistance: 4,
                        u_lightShadowVP: 4,
                        u_shadowPCFoffset: 4,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_WorldMat;\n#else\n\tuniform mat4 u_WorldMat;\n#endif\nuniform vec3 u_CameraPos;\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n\t  varying vec4 v_lightMVPPos;\n\t  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main_castShadow()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0 = a_Texcoord0;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tmat4 worldMat;\n\t\t#ifdef GPU_INSTANCE\n\t\t\tworldMat = a_WorldMat;\n\t\t#else\n\t\t\tworldMat = u_WorldMat;\n\t\t#endif\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(worldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\t\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tv_PositionWorld=(worldMat*position).xyz;\n\t#endif\n\t\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n  \n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}',
                    n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\nuniform vec3 u_AmbientColor;\nuniform vec4 u_AlbedoColor;\nuniform vec4 u_SpecularColor;\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n#ifdef SPECULARTEXTURE\n\tuniform sampler2D u_SpecularTexture;\n#endif\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n\tuniform float u_normalScale;\n#endif\n#ifdef PARALLAXTEXTURE\n\tuniform sampler2D u_ParallaxTexture;\n\tuniform float u_parallaxScale;\n#endif\n#ifdef OCCLUSIONTEXTURE\n\tuniform sampler2D u_OcclusionTexture;\n\tuniform float u_occlusionStrength;\n#endif\n#ifdef EMISSION\n\t#ifdef EMISSIONTEXTURE\n\t\tuniform sampler2D u_EmissionTexture;\n\t#endif\n\tuniform vec4 u_EmissionColor;\n#endif\n#ifdef REFLECTMAP\n\tuniform samplerCube u_ReflectTexture;\n\tuniform float u_ReflectIntensity;\n#endif\n\nuniform float u_AlphaTestValue;\nuniform float u_metallic;\nuniform float u_smoothness;\nuniform float u_smoothnessScale;\n\nuniform sampler2D u_RangeTexture;\n//uniform sampler2D u_AngleTexture;\nuniform mat4 u_PointLightMatrix;\n//uniform mat4 u_SpotLightMatrix;\n\n#include "PBRSpecularLighting.glsl"\n#include "ShadowHelper.glsl"\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\nvoid main_castShadow()\n{\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\n\nvoid main_normal()\n{\t\n\tvec3 viewDir = normalize(v_ViewDir);\n\t\n\tvec2 uv0 = ParallaxOffset(viewDir);\n\t\n\tvec4 sg;\n\tvec4 albedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tvec4 albedoTextureColor = texture2D(u_AlbedoTexture, uv0);\n\t\talbedoColor = albedoTextureColor * u_AlbedoColor;\n\t\tsg = SpecularGloss(albedoTextureColor.a, uv0);\n\t#else\n\t\talbedoColor = u_AlbedoColor;\n\t\tsg = SpecularGloss(1.0, uv0);\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(albedoColor.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n  \n\tvec3 normal = UnpackScaleNormal(uv0);\n\t\n\tLayaGI gi;\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\n\tgi.specular = ReflectCubeMap(viewDir, normal);\n\t\n\t//float a = (sg.r+sg.g+sg.b) / 3.0;\n  \n\tvec4 color = vec4(0.0);\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tcolor += PBRSpecularDiectionLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_DirectionLight, gi);\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRSpecularPointLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_PointLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef SPOTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRSpecularSpotLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_SpotLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef EMISSION\n\t\tvec4 emissionColor = u_EmissionColor;\n\t\t#ifdef EMISSIONTEXTURE\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\n\t\t#endif\n\t\tcolor.rgb += emissionColor.rgb;\n\t#endif\n\t\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor = vec4(color.rgb * shadowValue, color.a);\n\t#else\n\t\tgl_FragColor = color;\n\t#endif\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}\n\n',
                    o = Ve.add("PBRSpecular", !0), s = new ot(i, r, Di.shaderDefines, fi.shaderDefines),
                    o.addSubShader(s), s.addShaderPass(t, n, a), i = {
                        a_Position: 0,
                        a_Color: 1,
                        a_Texcoord0: 2,
                        a_BoneWeights: 6,
                        a_BoneIndices: 5,
                        a_MvpMatrix: 12
                    }, r = {
                        u_Bones: 0,
                        u_AlbedoTexture: 1,
                        u_AlbedoColor: 1,
                        u_TilingOffset: 1,
                        u_AlphaTestValue: 1,
                        u_MvpMatrix: 2,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main() {\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tv_Color = a_Color;\n\t#endif\n\t//gl_Position=remapGLPositionZ(gl_Position);\n\tvec4 my_postion = remapGLPositionZ(gl_Position);\n    my_postion.y = sin(my_postion.z / 25.0) * 6.6 + my_postion.y;\n\tgl_Position=my_postion;\n}',
                    n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\tvarying vec4 v_Color;\n#endif\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n\tvarying vec2 v_Texcoord0;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALPHATEST\n\tuniform float u_AlphaTestValue;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\nvoid main()\n{\n\tvec4 color =  u_AlbedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\n\t#endif\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tcolor *= v_Color;\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(color.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n\t\n\tgl_FragColor = color;\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t\t#endif\n\t#endif\n\t\n}\n\n",
                    o = Ve.add("Unlit", !0), s = new ot(i, r, Di.shaderDefines, $n.shaderDefines), o.addSubShader(s),
                    s.addShaderPass(t, n, a), i = {
                        a_Position: 0,
                        a_Texcoord0: 2,
                        a_BoneWeights: 6,
                        a_BoneIndices: 5,
                        a_MvpMatrix: 12
                    }, r = {
                        u_Bones: 0,
                        u_AlbedoTexture: 1,
                        u_AlbedoColor: 1,
                        u_TilingOffset: 1,
                        u_AlphaTestValue: 1,
                        u_MvpMatrix: 2,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec4 a_Color;\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\t\t\n\tv_Color = a_Color;\n\tgl_Position=remapGLPositionZ(gl_Position);\n}',
                    n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#ifdef COLOR\n\tvarying vec4 v_Color;\n#endif\nvarying vec2 v_Texcoord0;\n\n#ifdef MAINTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\nvoid main()\n{\n\tvec4 color =  2.0 * u_AlbedoColor;\n\t#ifdef COLOR\n\t\tcolor *= v_Color;\n\t#endif\n\t#ifdef MAINTEXTURE\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\n\t#endif\n\t\n\tgl_FragColor = color;\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t\t#endif\n\t#endif\n}\n\n",
                    o = Ve.add("Effect", !0), s = new ot(i, r, Di.shaderDefines, li.shaderDefines),
                    o.addSubShader(s), s.addShaderPass(t, n, a), i = {
                        a_CornerTextureCoordinate: 0,
                        a_MeshPosition: 1,
                        a_MeshColor: 2,
                        a_MeshTextureCoordinate: 3,
                        a_ShapePositionStartLifeTime: 4,
                        a_DirectionTime: 5,
                        a_StartColor: 6,
                        a_EndColor: 7,
                        a_StartSize: 8,
                        a_StartRotation0: 9,
                        a_StartSpeed: 10,
                        a_Random0: 11,
                        a_Random1: 12,
                        a_SimulationWorldPostion: 13,
                        a_SimulationWorldRotation: 14
                    }, r = {
                        u_Tintcolor: 1,
                        u_TilingOffset: 1,
                        u_texture: 1,
                        u_WorldPosition: 2,
                        u_WorldRotation: 2,
                        u_PositionScale: 2,
                        u_SizeScale: 2,
                        u_ScalingMode: 2,
                        u_Gravity: 2,
                        u_ThreeDStartRotation: 2,
                        u_StretchedBillboardLengthScale: 2,
                        u_StretchedBillboardSpeedScale: 2,
                        u_SimulationSpace: 2,
                        u_CurrentTime: 2,
                        u_ColorOverLifeGradientAlphas: 2,
                        u_ColorOverLifeGradientColors: 2,
                        u_MaxColorOverLifeGradientAlphas: 2,
                        u_MaxColorOverLifeGradientColors: 2,
                        u_VOLVelocityConst: 2,
                        u_VOLVelocityGradientX: 2,
                        u_VOLVelocityGradientY: 2,
                        u_VOLVelocityGradientZ: 2,
                        u_VOLVelocityConstMax: 2,
                        u_VOLVelocityGradientMaxX: 2,
                        u_VOLVelocityGradientMaxY: 2,
                        u_VOLVelocityGradientMaxZ: 2,
                        u_VOLSpaceType: 2,
                        u_SOLSizeGradient: 2,
                        u_SOLSizeGradientX: 2,
                        u_SOLSizeGradientY: 2,
                        u_SOLSizeGradientZ: 2,
                        u_SOLSizeGradientMax: 2,
                        u_SOLSizeGradientMaxX: 2,
                        u_SOLSizeGradientMaxY: 2,
                        u_SOLSizeGradientMaxZ: 2,
                        u_ROLAngularVelocityConst: 2,
                        u_ROLAngularVelocityConstSeprarate: 2,
                        u_ROLAngularVelocityGradient: 2,
                        u_ROLAngularVelocityGradientX: 2,
                        u_ROLAngularVelocityGradientY: 2,
                        u_ROLAngularVelocityGradientZ: 2,
                        u_ROLAngularVelocityConstMax: 2,
                        u_ROLAngularVelocityConstMaxSeprarate: 2,
                        u_ROLAngularVelocityGradientMax: 2,
                        u_ROLAngularVelocityGradientMaxX: 2,
                        u_ROLAngularVelocityGradientMaxY: 2,
                        u_ROLAngularVelocityGradientMaxZ: 2,
                        u_ROLAngularVelocityGradientMaxW: 2,
                        u_TSACycles: 2,
                        u_TSASubUVLength: 2,
                        u_TSAGradientUVs: 2,
                        u_TSAMaxGradientUVs: 2,
                        u_CameraPos: 3,
                        u_CameraDirection: 3,
                        u_CameraUp: 3,
                        u_View: 3,
                        u_Projection: 3,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\n#ifdef HIGHPRECISION\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\n#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\tattribute vec4 a_CornerTextureCoordinate;\n#endif\n#ifdef RENDERMODE_MESH\n\tattribute vec3 a_MeshPosition;\n\tattribute vec4 a_MeshColor;\n\tattribute vec2 a_MeshTextureCoordinate;\n\tvarying vec4 v_MeshColor;\n#endif\n\nattribute vec4 a_ShapePositionStartLifeTime;\nattribute vec4 a_DirectionTime;\nattribute vec4 a_StartColor;\nattribute vec3 a_StartSize;\nattribute vec3 a_StartRotation0;\nattribute float a_StartSpeed;\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n  attribute vec4 a_Random0;\n#endif\n#if defined(TEXTURESHEETANIMATIONRANDOMCURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  attribute vec4 a_Random1;\n#endif\nattribute vec3 a_SimulationWorldPostion;\nattribute vec4 a_SimulationWorldRotation;\n\nvarying float v_Discard;\nvarying vec4 v_Color;\n#ifdef DIFFUSEMAP\n\tvarying vec2 v_TextureCoordinate;\n#endif\n\nuniform float u_CurrentTime;\nuniform vec3 u_Gravity;\n\nuniform vec3 u_WorldPosition;\nuniform vec4 u_WorldRotation;\nuniform bool u_ThreeDStartRotation;\nuniform int u_ScalingMode;\nuniform vec3 u_PositionScale;\nuniform vec3 u_SizeScale;\nuniform mat4 u_View;\nuniform mat4 u_Projection;\n\n#ifdef STRETCHEDBILLBOARD\n\tuniform vec3 u_CameraPos;\n#endif\nuniform vec3 u_CameraDirection;//TODO:只有几种广告牌模式需要用\nuniform vec3 u_CameraUp;\n\nuniform  float u_StretchedBillboardLengthScale;\nuniform  float u_StretchedBillboardSpeedScale;\nuniform int u_SimulationSpace;\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  uniform  int  u_VOLSpaceType;\n#endif\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\n  uniform  vec3 u_VOLVelocityConst;\n#endif\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  uniform  vec2 u_VOLVelocityGradientX[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientY[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientZ[4];//x为key,y为速度\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n  uniform  vec3 u_VOLVelocityConstMax;\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n  uniform  vec2 u_VOLVelocityGradientMaxX[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientMaxY[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientMaxZ[4];//x为key,y为速度\n#endif\n\n#ifdef COLOROVERLIFETIME\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n#endif\n#ifdef RANDOMCOLOROVERLIFETIME\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n  uniform  vec4 u_MaxColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_MaxColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n#endif\n\n\n#if defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMERANDOMCURVES)\n  uniform  vec2 u_SOLSizeGradient[4];//x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\n  uniform  vec2 u_SOLSizeGradientMax[4];//x为key,y为尺寸\n#endif\n#if defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\n  uniform  vec2 u_SOLSizeGradientX[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientY[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientZ[4];//x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n  uniform  vec2 u_SOLSizeGradientMaxX[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientMaxY[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientMaxZ[4];//x为key,y为尺寸\n#endif\n\n\n#ifdef ROTATIONOVERLIFETIME\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\n    uniform  float u_ROLAngularVelocityConst;\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    uniform  float u_ROLAngularVelocityConstMax;\n  #endif\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n    uniform  vec2 u_ROLAngularVelocityGradient[4];//x为key,y为旋转\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    uniform  vec2 u_ROLAngularVelocityGradientMax[4];//x为key,y为旋转\n  #endif\n#endif\n#ifdef ROTATIONOVERLIFETIMESEPERATE\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\n    uniform  vec3 u_ROLAngularVelocityConstSeprarate;\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    uniform  vec3 u_ROLAngularVelocityConstMaxSeprarate;\n  #endif\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n    uniform  vec2 u_ROLAngularVelocityGradientX[4];\n    uniform  vec2 u_ROLAngularVelocityGradientY[4];\n    uniform  vec2 u_ROLAngularVelocityGradientZ[4];\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    uniform  vec2 u_ROLAngularVelocityGradientMaxX[4];\n    uniform  vec2 u_ROLAngularVelocityGradientMaxY[4];\n    uniform  vec2 u_ROLAngularVelocityGradientMaxZ[4];\n\tuniform  vec2 u_ROLAngularVelocityGradientMaxW[4];\n  #endif\n#endif\n\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\n  uniform  float u_TSACycles;\n  uniform  vec2 u_TSASubUVLength;\n  uniform  vec2 u_TSAGradientUVs[4];//x为key,y为frame\n#endif\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n  uniform  vec2 u_TSAMaxGradientUVs[4];//x为key,y为frame\n#endif\n\n#ifdef FOG\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvec3 rotationByEuler(in vec3 vector,in vec3 rot)\n{\n\tfloat halfRoll = rot.z * 0.5;\n    float halfPitch = rot.x * 0.5;\n\tfloat halfYaw = rot.y * 0.5;\n\n\tfloat sinRoll = sin(halfRoll);\n\tfloat cosRoll = cos(halfRoll);\n\tfloat sinPitch = sin(halfPitch);\n\tfloat cosPitch = cos(halfPitch);\n\tfloat sinYaw = sin(halfYaw);\n\tfloat cosYaw = cos(halfYaw);\n\n\tfloat quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\n\tfloat quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\n\tfloat quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\n\tfloat quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\n\t\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\t\n\tfloat x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n\tfloat xx = quaX * x;\n    float xy = quaX * y;\n\tfloat xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n\t\n}\n\n//假定axis已经归一化\nvec3 rotationByAxis(in vec3 vector,in vec3 axis, in float angle)\n{\n\tfloat halfAngle = angle * 0.5;\n\tfloat sin = sin(halfAngle);\n\t\n\tfloat quaX = axis.x * sin;\n\tfloat quaY = axis.y * sin;\n\tfloat quaZ = axis.z * sin;\n\tfloat quaW = cos(halfAngle);\n\t\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\t\n\tfloat x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n\tfloat xx = quaX * x;\n    float xy = quaX * y;\n\tfloat xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n\t\n}\n\nvec3 rotationByQuaternions(in vec3 v,in vec4 q) \n{\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\n \n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\nfloat getCurValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\n{\n\tfloat curValue;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientNumber=gradientNumbers[i];\n\t\tfloat key=gradientNumber.x;\n\t\tif(key>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\n\t\t\tfloat lastKey=lastGradientNumber.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\tcurValue=mix(lastGradientNumber.y,gradientNumber.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn curValue;\n}\n#endif\n\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\n{\n\tfloat totalValue=0.0;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientNumber=gradientNumbers[i];\n\t\tfloat key=gradientNumber.x;\n\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\n\t\tfloat lastValue=lastGradientNumber.y;\n\t\t\n\t\tif(key>=normalizedAge){\n\t\t\tfloat lastKey=lastGradientNumber.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\ttotalValue+=(lastValue+mix(lastValue,gradientNumber.y,age))/2.0*a_ShapePositionStartLifeTime.w*(normalizedAge-lastKey);\n\t\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\ttotalValue+=(lastValue+gradientNumber.y)/2.0*a_ShapePositionStartLifeTime.w*(key-lastGradientNumber.x);\n\t\t}\n\t}\n\treturn totalValue;\n}\n#endif\n\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)\nvec4 getColorFromGradient(in vec2 gradientAlphas[4],in vec4 gradientColors[4],in float normalizedAge)\n{\n\tvec4 overTimeColor;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientAlpha=gradientAlphas[i];\n\t\tfloat alphaKey=gradientAlpha.x;\n\t\tif(alphaKey>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientAlpha=gradientAlphas[i-1];\n\t\t\tfloat lastAlphaKey=lastGradientAlpha.x;\n\t\t\tfloat age=(normalizedAge-lastAlphaKey)/(alphaKey-lastAlphaKey);\n\t\t\toverTimeColor.a=mix(lastGradientAlpha.y,gradientAlpha.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec4 gradientColor=gradientColors[i];\n\t\tfloat colorKey=gradientColor.x;\n\t\tif(colorKey>=normalizedAge)\n\t\t{\n\t\t\tvec4 lastGradientColor=gradientColors[i-1];\n\t\t\tfloat lastColorKey=lastGradientColor.x;\n\t\t\tfloat age=(normalizedAge-lastColorKey)/(colorKey-lastColorKey);\n\t\t\toverTimeColor.rgb=mix(gradientColors[i-1].yzw,gradientColor.yzw,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn overTimeColor;\n}\n#endif\n\n\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\nfloat getFrameFromGradient(in vec2 gradientFrames[4],in float normalizedAge)\n{\n\tfloat overTimeFrame;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientFrame=gradientFrames[i];\n\t\tfloat key=gradientFrame.x;\n\t\tif(key>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientFrame=gradientFrames[i-1];\n\t\t\tfloat lastKey=lastGradientFrame.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\toverTimeFrame=mix(lastGradientFrame.y,gradientFrame.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn floor(overTimeFrame);\n}\n#endif\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\nvec3 computeParticleLifeVelocity(in float normalizedAge)\n{\n  vec3 outLifeVelocity;\n  #ifdef VELOCITYOVERLIFETIMECONSTANT\n\t outLifeVelocity=u_VOLVelocityConst; \n  #endif\n  #ifdef VELOCITYOVERLIFETIMECURVE\n     outLifeVelocity= vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\n  #endif\n  #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n\t outLifeVelocity=mix(u_VOLVelocityConst,u_VOLVelocityConstMax,vec3(a_Random1.y,a_Random1.z,a_Random1.w)); \n  #endif\n  #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n     outLifeVelocity=vec3(mix(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y),\n\t                 mix(getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z),\n\t\t\t\t\t mix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\n  #endif\n\t\t\t\t\t\n  return outLifeVelocity;\n} \n#endif\n\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity,in float age,in float normalizedAge,vec3 gravityVelocity,vec4 worldRotation)\n{\n   vec3 startPosition;\n   vec3 lifePosition;\n   #if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t#ifdef VELOCITYOVERLIFETIMECONSTANT\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=lifeVelocity*age;\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMECURVE\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=lifeVelocity*age;\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=vec3(mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y)\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z)\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\n\t#endif\n\t\n\tvec3 finalPosition;\n\tif(u_VOLSpaceType==0){\n\t  if(u_ScalingMode!=2)\n\t   finalPosition =rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition),worldRotation);\n\t  else\n\t   finalPosition =rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition,worldRotation);\n\t}\n\telse{\n\t  if(u_ScalingMode!=2)\n\t    finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation)+lifePosition;\n\t  else\n\t    finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation)+lifePosition;\n\t}\n  #else\n\t startPosition=startVelocity*age;\n\t vec3 finalPosition;\n\t if(u_ScalingMode!=2)\n\t   finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation);\n\t else\n\t   finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation);\n  #endif\n  \n  if(u_SimulationSpace==0)\n    finalPosition=finalPosition+a_SimulationWorldPostion;\n  else if(u_SimulationSpace==1) \n    finalPosition=finalPosition+u_WorldPosition;\n  \n  finalPosition+=0.5*gravityVelocity*age;\n \n  return  finalPosition;\n}\n\n\nvec4 computeParticleColor(in vec4 color,in float normalizedAge)\n{\n\t#ifdef COLOROVERLIFETIME\n\t  color*=getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge);\n\t#endif\n\t\n\t#ifdef RANDOMCOLOROVERLIFETIME\n\t  color*=mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge),getColorFromGradient(u_MaxColorOverLifeGradientAlphas,u_MaxColorOverLifeGradientColors,normalizedAge),a_Random0.y);\n\t#endif\n\n    return color;\n}\n\nvec2 computeParticleSizeBillbard(in vec2 size,in float normalizedAge)\n{\n\t#ifdef SIZEOVERLIFETIMECURVE\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \n\t#endif\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\n\t\tsize*=vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge));\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n\t    size*=vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z));\n\t#endif\n\treturn size;\n}\n\n#ifdef RENDERMODE_MESH\nvec3 computeParticleSizeMesh(in vec3 size,in float normalizedAge)\n{\n\t#ifdef SIZEOVERLIFETIMECURVE\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \n\t#endif\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\n\t\tsize*=vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge));\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n\t    size*=vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z)\n\t\t,mix(getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ,normalizedAge),a_Random0.z));\n\t#endif\n\treturn size;\n}\n#endif\n\nfloat computeParticleRotationFloat(in float rotation,in float age,in float normalizedAge)\n{ \n\t#ifdef ROTATIONOVERLIFETIME\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\n\t\t#endif\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConstSeprarate.z*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConstSeprarate.z,u_ROLAngularVelocityConstMaxSeprarate.z,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\n\t\t#endif\n\t#endif\n\treturn rotation;\n}\n\n#if defined(RENDERMODE_MESH)&&(defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE))\nvec3 computeParticleRotationVec3(in vec3 rotation,in float age,in float normalizedAge)\n{ \n\t#ifdef ROTATIONOVERLIFETIME\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\n\t\t#endif\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tvec3 ageRot=u_ROLAngularVelocityConstSeprarate*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge));\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tvec3 ageRot=mix(u_ROLAngularVelocityConstSeprarate,u_ROLAngularVelocityConstMaxSeprarate,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,normalizedAge),a_Random0.w)\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,normalizedAge),a_Random0.w)\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\n\t\t#endif\n\t#endif\n\treturn rotation;\n}\n#endif\n\nvec2 computeParticleUV(in vec2 uv,in float normalizedAge)\n{ \n\t#ifdef TEXTURESHEETANIMATIONCURVE\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\n\t\tfloat frame=getFrameFromGradient(u_TSAGradientUVs,cycleNormalizedAge-floor(cycleNormalizedAge));\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\n\t\tfloat floorTotalULength=floor(totalULength);\n\t    uv.x+=totalULength-floorTotalULength;\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\n    #endif\n\t#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\n\t\tfloat uvNormalizedAge=cycleNormalizedAge-floor(cycleNormalizedAge);\n\t    float frame=floor(mix(getFrameFromGradient(u_TSAGradientUVs,uvNormalizedAge),getFrameFromGradient(u_TSAMaxGradientUVs,uvNormalizedAge),a_Random1.x));\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\n\t\tfloat floorTotalULength=floor(totalULength);\n\t    uv.x+=totalULength-floorTotalULength;\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\n    #endif\n\treturn uv;\n}\n\nvoid main()\n{\n\tfloat age = u_CurrentTime - a_DirectionTime.w;\n\tfloat normalizedAge = age/a_ShapePositionStartLifeTime.w;\n\tvec3 lifeVelocity;\n\tif(normalizedAge<1.0){ \n\tvec3 startVelocity=a_DirectionTime.xyz*a_StartSpeed;\n\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t\tlifeVelocity= computeParticleLifeVelocity(normalizedAge);//计算粒子生命周期速度\n\t#endif \n\tvec3 gravityVelocity=u_Gravity*age;\n\t\n\tvec4 worldRotation;\n\tif(u_SimulationSpace==0)\n\t\tworldRotation=a_SimulationWorldRotation;\n\telse\n\t\tworldRotation=u_WorldRotation;\n\t\n\tvec3 center=computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge,gravityVelocity,worldRotation);//计算粒子位置\n   \n   \n   #ifdef SPHERHBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        vec3 cameraUpVector =normalize(u_CameraUp);//TODO:是否外面归一化\n        vec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\n        vec3 upVector = normalize(cross(sideVector,u_CameraDirection));\n\t    corner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z,age,normalizedAge));\n\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,rotation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n\t\t\t\tfloat c = cos(rot);\n\t\t\t\tfloat s = sin(rot);\n\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\n\t\t\t\tcorner=rotation*corner;\n\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\n\t\t\t}\n\t\t#else\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,a_StartRotation0);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfloat c = cos(a_StartRotation0.x);\n\t\t\t\tfloat s = sin(a_StartRotation0.x);\n\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\n\t\t\t\tcorner=rotation*corner;\n\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\n\t\t\t}\n\t\t#endif\n   #endif\n   \n   #ifdef STRETCHEDBILLBOARD\n\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n\tvec3 velocity;\n\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t    if(u_VOLSpaceType==0)\n\t\t  velocity=rotationByQuaternions(u_SizeScale*(startVelocity+lifeVelocity),worldRotation)+gravityVelocity;\n\t    else\n\t\t  velocity=rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+lifeVelocity+gravityVelocity;\n    #else\n\t    velocity= rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+gravityVelocity;\n    #endif\t\n\t\tvec3 cameraUpVector = normalize(velocity);\n\t\tvec3 direction = normalize(center-u_CameraPos);\n        vec3 sideVector = normalize(cross(direction,normalize(velocity)));\n\t\t\n\t\tsideVector=u_SizeScale.xzy*sideVector;\n\t\tcameraUpVector=length(vec3(u_SizeScale.x,0.0,0.0))*cameraUpVector;\n\t\t\n\t    vec2 size=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n\t\t\n\t    const mat2 rotaionZHalfPI=mat2(0.0, -1.0, 1.0, 0.0);\n\t    corner=rotaionZHalfPI*corner;\n\t    corner.y=corner.y-abs(corner.y);\n\t\t\n\t    float speed=length(velocity);//TODO:\n\t    center +=sign(u_SizeScale.x)*(sign(u_StretchedBillboardLengthScale)*size.x*corner.x*sideVector+(speed*u_StretchedBillboardSpeedScale+size.y*u_StretchedBillboardLengthScale)*corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef HORIZONTALBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        const vec3 cameraUpVector=vec3(0.0,0.0,1.0);\n\t    const vec3 sideVector = vec3(-1.0,0.0,0.0);\n\t\t\n\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n        float c = cos(rot);\n        float s = sin(rot);\n        mat2 rotation= mat2(c, -s, s, c);\n\t    corner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\n\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n        center +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef VERTICALBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        const vec3 cameraUpVector =vec3(0.0,1.0,0.0);\n        vec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\n\t\t\n\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n        float c = cos(rot);\n        float s = sin(rot);\n        mat2 rotation= mat2(c, -s, s, c);\n\t    corner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\n\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n        center +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef RENDERMODE_MESH\n\t    vec3 size=computeParticleSizeMesh(a_StartSize,normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z, age,normalizedAge));\n\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,rotation),worldRotation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t#ifdef ROTATIONOVERLIFETIME\n\t\t\t\t\tfloat angle=computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),angle),worldRotation));//已验证\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t#ifdef SHAPE\n\t\t\t\t\t\t\tcenter+= u_SizeScale.xzy*(rotationByQuaternions(rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),angle),worldRotation));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\t\tcenter+=rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle);//已验证\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\t\tcenter+=rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle),worldRotation);//已验证\n\t\t\t\t\t\t#endif\n\t\t\t\t\t}\n\t\t\t\t#endif\n\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t\t\t\t//TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\n\t\t\t\t\tvec3 angle=computeParticleRotationVec3(vec3(0.0,0.0,-a_StartRotation0.x), age,normalizedAge);\n\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByEuler(u_SizeScale*a_MeshPosition*size,vec3(angle.x,angle.y,angle.z)),worldRotation));//已验证\n\t\t\t\t#endif\t\t\n\t\t\t}\n\t\t#else\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,a_StartRotation0),worldRotation);//已验证\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\n\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x);\n\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x),worldRotation));//已验证\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t#ifdef SHAPE\n\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\tcenter+= u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x);\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x),worldRotation);\t\n\t\t\t\t\t#else\n\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x);\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x),worldRotation);//已验证\n\t\t\t\t\t#endif\n\t\t\t\t}\n\t\t\t}\n\t\t#endif\n\t\tv_MeshColor=a_MeshColor;\n   #endif\n   \n    gl_Position=u_Projection*u_View*vec4(center,1.0);\n    v_Color = computeParticleColor(a_StartColor, normalizedAge);\n\t#ifdef DIFFUSEMAP\n\t\t#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\t\t\tv_TextureCoordinate =computeParticleUV(a_CornerTextureCoordinate.zw, normalizedAge);\n\t\t#endif\n\t\t#ifdef RENDERMODE_MESH\n\t\t\tv_TextureCoordinate =computeParticleUV(a_MeshTextureCoordinate, normalizedAge);\n\t\t#endif\n\t\t\n\t\t#ifdef TILINGOFFSET\n\t\t\tv_TextureCoordinate=vec2(v_TextureCoordinate.x,1.0-v_TextureCoordinate.y)*u_TilingOffset.xy+vec2(u_TilingOffset.z,-u_TilingOffset.w);//需要特殊处理\n\t\t\tv_TextureCoordinate=vec2(v_TextureCoordinate.x,1.0-v_TextureCoordinate.y);//需要特殊处理\n\t\t#endif\n\t#endif\n    v_Discard=0.0;\n\t  \n\t#ifdef FOG\n\t\tv_PositionWorld=center;\n\t#endif\n   }\n   else\n\t{\n\t\tv_Discard=1.0;\n\t}\n\tvec4 my_postion = remapGLPositionZ(gl_Position);\n    my_postion.y = sin(my_postion.z / 25.0) * 6.6 + my_postion.y;\n\tgl_Position=my_postion;\n}\n\n\n\t',
                    n = "#ifdef HIGHPRECISION\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\nvarying float v_Discard;\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\nuniform sampler2D u_texture;\nuniform vec4 u_Tintcolor;\n\n#ifdef RENDERMODE_MESH\n\tvarying vec4 v_MeshColor;\n#endif\n\n#ifdef FOG\n\tvarying vec3 v_PositionWorld;\n\tuniform vec3 u_CameraPos;\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\n\nvoid main()\n{\t\n\t#ifdef RENDERMODE_MESH\n\t\tgl_FragColor=v_MeshColor;\n\t#else\n\t\tgl_FragColor=vec4(1.0);\t\n\t#endif\n\t\t\n\t#ifdef DIFFUSEMAP\n\t\tif(v_Discard!=0.0)\n\t\t\tdiscard;\n\t\t#ifdef TINTCOLOR\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*u_Tintcolor*2.0*v_Color;\n\t\t#else\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*v_Color;\n\t\t#endif\n\t#else\n\t\t#ifdef TINTCOLOR\n\t\t\tgl_FragColor*=u_Tintcolor*2.0*v_Color;\n\t\t#else\n\t\t\tgl_FragColor*=v_Color;\n\t\t#endif\n\t#endif\n\t\n\t#ifdef FOG\n\t\tvec3 toEye=u_CameraPos-v_PositionWorld;\n\t\tfloat toEyeLength=length(toEye);\n\t\ttoEye/=toEyeLength;\n\t\t\n\t\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,vec3(0.0,0.0,0.0),lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n\t\t#endif\n\t#endif\n}",
                    o = Ve.add("PARTICLESHURIKEN"), s = new ot(i, r, yi.shaderDefines, si.shaderDefines),
                    o.addSubShader(s), s.addShaderPass(t, n, a), i = {
                        a_Position: 0
                    }, r = {
                        u_TintColor: 1,
                        u_Exposure: 1,
                        u_Rotation: 1,
                        u_CubeTexture: 1,
                        u_MvpMatrix: 3
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\nuniform float u_Rotation;\nvarying vec3 v_Texcoord;\n\n\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\n{\n\tfloat angle = degrees * 3.141593 / 180.0;\n\tfloat sina=sin(angle);\n\tfloat cosa=cos(angle);\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\n}\n\t\t\nvoid main()\n{\n\tvec4 position=rotateAroundYInDegrees(a_Position,u_Rotation);\n\tgl_Position = (u_MvpMatrix*position).xyww;\n\tv_Texcoord=vec3(-a_Position.x,a_Position.yz);//转换坐标系\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n',
                    n = "#ifdef HIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec3 v_Texcoord;\n\nuniform samplerCube u_CubeTexture;\nuniform float u_Exposure;\nuniform vec4 u_TintColor;\n\n\nvoid main()\n{\t\n\tvec3 color=textureCube(u_CubeTexture, v_Texcoord).rgb*u_TintColor.rgb*u_Exposure*2.0;\n\tgl_FragColor=vec4(color,1.0);\n}\n\n",
                    o = Ve.add("SkyBox"), s = new ot(i, r), o.addSubShader(s), s.addShaderPass(t, n),
                    i = {
                        a_Position: 0
                    }, r = {
                        u_SunSize: 1,
                        u_SunSizeConvergence: 1,
                        u_AtmosphereThickness: 1,
                        u_SkyTint: 1,
                        u_GroundTint: 1,
                        u_Exposure: 1,
                        u_MvpMatrix: 3,
                        "u_DirectionLight.Direction": 4,
                        "u_DirectionLight.Color": 4
                    }, t = "#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include \"Lighting.glsl\";\n\n#define OUTER_RADIUS 1.025\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\n#define MIE 0.0010             // Mie constant 米氏散射\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\n\nconst float SKY_GROUND_THRESHOLD = 0.02;\nconst float outerRadius = OUTER_RADIUS;\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\nconst float innerRadius = 1.0;\nconst float innerRadius2 = 1.0;\nconst float cameraHeight = 0.0001;\n\nconst float HDSundiskIntensityFactor = 15.0;\nconst float simpleSundiskIntensityFactor = 27.0;\n\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\nconst float kmESun = MIE * SUN_BRIGHTNESS;\nconst float km4PI = MIE * 4.0 * 3.14159265;\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\nconst float scaleDepth = 0.25;\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\n\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\n\nattribute vec4 a_Position;\n\nuniform mat4 u_MvpMatrix;\nuniform vec3 u_SkyTint;\nuniform vec3 u_GroundTint;\nuniform float u_Exposure;\nuniform float u_AtmosphereThickness;\nuniform DirectionLight u_DirectionLight;\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Rayleigh phase function\nfloat getRayleighPhase(vec3 light, vec3 ray) \n{\n\tfloat eyeCos = dot(light, ray);\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\n}\n\nfloat scaleAngle(float inCos)\n{\n\tfloat x = 1.0 - inCos;\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\n\nvoid main () {\n\tgl_Position = (u_MvpMatrix*a_Position).xyww;\n\n\tvec3 skyTintInGammaSpace = u_SkyTint;//支持非GAMMA空间后要调整\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\n\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\n\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\n\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n\tvec3 eyeRay = normalize(a_Position.xyz);\n\n\tfloat far = 0.0;\n\tvec3 cIn, cOut;\n\tif (eyeRay.y >= 0.0) {// Sky\n\t\t// Calculate the length of the \"atmosphere\"\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat height = innerRadius + cameraHeight;\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\tvec3 frontColor = vec3(0.0);\n\t\t//unrolling this manually to avoid some platform for loop slow\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n\t\tcIn = frontColor * (invWavelength * krESun);\n\t\tcOut = frontColor * kmESun;\n\t} else {// Ground\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\n\t\tvec3 pos = cameraPos + far * eyeRay;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\n\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, pos);\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\n\t\tfloat lightScale = scaleAngle(lightAngle);\n\t\tfloat cameraOffset = depth*cameraScale;\n\t\tfloat temp = lightScale + cameraScale;\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\t// Now loop through the sample rays\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\n\t\tvec3 attenuate;\n\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat scatter = depth*temp - cameraOffset;\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\n\t}\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tv_Vertex = -a_Position.xyz;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_RayDir = -eyeRay;\n\t#else\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\n\t#endif\n\n\t// if we want to calculate color in vprog:\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint*u_GroundTint * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_DirectionLight.Direction, -eyeRay));\n\n\t\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\n\tfloat lightColorIntensity = clamp(length(u_DirectionLight.Color), 0.25, 1.0);\n\n\t#ifdef SUN_HIGH_QUALITY \n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_DirectionLight.Color / lightColorIntensity;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_DirectionLight.Color / lightColorIntensity;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n",
                    n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\nconst float MIE_G = -0.990;\nconst float MIE_G2 = 0.9801;\nconst float SKY_GROUND_THRESHOLD = 0.02;\n\nuniform float u_SunSize;\nuniform float u_SunSizeConvergence;\nuniform DirectionLight u_DirectionLight;\n\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Mie phase function\nfloat getMiePhase(float eyeCos, float eyeCos2) {\n\tfloat temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\n\ttemp = pow(temp, pow(u_SunSize,0.65) * 10.0);\n\ttemp = max(temp,1.0e-4); // prevent division by zero, esp. in half precision\n\ttemp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\n\treturn temp;\n}\n\n// Calculates the sun shape\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray) {\n\t#ifdef SUN_HIGH_QUALITY\n\t\tfloat focusedEyeCos = pow(clamp(dot(lightPos, ray),0.0,1.0), u_SunSizeConvergence);\n\t\treturn getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\n\t#else //SUN_SIMPLE\n\t\tvec3 delta = lightPos - ray;\n\t\tfloat dist = length(delta);\n\t\tfloat spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\n\t\treturn spot * spot;\n\t#endif\n}\n\nvoid main() {\n\t// if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\n\t// if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\n\t// if y < 0 [eyeRay.y > 0] - sky\n\tvec3 col = vec3(0.0, 0.0, 0.0);\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tvec3 ray = normalize(v_Vertex);\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\n\t#elif defined(SUN_SIMPLE) \n\t\tvec3 ray = v_RayDir;\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\t\n\t#else\n\t\tfloat y = v_SkyGroundFactor;\n\t#endif\n\n\t// if we did precalculate color in vprog: just do lerp between them\n\tcol = mix(v_SkyColor, v_GroundColor, clamp(y,0.0,1.0));\n\n\t#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\t\tif (y < 0.0)\n\t\t\tcol += v_SunColor * calcSunAttenuation(-u_DirectionLight.Direction, -ray);\n\t#endif\n\n\tcol = sqrt(col);//linear space convert to gamma space\n\tgl_FragColor=vec4(col,1.0);\n}\n\n',
                    o = Ve.add("SkyBoxProcedural"), s = new ot(i, r, null, ii.shaderDefines), o.addSubShader(s),
                    s.addShaderPass(t, n), i = {
                        a_Position: 0,
                        a_Normal: 3,
                        a_Texcoord0: 2
                    }, r = {
                        u_MvpMatrix: 2,
                        u_WorldMat: 2,
                        u_CameraPos: 3,
                        u_LightmapScaleOffset: 2,
                        u_LightMap: 2,
                        u_SplatAlphaTexture: 1,
                        u_DiffuseTexture1: 1,
                        u_DiffuseTexture2: 1,
                        u_DiffuseTexture3: 1,
                        u_DiffuseTexture4: 1,
                        u_DiffuseTexture5: 1,
                        u_DiffuseScaleOffset1: 1,
                        u_DiffuseScaleOffset2: 1,
                        u_DiffuseScaleOffset3: 1,
                        u_DiffuseScaleOffset4: 1,
                        u_DiffuseScaleOffset5: 1,
                        u_FogStart: 4,
                        u_FogRange: 4,
                        u_FogColor: 4,
                        "u_DirectionLight.Direction": 4,
                        "u_DirectionLight.Color": 4,
                        "u_PointLight.Position": 4,
                        "u_PointLight.Range": 4,
                        "u_PointLight.Attenuation": 4,
                        "u_PointLight.Color": 4,
                        "u_SpotLight.Position": 4,
                        "u_SpotLight.Direction": 4,
                        "u_SpotLight.Range": 4,
                        "u_SpotLight.Spot": 4,
                        "u_SpotLight.Color": 4,
                        u_AmbientColor: 4,
                        u_shadowMap1: 4,
                        u_shadowMap2: 4,
                        u_shadowMap3: 4,
                        u_shadowPSSMDistance: 4,
                        u_lightShadowVP: 4,
                        u_shadowPCFoffset: 4
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\n\nvarying vec2 v_Texcoord0;\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(LIGHTMAP)\n\tattribute vec3 a_Normal;\n\tvarying vec3 v_Normal;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\n\tuniform mat4 u_WorldMat;\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef LIGHTMAP\n\tvarying vec2 v_LightMapUV;\n\tuniform vec4 u_LightmapScaleOffset;\n#endif\n\n#ifdef RECEIVESHADOW\n\tvarying float v_posViewZ;\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n#endif\n\nvoid main()\n{\n\tgl_Position = u_MvpMatrix * a_Position;\n  \n\tv_Texcoord0 = a_Texcoord0;\n  \n\t#ifdef LIGHTMAP\n\t\tv_LightMapUV = vec2(a_Texcoord0.x, 1.0 - a_Texcoord0.y) * u_LightmapScaleOffset.xy + u_LightmapScaleOffset.zw;\n\t\tv_LightMapUV.y = 1.0 - v_LightMapUV.y;\n\t#endif\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_Normal = a_Normal;\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\n\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}',
                    n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\n\tuniform vec3 u_CameraPos;\n\tvarying vec3 v_Normal;\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#include "ShadowHelper.glsl"\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\nvarying float v_posViewZ;\n\nuniform vec3 u_AmbientColor;\n\nuniform sampler2D u_SplatAlphaTexture;\n\nuniform sampler2D u_DiffuseTexture1;\nuniform sampler2D u_DiffuseTexture2;\nuniform sampler2D u_DiffuseTexture3;\nuniform sampler2D u_DiffuseTexture4;\nuniform sampler2D u_DiffuseTexture5;\n\nuniform vec4 u_DiffuseScaleOffset1;\nuniform vec4 u_DiffuseScaleOffset2;\nuniform vec4 u_DiffuseScaleOffset3;\nuniform vec4 u_DiffuseScaleOffset4;\nuniform vec4 u_DiffuseScaleOffset5;\n\nvarying vec2 v_Texcoord0;\n\n#ifdef LIGHTMAP\n\tuniform sampler2D u_LightMap;\n\tvarying vec2 v_LightMapUV;\n#endif\n\nvoid main()\n{\n\tvec4 splatAlpha = vec4(1.0);\n\t#ifdef ExtendTerrain_DETAIL_NUM1\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r;\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM2\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r + color2.xyz * (1.0 - splatAlpha.r);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM3\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * (1.0 - splatAlpha.r - splatAlpha.g);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM4\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM5\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\n\t\tvec4 color5 = texture2D(u_DiffuseTexture5, v_Texcoord0 * u_DiffuseScaleOffset5.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * splatAlpha.a + color5.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b - splatAlpha.a);\n\t#endif\n\t\tgl_FragColor.w = splatAlpha.a;\n\t\t\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n    vec3 normal = v_Normal;\n\tvec3 dif, spe;\n#endif\n\nvec3 diffuse = vec3(0.0);\nvec3 specular= vec3(0.0);\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\n\tvec3 toEye;\n\t#ifdef FOG\n\t\ttoEye=u_CameraPos-v_PositionWorld;\n\t\tfloat toEyeLength=length(toEye);\n\t\ttoEye/=toEyeLength;\n\t#else\n\t\ttoEye=normalize(u_CameraPos-v_PositionWorld);\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tLayaAirBlinnPhongDiectionLight(vec3(0.0), 1.0, normal, vec3(1.0), toEye,u_DirectionLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n \n#ifdef POINTLIGHT\n\tLayaAirBlinnPhongPointLight(v_PositionWorld, vec3(0.0), 1.0, normal, vec3(1.0), toEye, u_PointLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n\n#ifdef SPOTLIGHT\n\tLayaAirBlinnPhongSpotLight(v_PositionWorld, vec3(0.0), 1.0, normal, vec3(1.0), toEye, u_SpotLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n\nvec3 globalDiffuse = u_AmbientColor;\n#ifdef LIGHTMAP\n\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n#endif\n\n#ifdef RECEIVESHADOW\n\tfloat shadowValue = 1.0;\n\t#ifdef SHADOWMAP_PSSM3\n\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t#endif\n\t#ifdef SHADOWMAP_PSSM2\n\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t#endif \n\t#ifdef SHADOWMAP_PSSM1\n\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t#endif\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse) * shadowValue, gl_FragColor.a);\n#else\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse), gl_FragColor.a);\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t#ifdef RECEIVESHADOW\n\t\tgl_FragColor.rgb += specular * shadowValue;\n\t#else\n\t\tgl_FragColor.rgb += specular;\n\t#endif\n#endif\n\n#ifdef FOG\n\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\n\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n#endif\n}\n\n\n\n\n\n',
                    o = Ve.add("ExtendTerrain"), s = new ot(i, r, Jn.shaderDefines, ui.shaderDefines),
                    o.addSubShader(s), s.addShaderPass(t, n, a), i = {
                        a_Position: 0,
                        a_OffsetVector: 1,
                        a_Texcoord0X: 4,
                        a_Texcoord0Y: 3,
                        a_BirthTime: 2
                    }, r = {
                        u_MvpMatrix: 2,
                        u_View: 3,
                        u_Projection: 3,
                        u_TilingOffset: 1,
                        u_MainTexture: 1,
                        u_MainColor: 1,
                        u_CurTime: 2,
                        u_LifeTime: 2,
                        u_WidthCurve: 2,
                        u_WidthCurveKeyLength: 2,
                        u_GradientColorkey: 2,
                        u_GradientAlphakey: 2
                    }, a = {
                        s_Cull: 0,
                        s_Blend: 1,
                        s_BlendSrc: 2,
                        s_BlendDst: 3,
                        s_DepthTest: 12,
                        s_DepthWrite: 13
                    }, t = '#include "Lighting.glsl";\n\nattribute vec3 a_Position;\nattribute vec3 a_OffsetVector;\nattribute vec4 a_Color;\nattribute float a_Texcoord0X;\nattribute float a_Texcoord0Y;\nattribute float a_BirthTime;\n\nuniform mat4 u_View;\nuniform mat4 u_Projection;\n\nuniform vec4 u_TilingOffset;\n\nuniform float u_CurTime;\nuniform float u_LifeTime;\nuniform vec4 u_WidthCurve[10];\nuniform int u_WidthCurveKeyLength;\n\nuniform vec4 u_GradientColorkey[10];\nuniform vec2 u_GradientAlphakey[10];\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\n{\n\tfloat t2 = t * t;\n\tfloat t3 = t2 * t;\n\tfloat a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\tfloat b = t3 - 2.0 * t2 + t;\n\tfloat c = t3 - t2;\n\tfloat d = -2.0 * t3 + 3.0 * t2;\n\treturn a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\n}\n\nfloat getCurWidth(in float normalizeTime)\n{\n\tfloat width;\n\tif(normalizeTime == 0.0){\n\t\twidth=u_WidthCurve[0].w;\n\t}\n\telse if(normalizeTime >= 1.0){\n\t\twidth=u_WidthCurve[u_WidthCurveKeyLength - 1].w;\n\t}\n\telse{\n\t\tfor(int i = 0; i < 10; i ++ )\n\t\t{\n\t\t\tif(normalizeTime == u_WidthCurve[i].x){\n\t\t\t\twidth=u_WidthCurve[i].w;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tvec4 lastFrame = u_WidthCurve[i];\n\t\t\tvec4 nextFrame = u_WidthCurve[i + 1];\n\t\t\tif(normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\n\t\t\t{\n\t\t\t\tfloat duration = nextFrame.x - lastFrame.x;\n\t\t\t\tfloat t = (normalizeTime - lastFrame.x) / duration;\n\t\t\t\tfloat outTangent = lastFrame.z;\n\t\t\t\tfloat inTangent = nextFrame.y;\n\t\t\t\tfloat value1 = lastFrame.w;\n\t\t\t\tfloat value2 = nextFrame.w;\n\t\t\t\twidth=hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn width;\n}\t\n\nvec4 getColorFromGradientByBlend(in vec4 gradientColors[10], in vec2 gradientAlphas[10], in float normalizeTime)\n{\n\tvec4 color;\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec4 gradientColor = gradientColors[i];\n\t\tfloat colorKey = gradientColor.x;\n\t\tif(colorKey >= normalizeTime)\n\t\t{\n\t\t\tvec4 lastGradientColor = gradientColors[i-1];\n\t\t\tfloat lastColorKey = lastGradientColor.x;\n\t\t\tfloat age = (normalizeTime - lastColorKey) / (colorKey - lastColorKey);\n\t\t\tcolor.rgb = mix(gradientColors[i-1].yzw, gradientColor.yzw, age);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec2 gradientAlpha = gradientAlphas[i];\n\t\tfloat alphaKey = gradientAlpha.x;\n\t\tif(alphaKey >= normalizeTime)\n\t\t{\n\t\t\tvec2 lastGradientAlpha = gradientAlphas[i-1];\n\t\t\tfloat lastAlphaKey = lastGradientAlpha.x;\n\t\t\tfloat age = (normalizeTime - lastAlphaKey) / (alphaKey - lastAlphaKey);\n\t\t\tcolor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn color;\n}\n\nvec4 getColorFromGradientByFixed(in vec4 gradientColors[10], in vec2 gradientAlphas[10], in float normalizeTime)\n{\n\tvec4 color;\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec4 gradientColor = gradientColors[i];\n\t\tif(gradientColor.w >= normalizeTime)\n\t\t{\n\t\t\tcolor.rgb = gradientColor.xyz;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec2 gradientAlpha = gradientAlphas[i];\n\t\tif(gradientAlpha.y >= normalizeTime)\n\t\t{\n\t\t\tcolor.a = gradientAlpha.x;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn color;\n}\n\nvoid main()\n{\n\tfloat normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\n\t\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\n\t#else\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, a_Texcoord0Y);\n\t#endif\n\t\n\t#ifdef GRADIENTMODE_BLEND\n\t\tv_Color = getColorFromGradientByBlend(u_GradientColorkey, u_GradientAlphakey, normalizeTime);\n\t#else\n\t\tv_Color = getColorFromGradientByFixed(u_GradientColorkey, u_GradientAlphakey, normalizeTime);\n\t#endif\n\t\n\tgl_Position = u_Projection * u_View * vec4(a_Position + a_OffsetVector * getCurWidth(normalizeTime),1.0);\n\tvec4 my_postion = remapGLPositionZ(gl_Position);\n    my_postion.y = sin(my_postion.z / 25.0) * 6.6 + my_postion.y;\n\tgl_Position=my_postion;\n}\n',
                    n = "#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nuniform sampler2D u_MainTexture;\nuniform vec4 u_MainColor;\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nvoid main()\n{\t\n\tvec4 color = 2.0 * u_MainColor * v_Color;\n\t#ifdef MAINTEXTURE\n\t\tvec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\n\t\tcolor *= mainTextureColor;\n\t#endif\n\tgl_FragColor = color;\n}\n\n",
                    o = Ve.add("Trail"), s = new ot(i, r, Si.shaderDefines, ni.shaderDefines), o.addSubShader(s),
                    s.addShaderPass(t, n, a), i = {
                        a_Position: 0,
                        a_Normal: 3,
                        a_Tangent0: 4
                    }, r = {
                        u_MvpMatrix: 2,
                        u_WorldMat: 2,
                        u_CameraPos: 3,
                        u_Time: 4,
                        u_MainTexture: 1,
                        u_NormalTexture: 1,
                        u_HorizonColor: 1,
                        u_WaveScale: 1,
                        u_WaveSpeed: 1
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\n\nuniform mat4 u_MvpMatrix;\nuniform mat4 u_WorldMat;\nuniform vec3 u_CameraPos;\nuniform float u_WaveScale;\nuniform vec4 u_WaveSpeed;\nuniform float u_Time;\n\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec2 v_Texcoord0;\nvarying vec2 v_Texcoord1;\n\nvoid main()\n{\n\tvec4 positionWorld = u_WorldMat * a_Position;\n\tvec4 position = u_MvpMatrix * a_Position;\n\t\n\tvec4 temp = vec4(positionWorld.x, positionWorld.z, positionWorld.x, positionWorld.z) * u_WaveScale + u_WaveSpeed * u_WaveScale * u_Time;\n\t\n\tv_Texcoord0 = temp.xy * vec2(0.4, 0.45);\n\tv_Texcoord1 = temp.wz;\n\t\n\tmat3 worldMat = mat3(u_WorldMat);\n\tv_Normal = worldMat * a_Normal;\n\tv_Tangent = worldMat * a_Tangent0.xyz;\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\n\t\n\tv_ViewDir = u_CameraPos - positionWorld.xyz;\n\tgl_Position = position;\n\tgl_Position=remapGLPositionZ(gl_Position);\n}',
                    n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#ifdef MAINTEXTURE\n\tuniform sampler2D u_MainTexture;\n#endif\n\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n#endif\n\nuniform vec4 u_HorizonColor;\n\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec2 v_Texcoord0;\nvarying vec2 v_Texcoord1;\n\n#include "Lighting.glsl"\n\nvoid main()\n{\n\tvec4 bumpColor1 = texture2D(u_NormalTexture, v_Texcoord0);\n\tvec4 bumpColor2 = texture2D(u_NormalTexture, v_Texcoord1);\n\t\n\tvec3 normal1 = NormalSampleToWorldSpace1(bumpColor1, v_Tangent, v_Binormal, v_Normal);\n\tvec3 normal2 = NormalSampleToWorldSpace1(bumpColor2, v_Tangent, v_Binormal, v_Normal);\n\t\n\tvec3 normal = normalize((normal1 + normal2) * 0.5);\n\tvec3 viewDir = normalize(v_ViewDir);\n\tfloat fresnel = dot(viewDir, normal);\n\t\n\tvec4 waterColor = texture2D(u_MainTexture, vec2(fresnel, fresnel));\n\t\n\tvec4 color;\n\tcolor.rgb = mix(waterColor.rgb, u_HorizonColor.rgb, vec3(waterColor.a));\n\tcolor.a = u_HorizonColor.a;\n\t\n\tgl_FragColor = color;\n}\n\n',
                    o = Ve.add("WaterPrimary"), s = new ot(i, r, null, hi.shaderDefines), o.addSubShader(s),
                    s.addShaderPass(t, n), i = {
                        a_PositionTexcoord: 0
                    }, r = {
                        u_ScreenTexture: 1
                    }, t = '#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}',
                    n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nuniform sampler2D u_ScreenTexture;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_ScreenTexture, v_Texcoord0);\n}\n\n",
                    o = Ve.add("ScreenQuad"), s = new ot(i, r, null, null), o.addSubShader(s);
                var l = s.addShaderPass(t, n),
                    h = l.renderState;
                h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0, i = {
                        a_PositionTexcoord: 0
                    }, r = {
                        u_MainTex: 1,
                        u_BloomTex: 1,
                        u_AutoExposureTex: 1,
                        u_MainTex_TexelSize: 1,
                        u_SampleScale: 1,
                        u_Threshold: 1,
                        u_Params: 1
                    }, o = Ve.add("PostProcessBloom", i, r), s = new ot(null, null, null, null), o.addSubShader(s),
                    l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_AutoExposureTex;\nuniform vec4 u_MainTex_TexelSize;\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\nuniform vec4 u_Params; // x: clamp, yzw: unused\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter13();\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0,
                    s = new ot(null, null, null, null), o.addSubShader(s), l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_AutoExposureTex;\nuniform vec4 u_MainTex_TexelSize;\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\nuniform vec4 u_Params; // x: clamp, yzw: unused\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter4() {\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter4();\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0,
                    s = new ot(null, null, null, null), o.addSubShader(s), l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform vec4 u_MainTex_TexelSize;\n\nvoid fragDownsample13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = color;\n}\n\nvoid main() {\n\tfragDownsample13();\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0,
                    s = new ot(null, null, null, null), o.addSubShader(s), l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_BloomTex;\n\nuniform vec4 u_MainTex_TexelSize;\nuniform float u_SampleScale;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\n\treturn bloom + color;\n}\n\nvoid fragUpsampleTent() {\n\tmediump vec4 bloom = UpsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, u_SampleScale);\n\tgl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main() {\n\tfragUpsampleTent();\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0,
                    s = new ot(null, null, null, null), o.addSubShader(s), l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_BloomTex;\n\nuniform vec4 u_MainTex_TexelSize;\nuniform float u_SampleScale;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\n\treturn bloom + color;\n}\n\nvoid fragUpsampleBox() {\n\tmediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n\tgl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main() {\n\tfragUpsampleBox();\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0,
                    s = new ot(null, null, null, null), o.addSubShader(s), l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_AutoExposureTex;\nuniform vec4 u_MainTex_TexelSize;\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\nuniform vec4 u_Params; // x: clamp, yzw: unused\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter13();\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0,
                    i = {
                        a_PositionTexcoord: 0
                    }, r = {
                        u_MainTex: 1,
                        u_BloomTex: 1,
                        u_AutoExposureTex: 1,
                        u_Bloom_DirtTex: 1,
                        u_BloomTex_TexelSize: 1,
                        u_Bloom_Settings: 1,
                        u_Bloom_Color: 1
                    }, o = Ve.add("PostProcessComposite", i, r), s = new ot(null, null, null, Rt.shaderDefines),
                    o.addSubShader(s), l = s.addShaderPass("attribute vec4 a_Position;\nvarying vec2 v_Texcoord0;\n\nvec2 TransformTriangleVertexToUV(vec2 vertex)\n{\n    vec2 uv = (vertex + 1.0) * 0.5;\n    return uv;\n}\n\nvoid main() {\n\tgl_Position =vec4(a_Position.xy, 0.0, 1.0);\n\tv_Texcoord0=TransformTriangleVertexToUV(a_Position.xy);\n\tgl_Position=remapGLPositionZ(gl_Position);\n}", '#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_BloomTex;\n\nuniform sampler2D u_AutoExposureTex;\nuniform sampler2D u_Bloom_DirtTex;\nuniform vec4 u_BloomTex_TexelSize;\nuniform vec4 u_Bloom_DirtTileOffset; // xy: tiling, zw: offset\nuniform mediump vec3 u_Bloom_Settings;// x: sampleScale, y: intensity, z: dirt intensity\nuniform mediump vec3 u_Bloom_Color;\n\nvoid main() {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, v_Texcoord0).r;\n\tmediump vec4 color=vec4(0.0)\n\tcolor = texture2D(u_MainTex, v_Texcoord0);\n\t\n\tcolor = SRGBToLinear(color);\n\tcolor.rgb *= autoExposure;\n\t\n\t#if BLOOM || BLOOM_LOW\n\t{\n\t\t#if BLOOM\n\t\t\tmediump vec4 bloom = UpsampleTent(_BloomTex, uvDistorted, _BloomTex_TexelSize.xy, _Bloom_Settings.x);\n\t\t#else\n\t\t\tmediump vec4 bloom = UpsampleBox(_BloomTex, uvDistorted, _BloomTex_TexelSize.xy, _Bloom_Settings.x);\n\t\t#endif\n\n\t\t// UVs should be Distort(uv * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw)\n\t\t// but considering we use a cover-style scale on the dirt texture the difference\n\t\t// isn\'t massive so we chose to save a few ALUs here instead in case lens distortion\n\t\t// is active\n\t\tmediump vec4 dirt = mediump vec4(SAMPLE_TEXTURE2D(_Bloom_DirtTex, sampler_Bloom_DirtTex, uvDistorted * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw).rgb, 0.0);\n\n\t\t// Additive bloom (artist friendly)\n\t\tbloom *= _Bloom_Settings.y;\n\t\tdirt *= _Bloom_Settings.z;\n\t\tcolor += bloom * half4(_Bloom_Color, 1.0);\n\t\tcolor += dirt * bloom;\n\t}\n\t#endif\n\t\n\thalf4 output = color;\n\toutput = LinearToSRGB(output);\n\t//output.rgb = Dither(output.rgb, v_Texcoord0);//TODO:\n}'),
                    h = l.renderState, h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0;
            }, e._rangeAttenTex = null, e;
        }(),
        ke = function() {
            function e() {}
            return r(e, "laya.d3.utils.Utils3D"), e._convertToLayaVec3 = function(e, t, n) {
                    t.x = n ? -e.x() : e.x(), t.y = e.y(), t.z = e.z();
                }, e._convertToBulletVec3 = function(e, t, n) {
                    t.setValue(n ? -e.x : e.x, e.y, e.z);
                }, e._rotationTransformScaleSkinAnimation = function(t, n, i, r, a, o, s, l, h, u, c, _) {
                    var d = e._tempArray16_0,
                        f = e._tempArray16_1,
                        m = e._tempArray16_2,
                        p = r + r,
                        T = a + a,
                        E = o + o,
                        v = r * p,
                        g = a * p,
                        S = a * T,
                        y = o * p,
                        x = o * T,
                        D = o * E,
                        I = s * p,
                        R = s * T,
                        M = s * E;
                    d[15] = 1, d[0] = 1 - S - D, d[1] = g + M, d[2] = y - R, d[4] = g - M, d[5] = 1 - v - D,
                        d[6] = x + I, d[8] = y + R, d[9] = x - I, d[10] = 1 - v - S, f[15] = 1, f[0] = l,
                        f[5] = h, f[10] = u;
                    var A, C, L, O, N;
                    for (A = 0; 4 > A; A++) C = d[A], L = d[A + 4], O = d[A + 8], N = d[A + 12], m[A] = C,
                        m[A + 4] = L, m[A + 8] = O, m[A + 12] = C * t + L * n + O * i + N;
                    for (A = 0; 4 > A; A++) C = m[A], L = m[A + 4], O = m[A + 8], N = m[A + 12], c[A + _] = C * f[0] + L * f[1] + O * f[2] + N * f[3],
                        c[A + _ + 4] = C * f[4] + L * f[5] + O * f[6] + N * f[7], c[A + _ + 8] = C * f[8] + L * f[9] + O * f[10] + N * f[11],
                        c[A + _ + 12] = C * f[12] + L * f[13] + O * f[14] + N * f[15];
                }, e._createSceneByJsonForMaker = function(t, n, i) {
                    var r = e._createNodeByJsonForMaker(t, n, i);
                    return e._addComponentByJsonForMaker(t, n, i), r;
                }, e._createNodeByJsonForMaker = function(t, n, i) {
                    var r;
                    switch (t.type) {
                        case "Scene3D":
                            r = new Qn();
                            break;

                        case "Sprite3D":
                            r = new Fn();
                            break;

                        case "MeshSprite3D":
                            r = new Ei(), n && n.push(r);
                            break;

                        case "SkinnedMeshSprite3D":
                            r = new Di();
                            break;

                        case "ShuriKenParticle3D":
                            r = new yi();
                            break;

                        case "Terrain":
                            r = new ti();
                            break;

                        case "Camera":
                            r = new Mi();
                            break;

                        case "DirectionLight":
                            r = new gi();
                            break;

                        case "PointLight":
                            r = new Ii();
                            break;

                        case "SpotLight":
                            r = new vi();
                            break;

                        case "TrailSprite3D":
                            r = new Si();
                            break;

                        default:
                            var a = _.getClass(t.props.runtime);
                            r = new a();
                    }
                    var o = t.child;
                    if (o)
                        for (var s = 0, h = o.length; h > s; s++) {
                            var u = e._createNodeByJsonForMaker(o[s], n, i);
                            r.addChild(u);
                        }
                    var c = t.compId;
                    r.compId = c, r._parse(t.props, null), i && (i._idMap[c] = r), e._compIdToNode[c] = r;
                    var d = t.components;
                    if (d)
                        for (var f = 0, m = d.length; m > f; f++) {
                            var p = d[f];
                            if (a = l.window.Laya[p.type], !a) {
                                a = l.window;
                                var T = p.type.split(".");
                                T.forEach(function(e) {
                                    a = a[e];
                                });
                            }
                            if ("function" == typeof a) {
                                var E = new a();
                                i && (i._idMap[p.compId] = E, console.log(p.compId));
                            } else console.warn("Utils3D:Unkown component type.");
                        }
                    return r;
                }, e._addComponentByJsonForMaker = function(t, n, i) {
                    var r = t.compId,
                        a = e._compIdToNode[r],
                        o = t.child;
                    if (o)
                        for (var s = 0, h = o.length; h > s; s++) {
                            e._addComponentByJsonForMaker(o[s], n, i);
                        }
                    var u = t.components;
                    if (u)
                        for (var c = 0, _ = u.length; _ > c; c++) {
                            var d = u[c];
                            if (m = l.window.Laya[d.type], !m) {
                                var f = d.type.split("."),
                                    m = l.window;
                                f.forEach(function(e) {
                                    m = m[e];
                                });
                            }
                            if ("function" == typeof m) {
                                var p = i._idMap[d.compId];
                                a.addComponentIntance(p), p._parse(d);
                            } else console.warn("Utils3D:Unkown component type.");
                        }
                }, e._createSprite3DInstance = function(t, n, i) {
                    var r;
                    switch (t.type) {
                        case "Scene3D":
                            r = new Qn();
                            break;

                        case "Sprite3D":
                            r = new Fn();
                            break;

                        case "MeshSprite3D":
                            r = new Ei(), i && i.push(r);
                            break;

                        case "SkinnedMeshSprite3D":
                            r = new Di();
                            break;

                        case "ShuriKenParticle3D":
                            r = new yi();
                            break;

                        case "Terrain":
                            r = new ti();
                            break;

                        case "Camera":
                            r = new Mi();
                            break;

                        case "DirectionLight":
                            r = new gi();
                            break;

                        case "PointLight":
                            r = new Ii();
                            break;

                        case "SpotLight":
                            r = new vi();
                            break;

                        case "TrailSprite3D":
                            r = new Si();
                            break;

                        default:
                            throw new Error("Utils3D:unidentified class type in (.lh) file.");
                    }
                    var a = t.child;
                    if (a)
                        for (var o = 0, s = a.length; s > o; o++) {
                            var l = e._createSprite3DInstance(a[o], n, i);
                            r.addChild(l);
                        }
                    return n[t.instanceID] = r, r;
                }, e._createComponentInstance = function(t, n) {
                    var i = n[t.instanceID];
                    i._parse(t.props, n);
                    var r = t.child;
                    if (r)
                        for (var a = 0, o = r.length; o > a; a++) e._createComponentInstance(r[a], n);
                    var s = t.components;
                    if (s)
                        for (var h = 0, u = s.length; u > h; h++) {
                            var c = s[h],
                                _ = l.window.Laya[c.type];
                            if (!_) {
                                var d = c.type.split(".");
                                _ = l.window, d.forEach(function(e) {
                                    _ = _[e];
                                });
                            }
                            if ("function" == typeof _) {
                                var f = i.addComponent(_);
                                f._parse(c);
                            } else console.warn("Unkown component type.");
                        }
                }, e._createNodeByJson02 = function(t, n) {
                    var i = {},
                        r = e._createSprite3DInstance(t, i, n);
                    return e._createComponentInstance(t, i), r;
                }, e._computeBoneAndAnimationDatasByBindPoseMatrxix = function(e, t, n, i, r, a) {
                    var o, s, l = 0,
                        h = 0,
                        u = e.length;
                    for (o = 0; u > o; l += e[o].keyframeWidth, h += 16, o++) laya.d3.utils.Utils3D._rotationTransformScaleSkinAnimation(t[l + 0], t[l + 1], t[l + 2], t[l + 3], t[l + 4], t[l + 5], t[l + 6], t[l + 7], t[l + 8], t[l + 9], i, h),
                        0 != o && (s = 16 * e[o].parentIndex, laya.d3.utils.Utils3D.mulMatrixByArray(i, s, i, h, i, h));
                    var c = n.length;
                    for (o = 0; c > o; o++) laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(i, 16 * a[o], n[o], r, 16 * o);
                }, e._computeAnimationDatasByArrayAndMatrixFast = function(e, t, n, i) {
                    for (var r = 0, a = e.length; a > r; r++) laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(t, 16 * i[r], e[r], n, 16 * r);
                }, e._computeBoneAndAnimationDatasByBindPoseMatrxixOld = function(e, t, n, i, r) {
                    var a, o, s = 0,
                        l = 0,
                        h = e.length;
                    for (a = 0; h > a; s += e[a].keyframeWidth, l += 16, a++) laya.d3.utils.Utils3D._rotationTransformScaleSkinAnimation(t[s + 7], t[s + 8], t[s + 9], t[s + 3], t[s + 4], t[s + 5], t[s + 6], t[s + 0], t[s + 1], t[s + 2], i, l),
                        0 != a && (o = 16 * e[a].parentIndex, laya.d3.utils.Utils3D.mulMatrixByArray(i, o, i, l, i, l));
                    var u = n.length;
                    for (a = 0; u > a; a++) {
                        var c = 16 * a;
                        laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(i, c, n[a], r, c);
                    }
                }, e._computeAnimationDatasByArrayAndMatrixFastOld = function(e, t, n) {
                    for (var i = e.length, r = 0; i > r; r++) {
                        var a = 16 * r;
                        laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(t, a, e[r], n, a);
                    }
                }, e._computeRootAnimationData = function(e, t, n) {
                    for (var i = 0, r = 0, a = 0, o = e.length; o > i; r += e[i].keyframeWidth, a += 16,
                        i++) laya.d3.utils.Utils3D.createAffineTransformationArray(t[r + 0], t[r + 1], t[r + 2], t[r + 3], t[r + 4], t[r + 5], t[r + 6], t[r + 7], t[r + 8], t[r + 9], n, a);
                }, e.transformVector3ArrayByQuat = function(e, t, n, i, r) {
                    var a = e[t],
                        o = e[t + 1],
                        s = e[t + 2],
                        l = n.x,
                        h = n.y,
                        u = n.z,
                        c = n.w,
                        _ = c * a + h * s - u * o,
                        d = c * o + u * a - l * s,
                        f = c * s + l * o - h * a,
                        m = -l * a - h * o - u * s;
                    i[r] = _ * c + m * -l + d * -u - f * -h, i[r + 1] = d * c + m * -h + f * -l - _ * -u,
                        i[r + 2] = f * c + m * -u + _ * -h - d * -l;
                }, e.mulMatrixByArray = function(t, n, i, r, a, o) {
                    var s, l, h, u, c;
                    if (a === i) {
                        for (i = e._tempArray16_3, s = 0; 16 > s; ++s) i[s] = a[o + s];
                        r = 0;
                    }
                    for (s = 0; 4 > s; s++) l = t[n + s], h = t[n + s + 4], u = t[n + s + 8], c = t[n + s + 12],
                        a[o + s] = l * i[r + 0] + h * i[r + 1] + u * i[r + 2] + c * i[r + 3], a[o + s + 4] = l * i[r + 4] + h * i[r + 5] + u * i[r + 6] + c * i[r + 7],
                        a[o + s + 8] = l * i[r + 8] + h * i[r + 9] + u * i[r + 10] + c * i[r + 11], a[o + s + 12] = l * i[r + 12] + h * i[r + 13] + u * i[r + 14] + c * i[r + 15];
                }, e.mulMatrixByArrayFast = function(e, t, n, i, r, a) {
                    var o, s, l, h, u;
                    for (o = 0; 4 > o; o++) s = e[t + o], l = e[t + o + 4], h = e[t + o + 8], u = e[t + o + 12],
                        r[a + o] = s * n[i + 0] + l * n[i + 1] + h * n[i + 2] + u * n[i + 3], r[a + o + 4] = s * n[i + 4] + l * n[i + 5] + h * n[i + 6] + u * n[i + 7],
                        r[a + o + 8] = s * n[i + 8] + l * n[i + 9] + h * n[i + 10] + u * n[i + 11], r[a + o + 12] = s * n[i + 12] + l * n[i + 13] + h * n[i + 14] + u * n[i + 15];
                }, e.mulMatrixByArrayAndMatrixFast = function(e, t, n, i, r) {
                    var a, o, s, l, h, u = n.elements,
                        c = u[0],
                        _ = u[1],
                        d = u[2],
                        f = u[3],
                        m = u[4],
                        p = u[5],
                        T = u[6],
                        E = u[7],
                        v = u[8],
                        g = u[9],
                        S = u[10],
                        y = u[11],
                        x = u[12],
                        D = u[13],
                        I = u[14],
                        R = u[15],
                        M = t,
                        A = t + 4,
                        C = t + 8,
                        L = t + 12,
                        O = r,
                        N = r + 4,
                        V = r + 8,
                        P = r + 12;
                    for (a = 0; 4 > a; a++) o = e[M + a], s = e[A + a], l = e[C + a], h = e[L + a],
                        i[O + a] = o * c + s * _ + l * d + h * f, i[N + a] = o * m + s * p + l * T + h * E,
                        i[V + a] = o * v + s * g + l * S + h * y, i[P + a] = o * x + s * D + l * I + h * R;
                }, e.createAffineTransformationArray = function(e, t, n, i, r, a, o, s, l, h, u, c) {
                    var _ = i + i,
                        d = r + r,
                        f = a + a,
                        m = i * _,
                        p = i * d,
                        T = i * f,
                        E = r * d,
                        v = r * f,
                        g = a * f,
                        S = o * _,
                        y = o * d,
                        x = o * f;
                    u[c + 0] = (1 - (E + g)) * s, u[c + 1] = (p + x) * s, u[c + 2] = (T - y) * s, u[c + 3] = 0,
                        u[c + 4] = (p - x) * l, u[c + 5] = (1 - (m + g)) * l, u[c + 6] = (v + S) * l, u[c + 7] = 0,
                        u[c + 8] = (T + y) * h, u[c + 9] = (v - S) * h, u[c + 10] = (1 - (m + E)) * h, u[c + 11] = 0,
                        u[c + 12] = e, u[c + 13] = t, u[c + 14] = n, u[c + 15] = 1;
                }, e.transformVector3ArrayToVector3ArrayCoordinate = function(e, t, n, i, r) {
                    var a = e[t + 0],
                        o = e[t + 1],
                        s = e[t + 2],
                        l = n.elements,
                        h = a * l[3] + o * l[7] + s * l[11] + l[15];
                    i[r] = a * l[0] + o * l[4] + s * l[8] + l[12] / h, i[r + 1] = a * l[1] + o * l[5] + s * l[9] + l[13] / h,
                        i[r + 2] = a * l[2] + o * l[6] + s * l[10] + l[14] / h;
                }, e.transformLightingMapTexcoordArray = function(e, t, n, i, r) {
                    i[r + 0] = e[t + 0] * n.x + n.z, i[r + 1] = 1 - ((1 - e[t + 1]) * n.y + n.w);
                }, e.getURLVerion = function(e) {
                    var t = e.indexOf("?");
                    return t >= 0 ? e.substr(t) : null;
                }, e._createAffineTransformationArray = function(e, t, n, i) {
                    var r = t.x,
                        a = t.y,
                        o = t.z,
                        s = t.w,
                        l = r + r,
                        h = a + a,
                        u = o + o,
                        c = r * l,
                        _ = r * h,
                        d = r * u,
                        f = a * h,
                        m = a * u,
                        p = o * u,
                        T = s * l,
                        E = s * h,
                        v = s * u,
                        g = n.x,
                        S = n.y,
                        y = n.z;
                    i[0] = (1 - (f + p)) * g, i[1] = (_ + v) * g, i[2] = (d - E) * g, i[3] = 0, i[4] = (_ - v) * S,
                        i[5] = (1 - (c + p)) * S, i[6] = (m + T) * S, i[7] = 0, i[8] = (d + E) * y, i[9] = (m - T) * y,
                        i[10] = (1 - (c + f)) * y, i[11] = 0, i[12] = e.x, i[13] = e.y, i[14] = e.z, i[15] = 1;
                }, e._mulMatrixArray = function(e, t, n, i) {
                    var r, a, o, s, l, h = t.elements,
                        u = h[0],
                        c = h[1],
                        _ = h[2],
                        d = h[3],
                        f = h[4],
                        m = h[5],
                        p = h[6],
                        T = h[7],
                        E = h[8],
                        v = h[9],
                        g = h[10],
                        S = h[11],
                        y = h[12],
                        x = h[13],
                        D = h[14],
                        I = h[15],
                        R = i,
                        M = i + 4,
                        A = i + 8,
                        C = i + 12;
                    for (r = 0; 4 > r; r++) a = e[r], o = e[r + 4], s = e[r + 8], l = e[r + 12], n[R + r] = a * u + o * c + s * _ + l * d,
                        n[M + r] = a * f + o * m + s * p + l * T, n[A + r] = a * E + o * v + s * g + l * S,
                        n[C + r] = a * y + o * x + s * D + l * I;
                }, e.arcTanAngle = function(e, t) {
                    return 0 == e ? 1 == t ? Math.PI / 2 : -Math.PI / 2 : e > 0 ? Math.atan(t / e) : 0 > e ? t > 0 ? Math.atan(t / e) + Math.PI : Math.atan(t / e) - Math.PI : 0;
                }, e.angleTo = function(t, n, i) {
                    Te.subtract(n, t, he.TEMPVector30), Te.normalize(he.TEMPVector30, he.TEMPVector30),
                        i.x = Math.asin(he.TEMPVector30.y), i.y = e.arcTanAngle(-he.TEMPVector30.z, -he.TEMPVector30.x);
                }, e.transformQuat = function(e, t, n) {
                    var i = t,
                        r = e.x,
                        a = e.y,
                        o = e.z,
                        s = i[0],
                        l = i[1],
                        h = i[2],
                        u = i[3],
                        c = u * r + l * o - h * a,
                        _ = u * a + h * r - s * o,
                        d = u * o + s * a - l * r,
                        f = -s * r - l * a - h * o;
                    n.x = c * u + f * -s + _ * -h - d * -l, n.y = _ * u + f * -l + d * -s - c * -h,
                        n.z = d * u + f * -h + c * -l - _ * -s;
                }, e.quaternionWeight = function(e, t, n) {
                    n.x = e.x * t, n.y = e.y * t, n.z = e.z * t, n.w = e.w;
                }, e.quaternionConjugate = function(e, t) {
                    t.x = -e.x, t.y = -e.y, t.z = -e.z, t.w = e.w;
                }, e.scaleWeight = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z;
                    n.x = i > 0 ? Math.pow(Math.abs(i), t) : -Math.pow(Math.abs(i), t), n.y = r > 0 ? Math.pow(Math.abs(r), t) : -Math.pow(Math.abs(r), t),
                        n.z = a > 0 ? Math.pow(Math.abs(a), t) : -Math.pow(Math.abs(a), t);
                }, e.scaleBlend = function(t, n, i, r) {
                    var a = e._tempVector3_0,
                        o = e._tempVector3_1;
                    e.scaleWeight(t, 1 - i, a), e.scaleWeight(n, i, o);
                    var s = i > .5 ? n : t;
                    r.x = s.x > 0 ? Math.abs(a.x * o.x) : -Math.abs(a.x * o.x), r.y = s.y > 0 ? Math.abs(a.y * o.y) : -Math.abs(a.y * o.y),
                        r.z = s.z > 0 ? Math.abs(a.z * o.z) : -Math.abs(a.z * o.z);
                }, e.gammaToLinearSpace = function(e) {
                    return .04045 >= e ? e / 12.92 : 1 > e ? Math.pow((e + .055) / 1.055, 2.4) : Math.pow(e, 2.4);
                }, e.linearToGammaSpace = function(e) {
                    return 0 >= e ? 0 : .0031308 >= e ? 12.92 * e : 1 >= e ? 1.055 * Math.pow(e, .41666) - .055 : Math.pow(e, .41666);
                }, e.matrix4x4MultiplyFFF = function(e, t, n) {
                    var i, r, a, o, s;
                    if (n === t)
                        for (t = new Float32Array(16), i = 0; 16 > i; ++i) t[i] = n[i];
                    var l = t[0],
                        h = t[1],
                        u = t[2],
                        c = t[3],
                        _ = t[4],
                        d = t[5],
                        f = t[6],
                        m = t[7],
                        p = t[8],
                        T = t[9],
                        E = t[10],
                        v = t[11],
                        g = t[12],
                        S = t[13],
                        y = t[14],
                        x = t[15];
                    for (i = 0; 4 > i; i++) r = e[i], a = e[i + 4], o = e[i + 8], s = e[i + 12], n[i] = r * l + a * h + o * u + s * c,
                        n[i + 4] = r * _ + a * d + o * f + s * m, n[i + 8] = r * p + a * T + o * E + s * v,
                        n[i + 12] = r * g + a * S + o * y + s * x;
                }, e.matrix4x4MultiplyFFFForNative = function(e, t, n) {
                    v.instance.matrix4x4Multiply(e, t, n);
                }, e.matrix4x4MultiplyMFM = function(t, n, i) {
                    e.matrix4x4MultiplyFFF(t.elements, n, i.elements);
                }, e._buildTexture2D = function(e, t, n, i, r) {
                    void 0 === r && (r = !1);
                    var a = new w(e, t, n, r, !0);
                    return a.anisoLevel = 1, a.filterMode = 0, Ne._generateTexture2D(a, e, t, i), a;
                }, e._drawBound = function(t, n, i) {
                    t.lineCount + 12 > t.maxLineCount && (t.maxLineCount += 12);
                    var r = e._tempVector3_0,
                        a = e._tempVector3_1,
                        o = n.min,
                        s = n.max;
                    r.setValue(o.x, o.y, o.z), a.setValue(s.x, o.y, o.z), t.addLine(r, a, i, i), r.setValue(o.x, o.y, o.z),
                        a.setValue(o.x, o.y, s.z), t.addLine(r, a, i, i), r.setValue(s.x, o.y, o.z), a.setValue(s.x, o.y, s.z),
                        t.addLine(r, a, i, i), r.setValue(o.x, o.y, s.z), a.setValue(s.x, o.y, s.z), t.addLine(r, a, i, i),
                        r.setValue(o.x, o.y, o.z), a.setValue(o.x, s.y, o.z), t.addLine(r, a, i, i), r.setValue(o.x, o.y, s.z),
                        a.setValue(o.x, s.y, s.z), t.addLine(r, a, i, i), r.setValue(s.x, o.y, o.z), a.setValue(s.x, s.y, o.z),
                        t.addLine(r, a, i, i), r.setValue(s.x, o.y, s.z), a.setValue(s.x, s.y, s.z), t.addLine(r, a, i, i),
                        r.setValue(o.x, s.y, o.z), a.setValue(s.x, s.y, o.z), t.addLine(r, a, i, i), r.setValue(o.x, s.y, o.z),
                        a.setValue(o.x, s.y, s.z), t.addLine(r, a, i, i), r.setValue(s.x, s.y, o.z), a.setValue(s.x, s.y, s.z),
                        t.addLine(r, a, i, i), r.setValue(o.x, s.y, s.z), a.setValue(s.x, s.y, s.z), t.addLine(r, a, i, i);
                }, e._getHierarchyPath = function(e, t, n) {
                    n.length = 0;
                    for (var i = t; i !== e;) {
                        var r = i._parent;
                        if (!r) return null;
                        n.push(r.getChildIndex(i)), i = r;
                    }
                    return n;
                }, e._getNodeByHierarchyPath = function(e, t) {
                    for (var n = e, i = t.length - 1; i >= 0; i--) n = n.getChildAt(t[i]);
                    return n;
                }, e._createNodeByJson = function(t, n) {
                    var i;
                    switch (t.type) {
                        case "Scene3D":
                            i = new Qn();
                            break;

                        case "Sprite3D":
                            i = new Fn();
                            break;

                        case "MeshSprite3D":
                            i = new Ei(), n && n.push(i);
                            break;

                        case "SkinnedMeshSprite3D":
                            i = new Di();
                            break;

                        case "ShuriKenParticle3D":
                            i = new yi();
                            break;

                        case "Terrain":
                            i = new ti();
                            break;

                        case "Camera":
                            i = new Mi();
                            break;

                        case "DirectionLight":
                            i = new gi();
                            break;

                        case "PointLight":
                            i = new Ii();
                            break;

                        case "SpotLight":
                            i = new vi();
                            break;

                        case "TrailSprite3D":
                            i = new Si();
                            break;

                        default:
                            throw new Error("Utils3D:unidentified class type in (.lh) file.");
                    }
                    var r = t.child;
                    if (r)
                        for (var a = 0, o = r.length; o > a; a++) {
                            var s = e._createNodeByJson(r[a], n);
                            i.addChild(s);
                        }
                    var h = t.components;
                    if (h)
                        for (var u = 0, c = h.length; c > u; u++) {
                            var _ = h[u];
                            if (f = l.window.Laya[_.type], !f) {
                                var d = _.type.split("."),
                                    f = l.window;
                                d.forEach(function(e) {
                                    f = f[e];
                                });
                            }
                            if ("function" == typeof f) {
                                var m = i.addComponent(f);
                                m._parse(_);
                            } else console.warn("Unkown component type.");
                        }
                    return i._parse(t.props, null), i;
                }, e._tempArray16_0 = new Float32Array(16), e._tempArray16_1 = new Float32Array(16),
                e._tempArray16_2 = new Float32Array(16), e._tempArray16_3 = new Float32Array(16),
                i(e, ["_tempVector3_0", function() {
                    return this._tempVector3_0 = new Te();
                }, "_tempVector3_1", function() {
                    return this._tempVector3_1 = new Te();
                }, "_tempVector3_2", function() {
                    return this._tempVector3_2 = new Te();
                }, "_tempColor0", function() {
                    return this._tempColor0 = new xe();
                }, "_compIdToNode", function() {
                    return this._compIdToNode = new Object();
                }]), e;
        }(),
        Xe = function() {
            function e() {
                this._currentLength = 0, this._elements = null, this._elements = new Float32Array(8);
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientDataNumber");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.add = function(e, t) {
                this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("GradientDataNumber warning:the forth key is  be force set to 1.")),
                    this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t) : console.log("GradientDataNumber warning:data count must lessEqual than 4");
            }, t.getKeyByIndex = function(e) {
                return this._elements[2 * e];
            }, t.getValueByIndex = function(e) {
                return this._elements[2 * e + 1];
            }, t.getAverageValue = function() {
                for (var e = 0, t = 0, n = this._currentLength - 2; n > t; t += 2) {
                    var i = this._elements[t + 1];
                    i += this._elements[t + 3], i *= this._elements[t + 2] - this._elements[t];
                }
                return e / 2;
            }, t.cloneTo = function(e) {
                var t = e;
                t._currentLength = this._currentLength;
                var n = t._elements;
                n.length = this._elements.length;
                for (var i = 0, r = this._elements.length; r > i; i++) n[i] = this._elements[i];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradientCount", function() {
                return this._currentLength / 2;
            }), e;
        }(),
        We = function() {
            function e() {}
            r(e, "laya.d3.core.pixelLine.PixelLineVertex");
            var t = e.prototype;
            return a(0, t, "vertexDeclaration", function() {
                return e._vertexDeclaration;
            }), a(1, e, "vertexDeclaration", function() {
                return e._vertexDeclaration;
            }), i(e, ["_vertexDeclaration", function() {
                return this._vertexDeclaration = new ft(28, [new ze(0, "vector3", 0), new ze(12, "vector4", 1)]);
            }]), e;
        }(),
        Ye = function() {
            function e() {
                this._hitResultsPoolIndex = 0, this._contactPonintsPoolIndex = 0, this._collisions = {},
                    this._hitResultsPool = [], this._contactPointsPool = [], this._collisionsPool = [];
            }
            r(e, "laya.d3.physics.CollisionTool");
            var t = e.prototype;
            return t.getHitResult = function() {
                var e = this._hitResultsPool[this._hitResultsPoolIndex++];
                return e || (e = new Tt(), this._hitResultsPool.push(e)), e;
            }, t.recoverAllHitResultsPool = function() {
                this._hitResultsPoolIndex = 0;
            }, t.getContactPoints = function() {
                var e = this._contactPointsPool[this._contactPonintsPoolIndex++];
                return e || (e = new K(), this._contactPointsPool.push(e)), e;
            }, t.recoverAllContactPointsPool = function() {
                this._contactPonintsPoolIndex = 0;
            }, t.getCollision = function(e, t) {
                var n, i = e.id,
                    r = t.id,
                    a = this._collisions[i];
                return a && (n = a[r]), n || (a || (a = {}, this._collisions[i] = a), n = 0 === this._collisionsPool.length ? new dt() : this._collisionsPool.pop(),
                    n._colliderA = e, n._colliderB = t, a[r] = n), n;
            }, t.recoverCollision = function(e) {
                var t = e._colliderA.id,
                    n = e._colliderB.id;
                this._collisions[t][n] = null, this._collisionsPool.push(e);
            }, t.garbageCollection = function() {
                this._hitResultsPoolIndex = 0, this._hitResultsPool.length = 0, this._contactPonintsPoolIndex = 0,
                    this._contactPointsPool.length = 0, this._collisionsPool.length = 0;
                for (var e in this._collisionsPool) {
                    var t = this._collisionsPool[e],
                        n = !0;
                    for (var i in t) t[i] ? n = !1 : delete t[i];
                    n && delete this._collisionsPool[e];
                }
            }, e;
        }(),
        Ze = function() {
            function e() {
                this._scene = null, this._eventList = [], this._multiTouchEnabled = !0, this._mouseTouch = new rt(),
                    this._touchPool = [], this._touches = new un();
            }
            r(e, "laya.d3.Input3D");
            var t = e.prototype;
            return t.__init__ = function(e, t) {
                this._scene = t;
                var n = this._eventList;
                e.oncontextmenu = function(e) {
                    return !1;
                }, e.addEventListener("mousedown", function(e) {
                    e.preventDefault(), n.push(e);
                }), e.addEventListener("mouseup", function(e) {
                    e.preventDefault(), n.push(e);
                }, !0), e.addEventListener("mousemove", function(e) {
                    e.preventDefault(), n.push(e);
                }, !0), e.addEventListener("touchstart", function(e) {
                    e.preventDefault(), n.push(e);
                }), e.addEventListener("touchend", function(e) {
                    e.preventDefault(), n.push(e);
                }, !0), e.addEventListener("touchmove", function(e) {
                    e.preventDefault(), n.push(e);
                }, !0), e.addEventListener("touchcancel", function(e) {
                    n.push(e);
                }, !0);
            }, t.touchCount = function() {
                return this._touches.length;
            }, t._getTouch = function(e) {
                var t = this._touchPool[e];
                return t || (t = new _t(), this._touchPool[e] = t, t._identifier = e), t;
            }, t._mouseTouchDown = function() {
                var e = this._mouseTouch,
                    t = e.sprite;
                if (e._pressedSprite = t, e._pressedLoopCount = N.loopCount, t) {
                    var n = t._scripts;
                    if (n)
                        for (var i = 0, r = n.length; r > i; i++) n[i].onMouseDown();
                }
            }, t._mouseTouchUp = function() {
                var e = 0,
                    t = 0,
                    n = this._mouseTouch,
                    i = n._pressedSprite;
                n._pressedSprite = null, n._pressedLoopCount = -1;
                var r = n.sprite;
                if (r && r === i) {
                    var a = r._scripts;
                    if (a)
                        for (e = 0, t = a.length; t > e; e++) a[e].onMouseClick();
                }
                if (i) {
                    var o = i._scripts;
                    if (o)
                        for (e = 0, t = o.length; t > e; e++) o[e].onMouseUp();
                }
            }, t._mouseTouchRayCast = function(t) {
                var n = e._tempHitResult0,
                    i = e._tempVector20,
                    r = e._tempRay0;
                n.succeeded = !1;
                var a = this._mouseTouch.mousePositionX,
                    o = this._mouseTouch.mousePositionY;
                i.x = a, i.y = o;
                for (var s = t.length - 1; s >= 0; s--) {
                    var l = t[s],
                        h = l.viewport;
                    if (i.x >= h.x && i.y >= h.y && i.x <= h.width && i.y <= h.height) {
                        l.viewportPointToRay(i, r);
                        var u = this._scene._physicsSimulation.rayCast(r, n);
                        if (u || 0 === l.clearFlag || 1 === l.clearFlag) break;
                    }
                }
                var c = this._mouseTouch,
                    _ = c.sprite;
                if (n.succeeded) {
                    var d = n.collider.owner;
                    c.sprite = d;
                    var f = d._scripts;
                    if (_ !== d && f)
                        for (var m = 0, p = f.length; p > m; m++) f[m].onMouseEnter();
                } else c.sprite = null;
                if (_ && _ !== d) {
                    var T = _._scripts;
                    if (T)
                        for (m = 0, p = T.length; p > m; m++) T[m].onMouseOut();
                }
            }, t._changeTouches = function(t, i) {
                for (var r = 0, a = 0, o = this._touches.length, s = 0, l = t.length; l > s; s++) {
                    var h = t[s],
                        u = h.identifier;
                    if (this._multiTouchEnabled || 0 === u) {
                        var c = this._getTouch(u),
                            _ = c._position,
                            d = e._tempPoint;
                        d.setTo(h.pageX, h.pageY), n.stage._canvasTransform.invertTransformPoint(d);
                        var f = d.x,
                            m = d.y;
                        switch (i) {
                            case 0:
                                this._touches.add(c), r += f, a += m;
                                break;

                            case 1:
                                this._touches.remove(c), r -= f, a -= m;
                                break;

                            case 2:
                                r = f - _.x, a = m - _.y;
                        }
                        _.x = f, _.y = m;
                    }
                }
                var p = this._touches.length;
                0 === p ? (this._mouseTouch.mousePositionX = 0, this._mouseTouch.mousePositionY = 0) : (this._mouseTouch.mousePositionX = (this._mouseTouch.mousePositionX * o + r) / p,
                    this._mouseTouch.mousePositionY = (this._mouseTouch.mousePositionY * o + a) / p);
            }, t._update = function() {
                var t = 0,
                    i = 0,
                    r = 0,
                    a = 0;
                i = this._eventList.length;
                var o = this._scene._cameraPool;
                if (i > 0) {
                    for (t = 0; i > t; t++) {
                        var s = this._eventList[t];
                        switch (s.type) {
                            case "mousedown":
                                this._mouseTouchDown();
                                break;

                            case "mouseup":
                                this._mouseTouchUp();
                                break;

                            case "mousemove":
                                var l = e._tempPoint;
                                l.setTo(s.pageX, s.pageY), n.stage._canvasTransform.invertTransformPoint(l), this._mouseTouch.mousePositionX = l.x,
                                    this._mouseTouch.mousePositionY = l.y, this._mouseTouchRayCast(o);
                                break;

                            case "touchstart":
                                var h = this._touches.length;
                                this._changeTouches(s.changedTouches, 0), this._mouseTouchRayCast(o), 0 === h && this._mouseTouchDown();
                                break;

                            case "touchend":
                            case "touchcancel":
                                this._changeTouches(s.changedTouches, 1), 0 === this._touches.length && this._mouseTouchUp();
                                break;

                            case "touchmove":
                                this._changeTouches(s.changedTouches, 2), this._mouseTouchRayCast(o);
                                break;

                            default:
                                throw "Input3D:unkonwn event type.";
                        }
                    }
                    this._eventList.length = 0;
                }
                var u = this._mouseTouch,
                    c = u._pressedSprite;
                if (c && N.loopCount > u._pressedLoopCount) {
                    var _ = c._scripts;
                    if (_)
                        for (r = 0, a = _.length; a > r; r++) _[r].onMouseDrag();
                }
                var d = u.sprite;
                if (d) {
                    var f = d._scripts;
                    if (f)
                        for (r = 0, a = f.length; a > r; r++) f[r].onMouseOver();
                }
            }, t.getTouch = function(e) {
                return e < this._touches.length ? this._touches.elements[e] : null;
            }, a(0, t, "multiTouchEnabled", function() {
                return this._multiTouchEnabled;
            }, function(e) {
                this._multiTouchEnabled = e;
            }), i(e, ["_tempPoint", function() {
                return this._tempPoint = new I();
            }, "_tempVector20", function() {
                return this._tempVector20 = new Ee();
            }, "_tempRay0", function() {
                return this._tempRay0 = new j(new Te(), new Te());
            }, "_tempHitResult0", function() {
                return this._tempHitResult0 = new Tt();
            }]), e;
        }(),
        je = function() {
            function e() {}
            return r(e, "laya.d3.core.particleShuriKen.ShurikenParticleData"), e._getStartLifetimeFromGradient = function(e, t) {
                for (var n = 1, i = e.gradientCount; i > n; n++) {
                    var r = e.getKeyByIndex(n);
                    if (r >= t) {
                        var a = e.getKeyByIndex(n - 1),
                            o = (t - a) / (r - a);
                        return x.lerp(e.getValueByIndex(n - 1), e.getValueByIndex(n), o);
                    }
                }
                throw new Error("ShurikenParticleData: can't get value foam startLifeTimeGradient.");
            }, e._randomInvertRoationArray = function(e, t, n, i, r) {
                var a = NaN;
                i ? (i.seed = r[6], a = i.getFloat(), r[6] = i.seed) : a = Math.random(), n > a ? (t.x = -e.x,
                    t.y = -e.y, t.z = -e.z) : (t.x = e.x, t.y = e.y, t.z = e.z);
            }, e._randomInvertRoation = function(e, t, n, i) {
                var r = NaN;
                return n ? (n.seed = i[6], r = n.getFloat(), i[6] = n.seed) : r = Math.random(),
                    t > r && (e = -e), e;
            }, e.create = function(t, n, i) {
                var r = t.autoRandomSeed,
                    a = t._rand,
                    o = t._randomSeeds;
                switch (t.startColorType) {
                    case 0:
                        var s = t.startColorConstant;
                        e.startColor.x = s.x, e.startColor.y = s.y, e.startColor.z = s.z, e.startColor.w = s.w;
                        break;

                    case 2:
                        r ? me.lerp(t.startColorConstantMin, t.startColorConstantMax, Math.random(), e.startColor) : (a.seed = o[3],
                            me.lerp(t.startColorConstantMin, t.startColorConstantMax, a.getFloat(), e.startColor),
                            o[3] = a.seed);
                }
                var l = t.colorOverLifetime;
                if (l && l.enbale) {
                    var h = l.color;
                    switch (h.type) {
                        case 0:
                            e.startColor.x = e.startColor.x * h.constant.x, e.startColor.y = e.startColor.y * h.constant.y,
                                e.startColor.z = e.startColor.z * h.constant.z, e.startColor.w = e.startColor.w * h.constant.w;
                            break;

                        case 2:
                            var u = NaN;
                            r ? u = Math.random() : (a.seed = o[10], u = a.getFloat(), o[10] = a.seed);
                            var c = h.constantMin,
                                _ = h.constantMax;
                            e.startColor.x = e.startColor.x * x.lerp(c.x, _.x, u), e.startColor.y = e.startColor.y * x.lerp(c.y, _.y, u),
                                e.startColor.z = e.startColor.z * x.lerp(c.z, _.z, u), e.startColor.w = e.startColor.w * x.lerp(c.w, _.w, u);
                    }
                }
                var d = e.startSize;
                switch (t.startSizeType) {
                    case 0:
                        if (t.threeDStartSize) {
                            var f = t.startSizeConstantSeparate;
                            d[0] = f.x, d[1] = f.y, d[2] = f.z;
                        } else d[0] = d[1] = d[2] = t.startSizeConstant;
                        break;

                    case 2:
                        if (t.threeDStartSize) {
                            var m = t.startSizeConstantMinSeparate,
                                p = t.startSizeConstantMaxSeparate;
                            r ? (d[0] = x.lerp(m.x, p.x, Math.random()), d[1] = x.lerp(m.y, p.y, Math.random()),
                                d[2] = x.lerp(m.z, p.z, Math.random())) : (a.seed = o[4], d[0] = x.lerp(m.x, p.x, a.getFloat()),
                                d[1] = x.lerp(m.y, p.y, a.getFloat()), d[2] = x.lerp(m.z, p.z, a.getFloat()), o[4] = a.seed);
                        } else r ? d[0] = d[1] = d[2] = x.lerp(t.startSizeConstantMin, t.startSizeConstantMax, Math.random()) : (a.seed = o[4],
                            d[0] = d[1] = d[2] = x.lerp(t.startSizeConstantMin, t.startSizeConstantMax, a.getFloat()),
                            o[4] = a.seed);
                }
                var T = t.sizeOverLifetime;
                if (T && T.enbale && 1 === T.size.type) {
                    var E = T.size;
                    if (E.separateAxes) r ? (d[0] = d[0] * x.lerp(E.constantMinSeparate.x, E.constantMaxSeparate.x, Math.random()),
                        d[1] = d[1] * x.lerp(E.constantMinSeparate.y, E.constantMaxSeparate.y, Math.random()),
                        d[2] = d[2] * x.lerp(E.constantMinSeparate.z, E.constantMaxSeparate.z, Math.random())) : (a.seed = o[11],
                        d[0] = d[0] * x.lerp(E.constantMinSeparate.x, E.constantMaxSeparate.x, a.getFloat()),
                        d[1] = d[1] * x.lerp(E.constantMinSeparate.y, E.constantMaxSeparate.y, a.getFloat()),
                        d[2] = d[2] * x.lerp(E.constantMinSeparate.z, E.constantMaxSeparate.z, a.getFloat()),
                        o[11] = a.seed);
                    else {
                        var v = NaN;
                        r ? v = x.lerp(E.constantMin, E.constantMax, Math.random()) : (a.seed = o[11], v = x.lerp(E.constantMin, E.constantMax, a.getFloat()),
                            o[11] = a.seed), d[0] = d[0] * v, d[1] = d[1] * v, d[2] = d[2] * v;
                    }
                }
                var g = n.renderMode;
                if (1 !== g) switch (t.startRotationType) {
                    case 0:
                        if (t.threeDStartRotation) {
                            var S = t.startRotationConstantSeparate,
                                y = e._tempVector30;
                            e._randomInvertRoationArray(S, y, t.randomizeRotationDirection, r ? null : a, o),
                                e.startRotation[0] = y.x, e.startRotation[1] = y.y, 4 !== g ? e.startRotation[2] = -y.z : e.startRotation[2] = y.z;
                        } else e.startRotation[0] = e._randomInvertRoation(t.startRotationConstant, t.randomizeRotationDirection, r ? null : a, o),
                            e.startRotation[1] = 0, e.startRotation[2] = 0;
                        break;

                    case 2:
                        if (t.threeDStartRotation) {
                            var D = t.startRotationConstantMinSeparate,
                                I = t.startRotationConstantMaxSeparate,
                                R = e._tempVector30;
                            r ? (R.x = x.lerp(D.x, I.x, Math.random()), R.y = x.lerp(D.y, I.y, Math.random()),
                                    R.z = x.lerp(D.z, I.z, Math.random())) : (a.seed = o[5], R.x = x.lerp(D.x, I.x, a.getFloat()),
                                    R.y = x.lerp(D.y, I.y, a.getFloat()), R.z = x.lerp(D.z, I.z, a.getFloat()), o[5] = a.seed),
                                e._randomInvertRoationArray(R, R, t.randomizeRotationDirection, r ? null : a, o),
                                e.startRotation[0] = R.x, e.startRotation[1] = R.y, 4 !== g ? e.startRotation[2] = -R.z : e.startRotation[2] = R.z;
                        } else r ? e.startRotation[0] = e._randomInvertRoation(x.lerp(t.startRotationConstantMin, t.startRotationConstantMax, Math.random()), t.randomizeRotationDirection, r ? null : a, o) : (a.seed = o[5],
                            e.startRotation[0] = e._randomInvertRoation(x.lerp(t.startRotationConstantMin, t.startRotationConstantMax, a.getFloat()), t.randomizeRotationDirection, r ? null : a, o),
                            o[5] = a.seed);
                }
                switch (t.startLifetimeType) {
                    case 0:
                        e.startLifeTime = t.startLifetimeConstant;
                        break;

                    case 1:
                        e.startLifeTime = e._getStartLifetimeFromGradient(t.startLifeTimeGradient, t.emissionTime);
                        break;

                    case 2:
                        r ? e.startLifeTime = x.lerp(t.startLifetimeConstantMin, t.startLifetimeConstantMax, Math.random()) : (a.seed = o[7],
                            e.startLifeTime = x.lerp(t.startLifetimeConstantMin, t.startLifetimeConstantMax, a.getFloat()),
                            o[7] = a.seed);
                        break;

                    case 3:
                        var M = t.emissionTime;
                        r ? e.startLifeTime = x.lerp(e._getStartLifetimeFromGradient(t.startLifeTimeGradientMin, M), e._getStartLifetimeFromGradient(t.startLifeTimeGradientMax, M), Math.random()) : (a.seed = o[7],
                            e.startLifeTime = x.lerp(e._getStartLifetimeFromGradient(t.startLifeTimeGradientMin, M), e._getStartLifetimeFromGradient(t.startLifeTimeGradientMax, M), a.getFloat()),
                            o[7] = a.seed);
                }
                switch (t.startSpeedType) {
                    case 0:
                        e.startSpeed = t.startSpeedConstant;
                        break;

                    case 2:
                        r ? e.startSpeed = x.lerp(t.startSpeedConstantMin, t.startSpeedConstantMax, Math.random()) : (a.seed = o[8],
                            e.startSpeed = x.lerp(t.startSpeedConstantMin, t.startSpeedConstantMax, a.getFloat()),
                            o[8] = a.seed);
                }
                var A = t.textureSheetAnimation,
                    C = A && A.enable;
                if (C) {
                    var L = A.tiles,
                        O = L.x,
                        N = L.y,
                        V = 1 / O,
                        P = 1 / N,
                        w = 0,
                        b = A.startFrame;
                    switch (b.type) {
                        case 0:
                            w = b.constant;
                            break;

                        case 1:
                            r ? w = x.lerp(b.constantMin, b.constantMax, Math.random()) : (a.seed = o[14], w = x.lerp(b.constantMin, b.constantMax, a.getFloat()),
                                o[14] = a.seed);
                    }
                    var F = A.frame;
                    switch (F.type) {
                        case 0:
                            w += F.constant;
                            break;

                        case 2:
                            r ? w += x.lerp(F.constantMin, F.constantMax, Math.random()) : (a.seed = o[15],
                                w += x.lerp(F.constantMin, F.constantMax, a.getFloat()), o[15] = a.seed);
                    }
                    var B = 0;
                    switch (A.type) {
                        case 0:
                            B = Math.floor(w / O);
                            break;

                        case 1:
                            A.randomRow ? r ? B = Math.floor(Math.random() * N) : (a.seed = o[13], B = Math.floor(a.getFloat() * N),
                                o[13] = a.seed) : B = A.rowIndex;
                    }
                    var U = Math.floor(w % O);
                    e.startUVInfo = e.startUVInfo, e.startUVInfo[0] = V, e.startUVInfo[1] = P, e.startUVInfo[2] = U * V,
                        e.startUVInfo[3] = B * P;
                } else e.startUVInfo = e.startUVInfo, e.startUVInfo[0] = 1, e.startUVInfo[1] = 1,
                    e.startUVInfo[2] = 0, e.startUVInfo[3] = 0;
                switch (t.simulationSpace) {
                    case 0:
                        var z = i.position;
                        e.simulationWorldPostion[0] = z.x, e.simulationWorldPostion[1] = z.y, e.simulationWorldPostion[2] = z.z;
                        var G = i.rotation;
                        e.simulationWorldRotation[0] = G.x, e.simulationWorldRotation[1] = G.y, e.simulationWorldRotation[2] = G.z,
                            e.simulationWorldRotation[3] = G.w;
                        break;

                    case 1:
                        break;

                    default:
                        throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
                }
            }, e.startLifeTime = NaN, e.startSpeed = NaN, i(e, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempQuaternion", function() {
                return this._tempQuaternion = new he();
            }, "startColor", function() {
                return this.startColor = new me();
            }, "startSize", function() {
                return this.startSize = new Float32Array(3);
            }, "startRotation", function() {
                return this.startRotation = new Float32Array(3);
            }, "startUVInfo", function() {
                return this.startUVInfo = new Float32Array(4);
            }, "simulationWorldPostion", function() {
                return this.simulationWorldPostion = new Float32Array(3);
            }, "simulationWorldRotation", function() {
                return this.simulationWorldRotation = new Float32Array(4);
            }]), e;
        }(),
        Ke = function() {
            function e(e, t, n, i) {
                this._octree = null, this._parent = null, this._children = null, this._isContaion = !1,
                    this.baseLength = 0, this._bounds = new zt(new Te(), new Te()), this._objects = [],
                    this.center = new Te(), this._setValues(e, t, n, i);
            }
            r(e, "laya.d3.core.scene.BoundsOctreeNode");
            var t = e.prototype;
            return t._setValues = function(e, t, n, i) {
                this._octree = e, this._parent = t, this.baseLength = n, i.cloneTo(this.center);
                var r = this._bounds.min,
                    a = this._bounds.max,
                    o = e._looseness * n / 2;
                r.setValue(i.x - o, i.y - o, i.z - o), a.setValue(i.x + o, i.y + o, i.z + o);
            }, t._getChildBound = function(t) {
                if (null != this._children && this._children[t]) return this._children[t]._bounds;
                var n = this.baseLength / 4,
                    i = this.baseLength / 2 * this._octree._looseness / 2,
                    r = e._tempBoundBox,
                    a = r.min,
                    o = r.max;
                switch (t) {
                    case 0:
                        a.x = this.center.x - n - i, a.y = this.center.y + n - i, a.z = this.center.z - n - i,
                            o.x = this.center.x - n + i, o.y = this.center.y + n + i, o.z = this.center.z - n + i;
                        break;

                    case 1:
                        a.x = this.center.x + n - i, a.y = this.center.y + n - i, a.z = this.center.z - n - i,
                            o.x = this.center.x + n + i, o.y = this.center.y + n + i, o.z = this.center.z - n + i;
                        break;

                    case 2:
                        a.x = this.center.x - n - i, a.y = this.center.y + n - i, a.z = this.center.z + n - i,
                            o.x = this.center.x - n + i, o.y = this.center.y + n + i, o.z = this.center.z + n + i;
                        break;

                    case 3:
                        a.x = this.center.x + n - i, a.y = this.center.y + n - i, a.z = this.center.z + n - i,
                            o.x = this.center.x + n + i, o.y = this.center.y + n + i, o.z = this.center.z + n + i;
                        break;

                    case 4:
                        a.x = this.center.x - n - i, a.y = this.center.y - n - i, a.z = this.center.z - n - i,
                            o.x = this.center.x - n + i, o.y = this.center.y - n + i, o.z = this.center.z - n + i;
                        break;

                    case 5:
                        a.x = this.center.x + n - i, a.y = this.center.y - n - i, a.z = this.center.z - n - i,
                            o.x = this.center.x + n + i, o.y = this.center.y - n + i, o.z = this.center.z - n + i;
                        break;

                    case 6:
                        a.x = this.center.x - n - i, a.y = this.center.y - n - i, a.z = this.center.z + n - i,
                            o.x = this.center.x - n + i, o.y = this.center.y - n + i, o.z = this.center.z + n + i;
                        break;

                    case 7:
                        a.x = this.center.x + n - i, a.y = this.center.y - n - i, a.z = this.center.z + n - i,
                            o.x = this.center.x + n + i, o.y = this.center.y - n + i, o.z = this.center.z + n + i;
                }
                return r;
            }, t._getChildCenter = function(t) {
                if (null != this._children) return this._children[t].center;
                var n = this.baseLength / 4,
                    i = e._tempVector30;
                switch (t) {
                    case 0:
                        i.x = this.center.x - n, i.y = this.center.y + n, i.z = this.center.z - n;
                        break;

                    case 1:
                        i.x = this.center.x + n, i.y = this.center.y + n, i.z = this.center.z - n;
                        break;

                    case 2:
                        i.x = this.center.x - n, i.y = this.center.y + n, i.z = this.center.z + n;
                        break;

                    case 3:
                        i.x = this.center.x + n, i.y = this.center.y + n, i.z = this.center.z + n;
                        break;

                    case 4:
                        i.x = this.center.x - n, i.y = this.center.y - n, i.z = this.center.z - n;
                        break;

                    case 5:
                        i.x = this.center.x + n, i.y = this.center.y - n, i.z = this.center.z - n;
                        break;

                    case 6:
                        i.x = this.center.x - n, i.y = this.center.y - n, i.z = this.center.z + n;
                        break;

                    case 7:
                        i.x = this.center.x + n, i.y = this.center.y - n, i.z = this.center.z + n;
                }
                return i;
            }, t._getChild = function(t) {
                var n = this.baseLength / 4;
                switch (this._children || (this._children = o(8, null)), t) {
                    case 0:
                        return this._children[0] || (this._children[0] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x + -n, this.center.y + n, this.center.z - n)));

                    case 1:
                        return this._children[1] || (this._children[1] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x + n, this.center.y + n, this.center.z - n)));

                    case 2:
                        return this._children[2] || (this._children[2] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x - n, this.center.y + n, this.center.z + n)));

                    case 3:
                        return this._children[3] || (this._children[3] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x + n, this.center.y + n, this.center.z + n)));

                    case 4:
                        return this._children[4] || (this._children[4] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x - n, this.center.y - n, this.center.z - n)));

                    case 5:
                        return this._children[5] || (this._children[5] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x + n, this.center.y - n, this.center.z - n)));

                    case 6:
                        return this._children[6] || (this._children[6] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x - n, this.center.y - n, this.center.z + n)));

                    case 7:
                        return this._children[7] || (this._children[7] = new e(this._octree, this, this.baseLength / 2, new Te(this.center.x + n, this.center.y - n, this.center.z + n)));

                    default:
                        throw "BoundsOctreeNode: unknown index.";
                }
            }, t._shouldMerge = function() {
                for (var e = this._objects.length, t = 0; 8 > t; t++) {
                    var n = this._children[t];
                    if (n) {
                        if (null != n._children) return !1;
                        e += n._objects.length;
                    }
                }
                return 8 >= e;
            }, t._mergeChildren = function() {
                for (var e = 0; 8 > e; e++) {
                    var t = this._children[e];
                    if (t) {
                        t._parent = null;
                        for (var n = t._objects, i = n.length - 1; i >= 0; i--) {
                            var r = n[i];
                            this._objects.push(r), r._setOctreeNode(this);
                        }
                    }
                }
                this._children = null;
            }, t._merge = function() {
                if (null === this._children) {
                    var e = this._parent;
                    e && e._shouldMerge() && (e._mergeChildren(), e._merge());
                }
            }, t._checkAddNode = function(t) {
                if (null == this._children) {
                    if (this._objects.length < 8 || this.baseLength / 2 < this._octree._minSize) return this;
                    for (var n = this._objects.length - 1; n >= 0; n--) {
                        var i = this._objects[n],
                            r = this._bestFitChild(i.bounds.getCenter());
                        e._encapsulates(this._getChildBound(r), i.bounds._getBoundBox()) && (this._objects.splice(this._objects.indexOf(i), 1),
                            this._getChild(r)._add(i));
                    }
                }
                var a = this._bestFitChild(t.bounds.getCenter());
                return e._encapsulates(this._getChildBound(a), t.bounds._getBoundBox()) ? this._getChild(a)._checkAddNode(t) : this;
            }, t._add = function(e) {
                var t = this._checkAddNode(e);
                t._objects.push(e), e._setOctreeNode(t);
            }, t._remove = function(e) {
                var t = this._objects.indexOf(e);
                this._objects.splice(t, 1), e._setOctreeNode(null), this._merge();
            }, t._addUp = function(e) {
                return 1 === Ft.boxContainsBox(this._bounds, e.bounds._getBoundBox()) ? (this._add(e), !0) : this._parent ? this._parent._addUp(e) : !1;
            }, t._getCollidingWithFrustum = function(e, t, n, i) {
                if (n) {
                    var r = t.containsBoundBox(this._bounds);
                    if (N.octreeNodeCulling++, 0 === r) return;
                    n = 2 === r;
                }
                this._isContaion = !n;
                for (var a = e.camera, o = e.scene, s = 0, l = this._objects.length; l > s; s++) {
                    var h = this._objects[s];
                    if (a._isLayerVisible(h._owner.layer) && h._enable) {
                        if (n && (N.frustumCulling++, !h._needRender(t))) continue;
                        h._distanceForSort = Te.distance(h.bounds.getCenter(), i);
                        for (var u = h._renderElements, c = 0, _ = u.length; _ > c; c++) {
                            var d = u[c],
                                f = o._getRenderQueue(d.material.renderQueue);
                            f.isTransparent ? d.addToTransparentRenderQueue(e, f) : d.addToOpaqueRenderQueue(e, f);
                        }
                    }
                }
                if (null != this._children)
                    for (s = 0; 8 > s; s++) {
                        var m = this._children[s];
                        m && m._getCollidingWithFrustum(e, t, n, i);
                    }
            }, t._getCollidingWithBoundBox = function(e, t, n) {
                if (t) {
                    var i = Ft.boxContainsBox(this._bounds, e);
                    if (0 === i) return;
                    t = 2 === i;
                }
                if (t)
                    for (var r = 0, a = this._objects.length; a > r; r++) {
                        var o = this._objects[r];
                        Ft.intersectsBoxAndBox(o.bounds._getBoundBox(), e) && n.push(o);
                    }
                if (null != this._children)
                    for (r = 0; 8 > r; r++) {
                        var s = this._children[r];
                        s._getCollidingWithBoundBox(e, t, n);
                    }
            }, t._bestFitChild = function(e) {
                return (e.x <= this.center.x ? 0 : 1) + (e.y >= this.center.y ? 0 : 4) + (e.z <= this.center.z ? 0 : 2);
            }, t._update = function(e) {
                if (1 === Ft.boxContainsBox(this._bounds, e.bounds._getBoundBox())) {
                    var t = this._checkAddNode(e);
                    if (t !== e._getOctreeNode()) {
                        t._objects.push(e), e._setOctreeNode(t);
                        var n = this._objects.indexOf(e);
                        this._objects.splice(n, 1), this._merge();
                    }
                    return !0;
                }
                if (this._parent) {
                    var i = this._parent._addUp(e);
                    return i && (n = this._objects.indexOf(e), this._objects.splice(n, 1), this._merge()),
                        i;
                }
                return !1;
            }, t.add = function(t) {
                return e._encapsulates(this._bounds, t.bounds._getBoundBox()) ? (this._add(t), !0) : !1;
            }, t.remove = function(e) {
                return e._getOctreeNode() !== this ? !1 : (this._remove(e), !0);
            }, t.update = function(e) {
                return e._getOctreeNode() !== this ? !1 : this._update(e);
            }, t.shrinkIfPossible = function(t) {
                if (this.baseLength < 2 * t) return this;
                for (var n = -1, i = 0, r = this._objects.length; r > i; i++) {
                    var a = this._objects[i],
                        o = this._bestFitChild(a.bounds.getCenter());
                    if (0 != i && o != n) return this;
                    var s = this._getChildBound(o);
                    if (!e._encapsulates(s, a.bounds._getBoundBox())) return this;
                    0 == i && (n = o);
                }
                if (null == this._children) {
                    if (-1 != n) {
                        var l = this._getChildCenter(n);
                        this._setValues(this._octree, null, this.baseLength / 2, l);
                    }
                    return this;
                }
                var h = !1;
                for (i = 0, r = this._children.length; r > i; i++) {
                    var u = this._children[i];
                    if (u && u.hasAnyObjects()) {
                        if (h) return this;
                        if (n >= 0 && n != i) return this;
                        h = !0, n = i;
                    }
                }
                if (-1 != n) {
                    var c = this._children[n];
                    return c._parent = null, c;
                }
                return this;
            }, t.hasAnyObjects = function() {
                if (this._objects.length > 0) return !0;
                if (null != this._children)
                    for (var e = 0; 8 > e; e++) {
                        var t = this._children[e];
                        if (t && t.hasAnyObjects()) return !0;
                    }
                return !1;
            }, t.getCollidingWithBoundBox = function(e, t) {
                this._getCollidingWithBoundBox(e, !0, t);
            }, t.getCollidingWithRay = function(e, t, n) {
                void 0 === n && (n = Number.MAX_VALUE);
                var i = Ft.intersectsRayAndBoxRD(e, this._bounds);
                if (!(-1 == i || i > n)) {
                    for (var r = 0, a = this._objects.length; a > r; r++) {
                        var o = this._objects[r];
                        i = Ft.intersectsRayAndBoxRD(e, o.bounds._getBoundBox()), -1 !== i && n >= i && t.push(o);
                    }
                    if (null != this._children)
                        for (r = 0; 8 > r; r++) {
                            var s = this._children[r];
                            s.getCollidingWithRay(e, t, n);
                        }
                }
            }, t.getCollidingWithFrustum = function(e) {
                var t = e.camera.transform.position,
                    n = e.camera.boundFrustum;
                this._getCollidingWithFrustum(e, n, !0, t);
            }, t.isCollidingWithBoundBox = function(e) {
                if (!Ft.intersectsBoxAndBox(this._bounds, e)) return !1;
                for (var t = 0, n = this._objects.length; n > t; t++) {
                    var i = this._objects[t];
                    if (Ft.intersectsBoxAndBox(i.bounds._getBoundBox(), e)) return !0;
                }
                if (null != this._children)
                    for (t = 0; 8 > t; t++) {
                        var r = this._children[t];
                        if (r.isCollidingWithBoundBox(e)) return !0;
                    }
                return !1;
            }, t.isCollidingWithRay = function(e, t) {
                void 0 === t && (t = Number.MAX_VALUE);
                var n = Ft.intersectsRayAndBoxRD(e, this._bounds);
                if (-1 == n || n > t) return !1;
                for (var i = 0, r = this._objects.length; r > i; i++) {
                    var a = this._objects[i];
                    if (n = Ft.intersectsRayAndBoxRD(e, a.bounds._getBoundBox()), -1 !== n && t >= n) return !0;
                }
                if (null != this._children)
                    for (i = 0; 8 > i; i++) {
                        var o = this._children[i];
                        if (o.isCollidingWithRay(e, t)) return !0;
                    }
                return !1;
            }, t.getBound = function() {
                return this._bounds;
            }, t.drawAllBounds = function(t, n, i) {
                if (null !== this._children || 0 != this._objects.length) {
                    n++;
                    var r = e._tempColor0;
                    if (this._isContaion) r.r = 0, r.g = 0, r.b = 1;
                    else {
                        var a = i ? n / i : 0;
                        r.r = 1 - a, r.g = a, r.b = 0;
                    }
                    if (r.a = .3, ke._drawBound(t, this._bounds, r), null != this._children)
                        for (var o = 0; 8 > o; o++) {
                            var s = this._children[o];
                            s && s.drawAllBounds(t, n, i);
                        }
                }
            }, t.drawAllObjects = function(t, n, i) {
                n++;
                var r = e._tempColor0;
                if (this._isContaion) r.r = 0, r.g = 0, r.b = 1;
                else {
                    var a = i ? n / i : 0;
                    r.r = 1 - a, r.g = a, r.b = 0;
                }
                r.a = 1;
                for (var o = 0, s = this._objects.length; s > o; o++) ke._drawBound(t, this._objects[o].bounds._getBoundBox(), r);
                if (null != this._children)
                    for (o = 0; 8 > o; o++) {
                        var l = this._children[o];
                        l && l.drawAllObjects(t, n, i);
                    }
            }, e._encapsulates = function(e, t) {
                return 1 == Ft.boxContainsBox(e, t);
            }, e._NUM_OBJECTS_ALLOWED = 8, i(e, ["_tempVector3", function() {
                return this._tempVector3 = new Te();
            }, "_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }, "_tempColor0", function() {
                return this._tempColor0 = new xe();
            }, "_tempBoundBox", function() {
                return this._tempBoundBox = new zt(new Te(), new Te());
            }]), e;
        }(),
        qe = (function() {
            function e() {
                this._currentLength = 0, this._elements = null, this._elements = new Float32Array(12);
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientDataVector2");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.add = function(e, t) {
                this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("GradientDataVector2 warning:the forth key is  be force set to 1.")),
                    this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t.x,
                    this._elements[this._currentLength++] = t.y) : console.log("GradientDataVector2 warning:data count must lessEqual than 4");
            }, t.cloneTo = function(e) {
                var t = e;
                t._currentLength = this._currentLength;
                var n = t._elements;
                n.length = this._elements.length;
                for (var i = 0, r = this._elements.length; r > i; i++) n[i] = this._elements[i];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradientCount", function() {
                return this._currentLength / 3;
            }), e;
        }(), function() {
            function e(e, t, n, i) {
                this._position = null, this._normal = null, this._textureCoord0 = null, this._textureCoord1 = null,
                    this._position = e, this._normal = t, this._textureCoord0 = n, this._textureCoord1 = i;
            }
            r(e, "laya.d3.graphics.Vertex.VertexPositionTerrain");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.graphics.IVertex": !0
                }), a(0, t, "normal", function() {
                    return this._normal;
                }), a(0, t, "position", function() {
                    return this._position;
                }), a(0, t, "textureCoord0", function() {
                    return this._textureCoord0;
                }), a(0, t, "textureCoord1", function() {
                    return this._textureCoord1;
                }), a(0, t, "vertexDeclaration", function() {
                    return e._vertexDeclaration;
                }), a(1, e, "vertexDeclaration", function() {
                    return e._vertexDeclaration;
                }), e.TERRAIN_POSITION0 = 0, e.TERRAIN_NORMAL0 = 1, e.TERRAIN_TEXTURECOORDINATE0 = 2,
                e.TERRAIN_TEXTURECOORDINATE1 = 3, i(e, ["_vertexDeclaration", function() {
                    return this._vertexDeclaration = new ft(40, [new ze(0, "vector3", 0), new ze(12, "vector3", 1), new ze(24, "vector2", 2), new ze(32, "vector2", 3)]);
                }]), e;
        }()),
        Qe = function() {
            function e() {
                this._nodes = [];
            }
            r(e, "laya.d3.animation.KeyframeNodeList");
            var t = e.prototype;
            return t.getNodeByIndex = function(e) {
                return this._nodes[e];
            }, t.setNodeByIndex = function(e, t) {
                this._nodes[e] = t;
            }, a(0, t, "count", function() {
                return this._nodes.length;
            }, function(e) {
                this._nodes.length = e;
            }), e;
        }(),
        Je = function() {
            function e(e, t, n, i) {
                this._initialSize = NaN, this._rootNode = null, this._looseness = NaN, this._minSize = NaN,
                    this.count = 0, this._motionObjects = new vn(), n > e && (console.warn("Minimum node size must be at least as big as the initial world size. Was: " + n + " Adjusted to: " + e),
                        n = e), this._initialSize = e, this._minSize = n, this._looseness = Math.min(Math.max(i, 1), 2),
                    this._rootNode = new Ke(this, null, e, t);
            }
            r(e, "laya.d3.core.scene.BoundsOctree");
            var t = e.prototype;
            return t._getMaxDepth = function(e, t) {
                t++;
                var n = e._children;
                if (null != n)
                    for (var i = t, r = 0, a = n.length; a > r; r++) {
                        var o = n[r];
                        o && (t = Math.max(this._getMaxDepth(o, i), t));
                    }
                return t;
            }, t._grow = function(e) {
                var t = e.x >= 0 ? 1 : -1,
                    n = e.y >= 0 ? 1 : -1,
                    i = e.z >= 0 ? 1 : -1,
                    r = this._rootNode,
                    a = this._rootNode.baseLength / 2,
                    s = 2 * this._rootNode.baseLength,
                    l = this._rootNode.center,
                    h = new Te(l.x + t * a, l.y + n * a, l.z + i * a);
                if (this._rootNode = new Ke(this, null, s, h), r.hasAnyObjects()) {
                    for (var u = this._rootNode._bestFitChild(r.center), c = o(8, null), _ = 0; 8 > _; _++) _ == u && (r._parent = this._rootNode,
                        c[_] = r);
                    this._rootNode._children = c;
                }
            }, t.add = function(t) {
                for (var n = 0; !this._rootNode.add(t);) {
                    var i = e._tempVector30;
                    if (Te.subtract(t.bounds.getCenter(), this._rootNode.center, i), this._grow(i),
                        ++n > 20) throw "Aborted Add operation as it seemed to be going on forever (" + (n - 1) + ") attempts at growing the octree.";
                }
                this.count++;
            }, t.remove = function(e) {
                var t = e._getOctreeNode().remove(e);
                return t && this.count--, t;
            }, t.update = function(e) {
                var t = 0,
                    n = e._getOctreeNode();
                if (n) {
                    for (; !n._update(e);)
                        if (this._grow(e.bounds.getCenter()), ++t > 20) throw "Aborted Add operation as it seemed to be going on forever (" + (t - 1) + ") attempts at growing the octree.";
                    return !0;
                }
                return !1;
            }, t.shrinkRootIfPossible = function() {
                this._rootNode = this._rootNode.shrinkIfPossible(this._initialSize);
            }, t.addMotionObject = function(e) {
                this._motionObjects.add(e);
            }, t.removeMotionObject = function(e) {
                this._motionObjects.remove(e);
            }, t.updateMotionObjects = function() {
                for (var e = this._motionObjects.elements, t = 0, n = this._motionObjects.length; n > t; t++) {
                    var i = e[t];
                    this.update(i), i._setIndexInMotionList(-1);
                }
                this._motionObjects.length = 0;
            }, t.isCollidingWithBoundBox = function(e) {
                return this._rootNode.isCollidingWithBoundBox(e);
            }, t.isCollidingWithRay = function(e, t) {
                return void 0 === t && (t = Number.MAX_VALUE), this._rootNode.isCollidingWithRay(e, t);
            }, t.getCollidingWithBoundBox = function(e, t) {
                this._rootNode.getCollidingWithBoundBox(e, t);
            }, t.getCollidingWithRay = function(e, t, n) {
                void 0 === n && (n = Number.MAX_VALUE), this._rootNode.getCollidingWithRay(e, t, n);
            }, t.getCollidingWithFrustum = function(e) {
                this._rootNode.getCollidingWithFrustum(e);
            }, t.getMaxBounds = function() {
                return this._rootNode.getBound();
            }, t.drawAllBounds = function(e) {
                var t = this._getMaxDepth(this._rootNode, -1);
                this._rootNode.drawAllBounds(e, -1, t);
            }, t.drawAllObjects = function(e) {
                var t = this._getMaxDepth(this._rootNode, -1);
                this._rootNode.drawAllObjects(e, -1, t);
            }, i(e, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }]), e;
        }(),
        $e = function() {
            function e(e) {
                this._owner = null, this._sharedMesh = null, this._owner = e;
            }
            r(e, "laya.d3.core.MeshFilter");
            var t = e.prototype;
            return t._getMeshDefine = function(e) {
                for (var t = 0, n = 0, i = e._subMeshCount; i > n; n++)
                    for (var r = e._getSubMesh(n), a = r._vertexBuffer._vertexDeclaration.vertexElements, o = 0, s = a.length; s > o; o++) {
                        var l = a[o],
                            h = l.elementUsage;
                        switch (h) {
                            case 1:
                                t |= Ei.SHADERDEFINE_COLOR;
                                break;

                            case 2:
                                t |= Ei.SHADERDEFINE_UV0;
                                break;

                            case 7:
                                t |= Ei.SHADERDEFINE_UV1;
                        }
                    }
                return t;
            }, t.destroy = function() {
                this._owner = null, this._sharedMesh && (this._sharedMesh._removeReference(), this._sharedMesh = null);
            }, a(0, t, "sharedMesh", function() {
                return this._sharedMesh;
            }, function(e) {
                if (this._sharedMesh !== e) {
                    var t = this._owner._render._defineDatas,
                        n = this._sharedMesh;
                    n && (n._removeReference(), t.remove(this._getMeshDefine(n))), e._addReference(),
                        this._sharedMesh = e, t.add(this._getMeshDefine(e)), this._owner._render._changeRenderObjectsByMesh(e);
                }
                this._owner._render._onMeshChange(e);
            }), e;
        }(),
        et = function() {
            function e(e) {
                this._minVertexDistance = NaN, this._widthMultiplier = NaN, this._time = NaN, this._widthCurve = null,
                    this._colorGradient = null, this._textureMode = 0, this._trialGeometry = null, this._totalLength = 0,
                    this._owner = null, this._curtime = 0, this._trailRenderElementIndex = 0, this._lastPosition = new Te(),
                    this.alignment = 0, this._owner = e, this._initDefaultData(), this.addRenderElement();
            }
            r(e, "laya.d3.core.trail.TrailFilter");
            var t = e.prototype;
            return t.addRenderElement = function() {
                var e = this._owner._render,
                    t = e._renderElements,
                    n = e.sharedMaterials[0];
                n || (n = ni.defaultMaterial);
                var i = new Ae();
                i.setTransform(this._owner._transform), i.render = e, i.material = n, this._trialGeometry = new dn(this),
                    i.setGeometry(this._trialGeometry), t.push(i);
            }, t._update = function(e) {
                var t = this._owner._render;
                this._curtime += e.scene.timer._delta / 1e3, t._shaderValues.setNumber(Si.CURTIME, this._curtime);
                var n = this._owner.transform.position,
                    i = t._renderElements[0]._geometry;
                i._updateDisappear(), i._updateTrail(e.camera, this._lastPosition, n), i._updateVertexBufferUV(),
                    n.cloneTo(this._lastPosition);
            }, t._initDefaultData = function() {
                this.time = 5, this.minVertexDistance = .1, this.widthMultiplier = 1, this.textureMode = 0;
                var e = [],
                    t = new Tn();
                t.time = 0, t.inTangent = 0, t.outTangent = 0, t.value = 1, e.push(t);
                var n = new Tn();
                n.time = 1, n.inTangent = 0, n.outTangent = 0, n.value = 1, e.push(n), this.widthCurve = e;
                var i = new le(2, 2);
                i.mode = 0, i.addColorRGB(0, xe.WHITE), i.addColorRGB(1, xe.WHITE), i.addColorAlpha(0, 1),
                    i.addColorAlpha(1, 1), this.colorGradient = i;
            }, t.destroy = function() {
                this._trialGeometry.destroy(), this._trialGeometry = null, this._widthCurve = null,
                    this._colorGradient = null;
            }, a(0, t, "widthMultiplier", function() {
                return this._widthMultiplier;
            }, function(e) {
                this._widthMultiplier = e;
            }), a(0, t, "time", function() {
                return this._time;
            }, function(e) {
                this._time = e, this._owner._render._shaderValues.setNumber(Si.LIFETIME, e);
            }), a(0, t, "widthCurve", function() {
                return this._widthCurve;
            }, function(e) {
                this._widthCurve = e;
                var t = new Float32Array(4 * e.length),
                    n = 0,
                    i = 0,
                    r = 0;
                for (n = 0, i = e.length; i > n; n++) t[r++] = e[n].time, t[r++] = e[n].inTangent,
                    t[r++] = e[n].outTangent, t[r++] = e[n].value;
                this._owner._render._shaderValues.setBuffer(Si.WIDTHCURVE, t), this._owner._render._shaderValues.setInt(Si.WIDTHCURVEKEYLENGTH, e.length);
            }), a(0, t, "minVertexDistance", function() {
                return this._minVertexDistance;
            }, function(e) {
                this._minVertexDistance = e;
            }), a(0, t, "colorGradient", function() {
                return this._colorGradient;
            }, function(e) {
                this._colorGradient = e, this._owner._render._shaderValues.setBuffer(Si.GRADIENTCOLORKEY, e._rgbElements),
                    this._owner._render._shaderValues.setBuffer(Si.GRADIENTALPHAKEY, e._alphaElements),
                    0 == e.mode ? this._owner._render._defineDatas.add(Si.SHADERDEFINE_GRADIENTMODE_BLEND) : this._owner._render._defineDatas.remove(Si.SHADERDEFINE_GRADIENTMODE_BLEND);
            }), a(0, t, "textureMode", function() {
                return this._textureMode;
            }, function(e) {
                this._textureMode = e;
            }), e.ALIGNMENT_VIEW = 0, e.ALIGNMENT_TRANSFORM_Z = 1, e;
        }(),
        tt = function() {
            function e() {}
            r(e, "laya.d3.core.trail.VertexTrail");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.graphics.IVertex": !0
                }), a(0, t, "vertexDeclaration", function() {
                    return e._vertexDeclaration1;
                }), a(1, e, "vertexDeclaration1", function() {
                    return e._vertexDeclaration1;
                }), a(1, e, "vertexDeclaration2", function() {
                    return e._vertexDeclaration2;
                }), e.TRAIL_POSITION0 = 0, e.TRAIL_OFFSETVECTOR = 1, e.TRAIL_TIME0 = 2, e.TRAIL_TEXTURECOORDINATE0Y = 3,
                e.TRAIL_TEXTURECOORDINATE0X = 4, i(e, ["_vertexDeclaration1", function() {
                    return this._vertexDeclaration1 = new ft(32, [new ze(0, "vector3", 0), new ze(12, "vector3", 1), new ze(24, "single", 2), new ze(28, "single", 3)]);
                }, "_vertexDeclaration2", function() {
                    return this._vertexDeclaration2 = new ft(4, [new ze(0, "single", 4)]);
                }]), e;
        }(),
        nt = function() {
            function e(e, t, n) {
                this._time = NaN, this._minCount = 0, this._maxCount = 0, this._time = e, this._minCount = t,
                    this._maxCount = n;
            }
            r(e, "laya.d3.core.particleShuriKen.module.Burst");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._time = this._time, t._minCount = this._minCount, t._maxCount = this._maxCount;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "time", function() {
                return this._time;
            }), a(0, t, "minCount", function() {
                return this._minCount;
            }), a(0, t, "maxCount", function() {
                return this._maxCount;
            }), e;
        }(),
        it = function() {
            function e() {
                this.time = NaN, this.eventName = null, this.params = null;
            }
            return r(e, "laya.d3.animation.AnimationEvent"), e;
        }(),
        rt = (function() {
            function e() {
                this._nativeConstraint = null, this._simulation = null, this.rigidbodyA = null,
                    this.rigidbodyB = null;
            }
            return r(e, "laya.d3.physics.Constraint3D"), e;
        }(), function() {
            function e() {
                this._pressedSprite = null, this._pressedLoopCount = -1, this.sprite = null, this.mousePositionX = 0,
                    this.mousePositionY = 0;
            }
            return r(e, "laya.d3.MouseTouch"), e;
        }()),
        at = function() {
            function e() {
                this._currentLength = 0, this._elements = null, this._elements = new Float32Array(8);
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientDataInt");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.add = function(e, t) {
                this._currentLength < 8 ? (6 === this._currentLength && 1 !== e && (e = 1, console.log("Warning:the forth key is  be force set to 1.")),
                    this._elements[this._currentLength++] = e, this._elements[this._currentLength++] = t) : console.log("Warning:data count must lessEqual than 4");
            }, t.cloneTo = function(e) {
                var t = e;
                t._currentLength = this._currentLength;
                var n = t._elements;
                n.length = this._elements.length;
                for (var i = 0, r = this._elements.length; r > i; i++) n[i] = this._elements[i];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradientCount", function() {
                return this._currentLength / 2;
            }), e;
        }(),
        ot = function() {
            function e(e, t, n, i) {
                this._attributeMap = null, this._uniformMap = null, this._publicDefines = null,
                    this._publicDefinesMap = null, this._spriteDefines = null, this._spriteDefinesMap = null,
                    this._materialDefines = null, this._materialDefinesMap = null, this._owner = null,
                    this._flags = {}, this._passes = [], this._publicDefines = [], this._publicDefinesMap = {},
                    this._spriteDefines = [], this._spriteDefinesMap = {}, this._materialDefines = [],
                    this._materialDefinesMap = {}, this._addDefines(this._publicDefines, this._publicDefinesMap, Ve._globleDefines),
                    n && this._addDefines(this._spriteDefines, this._spriteDefinesMap, n.defines), i && this._addDefines(this._materialDefines, this._materialDefinesMap, i.defines),
                    this._attributeMap = e, this._uniformMap = t;
            }
            r(e, "laya.d3.shader.SubShader");
            var t = e.prototype;
            return t._addDefines = function(e, t, n) {
                for (var i in n) {
                    var r = n[i],
                        a = parseInt(i);
                    e[a] = r, t[r] = a;
                }
            }, t.getMaterialDefineByName = function(e) {
                return this._materialDefinesMap[e];
            }, t.setFlag = function(e, t) {
                t ? this._flags[e] = t : delete this._flags[e];
            }, t.getFlag = function(e) {
                return this._flags[e];
            }, t.addShaderPass = function(e, t, n) {
                var i = new Qt(this, e, t, n);
                return this._passes.push(i), i;
            }, e;
        }(),
        st = function() {
            function e() {
                this.source = null, this.destination = null, this.camera = null, this.compositeShaderData = null,
                    this.compositeDefineData = null, this.command = null, this.tempRenderTextures = [];
            }
            return r(e, "laya.d3.core.render.PostProcessRenderContext"), e;
        }(),
        lt = function() {
            function e() {
                this._commands = [];
            }
            r(e, "laya.d3.core.render.command.CommandBuffer");
            var t = e.prototype;
            return t._apply = function() {
                for (var e = 0, t = this._commands.length; t > e; e++) this._commands[e].run();
            }, t.setShaderDataTexture = function(e, t, n) {
                this._commands.push(Mn.create(e, t, n));
            }, t.blit = function(e, t, n, i, r) {
                void 0 === r && (r = 0), this._commands.push(nn.create(e, t, n, i, r));
            }, t.setRenderTarget = function(e) {
                this._commands.push(gn.create(e));
            }, t.clear = function() {
                for (var e = 0, t = this._commands.length; t > e; e++) this._commands[e].recover();
                this._commands.length = 0;
            }, e.SCREENTEXTURE_NAME = "u_ScreenTexture", i(e, ["screenShader", function() {
                return this.screenShader = Ve.find("ScreenQuad");
            }, "SCREENTEXTURE_ID", function() {
                return this.SCREENTEXTURE_ID = Ve.propertyNameToID("u_ScreenTexture");
            }]), e;
        }(),
        ht = function() {
            function e() {
                this._type = 0, this._separateAxes = !1, this._constant = NaN, this._constantSeparate = null,
                    this._gradient = null, this._gradientX = null, this._gradientY = null, this._gradientZ = null,
                    this._gradientW = null, this._constantMin = NaN, this._constantMax = NaN, this._constantMinSeparate = null,
                    this._constantMaxSeparate = null, this._gradientMin = null, this._gradientMax = null,
                    this._gradientXMin = null, this._gradientXMax = null, this._gradientYMin = null,
                    this._gradientYMax = null, this._gradientZMin = null, this._gradientZMax = null,
                    this._gradientWMin = null, this._gradientWMax = null;
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientAngularVelocity");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._type = this._type, t._separateAxes = this._separateAxes, t._constant = this._constant,
                    this._constantSeparate.cloneTo(t._constantSeparate), this._gradient.cloneTo(t._gradient),
                    this._gradientX.cloneTo(t._gradientX), this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ),
                    t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(t._constantMinSeparate),
                    this._constantMaxSeparate.cloneTo(t._constantMaxSeparate), this._gradientMin.cloneTo(t._gradientMin),
                    this._gradientMax.cloneTo(t._gradientMax), this._gradientXMin.cloneTo(t._gradientXMin),
                    this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin),
                    this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin),
                    this._gradientZMax.cloneTo(t._gradientZMax);
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradientZ", function() {
                return this._gradientZ;
            }), a(0, t, "constant", function() {
                return this._constant;
            }), a(0, t, "gradient", function() {
                return this._gradient;
            }), a(0, t, "separateAxes", function() {
                return this._separateAxes;
            }), a(0, t, "type", function() {
                return this._type;
            }), a(0, t, "constantSeparate", function() {
                return this._constantSeparate;
            }), a(0, t, "gradientX", function() {
                return this._gradientX;
            }), a(0, t, "gradientY", function() {
                return this._gradientY;
            }), a(0, t, "gradientW", function() {
                return this._gradientW;
            }), a(0, t, "gradientMin", function() {
                return this._gradientMin;
            }), a(0, t, "constantMin", function() {
                return this._constantMin;
            }), a(0, t, "gradientMax", function() {
                return this._gradientMax;
            }), a(0, t, "constantMax", function() {
                return this._constantMax;
            }), a(0, t, "gradientWMin", function() {
                return this._gradientWMin;
            }), a(0, t, "constantMinSeparate", function() {
                return this._constantMinSeparate;
            }), a(0, t, "constantMaxSeparate", function() {
                return this._constantMaxSeparate;
            }), a(0, t, "gradientXMin", function() {
                return this._gradientXMin;
            }), a(0, t, "gradientXMax", function() {
                return this._gradientXMax;
            }), a(0, t, "gradientWMax", function() {
                return this._gradientWMax;
            }), a(0, t, "gradientYMin", function() {
                return this._gradientYMin;
            }), a(0, t, "gradientYMax", function() {
                return this._gradientYMax;
            }), a(0, t, "gradientZMin", function() {
                return this._gradientZMin;
            }), a(0, t, "gradientZMax", function() {
                return this._gradientZMax;
            }), e.createByConstant = function(t) {
                var n = new e();
                return n._type = 0, n._separateAxes = !1, n._constant = t, n;
            }, e.createByConstantSeparate = function(t) {
                var n = new e();
                return n._type = 0, n._separateAxes = !0, n._constantSeparate = t, n;
            }, e.createByGradient = function(t) {
                var n = new e();
                return n._type = 1, n._separateAxes = !1, n._gradient = t, n;
            }, e.createByGradientSeparate = function(t, n, i) {
                var r = new e();
                return r._type = 1, r._separateAxes = !0, r._gradientX = t, r._gradientY = n, r._gradientZ = i,
                    r;
            }, e.createByRandomTwoConstant = function(t, n) {
                var i = new e();
                return i._type = 2, i._separateAxes = !1, i._constantMin = t, i._constantMax = n,
                    i;
            }, e.createByRandomTwoConstantSeparate = function(t, n) {
                var i = new e();
                return i._type = 2, i._separateAxes = !0, i._constantMinSeparate = t, i._constantMaxSeparate = n,
                    i;
            }, e.createByRandomTwoGradient = function(t, n) {
                var i = new e();
                return i._type = 3, i._separateAxes = !1, i._gradientMin = t, i._gradientMax = n,
                    i;
            }, e.createByRandomTwoGradientSeparate = function(t, n, i, r, a, o, s, l) {
                var h = new e();
                return h._type = 3, h._separateAxes = !0, h._gradientXMin = t, h._gradientXMax = n,
                    h._gradientYMin = i, h._gradientYMax = r, h._gradientZMin = a, h._gradientZMax = o,
                    h._gradientWMin = s, h._gradientWMax = l, h;
            }, e;
        }(),
        ut = function() {
            function e() {
                this._defaultPhysicsMemory = 16, this._editerEnvironment = !1, this.isAntialias = !0,
                    this.isAlpha = !1, this.premultipliedAlpha = !0, this.isStencil = !0, this.octreeCulling = !1,
                    this.octreeInitialSize = 64, this.octreeMinNodeSize = 2, this.octreeLooseness = 1.25,
                    this.debugFrustumCulling = !1, this.octreeInitialCenter = new Te(0, 0, 0);
            }
            r(e, "Config3D");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._defaultPhysicsMemory = this._defaultPhysicsMemory, t._editerEnvironment = this._editerEnvironment,
                    t.isAntialias = this.isAntialias, t.isAlpha = this.isAlpha, t.premultipliedAlpha = this.premultipliedAlpha,
                    t.isStencil = this.isStencil, t.octreeCulling = this.octreeCulling, this.octreeInitialCenter.cloneTo(t.octreeInitialCenter),
                    t.octreeMinNodeSize = this.octreeMinNodeSize, t.octreeLooseness = this.octreeLooseness,
                    t.debugFrustumCulling = this.debugFrustumCulling;
            }, t.clone = function() {
                var t = new e();
                return this.cloneTo(t), t;
            }, a(0, t, "defaultPhysicsMemory", function() {
                return this._defaultPhysicsMemory;
            }, function(e) {
                if (16 > e) throw "defaultPhysicsMemory must large than 16M";
                this._defaultPhysicsMemory = e;
            }), i(e, ["_default", function() {
                return this._default = new e();
            }]), e;
        }(),
        ct = (function() {
            function e(e) {
                if (this._state0U = NaN, this._state0L = NaN, this._state1U = NaN, this._state1L = NaN, !(e instanceof Array) || 4 !== e.length) throw new Error("Rand:Seed must be an array with 4 numbers");
                this._state0U = 0 | e[0], this._state0L = 0 | e[1], this._state1U = 0 | e[2], this._state1L = 0 | e[3];
            }
            r(e, "laya.d3.math.RandX");
            var t = e.prototype;
            return t.randomint = function() {
                var e = this._state0U,
                    t = this._state0L,
                    n = this._state1U,
                    i = this._state1L,
                    r = (i >>> 0) + (t >>> 0),
                    a = n + e + (r / 2 >>> 31) >>> 0,
                    o = r >>> 0;
                this._state0U = n, this._state0L = i;
                var s = 0,
                    l = 0,
                    h = 0,
                    u = 0,
                    c = 23,
                    _ = 4294967295 << 32 - c;
                s = e << c | (t & _) >>> 32 - c, l = t << c, e ^= s, t ^= l, s = e ^ n, l = t ^ i;
                var d = 18,
                    f = 4294967295 >>> 32 - d;
                h = e >>> d, u = t >>> d | (e & f) << 32 - d, s ^= h, l ^= u;
                var m = 5,
                    p = 4294967295 >>> 32 - m;
                return h = n >>> m, u = i >>> m | (n & p) << 32 - m, s ^= h, l ^= u, this._state1U = s,
                    this._state1L = l, [a, o];
            }, t.random = function() {
                var t = this.randomint(),
                    n = t[0],
                    i = t[1],
                    r = 1023 << 20,
                    a = 0,
                    o = 12,
                    s = 4294967295 >>> 32 - o,
                    l = n >>> o,
                    h = i >>> o | (n & s) << 32 - o,
                    u = r | l,
                    c = a | h;
                e._CONVERTION_BUFFER.setUint32(0, u, !1), e._CONVERTION_BUFFER.setUint32(4, c, !1);
                var _ = Pe._CONVERTION_BUFFER.getFloat64(0, !1);
                return _ - 1;
            }, i(e, ["_CONVERTION_BUFFER", function() {
                return this._CONVERTION_BUFFER = new DataView(new ArrayBuffer(8));
            }, "defaultRand", function() {
                return this.defaultRand = new Pe([0, Date.now() / 65536, 0, Date.now() % 65536]);
            }]), e;
        }(), function() {
            function e() {}
            return r(e, "laya.d3.utils.Picker"), e.calculateCursorRay = function(t, n, i, r, a, o) {
                var s = t.x,
                    l = t.y,
                    h = e._tempVector30,
                    u = h;
                u.x = s, u.y = l, u.z = n.minDepth;
                var c = e._tempVector31,
                    _ = c;
                _.x = s, _.y = l, _.z = n.maxDepth;
                var d = o.origin,
                    f = e._tempVector32;
                n.unprojectFromWVP(h, i, r, a, d), n.unprojectFromWVP(c, i, r, a, f);
                var m = o.direction;
                m.x = f.x - d.x, m.y = f.y - d.y, m.z = f.z - d.z, Te.normalize(o.direction, o.direction);
            }, e.rayIntersectsTriangle = function(t, n, i, r) {
                var a, o = e._tempVector30,
                    s = e._tempVector31;
                Te.subtract(i, n, o), Te.subtract(r, n, s);
                var l = e._tempVector32;
                Te.cross(t.direction, s, l);
                var h;
                if (h = Te.dot(o, l), h > -Number.MIN_VALUE && h < Number.MIN_VALUE) return a = Number.NaN;
                var u = 1 / h,
                    c = e._tempVector33;
                Te.subtract(t.origin, n, c);
                var _;
                if (_ = Te.dot(c, l), _ *= u, 0 > _ || _ > 1) return a = Number.NaN;
                var d = e._tempVector34;
                Te.cross(c, o, d);
                var f;
                if (f = Te.dot(t.direction, d), f *= u, 0 > f || _ + f > 1) return a = Number.NaN;
                var m;
                return m = Te.dot(s, d), m *= u, a = 0 > m ? Number.NaN : m;
            }, i(e, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }, "_tempVector32", function() {
                return this._tempVector32 = new Te();
            }, "_tempVector33", function() {
                return this._tempVector33 = new Te();
            }, "_tempVector34", function() {
                return this._tempVector34 = new Te();
            }]), e;
        }()),
        _t = function() {
            function e() {
                this._indexInList = -1, this._identifier = -1, this._position = new Ee();
            }
            r(e, "laya.d3.Touch");
            var t = e.prototype;
            return n.imps(t, {
                "laya.resource.ISingletonElement": !0
            }), t._getIndexInList = function() {
                return this._indexInList;
            }, t._setIndexInList = function(e) {
                this._indexInList = e;
            }, a(0, t, "identifier", function() {
                return this._identifier;
            }), a(0, t, "position", function() {
                return this._position;
            }), e;
        }(),
        dt = (function() {
            function e() {
                this.startPosition = new Te(), this.endPosition = new Te(), this.startColor = new xe(),
                    this.endColor = new xe();
            }
            r(e, "laya.d3.core.pixelLine.PixelLineData");
            var t = e.prototype;
            return t.cloneTo = function(e) {
                this.startPosition.cloneTo(e.startPosition), this.endPosition.cloneTo(e.endPosition),
                    this.startColor.cloneTo(e.startColor), this.endColor.cloneTo(e.endColor);
            }, e;
        }(), function() {
            function e() {
                this._lastUpdateFrame = -2147483648, this._updateFrame = -2147483648, this._isTrigger = !1,
                    this.contacts = [];
            }
            r(e, "laya.d3.physics.Collision");
            var t = e.prototype;
            return t._setUpdateFrame = function(e) {
                this._lastUpdateFrame = this._updateFrame, this._updateFrame = e;
            }, e;
        }()),
        ft = function() {
            function e(t, n) {
                this._id = 0, this._vertexStride = 0, this._vertexElementsDic = null, this._shaderValues = null,
                    this._defineDatas = null, this.vertexElements = null, this._id = ++e._uniqueIDCounter,
                    this._defineDatas = new Ue(), this._vertexElementsDic = {}, this._vertexStride = t,
                    this.vertexElements = n;
                var i = n.length;
                this._shaderValues = new ue(null);
                for (var r = 0; i > r; r++) {
                    var a = n[r],
                        o = a.elementUsage;
                    this._vertexElementsDic[o] = a;
                    var s = new Int32Array(5),
                        l = Ot.getElementInfos(a.elementFormat);
                    s[0] = l[0], s[1] = l[1], s[2] = l[2], s[3] = this._vertexStride, s[4] = a.offset,
                        this._shaderValues.setAttribute(o, s);
                }
            }
            r(e, "laya.d3.graphics.VertexDeclaration");
            var t = e.prototype;
            return t.getVertexElementByUsage = function(e) {
                return this._vertexElementsDic[e];
            }, t.unBinding = function() {}, a(0, t, "id", function() {
                return this._id;
            }), a(0, t, "vertexStride", function() {
                return this._vertexStride;
            }), e._uniqueIDCounter = 1, e;
        }(),
        mt = function() {
            function e() {
                this._material = null, this._mesh = xn.instance;
            }
            r(e, "laya.d3.resource.models.SkyRenderer");
            var t = e.prototype;
            return t._isAvailable = function() {
                return this._material && this._mesh;
            }, t._render = function(e) {
                if (this._material && this._mesh) {
                    var t = v.instance,
                        n = e.scene,
                        i = e.camera;
                    B.setCullFace(t, !1), B.setDepthFunc(t, 515), B.setDepthMask(t, !1);
                    var r = e.shader = this._material._shader.getSubShaderAt(0)._passes[0].withCompile(0, 0, this._material._defineDatas.value),
                        a = r.bind(),
                        o = N.loopCount !== r._uploadMark,
                        s = r._uploadScene !== n || o;
                    (s || a) && (r.uploadUniforms(r._sceneUniformParamsMap, n._shaderValues, s), r._uploadScene = n);
                    var l = r._uploadCamera !== i || o;
                    (l || a) && (r.uploadUniforms(r._cameraUniformParamsMap, i._shaderValues, l), r._uploadCamera = i);
                    var h = r._uploadMaterial !== this._material || o;
                    (h || a) && (r.uploadUniforms(r._materialUniformParamsMap, this._material._shaderValues, h),
                        r._uploadMaterial = this._material), this._mesh._bufferState.bind(), this._mesh._render(e),
                        B.setDepthFunc(t, 513), B.setDepthMask(t, !0);
                }
            }, t.destroy = function() {
                this._material && (this._material._removeReference(), this._material = null);
            }, a(0, t, "material", function() {
                return this._material;
            }, function(e) {
                this._material !== e && (this._material && this._material._removeReference(), e && e._addReference(),
                    this._material = e);
            }), a(0, t, "mesh", function() {
                return this._mesh;
            }, function(e) {
                this._mesh !== e && (this._mesh = e);
            }), e;
        }(),
        pt = (function() {
            function e() {}
            r(e, "laya.d3.animation.AnimatorStateScript");
            var t = e.prototype;
            return t.onStateEnter = function() {}, t.onStateUpdate = function() {}, t.onStateExit = function() {},
                e;
        }(), function() {
            function e() {
                this.updateMark = -1, this.indexInList = -1, this.batched = !1;
            }
            return r(e, "laya.d3.core.render.BatchMark"), e;
        }()),
        Tt = function() {
            function e() {
                this.succeeded = !1, this.collider = null, this.hitFraction = 0, this.point = new Te(),
                    this.normal = new Te();
            }
            return r(e, "laya.d3.physics.HitResult"), e;
        }(),
        Et = function() {
            function e() {
                this._type = 0, this._separateAxes = !1, this._gradient = null, this._gradientX = null,
                    this._gradientY = null, this._gradientZ = null, this._constantMin = NaN, this._constantMax = NaN,
                    this._constantMinSeparate = null, this._constantMaxSeparate = null, this._gradientMin = null,
                    this._gradientMax = null, this._gradientXMin = null, this._gradientXMax = null,
                    this._gradientYMin = null, this._gradientYMax = null, this._gradientZMin = null,
                    this._gradientZMax = null;
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientSize");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.getMaxSizeInGradient = function() {
                var e = 0,
                    t = 0,
                    n = -Number.MAX_VALUE;
                switch (this._type) {
                    case 0:
                        if (this._separateAxes) {
                            for (e = 0, t = this._gradientX.gradientCount; t > e; e++) n = Math.max(n, this._gradientX.getValueByIndex(e));
                            for (e = 0, t = this._gradientY.gradientCount; t > e; e++) n = Math.max(n, this._gradientY.getValueByIndex(e));
                        } else
                            for (e = 0, t = this._gradient.gradientCount; t > e; e++) n = Math.max(n, this._gradient.getValueByIndex(e));
                        break;

                    case 1:
                        this._separateAxes ? (n = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x),
                            n = Math.max(n, this._constantMinSeparate.y), n = Math.max(n, this._constantMaxSeparate.y)) : n = Math.max(this._constantMin, this._constantMax);
                        break;

                    case 2:
                        if (this._separateAxes) {
                            for (e = 0, t = this._gradientXMin.gradientCount; t > e; e++) n = Math.max(n, this._gradientXMin.getValueByIndex(e));
                            for (e = 0, t = this._gradientXMax.gradientCount; t > e; e++) n = Math.max(n, this._gradientXMax.getValueByIndex(e));
                            for (e = 0, t = this._gradientYMin.gradientCount; t > e; e++) n = Math.max(n, this._gradientYMin.getValueByIndex(e));
                            for (e = 0, t = this._gradientZMax.gradientCount; t > e; e++) n = Math.max(n, this._gradientZMax.getValueByIndex(e));
                        } else {
                            for (e = 0, t = this._gradientMin.gradientCount; t > e; e++) n = Math.max(n, this._gradientMin.getValueByIndex(e));
                            for (e = 0, t = this._gradientMax.gradientCount; t > e; e++) n = Math.max(n, this._gradientMax.getValueByIndex(e));
                        }
                }
                return n;
            }, t.cloneTo = function(e) {
                var t = e;
                t._type = this._type, t._separateAxes = this._separateAxes, this._gradient.cloneTo(t._gradient),
                    this._gradientX.cloneTo(t._gradientX), this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ),
                    t._constantMin = this._constantMin, t._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(t._constantMinSeparate),
                    this._constantMaxSeparate.cloneTo(t._constantMaxSeparate), this._gradientMin.cloneTo(t._gradientMin),
                    this._gradientMax.cloneTo(t._gradientMax), this._gradientXMin.cloneTo(t._gradientXMin),
                    this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin),
                    this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin),
                    this._gradientZMax.cloneTo(t._gradientZMax);
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradientZ", function() {
                return this._gradientZ;
            }), a(0, t, "gradient", function() {
                return this._gradient;
            }), a(0, t, "separateAxes", function() {
                return this._separateAxes;
            }), a(0, t, "type", function() {
                return this._type;
            }), a(0, t, "gradientMin", function() {
                return this._gradientMin;
            }), a(0, t, "constantMin", function() {
                return this._constantMin;
            }), a(0, t, "gradientX", function() {
                return this._gradientX;
            }), a(0, t, "gradientY", function() {
                return this._gradientY;
            }), a(0, t, "gradientMax", function() {
                return this._gradientMax;
            }), a(0, t, "constantMax", function() {
                return this._constantMax;
            }), a(0, t, "constantMinSeparate", function() {
                return this._constantMinSeparate;
            }), a(0, t, "constantMaxSeparate", function() {
                return this._constantMaxSeparate;
            }), a(0, t, "gradientXMin", function() {
                return this._gradientXMin;
            }), a(0, t, "gradientXMax", function() {
                return this._gradientXMax;
            }), a(0, t, "gradientYMin", function() {
                return this._gradientYMin;
            }), a(0, t, "gradientYMax", function() {
                return this._gradientYMax;
            }), a(0, t, "gradientZMin", function() {
                return this._gradientZMin;
            }), a(0, t, "gradientZMax", function() {
                return this._gradientZMax;
            }), e.createByGradient = function(t) {
                var n = new e();
                return n._type = 0, n._separateAxes = !1, n._gradient = t, n;
            }, e.createByGradientSeparate = function(t, n, i) {
                var r = new e();
                return r._type = 0, r._separateAxes = !0, r._gradientX = t, r._gradientY = n, r._gradientZ = i,
                    r;
            }, e.createByRandomTwoConstant = function(t, n) {
                var i = new e();
                return i._type = 1, i._separateAxes = !1, i._constantMin = t, i._constantMax = n,
                    i;
            }, e.createByRandomTwoConstantSeparate = function(t, n) {
                var i = new e();
                return i._type = 1, i._separateAxes = !0, i._constantMinSeparate = t, i._constantMaxSeparate = n,
                    i;
            }, e.createByRandomTwoGradient = function(t, n) {
                var i = new e();
                return i._type = 2, i._separateAxes = !1, i._gradientMin = t, i._gradientMax = n,
                    i;
            }, e.createByRandomTwoGradientSeparate = function(t, n, i, r, a, o) {
                var s = new e();
                return s._type = 2, s._separateAxes = !0, s._gradientXMin = t, s._gradientXMax = n,
                    s._gradientYMin = i, s._gradientYMax = r, s._gradientZMin = a, s._gradientZMax = o,
                    s;
            }, e;
        }(),
        vt = function() {
            function e() {
                this.alphaMap = null, this.detailID = null, this.normalMap = null;
            }
            return r(e, "laya.d3.terrain.unit.ChunkInfo"), e;
        }(),
        gt = function() {
            function e() {
                this.textureID = -1;
            }
            return r(e, "laya.d3.shader.ShaderVariable"), e;
        }(),
        St = function() {
            function e() {
                this._indexInList = 0, this.type = 0, this.fullPath = null, this.propertyOwner = null,
                    this.data = null, this._ownerPath = [], this._propertys = [], this._keyFrames = [];
            }
            r(e, "laya.d3.animation.KeyframeNode");
            var t = e.prototype;
            return t._setOwnerPathCount = function(e) {
                this._ownerPath.length = e;
            }, t._setOwnerPathByIndex = function(e, t) {
                this._ownerPath[e] = t;
            }, t._joinOwnerPath = function(e) {
                return this._ownerPath.join(e);
            }, t._setPropertyCount = function(e) {
                this._propertys.length = e;
            }, t._setPropertyByIndex = function(e, t) {
                this._propertys[e] = t;
            }, t._joinProperty = function(e) {
                return this._propertys.join(e);
            }, t._setKeyframeCount = function(e) {
                this._keyFrames.length = e;
            }, t._setKeyframeByIndex = function(e, t) {
                this._keyFrames[e] = t;
            }, t.getOwnerPathByIndex = function(e) {
                return this._ownerPath[e];
            }, t.getPropertyByIndex = function(e) {
                return this._propertys[e];
            }, t.getKeyframeByIndex = function(e) {
                return this._keyFrames[e];
            }, a(0, t, "ownerPathCount", function() {
                return this._ownerPath.length;
            }), a(0, t, "propertyCount", function() {
                return this._propertys.length;
            }), a(0, t, "keyFramesCount", function() {
                return this._keyFrames.length;
            }), e;
        }(),
        yt = function() {
            function e() {
                this._type = 0, this._constant = null, this._gradientX = null, this._gradientY = null,
                    this._gradientZ = null, this._constantMin = null, this._constantMax = null, this._gradientXMin = null,
                    this._gradientXMax = null, this._gradientYMin = null, this._gradientYMax = null,
                    this._gradientZMin = null, this._gradientZMax = null;
            }
            r(e, "laya.d3.core.particleShuriKen.module.GradientVelocity");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._type = this._type, this._constant.cloneTo(t._constant), this._gradientX.cloneTo(t._gradientX),
                    this._gradientY.cloneTo(t._gradientY), this._gradientZ.cloneTo(t._gradientZ), this._constantMin.cloneTo(t._constantMin),
                    this._constantMax.cloneTo(t._constantMax), this._gradientXMin.cloneTo(t._gradientXMin),
                    this._gradientXMax.cloneTo(t._gradientXMax), this._gradientYMin.cloneTo(t._gradientYMin),
                    this._gradientYMax.cloneTo(t._gradientYMax), this._gradientZMin.cloneTo(t._gradientZMin),
                    this._gradientZMax.cloneTo(t._gradientZMax);
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "gradientZ", function() {
                return this._gradientZ;
            }), a(0, t, "constant", function() {
                return this._constant;
            }), a(0, t, "type", function() {
                return this._type;
            }), a(0, t, "gradientXMax", function() {
                return this._gradientXMax;
            }), a(0, t, "constantMin", function() {
                return this._constantMin;
            }), a(0, t, "gradientX", function() {
                return this._gradientX;
            }), a(0, t, "gradientY", function() {
                return this._gradientY;
            }), a(0, t, "gradientXMin", function() {
                return this._gradientXMin;
            }), a(0, t, "constantMax", function() {
                return this._constantMax;
            }), a(0, t, "gradientYMin", function() {
                return this._gradientYMin;
            }), a(0, t, "gradientYMax", function() {
                return this._gradientYMax;
            }), a(0, t, "gradientZMin", function() {
                return this._gradientZMin;
            }), a(0, t, "gradientZMax", function() {
                return this._gradientZMax;
            }), e.createByConstant = function(t) {
                var n = new e();
                return n._type = 0, n._constant = t, n;
            }, e.createByGradient = function(t, n, i) {
                var r = new e();
                return r._type = 1, r._gradientX = t, r._gradientY = n, r._gradientZ = i, r;
            }, e.createByRandomTwoConstant = function(t, n) {
                var i = new e();
                return i._type = 2, i._constantMin = t, i._constantMax = n, i;
            }, e.createByRandomTwoGradient = function(t, n, i, r, a, o) {
                var s = new e();
                return s._type = 3, s._gradientXMin = t, s._gradientXMax = n, s._gradientYMin = i,
                    s._gradientYMax = r, s._gradientZMin = a, s._gradientZMax = o, s;
            }, e;
        }(),
        xt = function() {
            function e(e, t) {
                this._updateFlag = 0, this._center = new Te(), this._extent = new Te(), this._boundBox = new zt(new Te(), new Te()),
                    e.cloneTo(this._boundBox.min), t.cloneTo(this._boundBox.max), this._setUpdateFlag(12, !0);
            }
            r(e, "laya.d3.core.Bounds");
            var t = e.prototype;
            return n.imps(t, {
                    "laya.d3.core.IClone": !0
                }), t.setMin = function(e) {
                    var t = this._boundBox.min;
                    e !== t && e.cloneTo(t), this._setUpdateFlag(12, !0), this._setUpdateFlag(1, !1);
                }, t.getMin = function() {
                    var e = this._boundBox.min;
                    return this._getUpdateFlag(1) && (this._getMin(this.getCenter(), this.getExtent(), e),
                        this._setUpdateFlag(1, !1)), e;
                }, t.setMax = function(e) {
                    var t = this._boundBox.max;
                    e !== t && e.cloneTo(t), this._setUpdateFlag(12, !0), this._setUpdateFlag(2, !1);
                }, t.getMax = function() {
                    var e = this._boundBox.max;
                    return this._getUpdateFlag(2) && (this._getMax(this.getCenter(), this.getExtent(), e),
                        this._setUpdateFlag(2, !1)), e;
                }, t.setCenter = function(e) {
                    e !== this._center && e.cloneTo(this._center), this._setUpdateFlag(3, !0), this._setUpdateFlag(4, !1);
                }, t.getCenter = function() {
                    return this._getUpdateFlag(4) && (this._getCenter(this.getMin(), this.getMax(), this._center),
                        this._setUpdateFlag(4, !1)), this._center;
                }, t.setExtent = function(e) {
                    e !== this._extent && e.cloneTo(this._extent), this._setUpdateFlag(3, !0), this._setUpdateFlag(8, !1);
                }, t.getExtent = function() {
                    return this._getUpdateFlag(8) && (this._getExtent(this.getMin(), this.getMax(), this._extent),
                        this._setUpdateFlag(8, !1)), this._extent;
                }, t._getUpdateFlag = function(e) {
                    return 0 != (this._updateFlag & e);
                }, t._setUpdateFlag = function(e, t) {
                    t ? this._updateFlag |= e : this._updateFlag &= ~e;
                }, t._getCenter = function(e, t, n) {
                    Te.add(e, t, n), Te.scale(n, .5, n);
                }, t._getExtent = function(e, t, n) {
                    Te.subtract(t, e, n), Te.scale(n, .5, n);
                }, t._getMin = function(e, t, n) {
                    Te.subtract(e, t, n);
                }, t._getMax = function(e, t, n) {
                    Te.add(e, t, n);
                }, t._rotateExtents = function(e, t, n) {
                    var i = e.x,
                        r = e.y,
                        a = e.z,
                        o = t.elements;
                    n.x = Math.abs(o[0] * i) + Math.abs(o[4] * r) + Math.abs(o[8] * a), n.y = Math.abs(o[1] * i) + Math.abs(o[5] * r) + Math.abs(o[9] * a),
                        n.z = Math.abs(o[2] * i) + Math.abs(o[6] * r) + Math.abs(o[10] * a);
                }, t._tranform = function(e, t) {
                    var n = t._center,
                        i = t._extent;
                    Te.transformCoordinate(this.getCenter(), e, n), this._rotateExtents(this.getExtent(), e, i),
                        t._boundBox.setCenterAndExtent(n, i), t._updateFlag = 0;
                }, t._getBoundBox = function() {
                    var e = this._boundBox.min;
                    this._getUpdateFlag(1) && (this._getMin(this.getCenter(), this.getExtent(), e),
                        this._setUpdateFlag(1, !1));
                    var t = this._boundBox.max;
                    return this._getUpdateFlag(2) && (this._getMax(this.getCenter(), this.getExtent(), t),
                        this._setUpdateFlag(2, !1)), this._boundBox;
                }, t.cloneTo = function(e) {
                    var t = e;
                    this.getMin().cloneTo(t._boundBox.min), this.getMax().cloneTo(t._boundBox.max),
                        this.getCenter().cloneTo(t._center), this.getExtent().cloneTo(t._extent), t._updateFlag = 0;
                }, t.clone = function() {
                    var e = new this.constructor();
                    return this.cloneTo(e), e;
                }, e._UPDATE_MIN = 1, e._UPDATE_MAX = 2, e._UPDATE_CENTER = 4, e._UPDATE_EXTENT = 8,
                e;
        }(),
        Dt = function() {
            function e() {
                this._type = 0, this._constant = NaN, this._constantMin = NaN, this._constantMax = NaN;
            }
            r(e, "laya.d3.core.particleShuriKen.module.StartFrame");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                t._type = this._type, t._constant = this._constant, t._constantMin = this._constantMin,
                    t._constantMax = this._constantMax;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "constant", function() {
                return this._constant;
            }), a(0, t, "type", function() {
                return this._type;
            }), a(0, t, "constantMin", function() {
                return this._constantMin;
            }), a(0, t, "constantMax", function() {
                return this._constantMax;
            }), e.createByConstant = function(t) {
                var n = new e();
                return n._type = 0, n._constant = t, n;
            }, e.createByRandomTwoConstant = function(t, n) {
                var i = new e();
                return i._type = 1, i._constantMin = t, i._constantMax = n, i;
            }, e;
        }(),
        It = function() {
            function e(e, t, n, i) {
                this._children = [], this.transform = new jt(this, e, t, n, i);
            }
            r(e, "laya.d3.animation.AnimationNode");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.addChild = function(e) {
                e._parent = this, e.transform.setParent(this.transform), this._children.push(e);
            }, t.removeChild = function(e) {
                var t = this._children.indexOf(e); -
                1 !== t && this._children.splice(t, 1);
            }, t.getChildByName = function(e) {
                for (var t = 0, n = this._children.length; n > t; t++) {
                    var i = this._children[t];
                    if (i.name === e) return i;
                }
                return null;
            }, t.getChildByIndex = function(e) {
                return this._children[e];
            }, t.getChildCount = function() {
                return this._children.length;
            }, t.cloneTo = function(e) {
                var t = e;
                t.name = this.name;
                for (var n = 0, i = this._children.length; i > n; n++) {
                    var r = this._children[n],
                        a = r.clone();
                    t.addChild(a);
                    var o = r.transform,
                        s = a.transform,
                        l = s.localPosition,
                        h = s.localRotation,
                        u = s.localScale;
                    o.localPosition.cloneTo(l), o.localRotation.cloneTo(h), o.localScale.cloneTo(u),
                        s.localPosition = l, s.localRotation = h, s.localScale = u;
                }
            }, t.clone = function() {
                var t = new e();
                return this.cloneTo(t), t;
            }, t._cloneNative = function(t, n, i, r, a, o, s) {
                var l = s._nativeCurCloneCount;
                a[l] = o;
                var h = new Float32Array(t.buffer, 3 * l * 4, 3),
                    u = new Float32Array(n.buffer, 4 * l * 4, 4),
                    c = new Float32Array(i.buffer, 3 * l * 4, 3),
                    _ = new Float32Array(r.buffer, 16 * l * 4, 16),
                    d = new e(h, u, c, _);
                return d._worldMatrixIndex = l, this._cloneToNative(d, t, n, i, r, a, l, s), d;
            }, t._cloneToNative = function(e, t, n, i, r, a, o, s) {
                var l = e;
                l.name = this.name;
                for (var h = 0, u = this._children.length; u > h; h++) {
                    var c = this._children[h];
                    s._nativeCurCloneCount++;
                    var _ = c._cloneNative(t, n, i, r, a, o, s);
                    l.addChild(_);
                    var d = c.transform,
                        f = _.transform,
                        m = f.localPosition,
                        p = f.localRotation,
                        T = f.localScale;
                    d.localPosition.cloneTo(m), d.localRotation.cloneTo(p), d.localScale.cloneTo(T),
                        f.localPosition = m, f.localRotation = p, f.localScale = T;
                }
            }, e;
        }(),
        Rt = function() {
            function e() {
                this._context = null, this._compositeShader = Ve.find("PostProcessComposite"), this._compositeShaderData = new ue(),
                    this._compositeDefineData = new Ue(), this._effects = [], this._context = new st(),
                    this._context.compositeShaderData = this._compositeShaderData, this._context.compositeDefineData = this._compositeDefineData;
            }
            r(e, "laya.d3.component.PostProcess");
            var t = e.prototype;
            return t._init = function(e, t) {
                this._context.camera = e, this._context.command = t;
            }, t._render = function() {
                var e = pi.getTemporary(J.clientWidth, J.clientHeight, 0, 3),
                    t = this._context.camera.getRenderTexture();
                this._context.command.clear(), this._context.source = e, this._context.destination = t;
                for (var n = 0, i = this._effects.length; i > n; n++) this._effects[n].render(this._context);
                pi.setReleaseTemporary(e);
                var r = this._context.tempRenderTextures;
                for (n = 0, i = r.length; i > n; n++) pi.setReleaseTemporary(r[n]);
            }, t.addEffect = function(e) {
                this._effects.push(e);
            }, t.removeEffect = function(e) {
                var t = this._effects.indexOf(e); -
                1 !== t && this._effects.splice(t, 1);
            }, e.__init__ = function() {
                e.SHADERDEFINE_BLOOM_LOW = e.shaderDefines.registerDefine("BLOOM_LOW"), e.SHADERDEFINE_BLOOM = e.shaderDefines.registerDefine("BLOOM");
            }, e.SHADERDEFINE_BLOOM_LOW = 0, e.SHADERDEFINE_BLOOM = 0, i(e, ["SHADERVALUE_MAINTEX", function() {
                return this.SHADERVALUE_MAINTEX = Ve.propertyNameToID("u_MainTex");
            }, "SHADERVALUE_BLOOMTEX", function() {
                return this.SHADERVALUE_BLOOMTEX = Ve.propertyNameToID("u_BloomTex");
            }, "SHADERVALUE_AUTOEXPOSURETEX", function() {
                return this.SHADERVALUE_AUTOEXPOSURETEX = Ve.propertyNameToID("u_AutoExposureTex");
            }, "SHADERVALUE_BLOOM_DIRTTEX", function() {
                return this.SHADERVALUE_BLOOM_DIRTTEX = Ve.propertyNameToID("u_Bloom_DirtTex");
            }, "SHADERVALUE_BLOOMTEX_TEXELSIZE", function() {
                return this.SHADERVALUE_BLOOMTEX_TEXELSIZE = Ve.propertyNameToID("u_BloomTex_TexelSize");
            }, "SHADERVALUE_BLOOM_DIRTTILEOFFSET", function() {
                return this.SHADERVALUE_BLOOM_DIRTTILEOFFSET = Ve.propertyNameToID("u_Bloom_DirtTileOffset");
            }, "SHADERVALUE_BLOOM_SETTINGS", function() {
                return this.SHADERVALUE_BLOOM_SETTINGS = Ve.propertyNameToID("u_Bloom_Settings");
            }, "SHADERVALUE_BLOOM_COLOR", function() {
                return this.SHADERVALUE_BLOOM_COLOR = Ve.propertyNameToID("u_Bloom_Color");
            }, "shaderDefines", function() {
                return this.shaderDefines = new pe();
            }]), e;
        }(),
        Mt = function() {
            function e(e, t, n, i) {
                this.minDepth = 0, this.maxDepth = 1, this.x = e, this.y = t, this.width = n, this.height = i;
            }
            r(e, "laya.d3.math.Viewport");
            var t = e.prototype;
            return t.project = function(e, t, n) {
                Te.transformV3ToV3(e, t, n);
                var i = t.elements,
                    r = e.x * i[3] + e.y * i[7] + e.z * i[11] + i[15];
                1 !== r && (n.x = n.x / r, n.y = n.y / r, n.z = n.z / r), n.x = .5 * (n.x + 1) * this.width + this.x,
                    n.y = .5 * (-n.y + 1) * this.height + this.y, n.z = n.z * (this.maxDepth - this.minDepth) + this.minDepth;
            }, t.project1 = function(e, t, n) {
                var i = Te._tempVector4;
                Te.transformV3ToV4(e, t, i);
                var r = i.w;
                .1 > r && r > -1e-6 && (r = 1e-6), i.x /= r, i.y /= r, i.z /= r, n.x = (i.x + 1) * this.width / 2 + this.x,
                    n.y = (-i.y + 1) * this.height / 2 + this.y, n.z = i.w;
            }, t.unprojectFromMat = function(e, t, n) {
                var i = t.elements;
                n.x = (e.x - this.x) / this.width * 2 - 1, n.y = -((e.y - this.y) / this.height * 2 - 1);
                var r = (this.maxDepth - this.minDepth) / 2;
                n.z = (e.z - this.minDepth - r) / r;
                var a = n.x * i[3] + n.y * i[7] + n.z * i[11] + i[15];
                Te.transformV3ToV3(n, t, n), 1 !== a && (n.x = n.x / a, n.y = n.y / a, n.z = n.z / a);
            }, t.unprojectFromWVP = function(t, n, i, r, a) {
                Ht.multiply(n, i, e._tempMatrix4x4), r && Ht.multiply(e._tempMatrix4x4, r, e._tempMatrix4x4),
                    e._tempMatrix4x4.invert(e._tempMatrix4x4), this.unprojectFromMat(t, e._tempMatrix4x4, a);
            }, t.cloneTo = function(e) {
                e.x = this.x, e.y = this.y, e.width = this.width, e.height = this.height, e.minDepth = this.minDepth,
                    e.maxDepth = this.maxDepth;
            }, i(e, ["_tempMatrix4x4", function() {
                return this._tempMatrix4x4 = new Ht();
            }]), e;
        }(),
        At = function() {
            function e() {
                this.diffuseTexture = null, this.normalTexture = null, this.scale = null, this.offset = null;
            }
            return r(e, "laya.d3.terrain.unit.DetailTextureInfo"), e;
        }(),
        Ct = (function() {
            function e(e, t) {
                this.extents = null, this.transformation = null, this.extents = e, this.transformation = t;
            }
            r(e, "laya.d3.math.OrientedBoundBox");
            var t = e.prototype;
            return t.getCorners = function(t) {
                e._tempV30.x = this.extents.x, e._tempV30.y = e._tempV30.z = 0, e._tempV31.y = this.extents.y,
                    e._tempV31.x = e._tempV31.z = 0, e._tempV32.z = this.extents.z, e._tempV32.x = e._tempV32.y = 0,
                    Te.TransformNormal(e._tempV30, this.transformation, e._tempV30), Te.TransformNormal(e._tempV31, this.transformation, e._tempV31),
                    Te.TransformNormal(e._tempV32, this.transformation, e._tempV32);
                var n = e._tempV33;
                this.transformation.getTranslationVector(n), t.length = 8, Te.add(n, e._tempV30, e._tempV34),
                    Te.add(e._tempV34, e._tempV31, e._tempV34), Te.add(e._tempV34, e._tempV32, t[0]),
                    Te.add(n, e._tempV30, e._tempV34), Te.add(e._tempV34, e._tempV31, e._tempV34), Te.subtract(e._tempV34, e._tempV32, t[1]),
                    Te.subtract(n, e._tempV30, e._tempV34), Te.add(e._tempV34, e._tempV31, e._tempV34),
                    Te.subtract(e._tempV34, e._tempV32, t[2]), Te.subtract(n, e._tempV30, e._tempV34),
                    Te.add(e._tempV34, e._tempV31, e._tempV34), Te.add(e._tempV34, e._tempV32, t[3]),
                    Te.add(n, e._tempV30, e._tempV34), Te.subtract(e._tempV34, e._tempV31, e._tempV34),
                    Te.add(e._tempV34, e._tempV32, t[4]), Te.add(n, e._tempV30, e._tempV34), Te.subtract(e._tempV34, e._tempV31, e._tempV34),
                    Te.subtract(e._tempV34, e._tempV32, t[5]), Te.subtract(n, e._tempV30, e._tempV34),
                    Te.subtract(e._tempV34, e._tempV31, e._tempV34), Te.subtract(e._tempV34, e._tempV32, t[6]),
                    Te.subtract(n, e._tempV30, e._tempV34), Te.subtract(e._tempV34, e._tempV31, e._tempV34),
                    Te.add(e._tempV34, e._tempV32, t[7]);
            }, t.transform = function(e) {
                Ht.multiply(this.transformation, e, this.transformation);
            }, t.scale = function(e) {
                Te.multiply(this.extents, e, this.extents);
            }, t.translate = function(t) {
                this.transformation.getTranslationVector(e._tempV30), Te.add(e._tempV30, t, e._tempV31),
                    this.transformation.setTranslationVector(e._tempV31);
            }, t.Size = function(e) {
                Te.scale(this.extents, 2, e);
            }, t.getSize = function(t) {
                e._tempV30.x = this.extents.x, e._tempV31.y = this.extents.y, e._tempV32.z = this.extents.z,
                    Te.TransformNormal(e._tempV30, this.transformation, e._tempV30), Te.TransformNormal(e._tempV31, this.transformation, e._tempV31),
                    Te.TransformNormal(e._tempV31, this.transformation, e._tempV32), t.x = Te.scalarLength(e._tempV30),
                    t.y = Te.scalarLength(e._tempV31), t.z = Te.scalarLength(e._tempV32);
            }, t.getSizeSquared = function(t) {
                e._tempV30.x = this.extents.x, e._tempV31.y = this.extents.y, e._tempV32.z = this.extents.z,
                    Te.TransformNormal(e._tempV30, this.transformation, e._tempV30), Te.TransformNormal(e._tempV31, this.transformation, e._tempV31),
                    Te.TransformNormal(e._tempV31, this.transformation, e._tempV32), t.x = Te.scalarLengthSquared(e._tempV30),
                    t.y = Te.scalarLengthSquared(e._tempV31), t.z = Te.scalarLengthSquared(e._tempV32);
            }, t.getCenter = function(e) {
                this.transformation.getTranslationVector(e);
            }, t.containsPoint = function(t) {
                var n = this.extents.x,
                    i = this.extents.y,
                    r = this.extents.z;
                this.transformation.invert(e._tempM0), Te.transformCoordinate(t, e._tempM0, e._tempV30);
                var a = Math.abs(e._tempV30.x),
                    o = Math.abs(e._tempV30.y),
                    s = Math.abs(e._tempV30.z);
                return ie.nearEqual(a, n) && ie.nearEqual(o, i) && ie.nearEqual(s, r) ? 2 : n > a && i > o && r > s ? 1 : 0;
            }, t.containsPoints = function(t) {
                var n = this.extents.x,
                    i = this.extents.y,
                    r = this.extents.z;
                this.transformation.invert(e._tempM0);
                for (var a = !0, o = !1, s = 0; s < t.length; s++) {
                    Te.transformCoordinate(t[s], e._tempM0, e._tempV30);
                    var l = Math.abs(e._tempV30.x),
                        h = Math.abs(e._tempV30.y),
                        u = Math.abs(e._tempV30.z);
                    ie.nearEqual(l, n) && ie.nearEqual(h, i) && ie.nearEqual(u, r) && (o = !0), n > l && i > h && r > u ? o = !0 : a = !1;
                }
                return a ? 1 : o ? 2 : 0;
            }, t.containsSphere = function(t, n) {
                void 0 === n && (n = !1);
                var i = this.extents.x,
                    r = this.extents.y,
                    a = this.extents.z,
                    o = t.radius;
                this.transformation.invert(e._tempM0), Te.transformCoordinate(t.center, e._tempM0, e._tempV30);
                var s = NaN;
                n ? s = o : (Te.scale(Te._UnitX, o, e._tempV31), Te.TransformNormal(e._tempV31, e._tempM0, e._tempV31),
                    s = Te.scalarLength(e._tempV31)), Te.scale(this.extents, -1, e._tempV32), Te.Clamp(e._tempV30, e._tempV32, this.extents, e._tempV33);
                var l = Te.distanceSquared(e._tempV30, e._tempV33);
                if (l > s * s) return 0;
                var h = e._tempV30.x,
                    u = e._tempV30.y,
                    c = e._tempV30.z,
                    _ = e._tempV32.x,
                    d = e._tempV32.y,
                    f = e._tempV32.z;
                return h >= _ + s && i - s >= h && i - _ > s && u >= d + s && r - s >= u && r - d > s && c >= f + s && a - s >= c && a - f > s ? 1 : 2;
            }, t.containsOrientedBoundBox = function(t) {
                var n = 0,
                    i = 0;
                t.getCorners(e._corners);
                var r = this.containsPoints(e._corners);
                if (0 != r) return r;
                e._sizeAe[0] = this.extents.x, e._sizeAe[1] = this.extents.y, e._sizeAe[2] = this.extents.z,
                    t.extents.cloneTo(e._tempV35), e._sizeBe[0] = e._tempV35.x, e._sizeBe[1] = e._tempV35.y,
                    e._sizeBe[2] = e._tempV35.z, e._getRows(this.transformation, e._rows1), e._getRows(t.transformation, e._rows2);
                var a = NaN,
                    o = NaN,
                    s = NaN,
                    l = NaN;
                for (n = 0; 4 > n; n++)
                    for (i = 0; 4 > i; i++) 3 == n || 3 == i ? (e._tempM0.setElementByRowColumn(n, i, 0),
                        e._tempM1.setElementByRowColumn(n, i, 0)) : (l = Te.dot(e._rows1[n], e._rows2[i]),
                        e._tempM0.setElementByRowColumn(n, i, l), e._tempM1.setElementByRowColumn(n, i, Math.abs(l)));
                for (t.getCenter(e._tempV34), this.getCenter(e._tempV36), Te.subtract(e._tempV34, e._tempV36, e._tempV30),
                    e._tempV31.x = Te.dot(e._tempV30, e._rows1[0]), e._tempV31.y = Te.dot(e._tempV30, e._rows1[1]),
                    e._tempV31.z = Te.dot(e._tempV30, e._rows1[2]), e._vsepAe[0] = e._tempV31.x, e._vsepAe[1] = e._tempV31.y,
                    e._vsepAe[2] = e._tempV31.z, n = 0; 3 > n; n++)
                    if (e._tempV32.x = e._tempM1.getElementByRowColumn(n, 0),
                        e._tempV32.y = e._tempM1.getElementByRowColumn(n, 1), e._tempV32.z = e._tempM1.getElementByRowColumn(n, 2),
                        a = e._sizeAe[n], o = Te.dot(e._tempV35, e._tempV32), s = Math.abs(e._vsepAe[n]),
                        s > a + o) return 0;
                for (i = 0; 3 > i; i++)
                    if (e._tempV32.x = e._tempM1.getElementByRowColumn(0, i),
                        e._tempV32.y = e._tempM1.getElementByRowColumn(1, i), e._tempV32.z = e._tempM1.getElementByRowColumn(2, i),
                        e._tempV33.x = e._tempM0.getElementByRowColumn(0, i), e._tempV33.y = e._tempM0.getElementByRowColumn(1, i),
                        e._tempV33.z = e._tempM0.getElementByRowColumn(2, i), a = Te.dot(this.extents, e._tempV32),
                        o = e._sizeBe[i], s = Math.abs(Te.dot(e._tempV31, e._tempV33)), s > a + o) return 0;
                for (n = 0; 3 > n; n++)
                    for (i = 0; 3 > i; i++) {
                        var h = (n + 1) % 3,
                            u = (n + 2) % 3,
                            c = (i + 1) % 3,
                            _ = (i + 2) % 3;
                        if (a = e._sizeAe[h] * e._tempM1.getElementByRowColumn(u, i) + e._sizeAe[u] * e._tempM1.getElementByRowColumn(h, i),
                            o = e._sizeBe[c] * e._tempM1.getElementByRowColumn(n, _) + e._sizeBe[_] * e._tempM1.getElementByRowColumn(n, c),
                            s = Math.abs(e._vsepAe[u] * e._tempM0.getElementByRowColumn(h, i) - e._vsepAe[h] * e._tempM0.getElementByRowColumn(u, i)),
                            s > a + o) return 0;
                    }
                return 2;
            }, t.containsLine = function(t, n) {
                e._corners[0] = t, e._corners[1] = n;
                var i = this.containsPoints(e._corners);
                if (0 != i) return i;
                var r = this.extents.x,
                    a = this.extents.y,
                    o = this.extents.z;
                this.transformation.invert(e._tempM0), Te.transformCoordinate(t, e._tempM0, e._tempV30),
                    Te.transformCoordinate(n, e._tempM0, e._tempV31), Te.add(e._tempV30, e._tempV31, e._tempV32),
                    Te.scale(e._tempV32, .5, e._tempV32), Te.subtract(e._tempV30, e._tempV32, e._tempV33);
                var s = e._tempV33.x,
                    l = e._tempV33.y,
                    h = e._tempV33.z,
                    u = e._tempV34.x = Math.abs(e._tempV33.x),
                    c = e._tempV34.y = Math.abs(e._tempV33.y),
                    _ = e._tempV34.z = Math.abs(e._tempV33.z),
                    d = e._tempV32.x,
                    f = e._tempV32.y,
                    m = e._tempV32.z;
                return Math.abs(d) > r + u ? 0 : Math.abs(f) > a + c ? 0 : Math.abs(m) > o + _ ? 0 : Math.abs(f * h - m * l) > a * _ + o * c ? 0 : Math.abs(d * h - m * s) > r * _ + o * u ? 0 : Math.abs(d * l - f * s) > r * c + a * u ? 0 : 2;
            }, t.containsBoundBox = function(t) {
                var n = 0,
                    i = 0,
                    r = t.min,
                    a = t.max;
                t.getCorners(e._corners);
                var o = this.containsPoints(e._corners);
                if (0 != o) return o;
                Te.subtract(a, r, e._tempV30), Te.scale(e._tempV30, .5, e._tempV30), Te.add(r, e._tempV30, e._tempV30),
                    Te.subtract(a, e._tempV30, e._tempV31), e._sizeAe[0] = this.extents.x, e._sizeAe[1] = this.extents.y,
                    e._sizeAe[2] = this.extents.z, e._sizeBe[0] = e._tempV31.x, e._sizeBe[1] = e._tempV31.y,
                    e._sizeBe[2] = e._tempV31.z, e._getRows(this.transformation, e._rows1), this.transformation.invert(e._tempM0);
                var s = NaN,
                    l = NaN,
                    h = NaN;
                for (n = 0; 3 > n; n++)
                    for (i = 0; 3 > i; i++) e._tempM1.setElementByRowColumn(n, i, Math.abs(e._tempM0.getElementByRowColumn(n, i)));
                for (this.getCenter(e._tempV35), Te.subtract(e._tempV30, e._tempV35, e._tempV32),
                    e._tempV31.x = Te.dot(e._tempV32, e._rows1[0]), e._tempV31.y = Te.dot(e._tempV32, e._rows1[1]),
                    e._tempV31.z = Te.dot(e._tempV32, e._rows1[2]), e._vsepAe[0] = e._tempV31.x, e._vsepAe[1] = e._tempV31.y,
                    e._vsepAe[2] = e._tempV31.z, n = 0; 3 > n; n++)
                    if (e._tempV33.x = e._tempM1.getElementByRowColumn(n, 0),
                        e._tempV33.y = e._tempM1.getElementByRowColumn(n, 1), e._tempV33.z = e._tempM1.getElementByRowColumn(n, 2),
                        s = e._sizeAe[n], l = Te.dot(e._tempV31, e._tempV33), h = Math.abs(e._vsepAe[n]),
                        h > s + l) return 0;
                for (i = 0; 3 > i; i++)
                    if (e._tempV33.x = e._tempM1.getElementByRowColumn(0, i),
                        e._tempV33.y = e._tempM1.getElementByRowColumn(1, i), e._tempV33.z = e._tempM1.getElementByRowColumn(2, i),
                        e._tempV34.x = e._tempM0.getElementByRowColumn(0, i), e._tempV34.y = e._tempM0.getElementByRowColumn(1, i),
                        e._tempV34.z = e._tempM0.getElementByRowColumn(2, i), s = Te.dot(this.extents, e._tempV33),
                        l = e._sizeBe[i], h = Math.abs(Te.dot(e._tempV31, e._tempV34)), h > s + l) return 0;
                for (n = 0; 3 > n; n++)
                    for (i = 0; 3 > i; i++) {
                        var u = (n + 1) % 3,
                            c = (n + 2) % 3,
                            _ = (i + 1) % 3,
                            d = (i + 2) % 3;
                        if (s = e._sizeAe[u] * e._tempM1.getElementByRowColumn(c, i) + e._sizeAe[c] * e._tempM1.getElementByRowColumn(u, i),
                            l = e._sizeBe[_] * e._tempM1.getElementByRowColumn(n, d) + e._sizeBe[d] * e._tempM1.getElementByRowColumn(n, _),
                            h = Math.abs(e._vsepAe[c] * e._tempM0.getElementByRowColumn(u, i) - e._vsepAe[u] * e._tempM0.getElementByRowColumn(c, i)),
                            h > s + l) return 0;
                    }
                return 2;
            }, t.intersectsRay = function(t, n) {
                Te.scale(this.extents, -1, e._tempV30), this.transformation.invert(e._tempM0), Te.TransformNormal(t.direction, e._tempM0, e._ray.direction),
                    Te.transformCoordinate(t.origin, e._tempM0, e._ray.origin), e._boxBound1.min = e._tempV30,
                    e._boxBound1.max = this.extents;
                var i = Ft.intersectsRayAndBoxRP(e._ray, e._boxBound1, n);
                return -1 !== i && Te.transformCoordinate(n, this.transformation, n), i;
            }, t._getLocalCorners = function(t) {
                t.length = 8, e._tempV30.x = this.extents.x, e._tempV31.y = this.extents.y, e._tempV32.z = this.extents.z,
                    Te.add(e._tempV30, e._tempV31, e._tempV33), Te.add(e._tempV33, e._tempV32, t[0]),
                    Te.add(e._tempV30, e._tempV31, e._tempV33), Te.subtract(e._tempV33, e._tempV32, t[1]),
                    Te.subtract(e._tempV31, e._tempV30, e._tempV33), Te.subtract(e._tempV33, e._tempV30, t[2]),
                    Te.subtract(e._tempV31, e._tempV30, e._tempV33), Te.add(e._tempV33, e._tempV32, t[3]),
                    Te.subtract(e._tempV30, e._tempV31, e._tempV33), Te.add(e._tempV33, e._tempV32, t[4]),
                    Te.subtract(e._tempV30, e._tempV31, e._tempV33), Te.subtract(e._tempV33, e._tempV32, t[5]),
                    Te.scale(t[0], -1, t[6]), Te.subtract(e._tempV32, e._tempV30, e._tempV33), Te.subtract(e._tempV33, e._tempV31, t[7]);
            }, t.equals = function(e) {
                return this.extents == e.extents && this.transformation == e.transformation;
            }, t.cloneTo = function(e) {
                var t = e;
                this.extents.cloneTo(t.extents), this.transformation.cloneTo(t.transformation);
            }, e.createByBoundBox = function(t, n) {
                var i = t.min,
                    r = t.max;
                Te.subtract(r, i, e._tempV30), Te.scale(e._tempV30, .5, e._tempV30), Te.add(i, e._tempV30, e._tempV31),
                    Te.subtract(r, e._tempV31, e._tempV32), Ht.translation(e._tempV31, e._tempM0);
                var a = e._tempV32.clone(),
                    o = e._tempM0.clone();
                n.extents = a, n.transformation = o;
            }, e.createByMinAndMaxVertex = function(t, n) {
                Te.subtract(n, t, e._tempV30), Te.scale(e._tempV30, .5, e._tempV30), Te.add(t, e._tempV30, e._tempV31),
                    Te.subtract(n, e._tempV31, e._tempV32), Ht.translation(e._tempV31, e._tempM0);
                var i = new e(e._tempV32, e._tempM0);
                return i;
            }, e._getRows = function(e, t) {
                t.length = 3;
                var n = e.elements;
                t[0].x = n[0], t[0].y = n[1], t[0].z = n[2], t[1].x = n[4], t[1].y = n[5], t[1].z = n[6],
                    t[2].x = n[8], t[2].y = n[9], t[2].z = n[10];
            }, e.getObbtoObbMatrix4x4 = function(t, n, i, r) {
                var a = t.transformation,
                    o = n.transformation;
                if (i) {
                    e._getRows(a, e._rows1), e._getRows(o, e._rows2);
                    for (var s = 0; 3 > s; s++)
                        for (var l = 0; 3 > l; l++) r.setElementByRowColumn(s, l, Te.dot(e._rows2[s], e._rows1[l]));
                    n.getCenter(e._tempV30), t.getCenter(e._tempV31), Te.subtract(e._tempV30, e._tempV31, e._tempV32);
                    var h = r.elements;
                    h[12] = Te.dot(e._tempV32, e._rows1[0]), h[13] = Te.dot(e._tempV32, e._rows1[1]),
                        h[14] = Te.dot(e._tempV32, e._rows1[2]), h[15] = 1;
                } else a.invert(e._tempM0), Ht.multiply(o, e._tempM0, r);
            }, e.merge = function(t, n, i) {
                var r = t.extents,
                    a = t.transformation;
                e.getObbtoObbMatrix4x4(t, n, i, e._tempM0), n._getLocalCorners(e._corners), Te.transformCoordinate(e._corners[0], e._tempM0, e._corners[0]),
                    Te.transformCoordinate(e._corners[1], e._tempM0, e._corners[1]), Te.transformCoordinate(e._corners[2], e._tempM0, e._corners[2]),
                    Te.transformCoordinate(e._corners[3], e._tempM0, e._corners[3]), Te.transformCoordinate(e._corners[4], e._tempM0, e._corners[4]),
                    Te.transformCoordinate(e._corners[5], e._tempM0, e._corners[5]), Te.transformCoordinate(e._corners[6], e._tempM0, e._corners[6]),
                    Te.transformCoordinate(e._corners[7], e._tempM0, e._corners[7]), Te.scale(r, -1, e._boxBound1.min),
                    r.cloneTo(e._boxBound1.max), zt.createfromPoints(e._corners, e._boxBound2), zt.merge(e._boxBound2, e._boxBound1, e._boxBound3);
                var o = e._boxBound3.min,
                    s = e._boxBound3.max;
                Te.subtract(s, o, e._tempV30), Te.scale(e._tempV30, .5, e._tempV30), Te.add(o, e._tempV30, e._tempV32),
                    Te.subtract(s, e._tempV32, r), Te.transformCoordinate(e._tempV32, a, e._tempV33);
            }, i(e, ["_tempV30", function() {
                return this._tempV30 = new Te();
            }, "_tempV31", function() {
                return this._tempV31 = new Te();
            }, "_tempV32", function() {
                return this._tempV32 = new Te();
            }, "_tempV33", function() {
                return this._tempV33 = new Te();
            }, "_tempV34", function() {
                return this._tempV34 = new Te();
            }, "_tempV35", function() {
                return this._tempV35 = new Te();
            }, "_tempV36", function() {
                return this._tempV36 = new Te();
            }, "_tempM0", function() {
                return this._tempM0 = new Ht();
            }, "_tempM1", function() {
                return this._tempM1 = new Ht();
            }, "_corners", function() {
                return this._corners = [new Te(), new Te(), new Te(), new Te(), new Te(), new Te(), new Te(), new Te()];
            }, "_rows1", function() {
                return this._rows1 = [new Te(), new Te(), new Te()];
            }, "_rows2", function() {
                return this._rows2 = [new Te(), new Te(), new Te()];
            }, "_ray", function() {
                return this._ray = new j(new Te(), new Te());
            }, "_boxBound1", function() {
                return this._boxBound1 = new zt(new Te(), new Te());
            }, "_boxBound2", function() {
                return this._boxBound2 = new zt(new Te(), new Te());
            }, "_boxBound3", function() {
                return this._boxBound3 = new zt(new Te(), new Te());
            }, "_vsepAe", function() {
                return this._vsepAe = new Float32Array();
            }, "_sizeBe", function() {
                return this._sizeBe = new Float32Array();
            }, "_sizeAe", function() {
                return this._sizeAe = new Float32Array();
            }]), e;
        }(), function() {
            function e(e) {
                void 0 === e && (e = !1), this.isTransparent = e, this.elements = [];
            }
            r(e, "laya.d3.core.render.RenderQueue");
            var t = e.prototype;
            return t._compare = function(e, t) {
                var n = e.material.renderQueue - t.material.renderQueue;
                if (0 === n) {
                    var i = this.isTransparent ? t.render._distanceForSort - e.render._distanceForSort : e.render._distanceForSort - t.render._distanceForSort;
                    return i + t.render.sortingFudge - e.render.sortingFudge;
                }
                return n;
            }, t._partitionRenderObject = function(e, t) {
                for (var n = this.elements[Math.floor((t + e) / 2)]; t >= e;) {
                    for (; this._compare(this.elements[e], n) < 0;) e++;
                    for (; this._compare(this.elements[t], n) > 0;) t--;
                    if (t > e) {
                        var i = this.elements[e];
                        this.elements[e] = this.elements[t], this.elements[t] = i, e++, t--;
                    } else if (e === t) {
                        e++;
                        break;
                    }
                }
                return e;
            }, t._quickSort = function(e, t) {
                if (this.elements.length > 1) {
                    var n = this._partitionRenderObject(e, t),
                        i = n - 1;
                    i > e && this._quickSort(e, i), t > n && this._quickSort(n, t);
                }
            }, t._render = function(e, t, n, i) {
                for (var r = 0, a = this.elements.length; a > r; r++) this.elements[r]._render(e, t, n, i);
            }, t.clear = function() {
                this.elements.length = 0, this.lastTransparentRenderElement = null, this.lastTransparentBatched = !1;
            }, e;
        }()),
        Lt = (function() {
            function e() {}
            return r(e, "laya.d3.core.TextureMode"), e.Stretch = 0, e.Tile = 1, e;
        }(), function() {
            function e() {}
            return r(e, "laya.d3.physics.shape.HeightfieldColliderShape"), e;
        }(), function() {
            function e() {}
            return r(e, "laya.d3.core.particleShuriKen.module.shape.ShapeUtils"), e._randomPointUnitArcCircle = function(e, t, n) {
                var i = NaN;
                i = n ? n.getFloat() * e : Math.random() * e, t.x = Math.cos(i), t.y = Math.sin(i);
            }, e._randomPointInsideUnitArcCircle = function(t, n, i) {
                e._randomPointUnitArcCircle(t, n, i);
                var r = NaN;
                r = i ? Math.pow(i.getFloat(), .5) : Math.pow(Math.random(), .5), n.x = n.x * r,
                    n.y = n.y * r;
            }, e._randomPointUnitCircle = function(e, t) {
                var n = NaN;
                n = t ? t.getFloat() * Math.PI * 2 : Math.random() * Math.PI * 2, e.x = Math.cos(n),
                    e.y = Math.sin(n);
            }, e._randomPointInsideUnitCircle = function(t, n) {
                e._randomPointUnitCircle(t);
                var i = NaN;
                i = n ? Math.pow(n.getFloat(), .5) : Math.pow(Math.random(), .5), t.x = t.x * i,
                    t.y = t.y * i;
            }, e._randomPointUnitSphere = function(e, t) {
                var n = NaN,
                    i = NaN;
                t ? (n = e.z = 2 * t.getFloat() - 1, i = t.getFloat() * Math.PI * 2) : (n = e.z = 2 * Math.random() - 1,
                    i = Math.random() * Math.PI * 2);
                var r = Math.sqrt(1 - n * n);
                e.x = r * Math.cos(i), e.y = r * Math.sin(i);
            }, e._randomPointInsideUnitSphere = function(t, n) {
                e._randomPointUnitSphere(t);
                var i = NaN;
                i = n ? Math.pow(n.getFloat(), 1 / 3) : Math.pow(Math.random(), 1 / 3), t.x = t.x * i,
                    t.y = t.y * i, t.z = t.z * i;
            }, e._randomPointInsideHalfUnitBox = function(e, t) {
                t ? (e.x = t.getFloat() - .5, e.y = t.getFloat() - .5, e.z = t.getFloat() - .5) : (e.x = Math.random() - .5,
                    e.y = Math.random() - .5, e.z = Math.random() - .5);
            }, e;
        }()),
        Ot = function() {
            function e() {}
            return r(e, "laya.d3.graphics.VertexElementFormat"), e.getElementInfos = function(t) {
                    var n = e._elementInfos[t];
                    if (n) return n;
                    throw "VertexElementFormat: this vertexElementFormat is not implement.";
                }, e.Single = "single", e.Vector2 = "vector2", e.Vector3 = "vector3", e.Vector4 = "vector4",
                e.Color = "color", e.Byte4 = "byte4", e.Short2 = "short2", e.Short4 = "short4",
                e.NormalizedShort2 = "normalizedshort2", e.NormalizedShort4 = "normalizedshort4",
                e.HalfVector2 = "halfvector2", e.HalfVector4 = "halfvector4", i(e, ["_elementInfos", function() {
                    return this._elementInfos = {
                        single: [1, 5126, 0],
                        vector2: [2, 5126, 0],
                        vector3: [3, 5126, 0],
                        vector4: [4, 5126, 0],
                        color: [4, 5126, 0],
                        byte4: [4, 5121, 0],
                        short2: [2, 5126, 0],
                        short4: [4, 5126, 0],
                        normalizedshort2: [2, 5126, 0],
                        normalizedshort4: [4, 5126, 0],
                        halfvector2: [2, 5126, 0],
                        halfvector4: [4, 5126, 0]
                    };
                }]), e;
        }(),
        Nt = function() {
            function e(e) {
                this._angularVelocity = null, this.enbale = !1, this._angularVelocity = e;
            }
            r(e, "laya.d3.core.particleShuriKen.module.RotationOverLifetime");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.cloneTo = function(e) {
                var t = e;
                this._angularVelocity.cloneTo(t._angularVelocity), t.enbale = this.enbale;
            }, t.clone = function() {
                var e;
                switch (this._angularVelocity.type) {
                    case 0:
                        e = this._angularVelocity.separateAxes ? ht.createByConstantSeparate(this._angularVelocity.constantSeparate.clone()) : ht.createByConstant(this._angularVelocity.constant);
                        break;

                    case 1:
                        e = this._angularVelocity.separateAxes ? ht.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone()) : ht.createByGradient(this._angularVelocity.gradient.clone());
                        break;

                    case 2:
                        e = this._angularVelocity.separateAxes ? ht.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone()) : ht.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);
                        break;

                    case 3:
                        e = this._angularVelocity.separateAxes ? ht.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone()) : ht.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());
                }
                var t = new this.constructor(e);
                return t.enbale = this.enbale, t;
            }, a(0, t, "angularVelocity", function() {
                return this._angularVelocity;
            }), e;
        }(),
        Vt = function() {
            function e(t) {
                this._matrix = null, this._near = null, this._far = null, this._left = null, this._right = null,
                    this._top = null, this._bottom = null, this._matrix = t, this._near = new oe(new Te()),
                    this._far = new oe(new Te()), this._left = new oe(new Te()), this._right = new oe(new Te()),
                    this._top = new oe(new Te()), this._bottom = new oe(new Te()), e._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
            }
            r(e, "laya.d3.math.BoundFrustum");
            var t = e.prototype;
            return t.equalsBoundFrustum = function(e) {
                return this._matrix.equalsOtherMatrix(e.matrix);
            }, t.equalsObj = function(e) {
                if (e instanceof laya.d3.math.BoundFrustum) {
                    var t = e;
                    return this.equalsBoundFrustum(t);
                }
                return !1;
            }, t.getPlane = function(e) {
                switch (e) {
                    case 0:
                        return this._near;

                    case 1:
                        return this._far;

                    case 2:
                        return this._left;

                    case 3:
                        return this._right;

                    case 4:
                        return this._top;

                    case 5:
                        return this._bottom;

                    default:
                        return null;
                }
            }, t.getCorners = function(t) {
                e._get3PlaneInterPoint(this._near, this._bottom, this._right).cloneTo(t[0]), e._get3PlaneInterPoint(this._near, this._top, this._right).cloneTo(t[1]),
                    e._get3PlaneInterPoint(this._near, this._top, this._left).cloneTo(t[2]), e._get3PlaneInterPoint(this._near, this._bottom, this._left).cloneTo(t[3]),
                    e._get3PlaneInterPoint(this._far, this._bottom, this._right).cloneTo(t[4]), e._get3PlaneInterPoint(this._far, this._top, this._right).cloneTo(t[5]),
                    e._get3PlaneInterPoint(this._far, this._top, this._left).cloneTo(t[6]), e._get3PlaneInterPoint(this._far, this._bottom, this._left).cloneTo(t[7]);
            }, t.containsPoint = function(e) {
                for (var t = oe.PlaneIntersectionType_Front, n = oe.PlaneIntersectionType_Front, i = 0; 6 > i; i++) {
                    switch (i) {
                        case 0:
                            n = Ft.intersectsPlaneAndPoint(this._near, e);
                            break;

                        case 1:
                            n = Ft.intersectsPlaneAndPoint(this._far, e);
                            break;

                        case 2:
                            n = Ft.intersectsPlaneAndPoint(this._left, e);
                            break;

                        case 3:
                            n = Ft.intersectsPlaneAndPoint(this._right, e);
                            break;

                        case 4:
                            n = Ft.intersectsPlaneAndPoint(this._top, e);
                            break;

                        case 5:
                            n = Ft.intersectsPlaneAndPoint(this._bottom, e);
                    }
                    switch (n) {
                        case oe.PlaneIntersectionType_Back:
                            return 0;

                        case oe.PlaneIntersectionType_Intersecting:
                            t = oe.PlaneIntersectionType_Intersecting;
                    }
                }
                switch (t) {
                    case oe.PlaneIntersectionType_Intersecting:
                        return 2;

                    default:
                        return 1;
                }
            }, t.containsBoundBox = function(t) {
                for (var n = e._tempV30, i = e._tempV31, r = t.min, a = t.max, o = 1, s = 0; 6 > s; s++) {
                    var l = this.getPlane(s),
                        h = l.normal;
                    if (h.x >= 0 ? (n.x = a.x, i.x = r.x) : (n.x = r.x, i.x = a.x), h.y >= 0 ? (n.y = a.y,
                            i.y = r.y) : (n.y = r.y, i.y = a.y), h.z >= 0 ? (n.z = a.z, i.z = r.z) : (n.z = r.z,
                            i.z = a.z), Ft.intersectsPlaneAndPoint(l, n) === oe.PlaneIntersectionType_Back) return 0;
                    Ft.intersectsPlaneAndPoint(l, i) === oe.PlaneIntersectionType_Back && (o = 2);
                }
                return o;
            }, t.containsBoundSphere = function(e) {
                for (var t = oe.PlaneIntersectionType_Front, n = oe.PlaneIntersectionType_Front, i = 0; 6 > i; i++) {
                    switch (i) {
                        case 0:
                            n = Ft.intersectsPlaneAndSphere(this._near, e);
                            break;

                        case 1:
                            n = Ft.intersectsPlaneAndSphere(this._far, e);
                            break;

                        case 2:
                            n = Ft.intersectsPlaneAndSphere(this._left, e);
                            break;

                        case 3:
                            n = Ft.intersectsPlaneAndSphere(this._right, e);
                            break;

                        case 4:
                            n = Ft.intersectsPlaneAndSphere(this._top, e);
                            break;

                        case 5:
                            n = Ft.intersectsPlaneAndSphere(this._bottom, e);
                    }
                    switch (n) {
                        case oe.PlaneIntersectionType_Back:
                            return 0;

                        case oe.PlaneIntersectionType_Intersecting:
                            t = oe.PlaneIntersectionType_Intersecting;
                    }
                }
                switch (t) {
                    case oe.PlaneIntersectionType_Intersecting:
                        return 2;

                    default:
                        return 1;
                }
            }, a(0, t, "top", function() {
                return this._top;
            }), a(0, t, "matrix", function() {
                return this._matrix;
            }, function(t) {
                this._matrix = t, e._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
            }), a(0, t, "near", function() {
                return this._near;
            }), a(0, t, "far", function() {
                return this._far;
            }), a(0, t, "left", function() {
                return this._left;
            }), a(0, t, "right", function() {
                return this._right;
            }), a(0, t, "bottom", function() {
                return this._bottom;
            }), e._getPlanesFromMatrix = function(e, t, n, i, r, a, o) {
                var s = e.elements,
                    l = s[0],
                    h = s[1],
                    u = s[2],
                    c = s[3],
                    _ = s[4],
                    d = s[5],
                    f = s[6],
                    m = s[7],
                    p = s[8],
                    T = s[9],
                    E = s[10],
                    v = s[11],
                    g = s[12],
                    S = s[13],
                    y = s[14],
                    x = s[15],
                    D = t.normal;
                D.x = c + u, D.y = m + f, D.z = v + E, t.distance = x + y, t.normalize();
                var I = n.normal;
                I.x = c - u, I.y = m - f, I.z = v - E, n.distance = x - y, n.normalize();
                var R = i.normal;
                R.x = c + l, R.y = m + _, R.z = v + p, i.distance = x + g, i.normalize();
                var M = r.normal;
                M.x = c - l, M.y = m - _, M.z = v - p, r.distance = x - g, r.normalize();
                var A = a.normal;
                A.x = c - h, A.y = m - d, A.z = v - T, a.distance = x - S, a.normalize();
                var C = o.normal;
                C.x = c + h, C.y = m + d, C.z = v + T, o.distance = x + S, o.normalize();
            }, e._get3PlaneInterPoint = function(t, n, i) {
                var r = t.normal,
                    a = n.normal,
                    o = i.normal;
                Te.cross(a, o, e._tempV30), Te.cross(o, r, e._tempV31), Te.cross(r, a, e._tempV32);
                var s = Te.dot(r, e._tempV30),
                    l = Te.dot(a, e._tempV31),
                    h = Te.dot(o, e._tempV32);
                Te.scale(e._tempV30, -t.distance / s, e._tempV33), Te.scale(e._tempV31, -n.distance / l, e._tempV34),
                    Te.scale(e._tempV32, -i.distance / h, e._tempV35), Te.add(e._tempV33, e._tempV34, e._tempV36),
                    Te.add(e._tempV35, e._tempV36, e._tempV37);
                var u = e._tempV37;
                return u;
            }, i(e, ["_tempV30", function() {
                return this._tempV30 = new Te();
            }, "_tempV31", function() {
                return this._tempV31 = new Te();
            }, "_tempV32", function() {
                return this._tempV32 = new Te();
            }, "_tempV33", function() {
                return this._tempV33 = new Te();
            }, "_tempV34", function() {
                return this._tempV34 = new Te();
            }, "_tempV35", function() {
                return this._tempV35 = new Te();
            }, "_tempV36", function() {
                return this._tempV36 = new Te();
            }, "_tempV37", function() {
                return this._tempV37 = new Te();
            }]), e;
        }(),
        Pt = function() {
            function e() {
                this.indexInList = -1, this.referenceCount = 0, this.updateMark = -1, this.type = -1,
                    this.fullPath = null, this.propertyOwner = null, this.property = null, this.defaultValue = null,
                    this.crossFixedValue = null;
            }
            r(e, "laya.d3.component.KeyframeNodeOwner");
            var t = e.prototype;
            return t.saveCrossFixedValue = function() {
                var e = this.propertyOwner;
                if (e) switch (this.type) {
                    case 0:
                        for (var t = this.property, n = t.length - 1, i = 0; n > i && (e = e[t[i]], e); i++);
                        this.crossFixedValue = e[t[n]];
                        break;

                    case 1:
                        var r = e.localPosition;
                        this.crossFixedValue || (this.crossFixedValue = new Te()), this.crossFixedValue.x = r.x,
                            this.crossFixedValue.y = r.y, this.crossFixedValue.z = r.z;
                        break;

                    case 2:
                        var a = e.localRotation;
                        this.crossFixedValue || (this.crossFixedValue = new he()), this.crossFixedValue.x = a.x,
                            this.crossFixedValue.y = a.y, this.crossFixedValue.z = a.z, this.crossFixedValue.w = a.w;
                        break;

                    case 3:
                        var o = e.localScale;
                        this.crossFixedValue || (this.crossFixedValue = new Te()), this.crossFixedValue.x = o.x,
                            this.crossFixedValue.y = o.y, this.crossFixedValue.z = o.z;
                        break;

                    case 4:
                        var s = e.localRotationEuler;
                        this.crossFixedValue || (this.crossFixedValue = new Te()), this.crossFixedValue.x = s.x,
                            this.crossFixedValue.y = s.y, this.crossFixedValue.z = s.z;
                        break;

                    default:
                        throw "Animator:unknown type.";
                }
            }, e;
        }(),
        wt = function() {
            function e() {}
            return r(e, "laya.d3.graphics.FrustumCulling"), e.__init__ = function() {
                R.supportWebGLPlusCulling && (e._cullingBufferLength = 0, e._cullingBuffer = new Float32Array(4096));
            }, e._drawTraversalCullingBound = function(t, n) {
                for (var i = (t.length, t.elements), r = 0, a = t.length; a > r; r++) {
                    var o = e._tempColor0;
                    o.r = 0, o.g = 1, o.b = 0, o.a = 1, ke._drawBound(n, i[r].bounds._getBoundBox(), o);
                }
            }, e._traversalCulling = function(e, t, n, i) {
                for (var r = i.length, a = i.elements, o = e.boundFrustum, s = e._transform.position, l = 0; r > l; l++) {
                    var h = a[l];
                    if (e._isLayerVisible(h._owner._layer) && h._enable)
                        if (N.frustumCulling++, !e.useOcclusionCulling || h._needRender(o)) {
                            h._visible = !0;
                            var u = h.bounds;
                            h._distanceForSort = Te.distance(u.getCenter(), s);
                            for (var c = h._renderElements, _ = 0, d = c.length; d > _; _++) {
                                var f = c[_],
                                    m = t._getRenderQueue(f.material.renderQueue);
                                m.isTransparent ? f.addToTransparentRenderQueue(n, m) : f.addToOpaqueRenderQueue(n, m);
                            }
                        } else h._visible = !1;
                    else h._visible = !1;
                }
            }, e.renderObjectCulling = function(t, n, i, r) {
                var a = 0,
                    o = 0,
                    s = n._opaqueQueue,
                    l = n._transparentQueue;
                s.clear(), l.clear();
                var h = q._managers;
                for (a = 0, o = h.length; o > a; a++) h[a]._clear();
                var u = ee._managers;
                for (a = 0, o = u.length; o > a; a++) u[a]._clear();
                var c = n._octree;
                if (c ? (c.updateMotionObjects(), c.shrinkRootIfPossible(), c.getCollidingWithFrustum(i)) : e._traversalCulling(t, n, i, r),
                    W._config.debugFrustumCulling) {
                    var _ = n._debugTool;
                    _.clear(), c ? (c.drawAllBounds(_), c.drawAllObjects(_)) : e._drawTraversalCullingBound(r, _);
                }
                var d = s.elements.length;
                d > 0 && s._quickSort(0, d - 1), d = l.elements.length, d > 0 && l._quickSort(0, d - 1);
            }, e.renderObjectCullingNative = function(t, n, i, r) {
                var a = 0,
                    o = 0,
                    s = 0,
                    l = 0,
                    h = n._opaqueQueue,
                    u = n._transparentQueue;
                h.clear(), u.clear();
                var c = q._managers;
                for (a = 0, o = c.length; o > a; a++) c[a]._clear();
                var _ = ee._managers;
                for (a = 0, o = _.length; o > a; a++) _[a]._clear();
                var d = r.length,
                    f = r.elements;
                for (a = 0; d > a; a++) f[a].bounds;
                t.boundFrustum;
                e.cullingNative(t._boundFrustumBuffer, e._cullingBuffer, n._cullingBufferIndices, d, n._cullingBufferResult);
                var m = i.camera._transform.position;
                for (a = 0; d > a; a++) {
                    var p = f[a];
                    if (t._isLayerVisible(p._owner._layer) && p._enable && n._cullingBufferResult[a]) {
                        p._visible = !0, p._distanceForSort = Te.distance(p.bounds.getCenter(), m);
                        var T = p._renderElements;
                        for (s = 0, l = T.length; l > s; s++) {
                            var E = T[s],
                                v = n._getRenderQueue(E.material.renderQueue);
                            v.isTransparent ? E.addToTransparentRenderQueue(i, v) : E.addToOpaqueRenderQueue(i, v);
                        }
                    } else p._visible = !1;
                }
                var g = h.elements.length;
                g > 0 && h._quickSort(0, g - 1), g = u.elements.length, g > 0 && u._quickSort(0, g - 1);
            }, e.cullingNative = function(e, t, n, i, r) {
                return v.instance.culling(e, t, n, i, r);
            }, e._cullingBufferLength = 0, e._cullingBuffer = null, i(e, ["_tempVector3", function() {
                return this._tempVector3 = new Te();
            }, "_tempColor0", function() {
                return this._tempColor0 = new xe();
            }]), e;
        }(),
        bt = function() {
            function e(e) {
                this._defaultState = null, this._statesMap = {}, this.playOnWake = !0, this._playType = -1,
                    this._crossMark = 0, this._crossDuration = -1, this._crossNodesOwnersIndicesMap = {},
                    this._crossNodesOwnersCount = 0, this._crossNodesOwners = [], this._currentPlayState = null,
                    this._states = [], this._playStateInfo = new ve(), this._crossPlayStateInfo = new ve(),
                    this._srcCrossClipNodeIndices = [], this._destCrossClipNodeIndices = [], this.name = e,
                    this.defaultWeight = 1, this.blendingMode = laya.d3.component.AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;
            }
            r(e, "laya.d3.component.AnimatorControllerLayer");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.getAnimatorState = function(e) {
                var t = this._statesMap[e];
                return t ? t : null;
            }, t.destroy = function() {
                this._statesMap = null, this._states = null, this._playStateInfo = null, this._crossPlayStateInfo = null,
                    this._defaultState = null;
            }, t.cloneTo = function(e) {
                var t = e;
                t.name = this.name, t.blendingMode = this.blendingMode, t.defaultWeight = this.defaultWeight,
                    t.playOnWake = this.playOnWake;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "defaultState", function() {
                return this._defaultState;
            }, function(e) {
                this._defaultState = e, this._statesMap[e.name] = e;
            }), e.BLENDINGMODE_OVERRIDE = 0, e.BLENDINGMODE_ADDTIVE = 1, e;
        }(),
        Ft = function() {
            function e() {}
            return r(e, "laya.d3.math.CollisionUtils"), e.distancePlaneToPoint = function(e, t) {
                var n = Te.dot(e.normal, t);
                return n - e.distance;
            }, e.distanceBoxToPoint = function(e, t) {
                var n = e.min,
                    i = n.x,
                    r = n.y,
                    a = n.z,
                    o = e.max,
                    s = o.x,
                    l = o.y,
                    h = o.z,
                    u = t.x,
                    c = t.y,
                    _ = t.z,
                    d = 0;
                return i > u && (d += (i - u) * (i - u)), u > s && (d += (s - u) * (s - u)), r > c && (d += (r - c) * (r - c)),
                    c > l && (d += (l - c) * (l - c)), a > _ && (d += (a - _) * (a - _)), _ > h && (d += (h - _) * (h - _)),
                    Math.sqrt(d);
            }, e.distanceBoxToBox = function(e, t) {
                var n = e.min,
                    i = n.x,
                    r = n.y,
                    a = n.z,
                    o = e.max,
                    s = o.x,
                    l = o.y,
                    h = o.z,
                    u = t.min,
                    c = u.x,
                    _ = u.y,
                    d = u.z,
                    f = t.max,
                    m = f.x,
                    p = f.y,
                    T = f.z,
                    E = 0,
                    v = NaN;
                return i > m ? (v = i - m, E += v * v) : c > s && (v = c - s, E += v * v), r > p ? (v = r - p,
                    E += v * v) : _ > l && (v = _ - l, E += v * v), a > T ? (v = a - T, E += v * v) : d > h && (v = d - h,
                    E += v * v), Math.sqrt(E);
            }, e.distanceSphereToPoint = function(e, t) {
                var n = Math.sqrt(Te.distanceSquared(e.center, t));
                return n -= e.radius, Math.max(n, 0);
            }, e.distanceSphereToSphere = function(e, t) {
                var n = Math.sqrt(Te.distanceSquared(e.center, t.center));
                return n -= e.radius + t.radius, Math.max(n, 0);
            }, e.intersectsRayAndTriangleRD = function(t, n, i, r, a) {
                var o = t.origin,
                    s = o.x,
                    l = o.y,
                    h = o.z,
                    u = t.direction,
                    c = u.x,
                    _ = u.y,
                    d = u.z,
                    f = n.x,
                    m = n.y,
                    p = n.z,
                    T = i.x,
                    E = i.y,
                    v = i.z,
                    g = r.x,
                    S = r.y,
                    y = r.z,
                    x = e._tempV30.x,
                    D = e._tempV30.y,
                    I = e._tempV30.z;
                x = T - f, D = E - m, I = v - p;
                var R = e._tempV31.x,
                    M = e._tempV31.y,
                    A = e._tempV31.z;
                R = g - f, M = S - m, A = y - p;
                var C = e._tempV32.x,
                    L = e._tempV32.y,
                    O = e._tempV32.z;
                C = _ * A - d * M, L = d * R - c * A, O = c * M - _ * R;
                var N = x * C + D * L + I * O;
                if (ie.isZero(N)) return a = 0, !1;
                var V = 1 / N,
                    P = e._tempV33.x,
                    w = e._tempV33.y,
                    b = e._tempV33.z;
                P = s - f, w = l - m, b = h - p;
                var F = P * C + w * L + b * O;
                if (F *= V, 0 > F || F > 1) return a = 0, !1;
                var B = e._tempV34.x,
                    U = e._tempV34.y,
                    z = e._tempV34.z;
                B = w * I - b * D, U = b * x - P * I, z = P * D - w * x;
                var G = c * B + _ * U + d * z;
                if (G *= V, 0 > G || F + G > 1) return a = 0, !1;
                var H = R * B + M * U + A * z;
                return H *= V, 0 > H ? (a = 0, !1) : (a = H, !0);
            }, e.intersectsRayAndTriangleRP = function(t, n, i, r, a) {
                var o = NaN;
                return e.intersectsRayAndTriangleRD(t, n, i, r, o) ? (Te.scale(t.direction, o, e._tempV30),
                    Te.add(t.origin, e._tempV30, a), !0) : (a = Te._ZERO, !1);
            }, e.intersectsRayAndPoint = function(t, n) {
                Te.subtract(t.origin, n, e._tempV30);
                var i = Te.dot(e._tempV30, t.direction),
                    r = Te.dot(e._tempV30, e._tempV30) - ie.zeroTolerance;
                if (r > 0 && i > 0) return !1;
                var a = i * i - r;
                return 0 > a ? !1 : !0;
            }, e.intersectsRayAndRay = function(t, n, i) {
                var r = t.origin,
                    a = r.x,
                    o = r.y,
                    s = r.z,
                    l = t.direction,
                    h = l.x,
                    u = l.y,
                    c = l.z,
                    _ = n.origin,
                    d = _.x,
                    f = _.y,
                    m = _.z,
                    p = n.direction,
                    T = p.x,
                    E = p.y,
                    v = p.z;
                Te.cross(l, p, e._tempV30);
                var g = e._tempV30,
                    S = Te.scalarLength(e._tempV30);
                if (ie.isZero(S) && ie.nearEqual(d, a) && ie.nearEqual(f, o) && ie.nearEqual(m, s)) return i = Te._ZERO, !0;
                S *= S;
                var y = d - a,
                    x = f - o,
                    D = m - s,
                    I = T,
                    R = E,
                    M = v,
                    A = g.x,
                    C = g.y,
                    L = g.z,
                    O = y * R * L + x * M * A + D * I * C - y * M * C - x * I * L - D * R * A;
                I = h, R = u, M = c;
                var N = O / S;
                Te.scale(l, N, e._tempV30), Te.scale(p, N, e._tempV31), Te.add(r, e._tempV30, e._tempV32),
                    Te.add(_, e._tempV31, e._tempV33);
                var V = e._tempV32,
                    P = e._tempV33;
                return ie.nearEqual(P.x, V.x) && ie.nearEqual(P.y, V.y) && ie.nearEqual(P.z, V.z) ? (i = e._tempV32, !0) : (i = Te._ZERO, !1);
            }, e.intersectsPlaneAndTriangle = function(t, n, i, r) {
                var a = e.intersectsPlaneAndPoint(t, n),
                    o = e.intersectsPlaneAndPoint(t, i),
                    s = e.intersectsPlaneAndPoint(t, r);
                return a == oe.PlaneIntersectionType_Front && o == oe.PlaneIntersectionType_Front && s == oe.PlaneIntersectionType_Front ? oe.PlaneIntersectionType_Front : a == oe.PlaneIntersectionType_Back && o == oe.PlaneIntersectionType_Back && s == oe.PlaneIntersectionType_Back ? oe.PlaneIntersectionType_Back : oe.PlaneIntersectionType_Intersecting;
            }, e.intersectsRayAndPlaneRD = function(e, t, n) {
                var i = t.normal,
                    r = Te.dot(i, e.direction);
                if (ie.isZero(r)) return n = 0, !1;
                var a = Te.dot(i, e.origin);
                return n = (-t.distance - a) / r, 0 > n ? (n = 0, !1) : !0;
            }, e.intersectsRayAndPlaneRP = function(t, n, i) {
                var r = NaN;
                return e.intersectsRayAndPlaneRD(t, n, r) ? (Te.scale(t.direction, r, e._tempV30),
                    Te.add(t.origin, e._tempV30, e._tempV31), i = e._tempV31, !0) : (i = Te._ZERO, !1);
            }, e.intersectsRayAndBoxRD = function(e, t) {
                var n = e.origin,
                    i = n.x,
                    r = n.y,
                    a = n.z,
                    o = e.direction,
                    s = o.x,
                    l = o.y,
                    h = o.z,
                    u = t.min,
                    c = u.x,
                    _ = u.y,
                    d = u.z,
                    f = t.max,
                    m = f.x,
                    p = f.y,
                    T = f.z,
                    E = 0,
                    v = ie.MaxValue;
                if (ie.isZero(s)) {
                    if (c > i || i > m) return -1;
                } else {
                    var g = 1 / s,
                        S = (c - i) * g,
                        y = (m - i) * g;
                    if (S > y) {
                        var x = S;
                        S = y, y = x;
                    }
                    if (E = Math.max(S, E), v = Math.min(y, v), E > v) return -1;
                }
                if (ie.isZero(l)) {
                    if (_ > r || r > p) return -1;
                } else {
                    var D = 1 / l,
                        I = (_ - r) * D,
                        R = (p - r) * D;
                    if (I > R) {
                        var M = I;
                        I = R, R = M;
                    }
                    if (E = Math.max(I, E), v = Math.min(R, v), E > v) return -1;
                }
                if (ie.isZero(h)) {
                    if (d > a || a > T) return -1;
                } else {
                    var A = 1 / h,
                        C = (d - a) * A,
                        L = (T - a) * A;
                    if (C > L) {
                        var O = C;
                        C = L, L = O;
                    }
                    if (E = Math.max(C, E), v = Math.min(L, v), E > v) return -1;
                }
                return E;
            }, e.intersectsRayAndBoxRP = function(t, n, i) {
                var r = e.intersectsRayAndBoxRD(t, n);
                return -1 === r ? (Te._ZERO.cloneTo(i), r) : (Te.scale(t.direction, r, e._tempV30),
                    Te.add(t.origin, e._tempV30, e._tempV31), e._tempV31.cloneTo(i), r);
            }, e.intersectsRayAndSphereRD = function(t, n) {
                var i = n.radius;
                Te.subtract(t.origin, n.center, e._tempV30);
                var r = Te.dot(e._tempV30, t.direction),
                    a = Te.dot(e._tempV30, e._tempV30) - i * i;
                if (a > 0 && r > 0) return -1;
                var o = r * r - a;
                if (0 > o) return -1;
                var s = -r - Math.sqrt(o);
                return 0 > s && (s = 0), s;
            }, e.intersectsRayAndSphereRP = function(t, n, i) {
                var r = e.intersectsRayAndSphereRD(t, n);
                return -1 === r ? (Te._ZERO.cloneTo(i), r) : (Te.scale(t.direction, r, e._tempV30),
                    Te.add(t.origin, e._tempV30, e._tempV31), e._tempV31.cloneTo(i), r);
            }, e.intersectsSphereAndTriangle = function(t, n, i, r) {
                var a = t.center,
                    o = t.radius;
                e.closestPointPointTriangle(a, n, i, r, e._tempV30), Te.subtract(e._tempV30, a, e._tempV31);
                var s = Te.dot(e._tempV31, e._tempV31);
                return o * o >= s;
            }, e.intersectsPlaneAndPoint = function(e, t) {
                var n = Te.dot(e.normal, t) + e.distance;
                return n > 0 ? oe.PlaneIntersectionType_Front : 0 > n ? oe.PlaneIntersectionType_Back : oe.PlaneIntersectionType_Intersecting;
            }, e.intersectsPlaneAndPlane = function(t, n) {
                Te.cross(t.normal, n.normal, e._tempV30);
                var i = Te.dot(e._tempV30, e._tempV30);
                return ie.isZero(i) ? !1 : !0;
            }, e.intersectsPlaneAndPlaneRL = function(t, n, i) {
                var r = t.normal,
                    a = n.normal;
                Te.cross(r, a, e._tempV34);
                var o = Te.dot(e._tempV34, e._tempV34);
                return ie.isZero(o) ? !1 : (Te.scale(a, t.distance, e._tempV30), Te.scale(r, n.distance, e._tempV31),
                    Te.subtract(e._tempV30, e._tempV31, e._tempV32), Te.cross(e._tempV32, e._tempV34, e._tempV33),
                    Te.normalize(e._tempV34, e._tempV34), i = new j(e._tempV33, e._tempV34), !0);
            }, e.intersectsPlaneAndBox = function(t, n) {
                var i = t.distance,
                    r = t.normal,
                    a = r.x,
                    o = r.y,
                    s = r.z,
                    l = n.min,
                    h = l.x,
                    u = l.y,
                    c = l.z,
                    _ = n.max,
                    d = _.x,
                    f = _.y,
                    m = _.z;
                e._tempV30.x = a > 0 ? h : d, e._tempV30.y = o > 0 ? u : f, e._tempV30.z = s > 0 ? c : m,
                    e._tempV31.x = a > 0 ? d : h, e._tempV31.y = o > 0 ? f : u, e._tempV31.z = s > 0 ? m : c;
                var p = Te.dot(r, e._tempV30);
                return p + i > 0 ? oe.PlaneIntersectionType_Front : (p = Te.dot(r, e._tempV31),
                    0 > p + i ? oe.PlaneIntersectionType_Back : oe.PlaneIntersectionType_Intersecting);
            }, e.intersectsPlaneAndSphere = function(e, t) {
                var n = t.radius,
                    i = Te.dot(e.normal, t.center) + e.distance;
                return i > n ? oe.PlaneIntersectionType_Front : -n > i ? oe.PlaneIntersectionType_Back : oe.PlaneIntersectionType_Intersecting;
            }, e.intersectsBoxAndBox = function(e, t) {
                var n = e.min,
                    i = e.max,
                    r = t.min,
                    a = t.max;
                return n.x > a.x || r.x > i.x ? !1 : n.y > a.y || r.y > i.y ? !1 : n.z > a.z || r.z > i.z ? !1 : !0;
            }, e.intersectsBoxAndSphere = function(t, n) {
                var i = n.center,
                    r = n.radius;
                Te.Clamp(i, t.min, t.max, e._tempV30);
                var a = Te.distanceSquared(i, e._tempV30);
                return r * r >= a;
            }, e.intersectsSphereAndSphere = function(e, t) {
                var n = e.radius + t.radius;
                return Te.distanceSquared(e.center, t.center) <= n * n;
            }, e.boxContainsPoint = function(e, t) {
                var n = e.min,
                    i = e.max;
                return n.x <= t.x && i.x >= t.x && n.y <= t.y && i.y >= t.y && n.z <= t.z && i.z >= t.z ? 1 : 0;
            }, e.boxContainsBox = function(e, t) {
                var n = e.min,
                    i = n.x,
                    r = n.y,
                    a = n.z,
                    o = e.max,
                    s = o.x,
                    l = o.y,
                    h = o.z,
                    u = t.min,
                    c = u.x,
                    _ = u.y,
                    d = u.z,
                    f = t.max,
                    m = f.x,
                    p = f.y,
                    T = f.z;
                return c > s || i > m ? 0 : _ > l || r > p ? 0 : d > h || a > T ? 0 : c >= i && s >= m && _ >= r && l >= p && d >= a && h >= T ? 1 : 2;
            }, e.boxContainsSphere = function(t, n) {
                var i = t.min,
                    r = i.x,
                    a = i.y,
                    o = i.z,
                    s = t.max,
                    l = s.x,
                    h = s.y,
                    u = s.z,
                    c = n.center,
                    _ = c.x,
                    d = c.y,
                    f = c.z,
                    m = n.radius;
                Te.Clamp(c, i, s, e._tempV30);
                var p = Te.distanceSquared(c, e._tempV30);
                return p > m * m ? 0 : _ >= r + m && l - m >= _ && l - r > m && d >= a + m && h - m >= d && h - a > m && f >= o + m && u - m >= f && u - o > m ? 1 : 2;
            }, e.sphereContainsPoint = function(e, t) {
                return Te.distanceSquared(t, e.center) <= e.radius * e.radius ? 1 : 0;
            }, e.sphereContainsTriangle = function(t, n, i, r) {
                var a = e.sphereContainsPoint(t, n),
                    o = e.sphereContainsPoint(t, i),
                    s = e.sphereContainsPoint(t, r);
                return 1 == a && 1 == o && 1 == s ? 1 : e.intersectsSphereAndTriangle(t, n, i, r) ? 2 : 0;
            }, e.sphereContainsBox = function(t, n) {
                var i = t.center,
                    r = i.x,
                    a = i.y,
                    o = i.z,
                    s = t.radius,
                    l = n.min,
                    h = l.x,
                    u = l.y,
                    c = l.z,
                    _ = n.max,
                    d = _.x,
                    f = _.y,
                    m = _.z,
                    p = e._tempV30,
                    T = p.x,
                    E = p.y,
                    v = p.z;
                if (!e.intersectsBoxAndSphere(n, t)) return 0;
                var g = s * s;
                return T = r - h, E = a - f, v = o - m, Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - d,
                    E = a - f, v = o - m, Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - d, E = a - u,
                        v = o - m, Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - h, E = a - u, v = o - m,
                            Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - h, E = a - f, v = o - c, Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - d,
                                E = a - f, v = o - c, Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - d, E = a - u,
                                    v = o - c, Te.scalarLengthSquared(e._tempV30) > g ? 2 : (T = r - h, E = a - u, v = o - c,
                                        Te.scalarLengthSquared(e._tempV30) > g ? 2 : 1)))))));
            }, e.sphereContainsSphere = function(e, t) {
                var n = e.radius,
                    i = t.radius,
                    r = Te.distance(e.center, t.center);
                return r > n + i ? 0 : r > n - i ? 2 : 1;
            }, e.closestPointPointTriangle = function(t, n, i, r, a) {
                Te.subtract(i, n, e._tempV30), Te.subtract(r, n, e._tempV31), Te.subtract(t, n, e._tempV32),
                    Te.subtract(t, i, e._tempV33), Te.subtract(t, r, e._tempV34);
                var o = Te.dot(e._tempV30, e._tempV32),
                    s = Te.dot(e._tempV31, e._tempV32),
                    l = Te.dot(e._tempV30, e._tempV33),
                    h = Te.dot(e._tempV31, e._tempV33),
                    u = Te.dot(e._tempV30, e._tempV34),
                    c = Te.dot(e._tempV31, e._tempV34);
                if (0 >= o && 0 >= s) return void n.cloneTo(a);
                if (l >= 0 && l >= h) return void i.cloneTo(a);
                var _ = o * h - l * s;
                if (0 >= _ && o >= 0 && 0 >= l) {
                    var d = o / (o - l);
                    return Te.scale(e._tempV30, d, a), void Te.add(n, a, a);
                }
                if (c >= 0 && c >= u) return void r.cloneTo(a);
                var f = u * s - o * c;
                if (0 >= f && s >= 0 && 0 >= c) {
                    var m = s / (s - c);
                    return Te.scale(e._tempV31, m, a), void Te.add(n, a, a);
                }
                var p = l * c - u * h;
                if (0 >= p && h - l >= 0 && u - c >= 0) {
                    var T = (h - l) / (h - l + (u - c));
                    return Te.subtract(r, i, a), Te.scale(a, T, a), void Te.add(i, a, a);
                }
                var E = 1 / (p + f + _),
                    v = f * E,
                    g = _ * E;
                Te.scale(e._tempV30, v, e._tempV35), Te.scale(e._tempV31, g, e._tempV36), Te.add(e._tempV35, e._tempV36, a),
                    Te.add(n, a, a);
            }, e.closestPointPlanePoint = function(t, n, i) {
                var r = t.normal,
                    a = Te.dot(r, n) - t.distance;
                Te.scale(r, a, e._tempV30), Te.subtract(n, e._tempV30, i);
            }, e.closestPointBoxPoint = function(t, n, i) {
                Te.max(n, t.min, e._tempV30), Te.min(e._tempV30, t.max, i);
            }, e.closestPointSpherePoint = function(e, t, n) {
                var i = e.center;
                Te.subtract(t, i, n), Te.normalize(n, n), Te.scale(n, e.radius, n), Te.add(n, i, n);
            }, e.closestPointSphereSphere = function(e, t, n) {
                var i = e.center;
                Te.subtract(t.center, i, n), Te.normalize(n, n), Te.scale(n, e.radius, n), Te.add(n, i, n);
            }, i(e, ["_tempV30", function() {
                return this._tempV30 = new Te();
            }, "_tempV31", function() {
                return this._tempV31 = new Te();
            }, "_tempV32", function() {
                return this._tempV32 = new Te();
            }, "_tempV33", function() {
                return this._tempV33 = new Te();
            }, "_tempV34", function() {
                return this._tempV34 = new Te();
            }, "_tempV35", function() {
                return this._tempV35 = new Te();
            }, "_tempV36", function() {
                return this._tempV36 = new Te();
            }]), e;
        }(),
        Bt = function() {
            function e() {
                var e = this.elements = new Float32Array(9);
                e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0,
                    e[8] = 1;
            }
            r(e, "laya.d3.math.Matrix3x3");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.determinant = function() {
                var e = this.elements,
                    t = e[0],
                    n = e[1],
                    i = e[2],
                    r = e[3],
                    a = e[4],
                    o = e[5],
                    s = e[6],
                    l = e[7],
                    h = e[8];
                return t * (h * a - o * l) + n * (-h * r + o * s) + i * (l * r - a * s);
            }, t.translate = function(e, t) {
                var n = t.elements,
                    i = this.elements,
                    r = i[0],
                    a = i[1],
                    o = i[2],
                    s = i[3],
                    l = i[4],
                    h = i[5],
                    u = i[6],
                    c = i[7],
                    _ = i[8],
                    d = e.x,
                    f = e.y;
                n[0] = r, n[1] = a, n[2] = o, n[3] = s, n[4] = l, n[5] = h, n[6] = d * r + f * s + u,
                    n[7] = d * a + f * l + c, n[8] = d * o + f * h + _;
            }, t.rotate = function(e, t) {
                var n = t.elements,
                    i = this.elements,
                    r = i[0],
                    a = i[1],
                    o = i[2],
                    s = i[3],
                    l = i[4],
                    h = i[5],
                    u = i[6],
                    c = i[7],
                    _ = i[8],
                    d = Math.sin(e),
                    f = Math.cos(e);
                n[0] = f * r + d * s, n[1] = f * a + d * l, n[2] = f * o + d * h, n[3] = f * s - d * r,
                    n[4] = f * l - d * a, n[5] = f * h - d * o, n[6] = u, n[7] = c, n[8] = _;
            }, t.scale = function(e, t) {
                var n = t.elements,
                    i = this.elements,
                    r = e.x,
                    a = e.y;
                n[0] = r * i[0], n[1] = r * i[1], n[2] = r * i[2], n[3] = a * i[3], n[4] = a * i[4],
                    n[5] = a * i[5], n[6] = i[6], n[7] = i[7], n[8] = i[8];
            }, t.invert = function(e) {
                var t = e.elements,
                    n = this.elements,
                    i = n[0],
                    r = n[1],
                    a = n[2],
                    o = n[3],
                    s = n[4],
                    l = n[5],
                    h = n[6],
                    u = n[7],
                    c = n[8],
                    _ = c * s - l * u,
                    d = -c * o + l * h,
                    f = u * o - s * h,
                    m = i * _ + r * d + a * f;
                m || (e = null), m = 1 / m, t[0] = _ * m, t[1] = (-c * r + a * u) * m, t[2] = (l * r - a * s) * m,
                    t[3] = d * m, t[4] = (c * i - a * h) * m, t[5] = (-l * i + a * o) * m, t[6] = f * m,
                    t[7] = (-u * i + r * h) * m, t[8] = (s * i - r * o) * m;
            }, t.transpose = function(e) {
                var t = e.elements,
                    n = this.elements;
                if (e === this) {
                    var i = n[1],
                        r = n[2],
                        a = n[5];
                    t[1] = n[3], t[2] = n[6], t[3] = i, t[5] = n[7], t[6] = r, t[7] = a;
                } else t[0] = n[0], t[1] = n[3], t[2] = n[6], t[3] = n[1], t[4] = n[4], t[5] = n[7],
                    t[6] = n[2], t[7] = n[5], t[8] = n[8];
            }, t.identity = function() {
                var e = this.elements;
                e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = 0, e[7] = 0,
                    e[8] = 1;
            }, t.cloneTo = function(e) {
                var t, n, i;
                if (n = this.elements, i = e.elements, n !== i)
                    for (t = 0; 9 > t; ++t) i[t] = n[t];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, e.createFromTranslation = function(e, t) {
                t.elements;
                t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 1, t[5] = 0, t[6] = e.x, t[7] = e.y,
                    t[8] = 1;
            }, e.createFromRotation = function(e, t) {
                var n = t.elements,
                    i = Math.sin(e),
                    r = Math.cos(e);
                n[0] = r, n[1] = i, n[2] = 0, n[3] = -i, n[4] = r, n[5] = 0, n[6] = 0, n[7] = 0,
                    n[8] = 1;
            }, e.createFromScaling = function(e, t) {
                var n = t.elements;
                n[0] = e.x, n[1] = 0, n[2] = 0, n[3] = 0, n[4] = e.y, n[5] = 0, n[6] = 0, n[7] = 0,
                    n[8] = 1;
            }, e.createFromMatrix4x4 = function(e, t) {
                t[0] = e[0], t[1] = e[1], t[2] = e[2], t[3] = e[4], t[4] = e[5], t[5] = e[6], t[6] = e[8],
                    t[7] = e[9], t[8] = e[10];
            }, e.multiply = function(e, t, n) {
                var i = n.elements,
                    r = e.elements,
                    a = t.elements,
                    o = r[0],
                    s = r[1],
                    l = r[2],
                    h = r[3],
                    u = r[4],
                    c = r[5],
                    _ = r[6],
                    d = r[7],
                    f = r[8],
                    m = a[0],
                    p = a[1],
                    T = a[2],
                    E = a[3],
                    v = a[4],
                    g = a[5],
                    S = a[6],
                    y = a[7],
                    x = a[8];
                i[0] = m * o + p * h + T * _, i[1] = m * s + p * u + T * d, i[2] = m * l + p * c + T * f,
                    i[3] = E * o + v * h + g * _, i[4] = E * s + v * u + g * d, i[5] = E * l + v * c + g * f,
                    i[6] = S * o + y * h + x * _, i[7] = S * s + y * u + x * d, i[8] = S * l + y * c + x * f;
            }, e.lookAt = function(t, n, i, r) {
                Te.subtract(t, n, e._tempV30), Te.normalize(e._tempV30, e._tempV30), Te.cross(i, e._tempV30, e._tempV31),
                    Te.normalize(e._tempV31, e._tempV31), Te.cross(e._tempV30, e._tempV31, e._tempV32);
                var a = e._tempV30,
                    o = e._tempV31,
                    s = e._tempV32,
                    l = r.elements;
                l[0] = o.x, l[3] = o.y, l[6] = o.z, l[1] = s.x, l[4] = s.y, l[7] = s.z, l[2] = a.x,
                    l[5] = a.y, l[8] = a.z;
            }, e.DEFAULT = new e(), i(e, ["_tempV30", function() {
                return this._tempV30 = new Te();
            }, "_tempV31", function() {
                return this._tempV31 = new Te();
            }, "_tempV32", function() {
                return this._tempV32 = new Te();
            }]), e;
        }(),
        Ut = function() {
            function e() {}
            return r(e, "laya.d3.utils.Physics3DUtils"), e.setColliderCollision = function(e, t, n) {},
                e.getIColliderCollision = function(e, t) {
                    return !1;
                }, e.COLLISIONFILTERGROUP_DEFAULTFILTER = 1, e.COLLISIONFILTERGROUP_STATICFILTER = 2,
                e.COLLISIONFILTERGROUP_KINEMATICFILTER = 4, e.COLLISIONFILTERGROUP_DEBRISFILTER = 8,
                e.COLLISIONFILTERGROUP_SENSORTRIGGER = 16, e.COLLISIONFILTERGROUP_CHARACTERFILTER = 32,
                e.COLLISIONFILTERGROUP_CUSTOMFILTER1 = 64, e.COLLISIONFILTERGROUP_CUSTOMFILTER2 = 128,
                e.COLLISIONFILTERGROUP_CUSTOMFILTER3 = 256, e.COLLISIONFILTERGROUP_CUSTOMFILTER4 = 512,
                e.COLLISIONFILTERGROUP_CUSTOMFILTER5 = 1024, e.COLLISIONFILTERGROUP_CUSTOMFILTER6 = 2048,
                e.COLLISIONFILTERGROUP_CUSTOMFILTER7 = 4096, e.COLLISIONFILTERGROUP_CUSTOMFILTER8 = 8192,
                e.COLLISIONFILTERGROUP_CUSTOMFILTER9 = 16384, e.COLLISIONFILTERGROUP_CUSTOMFILTER10 = 32768,
                e.COLLISIONFILTERGROUP_ALLFILTER = -1, i(e, ["gravity", function() {
                    return this.gravity = new Te(0, -9.81, 0);
                }]), e;
        }(),
        zt = function() {
            function e(e, t) {
                this.min = null, this.max = null, this.min = e, this.max = t;
            }
            r(e, "laya.d3.math.BoundBox");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t._rotateExtents = function(e, t, n) {
                var i = e.x,
                    r = e.y,
                    a = e.z,
                    o = t.elements;
                n.x = Math.abs(o[0] * i) + Math.abs(o[4] * r) + Math.abs(o[8] * a), n.y = Math.abs(o[1] * i) + Math.abs(o[5] * r) + Math.abs(o[9] * a),
                    n.z = Math.abs(o[2] * i) + Math.abs(o[6] * r) + Math.abs(o[10] * a);
            }, t.getCorners = function(e) {
                e.length = 8;
                var t = this.min.x,
                    n = this.min.y,
                    i = this.min.z,
                    r = this.max.x,
                    a = this.max.y,
                    o = this.max.z;
                e[0] = new Te(t, a, o), e[1] = new Te(r, a, o), e[2] = new Te(r, n, o), e[3] = new Te(t, n, o),
                    e[4] = new Te(t, a, i), e[5] = new Te(r, a, i), e[6] = new Te(r, n, i), e[7] = new Te(t, n, i);
            }, t.getCenter = function(e) {
                Te.add(this.min, this.max, e), Te.scale(e, .5, e);
            }, t.getExtent = function(e) {
                Te.subtract(this.max, this.min, e), Te.scale(e, .5, e);
            }, t.setCenterAndExtent = function(e, t) {
                Te.subtract(e, t, this.min), Te.add(e, t, this.max);
            }, t.tranform = function(t, n) {
                var i = e._tempVector30,
                    r = e._tempVector31;
                this.getCenter(i), this.getExtent(r), Te.transformCoordinate(i, t, i), this._rotateExtents(r, t, r),
                    n.setCenterAndExtent(i, r);
            }, t.toDefault = function() {
                this.min.toDefault(), this.max.toDefault();
            }, t.cloneTo = function(e) {
                var t = e;
                this.min.cloneTo(t.min), this.max.cloneTo(t.max);
            }, t.clone = function() {
                var e = new this.constructor(new Te(), new Te());
                return this.cloneTo(e), e;
            }, e.createfromPoints = function(e, t) {
                if (null == e) throw new Error("points");
                var n = t.min,
                    i = t.max;
                n.x = Number.MAX_VALUE, n.y = Number.MAX_VALUE, n.z = Number.MAX_VALUE, i.x = -Number.MAX_VALUE,
                    i.y = -Number.MAX_VALUE, i.z = -Number.MAX_VALUE;
                for (var r = 0, a = e.length; a > r; ++r) Te.min(n, e[r], n), Te.max(i, e[r], i);
            }, e.merge = function(e, t, n) {
                Te.min(e.min, t.min, n.min), Te.max(e.max, t.max, n.max);
            }, i(e, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }]), e;
        }(),
        Gt = function() {
            function e() {
                this.speed = 1, this.clipStart = 0, this.clipEnd = 1, this._nodeOwners = [];
            }
            r(e, "laya.d3.component.AnimatorState");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t._resetFrameIndices = function() {
                for (var e = 0, t = this._currentFrameIndices.length; t > e; e++) this._currentFrameIndices[e] = -1;
            }, t.addScript = function(e) {
                var t = new e();
                return this._scripts = this._scripts || [], this._scripts.push(t), t;
            }, t.getScript = function(e) {
                if (this._scripts)
                    for (var t = 0, i = this._scripts.length; i > t; t++) {
                        var r = this._scripts[t];
                        if (n.__typeof(r, e)) return r;
                    }
                return null;
            }, t.getScripts = function(e) {
                var t;
                if (this._scripts)
                    for (var i = 0, r = this._scripts.length; r > i; i++) {
                        var a = this._scripts[i];
                        n.__typeof(a, e) && (t = t || [], t.push(a));
                    }
                return t;
            }, t.cloneTo = function(e) {
                var t = e;
                t.name = this.name, t.speed = this.speed, t.clipStart = this.clipStart, t.clipEnd = this.clipEnd,
                    t.clip = this._clip;
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, t, "clip", function() {
                return this._clip;
            }, function(e) {
                this._clip = e, this._currentFrameIndices = new Int16Array(e._nodes.count), this._resetFrameIndices();
            }), e;
        }(),
        Ht = (function() {
            function e() {
                this._vertices = null, this._vertexBuffer = null, this._text = null, this._fontSize = 0,
                    this._color = null;
            }
            r(e, "laya.d3.text.TextMesh");
            var t = e.prototype;
            return t._createVertexBuffer = function(e) {}, t._resizeVertexBuffer = function(e) {},
                t._addChar = function() {}, a(0, t, "text", function() {
                    return this._text;
                }, function(e) {
                    this._text = e;
                }), a(0, t, "fontSize", function() {
                    return this._fontSize;
                }, function(e) {
                    this._fontSize = e;
                }), a(0, t, "color", function() {
                    return this._color;
                }, function(e) {
                    this._color = e;
                }), e._indexBuffer = null, e;
        }(), function() {
            function e(e, t, n, i, r, a, o, s, l, h, u, c, _, d, f, m, p) {
                void 0 === e && (e = 1), void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 0),
                    void 0 === r && (r = 0), void 0 === a && (a = 1), void 0 === o && (o = 0), void 0 === s && (s = 0),
                    void 0 === l && (l = 0), void 0 === h && (h = 0), void 0 === u && (u = 1), void 0 === c && (c = 0),
                    void 0 === _ && (_ = 0), void 0 === d && (d = 0), void 0 === f && (f = 0), void 0 === m && (m = 1);
                var T = p ? this.elements = p : this.elements = new Float32Array(16);
                T[0] = e, T[1] = t, T[2] = n, T[3] = i, T[4] = r, T[5] = a, T[6] = o, T[7] = s,
                    T[8] = l, T[9] = h, T[10] = u, T[11] = c, T[12] = _, T[13] = d, T[14] = f, T[15] = m;
            }
            r(e, "laya.d3.math.Matrix4x4");
            var t = e.prototype;
            return n.imps(t, {
                "laya.d3.core.IClone": !0
            }), t.setRotation = function(e) {
                var t = e.x,
                    n = e.y,
                    i = e.z,
                    r = e.w,
                    a = t * t,
                    o = n * n,
                    s = i * i,
                    l = t * n,
                    h = i * r,
                    u = i * t,
                    c = n * r,
                    _ = n * i,
                    d = t * r,
                    f = this.elements;
                f[0] = 1 - 2 * (o + s), f[1] = 2 * (l + h), f[2] = 2 * (u - c), f[4] = 2 * (l - h),
                    f[5] = 1 - 2 * (s + a), f[6] = 2 * (_ + d), f[8] = 2 * (u + c), f[9] = 2 * (_ - d),
                    f[10] = 1 - 2 * (o + a);
            }, t.setPosition = function(e) {
                var t = this.elements;
                t[12] = e.x, t[13] = e.y, t[14] = e.z;
            }, t.getElementByRowColumn = function(e, t) {
                if (0 > e || e > 3) throw new Error("row", "Rows and columns for matrices run from 0 to 3, inclusive.");
                if (0 > t || t > 3) throw new Error("column", "Rows and columns for matrices run from 0 to 3, inclusive.");
                return this.elements[4 * e + t];
            }, t.setElementByRowColumn = function(e, t, n) {
                if (0 > e || e > 3) throw new Error("row", "Rows and columns for matrices run from 0 to 3, inclusive.");
                if (0 > t || t > 3) throw new Error("column", "Rows and columns for matrices run from 0 to 3, inclusive.");
                this.elements[4 * e + t] = n;
            }, t.equalsOtherMatrix = function(e) {
                var t = this.elements,
                    n = e.elements;
                return ie.nearEqual(t[0], n[0]) && ie.nearEqual(t[1], n[1]) && ie.nearEqual(t[2], n[2]) && ie.nearEqual(t[3], n[3]) && ie.nearEqual(t[4], n[4]) && ie.nearEqual(t[5], n[5]) && ie.nearEqual(t[6], n[6]) && ie.nearEqual(t[7], n[7]) && ie.nearEqual(t[8], n[8]) && ie.nearEqual(t[9], n[9]) && ie.nearEqual(t[10], n[10]) && ie.nearEqual(t[11], n[11]) && ie.nearEqual(t[12], n[12]) && ie.nearEqual(t[13], n[13]) && ie.nearEqual(t[14], n[14]) && ie.nearEqual(t[15], n[15]);
            }, t.decomposeTransRotScale = function(t, n, i) {
                var r = e._tempMatrix4x4;
                return this.decomposeTransRotMatScale(t, r, i) ? (he.createFromMatrix4x4(r, n), !0) : (n.identity(), !1);
            }, t.decomposeTransRotMatScale = function(t, n, i) {
                var r = this.elements,
                    a = t,
                    o = n.elements,
                    s = i;
                a.x = r[12], a.y = r[13], a.z = r[14];
                var l = r[0],
                    h = r[1],
                    u = r[2],
                    c = r[4],
                    _ = r[5],
                    d = r[6],
                    f = r[8],
                    m = r[9],
                    p = r[10],
                    T = s.x = Math.sqrt(l * l + h * h + u * u),
                    E = s.y = Math.sqrt(c * c + _ * _ + d * d),
                    v = s.z = Math.sqrt(f * f + m * m + p * p);
                if (ie.isZero(T) || ie.isZero(E) || ie.isZero(v)) return o[1] = o[2] = o[3] = o[4] = o[6] = o[7] = o[8] = o[9] = o[11] = o[12] = o[13] = o[14] = 0,
                    o[0] = o[5] = o[10] = o[15] = 1, !1;
                var g = e._tempVector0;
                g.x = f / v, g.y = m / v, g.z = p / v;
                var S = e._tempVector1;
                S.x = l / T, S.y = h / T, S.z = u / T;
                var y = e._tempVector2;
                Te.cross(g, S, y);
                var x = e._tempVector1;
                return Te.cross(y, g, x), o[3] = o[7] = o[11] = o[12] = o[13] = o[14] = 0, o[15] = 1,
                    o[0] = x.x, o[1] = x.y, o[2] = x.z, o[4] = y.x, o[5] = y.y, o[6] = y.z, o[8] = g.x,
                    o[9] = g.y, o[10] = g.z, o[0] * l + o[1] * h + o[2] * u < 0 && (s[0] = -T), o[4] * c + o[5] * _ + o[6] * d < 0 && (s[1] = -E),
                    o[8] * f + o[9] * m + o[10] * p < 0 && (s[2] = -v), !0;
            }, t.decomposeYawPitchRoll = function(e) {
                var t = Math.asin(-this.elements[9]);
                e.y = t;
                var n = Math.cos(t);
                n > ie.zeroTolerance ? (e.z = Math.atan2(this.elements[1], this.elements[5]), e.x = Math.atan2(this.elements[8], this.elements[10])) : (e.z = Math.atan2(-this.elements[4], this.elements[0]),
                    e.x = 0);
            }, t.normalize = function() {
                var e = this.elements,
                    t = e[0],
                    n = e[1],
                    i = e[2],
                    r = Math.sqrt(t * t + n * n + i * i);
                return r ? void(1 != r && (r = 1 / r, e[0] = t * r, e[1] = n * r, e[2] = i * r)) : (e[0] = 0,
                    e[1] = 0, void(e[2] = 0));
            }, t.transpose = function() {
                var e, t;
                return e = this.elements, t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8],
                    e[8] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[7],
                    e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
            }, t.invert = function(e) {
                var t = this.elements,
                    n = e.elements,
                    i = t[0],
                    r = t[1],
                    a = t[2],
                    o = t[3],
                    s = t[4],
                    l = t[5],
                    h = t[6],
                    u = t[7],
                    c = t[8],
                    _ = t[9],
                    d = t[10],
                    f = t[11],
                    m = t[12],
                    p = t[13],
                    T = t[14],
                    E = t[15],
                    v = i * l - r * s,
                    g = i * h - a * s,
                    S = i * u - o * s,
                    y = r * h - a * l,
                    x = r * u - o * l,
                    D = a * u - o * h,
                    I = c * p - _ * m,
                    R = c * T - d * m,
                    M = c * E - f * m,
                    A = _ * T - d * p,
                    C = _ * E - f * p,
                    L = d * E - f * T,
                    O = v * L - g * C + S * A + y * M - x * R + D * I;
                0 !== Math.abs(O) && (O = 1 / O, n[0] = (l * L - h * C + u * A) * O, n[1] = (a * C - r * L - o * A) * O,
                    n[2] = (p * D - T * x + E * y) * O, n[3] = (d * x - _ * D - f * y) * O, n[4] = (h * M - s * L - u * R) * O,
                    n[5] = (i * L - a * M + o * R) * O, n[6] = (T * S - m * D - E * g) * O, n[7] = (c * D - d * S + f * g) * O,
                    n[8] = (s * C - l * M + u * I) * O, n[9] = (r * M - i * C - o * I) * O, n[10] = (m * x - p * S + E * v) * O,
                    n[11] = (_ * S - c * x - f * v) * O, n[12] = (l * R - s * A - h * I) * O, n[13] = (i * A - r * R + a * I) * O,
                    n[14] = (p * g - m * y - T * v) * O, n[15] = (c * y - _ * g + d * v) * O);
            }, t.identity = function() {
                var e = this.elements;
                e[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0,
                    e[0] = e[5] = e[10] = e[15] = 1;
            }, t.cloneTo = function(e) {
                var t, n, i;
                if (n = this.elements, i = e.elements, n !== i)
                    for (t = 0; 16 > t; ++t) i[t] = n[t];
            }, t.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, t.getTranslationVector = function(e) {
                var t = this.elements;
                e.x = t[12], e.y = t[13], e.z = t[14];
            }, t.setTranslationVector = function(e) {
                var t = this.elements,
                    n = e;
                t[12] = n.x, t[13] = n.y, t[14] = n.z;
            }, t.getForward = function(e) {
                var t = this.elements;
                e.x = -t[8], e.y = -t[9], e.z = -t[10];
            }, t.setForward = function(e) {
                var t = this.elements;
                t[8] = -e.x, t[9] = -e.y, t[10] = -e.z;
            }, e.createRotationX = function(e, t) {
                var n = t.elements,
                    i = Math.sin(e),
                    r = Math.cos(e);
                n[1] = n[2] = n[3] = n[4] = n[7] = n[8] = n[11] = n[12] = n[13] = n[14] = 0, n[0] = n[15] = 1,
                    n[5] = n[10] = r, n[6] = i, n[9] = -i;
            }, e.createRotationY = function(e, t) {
                var n = t.elements,
                    i = Math.sin(e),
                    r = Math.cos(e);
                n[1] = n[3] = n[4] = n[6] = n[7] = n[9] = n[11] = n[12] = n[13] = n[14] = 0, n[5] = n[15] = 1,
                    n[0] = n[10] = r, n[2] = -i, n[8] = i;
            }, e.createRotationZ = function(e, t) {
                var n = t.elements,
                    i = Math.sin(e),
                    r = Math.cos(e);
                n[2] = n[3] = n[6] = n[7] = n[8] = n[9] = n[11] = n[12] = n[13] = n[14] = 0, n[10] = n[15] = 1,
                    n[0] = n[5] = r, n[1] = i, n[4] = -i;
            }, e.createRotationYawPitchRoll = function(t, n, i, r) {
                he.createFromYawPitchRoll(t, n, i, e._tempQuaternion), e.createRotationQuaternion(e._tempQuaternion, r);
            }, e.createRotationAxis = function(e, t, n) {
                var i = e.x,
                    r = e.y,
                    a = e.z,
                    o = Math.cos(t),
                    s = Math.sin(t),
                    l = i * i,
                    h = r * r,
                    u = a * a,
                    c = i * r,
                    _ = i * a,
                    d = r * a,
                    f = n.elements;
                f[3] = f[7] = f[11] = f[12] = f[13] = f[14] = 0, f[15] = 1, f[0] = l + o * (1 - l),
                    f[1] = c - o * c + s * a, f[2] = _ - o * _ - s * r, f[4] = c - o * c - s * a, f[5] = h + o * (1 - h),
                    f[6] = d - o * d + s * i, f[8] = _ - o * _ + s * r, f[9] = d - o * d - s * i, f[10] = u + o * (1 - u);
            }, e.createRotationQuaternion = function(e, t) {
                var n = t.elements,
                    i = e.x,
                    r = e.y,
                    a = e.z,
                    o = e.w,
                    s = i * i,
                    l = r * r,
                    h = a * a,
                    u = i * r,
                    c = a * o,
                    _ = a * i,
                    d = r * o,
                    f = r * a,
                    m = i * o;
                n[3] = n[7] = n[11] = n[12] = n[13] = n[14] = 0, n[15] = 1, n[0] = 1 - 2 * (l + h),
                    n[1] = 2 * (u + c), n[2] = 2 * (_ - d), n[4] = 2 * (u - c), n[5] = 1 - 2 * (h + s),
                    n[6] = 2 * (f + m), n[8] = 2 * (_ + d), n[9] = 2 * (f - m), n[10] = 1 - 2 * (l + s);
            }, e.createTranslate = function(e, t) {
                var n = t.elements;
                n[4] = n[8] = n[1] = n[9] = n[2] = n[6] = n[3] = n[7] = n[11] = 0, n[0] = n[5] = n[10] = n[15] = 1,
                    n[12] = e.x, n[13] = e.y, n[14] = e.z;
            }, e.createScaling = function(e, t) {
                var n = t.elements;
                n[0] = e.x, n[5] = e.y, n[10] = e.z, n[1] = n[4] = n[8] = n[12] = n[9] = n[13] = n[2] = n[6] = n[14] = n[3] = n[7] = n[11] = 0,
                    n[15] = 1;
            }, e.multiply = function(e, t, n) {
                var i, r, a, o, s, l, h, u;
                if (r = n.elements, a = e.elements, o = t.elements, r === o)
                    for (o = new Float32Array(16),
                        i = 0; 16 > i; ++i) o[i] = r[i];
                var c = o[0],
                    _ = o[1],
                    d = o[2],
                    f = o[3],
                    m = o[4],
                    p = o[5],
                    T = o[6],
                    E = o[7],
                    v = o[8],
                    g = o[9],
                    S = o[10],
                    y = o[11],
                    x = o[12],
                    D = o[13],
                    I = o[14],
                    R = o[15];
                for (i = 0; 4 > i; i++) s = a[i], l = a[i + 4], h = a[i + 8], u = a[i + 12], r[i] = s * c + l * _ + h * d + u * f,
                    r[i + 4] = s * m + l * p + h * T + u * E, r[i + 8] = s * v + l * g + h * S + u * y,
                    r[i + 12] = s * x + l * D + h * I + u * R;
            }, e.multiplyForNative = function(e, t, n) {
                v.instance.matrix4x4Multiply(e.elements, t.elements, n.elements);
            }, e.createFromQuaternion = function(e, t) {
                var n = t.elements,
                    i = e.x,
                    r = e.y,
                    a = e.z,
                    o = e.w,
                    s = i + i,
                    l = r + r,
                    h = a + a,
                    u = i * s,
                    c = r * s,
                    _ = r * l,
                    d = a * s,
                    f = a * l,
                    m = a * h,
                    p = o * s,
                    T = o * l,
                    E = o * h;
                n[0] = 1 - _ - m, n[1] = c + E, n[2] = d - T, n[3] = 0, n[4] = c - E, n[5] = 1 - u - m,
                    n[6] = f + p, n[7] = 0, n[8] = d + T, n[9] = f - p, n[10] = 1 - u - _, n[11] = 0,
                    n[12] = 0, n[13] = 0, n[14] = 0, n[15] = 1;
            }, e.createAffineTransformation = function(e, t, n, i) {
                var r = i.elements,
                    a = t.x,
                    o = t.y,
                    s = t.z,
                    l = t.w,
                    h = a + a,
                    u = o + o,
                    c = s + s,
                    _ = a * h,
                    d = a * u,
                    f = a * c,
                    m = o * u,
                    p = o * c,
                    T = s * c,
                    E = l * h,
                    v = l * u,
                    g = l * c,
                    S = n.x,
                    y = n.y,
                    x = n.z;
                r[0] = (1 - (m + T)) * S, r[1] = (d + g) * S, r[2] = (f - v) * S, r[3] = 0, r[4] = (d - g) * y,
                    r[5] = (1 - (_ + T)) * y, r[6] = (p + E) * y, r[7] = 0, r[8] = (f + v) * x, r[9] = (p - E) * x,
                    r[10] = (1 - (_ + m)) * x, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1;
            }, e.createLookAt = function(t, n, i, r) {
                var a = r.elements,
                    o = e._tempVector0,
                    s = e._tempVector1,
                    l = e._tempVector2;
                Te.subtract(t, n, l), Te.normalize(l, l), Te.cross(i, l, o), Te.normalize(o, o),
                    Te.cross(l, o, s), r.identity(), a[0] = o.x, a[4] = o.y, a[8] = o.z, a[1] = s.x,
                    a[5] = s.y, a[9] = s.z, a[2] = l.x, a[6] = l.y, a[10] = l.z, a[12] = -Te.dot(o, t),
                    a[13] = -Te.dot(s, t), a[14] = -Te.dot(l, t);
            }, e.createPerspective = function(t, n, i, r, a) {
                var o = 1 / Math.tan(.5 * t),
                    s = o / n,
                    l = i / s,
                    h = i / o;
                e.createPerspectiveOffCenter(-l, l, -h, h, i, r, a);
            }, e.createPerspectiveOffCenter = function(e, t, n, i, r, a, o) {
                var s = o.elements,
                    l = a / (a - r);
                s[1] = s[2] = s[3] = s[4] = s[6] = s[7] = s[12] = s[13] = s[15] = 0, s[0] = 2 * r / (t - e),
                    s[5] = 2 * r / (i - n), s[8] = (e + t) / (t - e), s[9] = (i + n) / (i - n), s[10] = -l,
                    s[11] = -1, s[14] = -r * l;
            }, e.createOrthoOffCenter = function(e, t, n, i, r, a, o) {
                var s = o.elements,
                    l = 1 / (a - r);
                s[1] = s[2] = s[3] = s[4] = s[6] = s[8] = s[7] = s[9] = s[11] = 0, s[15] = 1, s[0] = 2 / (t - e),
                    s[5] = 2 / (i - n), s[10] = -l, s[12] = (e + t) / (e - t), s[13] = (i + n) / (n - i),
                    s[14] = -r * l;
            }, e.billboard = function(t, n, i, r, a, o) {
                Te.subtract(t, n, e._tempVector0);
                var s = Te.scalarLengthSquared(e._tempVector0);
                ie.isZero(s) ? (Te.scale(a, -1, e._tempVector1), e._tempVector1.cloneTo(e._tempVector0)) : Te.scale(e._tempVector0, 1 / Math.sqrt(s), e._tempVector0),
                    Te.cross(r, e._tempVector0, e._tempVector2), Te.normalize(e._tempVector2, e._tempVector2),
                    Te.cross(e._tempVector0, e._tempVector2, e._tempVector3);
                var l = e._tempVector2,
                    h = e._tempVector3,
                    u = e._tempVector0,
                    c = t,
                    _ = o.elements;
                _[0] = l.x, _[1] = l.y, _[2] = l.z, _[3] = 0, _[4] = h.x, _[5] = h.y, _[6] = h.z,
                    _[7] = 0, _[8] = u.x, _[9] = u.y, _[10] = u.z, _[11] = 0, _[12] = c.x, _[13] = c.y,
                    _[14] = c.z, _[15] = 1;
            }, e.translation = function(e, t) {
                var n = t.elements;
                n[0] = n[5] = n[10] = n[15] = 1, n[12] = e.x, n[13] = e.y, n[14] = e.z;
            }, i(e, ["_tempMatrix4x4", function() {
                return this._tempMatrix4x4 = new e();
            }, "_tempVector0", function() {
                return this._tempVector0 = new Te();
            }, "_tempVector1", function() {
                return this._tempVector1 = new Te();
            }, "_tempVector2", function() {
                return this._tempVector2 = new Te();
            }, "_tempVector3", function() {
                return this._tempVector3 = new Te();
            }, "_tempQuaternion", function() {
                return this._tempQuaternion = new he();
            }, "DEFAULT", function() {
                return this.DEFAULT = new e();
            }, "ZERO", function() {
                return this.ZERO = new e(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            }]), e;
        }()),
        kt = function() {
            function e(e, t) {
                this._nativeDiscreteDynamicsWorld = null, this._nativeCollisionWorld = null, this._nativeDispatcher = null,
                    this._nativeCollisionConfiguration = null, this._nativeBroadphase = null, this._nativeSolverInfo = null,
                    this._nativeDispatchInfo = null, this._nativeClosestRayResultCallback = null, this._nativeAllHitsRayResultCallback = null,
                    this._nativeClosestConvexResultCallback = null, this._nativeAllConvexResultCallback = null,
                    this._updatedRigidbodies = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60,
                    this._gravity = new Te(0, -10, 0), this._nativeVector3Zero = new W._physics3D.btVector3(0, 0, 0),
                    this._nativeDefaultQuaternion = new W._physics3D.btQuaternion(0, 0, 0, -1), this._collisionsUtils = new Ye(),
                    this._previousFrameCollisions = [], this._currentFrameCollisions = [], this._physicsUpdateList = new cn(),
                    this._characters = [], void 0 === t && (t = 0), this.maxSubSteps = e.maxSubSteps,
                    this.fixedTimeStep = e.fixedTimeStep;
                var n = W._physics3D;
                this._nativeCollisionConfiguration = new n.btDefaultCollisionConfiguration(), this._nativeDispatcher = new n.btCollisionDispatcher(this._nativeCollisionConfiguration),
                    this._nativeBroadphase = new n.btDbvtBroadphase(), this._nativeBroadphase.getOverlappingPairCache().setInternalGhostPairCallback(new n.btGhostPairCallback());
                var i = e.flags;
                if (1 & i) this._nativeCollisionWorld = new n.btCollisionWorld(this._nativeDispatcher, this._nativeBroadphase, this._nativeCollisionConfiguration);
                else {
                    if (2 & i) throw "PhysicsSimulation:SoftBody processing is not yet available";
                    var r = new n.btSequentialImpulseConstraintSolver();
                    this._nativeDiscreteDynamicsWorld = new n.btDiscreteDynamicsWorld(this._nativeDispatcher, this._nativeBroadphase, r, this._nativeCollisionConfiguration),
                        this._nativeCollisionWorld = this._nativeDiscreteDynamicsWorld;
                }
                this._nativeDiscreteDynamicsWorld && (this._nativeSolverInfo = this._nativeDiscreteDynamicsWorld.getSolverInfo(),
                        this._nativeDispatchInfo = this._nativeDiscreteDynamicsWorld.getDispatchInfo()),
                    this._nativeClosestRayResultCallback = new n.ClosestRayResultCallback(this._nativeVector3Zero, this._nativeVector3Zero),
                    this._nativeAllHitsRayResultCallback = new n.AllHitsRayResultCallback(this._nativeVector3Zero, this._nativeVector3Zero),
                    this._nativeClosestConvexResultCallback = new n.ClosestConvexResultCallback(this._nativeVector3Zero, this._nativeVector3Zero),
                    this._nativeAllConvexResultCallback = new n.AllConvexResultCallback(this._nativeVector3Zero, this._nativeVector3Zero),
                    n._btGImpactCollisionAlgorithm_RegisterAlgorithm(this._nativeDispatcher.a);
            }
            r(e, "laya.d3.physics.PhysicsSimulation");
            var t = e.prototype;
            return t._simulate = function(e) {
                    this._updatedRigidbodies = 0, this._nativeDiscreteDynamicsWorld ? this._nativeDiscreteDynamicsWorld.stepSimulation(e, this.maxSubSteps, this.fixedTimeStep) : this._nativeCollisionWorld.PerformDiscreteCollisionDetection();
                }, t._destroy = function() {
                    var e = W._physics3D;
                    this._nativeDiscreteDynamicsWorld ? (e.destroy(this._nativeDiscreteDynamicsWorld),
                            this._nativeDiscreteDynamicsWorld = null) : (e.destroy(this._nativeCollisionWorld),
                            this._nativeCollisionWorld = null), e.destroy(this._nativeBroadphase), this._nativeBroadphase = null,
                        e.destroy(this._nativeDispatcher), this._nativeDispatcher = null, e.destroy(this._nativeCollisionConfiguration),
                        this._nativeCollisionConfiguration = null;
                }, t._addPhysicsCollider = function(e, t, n) {
                    this._nativeCollisionWorld.addCollisionObject(e._nativeColliderObject, t, n);
                }, t._removePhysicsCollider = function(e) {
                    this._nativeCollisionWorld.removeCollisionObject(e._nativeColliderObject);
                }, t._addRigidBody = function(e, t, n) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeCollisionWorld.addRigidBody(e._nativeColliderObject, t, n);
                }, t._removeRigidBody = function(e) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeCollisionWorld.removeRigidBody(e._nativeColliderObject);
                }, t._addCharacter = function(e, t, n) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeCollisionWorld.addCollisionObject(e._nativeColliderObject, t, n), this._nativeCollisionWorld.addAction(e._nativeKinematicCharacter);
                }, t._removeCharacter = function(e) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeCollisionWorld.removeCollisionObject(e._nativeColliderObject), this._nativeCollisionWorld.removeAction(e._nativeKinematicCharacter);
                }, t.raycastFromTo = function(t, n, i, r, a) {
                    void 0 === r && (r = Ut.COLLISIONFILTERGROUP_ALLFILTER), void 0 === a && (a = Ut.COLLISIONFILTERGROUP_ALLFILTER);
                    var o = this._nativeClosestRayResultCallback,
                        s = e._nativeTempVector30,
                        l = e._nativeTempVector31;
                    if (s.setValue(-t.x, t.y, t.z), l.setValue(-n.x, n.y, n.z), o.set_m_rayFromWorld(s),
                        o.set_m_rayToWorld(l), o.set_m_collisionFilterGroup(r), o.set_m_collisionFilterMask(a),
                        o.set_m_collisionObject(null), o.set_m_closestHitFraction(1), this._nativeCollisionWorld.rayTest(s, l, o),
                        o.hasHit()) {
                        if (i) {
                            i.succeeded = !0, i.collider = Xt._physicObjectsMap[o.get_m_collisionObject().getUserIndex()],
                                i.hitFraction = o.get_m_closestHitFraction();
                            var h = o.get_m_hitPointWorld(),
                                u = i.point;
                            u.x = -h.x(), u.y = h.y(), u.z = h.z();
                            var c = o.get_m_hitNormalWorld(),
                                _ = i.normal;
                            _.x = -c.x(), _.y = c.y(), _.z = c.z();
                        }
                        return !0;
                    }
                    return i && (i.succeeded = !1), !1;
                }, t.raycastAllFromTo = function(t, n, i, r, a) {
                    void 0 === r && (r = Ut.COLLISIONFILTERGROUP_ALLFILTER), void 0 === a && (a = Ut.COLLISIONFILTERGROUP_ALLFILTER);
                    var o = this._nativeAllHitsRayResultCallback,
                        s = e._nativeTempVector30,
                        l = e._nativeTempVector31;
                    i.length = 0, s.setValue(-t.x, t.y, t.z), l.setValue(-n.x, n.y, n.z), o.set_m_rayFromWorld(s),
                        o.set_m_rayToWorld(l), o.set_m_collisionFilterGroup(r), o.set_m_collisionFilterMask(a);
                    var h = o.get_m_collisionObjects(),
                        u = o.get_m_hitPointWorld(),
                        c = o.get_m_hitNormalWorld(),
                        _ = o.get_m_hitFractions();
                    h.clear(), u.clear(), c.clear(), _.clear(), this._nativeCollisionWorld.rayTest(s, l, o);
                    var d = h.size();
                    if (d > 0) {
                        this._collisionsUtils.recoverAllHitResultsPool();
                        for (var f = 0; d > f; f++) {
                            var m = this._collisionsUtils.getHitResult();
                            i.push(m), m.succeeded = !0, m.collider = Xt._physicObjectsMap[h.at(f).getUserIndex()],
                                m.hitFraction = _.at(f);
                            var p = u.at(f),
                                T = m.point;
                            T.x = -p.x(), T.y = p.y(), T.z = p.z();
                            var E = c.at(f),
                                v = m.normal;
                            v.x = -E.x(), v.y = E.y(), v.z = E.z();
                        }
                        return !0;
                    }
                    return !1;
                }, t.rayCast = function(t, n, i, r, a) {
                    void 0 === i && (i = 2147483647), void 0 === r && (r = Ut.COLLISIONFILTERGROUP_ALLFILTER),
                        void 0 === a && (a = Ut.COLLISIONFILTERGROUP_ALLFILTER);
                    var o = t.origin,
                        s = e._tempVector30;
                    return Te.normalize(t.direction, s), Te.scale(s, i, s), Te.add(o, s, s), this.raycastFromTo(o, s, n, r, a);
                }, t.rayCastAll = function(t, n, i, r, a) {
                    void 0 === i && (i = 2147483647), void 0 === r && (r = Ut.COLLISIONFILTERGROUP_ALLFILTER),
                        void 0 === a && (a = Ut.COLLISIONFILTERGROUP_ALLFILTER);
                    var o = t.origin,
                        s = e._tempVector30;
                    return Te.normalize(t.direction, s), Te.scale(s, i, s), Te.add(o, s, s), this.raycastAllFromTo(o, s, n, r, a);
                }, t.shapeCast = function(t, n, i, r, a, o, s, l, h) {
                    void 0 === s && (s = Ut.COLLISIONFILTERGROUP_ALLFILTER), void 0 === l && (l = Ut.COLLISIONFILTERGROUP_ALLFILTER),
                        void 0 === h && (h = 0);
                    var u = this._nativeClosestConvexResultCallback,
                        c = e._nativeTempVector30,
                        _ = e._nativeTempVector31,
                        d = e._nativeTempQuaternion0,
                        f = e._nativeTempQuaternion1,
                        m = e._nativeTempTransform0,
                        p = e._nativeTempTransform1,
                        T = t._nativeShape;
                    if (c.setValue(-n.x, n.y, n.z), _.setValue(-i.x, i.y, i.z), u.set_m_collisionFilterGroup(s),
                        u.set_m_collisionFilterMask(l), m.setOrigin(c), p.setOrigin(_), a ? (d.setValue(-a.x, a.y, a.z, -a.w),
                            m.setRotation(d)) : m.setRotation(this._nativeDefaultQuaternion), o ? (f.setValue(-o.x, o.y, o.z, -o.w),
                            p.setRotation(f)) : p.setRotation(this._nativeDefaultQuaternion), u.set_m_hitCollisionObject(null),
                        u.set_m_closestHitFraction(1), this._nativeCollisionWorld.convexSweepTest(T, m, p, u, h),
                        u.hasHit()) {
                        if (r) {
                            r.succeeded = !0, r.collider = Xt._physicObjectsMap[u.get_m_hitCollisionObject().getUserIndex()],
                                r.hitFraction = u.get_m_closestHitFraction();
                            var E = u.get_m_hitPointWorld(),
                                v = u.get_m_hitNormalWorld(),
                                g = r.point,
                                S = r.normal;
                            g.x = -E.x(), g.y = E.y(), g.z = E.z(), S.x = -v.x(), S.y = v.y(), S.z = v.z();
                        }
                        return !0;
                    }
                    return r && (r.succeeded = !1), !1;
                }, t.shapeCastAll = function(t, n, i, r, a, o, s, l, h) {
                    void 0 === s && (s = Ut.COLLISIONFILTERGROUP_ALLFILTER), void 0 === l && (l = Ut.COLLISIONFILTERGROUP_ALLFILTER),
                        void 0 === h && (h = 0);
                    var u = this._nativeAllConvexResultCallback,
                        c = e._nativeTempVector30,
                        _ = e._nativeTempVector31,
                        d = e._nativeTempQuaternion0,
                        f = e._nativeTempQuaternion1,
                        m = e._nativeTempTransform0,
                        p = e._nativeTempTransform1,
                        T = t._nativeShape;
                    r.length = 0, c.setValue(-n.x, n.y, n.z), _.setValue(-i.x, i.y, i.z), u.set_m_collisionFilterGroup(s),
                        u.set_m_collisionFilterMask(l), m.setOrigin(c), p.setOrigin(_), a ? (d.setValue(-a.x, a.y, a.z, -a.w),
                            m.setRotation(d)) : m.setRotation(this._nativeDefaultQuaternion), o ? (f.setValue(-o.x, o.y, o.z, -o.w),
                            p.setRotation(f)) : p.setRotation(this._nativeDefaultQuaternion);
                    var E = u.get_m_collisionObjects();
                    E.clear(), this._nativeCollisionWorld.convexSweepTest(T, m, p, u, h);
                    var v = E.size();
                    if (v > 0) {
                        for (var g = u.get_m_hitPointWorld(), S = u.get_m_hitNormalWorld(), y = u.get_m_hitFractions(), x = 0; v > x; x++) {
                            var D = this._collisionsUtils.getHitResult();
                            r.push(D), D.succeeded = !0, D.collider = Xt._physicObjectsMap[E.at(x).getUserIndex()],
                                D.hitFraction = y.at(x);
                            var I = g.at(x),
                                R = D.point;
                            R.x = -I.x(), R.y = I.y(), R.z = I.z();
                            var M = S.at(x),
                                A = D.normal;
                            A.x = -M.x(), A.y = M.y(), A.z = M.z();
                        }
                        return !0;
                    }
                    return !1;
                }, t.addConstraint = function(e, t) {
                    if (void 0 === t && (t = !1), !this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeDiscreteDynamicsWorld.addConstraint(e._nativeConstraint, t), e._simulation = this;
                }, t.removeConstraint = function(e) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeDiscreteDynamicsWorld.removeConstraint(e._nativeConstraint);
                }, t._updatePhysicsTransformFromRender = function() {
                    for (var e = this._physicsUpdateList.elements, t = 0, n = this._physicsUpdateList.length; n > t; t++) {
                        var i = e[t];
                        i._derivePhysicsTransformation(!1), i._inPhysicUpdateListIndex = -1;
                    }
                    this._physicsUpdateList.length = 0;
                }, t._updateCharacters = function() {
                    for (var e = 0, t = this._characters.length; t > e; e++) {
                        var n = this._characters[e];
                        n._updateTransformComponent(n._nativeColliderObject.getWorldTransform());
                    }
                }, t._updateCollisions = function() {
                    this._collisionsUtils.recoverAllContactPointsPool();
                    var e = this._currentFrameCollisions;
                    this._currentFrameCollisions = this._previousFrameCollisions, this._currentFrameCollisions.length = 0,
                        this._previousFrameCollisions = e;
                    for (var t = N.loopCount, n = this._nativeDispatcher.getNumManifolds(), i = 0; n > i; i++) {
                        var r = this._nativeDispatcher.getManifoldByIndexInternal(i),
                            a = Xt._physicObjectsMap[r.getBody0().getUserIndex()],
                            o = Xt._physicObjectsMap[r.getBody1().getUserIndex()],
                            s = null,
                            l = !1,
                            h = null,
                            u = a.isTrigger || o.isTrigger;
                        if (u && (a.owner._needProcessTriggers || o.owner._needProcessTriggers))
                            for (var c = r.getNumContacts(), _ = 0; c > _; _++) {
                                var d = r.getContactPoint(_),
                                    f = d.getDistance();
                                if (0 >= f) {
                                    s = this._collisionsUtils.getCollision(a, o), h = s.contacts, l = s._updateFrame !== t,
                                        l && (s._isTrigger = !0, h.length = 0);
                                    break;
                                }
                            } else if ((a.owner._needProcessCollisions || o.owner._needProcessCollisions) && (a._enableProcessCollisions || o._enableProcessCollisions))
                                for (c = r.getNumContacts(),
                                    _ = 0; c > _; _++)
                                    if (d = r.getContactPoint(_), f = d.getDistance(), 0 >= f) {
                                        var m = this._collisionsUtils.getContactPoints();
                                        m.colliderA = a, m.colliderB = o, m.distance = f;
                                        var p = d.get_m_normalWorldOnB(),
                                            T = m.normal;
                                        T.x = -p.x(), T.y = p.y(), T.z = p.z();
                                        var E = d.get_m_positionWorldOnA(),
                                            v = m.positionOnA;
                                        v.x = -E.x(), v.y = E.y(), v.z = E.z();
                                        var g = d.get_m_positionWorldOnB(),
                                            S = m.positionOnB;
                                        S.x = -g.x(), S.y = g.y(), S.z = g.z(), s || (s = this._collisionsUtils.getCollision(a, o),
                                                h = s.contacts, l = s._updateFrame !== t, l && (s._isTrigger = !1, h.length = 0)),
                                            h.push(m);
                                    }
                        s && l && (this._currentFrameCollisions.push(s), s._setUpdateFrame(t));
                    }
                }, t._eventScripts = function() {
                    for (var e = N.loopCount, t = 0, n = this._currentFrameCollisions.length; n > t; t++) {
                        var i = this._currentFrameCollisions[t],
                            r = i._colliderA,
                            a = i._colliderB;
                        if (!r.destroyed && !a.destroyed)
                            if (e - i._lastUpdateFrame === 1) {
                                var o = r.owner,
                                    s = o._scripts;
                                if (s)
                                    if (i._isTrigger) {
                                        if (o._needProcessTriggers)
                                            for (var l = 0, h = s.length; h > l; l++) s[l].onTriggerStay(a);
                                    } else if (o._needProcessCollisions)
                                    for (l = 0, h = s.length; h > l; l++) i.other = a,
                                        s[l].onCollisionStay(i);
                                var u = a.owner,
                                    c = u._scripts;
                                if (c)
                                    if (i._isTrigger) {
                                        if (u._needProcessTriggers)
                                            for (l = 0, h = c.length; h > l; l++) c[l].onTriggerStay(r);
                                    } else if (u._needProcessCollisions)
                                    for (l = 0, h = c.length; h > l; l++) i.other = r,
                                        c[l].onCollisionStay(i);
                            } else {
                                if (o = r.owner, s = o._scripts)
                                    if (i._isTrigger) {
                                        if (o._needProcessTriggers)
                                            for (l = 0, h = s.length; h > l; l++) s[l].onTriggerEnter(a);
                                    } else if (o._needProcessCollisions)
                                    for (l = 0, h = s.length; h > l; l++) i.other = a,
                                        s[l].onCollisionEnter(i);
                                if (u = a.owner, c = u._scripts)
                                    if (i._isTrigger) {
                                        if (u._needProcessTriggers)
                                            for (l = 0, h = c.length; h > l; l++) c[l].onTriggerEnter(r);
                                    } else if (u._needProcessCollisions)
                                    for (l = 0, h = c.length; h > l; l++) i.other = r,
                                        c[l].onCollisionEnter(i);
                            }
                    }
                    for (t = 0, n = this._previousFrameCollisions.length; n > t; t++) {
                        var _ = this._previousFrameCollisions[t],
                            d = _._colliderA,
                            f = _._colliderB;
                        if (!d.destroyed && !f.destroyed && e - _._updateFrame === 1) {
                            if (this._collisionsUtils.recoverCollision(_), o = d.owner, s = o._scripts)
                                if (_._isTrigger) {
                                    if (o._needProcessTriggers)
                                        for (l = 0, h = s.length; h > l; l++) s[l].onTriggerExit(f);
                                } else if (o._needProcessCollisions)
                                for (l = 0, h = s.length; h > l; l++) _.other = f,
                                    s[l].onCollisionExit(_);
                            if (u = f.owner, c = u._scripts)
                                if (_._isTrigger) {
                                    if (u._needProcessTriggers)
                                        for (l = 0, h = c.length; h > l; l++) c[l].onTriggerExit(d);
                                } else if (u._needProcessCollisions)
                                for (l = 0, h = c.length; h > l; l++) _.other = d,
                                    c[l].onCollisionExit(_);
                        }
                    }
                }, t.clearForces = function() {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeDiscreteDynamicsWorld.clearForces();
                }, a(0, t, "gravity", function() {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                    return this._gravity;
                }, function(t) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._gravity = t;
                    var n = e._nativeTempVector30;
                    n.setValue(-t.x, t.y, t.z), this._nativeDiscreteDynamicsWorld.setGravity(n);
                }), a(0, t, "continuousCollisionDetection", function() {
                    return this._nativeDispatchInfo.get_m_useContinuous();
                }, function(e) {
                    this._nativeDispatchInfo.set_m_useContinuous(e);
                }), a(0, t, "speculativeContactRestitution", function() {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
                    return this._nativeDiscreteDynamicsWorld.getApplySpeculativeContactRestitution();
                }, function(e) {
                    if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
                    this._nativeDiscreteDynamicsWorld.setApplySpeculativeContactRestitution(e);
                }), e.createConstraint = function() {}, e.PHYSICSENGINEFLAGS_NONE = 0, e.PHYSICSENGINEFLAGS_COLLISIONSONLY = 1,
                e.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 2, e.PHYSICSENGINEFLAGS_MULTITHREADED = 4,
                e.PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 8, e.SOLVERMODE_RANDMIZE_ORDER = 1,
                e.SOLVERMODE_FRICTION_SEPARATE = 2, e.SOLVERMODE_USE_WARMSTARTING = 4, e.SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16,
                e.SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32, e.SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64,
                e.SOLVERMODE_CACHE_FRIENDLY = 128, e.SOLVERMODE_SIMD = 256, e.SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512,
                e.SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024, e.disableSimulation = !1,
                i(e, ["_nativeTempVector30", function() {
                    return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeTempVector31", function() {
                    return this._nativeTempVector31 = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeTempQuaternion0", function() {
                    return this._nativeTempQuaternion0 = new W._physics3D.btQuaternion(0, 0, 0, 1);
                }, "_nativeTempQuaternion1", function() {
                    return this._nativeTempQuaternion1 = new W._physics3D.btQuaternion(0, 0, 0, 1);
                }, "_nativeTempTransform0", function() {
                    return this._nativeTempTransform0 = new W._physics3D.btTransform();
                }, "_nativeTempTransform1", function() {
                    return this._nativeTempTransform1 = new W._physics3D.btTransform();
                }, "_tempVector30", function() {
                    return this._tempVector30 = new Te();
                }]), e;
        }(),
        Xt = function(e) {
            function t(e, n) {
                this._restitution = 0, this._friction = .5, this._rollingFriction = 0, this._ccdMotionThreshold = 0,
                    this._ccdSweptSphereRadius = 0, this._colliderShape = null, this._transformFlag = 2147483647,
                    this._enableProcessCollisions = !0, this._inPhysicUpdateListIndex = -1, this.canScaleShape = !0,
                    t.__super.call(this), this._collisionGroup = 1, this._canCollideWith = Ut.COLLISIONFILTERGROUP_ALLFILTER,
                    this._collisionGroup = e, this._canCollideWith = n, t._physicObjectsMap[this.id] = this;
            }
            r(t, "laya.d3.physics.PhysicsComponent", e);
            var o = t.prototype;
            return o._isValid = function() {
                    return this._simulation && this._colliderShape && this._enabled;
                }, o._parse = function(e) {
                    null != e.collisionGroup && (this.collisionGroup = e.collisionGroup), null != e.canCollideWith && (this.canCollideWith = e.canCollideWith),
                        null != e.ccdMotionThreshold && (this.ccdMotionThreshold = e.ccdMotionThreshold),
                        null != e.ccdSweptSphereRadius && (this.ccdSweptSphereRadius = e.ccdSweptSphereRadius);
                }, o._parseShape = function(e) {
                    var t = e.length;
                    if (1 === t) {
                        var n = X._creatShape(e[0]);
                        this.colliderShape = n;
                    } else {
                        for (var i = new fn(), r = 0; t > r; r++) n = X._creatShape(e[r]), i.addChildShape(n);
                        this.colliderShape = i;
                    }
                }, o._onScaleChange = function(e) {
                    this._colliderShape._setScale(e);
                }, o._setTransformFlag = function(e, t) {
                    t ? this._transformFlag |= e : this._transformFlag &= ~e;
                }, o._getTransformFlag = function(e) {
                    return 0 != (this._transformFlag & e);
                }, o._addToSimulation = function() {}, o._removeFromSimulation = function() {},
                o._derivePhysicsTransformation = function(e) {
                    this._innerDerivePhysicsTransformation(this._nativeColliderObject.getWorldTransform(), e);
                }, o._innerDerivePhysicsTransformation = function(e, n) {
                    var i = this.owner._transform,
                        r = i.rotation;
                    if (n || this._getTransformFlag(8)) {
                        var a = this._colliderShape.localOffset,
                            o = i.position,
                            s = t._nativeVector30;
                        if (0 !== a.x || 0 !== a.y || 0 !== a.z) {
                            var l = t._tempVector30;
                            t.physicVector3TransformQuat(a, r.x, r.y, r.z, r.w, l), Te.add(o, l, l), s.setValue(-l.x, l.y, l.z);
                        } else s.setValue(-o.x, o.y, o.z);
                        e.setOrigin(s), this._setTransformFlag(8, !1);
                    }
                    if (n || this._getTransformFlag(16)) {
                        var h = this._colliderShape.localRotation,
                            u = t._nativeQuaternion0;
                        if (0 !== h.x || 0 !== h.y || 0 !== h.z || 1 !== h.w) {
                            var c = t._tempQuaternion0;
                            t.physicQuaternionMultiply(r.x, r.y, r.z, r.w, h, c), u.setValue(-c.x, c.y, c.z, -c.w);
                        } else u.setValue(-r.x, r.y, r.z, -r.w);
                        e.setRotation(u), this._setTransformFlag(16, !1);
                    }
                    (n || this._getTransformFlag(32)) && (this._onScaleChange(i.scale), this._setTransformFlag(32, !1));
                }, o._updateTransformComponent = function(e) {
                    var n = this._colliderShape.localOffset,
                        i = this._colliderShape.localRotation,
                        r = this.owner._transform,
                        a = r.position,
                        o = r.rotation,
                        s = e.getOrigin(),
                        l = e.getRotation(),
                        h = -l.x(),
                        u = l.y(),
                        c = l.z(),
                        _ = -l.w();
                    if (0 !== n.x || 0 !== n.y || 0 !== n.z) {
                        var d = t._tempVector30;
                        t.physicVector3TransformQuat(n, h, u, c, _, d), a.x = -s.x() - d.x, a.y = s.y() - d.y,
                            a.z = s.z() - d.z;
                    } else a.x = -s.x(), a.y = s.y(), a.z = s.z();
                    if (r.position = a, 0 !== i.x || 0 !== i.y || 0 !== i.z || 1 !== i.w) {
                        var f = t._tempQuaternion0;
                        i.invert(f), t.physicQuaternionMultiply(h, u, c, _, f, o);
                    } else o.x = h, o.y = u, o.z = c, o.w = _;
                    r.rotation = o;
                }, o._onEnable = function() {
                    this._simulation = this.owner._scene.physicsSimulation, this._nativeColliderObject.setContactProcessingThreshold(1e30),
                        this._colliderShape && this._enabled && (this._derivePhysicsTransformation(!0),
                            this._addToSimulation());
                }, o._onDisable = function() {
                    this._colliderShape && this._enabled && (this._removeFromSimulation(), -1 !== this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.remove(this)),
                        this._simulation = null;
                }, o._onShapeChange = function(e) {
                    var t = this._nativeColliderObject,
                        n = t.getCollisionFlags();
                    e.needsCustomCollisionCallback ? 0 === (8 & n) && t.setCollisionFlags(8 | n) : (8 & n) > 0 && t.setCollisionFlags(8 ^ n);
                }, o._onAdded = function() {
                    this.enabled = this._enabled, this.restitution = this._restitution, this.friction = this._friction,
                        this.rollingFriction = this._rollingFriction, this.ccdMotionThreshold = this._ccdMotionThreshold,
                        this.ccdSweptSphereRadius = this._ccdSweptSphereRadius, this.owner.transform.on("transformchanged", this, this._onTransformChanged);
                }, o._onDestroy = function() {
                    var n = W._physics3D;
                    delete t._physicObjectsMap[this.id], n.destroy(this._nativeColliderObject), this._colliderShape.destroy(),
                        e.prototype._onDestroy.call(this), this._nativeColliderObject = null, this._colliderShape = null,
                        this._simulation = null, this.owner.transform.off("transformchanged", this, this._onTransformChanged);
                }, o._onTransformChanged = function(e) {
                    t._addUpdateList && (e &= 56, e && (this._transformFlag |= e, this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this)));
                }, o._cloneTo = function(e) {
                    var t = e;
                    t.restitution = this._restitution, t.friction = this._friction, t.rollingFriction = this._rollingFriction,
                        t.ccdMotionThreshold = this._ccdMotionThreshold, t.ccdSweptSphereRadius = this._ccdSweptSphereRadius,
                        t.collisionGroup = this._collisionGroup, t.canCollideWith = this._canCollideWith,
                        t.canScaleShape = this.canScaleShape, this._colliderShape && (t.colliderShape = this._colliderShape.clone());
                }, a(0, o, "isActive", function() {
                    return this._nativeColliderObject ? this._nativeColliderObject.isActive() : !1;
                }), a(0, o, "restitution", function() {
                    return this._restitution;
                }, function(e) {
                    this._restitution = e, this._nativeColliderObject && this._nativeColliderObject.setRestitution(e);
                }), a(0, o, "friction", function() {
                    return this._friction;
                }, function(e) {
                    this._friction = e, this._nativeColliderObject && this._nativeColliderObject.setFriction(e);
                }), a(0, o, "rollingFriction", function() {
                    return this._nativeColliderObject.getRollingFriction();
                }, function(e) {
                    this._rollingFriction = e, this._nativeColliderObject && this._nativeColliderObject.setRollingFriction(e);
                }), a(0, o, "ccdMotionThreshold", function() {
                    return this._ccdMotionThreshold;
                }, function(e) {
                    this._ccdMotionThreshold = e, this._nativeColliderObject && this._nativeColliderObject.setCcdMotionThreshold(e);
                }), a(0, o, "ccdSweptSphereRadius", function() {
                    return this._ccdSweptSphereRadius;
                }, function(e) {
                    this._ccdSweptSphereRadius = e, this._nativeColliderObject && this._nativeColliderObject.setCcdSweptSphereRadius(e);
                }), a(0, o, "collisionGroup", function() {
                    return this._collisionGroup;
                }, function(e) {
                    this._collisionGroup !== e && (this._collisionGroup = e, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(),
                        this._addToSimulation()));
                }), a(0, o, "simulation", function() {
                    return this._simulation;
                }), a(0, o, "colliderShape", function() {
                    return this._colliderShape;
                }, function(e) {
                    var t = this._colliderShape;
                    if (t && (t._attatched = !1, t._attatchedCollisionObject = null), this._colliderShape = e,
                        e) {
                        if (e._attatched) throw "PhysicsComponent: this shape has attatched to other entity.";
                        if (e._attatched = !0, e._attatchedCollisionObject = this, this._nativeColliderObject) {
                            this._nativeColliderObject.setCollisionShape(e._nativeShape);
                            var n = this._simulation && this._enabled;
                            n && t && this._removeFromSimulation(), this._onShapeChange(e), n && (this._derivePhysicsTransformation(!0),
                                this._addToSimulation());
                        }
                    } else this._simulation && this._enabled && t && this._removeFromSimulation();
                }), a(0, o, "enabled", e.prototype._$get_enabled, function(e) {
                    this._simulation && this._colliderShape && (e ? (this._derivePhysicsTransformation(!0),
                        this._addToSimulation()) : this._removeFromSimulation()), n.superSet(f, this, "enabled", e);
                }), a(0, o, "canCollideWith", function() {
                    return this._canCollideWith;
                }, function(e) {
                    this._canCollideWith !== e && (this._canCollideWith = e, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(),
                        this._addToSimulation()));
                }), t._createAffineTransformationArray = function(e, t, n, i, r, a, o, s, l) {
                    var h = i + i,
                        u = r + r,
                        c = a + a,
                        _ = i * h,
                        d = i * u,
                        f = i * c,
                        m = r * u,
                        p = r * c,
                        T = a * c,
                        E = o * h,
                        v = o * u,
                        g = o * c,
                        S = s[0],
                        y = s[1],
                        x = s[2];
                    l[0] = (1 - (m + T)) * S, l[1] = (d + g) * S, l[2] = (f - v) * S, l[3] = 0, l[4] = (d - g) * y,
                        l[5] = (1 - (_ + T)) * y, l[6] = (p + E) * y, l[7] = 0, l[8] = (f + v) * x, l[9] = (p - E) * x,
                        l[10] = (1 - (_ + m)) * x, l[11] = 0, l[12] = e, l[13] = t, l[14] = n, l[15] = 1;
                }, t.physicVector3TransformQuat = function(e, t, n, i, r, a) {
                    var o = e.x,
                        s = e.y,
                        l = e.z,
                        h = r * o + n * l - i * s,
                        u = r * s + i * o - t * l,
                        c = r * l + t * s - n * o,
                        _ = -t * o - n * s - i * l;
                    a.x = h * r + _ * -t + u * -i - c * -n, a.y = u * r + _ * -n + c * -t - h * -i,
                        a.z = c * r + _ * -i + h * -n - u * -t;
                }, t.physicQuaternionMultiply = function(e, t, n, i, r, a) {
                    var o = r.x,
                        s = r.y,
                        l = r.z,
                        h = r.w,
                        u = t * l - n * s,
                        c = n * o - e * l,
                        _ = e * s - t * o,
                        d = e * o + t * s + n * l;
                    a.x = e * h + o * i + u, a.y = t * h + s * i + c, a.z = n * h + l * i + _, a.w = i * h - d;
                }, t.ACTIVATIONSTATE_ACTIVE_TAG = 1, t.ACTIVATIONSTATE_ISLAND_SLEEPING = 2, t.ACTIVATIONSTATE_WANTS_DEACTIVATION = 3,
                t.ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4, t.ACTIVATIONSTATE_DISABLE_SIMULATION = 5,
                t.COLLISIONFLAGS_STATIC_OBJECT = 1, t.COLLISIONFLAGS_KINEMATIC_OBJECT = 2, t.COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4,
                t.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8, t.COLLISIONFLAGS_CHARACTER_OBJECT = 16,
                t.COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32, t.COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64,
                t._physicObjectsMap = {}, t._addUpdateList = !0, i(t, ["_tempVector30", function() {
                    return this._tempVector30 = new Te();
                }, "_tempQuaternion0", function() {
                    return this._tempQuaternion0 = new he();
                }, "_tempQuaternion1", function() {
                    return this._tempQuaternion1 = new he();
                }, "_tempMatrix4x40", function() {
                    return this._tempMatrix4x40 = new Ht();
                }, "_nativeVector30", function() {
                    return this._nativeVector30 = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeQuaternion0", function() {
                    return this._nativeQuaternion0 = new W._physics3D.btQuaternion(0, 0, 0, 1);
                }]), t;
        }(f),
        Wt = function(e) {
            function t(e) {
                if (this._indexInList = -1, this._indexInCastShadowList = -1, this._boundsChange = !0,
                    this._visible = !0, this._indexInOctreeMotionList = -1, this._updateMark = -1, this._updateRenderType = -1,
                    this._isPartOfStaticBatch = !1, this._staticBatch = null, t.__super.call(this),
                    this._sharedMaterials = [], this._id = ++t._uniqueIDCounter, this._indexInCastShadowList = -1,
                    this._bounds = new xt(Te._ZERO, Te._ZERO), R.supportWebGLPlusCulling) {
                    var n = wt._cullingBufferLength;
                    this._cullingBufferIndex = n;
                    var i = wt._cullingBuffer,
                        r = n + 7;
                    if (r >= i.length) {
                        var a = i;
                        i = wt._cullingBuffer = new Float32Array(i.length + 4096), i.set(a, 0);
                    }
                    i[n] = 2, wt._cullingBufferLength = r;
                }
                this._renderElements = [], this._owner = e, this._enable = !0, this._materialsInstance = [],
                    this._shaderValues = new ue(null), this._defineDatas = new Ue(), this.lightmapIndex = -1,
                    this._castShadow = !1, this.receiveShadow = !1, this.sortingFudge = 0, e && this._owner.transform.on("transformchanged", this, this._onWorldMatNeedChange);
            }
            r(t, "laya.d3.core.render.BaseRender", e);
            var o = t.prototype;
            return n.imps(o, {
                    "laya.resource.ISingletonElement": !0,
                    "laya.d3.core.scene.IOctreeObject": !0
                }), o._getOctreeNode = function() {
                    return this._octreeNode;
                }, o._setOctreeNode = function(e) {
                    this._octreeNode = e;
                }, o._getIndexInMotionList = function() {
                    return this._indexInOctreeMotionList;
                }, o._setIndexInMotionList = function(e) {
                    this._indexInOctreeMotionList = e;
                }, o._changeMaterialReference = function(e, t) {
                    e && e._removeReference(), t._addReference();
                }, o._getInstanceMaterial = function(e, t) {
                    var n = new e.constructor();
                    return e.cloneTo(n), n.name = n.name + "(Instance)", this._materialsInstance[t] = !0,
                        this._changeMaterialReference(this._sharedMaterials[t], n), this._sharedMaterials[t] = n,
                        n;
                }, o._applyLightMapParams = function() {
                    if (this._scene && this._lightmapIndex >= 0) {
                        var e = this._scene.getlightmaps();
                        this._lightmapIndex < e.length ? (this._defineDatas.add(Jn.SAHDERDEFINE_LIGHTMAP),
                            this._shaderValues.setTexture(Jn.LIGHTMAP, e[this._lightmapIndex])) : this._defineDatas.remove(Jn.SAHDERDEFINE_LIGHTMAP);
                    } else this._defineDatas.remove(Jn.SAHDERDEFINE_LIGHTMAP);
                }, o._onWorldMatNeedChange = function(e) {
                    this._boundsChange = !0, this._octreeNode && (e &= 56, e && -1 === this._indexInOctreeMotionList && this._octreeNode._octree.addMotionObject(this));
                }, o._calculateBoundingBox = function() {
                    throw "BaseRender: must override it.";
                }, o._getIndexInList = function() {
                    return this._indexInList;
                }, o._setIndexInList = function(e) {
                    this._indexInList = e;
                }, o._setBelongScene = function(e) {
                    this._scene !== e && (this._scene = e, this._applyLightMapParams());
                }, o._needRender = function(e) {
                    return !0;
                }, o._renderUpdate = function(e, t) {}, o._renderUpdateWithCamera = function(e, t) {},
                o._revertBatchRenderUpdate = function(e) {}, o._destroy = function() {
                    -1 !== this._indexInOctreeMotionList && this._octreeNode._octree.removeMotionObject(this),
                        this.offAll();
                    var e = 0,
                        t = 0;
                    for (e = 0, t = this._renderElements.length; t > e; e++) this._renderElements[e].destroy();
                    for (e = 0, t = this._sharedMaterials.length; t > e; e++) this._sharedMaterials[e].destroyed || this._sharedMaterials[e]._removeReference();
                    this._renderElements = null, this._owner = null, this._sharedMaterials = null, this._bounds = null,
                        this._lightmapScaleOffset = null;
                }, a(0, o, "bounds", function() {
                    return this._boundsChange && (this._calculateBoundingBox(), this._boundsChange = !1),
                        this._bounds;
                }), a(0, o, "id", function() {
                    return this._id;
                }), a(0, o, "material", function() {
                    var e = this._sharedMaterials[0];
                    if (e && !this._materialsInstance[0]) {
                        var t = this._getInstanceMaterial(e, 0),
                            n = this._renderElements[0];
                        n && (n.material = t);
                    }
                    return this._sharedMaterials[0];
                }, function(e) {
                    this.sharedMaterial = e;
                }), a(0, o, "isPartOfStaticBatch", function() {
                    return this._isPartOfStaticBatch;
                }), a(0, o, "sharedMaterial", function() {
                    return this._sharedMaterials[0];
                }, function(e) {
                    var t = this._sharedMaterials[0];
                    if (t !== e) {
                        this._sharedMaterials[0] = e, this._materialsInstance[0] = !1, this._changeMaterialReference(t, e);
                        var n = this._renderElements[0];
                        n && (n.material = e);
                    }
                }), a(0, o, "lightmapIndex", function() {
                    return this._lightmapIndex;
                }, function(e) {
                    this._lightmapIndex !== e && (this._lightmapIndex = e, this._applyLightMapParams());
                }), a(0, o, "lightmapScaleOffset", function() {
                    return this._lightmapScaleOffset;
                }, function(e) {
                    this._lightmapScaleOffset = e, this._shaderValues.setVector(Jn.LIGHTMAPSCALEOFFSET, e),
                        this._defineDatas.add(Jn.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
                }), a(0, o, "castShadow", function() {
                    return this._castShadow;
                }, function(e) {
                    this._castShadow !== e && (this._owner.activeInHierarchy && (e ? this._scene._addShadowCastRenderObject(this) : this._scene._removeShadowCastRenderObject(this)),
                        this._castShadow = e);
                }), a(0, o, "enable", function() {
                    return this._enable;
                }, function(e) {
                    this._enable = !!e;
                }), a(0, o, "materials", function() {
                    for (var e = 0, t = this._sharedMaterials.length; t > e; e++)
                        if (!this._materialsInstance[e]) {
                            var n = this._getInstanceMaterial(this._sharedMaterials[e], e),
                                i = this._renderElements[e];
                            i && (i.material = n);
                        }
                    return this._sharedMaterials.slice();
                }, function(e) {
                    this.sharedMaterials = e;
                }), a(0, o, "sharedMaterials", function() {
                    return this._sharedMaterials.slice();
                }, function(e) {
                    for (var t = this._sharedMaterials, n = 0, i = t.length; i > n; n++) t[n]._removeReference();
                    if (!e) throw new Error("BaseRender: shadredMaterials value can't be null.");
                    var r = e.length;
                    for (this._materialsInstance.length = r, t.length = r, n = 0; r > n; n++) {
                        var a = t[n],
                            o = e[n];
                        if (a !== o) {
                            this._materialsInstance[n] = !1;
                            var s = this._renderElements[n];
                            s && (s.material = o);
                        }
                        o._addReference(), t[n] = o;
                    }
                }), a(0, o, "receiveShadow", function() {
                    return this._receiveShadow;
                }, function(e) {
                    this._receiveShadow !== e && (this._receiveShadow = e, e ? this._defineDatas.add(Jn.SHADERDEFINE_RECEIVE_SHADOW) : this._defineDatas.remove(Jn.SHADERDEFINE_RECEIVE_SHADOW));
                }), t._uniqueIDCounter = 0, i(t, ["_tempBoundBoxCorners", function() {
                    return this._tempBoundBoxCorners = [new Te(), new Te(), new Te(), new Te(), new Te(), new Te(), new Te(), new Te()];
                }]), t;
        }(T),
        Yt = (function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.component.Script3D", e);
            var i = t.prototype;
            return i._checkProcessTriggers = function() {
                    var e = laya.d3.component.Script3D.prototype;
                    return this.onTriggerEnter !== e.onTriggerEnter ? !0 : this.onTriggerStay !== e.onTriggerStay ? !0 : this.onTriggerExit !== e.onTriggerExit ? !0 : !1;
                }, i._checkProcessCollisions = function() {
                    var e = laya.d3.component.Script3D.prototype;
                    return this.onCollisionEnter !== e.onCollisionEnter ? !0 : this.onCollisionStay !== e.onCollisionStay ? !0 : this.onCollisionExit !== e.onCollisionExit ? !0 : !1;
                }, i._onAwake = function() {
                    this.onAwake(), this.onStart !== laya.d3.component.Script3D.prototype.onStart && n.startTimer.callLater(this, this.onStart);
                }, i._onEnable = function() {
                    this.owner._scene._scriptPool.add(this);
                    var e = laya.d3.component.Script3D.prototype;
                    this.onKeyDown !== e.onKeyDown && n.stage.on("keydown", this, this.onKeyDown), this.onKeyPress !== e.onKeyPress && n.stage.on("keypress", this, this.onKeyUp),
                        this.onKeyUp !== e.onKeyUp && n.stage.on("keyup", this, this.onKeyUp);
                }, i._onDisable = function() {
                    this.owner._scene._scriptPool.remove(this), this.owner.offAllCaller(this), n.stage.offAllCaller(this);
                }, i._isScript = function() {
                    return !0;
                }, i._onAdded = function() {
                    var e = this.owner,
                        t = e._scripts;
                    t || (e._scripts = t = []), t.push(this), e._needProcessCollisions || (e._needProcessCollisions = this._checkProcessCollisions()),
                        e._needProcessTriggers || (e._needProcessTriggers = this._checkProcessTriggers());
                }, i._onDestroy = function() {
                    var e = this.owner._scripts;
                    e.splice(e.indexOf(this), 1);
                    var t = this.owner;
                    t._needProcessTriggers = !1;
                    for (var n = 0, i = e.length; i > n; n++)
                        if (e[n]._checkProcessTriggers()) {
                            t._needProcessTriggers = !0;
                            break;
                        }
                    for (t._needProcessCollisions = !1, n = 0, i = e.length; i > n; n++)
                        if (e[n]._checkProcessCollisions()) {
                            t._needProcessCollisions = !0;
                            break;
                        }
                    this.onDestroy();
                }, i.onAwake = function() {}, i.onEnable = function() {}, i.onStart = function() {},
                i.onTriggerEnter = function(e) {}, i.onTriggerStay = function(e) {}, i.onTriggerExit = function(e) {},
                i.onCollisionEnter = function(e) {}, i.onCollisionStay = function(e) {}, i.onCollisionExit = function(e) {},
                i.onMouseDown = function() {}, i.onMouseDrag = function() {}, i.onMouseClick = function() {},
                i.onMouseUp = function() {}, i.onMouseEnter = function() {}, i.onMouseOver = function() {},
                i.onMouseOut = function() {}, i.onKeyDown = function(e) {}, i.onKeyPress = function(e) {},
                i.onKeyUp = function(e) {}, i.onUpdate = function() {}, i.onLateUpdate = function() {},
                i.onPreRender = function() {}, i.onPostRender = function() {}, i.onDisable = function() {},
                i.onDestroy = function() {}, a(0, i, "isSingleton", function() {
                    return !1;
                }), t;
        }(f), function(e) {
            function t(e) {
                this._owner = null, this._children = null, this._parent = null, this._dummy = null,
                    this._transformFlag = 0, t.__super.call(this), this._localPosition = new Te(0, 0, 0),
                    this._localRotation = new he(0, 0, 0, 1), this._localScale = new Te(1, 1, 1), this._localRotationEuler = new Te(0, 0, 0),
                    this._localMatrix = new Ht(), this._position = new Te(0, 0, 0), this._rotation = new he(0, 0, 0, 1),
                    this._scale = new Te(1, 1, 1), this._rotationEuler = new Te(0, 0, 0), this._worldMatrix = new Ht(),
                    this._owner = e, this._children = [], this._setTransformFlag(7, !1), this._setTransformFlag(248, !0);
            }
            r(t, "laya.d3.core.Transform3D", e);
            var n = t.prototype;
            return n._setTransformFlag = function(e, t) {
                    t ? this._transformFlag |= e : this._transformFlag &= ~e;
                }, n._getTransformFlag = function(e) {
                    return 0 != (this._transformFlag & e);
                }, n._setParent = function(e) {
                    if (this._parent !== e) {
                        if (this._parent) {
                            var t = this._parent._children,
                                n = t.indexOf(this);
                            t.splice(n, 1);
                        }
                        e && (e._children.push(this), e && this._onWorldTransform()), this._parent = e;
                    }
                }, n._updateLocalMatrix = function() {
                    Ht.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix);
                }, n._onWorldPositionRotationTransform = function() {
                    if (!(this._getTransformFlag(64) && this._getTransformFlag(8) && this._getTransformFlag(16) && this._getTransformFlag(128))) {
                        this._setTransformFlag(216, !0), this.event("transformchanged", this._transformFlag);
                        for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldPositionRotationTransform();
                    }
                }, n._onWorldPositionScaleTransform = function() {
                    if (!this._getTransformFlag(64) || !this._getTransformFlag(8) || !this._getTransformFlag(32)) {
                        this._setTransformFlag(104, !0), this.event("transformchanged", this._transformFlag);
                        for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldPositionScaleTransform();
                    }
                }, n._onWorldPositionTransform = function() {
                    if (!this._getTransformFlag(64) || !this._getTransformFlag(8)) {
                        this._setTransformFlag(72, !0), this.event("transformchanged", this._transformFlag);
                        for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldPositionTransform();
                    }
                }, n._onWorldRotationTransform = function() {
                    if (!this._getTransformFlag(64) || !this._getTransformFlag(16) || !this._getTransformFlag(128)) {
                        this._setTransformFlag(208, !0), this.event("transformchanged", this._transformFlag);
                        for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldPositionRotationTransform();
                    }
                }, n._onWorldScaleTransform = function() {
                    if (!this._getTransformFlag(64) || !this._getTransformFlag(32)) {
                        this._setTransformFlag(96, !0), this.event("transformchanged", this._transformFlag);
                        for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldPositionScaleTransform();
                    }
                }, n._onWorldTransform = function() {
                    if (!(this._getTransformFlag(64) && this._getTransformFlag(8) && this._getTransformFlag(16) && this._getTransformFlag(128) && this._getTransformFlag(32))) {
                        this._setTransformFlag(248, !0), this.event("transformchanged", this._transformFlag);
                        for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldTransform();
                    }
                }, n.translate = function(e, n) {
                    void 0 === n && (n = !0), n ? (Ht.createFromQuaternion(this.localRotation, t._tempMatrix0),
                        Te.transformCoordinate(e, t._tempMatrix0, t._tempVector30), Te.add(this.localPosition, t._tempVector30, this._localPosition),
                        this.localPosition = this._localPosition) : (Te.add(this.position, e, this._position),
                        this.position = this._position);
                }, n.rotate = function(e, n, i) {
                    void 0 === n && (n = !0), void 0 === i && (i = !0);
                    var r;
                    i ? r = e : (Te.scale(e, Math.PI / 180, t._tempVector30), r = t._tempVector30),
                        he.createFromYawPitchRoll(r.y, r.x, r.z, t._tempQuaternion0), n ? (he.multiply(this._localRotation, t._tempQuaternion0, this._localRotation),
                            this.localRotation = this._localRotation) : (he.multiply(t._tempQuaternion0, this.rotation, this._rotation),
                            this.rotation = this._rotation);
                }, n.getForward = function(e) {
                    var t = this.worldMatrix.elements;
                    e.x = -t[8], e.y = -t[9], e.z = -t[10];
                }, n.getUp = function(e) {
                    var t = this.worldMatrix.elements;
                    e.x = t[4], e.y = t[5], e.z = t[6];
                }, n.getRight = function(e) {
                    var t = this.worldMatrix.elements;
                    e.x = t[0], e.y = t[1], e.z = t[2];
                }, n.lookAt = function(e, t, n) {
                    void 0 === n && (n = !1);
                    var i;
                    if (n) {
                        if (i = this._localPosition, Math.abs(i.x - e.x) < ie.zeroTolerance && Math.abs(i.y - e.y) < ie.zeroTolerance && Math.abs(i.z - e.z) < ie.zeroTolerance) return;
                        he.lookAt(this._localPosition, e, t, this._localRotation), this._localRotation.invert(this._localRotation),
                            this.localRotation = this._localRotation;
                    } else {
                        var r = this.position;
                        if (i = r, Math.abs(i.x - e.x) < ie.zeroTolerance && Math.abs(i.y - e.y) < ie.zeroTolerance && Math.abs(i.z - e.z) < ie.zeroTolerance) return;
                        he.lookAt(r, e, t, this._rotation), this._rotation.invert(this._rotation), this.rotation = this._rotation;
                    }
                }, a(0, n, "_isFrontFaceInvert", function() {
                    var e = this.scale,
                        t = e.x < 0;
                    return e.y < 0 && (t = !t), e.z < 0 && (t = !t), t;
                }), a(0, n, "owner", function() {
                    return this._owner;
                }), a(0, n, "localPositionY", function() {
                    return this._localPosition.y;
                }, function(e) {
                    this._localPosition.y = e, this.localPosition = this._localPosition;
                }), a(0, n, "localScaleX", function() {
                    return this._localScale.x;
                }, function(e) {
                    this._localScale.x = e, this.localScale = this._localScale;
                }), a(0, n, "worldNeedUpdate", function() {
                    return this._getTransformFlag(64);
                }), a(0, n, "localPositionX", function() {
                    return this._localPosition.x;
                }, function(e) {
                    this._localPosition.x = e, this.localPosition = this._localPosition;
                }), a(0, n, "localPosition", function() {
                    return this._localPosition;
                }, function(e) {
                    this._localPosition !== e && e.cloneTo(this._localPosition), this._setTransformFlag(4, !0),
                        this._onWorldPositionTransform();
                }), a(0, n, "localPositionZ", function() {
                    return this._localPosition.z;
                }, function(e) {
                    this._localPosition.z = e, this.localPosition = this._localPosition;
                }), a(0, n, "localRotationX", function() {
                    return this.localRotation.x;
                }, function(e) {
                    this._localRotation.x = e, this.localRotation = this._localRotation;
                }), a(0, n, "localRotationY", function() {
                    return this.localRotation.y;
                }, function(e) {
                    this._localRotation.y = e, this.localRotation = this._localRotation;
                }), a(0, n, "localRotationZ", function() {
                    return this.localRotation.z;
                }, function(e) {
                    this._localRotation.z = e, this.localRotation = this._localRotation;
                }), a(0, n, "localRotationW", function() {
                    return this.localRotation.w;
                }, function(e) {
                    this._localRotation.w = e, this.localRotation = this._localRotation;
                }), a(0, n, "localRotation", function() {
                    if (this._getTransformFlag(1)) {
                        var e = this._localRotationEuler;
                        he.createFromYawPitchRoll(e.y / t._angleToRandin, e.x / t._angleToRandin, e.z / t._angleToRandin, this._localRotation),
                            this._setTransformFlag(1, !1);
                    }
                    return this._localRotation;
                }, function(e) {
                    this._localRotation !== e && e.cloneTo(this._localRotation), this._localRotation.normalize(this._localRotation),
                        this._setTransformFlag(6, !0), this._setTransformFlag(1, !1), this._onWorldRotationTransform();
                }), a(0, n, "localScaleY", function() {
                    return this._localScale.y;
                }, function(e) {
                    this._localScale.y = e, this.localScale = this._localScale;
                }), a(0, n, "localScaleZ", function() {
                    return this._localScale.z;
                }, function(e) {
                    this._localScale.z = e, this.localScale = this._localScale;
                }), a(0, n, "position", function() {
                    if (this._getTransformFlag(8)) {
                        if (null != this._parent) {
                            var e = this._parent.position;
                            Te.multiply(this._localPosition, this._parent.scale, t._tempVector30), Te.transformQuat(t._tempVector30, this._parent.rotation, t._tempVector30),
                                Te.add(e, t._tempVector30, this._position);
                        } else this._localPosition.cloneTo(this._position);
                        this._setTransformFlag(8, !1);
                    }
                    return this._position;
                }, function(e) {
                    if (null != this._parent) {
                        Te.subtract(e, this._parent.position, this._localPosition);
                        var n = this._parent.scale,
                            i = n.x,
                            r = n.y,
                            a = n.z;
                        if (1 !== i || 1 !== r || 1 !== a) {
                            var o = t._tempVector30;
                            o.x = 1 / i, o.y = 1 / r, o.z = 1 / a, Te.multiply(this._localPosition, o, this._localPosition);
                        }
                        var s = this._parent.rotation;
                        s.invert(t._tempQuaternion0), Te.transformQuat(this._localPosition, t._tempQuaternion0, this._localPosition);
                    } else e.cloneTo(this._localPosition);
                    this.localPosition = this._localPosition, this._position !== e && e.cloneTo(this._position),
                        this._setTransformFlag(8, !1);
                }), a(0, n, "localRotationEulerY", function() {
                    return this.localRotationEuler.y;
                }, function(e) {
                    this._localRotationEuler.y = e, this.localRotationEuler = this._localRotationEuler;
                }), a(0, n, "localScale", function() {
                    return this._localScale;
                }, function(e) {
                    this._localScale !== e && e.cloneTo(this._localScale), this._setTransformFlag(4, !0),
                        this._onWorldScaleTransform();
                }), a(0, n, "localRotationEulerX", function() {
                    return this.localRotationEuler.x;
                }, function(e) {
                    this._localRotationEuler.x = e, this.localRotationEuler = this._localRotationEuler;
                }), a(0, n, "localRotationEulerZ", function() {
                    return this.localRotationEuler.z;
                }, function(e) {
                    this._localRotationEuler.z = e, this.localRotationEuler = this._localRotationEuler;
                }), a(0, n, "localRotationEuler", function() {
                    if (this._getTransformFlag(2)) {
                        this._localRotation.getYawPitchRoll(t._tempVector30);
                        var e = t._tempVector30,
                            n = this._localRotationEuler;
                        n.x = e.y * t._angleToRandin, n.y = e.x * t._angleToRandin, n.z = e.z * t._angleToRandin,
                            this._setTransformFlag(2, !1);
                    }
                    return this._localRotationEuler;
                }, function(e) {
                    this._localRotationEuler !== e && e.cloneTo(this._localRotationEuler), this._setTransformFlag(2, !1),
                        this._setTransformFlag(5, !0), this._onWorldRotationTransform();
                }), a(0, n, "localMatrix", function() {
                    return this._getTransformFlag(4) && (this._updateLocalMatrix(), this._setTransformFlag(4, !1)),
                        this._localMatrix;
                }, function(e) {
                    this._localMatrix !== e && e.cloneTo(this._localMatrix), this._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale),
                        this._setTransformFlag(4, !1), this._onWorldTransform();
                }), a(0, n, "rotation", function() {
                    return this._getTransformFlag(16) && (null != this._parent ? he.multiply(this._parent.rotation, this.localRotation, this._rotation) : this.localRotation.cloneTo(this._rotation),
                        this._setTransformFlag(16, !1)), this._rotation;
                }, function(e) {
                    null != this._parent ? (this._parent.rotation.invert(t._tempQuaternion0), he.multiply(t._tempQuaternion0, e, this._localRotation)) : e.cloneTo(this._localRotation),
                        this.localRotation = this._localRotation, e !== this._rotation && e.cloneTo(this._rotation),
                        this._setTransformFlag(16, !1);
                }), a(0, n, "scale", function() {
                    return this._getTransformFlag(32) ? (null !== this._parent ? Te.multiply(this._parent.scale, this._localScale, this._scale) : this._localScale.cloneTo(this._scale),
                        this._setTransformFlag(32, !1), this._scale) : this._scale;
                }, function(e) {
                    if (null !== this._parent) {
                        var n = this._parent.scale,
                            i = t._tempVector30;
                        i.x = 1 / n.x, i.y = 1 / n.y, i.z = 1 / n.z, Te.multiply(e, t._tempVector30, this._localScale);
                    } else e.cloneTo(this._localScale);
                    this.localScale = this._localScale, this._scale !== e && e.cloneTo(this._scale),
                        this._setTransformFlag(32, !1);
                }), a(0, n, "rotationEuler", function() {
                    if (this._getTransformFlag(128)) {
                        this.rotation.getYawPitchRoll(t._tempVector30);
                        var e = t._tempVector30,
                            n = this._rotationEuler;
                        n.x = e.y * t._angleToRandin, n.y = e.x * t._angleToRandin, n.z = e.z * t._angleToRandin,
                            this._setTransformFlag(128, !1);
                    }
                    return this._rotationEuler;
                }, function(e) {
                    he.createFromYawPitchRoll(e.y / t._angleToRandin, e.x / t._angleToRandin, e.z / t._angleToRandin, this._rotation),
                        this.rotation = this._rotation, this._rotationEuler !== e && e.cloneTo(this._rotationEuler),
                        this._setTransformFlag(128, !1);
                }), a(0, n, "worldMatrix", function() {
                    return this._getTransformFlag(64) && (null != this._parent ? Ht.multiply(this._parent.worldMatrix, this.localMatrix, this._worldMatrix) : this.localMatrix.cloneTo(this._worldMatrix),
                        this._setTransformFlag(64, !1)), this._worldMatrix;
                }, function(e) {
                    null === this._parent ? e.cloneTo(this._localMatrix) : (this._parent.worldMatrix.invert(this._localMatrix),
                            Ht.multiply(this._localMatrix, e, this._localMatrix)), this.localMatrix = this._localMatrix,
                        this._worldMatrix !== e && e.cloneTo(this._worldMatrix), this._setTransformFlag(64, !1);
                }), t.TRANSFORM_LOCALQUATERNION = 1, t.TRANSFORM_LOCALEULER = 2, t.TRANSFORM_LOCALMATRIX = 4,
                t.TRANSFORM_WORLDPOSITION = 8, t.TRANSFORM_WORLDQUATERNION = 16, t.TRANSFORM_WORLDSCALE = 32,
                t.TRANSFORM_WORLDMATRIX = 64, t.TRANSFORM_WORLDEULER = 128, i(t, ["_tempVector30", function() {
                    return this._tempVector30 = new Te();
                }, "_tempVector31", function() {
                    return this._tempVector31 = new Te();
                }, "_tempVector32", function() {
                    return this._tempVector32 = new Te();
                }, "_tempVector33", function() {
                    return this._tempVector33 = new Te();
                }, "_tempQuaternion0", function() {
                    return this._tempQuaternion0 = new he();
                }, "_tempMatrix0", function() {
                    return this._tempMatrix0 = new Ht();
                }, "_angleToRandin", function() {
                    return this._angleToRandin = 180 / Math.PI;
                }]), t;
        }(T)),
        Zt = function(e) {
            function t() {
                this._linkAvatarSpritesData = {}, this._keyframeNodeOwners = [], this._linkAvatarSprites = [],
                    this._renderableSprites = [], this.cullingMode = 2, t.__super.call(this), this._controllerLayers = [],
                    this._linkSprites = {}, this._speed = 1, this._keyframeNodeOwnerMap = {}, this._updateMark = 0;
            }
            r(t, "laya.d3.component.Animator", e);
            var n = t.prototype;
            return n._linkToSprites = function(e) {
                    for (var t in e) {
                        for (var n = this.owner, i = e[t], r = 0, a = i.length; a > r; r++) {
                            var o = i[r];
                            if ("" === o) break;
                            if (n = n.getChildByName(o), !n) break;
                        }
                        n && this.linkSprite3DToAvatarNode(t, n);
                    }
                }, n._addKeyframeNodeOwner = function(e, t, n) {
                    var i = t._indexInList,
                        r = t.fullPath,
                        a = this._keyframeNodeOwnerMap[r];
                    if (a) a.referenceCount++, e[i] = a;
                    else {
                        for (var s = n, l = 0, h = t.propertyCount; h > l && (s = s[t.getPropertyByIndex(l)],
                                s); l++);
                        a = this._keyframeNodeOwnerMap[r] = new Pt(), a.fullPath = r, a.indexInList = this._keyframeNodeOwners.length,
                            a.referenceCount = 1, a.propertyOwner = n;
                        var u = t.propertyCount,
                            c = o(u);
                        for (l = 0; u > l; l++) c[l] = t.getPropertyByIndex(l);
                        if (a.property = c, a.type = t.type, s)
                            if (0 === t.type) a.defaultValue = s;
                            else {
                                var _ = new s.constructor();
                                s.cloneTo(_), a.defaultValue = _;
                            }
                        this._keyframeNodeOwners.push(a), e[i] = a;
                    }
                }, n._removeKeyframeNodeOwner = function(e, t) {
                    var n = t.fullPath,
                        i = this._keyframeNodeOwnerMap[n];
                    i && (i.referenceCount--, 0 === i.referenceCount && (delete this._keyframeNodeOwnerMap[n],
                        this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(i), 1)), e[t._indexInList] = null);
                }, n._getOwnersByClip = function(e) {
                    var t = e._clip._nodes,
                        n = t.count,
                        i = e._nodeOwners;
                    i.length = n;
                    for (var r = 0; n > r; r++) {
                        for (var a = t.getNodeByIndex(r), o = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name] : this.owner, s = 0, l = a.ownerPathCount; l > s; s++) {
                            var h = a.getOwnerPathByIndex(s);
                            if ("" === h) break;
                            if (o = o.getChildByName(h), !o) break;
                        }
                        if (o) {
                            var u = a.propertyOwner;
                            u && (o = o[u]), o && this._addKeyframeNodeOwner(i, a, o);
                        }
                    }
                }, n._updatePlayer = function(e, t, n, i) {
                    var r = e._clip._duration * (e.clipEnd - e.clipStart),
                        a = t._elapsedTime,
                        o = a + n;
                    t._lastElapsedTime = a, t._elapsedTime = o;
                    var s = o / r;
                    t._normalizedTime = s;
                    var l = s % 1;
                    t._normalizedPlayTime = 0 > l ? l + 1 : l, t._duration = r;
                    var h = e._scripts;
                    if (!i && o >= r) {
                        if (t._finish = !0, t._elapsedTime = r, t._normalizedPlayTime = 1, h)
                            for (var u = 0, c = h.length; c > u; u++) h[u].onStateExit();
                    } else if (h)
                        for (u = 0, c = h.length; c > u; u++) h[u].onStateUpdate();
                }, n._eventScript = function(e, t, n, i, r) {
                    if (r)
                        for (var a = t.length; a > n; n++) {
                            var o = t[n];
                            if (!(o.time <= i)) break;
                            for (var s = 0, l = e.length; l > s; s++) {
                                var h = e[s],
                                    u = h[o.eventName];
                                u && u.apply(h, o.params);
                            }
                        } else
                            for (; n >= 0 && (o = t[n], o.time >= i); n--)
                                for (s = 0, l = e.length; l > s; s++) h = e[s],
                                    u = h[o.eventName], u && u.apply(h, o.params);
                    return n;
                }, n._updateEventScript = function(e, t) {
                    var n = this.owner._scripts;
                    if (n) {
                        var i = e._clip,
                            r = i._events,
                            a = i._duration,
                            o = t._elapsedTime,
                            s = o % a,
                            l = Math.abs(Math.floor(o / a) - Math.floor(t._lastElapsedTime / a)),
                            h = t._elapsedTime >= t._lastElapsedTime;
                        if (t._lastIsFront !== h && (h ? t._playEventIndex++ : t._playEventIndex--, t._lastIsFront = h),
                            0 == l) t._playEventIndex = this._eventScript(n, r, t._playEventIndex, s, h);
                        else if (h) {
                            this._eventScript(n, r, t._playEventIndex, a, !0);
                            for (var u = 0, c = l - 1; c > u; u++) this._eventScript(n, r, 0, a, !0);
                            t._playEventIndex = this._eventScript(n, r, 0, s, !0);
                        } else {
                            this._eventScript(n, r, t._playEventIndex, 0, !1);
                            var _ = r.length - 1;
                            for (u = 0, c = l - 1; c > u; u++) this._eventScript(n, r, _, 0, !1);
                            t._playEventIndex = this._eventScript(n, r, _, s, !1);
                        }
                    }
                }, n._updateClipDatas = function(e, t, n, i) {
                    var r = e._clip,
                        a = r._duration,
                        o = e.clipStart * a + n._normalizedPlayTime * n._duration,
                        s = e._currentFrameIndices,
                        l = n._elapsedTime > n._lastElapsedTime;
                    r._evaluateClipDatasRealTime(r._nodes, o, s, t, l);
                }, n._applyFloat = function(e, t, n, i, r, a, o) {
                    if (n.updateMark === this._updateMark)
                        if (i) e[t] += r * o;
                        else {
                            var s = e[t];
                            e[t] = s + r * (o - s);
                        }
                    else if (a) i ? e[t] = n.defaultValue + o : e[t] = o;
                    else if (i) e[t] = n.defaultValue + r * o;
                    else {
                        var l = n.defaultValue;
                        e[t] = l + r * (o - l);
                    }
                }, n._applyPositionAndRotationEuler = function(e, t, n, i, r, a) {
                    if (e.updateMark === this._updateMark)
                        if (t) a.x += n * r.x, a.y += n * r.y, a.z += n * r.z;
                        else {
                            var o = a.x,
                                s = a.y,
                                l = a.z;
                            a.x = o + n * (r.x - o), a.y = s + n * (r.y - s), a.z = l + n * (r.z - l);
                        }
                    else if (i)
                        if (t) {
                            var h = e.defaultValue;
                            a.x = h.x + r.x, a.y = h.y + r.y, a.z = h.z + r.z;
                        } else a.x = r.x, a.y = r.y, a.z = r.z;
                    else if (h = e.defaultValue, t) a.x = h.x + n * r.x,
                        a.y = h.y + n * r.y, a.z = h.z + n * r.z;
                    else {
                        var u = h.x,
                            c = h.y,
                            _ = h.z;
                        a.x = u + n * (r.x - u), a.y = c + n * (r.y - c), a.z = _ + n * (r.z - _);
                    }
                }, n._applyRotation = function(e, n, i, r, a, o) {
                    if (e.updateMark === this._updateMark)
                        if (n) {
                            var s = t._tempQuaternion1;
                            ke.quaternionWeight(a, i, s), s.normalize(s), he.multiply(o, s, o);
                        } else he.lerp(o, a, i, o);
                    else if (r)
                        if (n) {
                            var l = e.defaultValue;
                            he.multiply(l, a, o);
                        } else o.x = a.x, o.y = a.y, o.z = a.z, o.w = a.w;
                    else l = e.defaultValue, n ? (s = t._tempQuaternion1,
                        ke.quaternionWeight(a, i, s), s.normalize(s), he.multiply(l, s, o)) : he.lerp(l, a, i, o);
                }, n._applyScale = function(e, n, i, r, a, o) {
                    if (e.updateMark === this._updateMark)
                        if (n) {
                            var s = t._tempVector31;
                            ke.scaleWeight(a, i, s), o.x = o.x * s.x, o.y = o.y * s.y, o.z = o.z * s.z;
                        } else ke.scaleBlend(o, a, i, o);
                    else if (r)
                        if (n) {
                            var l = e.defaultValue;
                            o.x = l.x * a.x, o.y = l.y * a.y, o.z = l.z * a.z;
                        } else o.x = a.x, o.y = a.y, o.z = a.z;
                    else l = e.defaultValue, n ? (s = t._tempVector31,
                        ke.scaleWeight(a, i, s), o.x = l.x * s.x, o.y = l.y * s.y, o.z = l.z * s.z) : ke.scaleBlend(l, a, i, o);
                }, n._applyCrossData = function(e, n, i, r, a, o, s) {
                    var l = e.propertyOwner;
                    if (l) {
                        switch (e.type) {
                            case 0:
                                for (var h = e.property, u = h.length - 1, c = 0; u > c && (l = l[h[c]], l); c++);
                                var _ = a + s * (o - a);
                                this._applyFloat(l, h[u], e, n, i, r, _);
                                break;

                            case 1:
                                var d = l.localPosition,
                                    f = t._tempVector30,
                                    m = a.x,
                                    p = a.y,
                                    T = a.z;
                                f.x = m + s * (o.x - m), f.y = p + s * (o.y - p), f.z = T + s * (o.z - T), this._applyPositionAndRotationEuler(e, n, i, r, f, d),
                                    l.localPosition = d;
                                break;

                            case 2:
                                var E = l.localRotation,
                                    v = t._tempQuaternion0;
                                he.lerp(a, o, s, v), this._applyRotation(e, n, i, r, v, E), l.localRotation = E;
                                break;

                            case 3:
                                var g = l.localScale,
                                    S = t._tempVector30;
                                ke.scaleBlend(a, o, s, S), this._applyScale(e, n, i, r, S, g), l.localScale = g;
                                break;

                            case 4:
                                var y = l.localRotationEuler,
                                    x = t._tempVector30;
                                m = a.x, p = a.y, T = a.z, x.x = m + s * (o.x - m), x.y = p + s * (o.y - p), x.z = T + s * (o.z - T),
                                    this._applyPositionAndRotationEuler(e, n, i, r, x, y), l.localRotationEuler = y;
                        }
                        e.updateMark = this._updateMark;
                    }
                }, n._setClipDatasToNode = function(e, t, n, i) {
                    for (var r = e._clip._nodes, a = e._nodeOwners, o = 0, s = r.count; s > o; o++) {
                        var l = a[o];
                        if (l) {
                            var h = l.propertyOwner;
                            if (h) {
                                switch (l.type) {
                                    case 0:
                                        for (var u = l.property, c = u.length - 1, _ = 0; c > _ && (h = h[u[_]], h); _++);
                                        this._applyFloat(h, u[c], l, t, n, i, r.getNodeByIndex(o).data);
                                        break;

                                    case 1:
                                        var d = h.localPosition;
                                        this._applyPositionAndRotationEuler(l, t, n, i, r.getNodeByIndex(o).data, d), h.localPosition = d;
                                        break;

                                    case 2:
                                        var f = h.localRotation;
                                        this._applyRotation(l, t, n, i, r.getNodeByIndex(o).data, f), h.localRotation = f;
                                        break;

                                    case 3:
                                        var m = h.localScale;
                                        this._applyScale(l, t, n, i, r.getNodeByIndex(o).data, m), h.localScale = m;
                                        break;

                                    case 4:
                                        var p = h.localRotationEuler;
                                        this._applyPositionAndRotationEuler(l, t, n, i, r.getNodeByIndex(o).data, p), h.localRotationEuler = p;
                                }
                                l.updateMark = this._updateMark;
                            }
                        }
                    }
                }, n._setCrossClipDatasToNode = function(e, t, n, i, r) {
                    for (var a = e._crossNodesOwners, o = e._crossNodesOwnersCount, s = e.blendingMode !== bt.BLENDINGMODE_OVERRIDE, l = e.defaultWeight, h = e._destCrossClipNodeIndices, u = n._clip._nodes, c = n._nodeOwners, _ = e._srcCrossClipNodeIndices, d = t._nodeOwners, f = t._clip._nodes, m = 0; o > m; m++) {
                        var p = a[m];
                        if (p) {
                            var T = _[m],
                                E = h[m],
                                v = -1 !== T ? f.getNodeByIndex(T).data : c[E].defaultValue,
                                g = -1 !== E ? u.getNodeByIndex(E).data : d[T].defaultValue;
                            this._applyCrossData(p, s, l, r, v, g, i);
                        }
                    }
                }, n._setFixedCrossClipDatasToNode = function(e, t, n, i) {
                    for (var r = e._crossNodesOwners, a = e._crossNodesOwnersCount, o = e.blendingMode !== bt.BLENDINGMODE_OVERRIDE, s = e.defaultWeight, l = e._destCrossClipNodeIndices, h = t._clip._nodes, u = 0; a > u; u++) {
                        var c = r[u];
                        if (c) {
                            var _ = l[u],
                                d = c.crossFixedValue,
                                f = -1 !== _ ? h.getNodeByIndex(_).data : c.defaultValue;
                            this._applyCrossData(c, o, s, i, d, f, n);
                        }
                    }
                }, n._revertDefaultKeyframeNodes = function(e) {
                    for (var t = e._nodeOwners, n = 0, i = t.length; i > n; n++) {
                        var r = t[n];
                        if (r) {
                            var a = r.propertyOwner;
                            if (a) switch (r.type) {
                                case 0:
                                    for (var o = r.property, s = o.length - 1, l = 0; s > l && (a = a[o[l]], a); l++);
                                    a[o[s]] = r.defaultValue;
                                    break;

                                case 1:
                                    var h = a.localPosition,
                                        u = r.defaultValue;
                                    h.x = u.x, h.y = u.y, h.z = u.z, a.localPosition = h;
                                    break;

                                case 2:
                                    var c = a.localRotation,
                                        _ = r.defaultValue;
                                    c.x = _.x, c.y = _.y, c.z = _.z, c.w = _.w, a.localRotation = c;
                                    break;

                                case 3:
                                    var d = a.localScale;
                                    u = r.defaultValue, d.x = u.x, d.y = u.y, d.z = u.z, a.localScale = d;
                                    break;

                                case 4:
                                    var f = a.localRotationEuler;
                                    u = r.defaultValue, f.x = u.x, f.y = u.y, f.z = u.z, a.localRotationEuler = f;
                                    break;

                                default:
                                    throw "Animator:unknown type.";
                            }
                        }
                    }
                }, n._removeClip = function(e, t, n, i) {
                    var r = i._clip;
                    r._removeReference(), e.splice(n, 1), delete t[i.name];
                    for (var a = e[n], o = r._nodes, s = a._nodeOwners, l = 0, h = o.count; h > l; l++) this._removeKeyframeNodeOwner(s, o.getNodeByIndex(l));
                }, n._onAdded = function() {
                    var e = this.owner._parent;
                    this.owner._setHierarchyAnimator(this, e ? e._hierarchyAnimator : null), this.owner._changeAnimatorToLinkSprite3DNoAvatar(this, !0, []);
                }, n._onDestroy = function() {
                    for (var e = 0, t = this._controllerLayers.length; t > e; e++)
                        for (var n = this._controllerLayers[e]._states, i = 0, r = n.length; r > i; i++) n[i]._clip._removeReference();
                    var a = this.owner._parent;
                    this.owner._clearHierarchyAnimator(this, a ? a._hierarchyAnimator : null);
                }, n._onEnableInScene = function() {
                    this.owner._scene._animatorPool.add(this);
                }, n._onDisableInScene = function() {
                    this.owner._scene._animatorPool.remove(this);
                }, n._onEnable = function() {
                    for (var e = 0, t = this._controllerLayers.length; t > e; e++)
                        if (this._controllerLayers[e].playOnWake) {
                            var n = this.getDefaultState(e);
                            n && this.play(null, e, 0);
                        }
                }, n._handleSpriteOwnersBySprite = function(e, t, n) {
                    for (var i = 0, r = this._controllerLayers.length; r > i; i++)
                        for (var a = this._controllerLayers[i]._states, o = 0, s = a.length; s > o; o++) {
                            var l = a[o],
                                h = l._clip,
                                u = t.join("/"),
                                c = h._nodesMap[u];
                            if (c)
                                for (var _ = l._nodeOwners, d = 0, f = c.length; f > d; d++) e ? this._addKeyframeNodeOwner(_, c[d], n) : this._removeKeyframeNodeOwner(_, c[d]);
                        }
                }, n._parse = function(e) {
                    var t = e.avatar;
                    if (t) {
                        this.avatar = S.getRes(t.path);
                        var n = t.linkSprites;
                        this._linkSprites = n, this._linkToSprites(n);
                    }
                    for (var i = (e.clipPaths, e.playOnWake), r = e.layers, a = 0; a < r.length; a++) {
                        var o = r[a],
                            s = new bt(o.name);
                        0 === a ? s.defaultWeight = 1 : s.defaultWeight = o.weight;
                        var l = o.blendingMode;
                        l && (s.blendingMode = l), this.addControllerLayer(s);
                        for (var h = o.states, u = 0, c = h.length; c > u; u++) {
                            var _ = h[u],
                                d = _.clipPath;
                            if (d) {
                                var f, m = _.name;
                                if (f = S.getRes(d)) {
                                    var p = new Gt();
                                    p.name = m, p.clip = f, this.addState(p, a), 0 === u && (this.getControllerLayer(a).defaultState = p);
                                }
                            }
                        }
                        void 0 !== i && (s.playOnWake = i);
                    }
                    var T = e.cullingMode;
                    void 0 !== T && (this.cullingMode = T);
                }, n._update = function() {
                    if (0 !== this._speed) {
                        var e = !1;
                        if (2 === this.cullingMode) {
                            e = !1;
                            for (var t = 0, n = this._renderableSprites.length; n > t; t++)
                                if (this._renderableSprites[t]._render._visible) {
                                    e = !0;
                                    break;
                                }
                        } else e = !0;
                        this._updateMark++;
                        var i = this.owner._scene.timer,
                            r = i._delta / 1e3,
                            a = i.scale;
                        for (t = 0, n = this._controllerLayers.length; n > t; t++) {
                            var o = this._controllerLayers[t],
                                s = o._playStateInfo,
                                l = o._crossPlayStateInfo;
                            switch (d = o.blendingMode !== bt.BLENDINGMODE_OVERRIDE, o._playType) {
                                case 0:
                                    var h = o._currentPlayState,
                                        u = h._clip,
                                        c = this._speed * h.speed,
                                        _ = s._finish;
                                    if (_ || this._updatePlayer(h, s, r * c, u.islooping), e) {
                                        var d = o.blendingMode !== bt.BLENDINGMODE_OVERRIDE;
                                        this._updateClipDatas(h, d, s, a * c), this._setClipDatasToNode(h, d, o.defaultWeight, 0 === t),
                                            _ || this._updateEventScript(h, s);
                                    }
                                    break;

                                case 1:
                                    h = o._currentPlayState, u = h._clip;
                                    var f = o._crossPlayState,
                                        m = f._clip,
                                        p = o._crossDuration,
                                        T = l._startPlayTime,
                                        E = m._duration - T,
                                        v = p > E ? E / p : 1,
                                        g = this._speed * f.speed;
                                    this._updatePlayer(f, l, r * v * g, m.islooping);
                                    var S = (l._elapsedTime - T) / v / p;
                                    S >= 1 ? e && (this._updateClipDatas(f, d, l, a * g), this._setClipDatasToNode(f, d, o.defaultWeight, 0 === t),
                                            o._playType = 0, o._currentPlayState = f, l._cloneTo(s)) : (s._finish || (c = this._speed * h.speed,
                                                this._updatePlayer(h, s, r * c, u.islooping), e && this._updateClipDatas(h, d, s, a * c)),
                                            e && (this._updateClipDatas(f, d, l, a * v * g), this._setCrossClipDatasToNode(o, h, f, S, 0 === t))),
                                        e && (this._updateEventScript(h, s), this._updateEventScript(f, l));
                                    break;

                                case 2:
                                    f = o._crossPlayState, m = f._clip, p = o._crossDuration, T = l._startPlayTime,
                                        E = m._duration - T, v = p > E ? E / p : 1, g = this._speed * f.speed, this._updatePlayer(f, l, r * v * g, m.islooping),
                                        e && (S = (l._elapsedTime - T) / v / p, S >= 1 ? (this._updateClipDatas(f, d, l, a * g),
                                                this._setClipDatasToNode(f, d, 1, 0 === t), o._playType = 0, o._currentPlayState = f,
                                                l._cloneTo(s)) : (this._updateClipDatas(f, d, l, a * v * g), this._setFixedCrossClipDatasToNode(o, f, S, 0 === t)),
                                            this._updateEventScript(f, l));
                            }
                        }
                        e && this._avatar && (R.supportWebGLPlusAnimation && this._updateAnimationNodeWorldMatix(this._animationNodeLocalPositions, this._animationNodeLocalRotations, this._animationNodeLocalScales, this._animationNodeWorldMatrixs, this._animationNodeParentIndices),
                            this._updateAvatarNodesToSprite());
                    }
                }, n._cloneTo = function(e) {
                    var t = e;
                    t.avatar = this.avatar;
                    for (var n = 0, i = this._controllerLayers.length; i > n; n++) {
                        var r = this._controllerLayers[n];
                        t.addControllerLayer(r.clone());
                        for (var a = r._states, o = 0, s = a.length; s > o; o++) {
                            var l = a[o].clone();
                            t.addState(l, n), 0 == o && (t.getControllerLayer(n).defaultState = l);
                        }
                    }
                    t._linkSprites = this._linkSprites, t._linkToSprites(this._linkSprites);
                }, n.getDefaultState = function(e) {
                    void 0 === e && (e = 0);
                    var t = this._controllerLayers[e];
                    return t.defaultState;
                }, n.addState = function(e, t) {
                    void 0 === t && (t = 0);
                    var n = e.name,
                        i = this._controllerLayers[t],
                        r = i._statesMap,
                        a = i._states;
                    if (r[n]) throw "Animator:this stat's name has exist.";
                    r[n] = e, a.push(e), e._clip._addReference(), this._getOwnersByClip(e);
                }, n.removeState = function(e, t) {
                    void 0 === t && (t = 0);
                    for (var n = this._controllerLayers[t], i = n._states, r = n._statesMap, a = -1, o = 0, s = i.length; s > o; o++)
                        if (i[o] === e) {
                            a = o;
                            break;
                        } -
                    1 !== a && this._removeClip(i, r, a, e);
                }, n.addControllerLayer = function(e) {
                    this._controllerLayers.push(e);
                }, n.getControllerLayer = function(e) {
                    return void 0 === e && (e = 0), this._controllerLayers[e];
                }, n.getCurrentAnimatorPlayState = function(e) {
                    return void 0 === e && (e = 0), this._controllerLayers[e]._playStateInfo;
                }, n.play = function(e, t, n) {
                    void 0 === t && (t = 0), void 0 === n && (n = Number.NEGATIVE_INFINITY);
                    var i = this._controllerLayers[t],
                        r = i.defaultState;
                    if (!e && !r) throw new Error("Animator:must have  default clip value,please set clip property.");
                    var a = i._currentPlayState,
                        o = i._playStateInfo,
                        s = e ? i._statesMap[e] : r,
                        l = s._clip._duration;
                    a !== s ? (n !== Number.NEGATIVE_INFINITY ? o._resetPlayState(l * n) : o._resetPlayState(0),
                        null !== a && a !== s && this._revertDefaultKeyframeNodes(a), i._playType = 0, i._currentPlayState = s) : n !== Number.NEGATIVE_INFINITY && (o._resetPlayState(l * n),
                        i._playType = 0);
                    var h = s._scripts;
                    if (h)
                        for (var u = 0, c = h.length; c > u; u++) h[u].onStateEnter();
                }, n.crossFade = function(e, t, n, i) {
                    void 0 === n && (n = 0), void 0 === i && (i = Number.NEGATIVE_INFINITY);
                    var r = this._controllerLayers[n],
                        a = r._statesMap[e];
                    if (a) {
                        var o = r._playType;
                        if (-1 === o) return void this.play(e, n, i);
                        var s = r._crossPlayStateInfo,
                            l = r._crossNodesOwners,
                            h = r._crossNodesOwnersIndicesMap,
                            u = r._currentPlayState,
                            c = a._nodeOwners,
                            _ = r._destCrossClipNodeIndices,
                            d = a._clip,
                            f = d._nodes,
                            m = d._nodesDic;
                        switch (o) {
                            case 0:
                                var p = u._nodeOwners,
                                    T = r._srcCrossClipNodeIndices,
                                    E = u._clip,
                                    v = E._nodes,
                                    g = E._nodesDic;
                                r._playType = 1;
                                for (var S = ++r._crossMark, y = r._crossNodesOwnersCount = 0, x = 0, D = v.count; D > x; x++) {
                                    var I = v.getNodeByIndex(x),
                                        R = I._indexInList,
                                        M = p[R];
                                    if (M) {
                                        var A = I.fullPath;
                                        T[y] = R;
                                        var C = m[A];
                                        C ? _[y] = C._indexInList : _[y] = -1, h[A] = S, l[y] = M, y++;
                                    }
                                }
                                for (x = 0, D = f.count; D > x; x++) {
                                    C = f.getNodeByIndex(x);
                                    var L = C._indexInList,
                                        O = c[L];
                                    if (O) {
                                        var N = C.fullPath;
                                        g[N] || (T[y] = -1, _[y] = L, h[N] = S, l[y] = O, y++);
                                    }
                                }
                                break;

                            case 1:
                            case 2:
                                for (r._playType = 2, x = 0, D = l.length; D > x; x++) {
                                    var V = l[x];
                                    V.saveCrossFixedValue(), C = m[V.fullPath], C ? _[x] = C._indexInList : _[x] = -1;
                                }
                                for (y = r._crossNodesOwnersCount, S = r._crossMark, x = 0, D = f.count; D > x; x++) C = f.getNodeByIndex(x),
                                    L = C._indexInList, O = c[L], O && (N = C.fullPath, h[N] !== S && (_[y] = L, h[N] = S,
                                        V = c[L], l[y] = V, V.saveCrossFixedValue(), y++));
                        }
                        r._crossNodesOwnersCount = y, r._crossPlayState = a, r._crossDuration = u._clip._duration * t,
                            i !== Number.NEGATIVE_INFINITY ? s._resetPlayState(d._duration * i) : s._resetPlayState(0);
                    }
                    var P = a._scripts;
                    if (P)
                        for (x = 0, D = P.length; D > x; x++) P[x].onStateEnter();
                }, n._getAvatarOwnersAndInitDatasAsync = function() {
                    for (var e = 0, t = this._controllerLayers.length; t > e; e++)
                        for (var n = this._controllerLayers[e]._states, i = 0, r = n.length; r > i; i++) this._getOwnersByClip(n[i]);
                    this._avatar._cloneDatasToAnimator(this);
                    for (var a in this._linkAvatarSpritesData) {
                        var o = this._linkAvatarSpritesData[a];
                        if (o)
                            for (var s = 0, l = o.length; l > s; s++) this._isLinkSpriteToAnimationNode(o[s], a, !0);
                    }
                }, n._isLinkSpriteToAnimationNode = function(e, t, n) {
                    if (this._avatar) {
                        var i = this._avatarNodeMap[t];
                        if (i)
                            if (n) {
                                e._transform._dummy = i.transform, this._linkAvatarSprites.push(e);
                                var r = i.transform,
                                    a = e.transform;
                                if (!a.owner.isStatic && r) {
                                    var o = a.worldMatrix,
                                        s = this.owner._transform._parent;
                                    if (s) ke.matrix4x4MultiplyMFM(s.worldMatrix, r.getWorldMatrix(), o);
                                    else
                                        for (var l = o.elements, h = r.getWorldMatrix(), u = 0; 16 > u; u++) l[u] = h[u];
                                    a.worldMatrix = o;
                                }
                            } else e._transform._dummy = null, this._linkAvatarSprites.splice(this._linkAvatarSprites.indexOf(e), 1);
                    }
                }, n._isLinkSpriteToAnimationNodeData = function(e, t, n) {
                    var i = this._linkAvatarSpritesData[t];
                    n ? (i || (this._linkAvatarSpritesData[t] = i = []), i.push(e)) : i.splice(e, 1);
                }, n._updateAvatarNodesToSprite = function() {
                    for (var e = 0, t = this._linkAvatarSprites.length; t > e; e++) {
                        var n = this._linkAvatarSprites[e],
                            i = n.transform._dummy,
                            r = n.transform;
                        if (!r.owner.isStatic && i) {
                            var a = r.worldMatrix,
                                o = this.owner._transform;
                            ke.matrix4x4MultiplyMFM(o.worldMatrix, i.getWorldMatrix(), a), r.worldMatrix = a;
                        }
                    }
                }, n.linkSprite3DToAvatarNode = function(e, t) {
                    return this._isLinkSpriteToAnimationNodeData(t, e, !0), this._isLinkSpriteToAnimationNode(t, e, !0), !0;
                }, n.unLinkSprite3DToAvatarNode = function(e) {
                    if (e._hierarchyAnimator === this) {
                        var t = e.transform._dummy;
                        if (t) {
                            var n = t._owner.name;
                            return this._isLinkSpriteToAnimationNodeData(e, n, !1), this._isLinkSpriteToAnimationNode(e, n, !1), !0;
                        }
                        return !1;
                    }
                    throw "Animator:sprite3D must belong to this Animator";
                }, n._updateAnimationNodeWorldMatix = function(e, t, n, i, r) {
                    v.instance.updateAnimationNodeWorldMatix(e, t, n, r, i);
                }, a(0, n, "speed", function() {
                    return this._speed;
                }, function(e) {
                    this._speed = e;
                }), a(0, n, "avatar", function() {
                    return this._avatar;
                }, function(e) {
                    if (this._avatar !== e)
                        if (this._avatar = e, e) this._getAvatarOwnersAndInitDatasAsync(),
                            this.owner._changeHierarchyAnimatorAvatar(this, e);
                        else {
                            var t = this.owner._parent;
                            this.owner._changeHierarchyAnimatorAvatar(this, t ? t._hierarchyAnimator._avatar : null);
                        }
                }), t._update = function(e) {
                    for (var t = e._animatorPool, n = t.elements, i = 0, r = t.length; r > i; i++) {
                        var a = n[i];
                        a && a.enabled && a._update();
                    }
                }, t._tempVector3Array0 = new Float32Array(3), t._tempVector3Array1 = new Float32Array(3),
                t._tempQuaternionArray0 = new Float32Array(4), t._tempQuaternionArray1 = new Float32Array(4),
                t.CULLINGMODE_ALWAYSANIMATE = 0, t.CULLINGMODE_CULLCOMPLETELY = 2, i(t, ["_tempVector30", function() {
                    return this._tempVector30 = new Te();
                }, "_tempVector31", function() {
                    return this._tempVector31 = new Te();
                }, "_tempQuaternion0", function() {
                    return this._tempQuaternion0 = new he();
                }, "_tempQuaternion1", function() {
                    return this._tempQuaternion1 = new he();
                }]), t;
        }(f),
        jt = function(e) {
            function t(e, n, i, r, a) {
                t.__super.call(this), this._owner = e, this._children = [], this._localMatrix = new Float32Array(16),
                    R.supportWebGLPlusAnimation ? (this._localPosition = new G(0, 0, 0, n), this._localRotation = new U(0, 0, 0, 1, i),
                        this._localScale = new G(0, 0, 0, r), this._worldMatrix = a) : (this._localPosition = new Te(),
                        this._localRotation = new he(), this._localScale = new Te(), this._worldMatrix = new Float32Array(16)),
                    this._localQuaternionUpdate = !1, this._locaEulerlUpdate = !1, this._localUpdate = !1,
                    this._worldUpdate = !0;
            }
            r(t, "laya.d3.animation.AnimationTransform3D", e);
            var n = t.prototype;
            return n._getlocalMatrix = function() {
                return this._localUpdate && (ke._createAffineTransformationArray(this._localPosition, this._localRotation, this._localScale, this._localMatrix),
                    this._localUpdate = !1), this._localMatrix;
            }, n._onWorldTransform = function() {
                if (!this._worldUpdate) {
                    this._worldUpdate = !0, this.event("transformchanged");
                    for (var e = 0, t = this._children.length; t > e; e++) this._children[e]._onWorldTransform();
                }
            }, n.getWorldMatrix = function() {
                if (!R.supportWebGLPlusAnimation && this._worldUpdate) {
                    if (null != this._parent) ke.matrix4x4MultiplyFFF(this._parent.getWorldMatrix(), this._getlocalMatrix(), this._worldMatrix);
                    else {
                        var e = this._worldMatrix;
                        e[1] = e[2] = e[3] = e[4] = e[6] = e[7] = e[8] = e[9] = e[11] = e[12] = e[13] = e[14] = 0,
                            e[0] = e[5] = e[10] = e[15] = 1;
                    }
                    this._worldUpdate = !1;
                }
                return R.supportWebGLPlusAnimation && this._worldUpdate && (this._worldUpdate = !1),
                    this._worldMatrix;
            }, n.setParent = function(e) {
                if (this._parent !== e) {
                    if (this._parent) {
                        var t = this._parent._children,
                            n = t.indexOf(this);
                        t.splice(n, 1);
                    }
                    e && (e._children.push(this), e && this._onWorldTransform()), this._parent = e;
                }
            }, a(0, n, "localPosition", function() {
                return this._localPosition;
            }, function(e) {
                this._localPosition = e, this._localUpdate = !0, this._onWorldTransform();
            }), a(0, n, "localRotation", function() {
                if (this._localQuaternionUpdate) {
                    var e = this._localRotationEuler;
                    he.createFromYawPitchRoll(e.y / t._angleToRandin, e.x / t._angleToRandin, e.z / t._angleToRandin, this._localRotation),
                        this._localQuaternionUpdate = !1;
                }
                return this._localRotation;
            }, function(e) {
                this._localRotation = e, this._locaEulerlUpdate = !0, this._localQuaternionUpdate = !1,
                    this._localUpdate = !0, this._onWorldTransform();
            }), a(0, n, "localScale", function() {
                return this._localScale;
            }, function(e) {
                this._localScale = e, this._localUpdate = !0, this._onWorldTransform();
            }), a(0, n, "localRotationEuler", function() {
                if (this._locaEulerlUpdate) {
                    this._localRotation.getYawPitchRoll(t._tempVector3);
                    var e = t._tempVector3,
                        n = this._localRotationEuler;
                    n.x = e.y * t._angleToRandin, n.y = e.x * t._angleToRandin, n.z = e.z * t._angleToRandin,
                        this._locaEulerlUpdate = !1;
                }
                return this._localRotationEuler;
            }, function(e) {
                this._localRotationEuler = e, this._locaEulerlUpdate = !1, this._localQuaternionUpdate = !0,
                    this._localUpdate = !0, this._onWorldTransform();
            }), i(t, ["_tempVector3", function() {
                return this._tempVector3 = new Te();
            }, "_angleToRandin", function() {
                return this._angleToRandin = 180 / Math.PI;
            }]), t;
        }(T),
        Kt = function(e) {
            function t(e, n, i, r) {
                if (this._vertexCount = 0, this._canRead = !1, this._dataType = 0, this._vertexDeclaration = null,
                    void 0 === i && (i = !1), void 0 === r && (r = 0), t.__super.call(this), this._vertexCount = -1,
                    this._bufferUsage = n, this._bufferType = 34962, this._canRead = i, this._dataType = r,
                    this._byteLength = e, this.bind(), v.instance.bufferData(this._bufferType, this._byteLength, this._bufferUsage),
                    i) switch (r) {
                    case 0:
                        this._buffer = new Float32Array(e / 4);
                        break;

                    case 1:
                        this._buffer = new Uint8Array(e);
                }
            }
            r(t, "laya.d3.graphics.VertexBuffer3D", e);
            var n = t.prototype;
            return n.bind = function() {
                return h._bindedVertexBuffer !== this._glBuffer ? (v.instance.bindBuffer(34962, this._glBuffer),
                    h._bindedVertexBuffer = this._glBuffer, !0) : !1;
            }, n.setData = function(e, t, n, i) {
                void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 4294967295),
                    this.bind();
                var r = 0 !== n || 4294967295 !== i;
                if (r) switch (this._dataType) {
                    case 0:
                        e = new Float32Array(e.buffer, 4 * n, i);
                        break;

                    case 1:
                        e = new Uint8Array(e.buffer, n, i);
                }
                switch (this._dataType) {
                    case 0:
                        v.instance.bufferSubData(this._bufferType, 4 * t, e);
                        break;

                    case 1:
                        v.instance.bufferSubData(this._bufferType, t, e);
                }
                this._canRead && this._buffer.set(e, t);
            }, n.getData = function() {
                if (this._canRead) return this._buffer;
                throw new Error("Can't read data from VertexBuffer with only write flag!");
            }, n.destroy = function() {
                e.prototype.destroy.call(this), this._buffer = null, this._vertexDeclaration = null;
            }, a(0, n, "vertexDeclaration", function() {
                return this._vertexDeclaration;
            }, function(e) {
                this._vertexDeclaration !== e && (this._vertexDeclaration = e, this._vertexCount = e ? this._byteLength / e.vertexStride : -1);
            }), a(0, n, "vertexCount", function() {
                return this._vertexCount;
            }), a(0, n, "canRead", function() {
                return this._canRead;
            }), t.DATATYPE_FLOAT32ARRAY = 0, t.DATATYPE_UINT8ARRAY = 1, t;
        }(h),
        qt = (function(e) {
            function t() {
                this._nativeConstraint = null, this._breakingImpulseThreshold = NaN, this._connectedBody = null,
                    this._feedbackEnabled = !1, t.__super.call(this);
            }
            r(t, "laya.d3.physics.constraints.ConstraintComponent", e);
            var i = t.prototype;
            return i._onDestroy = function() {
                var e = W._physics3D;
                e.destroy(this._nativeConstraint), this._nativeConstraint = null;
            }, a(0, i, "breakingImpulseThreshold", function() {
                return this._breakingImpulseThreshold;
            }, function(e) {
                this._nativeConstraint.BreakingImpulseThreshold = e, this._breakingImpulseThreshold = e;
            }), a(0, i, "enabled", function() {
                return n.superGet(f, this, "enabled");
            }, function(e) {
                this._nativeConstraint.IsEnabled = e, n.superSet(f, this, "enabled", e);
            }), a(0, i, "appliedImpulse", function() {
                return this._feedbackEnabled || (this._nativeConstraint.EnableFeedback(!0), this._feedbackEnabled = !0),
                    this._nativeConstraint.AppliedImpulse;
            }), a(0, i, "connectedBody", function() {
                return this._connectedBody;
            }, function(e) {
                this._connectedBody = e;
            }), t;
        }(f), function(e) {
            function t(e, n, i, r) {
                this._indexType = null, this._indexTypeByteCount = 0, this._indexCount = 0, this._canRead = !1,
                    void 0 === i && (i = 35044), void 0 === r && (r = !1), t.__super.call(this), this._indexType = e,
                    this._indexCount = n, this._bufferUsage = i, this._bufferType = 34963, this._canRead = r;
                var a = 0;
                if ("ushort" == e) this._indexTypeByteCount = 2;
                else {
                    if ("ubyte" != e) throw new Error("unidentification index type.");
                    this._indexTypeByteCount = 1;
                }
                a = this._indexTypeByteCount * n, this._byteLength = a;
                var o = u._curBindedBufferState;
                o ? o._bindedIndexBuffer === this ? v.instance.bufferData(this._bufferType, a, this._bufferUsage) : (o.unBind(),
                    this.bind(), v.instance.bufferData(this._bufferType, a, this._bufferUsage), o.bind()) : (this.bind(),
                    v.instance.bufferData(this._bufferType, a, this._bufferUsage)), r && ("ushort" == e ? this._buffer = new Uint16Array(n) : "ubyte" == e && (this._buffer = new Uint8Array(n)));
            }
            r(t, "laya.d3.graphics.IndexBuffer3D", e);
            var n = t.prototype;
            return n._bindForVAO = function() {
                if (!u._curBindedBufferState) throw "IndexBuffer3D: must bind current BufferState.";
                v.instance.bindBuffer(34963, this._glBuffer);
            }, n.bind = function() {
                if (u._curBindedBufferState) throw "IndexBuffer3D: must unbind current BufferState.";
                return h._bindedIndexBuffer !== this._glBuffer ? (v.instance.bindBuffer(34963, this._glBuffer),
                    h._bindedIndexBuffer = this._glBuffer, !0) : !1;
            }, n.setData = function(e, t, n, i) {
                void 0 === t && (t = 0), void 0 === n && (n = 0), void 0 === i && (i = 4294967295);
                var r = 0;
                "ushort" == this._indexType ? (r = 2, (0 !== n || 4294967295 !== i) && (e = new Uint16Array(e.buffer, n * r, i))) : "ubyte" == this._indexType && (r = 1,
                    (0 !== n || 4294967295 !== i) && (e = new Uint8Array(e.buffer, n * r, i)));
                var a = u._curBindedBufferState;
                if (a ? a._bindedIndexBuffer === this ? v.instance.bufferSubData(this._bufferType, t * r, e) : (a.unBind(),
                        this.bind(), v.instance.bufferSubData(this._bufferType, t * r, e), a.bind()) : (this.bind(),
                        v.instance.bufferSubData(this._bufferType, t * r, e)), this._canRead)
                    if (0 !== t || 0 !== n || 4294967295 !== i) {
                        var o = this._buffer.length - t;
                        i > o && (i = o);
                        for (var s = 0; i > s; s++) this._buffer[t + s] = e[s];
                    } else this._buffer = e;
            }, n.getData = function() {
                if (this._canRead) return this._buffer;
                throw new Error("Can't read data from VertexBuffer with only write flag!");
            }, n.destroy = function() {
                e.prototype.destroy.call(this), this._buffer = null;
            }, a(0, n, "indexType", function() {
                return this._indexType;
            }), a(0, n, "indexTypeByteCount", function() {
                return this._indexTypeByteCount;
            }), a(0, n, "indexCount", function() {
                return this._indexCount;
            }), a(0, n, "canRead", function() {
                return this._canRead;
            }), t.INDEXTYPE_UBYTE = "ubyte", t.INDEXTYPE_USHORT = "ushort", t;
        }(h)),
        Qt = function(e) {
            function t(e, n, i, r) {
                this._renderState = new Z(), this._owner = e, this._cacheSharders = [], this._publicValidDefine = 0,
                    this._spriteValidDefine = 0, this._materialValidDefine = 0, this._validDefineMap = {},
                    t.__super.call(this, n, i, null, this._validDefineMap);
                var a = this._owner._publicDefinesMap,
                    o = this._owner._spriteDefinesMap,
                    s = this._owner._materialDefinesMap;
                for (var l in this._validDefineMap) null != a[l] ? this._publicValidDefine |= a[l] : null != o[l] ? this._spriteValidDefine |= o[l] : null != s[l] && (this._materialValidDefine |= s[l]);
                this._stateMap = r;
            }
            r(t, "laya.d3.shader.ShaderPass", e);
            var n = t.prototype;
            return n._definesToNameDic = function(e, t) {
                for (var n = {}, i = 1, r = 0; 32 > r && (i = 1 << r, !(i > e)); r++)
                    if (e & i) {
                        var a = t[i];
                        n[a] = "";
                    }
                return n;
            }, n._compileToTree = function(e, t, n, i, r) {
                var a, o, s, l, h, u, c, _ = 0,
                    d = 0,
                    f = 0,
                    m = 0;
                for (d = n; d < t.length; d++)
                    if (s = t[d], !(s.length < 1) && (_ = s.indexOf("//"),
                            0 !== _)) {
                        if (_ >= 0 && (s = s.substr(0, _)), a = c || new L(i), c = null, a.text = s, (_ = s.indexOf("#")) >= 0) {
                            for (l = "#", m = _ + 1, f = s.length; f > m; m++) {
                                var p = s.charAt(m);
                                if (" " === p || "\t" === p || "?" === p) break;
                                l += p;
                            }
                            switch (a.name = l, l) {
                                case "#ifdef":
                                case "#ifndef":
                                    if (a.setParent(e), e = a, r)
                                        for (u = s.substr(m).split(C._splitToWordExps3), m = 0; m < u.length; m++) s = u[m],
                                            s.length && (r[s] = !0);
                                    continue;

                                case "#if":
                                case "#elif":
                                    if (a.setParent(e), e = a, r)
                                        for (u = s.substr(m).split(C._splitToWordExps3), m = 0; m < u.length; m++) s = u[m],
                                            s.length && "defined" != s && (r[s] = !0);
                                    continue;

                                case "#else":
                                    e = e.parent, o = e.childs[e.childs.length - 1], a.setParent(e), e = a;
                                    continue;

                                case "#endif":
                                    e = e.parent, o = e.childs[e.childs.length - 1], a.setParent(e);
                                    continue;

                                case "#include":
                                    u = C.splitToWords(s, null);
                                    var T = C.includes[u[1]];
                                    if (!T) throw "ShaderCompile error no this include file:" + u[1];
                                    if ((_ = u[0].indexOf("?")) < 0) {
                                        a.setParent(e), s = T.getWith("with" == u[2] ? u[3] : null), this._compileToTree(a, s.split("\n"), 0, i, r),
                                            a.text = "";
                                        continue;
                                    }
                                    a.setCondition(u[0].substr(_ + 1), 1), a.text = T.getWith("with" == u[2] ? u[3] : null);
                                    break;

                                case "#import":
                                    u = C.splitToWords(s, null), h = u[1], i.push({
                                        node: a,
                                        file: C.includes[h],
                                        ofs: a.text.length
                                    });
                                    continue;
                            }
                        } else {
                            if (o = e.childs[e.childs.length - 1], o && !o.name) {
                                i.length > 0 && C.splitToWords(s, o), c = a, o.text += "\n" + s;
                                continue;
                            }
                            i.length > 0 && C.splitToWords(s, a);
                        }
                        a.setParent(e);
                    }
            }, n.withCompile = function(e, t, n) {
                e &= this._publicValidDefine, t &= this._spriteValidDefine, n &= this._materialValidDefine;
                var i, r, a;
                if (r = this._cacheSharders[e])
                    if (a = r[t]) {
                        if (i = a[n]) return i;
                    } else a = r[t] = [];
                else r = this._cacheSharders[e] = [], a = r[t] = [];
                var o, s = this._definesToNameDic(e, this._owner._publicDefines),
                    l = this._definesToNameDic(t, this._owner._spriteDefines),
                    h = this._definesToNameDic(n, this._owner._materialDefines);
                if (Ve.debugMode) {
                    var u = "";
                    for (o in s) u += o + " ";
                    var c = "";
                    for (o in l) c += o + " ";
                    var _ = "";
                    for (o in h) _ += o + " ";
                    F.shaderHighPrecision || (e += Ve.SHADERDEFINE_HIGHPRECISION), console.log("%cShader3DDebugMode---(Name:" + this._owner._owner._name + " PassIndex:" + this._owner._passes.indexOf(this) + " PublicDefine:" + e + " SpriteDefine:" + t + " MaterialDefine:" + n + " PublicDefineGroup:" + u + " SpriteDefineGroup:" + c + "MaterialDefineGroup: " + _ + ")---ShaderCompile3DDebugMode", "color:green");
                }
                var d = {},
                    f = "";
                if (s)
                    for (o in s) f += "#define " + o + "\n", d[o] = !0;
                if (l)
                    for (o in l) f += "#define " + o + "\n", d[o] = !0;
                if (h)
                    for (o in h) f += "#define " + o + "\n", d[o] = !0;
                var m = this._VS.toscript(d, []),
                    p = "";
                0 == m[0].indexOf("#version") && (p = m[0] + "\n", m.shift());
                var T = this._PS.toscript(d, []),
                    E = "";
                return 0 == T[0].indexOf("#version") && (E = T[0] + "\n", T.shift()), i = new Xn(p + f + m.join("\n"), E + f + T.join("\n"), this._owner._attributeMap || this._owner._owner._attributeMap, this._owner._uniformMap || this._owner._owner._uniformMap, this),
                    a[n] = i, i;
            }, a(0, n, "renderState", function() {
                return this._renderState;
            }), t;
        }(C),
        Jt = function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.core.BufferState", e);
            var n = t.prototype;
            return n.applyVertexBuffer = function(e) {
                if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                var t = v.instance,
                    n = e.vertexDeclaration,
                    i = null;
                i = R.supportWebGLPlusRendering ? n._shaderValues._nativeArray : n._shaderValues.getData(),
                    e.bind();
                for (var r in i) {
                    var a = parseInt(r),
                        o = i[r];
                    t.enableVertexAttribArray(a), t.vertexAttribPointer(a, o[0], o[1], !!o[2], o[3], o[4]);
                }
            }, n.applyVertexBuffers = function(e) {
                if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                for (var t = v.instance, n = 0, i = e.length; i > n; n++) {
                    var r = e[n],
                        a = r.vertexDeclaration,
                        o = null;
                    o = R.supportWebGLPlusRendering ? a._shaderValues._nativeArray : a._shaderValues.getData(),
                        r.bind();
                    for (var s in o) {
                        var l = parseInt(s),
                            h = o[s];
                        t.enableVertexAttribArray(l), t.vertexAttribPointer(l, h[0], h[1], !!h[2], h[3], h[4]);
                    }
                }
            }, n.applyInstanceVertexBuffer = function(e) {
                if (B._angleInstancedArrays) {
                    if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                    var t = v.instance,
                        n = e.vertexDeclaration,
                        i = null;
                    i = R.supportWebGLPlusRendering ? n._shaderValues._nativeArray : n._shaderValues.getData(),
                        e.bind();
                    for (var r in i) {
                        var a = parseInt(r),
                            o = i[r];
                        t.enableVertexAttribArray(a), t.vertexAttribPointer(a, o[0], o[1], !!o[2], o[3], o[4]),
                            B._angleInstancedArrays.vertexAttribDivisorANGLE(a, 1);
                    }
                }
            }, n.applyIndexBuffer = function(e) {
                if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                this._bindedIndexBuffer !== e && (e._bindForVAO(), this._bindedIndexBuffer = e);
            }, t;
        }(u),
        $t = function(e) {
            function t() {
                this.angle = NaN, this.radius = NaN, this.length = NaN, this.emitType = 0, t.__super.call(this),
                    this.angle = 25 / 180 * Math.PI, this.radius = 1, this.length = 5, this.emitType = 0,
                    this.randomDirection = !1;
            }
            r(t, "laya.d3.core.particleShuriKen.module.shape.ConeShape", e);
            var n = t.prototype;
            return n._getShapeBoundBox = function(e) {
                var t = this.radius + this.length * Math.sin(this.angle),
                    n = this.length * Math.cos(this.angle),
                    i = e.min;
                i.x = i.y = -t, i.z = 0;
                var r = e.max;
                r.x = r.y = t, r.z = n;
            }, n._getSpeedBoundBox = function(e) {
                var t = Math.sin(this.angle),
                    n = e.min;
                n.x = n.y = -t, n.z = 0;
                var i = e.max;
                i.x = i.y = t, i.z = 1;
            }, n.generatePositionAndDirection = function(e, n, i, r) {
                var a, o = t._tempPositionPoint,
                    s = NaN,
                    l = NaN,
                    h = Math.cos(this.angle),
                    u = Math.sin(this.angle);
                switch (this.emitType) {
                    case 0:
                        i ? (i.seed = r[16], Lt._randomPointInsideUnitCircle(t._tempPositionPoint, i), r[16] = i.seed) : Lt._randomPointInsideUnitCircle(t._tempPositionPoint),
                            s = o.x, l = o.y, e.x = s * this.radius, e.y = l * this.radius, e.z = 0, this.randomDirection ? (i ? (i.seed = r[17],
                                    Lt._randomPointInsideUnitCircle(t._tempDirectionPoint, i), r[17] = i.seed) : Lt._randomPointInsideUnitCircle(t._tempDirectionPoint),
                                a = t._tempDirectionPoint, n.x = a.x * u, n.y = a.y * u) : (n.x = s * u, n.y = l * u),
                            n.z = h;
                        break;

                    case 1:
                        i ? (i.seed = r[16], Lt._randomPointUnitCircle(t._tempPositionPoint, i), r[16] = i.seed) : Lt._randomPointUnitCircle(t._tempPositionPoint),
                            s = o.x, l = o.y, e.x = s * this.radius, e.y = l * this.radius, e.z = 0, this.randomDirection ? (i ? (i.seed = r[17],
                                    Lt._randomPointInsideUnitCircle(t._tempDirectionPoint, i), r[17] = i.seed) : Lt._randomPointInsideUnitCircle(t._tempDirectionPoint),
                                a = t._tempDirectionPoint, n.x = a.x * u, n.y = a.y * u) : (n.x = s * u, n.y = l * u),
                            n.z = h;
                        break;

                    case 2:
                        i ? (i.seed = r[16], Lt._randomPointInsideUnitCircle(t._tempPositionPoint, i)) : Lt._randomPointInsideUnitCircle(t._tempPositionPoint),
                            s = o.x, l = o.y, e.x = s * this.radius, e.y = l * this.radius, e.z = 0, n.x = s * u,
                            n.y = l * u, n.z = h, Te.normalize(n, n), i ? (Te.scale(n, this.length * i.getFloat(), n),
                                r[16] = i.seed) : Te.scale(n, this.length * Math.random(), n), Te.add(e, n, e),
                            this.randomDirection && (i ? (i.seed = r[17], Lt._randomPointUnitSphere(n, i), r[17] = i.seed) : Lt._randomPointUnitSphere(n));
                        break;

                    case 3:
                        i ? (i.seed = r[16], Lt._randomPointUnitCircle(t._tempPositionPoint, i)) : Lt._randomPointUnitCircle(t._tempPositionPoint),
                            s = o.x, l = o.y, e.x = s * this.radius, e.y = l * this.radius, e.z = 0, n.x = s * u,
                            n.y = l * u, n.z = h, Te.normalize(n, n), i ? (Te.scale(n, this.length * i.getFloat(), n),
                                r[16] = i.seed) : Te.scale(n, this.length * Math.random(), n), Te.add(e, n, e),
                            this.randomDirection && (i ? (i.seed = r[17], Lt._randomPointUnitSphere(n, i), r[17] = i.seed) : Lt._randomPointUnitSphere(n));
                        break;

                    default:
                        throw new Error("ConeShape:emitType is invalid.");
                }
            }, n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                n.angle = this.angle, n.radius = this.radius, n.length = this.length, n.emitType = this.emitType,
                    n.randomDirection = this.randomDirection;
            }, i(t, ["_tempPositionPoint", function() {
                return this._tempPositionPoint = new Ee();
            }, "_tempDirectionPoint", function() {
                return this._tempDirectionPoint = new Ee();
            }]), t;
        }(k),
        en = function(e) {
            function t(e) {
                t.__super.call(this), void 0 === e && (e = .5), this._radius = e, this._type = 1,
                    this._nativeShape = new W._physics3D.btSphereShape(e);
            }
            r(t, "laya.d3.physics.shape.SphereColliderShape", e);
            var n = t.prototype;
            return n.clone = function() {
                var e = new t(this._radius);
                return this.cloneTo(e), e;
            }, a(0, n, "radius", function() {
                return this._radius;
            }), t;
        }(X),
        tn = function(e) {
            function t() {
                this.radius = NaN, this.arc = NaN, this.emitFromEdge = !1, t.__super.call(this),
                    this.radius = 1, this.arc = 2 * Math.PI, this.emitFromEdge = !1, this.randomDirection = !1;
            }
            r(t, "laya.d3.core.particleShuriKen.module.shape.CircleShape", e);
            var n = t.prototype;
            return n._getShapeBoundBox = function(e) {
                var t = e.min;
                t.x = t.z = -this.radius, t.y = 0;
                var n = e.max;
                n.x = n.z = this.radius, n.y = 0;
            }, n._getSpeedBoundBox = function(e) {
                var t = e.min;
                t.x = t.y = -1, t.z = 0;
                var n = e.max;
                n.x = n.y = 1, n.z = 0;
            }, n.generatePositionAndDirection = function(e, n, i, r) {
                var a = t._tempPositionPoint;
                i ? (i.seed = r[16], this.emitFromEdge ? Lt._randomPointUnitArcCircle(this.arc, t._tempPositionPoint, i) : Lt._randomPointInsideUnitArcCircle(this.arc, t._tempPositionPoint, i),
                        r[16] = i.seed) : this.emitFromEdge ? Lt._randomPointUnitArcCircle(this.arc, t._tempPositionPoint) : Lt._randomPointInsideUnitArcCircle(this.arc, t._tempPositionPoint),
                    e.x = -a.x, e.y = a.y, e.z = 0, Te.scale(e, this.radius, e), this.randomDirection ? i ? (i.seed = r[17],
                        Lt._randomPointUnitSphere(n, i), r[17] = i.seed) : Lt._randomPointUnitSphere(n) : e.cloneTo(n);
            }, n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                n.radius = this.radius, n.arc = this.arc, n.emitFromEdge = this.emitFromEdge, n.randomDirection = this.randomDirection;
            }, i(t, ["_tempPositionPoint", function() {
                return this._tempPositionPoint = new Ee();
            }]), t;
        }(k),
        nn = function(e) {
            function t() {
                this._source = null, this._dest = null, this._shader = null, this._shaderData = null,
                    this._subShader = 0, t.__super.call(this);
            }
            r(t, "laya.d3.core.render.command.BlitCMD", e);
            var n = t.prototype;
            return n.run = function() {
                this._shaderData.setTexture(lt.SCREENTEXTURE_ID, this._source);
                var e = this._dest;
                e && e._start();
                for (var t = this._shader.getSubShaderAt(this._subShader), n = t._passes, i = 0, r = n.length; r > i; i++) {
                    var a = n[i].withCompile(0, 0, 0);
                    a.bind(), this._shaderData && a.uploadUniforms(a._materialUniformParamsMap, this._shaderData, !0),
                        a.uploadRenderStateBlendDepth(this._shaderData), a.uploadRenderStateFrontFace(this._shaderData, !0, null),
                        Un.instance.render();
                }
                e && e._end();
            }, n.recover = function() {
                t._pool.push(this), this._dest = null, this._shader = null, this._shaderData = null;
            }, t.create = function(e, n, i, r, a) {
                void 0 === a && (a = 0);
                var o;
                return o = t._pool.length > 0 ? t._pool.pop() : new t(), o._source = e, o._dest = n,
                    o._shader = i, o._shaderData = r, o._subShader = a, o;
            }, t._pool = [], t;
        }(Q),
        rn = function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.CastShadowList", e);
            var n = t.prototype;
            return n.add = function(e) {
                var t = e._indexInCastShadowList;
                if (-1 !== t) throw "CastShadowList:element has  in  CastShadowList.";
                this._add(e), e._indexInCastShadowList = this.length++;
            }, n.remove = function(e) {
                var t = e._indexInCastShadowList;
                if (this.length--, t !== this.length) {
                    var n = this.elements[this.length];
                    this.elements[t] = n, n._indexInCastShadowList = t;
                }
                e._indexInCastShadowList = -1;
            }, t;
        }($),
        an = function(e) {
            function t(e, n, i) {
                switch (t.__super.call(this), void 0 === e && (e = .5), void 0 === n && (n = 1.25),
                    void 0 === i && (i = 1), this._radius = e, this._length = n, this._orientation = i,
                    this._type = 3, i) {
                    case 0:
                        this._nativeShape = new W._physics3D.btCapsuleShapeX(e, n - 2 * e);
                        break;

                    case 1:
                        this._nativeShape = new W._physics3D.btCapsuleShape(e, n - 2 * e);
                        break;

                    case 2:
                        this._nativeShape = new W._physics3D.btCapsuleShapeZ(e, n - 2 * e);
                        break;

                    default:
                        throw "CapsuleColliderShape:unknown orientation.";
                }
            }
            r(t, "laya.d3.physics.shape.CapsuleColliderShape", e);
            var n = t.prototype;
            return n._setScale = function(n) {
                var i = t._tempVector30;
                switch (this.orientation) {
                    case 0:
                        i.x = n.x, i.y = i.z = Math.max(n.y, n.z);
                        break;

                    case 1:
                        i.y = n.y, i.x = i.z = Math.max(n.x, n.z);
                        break;

                    case 2:
                        i.z = n.z, i.x = i.y = Math.max(n.x, n.y);
                        break;

                    default:
                        throw "CapsuleColliderShape:unknown orientation.";
                }
                e.prototype._setScale.call(this, i);
            }, n.clone = function() {
                var e = new t(this._radius, this._length, this._orientation);
                return this.cloneTo(e), e;
            }, a(0, n, "radius", function() {
                return this._radius;
            }), a(0, n, "length", function() {
                return this._length;
            }), a(0, n, "orientation", function() {
                return this._orientation;
            }), i(t, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }]), t;
        }(X),
        on = function(e) {
            function t(e) {
                this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null,
                    this._subIndexBufferCount = null, this._skinAnimationDatas = null, this._indexInMesh = 0,
                    this._vertexStart = 0, this._indexStart = 0, this._indexCount = 0, this._indices = null,
                    this._vertexBuffer = null, this._indexBuffer = null, this._id = 0, t.__super.call(this),
                    this._id = ++t._uniqueIDCounter, this._mesh = e, this._boneIndicesList = [], this._subIndexBufferStart = [],
                    this._subIndexBufferCount = [];
            }
            r(t, "laya.d3.resource.models.SubMesh", e);
            var n = t.prototype;
            return n._getType = function() {
                return t._type;
            }, n._render = function(e) {
                this._mesh._bufferState.bind();
                var t = e.renderElement.render._skinnedData;
                if (t)
                    for (var n = t[this._indexInMesh], i = this._boneIndicesList.length, r = 0; i > r; r++) e.shader.uploadCustomUniform(Di.BONES, n[r]),
                        v.instance.drawElements(4, this._subIndexBufferCount[r], 5123, 2 * this._subIndexBufferStart[r]);
                else v.instance.drawElements(4, this._indexCount, 5123, 2 * this._indexStart);
                N.trianglesFaces += this._indexCount / 3, N.renderBatches++;
            }, n.getIndices = function() {
                return this._indices;
            }, n.destroy = function() {
                this._destroyed || (e.prototype.destroy.call(this), this._indexBuffer.destroy(),
                    this._indexBuffer = null, this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null,
                    this._subIndexBufferCount = null, this._skinAnimationDatas = null);
            }, t._uniqueIDCounter = 0, i(t, ["_type", function() {
                return this._type = te._typeCounter++;
            }]), t;
        }(te),
        sn = function(e) {
            function t(e) {
                t.__super.call(this), this._tempRotationMatrix = new Ht(), this._uvLength = new Ee(),
                    this._bufferState = new Jt(), this._firstActiveElement = 0, this._firstNewElement = 0,
                    this._firstFreeElement = 0, this._firstRetiredElement = 0, this._owner = e, this._ownerRender = e.particleRenderer,
                    this._boundingBoxCorners = o(8, null), this._boundingSphere = new Me(new Te(), Number.MAX_VALUE),
                    this._boundingBox = new zt(new Te(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new Te(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE)),
                    this._currentTime = 0, this._isEmitting = !1, this._isPlaying = !1, this._isPaused = !1,
                    this._burstsIndex = 0, this._frameRateTime = 0, this._emissionTime = 0, this._totalDelayTime = 0,
                    this._simulateUpdate = !1, this._bufferMaxParticles = 1, this.duration = 5, this.looping = !0,
                    this.prewarm = !1, this.startDelayType = 0, this.startDelay = 0, this.startDelayMin = 0,
                    this.startDelayMax = 0, this._startLifetimeType = 0, this._startLifetimeConstant = 5,
                    this._startLifeTimeGradient = new Xe(), this._startLifetimeConstantMin = 0, this._startLifetimeConstantMax = 5,
                    this._startLifeTimeGradientMin = new Xe(), this._startLifeTimeGradientMax = new Xe(),
                    this._maxStartLifetime = 5, this.startSpeedType = 0, this.startSpeedConstant = 5,
                    this.startSpeedConstantMin = 0, this.startSpeedConstantMax = 5, this.threeDStartSize = !1,
                    this.startSizeType = 0, this.startSizeConstant = 1, this.startSizeConstantSeparate = new Te(1, 1, 1),
                    this.startSizeConstantMin = 0, this.startSizeConstantMax = 1, this.startSizeConstantMinSeparate = new Te(0, 0, 0),
                    this.startSizeConstantMaxSeparate = new Te(1, 1, 1), this.threeDStartRotation = !1,
                    this.startRotationType = 0, this.startRotationConstant = 0, this.startRotationConstantSeparate = new Te(0, 0, 0),
                    this.startRotationConstantMin = 0, this.startRotationConstantMax = 0, this.startRotationConstantMinSeparate = new Te(0, 0, 0),
                    this.startRotationConstantMaxSeparate = new Te(0, 0, 0), this.randomizeRotationDirection = 0,
                    this.startColorType = 0, this.startColorConstant = new me(1, 1, 1, 1), this.startColorConstantMin = new me(1, 1, 1, 1),
                    this.startColorConstantMax = new me(1, 1, 1, 1), this.gravityModifier = 0, this.simulationSpace = 1,
                    this.scaleMode = 0, this.playOnAwake = !0, this._rand = new Pe(0), this.autoRandomSeed = !0,
                    this.randomSeed = new Uint32Array(1), this._randomSeeds = new Uint32Array(t._RANDOMOFFSET.length),
                    this.isPerformanceMode = !0, this._emission = new Re(), this._emission.enbale = !0;
            }
            r(t, "laya.d3.core.particleShuriKen.ShurikenParticleSystem", e);
            var s = t.prototype;
            return n.imps(s, {
                "laya.d3.core.IClone": !0
            }), s._getVertexBuffer = function(e) {
                return void 0 === e && (e = 0), 0 === e ? this._vertexBuffer : null;
            }, s._getIndexBuffer = function() {
                return this._indexBuffer;
            }, s._generateBoundingSphere = function() {
                var e = this._boundingSphere.center;
                e.x = 0, e.y = 0, e.z = 0, this._boundingSphere.radius = Number.MAX_VALUE;
            }, s._generateBoundingBox = function() {
                var e = this._owner,
                    n = e.particleRenderer,
                    i = this._boundingBox.min,
                    r = this._boundingBox.max,
                    a = 0,
                    o = 0,
                    s = NaN;
                switch (this.startLifetimeType) {
                    case 0:
                        s = this.startLifetimeConstant;
                        break;

                    case 1:
                        s = -Number.MAX_VALUE;
                        var l = l;
                        for (a = 0, o = l.gradientCount; o > a; a++) s = Math.max(s, l.getValueByIndex(a));
                        break;

                    case 2:
                        s = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                        break;

                    case 3:
                        s = -Number.MAX_VALUE;
                        var h = h;
                        for (a = 0, o = h.gradientCount; o > a; a++) s = Math.max(s, h.getValueByIndex(a));
                        var u = u;
                        for (a = 0, o = u.gradientCount; o > a; a++) s = Math.max(s, u.getValueByIndex(a));
                }
                var c = NaN,
                    _ = NaN;
                switch (this.startSpeedType) {
                    case 0:
                        c = _ = this.startSpeedConstant;
                        break;

                    case 1:
                        break;

                    case 2:
                        c = this.startLifetimeConstantMin, _ = this.startLifetimeConstantMax;
                        break;

                    case 3:
                }
                var d, f, m, p;
                this._shape && this._shape.enable || (d = f = Te._ZERO, m = Te._ZERO, p = Te._UnitZ);
                var T = new Te(m.x * c, m.y * c, m.z * c),
                    E = new Te(p.x * _, p.y * _, p.z * _);
                if (this._velocityOverLifetime && this._velocityOverLifetime.enbale) {
                    var v, g, S = this._velocityOverLifetime.velocity;
                    switch (S.type) {
                        case 0:
                            v = g = S.constant;
                            break;

                        case 1:
                            v = g = new Te(S.gradientX.getAverageValue(), S.gradientY.getAverageValue(), S.gradientZ.getAverageValue());
                            break;

                        case 2:
                            v = S.constantMin, g = S.constantMax;
                            break;

                        case 3:
                            v = new Te(S.gradientXMin.getAverageValue(), S.gradientYMin.getAverageValue(), S.gradientZMin.getAverageValue()),
                                g = new Te(S.gradientXMax.getAverageValue(), S.gradientYMax.getAverageValue(), S.gradientZMax.getAverageValue());
                    }
                }
                var y, x, D = this._owner.transform,
                    I = D.position,
                    R = t._tempVector39,
                    M = n.renderMode;
                switch (this.scaleMode) {
                    case 0:
                        var A = D.scale;
                        y = A, R.x = A.x, R.y = A.z, R.z = A.y, 1 === M && (x = A);
                        break;

                    case 1:
                        var C = D.localScale;
                        y = C, R.x = C.x, R.y = C.z, R.z = C.y, 1 === M && (x = C);
                        break;

                    case 2:
                        y = D.scale, R.x = R.y = R.z = 1, 1 === M && (x = Te._ONE);
                }
                var L, O;
                switch (this._velocityOverLifetime && this._velocityOverLifetime.enbale || (L = new Te(T.x * s, T.y * s, T.z * s),
                    O = new Te(E.x * s, E.y * s, E.z * s), 2 != this.scaleMode ? (Te.add(d, L, i), Te.multiply(y, i, i),
                        Te.add(f, O, r), Te.multiply(y, r, r)) : (Te.multiply(y, d, i), Te.add(i, L, i),
                        Te.multiply(y, f, r), Te.add(r, O, r))), this.simulationSpace) {
                    case 0:
                        break;

                    case 1:
                        Te.add(i, I, i), Te.add(r, I, r);
                }
                var N = NaN,
                    V = NaN;
                switch (this.startSizeType) {
                    case 0:
                        if (this.threeDStartSize) {
                            var P = P;
                            N = Math.max(P.x, P.y), 1 === M && (V = P.y);
                        } else N = this.startSizeConstant, 1 === M && (V = this.startSizeConstant);
                        break;

                    case 1:
                        break;

                    case 2:
                        if (this.threeDStartSize) {
                            var w = w;
                            N = Math.max(w.x, w.y), 1 === M && (V = w.y);
                        } else N = this.startSizeConstantMax, 1 === M && (V = this.startSizeConstantMax);
                        break;

                    case 3:
                }
                if (this._sizeOverLifetime && this._sizeOverLifetime.enbale) {
                    this._sizeOverLifetime.size;
                    N *= this._sizeOverLifetime.size.getMaxSizeInGradient();
                }
                var b = t._tempVector30,
                    F = NaN,
                    B = NaN;
                switch (M) {
                    case 0:
                        F = N * t.halfKSqrtOf2, Te.scale(R, N, b), Te.subtract(i, b, i), Te.add(r, b, r);
                        break;

                    case 1:
                        var U = t._tempVector31,
                            z = t._tempVector32,
                            G = t._tempVector33,
                            H = t._tempVector34;
                        this._velocityOverLifetime && this._velocityOverLifetime.enbale || (Te.multiply(x, E, z),
                            Te.multiply(x, T, G));
                        var k = V * n.stretchedBillboardLengthScale,
                            X = Te.scalarLength(z) * n.stretchedBillboardSpeedScale + k,
                            W = Te.scalarLength(G) * n.stretchedBillboardSpeedScale + k,
                            Y = t._tempVector35,
                            Z = t._tempVector36;
                        Te.normalize(z, Y), Te.scale(Y, X, H), Te.subtract(O, H, H), Te.normalize(G, Z),
                            Te.scale(Z, W, U), Te.add(L, U, U), F = N * t.halfKSqrtOf2, Te.scale(R, F, b);
                        var j = t._tempVector37,
                            K = t._tempVector38;
                        Te.scale(Y, .5, j), Te.scale(Z, .5, K), Te.multiply(j, R, j), Te.multiply(K, R, K),
                            Te.add(i, K, i), Te.min(i, H, i), Te.subtract(i, b, i), Te.subtract(r, j, r), Te.max(r, U, r),
                            Te.add(r, b, r);
                        break;

                    case 2:
                        N *= Math.cos(.7853981633974483), B = .5 * N, b.x = R.x * B, b.y = R.z * B, Te.subtract(i, b, i),
                            Te.add(r, b, r);
                        break;

                    case 3:
                        N *= Math.cos(.7853981633974483), B = .5 * N, Te.scale(R, B, b), Te.subtract(i, b, i),
                            Te.add(r, b, r);
                }
                this._boundingBox.getCorners(this._boundingBoxCorners);
            }, s._updateEmission = function() {
                if (this.isAlive)
                    if (this._simulateUpdate) this._simulateUpdate = !1;
                    else {
                        var e = this._startUpdateLoopCount === N.loopCount || this._isPaused ? 0 : this._owner._scene.timer._delta / 1e3;
                        e = Math.min(t._maxElapsedTime, e), this._updateParticles(e);
                    }
            }, s._updateParticles = function(e) {
                (4 !== this._ownerRender.renderMode || this._ownerRender.mesh) && (this._currentTime += e,
                    this._retireActiveParticles(), this._freeRetiredParticles(), this._totalDelayTime += e,
                    this._totalDelayTime < this._playStartDelay || this._emission.enbale && this._isEmitting && !this._isPaused && this._advanceTime(e, this._currentTime));
            }, s._updateParticlesSimulationRestart = function(e) {
                this._firstActiveElement = 0, this._firstNewElement = 0, this._firstFreeElement = 0,
                    this._firstRetiredElement = 0, this._burstsIndex = 0, this._frameRateTime = e, this._emissionTime = 0,
                    this._totalDelayTime = 0, this._currentTime = e;
                var t = e;
                return t < this._playStartDelay ? void(this._totalDelayTime = t) : void(this._emission.enbale && this._advanceTime(e, e));
            }, s._retireActiveParticles = function() {
                for (var e = 1e-4; this._firstActiveElement != this._firstNewElement;) {
                    var t = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride,
                        n = t + this._timeIndex,
                        i = this._currentTime - this._vertices[n];
                    if (i + e < this._vertices[t + this._startLifeTimeIndex]) break;
                    this._vertices[n] = this._drawCounter, this._firstActiveElement++, this._firstActiveElement >= this._bufferMaxParticles && (this._firstActiveElement = 0);
                }
            }, s._freeRetiredParticles = function() {
                for (; this._firstRetiredElement != this._firstActiveElement;) {
                    var e = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];
                    if (this.isPerformanceMode && 3 > e) break;
                    this._firstRetiredElement++, this._firstRetiredElement >= this._bufferMaxParticles && (this._firstRetiredElement = 0);
                }
            }, s._burst = function(e, t) {
                for (var n = 0, i = this._emission._bursts, r = i.length; this._burstsIndex < r; this._burstsIndex++) {
                    var a = i[this._burstsIndex],
                        o = a.time;
                    if (!(o >= e && t > o)) break;
                    var s = 0;
                    this.autoRandomSeed ? s = x.lerp(a.minCount, a.maxCount, Math.random()) : (this._rand.seed = this._randomSeeds[0],
                            s = x.lerp(a.minCount, a.maxCount, this._rand.getFloat()), this._randomSeeds[0] = this._rand.seed),
                        n += s;
                }
                return n;
            }, s._advanceTime = function(e, t) {
                var n = 0,
                    i = this._emissionTime;
                this._emissionTime += e;
                var r = 0;
                if (this._emissionTime > this.duration) {
                    if (!this.looping) {
                        for (r = Math.min(this.maxParticles - this.aliveParticleCount, r), n = 0; r > n; n++) this.emit(t);
                        return this._isPlaying = !1, void this.stop();
                    }
                    r += this._burst(i, this._emissionTime), this._emissionTime -= this.duration, this._burstsIndex = 0,
                        r += this._burst(0, this._emissionTime);
                } else r += this._burst(i, this._emissionTime);
                for (r = Math.min(this.maxParticles - this.aliveParticleCount, r), n = 0; r > n; n++) this.emit(t);
                var a = this.emission.emissionRate;
                if (a > 0) {
                    var o = 1 / a;
                    for (this._frameRateTime += o, this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime; this._frameRateTime <= t && this.emit(this._frameRateTime);) this._frameRateTime += o;
                    this._frameRateTime = Math.floor(t / o) * o;
                }
            }, s._initBufferDatas = function() {
                this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy());
                var e = this._ownerRender,
                    t = e.renderMode;
                if (-1 !== t && this.maxParticles > 0) {
                    var n, i, r = 0,
                        a = 0,
                        o = 0,
                        s = 0,
                        l = 0,
                        h = 0,
                        u = 0,
                        c = e.mesh;
                    if (4 === t) {
                        if (c) {
                            var _ = c._vertexBuffers.length;
                            if (_ > 1) throw new Error("ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.");
                            i = bn.vertexDeclaration, this._floatCountPerVertex = i.vertexStride / 4, this._startLifeTimeIndex = 12,
                                this._timeIndex = 16, this._vertexStride = c._vertexBuffers[0].vertexCount;
                            var d = this._bufferMaxParticles * this._vertexStride,
                                f = Math.floor(d / 65535) + 1,
                                m = d % 65535;
                            if (f > 1) throw new Error("ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.");
                            h = i.vertexStride * m, this._vertexBuffer = new Kt(h, 35048), this._vertexBuffer.vertexDeclaration = i,
                                this._vertices = new Float32Array(this._floatCountPerVertex * m), this._indexStride = c._indexBuffer.indexCount;
                            var p = c._indexBuffer.getData(),
                                T = this._bufferMaxParticles * this._indexStride;
                            for (this._indexBuffer = new qt("ushort", T, 35044), n = new Uint16Array(T), u = h + 2 * T,
                                s = 0, r = 0; r < this._bufferMaxParticles; r++) {
                                var E = r * this._vertexStride;
                                for (a = 0, o = p.length; o > a; a++) n[s++] = E + p[a];
                            }
                            this._indexBuffer.setData(n), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer),
                                this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
                        }
                    } else {
                        for (i = Pn.vertexDeclaration, this._floatCountPerVertex = i.vertexStride / 4, this._startLifeTimeIndex = 7,
                            this._timeIndex = 11, this._vertexStride = 4, h = i.vertexStride * this._bufferMaxParticles * this._vertexStride,
                            this._vertexBuffer = new Kt(h, 35048), this._vertexBuffer.vertexDeclaration = i,
                            this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride),
                            r = 0; r < this._bufferMaxParticles; r++) l = r * this._floatCountPerVertex * this._vertexStride,
                            this._vertices[l] = -.5, this._vertices[l + 1] = -.5, this._vertices[l + 2] = 0,
                            this._vertices[l + 3] = 1, l += this._floatCountPerVertex, this._vertices[l] = .5,
                            this._vertices[l + 1] = -.5, this._vertices[l + 2] = 1, this._vertices[l + 3] = 1,
                            l += this._floatCountPerVertex, this._vertices[l] = .5, this._vertices[l + 1] = .5,
                            this._vertices[l + 2] = 1, this._vertices[l + 3] = 0, l += this._floatCountPerVertex,
                            this._vertices[l] = -.5, this._vertices[l + 1] = .5, this._vertices[l + 2] = 0,
                            this._vertices[l + 3] = 0;
                        for (this._indexStride = 6, this._indexBuffer = new qt("ushort", 6 * this._bufferMaxParticles, 35044),
                            n = new Uint16Array(6 * this._bufferMaxParticles), r = 0; r < this._bufferMaxParticles; r++) {
                            s = 6 * r;
                            var v = r * this._vertexStride,
                                g = v + 2;
                            n[s++] = v, n[s++] = g, n[s++] = v + 1, n[s++] = v, n[s++] = v + 3, n[s++] = g;
                        }
                        this._indexBuffer.setData(n), u = h + 6 * this._bufferMaxParticles * 2, this._bufferState.bind(),
                            this._bufferState.applyVertexBuffer(this._vertexBuffer), this._bufferState.applyIndexBuffer(this._indexBuffer),
                            this._bufferState.unBind();
                    }
                    M._addMemory(u, u);
                }
            }, s.destroy = function() {
                e.prototype.destroy.call(this);
                var t = this._vertexBuffer._byteLength + 2 * this._indexBuffer.indexCount;
                M._addMemory(-t, -t), this._bufferState.destroy(), this._vertexBuffer.destroy(),
                    this._indexBuffer.destroy(), this._emission.destroy(), this._bufferState = null,
                    this._vertexBuffer = null, this._indexBuffer = null, this._owner = null, this._vertices = null,
                    this._indexBuffer = null, this._emission = null, this._shape = null, this.startLifeTimeGradient = null,
                    this.startLifeTimeGradientMin = null, this.startLifeTimeGradientMax = null, this.startSizeConstantSeparate = null,
                    this.startSizeConstantMinSeparate = null, this.startSizeConstantMaxSeparate = null,
                    this.startRotationConstantSeparate = null, this.startRotationConstantMinSeparate = null,
                    this.startRotationConstantMaxSeparate = null, this.startColorConstant = null, this.startColorConstantMin = null,
                    this.startColorConstantMax = null, this._velocityOverLifetime = null, this._colorOverLifetime = null,
                    this._sizeOverLifetime = null, this._rotationOverLifetime = null, this._textureSheetAnimation = null;
            }, s.emit = function(e) {
                var n = t._tempPosition,
                    i = t._tempDirection;
                return this._shape && this._shape.enable ? this.autoRandomSeed ? this._shape.generatePositionAndDirection(n, i) : this._shape.generatePositionAndDirection(n, i, this._rand, this._randomSeeds) : (n.x = n.y = n.z = 0,
                    i.x = i.y = 0, i.z = 1), this.addParticle(n, i, e);
            }, s.addParticle = function(e, t, n) {
                Te.normalize(t, t);
                var i = this._firstFreeElement + 1;
                if (i >= this._bufferMaxParticles && (i = 0), i === this._firstRetiredElement) return !1;
                je.create(this, this._ownerRender, this._owner.transform);
                var r = this._currentTime - n;
                if (r >= je.startLifeTime) return !0;
                var a = NaN,
                    o = NaN,
                    s = NaN,
                    l = NaN,
                    h = NaN,
                    u = NaN,
                    c = NaN,
                    _ = this._velocityOverLifetime && this._velocityOverLifetime.enbale;
                if (_) {
                    var d = this._velocityOverLifetime.velocity.type;
                    2 === d || 3 === d ? this.autoRandomSeed ? (a = Math.random(), o = Math.random(),
                        s = Math.random()) : (this._rand.seed = this._randomSeeds[9], a = this._rand.getFloat(),
                        o = this._rand.getFloat(), s = this._rand.getFloat(), this._randomSeeds[9] = this._rand.seed) : _ = !1;
                } else _ = !1;
                var f = this._colorOverLifetime && this._colorOverLifetime.enbale;
                if (f) {
                    var m = this._colorOverLifetime.color.type;
                    3 === m ? this.autoRandomSeed ? l = Math.random() : (this._rand.seed = this._randomSeeds[10],
                        l = this._rand.getFloat(), this._randomSeeds[10] = this._rand.seed) : f = !1;
                } else f = !1;
                var p = this._sizeOverLifetime && this._sizeOverLifetime.enbale;
                if (p) {
                    var T = this._sizeOverLifetime.size.type;
                    3 === T ? this.autoRandomSeed ? h = Math.random() : (this._rand.seed = this._randomSeeds[11],
                        h = this._rand.getFloat(), this._randomSeeds[11] = this._rand.seed) : p = !1;
                } else p = !1;
                var E = this._rotationOverLifetime && this._rotationOverLifetime.enbale;
                if (E) {
                    var v = this._rotationOverLifetime.angularVelocity.type;
                    2 === v || 3 === v ? this.autoRandomSeed ? u = Math.random() : (this._rand.seed = this._randomSeeds[12],
                        u = this._rand.getFloat(), this._randomSeeds[12] = this._rand.seed) : E = !1;
                } else E = !1;
                var g = this._textureSheetAnimation && this._textureSheetAnimation.enable;
                if (g) {
                    var S = this._textureSheetAnimation.frame.type;
                    3 === S ? this.autoRandomSeed ? c = Math.random() : (this._rand.seed = this._randomSeeds[15],
                        c = this._rand.getFloat(), this._randomSeeds[15] = this._rand.seed) : g = !1;
                } else g = !1;
                var y, x = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride,
                    D = je.startUVInfo[0],
                    I = je.startUVInfo[1],
                    R = je.startUVInfo[2],
                    M = je.startUVInfo[3],
                    A = 0,
                    C = 0,
                    L = 0,
                    O = 0,
                    N = 0,
                    V = this._ownerRender;
                if (4 === V.renderMode) {
                    var P = V.mesh._vertexBuffers[0];
                    y = P.getData();
                    var w = P.vertexDeclaration;
                    C = w.getVertexElementByUsage(0).offset / 4;
                    var b = w.getVertexElementByUsage(1);
                    L = b ? b.offset / 4 : -1;
                    var F = w.getVertexElementByUsage(2);
                    O = F ? F.offset / 4 : -1, A = w.vertexStride / 4, N = 0;
                } else {
                    this._vertices[x + 2] = R, this._vertices[x + 3] = M + I;
                    var B = x + this._floatCountPerVertex;
                    this._vertices[B + 2] = R + D, this._vertices[B + 3] = M + I;
                    var U = B + this._floatCountPerVertex;
                    this._vertices[U + 2] = R + D, this._vertices[U + 3] = M;
                    var z = U + this._floatCountPerVertex;
                    this._vertices[z + 2] = R, this._vertices[z + 3] = M;
                }
                for (var G = x, H = x + this._floatCountPerVertex * this._vertexStride; H > G; G += this._floatCountPerVertex) {
                    var k = 0;
                    if (4 === V.renderMode) {
                        k = G;
                        var X = A * N++,
                            W = X + C;
                        this._vertices[k++] = y[W++], this._vertices[k++] = y[W++], this._vertices[k++] = y[W], -1 === L ? (this._vertices[k++] = 1, this._vertices[k++] = 1, this._vertices[k++] = 1,
                            this._vertices[k++] = 1) : (W = X + L, this._vertices[k++] = y[W++], this._vertices[k++] = y[W++],
                            this._vertices[k++] = y[W++], this._vertices[k++] = y[W]), -1 === O ? (this._vertices[k++] = 0,
                            this._vertices[k++] = 0) : (W = X + O, this._vertices[k++] = R + y[W++] * D, this._vertices[k++] = M + y[W] * I);
                    } else k = G + 4;
                    switch (this._vertices[k++] = e.x, this._vertices[k++] = e.y, this._vertices[k++] = e.z,
                        this._vertices[k++] = je.startLifeTime, this._vertices[k++] = t.x, this._vertices[k++] = t.y,
                        this._vertices[k++] = t.z, this._vertices[k++] = n, this._vertices[k++] = je.startColor.x,
                        this._vertices[k++] = je.startColor.y, this._vertices[k++] = je.startColor.z, this._vertices[k++] = je.startColor.w,
                        this._vertices[k++] = je.startSize[0], this._vertices[k++] = je.startSize[1], this._vertices[k++] = je.startSize[2],
                        this._vertices[k++] = je.startRotation[0], this._vertices[k++] = je.startRotation[1],
                        this._vertices[k++] = je.startRotation[2], this._vertices[k++] = je.startSpeed,
                        f && (this._vertices[k + 1] = l), p && (this._vertices[k + 2] = h), E && (this._vertices[k + 3] = u),
                        g && (this._vertices[k + 4] = c), _ && (this._vertices[k + 5] = a, this._vertices[k + 6] = o,
                            this._vertices[k + 7] = s), this.simulationSpace) {
                        case 0:
                            k += 8, this._vertices[k++] = je.simulationWorldPostion[0], this._vertices[k++] = je.simulationWorldPostion[1],
                                this._vertices[k++] = je.simulationWorldPostion[2], this._vertices[k++] = je.simulationWorldRotation[0],
                                this._vertices[k++] = je.simulationWorldRotation[1], this._vertices[k++] = je.simulationWorldRotation[2],
                                this._vertices[k++] = je.simulationWorldRotation[3];
                            break;

                        case 1:
                            break;

                        default:
                            throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
                    }
                }
                return this._firstFreeElement = i, !0;
            }, s.addNewParticlesToVertexBuffer = function() {
                var e = 0;
                this._firstNewElement < this._firstFreeElement ? (e = this._firstNewElement * this._vertexStride * this._floatCountPerVertex,
                        this._vertexBuffer.setData(this._vertices, e, e, (this._firstFreeElement - this._firstNewElement) * this._vertexStride * this._floatCountPerVertex)) : (e = this._firstNewElement * this._vertexStride * this._floatCountPerVertex,
                        this._vertexBuffer.setData(this._vertices, e, e, (this._bufferMaxParticles - this._firstNewElement) * this._vertexStride * this._floatCountPerVertex),
                        this._firstFreeElement > 0 && this._vertexBuffer.setData(this._vertices, 0, 0, this._firstFreeElement * this._vertexStride * this._floatCountPerVertex)),
                    this._firstNewElement = this._firstFreeElement;
            }, s._getType = function() {
                return t._type;
            }, s._prepareRender = function(e) {
                return this._updateEmission(), this._firstNewElement != this._firstFreeElement && this.addNewParticlesToVertexBuffer(),
                    this._drawCounter++, this._firstActiveElement != this._firstFreeElement ? !0 : !1;
            }, s._render = function(e) {
                this._bufferState.bind();
                var t = 0,
                    n = v.instance;
                this._firstActiveElement < this._firstFreeElement ? (t = (this._firstFreeElement - this._firstActiveElement) * this._indexStride,
                    n.drawElements(4, t, 5123, 2 * this._firstActiveElement * this._indexStride), N.trianglesFaces += t / 3,
                    N.renderBatches++) : (t = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride,
                    n.drawElements(4, t, 5123, 2 * this._firstActiveElement * this._indexStride), N.trianglesFaces += t / 3,
                    N.renderBatches++, this._firstFreeElement > 0 && (t = this._firstFreeElement * this._indexStride,
                        n.drawElements(4, t, 5123, 0), N.trianglesFaces += t / 3, N.renderBatches++));
            }, s.play = function() {
                if (this._burstsIndex = 0, this._isEmitting = !0, this._isPlaying = !0, this._isPaused = !1,
                    this._emissionTime = 0, this._totalDelayTime = 0, !this.autoRandomSeed)
                    for (var e = 0, n = this._randomSeeds.length; n > e; e++) this._randomSeeds[e] = this.randomSeed[0] + t._RANDOMOFFSET[e];
                switch (this.startDelayType) {
                    case 0:
                        this._playStartDelay = this.startDelay;
                        break;

                    case 1:
                        this.autoRandomSeed ? this._playStartDelay = x.lerp(this.startDelayMin, this.startDelayMax, Math.random()) : (this._rand.seed = this._randomSeeds[2],
                            this._playStartDelay = x.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat()),
                            this._randomSeeds[2] = this._rand.seed);
                        break;

                    default:
                        throw new Error("Utils3D: startDelayType is invalid.");
                }
                this._frameRateTime = this._currentTime + this._playStartDelay, this._startUpdateLoopCount = N.loopCount;
            }, s.pause = function() {
                this._isPaused = !0;
            }, s.simulate = function(e, t) {
                void 0 === t && (t = !0), this._simulateUpdate = !0, t ? this._updateParticlesSimulationRestart(e) : (this._isPaused = !1,
                    this._updateParticles(e)), this.pause();
            }, s.stop = function() {
                this._burstsIndex = 0, this._isEmitting = !1, this._emissionTime = 0;
            }, s.cloneTo = function(e) {
                var t = e;
                t.duration = this.duration, t.looping = this.looping, t.prewarm = this.prewarm,
                    t.startDelayType = this.startDelayType, t.startDelay = this.startDelay, t.startDelayMin = this.startDelayMin,
                    t.startDelayMax = this.startDelayMax, t._maxStartLifetime = this._maxStartLifetime,
                    t.startLifetimeType = this.startLifetimeType, t.startLifetimeConstant = this.startLifetimeConstant,
                    this.startLifeTimeGradient.cloneTo(t.startLifeTimeGradient), t.startLifetimeConstantMin = this.startLifetimeConstantMin,
                    t.startLifetimeConstantMax = this.startLifetimeConstantMax, this.startLifeTimeGradientMin.cloneTo(t.startLifeTimeGradientMin),
                    this.startLifeTimeGradientMax.cloneTo(t.startLifeTimeGradientMax), t.startSpeedType = this.startSpeedType,
                    t.startSpeedConstant = this.startSpeedConstant, t.startSpeedConstantMin = this.startSpeedConstantMin,
                    t.startSpeedConstantMax = this.startSpeedConstantMax, t.threeDStartSize = this.threeDStartSize,
                    t.startSizeType = this.startSizeType, t.startSizeConstant = this.startSizeConstant,
                    this.startSizeConstantSeparate.cloneTo(t.startSizeConstantSeparate), t.startSizeConstantMin = this.startSizeConstantMin,
                    t.startSizeConstantMax = this.startSizeConstantMax, this.startSizeConstantMinSeparate.cloneTo(t.startSizeConstantMinSeparate),
                    this.startSizeConstantMaxSeparate.cloneTo(t.startSizeConstantMaxSeparate), t.threeDStartRotation = this.threeDStartRotation,
                    t.startRotationType = this.startRotationType, t.startRotationConstant = this.startRotationConstant,
                    this.startRotationConstantSeparate.cloneTo(t.startRotationConstantSeparate), t.startRotationConstantMin = this.startRotationConstantMin,
                    t.startRotationConstantMax = this.startRotationConstantMax, this.startRotationConstantMinSeparate.cloneTo(t.startRotationConstantMinSeparate),
                    this.startRotationConstantMaxSeparate.cloneTo(t.startRotationConstantMaxSeparate),
                    t.randomizeRotationDirection = this.randomizeRotationDirection, t.startColorType = this.startColorType,
                    this.startColorConstant.cloneTo(t.startColorConstant), this.startColorConstantMin.cloneTo(t.startColorConstantMin),
                    this.startColorConstantMax.cloneTo(t.startColorConstantMax), t.gravityModifier = this.gravityModifier,
                    t.simulationSpace = this.simulationSpace, t.scaleMode = this.scaleMode, t.playOnAwake = this.playOnAwake,
                    t.maxParticles = this.maxParticles, this._emission && (t._emission = this._emission.clone()),
                    this.shape && (t.shape = this.shape.clone()), this.velocityOverLifetime && (t.velocityOverLifetime = this.velocityOverLifetime.clone()),
                    this.colorOverLifetime && (t.colorOverLifetime = this.colorOverLifetime.clone()),
                    this.sizeOverLifetime && (t.sizeOverLifetime = this.sizeOverLifetime.clone()), this.rotationOverLifetime && (t.rotationOverLifetime = this.rotationOverLifetime.clone()),
                    this.textureSheetAnimation && (t.textureSheetAnimation = this.textureSheetAnimation.clone()),
                    t.isPerformanceMode = this.isPerformanceMode, t._isEmitting = this._isEmitting,
                    t._isPlaying = this._isPlaying, t._isPaused = this._isPaused, t._playStartDelay = this._playStartDelay,
                    t._frameRateTime = this._frameRateTime, t._emissionTime = this._emissionTime, t._totalDelayTime = this._totalDelayTime,
                    t._burstsIndex = this._burstsIndex;
            }, s.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, s, "maxParticles", function() {
                return this._bufferMaxParticles - 1;
            }, function(e) {
                var t = e + 1;
                t !== this._bufferMaxParticles && (this._bufferMaxParticles = t, this._initBufferDatas());
            }), a(0, s, "isEmitting", function() {
                return this._isEmitting;
            }), a(0, s, "isAlive", function() {
                return this._isPlaying || this.aliveParticleCount > 0 ? !0 : !1;
            }), a(0, s, "shape", function() {
                return this._shape;
            }, function(e) {
                this._shape !== e && (e && e.enable ? this._owner._render._defineDatas.add(yi.SHADERDEFINE_SHAPE) : this._owner._render._defineDatas.remove(yi.SHADERDEFINE_SHAPE),
                    this._shape = e);
            }), a(0, s, "rotationOverLifetime", function() {
                return this._rotationOverLifetime;
            }, function(e) {
                var t = this._owner._render._defineDatas,
                    n = this._owner._render._shaderValues;
                if (e) {
                    var i = e.angularVelocity;
                    if (!i) return;
                    var r = i.separateAxes,
                        a = i.type;
                    if (e.enbale) switch (r ? t.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE) : t.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIME),
                        a) {
                        case 0:
                            t.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);
                            break;

                        case 1:
                            t.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);
                            break;

                        case 2:
                            t.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);
                            break;

                        case 3:
                            t.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                    } else t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIME), t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE),
                        t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE),
                        t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                    switch (a) {
                        case 0:
                            r ? n.setVector3(yi.ROLANGULARVELOCITYCONSTSEPRARATE, i.constantSeparate) : n.setNumber(yi.ROLANGULARVELOCITYCONST, i.constant);
                            break;

                        case 1:
                            r ? (n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTX, i.gradientX._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTY, i.gradientY._elements),
                                n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZ, i.gradientZ._elements)) : n.setBuffer(yi.ROLANGULARVELOCITYGRADIENT, i.gradient._elements);
                            break;

                        case 2:
                            r ? (n.setVector3(yi.ROLANGULARVELOCITYCONSTSEPRARATE, i.constantMinSeparate), n.setVector3(yi.ROLANGULARVELOCITYCONSTMAXSEPRARATE, i.constantMaxSeparate)) : (n.setNumber(yi.ROLANGULARVELOCITYCONST, i.constantMin),
                                n.setNumber(yi.ROLANGULARVELOCITYCONSTMAX, i.constantMax));
                            break;

                        case 3:
                            r ? (n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTX, i.gradientXMin._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTXMAX, i.gradientXMax._elements),
                                n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTY, i.gradientYMin._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTYMAX, i.gradientYMax._elements),
                                n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZ, i.gradientZMin._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZMAX, i.gradientZMax._elements)) : (n.setBuffer(yi.ROLANGULARVELOCITYGRADIENT, i.gradientMin._elements),
                                n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTMAX, i.gradientMax._elements));
                    }
                } else t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIME), t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE),
                    t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE),
                    t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), t.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES),
                    n.setVector(yi.ROLANGULARVELOCITYCONSTSEPRARATE, null), n.setVector(yi.ROLANGULARVELOCITYCONSTMAXSEPRARATE, null),
                    n.setNumber(yi.ROLANGULARVELOCITYCONST, void 0), n.setNumber(yi.ROLANGULARVELOCITYCONSTMAX, void 0),
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTX, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTXMAX, null),
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTY, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTYMAX, null),
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZ, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZMAX, null),
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTWMAX, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENT, null),
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTMAX, null);
                this._rotationOverLifetime = e;
            }), a(0, s, "emission", function() {
                return this._emission;
            }), a(0, s, "emissionTime", function() {
                return this._emissionTime > this.duration ? this.duration : this._emissionTime;
            }), a(0, s, "aliveParticleCount", function() {
                return this._firstNewElement >= this._firstRetiredElement ? this._firstNewElement - this._firstRetiredElement : this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;
            }), a(0, s, "isPlaying", function() {
                return this._isPlaying;
            }), a(0, s, "isPaused", function() {
                return this._isPaused;
            }), a(0, s, "startLifetimeType", function() {
                return this._startLifetimeType;
            }, function(e) {
                var t = 0,
                    n = 0;
                switch (this.startLifetimeType) {
                    case 0:
                        this._maxStartLifetime = this.startLifetimeConstant;
                        break;

                    case 1:
                        this._maxStartLifetime = -Number.MAX_VALUE;
                        var i = i;
                        for (t = 0, n = i.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, i.getValueByIndex(t));
                        break;

                    case 2:
                        this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                        break;

                    case 3:
                        this._maxStartLifetime = -Number.MAX_VALUE;
                        var r = r;
                        for (t = 0, n = r.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, r.getValueByIndex(t));
                        var a = a;
                        for (t = 0, n = a.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, a.getValueByIndex(t));
                }
                this._startLifetimeType = e;
            }), a(0, s, "startLifetimeConstant", function() {
                return this._startLifetimeConstant;
            }, function(e) {
                0 === this._startLifetimeType && (this._maxStartLifetime = e), this._startLifetimeConstant = e;
            }), a(0, s, "startLifetimeConstantMin", function() {
                return this._startLifetimeConstantMin;
            }, function(e) {
                2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(e, this._startLifetimeConstantMax)),
                    this._startLifetimeConstantMin = e;
            }), a(0, s, "startLifeTimeGradient", function() {
                return this._startLifeTimeGradient;
            }, function(e) {
                if (1 === this._startLifetimeType) {
                    this._maxStartLifetime = -Number.MAX_VALUE;
                    for (var t = 0, n = e.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
                }
                this._startLifeTimeGradient = e;
            }), a(0, s, "startLifetimeConstantMax", function() {
                return this._startLifetimeConstantMax;
            }, function(e) {
                2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, e)),
                    this._startLifetimeConstantMax = e;
            }), a(0, s, "startLifeTimeGradientMin", function() {
                return this._startLifeTimeGradientMin;
            }, function(e) {
                if (3 === this._startLifetimeType) {
                    var t = 0,
                        n = 0;
                    for (this._maxStartLifetime = -Number.MAX_VALUE, t = 0, n = e.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
                    for (t = 0, n = this._startLifeTimeGradientMax.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(t));
                }
                this._startLifeTimeGradientMin = e;
            }), a(0, s, "startLifeTimeGradientMax", function() {
                return this._startLifeTimeGradientMax;
            }, function(e) {
                if (3 === this._startLifetimeType) {
                    var t = 0,
                        n = 0;
                    for (this._maxStartLifetime = -Number.MAX_VALUE, t = 0, n = this._startLifeTimeGradientMin.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(t));
                    for (t = 0, n = e.gradientCount; n > t; t++) this._maxStartLifetime = Math.max(this._maxStartLifetime, e.getValueByIndex(t));
                }
                this._startLifeTimeGradientMax = e;
            }), a(0, s, "velocityOverLifetime", function() {
                return this._velocityOverLifetime;
            }, function(e) {
                var t = this._owner._render._defineDatas,
                    n = this._owner._render._shaderValues;
                if (e) {
                    var i = e.velocity,
                        r = i.type;
                    if (e.enbale) switch (r) {
                        case 0:
                            t.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);
                            break;

                        case 1:
                            t.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);
                            break;

                        case 2:
                            t.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);
                            break;

                        case 3:
                            t.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                    } else t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE),
                        t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                    switch (r) {
                        case 0:
                            n.setVector3(yi.VOLVELOCITYCONST, i.constant);
                            break;

                        case 1:
                            n.setBuffer(yi.VOLVELOCITYGRADIENTX, i.gradientX._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTY, i.gradientY._elements),
                                n.setBuffer(yi.VOLVELOCITYGRADIENTZ, i.gradientZ._elements);
                            break;

                        case 2:
                            n.setVector3(yi.VOLVELOCITYCONST, i.constantMin), n.setVector3(yi.VOLVELOCITYCONSTMAX, i.constantMax);
                            break;

                        case 3:
                            n.setBuffer(yi.VOLVELOCITYGRADIENTX, i.gradientXMin._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTXMAX, i.gradientXMax._elements),
                                n.setBuffer(yi.VOLVELOCITYGRADIENTY, i.gradientYMin._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTYMAX, i.gradientYMax._elements),
                                n.setBuffer(yi.VOLVELOCITYGRADIENTZ, i.gradientZMin._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTZMAX, i.gradientZMax._elements);
                    }
                    n.setInt(yi.VOLSPACETYPE, e.space);
                } else t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE),
                    t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), t.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE),
                    n.setVector(yi.VOLVELOCITYCONST, null), n.setBuffer(yi.VOLVELOCITYGRADIENTX, null),
                    n.setBuffer(yi.VOLVELOCITYGRADIENTY, null), n.setBuffer(yi.VOLVELOCITYGRADIENTZ, null),
                    n.setVector(yi.VOLVELOCITYCONST, null), n.setVector(yi.VOLVELOCITYCONSTMAX, null),
                    n.setBuffer(yi.VOLVELOCITYGRADIENTX, null), n.setBuffer(yi.VOLVELOCITYGRADIENTXMAX, null),
                    n.setBuffer(yi.VOLVELOCITYGRADIENTY, null), n.setBuffer(yi.VOLVELOCITYGRADIENTYMAX, null),
                    n.setBuffer(yi.VOLVELOCITYGRADIENTZ, null), n.setBuffer(yi.VOLVELOCITYGRADIENTZMAX, null),
                    n.setInt(yi.VOLSPACETYPE, void 0);
                this._velocityOverLifetime = e;
            }), a(0, s, "colorOverLifetime", function() {
                return this._colorOverLifetime;
            }, function(e) {
                var t = this._owner._render._defineDatas,
                    n = this._owner._render._shaderValues;
                if (e) {
                    var i = e.color;
                    if (e.enbale) switch (i.type) {
                        case 1:
                            t.add(yi.SHADERDEFINE_COLOROVERLIFETIME);
                            break;

                        case 3:
                            t.add(yi.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                    } else t.remove(yi.SHADERDEFINE_COLOROVERLIFETIME), t.remove(yi.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                    switch (i.type) {
                        case 1:
                            var r = i.gradient;
                            n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, r._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, r._rgbElements);
                            break;

                        case 3:
                            var a = i.gradientMin,
                                o = i.gradientMax;
                            n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements),
                                n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTALPHAS, o._alphaElements), n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTCOLORS, o._rgbElements);
                    }
                } else t.remove(yi.SHADERDEFINE_COLOROVERLIFETIME), t.remove(yi.SHADERDEFINE_RANDOMCOLOROVERLIFETIME),
                    n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, r._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, r._rgbElements),
                    n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements),
                    n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTALPHAS, o._alphaElements), n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTCOLORS, o._rgbElements);
                this._colorOverLifetime = e;
            }), a(0, s, "sizeOverLifetime", function() {
                return this._sizeOverLifetime;
            }, function(e) {
                var t = this._owner._render._defineDatas,
                    n = this._owner._render._shaderValues;
                if (e) {
                    var i = e.size,
                        r = i.separateAxes,
                        a = i.type;
                    if (e.enbale) switch (a) {
                        case 0:
                            r ? t.add(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE) : t.add(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVE);
                            break;

                        case 2:
                            r ? t.add(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE) : t.add(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);
                    } else t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVE), t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE),
                        t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);
                    switch (a) {
                        case 0:
                            r ? (n.setBuffer(yi.SOLSIZEGRADIENTX, i.gradientX._elements), n.setBuffer(yi.SOLSIZEGRADIENTY, i.gradientY._elements),
                                n.setBuffer(yi.SOLSizeGradientZ, i.gradientZ._elements)) : n.setBuffer(yi.SOLSIZEGRADIENT, i.gradient._elements);
                            break;

                        case 2:
                            r ? (n.setBuffer(yi.SOLSIZEGRADIENTX, i.gradientXMin._elements), n.setBuffer(yi.SOLSIZEGRADIENTXMAX, i.gradientXMax._elements),
                                n.setBuffer(yi.SOLSIZEGRADIENTY, i.gradientYMin._elements), n.setBuffer(yi.SOLSIZEGRADIENTYMAX, i.gradientYMax._elements),
                                n.setBuffer(yi.SOLSizeGradientZ, i.gradientZMin._elements), n.setBuffer(yi.SOLSizeGradientZMAX, i.gradientZMax._elements)) : (n.setBuffer(yi.SOLSIZEGRADIENT, i.gradientMin._elements),
                                n.setBuffer(yi.SOLSizeGradientMax, i.gradientMax._elements));
                    }
                } else t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVE), t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE),
                    t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), t.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),
                    n.setBuffer(yi.SOLSIZEGRADIENTX, null), n.setBuffer(yi.SOLSIZEGRADIENTXMAX, null),
                    n.setBuffer(yi.SOLSIZEGRADIENTY, null), n.setBuffer(yi.SOLSIZEGRADIENTYMAX, null),
                    n.setBuffer(yi.SOLSizeGradientZ, null), n.setBuffer(yi.SOLSizeGradientZMAX, null),
                    n.setBuffer(yi.SOLSIZEGRADIENT, null), n.setBuffer(yi.SOLSizeGradientMax, null);
                this._sizeOverLifetime = e;
            }), a(0, s, "textureSheetAnimation", function() {
                return this._textureSheetAnimation;
            }, function(e) {
                var t = this._owner._render._defineDatas,
                    n = this._owner._render._shaderValues;
                if (e) {
                    var i = e.frame,
                        r = i.type;
                    if (e.enable) switch (r) {
                        case 1:
                            t.add(yi.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);
                            break;

                        case 3:
                            t.add(yi.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                    } else t.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), t.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                    if (1 === r || 3 === r) {
                        n.setNumber(yi.TEXTURESHEETANIMATIONCYCLES, e.cycles);
                        var a = e.tiles,
                            o = this._uvLength;
                        o.x = 1 / a.x, o.y = 1 / a.y, n.setVector2(yi.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);
                    }
                    switch (r) {
                        case 1:
                            n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTUVS, i.frameOverTimeData._elements);
                            break;

                        case 3:
                            n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTUVS, i.frameOverTimeDataMin._elements),
                                n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTMAXUVS, i.frameOverTimeDataMax._elements);
                    }
                } else t.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), t.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE),
                    n.setNumber(yi.TEXTURESHEETANIMATIONCYCLES, void 0), n.setVector(yi.TEXTURESHEETANIMATIONSUBUVLENGTH, null),
                    n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTUVS, null), n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTMAXUVS, null);
                this._textureSheetAnimation = e;
            }), t.halfKSqrtOf2 = .71, i(t, ["_RANDOMOFFSET", function() {
                return this._RANDOMOFFSET = new Uint32Array([592910910, 3276756734, 322376503, 306581307, 1793934638, 3737431713, 2527743459, 2368504881, 4085612399, 3774601268, 326370691, 1494990940, 1089181156, 3159510623, 2941263940, 2786374529, 271901988, 4233252447]);
            }, "_maxElapsedTime", function() {
                return this._maxElapsedTime = 1 / 3;
            }, "_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }, "_tempVector32", function() {
                return this._tempVector32 = new Te();
            }, "_tempVector33", function() {
                return this._tempVector33 = new Te();
            }, "_tempVector34", function() {
                return this._tempVector34 = new Te();
            }, "_tempVector35", function() {
                return this._tempVector35 = new Te();
            }, "_tempVector36", function() {
                return this._tempVector36 = new Te();
            }, "_tempVector37", function() {
                return this._tempVector37 = new Te();
            }, "_tempVector38", function() {
                return this._tempVector38 = new Te();
            }, "_tempVector39", function() {
                return this._tempVector39 = new Te();
            }, "_tempPosition", function() {
                return this._tempPosition = new Te();
            }, "_tempDirection", function() {
                return this._tempDirection = new Te();
            }, "_type", function() {
                return this._type = te._typeCounter++;
            }]), t;
        }(te),
        ln = (function(e) {
            function t(e, n) {
                t.__super.call(this), this._normal = e, this._offset = n, this._type = 6, t._nativeNormal.setValue(-e.x, e.y, e.z),
                    this._nativeShape = new W._physics3D.btStaticPlaneShape(t._nativeNormal, n);
            }
            r(t, "laya.d3.physics.shape.StaticPlaneColliderShape", e);
            var n = t.prototype;
            return n.clone = function() {
                var e = new t(this._normal, this._offset);
                return this.cloneTo(e), e;
            }, i(t, ["_nativeNormal", function() {
                return this._nativeNormal = new W._physics3D.btVector3(0, 0, 0);
            }]), t;
        }(X), function(e) {
            function t() {
                this._instanceBatchOpaqueMarks = [], this._vertexBatchOpaqueMarks = [], this._cacheBufferStates = [],
                    t.__super.call(this), yn.instance = new yn(), this._updateCountMark = 0;
            }
            r(t, "laya.d3.graphics.MeshRenderDynamicBatchManager", e);
            var n = t.prototype;
            return n.getInstanceBatchOpaquaMark = function(e, t, n, i) {
                var r = this._instanceBatchOpaqueMarks[e] || (this._instanceBatchOpaqueMarks[e] = []),
                    a = r[t ? 0 : 1] || (r[t ? 0 : 1] = []),
                    o = a[n] || (a[n] = []);
                return o[i] || (o[i] = new pt());
            }, n.getVertexBatchOpaquaMark = function(e, t, n, i) {
                var r = this._vertexBatchOpaqueMarks[e] || (this._vertexBatchOpaqueMarks[e] = []),
                    a = r[t ? 0 : 1] || (r[t ? 0 : 1] = []),
                    o = a[n] || (a[n] = []);
                return o[i] || (o[i] = new pt());
            }, n._getBufferState = function(e) {
                var t = this._cacheBufferStates[e.id];
                if (!t) {
                    var n = yn.instance;
                    t = new Jt(), t.bind();
                    var i = n._vertexBuffer;
                    i.vertexDeclaration = e, t.applyVertexBuffer(i), t.applyIndexBuffer(n._indexBuffer),
                        t.unBind(), this._cacheBufferStates[e.id] = t;
                }
                return t;
            }, n._getBatchRenderElementFromPool = function() {
                var e = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
                return e || (e = new wn(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = e,
                    e.vertexBatchElementList = [], e.instanceBatchElementList = []), e;
            }, n._clear = function() {
                e.prototype._clear.call(this), this._updateCountMark++;
            }, i(t, ["instance", function() {
                return this.instance = new t();
            }]), t;
        }(ee)),
        hn = function(e) {
            function t(e, n, i) {
                t.__super.call(this), void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === i && (i = 1),
                    this._sizeX = e, this._sizeY = n, this._sizeZ = i, this._type = 0, t._nativeSize.setValue(e / 2, n / 2, i / 2),
                    this._nativeShape = new W._physics3D.btBoxShape(t._nativeSize);
            }
            r(t, "laya.d3.physics.shape.BoxColliderShape", e);
            var n = t.prototype;
            return n.clone = function() {
                var e = new t(this._sizeX, this._sizeY, this._sizeZ);
                return this.cloneTo(e), e;
            }, a(0, n, "sizeX", function() {
                return this._sizeX;
            }), a(0, n, "sizeY", function() {
                return this._sizeY;
            }), a(0, n, "sizeZ", function() {
                return this._sizeZ;
            }), i(t, ["_nativeSize", function() {
                return this._nativeSize = new W._physics3D.btVector3(0, 0, 0);
            }]), t;
        }(X),
        un = function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.component.SimpleSingletonList", e);
            var n = t.prototype;
            return n.add = function(e) {
                var t = e._getIndexInList();
                if (-1 !== t) throw "SimpleSingletonList:" + e + " has  in  SingletonList.";
                this._add(e), e._setIndexInList(this.length++);
            }, n.remove = function(e) {
                var t = e._getIndexInList();
                if (this.length--, t !== this.length) {
                    var n = this.elements[this.length];
                    this.elements[t] = n, n._setIndexInList(t);
                }
                e._setIndexInList(-1);
            }, t;
        }($),
        cn = function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.physics.PhysicsUpdateList", e);
            var n = t.prototype;
            return n.add = function(e) {
                var t = e._inPhysicUpdateListIndex;
                if (-1 !== t) throw "PhysicsUpdateList:element has  in  PhysicsUpdateList.";
                this._add(e), e._inPhysicUpdateListIndex = this.length++;
            }, n.remove = function(e) {
                var t = e._inPhysicUpdateListIndex;
                if (this.length--, t !== this.length) {
                    var n = this.elements[this.length];
                    this.elements[t] = n, n._inPhysicUpdateListIndex = t;
                }
                e._inPhysicUpdateListIndex = -1;
            }, t;
        }($),
        _n = function(e) {
            function t(e, n, i) {
                t.__super.call(this), this._bufferState = new Jt(), this._batchID = t._batchIDCounter++,
                    this._batchElements = [], this._currentBatchVertexCount = 0, this._currentBatchIndexCount = 0,
                    this._vertexDeclaration = i, this.batchOwner = e, this.number = n;
            }
            r(t, "laya.d3.graphics.SubMeshStaticBatch", e);
            var a = t.prototype;
            return n.imps(a, {
                "laya.resource.IDispose": !0
            }), a._getStaticBatchBakedVertexs = function(e, n, i, r, a, o) {
                var s, l = o._vertexBuffers[0],
                    h = l.vertexDeclaration,
                    u = h.getVertexElementByUsage(0).offset / 4,
                    c = h.getVertexElementByUsage(3),
                    _ = c ? c.offset / 4 : -1,
                    d = h.getVertexElementByUsage(1),
                    f = d ? d.offset / 4 : -1,
                    m = h.getVertexElementByUsage(2),
                    p = m ? m.offset / 4 : -1,
                    T = h.getVertexElementByUsage(7),
                    E = T ? T.offset / 4 : -1,
                    v = h.getVertexElementByUsage(4),
                    g = v ? v.offset / 4 : -1,
                    S = 18,
                    y = h.vertexStride / 4,
                    x = l.getData();
                if (i) {
                    var D = i.worldMatrix;
                    D.invert(t._tempMatrix4x40), s = t._tempMatrix4x41, Ht.multiply(t._tempMatrix4x40, r.worldMatrix, s);
                } else s = r.worldMatrix;
                var I = t._tempQuaternion0;
                s.decomposeTransRotScale(t._tempVector30, I, t._tempVector31);
                for (var R = a.lightmapScaleOffset, M = o.vertexCount, A = 0; M > A; A++) {
                    var C = A * y,
                        L = (A + n) * S;
                    ke.transformVector3ArrayToVector3ArrayCoordinate(x, C + u, s, e, L + 0), -1 !== _ && ke.transformVector3ArrayByQuat(x, C + _, I, e, L + 3);
                    var O = 0,
                        N = 0,
                        V = L + 6;
                    if (-1 !== f) {
                        var P = C + f;
                        for (O = 0, N = 4; N > O; O++) e[V + O] = x[P + O];
                    } else
                        for (O = 0, N = 4; N > O; O++) e[V + O] = 1;
                    if (-1 !== p) {
                        var w = C + p;
                        e[L + 10] = x[w], e[L + 11] = x[w + 1];
                    }
                    if (R && (-1 !== E ? ke.transformLightingMapTexcoordArray(x, C + E, R, e, L + 12) : ke.transformLightingMapTexcoordArray(x, C + p, R, e, L + 12)), -1 !== g) {
                        var b = C + g;
                        e[L + 14] = x[b], e[L + 15] = x[b + 1], e[L + 16] = x[b + 2], e[L + 17] = x[b + 3];
                    }
                }
                return M;
            }, a.addTest = function(e) {
                var t = 0,
                    n = e.meshFilter.sharedMesh.vertexCount;
                return t = this._currentBatchVertexCount + n, t > 65535 ? !1 : !0;
            }, a.add = function(e) {
                var t = e._render._staticBatch;
                t && t.remove(e);
                var n = e.meshFilter.sharedMesh,
                    i = n.vertexCount;
                this._batchElements.push(e);
                var r = e._render;
                r._isPartOfStaticBatch = !0, r._staticBatch = this;
                for (var a = r._renderElements, o = 0, s = a.length; s > o; o++) a[o].staticBatch = this;
                this._currentBatchIndexCount += n._indexBuffer.indexCount, this._currentBatchVertexCount += i;
            }, a.remove = function(e) {
                var t = e.meshFilter.sharedMesh,
                    n = this._batchElements.indexOf(e);
                if (-1 !== n) {
                    this._batchElements.splice(n, 1);
                    for (var i = (e._render, e._render._renderElements), r = 0, a = i.length; a > r; r++) i[r].staticBatch = null;
                    var o = t.vertexCount;
                    this._currentBatchIndexCount = this._currentBatchIndexCount - t._indexBuffer.indexCount,
                        this._currentBatchVertexCount = this._currentBatchVertexCount - o, e._render._isPartOfStaticBatch = !1;
                }
            }, a.finishInit = function() {
                this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy(),
                    M._addGPUMemory(-(this._vertexBuffer._byteLength + this._indexBuffer._byteLength)));
                var e = 0,
                    t = 0,
                    n = this.batchOwner,
                    i = this._vertexDeclaration.vertexStride / 4,
                    r = new Float32Array(i * this._currentBatchVertexCount),
                    a = new Uint16Array(this._currentBatchIndexCount);
                this._vertexBuffer = new Kt(this._vertexDeclaration.vertexStride * this._currentBatchVertexCount, 35044),
                    this._vertexBuffer.vertexDeclaration = this._vertexDeclaration, this._indexBuffer = new qt("ushort", this._currentBatchIndexCount, 35044);
                for (var o = 0, s = this._batchElements.length; s > o; o++) {
                    for (var l = this._batchElements[o], h = l.meshFilter.sharedMesh, u = this._getStaticBatchBakedVertexs(r, e, n ? n._transform : null, l._transform, l._render, h), c = h._indexBuffer.getData(), _ = e, d = t + c.length, f = l._render._renderElements, m = 0, p = h.subMeshCount; p > m; m++) {
                        var T = h._subMeshes[m],
                            E = t + T._indexStart,
                            v = f[m];
                        v.staticBatchIndexStart = E, v.staticBatchIndexEnd = E + T._indexCount;
                    }
                    a.set(c, t);
                    var g = 0,
                        S = n ? l._transform._isFrontFaceInvert !== n.transform._isFrontFaceInvert : l._transform._isFrontFaceInvert;
                    if (S)
                        for (g = t; d > g; g += 3) {
                            a[g] = _ + a[g];
                            var y = a[g + 1],
                                x = a[g + 2];
                            a[g + 1] = _ + x, a[g + 2] = _ + y;
                        } else
                            for (g = t; d > g; g += 3) a[g] = _ + a[g], a[g + 1] = _ + a[g + 1], a[g + 2] = _ + a[g + 2];
                    t += c.length, e += u;
                }
                this._vertexBuffer.setData(r), this._indexBuffer.setData(a);
                var D = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
                M._addGPUMemory(D), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer),
                    this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
            }, a._render = function(e) {
                this._bufferState.bind();
                for (var t = e.renderElement, n = t.staticBatchElementList, i = 0, r = 0, a = n.length, o = 1; a > o; o++) {
                    var s = n[o - 1];
                    if (s.staticBatchIndexEnd !== n[o].staticBatchIndexStart) {
                        var l = n[i].staticBatchIndexStart,
                            h = n[r].staticBatchIndexEnd - l;
                        v.instance.drawElements(4, h, 5123, 2 * l), i = ++r, N.trianglesFaces += h / 3;
                    } else r++;
                }
                l = n[i].staticBatchIndexStart, h = n[r].staticBatchIndexEnd - l, v.instance.drawElements(4, h, 5123, 2 * l),
                    N.renderBatches++, N.savedRenderBatches += a - 1, N.trianglesFaces += h / 3;
            }, a.dispose = function() {
                var e = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
                M._addGPUMemory(-e), this._batchElements = null, this.batchOwner = null, this._vertexDeclaration = null,
                    this._bufferState.destroy(), this._vertexBuffer.destroy(), this._indexBuffer.destroy(),
                    this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = null;
            }, t.maxBatchVertexCount = 65535, t._batchIDCounter = 0, i(t, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }, "_tempQuaternion0", function() {
                return this._tempQuaternion0 = new he();
            }, "_tempMatrix4x40", function() {
                return this._tempMatrix4x40 = new Ht();
            }, "_tempMatrix4x41", function() {
                return this._tempMatrix4x41 = new Ht();
            }]), t;
        }(te),
        dn = function(e) {
            function t(e) {
                this._floatCountPerVertices1 = 8, this._floatCountPerVertices2 = 1, this._increaseSegementCount = 128,
                    this._activeIndex = 0, this._endIndex = 0, this._needAddFirstVertex = !1, this._isTempEndVertex = !1,
                    this._subBirthTime = null, this._subDistance = null, this._segementCount = 0, this._vertices1 = null,
                    this._vertices2 = null, this._vertexBuffer1 = null, this._vertexBuffer2 = null,
                    this._owner = null, t.__super.call(this), this._lastFixedVertexPosition = new Te(),
                    this._bufferState = new Jt(), this._owner = e, this._resizeData(this._increaseSegementCount, this._bufferState);
            }
            r(t, "laya.d3.core.trail.TrailGeometry", e);
            var n = t.prototype;
            return n._resizeData = function(e, t) {
                this._segementCount = this._increaseSegementCount, this._subBirthTime = new Float32Array(e),
                    this._subDistance = new Float32Array(e);
                var n = 2 * e,
                    i = tt.vertexDeclaration1,
                    r = tt.vertexDeclaration2,
                    a = [],
                    o = n * i.vertexStride,
                    s = n * r.vertexStride,
                    l = o + s;
                this._vertices1 = new Float32Array(n * this._floatCountPerVertices1), this._vertexBuffer1 = new Kt(o, 35044, !1),
                    this._vertexBuffer1.vertexDeclaration = i, this._vertices2 = new Float32Array(n * this._floatCountPerVertices2),
                    this._vertexBuffer2 = new Kt(s, 35048, !1), this._vertexBuffer2.vertexDeclaration = r,
                    a.push(this._vertexBuffer1), a.push(this._vertexBuffer2), t.bind(), t.applyVertexBuffers(a),
                    t.unBind(), M._addMemory(l, l);
            }, n._resetData = function() {
                var e = this._endIndex - this._activeIndex;
                e == this._segementCount && (this._vertexBuffer1.destroy(), this._vertexBuffer2.destroy(),
                        this._segementCount += this._increaseSegementCount, this._resizeData(this._segementCount, this._bufferState)),
                    this._vertexBuffer1.setData(this._vertices1, 0, 2 * this._floatCountPerVertices1 * this._activeIndex, 2 * this._floatCountPerVertices1 * e),
                    this._vertexBuffer2.setData(this._vertices2, 0, 2 * this._floatCountPerVertices2 * this._activeIndex, 2 * this._floatCountPerVertices2 * e);
                var t = 4 * this._activeIndex,
                    n = new Float32Array(this._subDistance.buffer, t, e),
                    i = new Float32Array(this._subBirthTime.buffer, t, e);
                this._subDistance.set(n, 0), this._subBirthTime.set(i, 0), this._endIndex = e, this._activeIndex = 0;
            }, n._updateTrail = function(e, t, n) {
                Te.equals(t, n) || (this._endIndex - this._activeIndex === 0 ? this._addTrailByFirstPosition(e, n) : this._addTrailByNextPosition(e, n));
            }, n._addTrailByFirstPosition = function(e, t) {
                this._endIndex === this._segementCount && this._resetData(), this._subDistance[this._endIndex] = 0,
                    this._subBirthTime[this._endIndex] = this._owner._curtime, this._endIndex++, t.cloneTo(this._lastFixedVertexPosition),
                    this._needAddFirstVertex = !0;
            }, n._addTrailByNextPosition = function(e, n) {
                var i = t._tempVector30,
                    r = t._tempVector31;
                Te.subtract(n, this._lastFixedVertexPosition, i);
                var a = t._tempVector32;
                switch (this._owner.alignment) {
                    case 0:
                        e.transform.getForward(a), Te.cross(i, a, r);
                        break;

                    case 1:
                        this._owner._owner.transform.getForward(a), Te.cross(i, a, r);
                }
                Te.normalize(r, r), Te.scale(r, this._owner.widthMultiplier / 2, r);
                var o = Te.scalarLength(i),
                    s = 0,
                    l = NaN;
                this._needAddFirstVertex && (this._updateVerticesByPositionData(n, r, this._endIndex - 1),
                    this._needAddFirstVertex = !1), o - this._owner.minVertexDistance >= ie.zeroTolerance ? (this._isTempEndVertex ? (s = this._endIndex - 1,
                    l = o - this._subDistance[s], this._updateVerticesByPosition(n, r, o, s), this._owner._totalLength += l) : (this._endIndex === this._segementCount && this._resetData(),
                    this._updateVerticesByPosition(n, r, o, this._endIndex), this._owner._totalLength += o,
                    this._endIndex++), n.cloneTo(this._lastFixedVertexPosition), this._isTempEndVertex = !1) : (this._isTempEndVertex ? (s = this._endIndex - 1,
                    l = o - this._subDistance[s], this._updateVerticesByPosition(n, r, o, s), this._owner._totalLength += l) : (this._endIndex === this._segementCount && this._resetData(),
                    this._updateVerticesByPosition(n, r, o, this._endIndex), this._owner._totalLength += o,
                    this._endIndex++), this._isTempEndVertex = !0);
            }, n._updateVerticesByPositionData = function(e, t, n) {
                var i = 2 * this._floatCountPerVertices1 * n,
                    r = this._owner._curtime;
                this._vertices1[i] = e.x, this._vertices1[i + 1] = e.y, this._vertices1[i + 2] = e.z,
                    this._vertices1[i + 3] = -t.x, this._vertices1[i + 4] = -t.y, this._vertices1[i + 5] = -t.z,
                    this._vertices1[i + 6] = r, this._vertices1[i + 7] = 1, this._vertices1[i + 8] = e.x,
                    this._vertices1[i + 9] = e.y, this._vertices1[i + 10] = e.z, this._vertices1[i + 11] = t.x,
                    this._vertices1[i + 12] = t.y, this._vertices1[i + 13] = t.z, this._vertices1[i + 14] = r,
                    this._vertices1[i + 15] = 0;
                var a = 2 * this._floatCountPerVertices1;
                this._vertexBuffer1.setData(this._vertices1, i, i, a);
            }, n._updateVerticesByPosition = function(e, t, n, i) {
                this._updateVerticesByPositionData(e, t, i), this._subDistance[i] = n, this._subBirthTime[i] = this._owner._curtime;
            }, n._updateVertexBufferUV = function() {
                for (var e = this._endIndex, t = 0, n = this._activeIndex, i = e; i > n; n++) {
                    n !== this._activeIndex && (t += this._subDistance[n]);
                    var r = NaN;
                    r = 0 == this._owner.textureMode ? 1 - t / this._owner._totalLength : 1 - (this._owner._totalLength - t),
                        this._vertices2[2 * n] = r, this._vertices2[2 * n + 1] = r;
                }
                var a = 2 * this._activeIndex;
                this._vertexBuffer2.setData(this._vertices2, a, a, 2 * e - a);
            }, n._updateDisappear = function() {
                for (var e = this._endIndex, t = this._activeIndex; e > t && this._owner._curtime - this._subBirthTime[t] >= this._owner.time + ie.zeroTolerance; t++) {
                    var n = t + 1;
                    if (n !== e && (this._owner._totalLength -= this._subDistance[n]), this._isTempEndVertex && n === e - 1) {
                        var i = (this._floatCountPerVertices1 * t * 2, this._lastFixedVertexPosition);
                        i.x = this._vertices1[0], i.y = this._vertices1[1], i.z = this._vertices1[2], this._isTempEndVertex = !1;
                    }
                    this._activeIndex++;
                }
            }, n._getType = function() {
                return t._type;
            }, n._prepareRender = function(e) {
                return this._endIndex - this._activeIndex > 1;
            }, n._render = function(e) {
                this._bufferState.bind();
                var t = 2 * this._activeIndex,
                    n = 2 * this._endIndex - t;
                v.instance.drawArrays(5, t, n), N.renderBatches++, N.trianglesFaces += n - 2;
            }, n.destroy = function() {
                e.prototype.destroy.call(this);
                var t = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;
                M._addMemory(-t, -t), this._bufferState.destroy(), this._vertexBuffer1.destroy(),
                    this._vertexBuffer2.destroy(), this._bufferState = null, this._vertices1 = null,
                    this._vertexBuffer1 = null, this._vertices2 = null, this._vertexBuffer2 = null,
                    this._subBirthTime = null, this._subDistance = null, this._lastFixedVertexPosition = null;
            }, i(t, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }, "_tempVector32", function() {
                return this._tempVector32 = new Te();
            }, "_type", function() {
                return this._type = te._typeCounter++;
            }]), t;
        }(te),
        fn = function(e) {
            function t() {
                t.__super.call(this), this._childColliderShapes = [], this._type = 5, this._nativeShape = new W._physics3D.btCompoundShape();
            }
            r(t, "laya.d3.physics.shape.CompoundColliderShape", e);
            var n = t.prototype;
            return n._clearChildShape = function(e) {
                e._attatched = !1, e._compoundParent = null, e._indexInCompound = -1;
            }, n._addReference = function() {}, n._removeReference = function() {}, n._updateChildTransform = function(e) {
                var t = e.localOffset,
                    n = e.localRotation,
                    i = X._nativeVector30,
                    r = X._nativQuaternion0,
                    a = X._nativeTransform0;
                i.setValue(-t.x, t.y, t.z), r.setValue(-n.x, n.y, n.z, -n.w), a.setOrigin(i), a.setRotation(r),
                    this._nativeShape.updateChildTransform(e._indexInCompound, a, !0);
            }, n.addChildShape = function(e) {
                if (e._attatched) throw "CompoundColliderShape: this shape has attatched to other entity.";
                e._attatched = !0, e._compoundParent = this, e._indexInCompound = this._childColliderShapes.length,
                    this._childColliderShapes.push(e);
                var n = e.localOffset,
                    i = e.localRotation;
                t._nativeOffset.setValue(-n.x, n.y, n.z), t._nativRotation.setValue(-i.x, i.y, i.z, -i.w),
                    t._nativeTransform.setOrigin(t._nativeOffset), t._nativeTransform.setRotation(t._nativRotation);
                var r = this._nativeShape.getLocalScaling();
                this._nativeShape.setLocalScaling(t._nativeVector3One), this._nativeShape.addChildShape(t._nativeTransform, e._nativeShape),
                    this._nativeShape.setLocalScaling(r), this._attatchedCollisionObject && (this._attatchedCollisionObject.colliderShape = this);
            }, n.removeChildShape = function(e) {
                if (e._compoundParent === this) {
                    var t = e._indexInCompound;
                    this._clearChildShape(e);
                    var n = this._childColliderShapes[this._childColliderShapes.length - 1];
                    n._indexInCompound = t, this._childColliderShapes[t] = n, this._childColliderShapes.pop(),
                        this._nativeShape.removeChildShapeByIndex(t);
                }
            }, n.clearChildShape = function() {
                for (var e = 0, t = this._childColliderShapes.length; t > e; e++) this._clearChildShape(this._childColliderShapes[e]),
                    this._nativeShape.removeChildShapeByIndex(0);
                this._childColliderShapes.length = 0;
            }, n.getChildShapeCount = function() {
                return this._childColliderShapes.length;
            }, n.cloneTo = function(e) {
                var t = e;
                t.clearChildShape();
                for (var n = 0, i = this._childColliderShapes.length; i > n; n++) t.addChildShape(this._childColliderShapes[n].clone());
            }, n.clone = function() {
                var e = new t();
                return this.cloneTo(e), e;
            }, n.destroy = function() {
                e.prototype.destroy.call(this);
                for (var t = 0, n = this._childColliderShapes.length; n > t; t++) {
                    var i = this._childColliderShapes[t];
                    0 === i._referenceCount && i.destroy();
                }
            }, i(t, ["_nativeVector3One", function() {
                return this._nativeVector3One = new W._physics3D.btVector3(1, 1, 1);
            }, "_nativeTransform", function() {
                return this._nativeTransform = new W._physics3D.btTransform();
            }, "_nativeOffset", function() {
                return this._nativeOffset = new W._physics3D.btVector3(0, 0, 0);
            }, "_nativRotation", function() {
                return this._nativRotation = new W._physics3D.btQuaternion(0, 0, 0, 1);
            }]), t;
        }(X),
        mn = function(e) {
            function t(e, n) {
                this._floatCountPerVertices = 7, this._owner = null, this._vertexBuffer = null,
                    this._vertices = null, this._maxLineCount = 0, this._lineCount = 0, t.__super.call(this),
                    this._minUpdate = Number.MAX_VALUE, this._maxUpdate = Number.MIN_VALUE, this._bufferState = new Jt();
                var i = 2 * n;
                this._owner = e, this._maxLineCount = n, this._vertices = new Float32Array(i * this._floatCountPerVertices),
                    this._vertexBuffer = new Kt(We.vertexDeclaration.vertexStride * i, 35044, !1), this._vertexBuffer.vertexDeclaration = We.vertexDeclaration,
                    this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer),
                    this._bufferState.unBind();
            }
            r(t, "laya.d3.core.pixelLine.PixelLineFilter", e);
            var n = t.prototype;
            return n._getType = function() {
                return t._type;
            }, n._resizeLineData = function(e) {
                var t = 2 * e,
                    n = this._vertices;
                this._vertexBuffer.destroy(), this._maxLineCount = e;
                var i = t * this._floatCountPerVertices;
                this._vertices = new Float32Array(i), this._vertexBuffer = new Kt(We.vertexDeclaration.vertexStride * t, 35044, !1),
                    this._vertexBuffer.vertexDeclaration = We.vertexDeclaration, i < n.length ? (this._vertices.set(new Float32Array(n.buffer, 0, i)),
                        this._vertexBuffer.setData(this._vertices, 0, 0, i)) : (this._vertices.set(n), this._vertexBuffer.setData(this._vertices, 0, 0, n.length)),
                    this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer),
                    this._bufferState.unBind();
            }, n._updateLineVertices = function(e, t, n, i, r) {
                t && (this._vertices[e + 0] = t.x, this._vertices[e + 1] = t.y, this._vertices[e + 2] = t.z),
                    i && (this._vertices[e + 3] = i.r, this._vertices[e + 4] = i.g, this._vertices[e + 5] = i.b,
                        this._vertices[e + 6] = i.a), n && (this._vertices[e + 7] = n.x, this._vertices[e + 8] = n.y,
                        this._vertices[e + 9] = n.z), r && (this._vertices[e + 10] = r.r, this._vertices[e + 11] = r.g,
                        this._vertices[e + 12] = r.b, this._vertices[e + 13] = r.a), this._minUpdate = Math.min(this._minUpdate, e),
                    this._maxUpdate = Math.max(this._maxUpdate, e + 2 * this._floatCountPerVertices);
            }, n._removeLineData = function(e) {
                var t = 2 * this._floatCountPerVertices,
                    n = e + 1,
                    i = e * t,
                    r = new Float32Array(this._vertices.buffer, n * t * 4, (this._lineCount - n) * t);
                this._vertices.set(r, i), this._minUpdate = i, this._maxUpdate = i + 2 * this._floatCountPerVertices,
                    this._lineCount--;
            }, n._updateLineData = function(e, t, n, i, r) {
                var a = 2 * this._floatCountPerVertices,
                    o = e * a;
                this._updateLineVertices(o, t, n, i, r);
            }, n._updateLineDatas = function(e, t) {
                for (var n = 2 * this._floatCountPerVertices, i = t.length, r = 0; i > r; r++) {
                    var a = t[r];
                    this._updateLineVertices((e + r) * n, a.startPosition, a.endPosition, a.startColor, a.endColor);
                }
            }, n._getLineData = function(e, t) {
                var n = t.startPosition,
                    i = t.startColor,
                    r = t.endPosition,
                    a = t.endColor,
                    o = this._vertices,
                    s = e * this._floatCountPerVertices * 2;
                n.x = o[s + 0], n.y = o[s + 1], n.z = o[s + 2], i.r = o[s + 3], i.g = o[s + 4],
                    i.b = o[s + 5], i.a = o[s + 6], r.x = o[s + 7], r.y = o[s + 8], r.z = o[s + 9],
                    a.r = o[s + 10], a.g = o[s + 11], a.b = o[s + 12], a.a = o[s + 13];
            }, n._prepareRender = function(e) {
                return !0;
            }, n._render = function(e) {
                this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE && (this._vertexBuffer.setData(this._vertices, this._minUpdate, this._minUpdate, this._maxUpdate - this._minUpdate),
                    this._minUpdate = Number.MAX_VALUE, this._maxUpdate = Number.MIN_VALUE), this._lineCount > 0 && (this._bufferState.bind(),
                    v.instance.drawArrays(1, 0, 2 * this._lineCount), N.renderBatches++);
            }, n.destroy = function() {
                this._destroyed || (e.prototype.destroy.call(this), this._bufferState.destroy(),
                    this._vertexBuffer.destroy(), this._bufferState = null, this._vertexBuffer = null,
                    this._vertices = null);
            }, i(t, ["_type", function() {
                return this._type = te._typeCounter++;
            }]), t;
        }(te),
        pn = function(e) {
            function t(e, n, i) {
                switch (this._radius = 1, this._height = .5, t.__super.call(this), void 0 === e && (e = .5),
                    void 0 === n && (n = 1), void 0 === i && (i = 1), this._radius = e, this._height = n,
                    this._orientation = i, this._type = 2, i) {
                    case 0:
                        t._nativeSize.setValue(n / 2, e, e), this._nativeShape = new W._physics3D.btCylinderShapeX(t._nativeSize);
                        break;

                    case 1:
                        t._nativeSize.setValue(e, n / 2, e), this._nativeShape = new W._physics3D.btCylinderShape(t._nativeSize);
                        break;

                    case 2:
                        t._nativeSize.setValue(e, e, n / 2), this._nativeShape = new W._physics3D.btCylinderShapeZ(t._nativeSize);
                        break;

                    default:
                        throw "CapsuleColliderShape:unknown orientation.";
                }
            }
            r(t, "laya.d3.physics.shape.CylinderColliderShape", e);
            var n = t.prototype;
            return n.clone = function() {
                var e = new t(this._radius, this._height, this._orientation);
                return this.cloneTo(e), e;
            }, a(0, n, "radius", function() {
                return this._radius;
            }), a(0, n, "height", function() {
                return this._height;
            }), a(0, n, "orientation", function() {
                return this._orientation;
            }), i(t, ["_nativeSize", function() {
                return this._nativeSize = new W._physics3D.btVector3(0, 0, 0);
            }]), t;
        }(X),
        Tn = function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.core.FloatKeyframe", e);
            var n = t.prototype;
            return n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                n.inTangent = this.inTangent, n.outTangent = this.outTangent, n.value = this.value;
            }, t;
        }(fe),
        En = function(e) {
            function t() {
                this.maxInstanceCount = 1024, t.__super.call(this), this.instanceWorldMatrixData = new Float32Array(16 * this.maxInstanceCount),
                    this.instanceMVPMatrixData = new Float32Array(16 * this.maxInstanceCount), this.instanceWorldMatrixBuffer = new Kt(4 * this.instanceWorldMatrixData.length, 35048),
                    this.instanceMVPMatrixBuffer = new Kt(4 * this.instanceMVPMatrixData.length, 35048),
                    this.instanceWorldMatrixBuffer.vertexDeclaration = Ie.instanceWorldMatrixDeclaration,
                    this.instanceMVPMatrixBuffer.vertexDeclaration = Ie.instanceMVPMatrixDeclaration;
            }
            r(t, "laya.d3.graphics.SubMeshInstanceBatch", e);
            var n = t.prototype;
            return n._render = function(e) {
                var t = e.renderElement,
                    n = t.instanceSubMesh,
                    i = t.instanceBatchElementList.length,
                    r = n._indexCount;
                n._mesh._instanceBufferState.bind(), B._angleInstancedArrays.drawElementsInstancedANGLE(4, r, 5123, 2 * n._indexStart, i),
                    N.renderBatches++, N.savedRenderBatches += i - 1, N.trianglesFaces += r * i / 3;
            }, i(t, ["instance", function() {
                return this.instance = new t();
            }]), t;
        }(te),
        vn = function(e) {
            function t() {
                t.__super.call(this);
            }
            r(t, "laya.d3.core.scene.OctreeMotionList", e);
            var n = t.prototype;
            return n.add = function(e) {
                var t = e._getIndexInMotionList();
                if (-1 !== t) throw "OctreeMotionList:element has  in  PhysicsUpdateList.";
                this._add(e), e._setIndexInMotionList(this.length++);
            }, n.remove = function(e) {
                var t = e._getIndexInMotionList();
                if (this.length--, t !== this.length) {
                    var n = this.elements[this.length];
                    this.elements[t] = n, n._inPhysicUpdateListIndex = t;
                }
                e._setIndexInMotionList(-1);
            }, t;
        }($),
        gn = function(e) {
            function t() {
                this._renderTexture = null, t.__super.call(this);
            }
            r(t, "laya.d3.core.render.command.SetRenderTargetCMD", e);
            var n = t.prototype;
            return n.run = function() {
                this._renderTexture._start();
            }, n.recover = function() {
                t._pool.push(this), this._renderTexture = null;
            }, t.create = function(e) {
                var n;
                return n = t._pool.length > 0 ? t._pool.pop() : new t(), n._renderTexture = e, n;
            }, t._pool = [], t;
        }(Q),
        Sn = function(e) {
            function t() {
                this._opaqueBatchMarks = [], t.__super.call(this), this._updateCountMark = 0;
            }
            r(t, "laya.d3.graphics.MeshRenderStaticBatchManager", e);
            var n = t.prototype;
            return n._compare = function(e, t) {
                var n = e._render,
                    i = t._render,
                    r = e.meshFilter.sharedMesh,
                    a = t.meshFilter.sharedMesh,
                    o = n.lightmapIndex - i.lightmapIndex;
                if (0 === o) {
                    var s = (n.receiveShadow ? 1 : 0) - (i.receiveShadow ? 1 : 0);
                    if (0 === s) {
                        var l = n.sharedMaterial.id - i.sharedMaterial.id;
                        if (0 === l) {
                            var h = r._vertexBuffers[0].vertexDeclaration.id - a._vertexBuffers[0].vertexDeclaration.id;
                            return 0 === h ? a._indexBuffer.indexCount - r._indexBuffer.indexCount : h;
                        }
                        return l;
                    }
                    return s;
                }
                return o;
            }, n._getBatchRenderElementFromPool = function() {
                var e = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
                return e || (e = new wn(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = e,
                    e.staticBatchElementList = []), e;
            }, n._getStaticBatch = function(e, n) {
                var i = e ? e.id : 0,
                    r = this._staticBatches[i];
                return r || (r = this._staticBatches[i] = []), r[n] || (r[n] = new _n(e, n, t._verDec));
            }, n._initStaticBatchs = function(e) {
                this._quickSort(this._initBatchSprites, 0, this._initBatchSprites.length - 1);
                for (var t, n = !1, i = 0, r = 0, a = this._initBatchSprites.length; a > r; r++) {
                    var o = this._initBatchSprites[r];
                    if (n) t.addTest(o) ? t.add(o) : (n = !1, i++);
                    else {
                        var s = a - 1;
                        r !== s && (t = this._getStaticBatch(e, i), t.add(o), n = !0);
                    }
                }
                for (var l in this._staticBatches) {
                    var h = this._staticBatches[l];
                    for (r = 0, a = h.length; a > r; r++) h[r].finishInit();
                }
                this._initBatchSprites.length = 0;
            }, n._destroyRenderSprite = function(e) {
                var t = e._render._staticBatch;
                if (t.remove(e), 0 === t._batchElements.length) {
                    var n = t.batchOwner,
                        i = n ? n.id : 0,
                        r = this._staticBatches[i];
                    r[t.number] = null, t.dispose();
                    for (var a = !0, o = 0; o < r.length; o++) r[o] && (a = !1);
                    a && delete this._staticBatches[i];
                }
            }, n._clear = function() {
                e.prototype._clear.call(this), this._updateCountMark++;
            }, n._garbageCollection = function() {
                for (var e in this._staticBatches)
                    for (var t = this._staticBatches[e], n = 0, i = t.length; i > n; n++) {
                        var r = t[n];
                        0 === r._batchElements.length && (r.dispose(), t.splice(n, 1), n--, i--, 0 === i && delete this._staticBatches[e]);
                    }
            }, n.getBatchOpaquaMark = function(e, t, n, i) {
                var r = this._opaqueBatchMarks[e] || (this._opaqueBatchMarks[e] = []),
                    a = r[t] || (r[t] = []),
                    o = a[n] || (a[n] = []);
                return o[i] || (o[i] = new pt());
            }, i(t, ["_verDec", function() {
                return this._verDec = Ie.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT");
            }, "instance", function() {
                return this.instance = new t();
            }]), t;
        }(q),
        yn = function(e) {
            function t() {
                this._vertices = null, this._indices = null, this._positionOffset = 0, this._normalOffset = 0,
                    this._colorOffset = 0, this._uv0Offset = 0, this._uv1Offset = 0, this._sTangentOffset = 0,
                    this._vertexBuffer = null, this._indexBuffer = null, t.__super.call(this), this._bufferState = new Jt();
                var e = Ie.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT"),
                    n = 32e3 * e.vertexStride;
                this._vertices = new Float32Array(n / 4), this._vertexBuffer = new Kt(n, 35048),
                    this._indices = new Int16Array(32e3), this._indexBuffer = new qt("ushort", this._indices.length, 35048);
                var i = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
                M._addMemory(i, i);
            }
            r(t, "laya.d3.graphics.SubMeshDynamicBatch", e);
            var n = t.prototype;
            return n._getBatchVertices = function(e, t, n, i, r, a) {
                    var o = e.vertexStride / 4,
                        s = a._vertexBuffer.getData(),
                        l = (r.render.lightmapScaleOffset,
                            r._dynamicMultiSubMesh),
                        h = r._dynamicVertexCount;
                    r._computeWorldPositionsAndNormals(this._positionOffset, this._normalOffset, l, h);
                    for (var u = r._dynamicWorldPositions, c = r._dynamicWorldNormals, _ = a._indices, d = 0; h > d; d++) {
                        var f = l ? _[d] : d,
                            m = f * o,
                            p = (d + n) * o,
                            T = 3 * d,
                            E = p + this._positionOffset;
                        t[E] = u[T], t[E + 1] = u[T + 1], t[E + 2] = u[T + 2], -1 !== this._normalOffset && (E = p + this._normalOffset,
                            t[E] = c[T], t[E + 1] = c[T + 1], t[E + 2] = c[T + 2]), -1 !== this._colorOffset && (E = p + this._colorOffset,
                            T = m + this._colorOffset, t[E] = s[T], t[E + 1] = s[T + 1], t[E + 2] = s[T + 2],
                            t[E + 3] = s[T + 3]), -1 !== this._uv0Offset && (E = p + this._uv0Offset, T = m + this._uv0Offset,
                            t[E] = s[T], t[E + 1] = s[T + 1]), -1 !== this._sTangentOffset && (E = p + this._sTangentOffset,
                            T = m + this._sTangentOffset, t[E] = s[T], t[E + 1] = s[T + 1], t[E + 2] = s[T + 2],
                            t[E + 3] = s[T + 3], E = p + this._sTangentOffset, T = m + this._sTangentOffset,
                            t[E] = s[T], t[E + 1] = s[T + 1], t[E + 2] = s[T + 2], t[E + 3] = s[T + 3]);
                    }
                }, n._getBatchIndices = function(e, t, n, i, r, a) {
                    var o = r._indices,
                        s = 0,
                        l = 0,
                        h = 0,
                        u = i._isFrontFaceInvert;
                    if (a)
                        if (u)
                            for (s = 0, l = o.length; l > s; s += 3) {
                                h = t + s;
                                var c = n + s;
                                e[h] = c, e[h + 1] = c + 2, e[h + 2] = c + 1;
                            } else
                                for (s = l, l = o.length; l > s; s += 3) h = t + s, c = n + s, e[h] = c,
                                    e[h + 1] = c + 1, e[h + 2] = c + 2;
                        else if (u)
                        for (s = 0, l = o.length; l > s; s += 3) h = t + s,
                            e[h] = n + o[s], e[h + 1] = n + o[s + 2], e[h + 2] = n + o[s + 1];
                    else
                        for (s = l,
                            l = o.length; l > s; s += 3) h = t + s, e[h] = n + o[s], e[h + 1] = n + o[s + 1],
                            e[h + 2] = n + o[s + 2];
                }, n._flush = function(e, t) {
                    this._vertexBuffer.setData(this._vertices, 0, 0, e * (this._vertexBuffer.vertexDeclaration.vertexStride / 4)),
                        this._indexBuffer.setData(this._indices, 0, 0, t), v.instance.drawElements(4, t, 5123, 0);
                }, n._prepareRender = function(e) {
                    var t = e.renderElement,
                        n = t.vertexBatchVertexDeclaration;
                    this._bufferState = ln.instance._getBufferState(n), this._positionOffset = n.getVertexElementByUsage(0).offset / 4;
                    var i = n.getVertexElementByUsage(3);
                    this._normalOffset = i ? i.offset / 4 : -1;
                    var r = n.getVertexElementByUsage(1);
                    this._colorOffset = r ? r.offset / 4 : -1;
                    var a = n.getVertexElementByUsage(2);
                    this._uv0Offset = a ? a.offset / 4 : -1;
                    var o = n.getVertexElementByUsage(7);
                    this._uv1Offset = o ? o.offset / 4 : -1;
                    var s = n.getVertexElementByUsage(4);
                    return this._sTangentOffset = s ? s.offset / 4 : -1, !0;
                }, n._render = function(e) {
                    this._bufferState.bind();
                    for (var t = e.renderElement, n = t.vertexBatchVertexDeclaration, i = t.vertexBatchElementList, r = 0, a = 0, o = (n.vertexStride / 4,
                            0), s = i.length, l = 0; s > l; l++) {
                        var h = i[l],
                            u = h._geometry,
                            c = u._indexCount;
                        a + c > 32e3 && (this._flush(r, a), o++, N.trianglesFaces += a / 3, r = a = 0);
                        var _ = h._transform;
                        this._getBatchVertices(n, this._vertices, r, _, h, u), this._getBatchIndices(this._indices, a, r, _, u, h._dynamicMultiSubMesh),
                            r += h._dynamicVertexCount, a += c;
                    }
                    this._flush(r, a), o++, N.renderBatches += o, N.savedRenderBatches += s - o, N.trianglesFaces += a / 3;
                }, t.maxAllowVertexCount = 10, t.maxAllowAttribueCount = 900, t.maxIndicesCount = 32e3,
                t.instance = null, t;
        }(te),
        xn = function(e) {
            function t() {
                t.__super.call(this);
                var e = .5,
                    n = .5,
                    i = .5,
                    r = new Float32Array([-i, e, -n, i, e, -n, i, e, n, -i, e, n, -i, -e, -n, i, -e, -n, i, -e, n, -i, -e, n]),
                    a = new Uint8Array([0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 0, 3, 7, 7, 4, 0, 1, 5, 6, 6, 2, 1, 3, 2, 6, 6, 7, 3, 0, 4, 5, 5, 1, 0]),
                    o = Ie.getVertexDeclaration("POSITION");
                this._vertexBuffer = new Kt(8 * o.vertexStride, 35044, !1), this._vertexBuffer.vertexDeclaration = o,
                    this._indexBuffer = new qt("ubyte", 36, 35044, !1), this._vertexBuffer.setData(r),
                    this._indexBuffer.setData(a);
                var s = new Jt();
                s.bind(), s.applyVertexBuffer(this._vertexBuffer), s.applyIndexBuffer(this._indexBuffer),
                    s.unBind(), this._bufferState = s;
            }
            r(t, "laya.d3.resource.models.SkyBox", e);
            var n = t.prototype;
            return n._render = function(e) {
                v.instance.drawElements(4, 36, 5121, 0), N.trianglesFaces += 12, N.renderBatches++;
            }, t.__init__ = function() {
                t.instance = new t();
            }, t.instance = null, t;
        }(Le),
        Dn = function(e) {
            function t() {
                this._mesh = null, this._convex = !1, t.__super.call(this);
            }
            r(t, "laya.d3.physics.shape.MeshColliderShape", e);
            var n = t.prototype;
            return n._setScale = function(e) {
                this._compoundParent ? this.updateLocalTransformations() : (X._nativeScale.setValue(e.x, e.y, e.z),
                    this._nativeShape.setLocalScaling(X._nativeScale), this._nativeShape.updateBound());
            }, n.cloneTo = function(t) {
                var n = t;
                n.convex = this._convex, n.mesh = this._mesh, e.prototype.cloneTo.call(this, t);
            }, n.clone = function() {
                var e = new t();
                return this.cloneTo(e), e;
            }, n.destroy = function() {
                if (this._nativeShape) {
                    var e = W._physics3D;
                    e.destroy(this._nativeShape), this._nativeShape = null;
                }
            }, a(0, n, "mesh", function() {
                return this._mesh;
            }, function(e) {
                if (this._mesh !== e) {
                    var t = W._physics3D;
                    this._mesh && t.destroy(this._nativeShape), e && (this._nativeShape = new t.btGImpactMeshShape(e._getPhysicMesh()),
                        this._nativeShape.updateBound()), this._mesh = e;
                }
            }), a(0, n, "convex", function() {
                return this._convex;
            }, function(e) {
                this._convex = e;
            }), t;
        }(X),
        In = function(e) {
            function t() {
                this.radius = NaN, this.emitFromShell = !1, t.__super.call(this), this.radius = 1,
                    this.emitFromShell = !1, this.randomDirection = !1;
            }
            r(t, "laya.d3.core.particleShuriKen.module.shape.HemisphereShape", e);
            var n = t.prototype;
            return n._getShapeBoundBox = function(e) {
                var t = e.min;
                t.x = t.y = t.z = -this.radius;
                var n = e.max;
                n.x = n.y = this.radius, n.z = 0;
            }, n._getSpeedBoundBox = function(e) {
                var t = e.min;
                t.x = t.y = -1, t.z = 0;
                var n = e.max;
                n.x = n.y = n.z = 1;
            }, n.generatePositionAndDirection = function(e, t, n, i) {
                n ? (n.seed = i[16], this.emitFromShell ? Lt._randomPointUnitSphere(e, n) : Lt._randomPointInsideUnitSphere(e, n),
                        i[16] = n.seed) : this.emitFromShell ? Lt._randomPointUnitSphere(e) : Lt._randomPointInsideUnitSphere(e),
                    Te.scale(e, this.radius, e);
                var r = e.z;
                0 > r && (e.z = -1 * r), this.randomDirection ? n ? (n.seed = i[17], Lt._randomPointUnitSphere(t, n),
                    i[17] = n.seed) : Lt._randomPointUnitSphere(t) : e.cloneTo(t);
            }, n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                n.radius = this.radius, n.emitFromShell = this.emitFromShell, n.randomDirection = this.randomDirection;
            }, t;
        }(k),
        Rn = function(e) {
            function t(e, n, i, r, a, s, l, h) {
                this._owner = null, this._gridSize = NaN, this.memorySize = 0, this._numberVertices = 0,
                    this._maxNumberIndices = 0, this._currentNumberIndices = 0, this._numberTriangle = 0,
                    this._vertexBuffer = null, this._indexBuffer = null, this._indexArrayBuffer = null,
                    this._boundingBoxCorners = null, this._leafs = null, this._leafNum = 0, this._terrainHeightData = null,
                    this._terrainHeightDataWidth = 0, this._terrainHeightDataHeight = 0, this._chunkOffsetX = 0,
                    this._chunkOffsetZ = 0, this._cameraCoordinateInverse = !1, this._cameraPos = null,
                    this._currentLOD = 0, this._perspectiveFactor = NaN, this._LODTolerance = 0, this._boundingSphere = null,
                    this._boundingBox = null, t.__super.call(this), this._bufferState = new Jt(), this._owner = e,
                    this._cameraPos = new Te(), this._chunkOffsetX = n, this._chunkOffsetZ = i, this._gridSize = r,
                    this._terrainHeightData = a, this._terrainHeightDataWidth = s, this._terrainHeightDataHeight = l,
                    this._leafNum = ce.CHUNK_GRID_NUM / ce.LEAF_GRID_NUM * (ce.CHUNK_GRID_NUM / ce.LEAF_GRID_NUM),
                    this._leafs = o(this._leafNum), this._cameraCoordinateInverse = h;
                for (var u = 0; u < this._leafNum; u++) this._leafs[u] = new ce();
                this.recreateResource();
            }
            r(t, "laya.d3.terrain.TerrainFilter", e);
            var n = t.prototype;
            return n.recreateResource = function() {
                this._currentNumberIndices = 0, this._numberTriangle = 0;
                var e = ce.LEAF_VERTEXT_COUNT,
                    t = ce.LEAF_MAX_INDEX_COUNT;
                this._numberVertices = e * this._leafNum, this._maxNumberIndices = t * this._leafNum,
                    this._indexArrayBuffer = new Uint16Array(this._maxNumberIndices);
                var n = qe.vertexDeclaration,
                    i = n.vertexStride / 4,
                    r = new Float32Array(this._numberVertices * i),
                    a = ce.CHUNK_GRID_NUM / ce.LEAF_GRID_NUM,
                    o = 0,
                    s = 0,
                    l = 0;
                for (o = 0; o < this._leafNum; o++) s = o % a, l = Math.floor(o / a), this._leafs[o].calcVertextBuffer(this._chunkOffsetX, this._chunkOffsetZ, s * ce.LEAF_GRID_NUM, l * ce.LEAF_GRID_NUM, this._gridSize, r, o * ce.LEAF_PLANE_VERTEXT_COUNT, i, this._terrainHeightData, this._terrainHeightDataWidth, this._terrainHeightDataHeight, this._cameraCoordinateInverse);
                for (o = 0; o < this._leafNum; o++) s = o % a, l = Math.floor(o / a), this._leafs[o].calcSkirtVertextBuffer(this._chunkOffsetX, this._chunkOffsetZ, s * ce.LEAF_GRID_NUM, l * ce.LEAF_GRID_NUM, this._gridSize, r, this._leafNum * ce.LEAF_PLANE_VERTEXT_COUNT + o * ce.LEAF_SKIRT_VERTEXT_COUNT, i, this._terrainHeightData, this._terrainHeightDataWidth, this._terrainHeightDataHeight);
                this.assembleIndexInit(), this._vertexBuffer = new Kt(n.vertexStride * this._numberVertices, 35044, !1),
                    this._vertexBuffer.vertexDeclaration = n, this._indexBuffer = new qt("ushort", this._maxNumberIndices, 35044, !1),
                    this._vertexBuffer.setData(r), this._indexBuffer.setData(this._indexArrayBuffer),
                    this.memorySize = 2 * (this._vertexBuffer._byteLength + this._indexBuffer._byteLength),
                    this.calcOriginalBoudingBoxAndSphere(), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer),
                    this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
            }, n.setLODLevel = function(e) {
                if (4 != e.length) return !0;
                var t = (e[0] + 1 << 24) + (e[1] + 1 << 16) + (e[2] + 1 << 8) + (e[3] + 1);
                return this._currentLOD == t ? !1 : (this._currentLOD = t, !0);
            }, n.assembleIndexInit = function() {
                this._currentNumberIndices = 0, this._numberTriangle = 0;
                for (var e = 0, t = 0; t < this._leafNum; t++) {
                    var n = ce.getPlaneLODIndex(t, 0);
                    this._indexArrayBuffer.set(n, e), e += n.length;
                    var i = ce.getSkirtLODIndex(t, 0);
                    this._indexArrayBuffer.set(i, e), e += i.length, this._currentNumberIndices += n.length + i.length;
                }
                this._numberTriangle = this._currentNumberIndices / 3;
            }, n.isNeedAssemble = function(e, t) {
                var n = Math.min(e.viewport.width, e.viewport.height) / (2 * Math.tan(Math.PI * e.fieldOfView / 180));
                return this._perspectiveFactor != n ? (this._perspectiveFactor = n, 1) : this._LODTolerance != ti.LOD_TOLERANCE_VALUE ? (this._LODTolerance = ti.LOD_TOLERANCE_VALUE,
                    1) : 0 == Te.equals(t, this._cameraPos) ? (this._cameraPos.x = t.x, this._cameraPos.y = t.y,
                    this._cameraPos.z = t.z, 2) : 0;
            }, n.assembleIndex = function(e, n) {
                var i = this.isNeedAssemble(e, n);
                if (i > 0) {
                    for (var r = 0; r < this._leafNum; r++) t._TEMP_ARRAY_BUFFER[r] = this._leafs[r].determineLod(n, this._perspectiveFactor, ti.LOD_TOLERANCE_VALUE, 1 == i);
                    if (this.setLODLevel(t._TEMP_ARRAY_BUFFER)) {
                        this._currentNumberIndices = 0, this._numberTriangle = 0;
                        var a = 0;
                        for (r = 0; r < this._leafNum; r++) {
                            var o = t._TEMP_ARRAY_BUFFER[r],
                                s = ce.getPlaneLODIndex(r, o);
                            this._indexArrayBuffer.set(s, a), a += s.length;
                            var l = ce.getSkirtLODIndex(r, o);
                            this._indexArrayBuffer.set(l, a), a += l.length, this._currentNumberIndices += s.length + l.length;
                        }
                        return this._numberTriangle = this._currentNumberIndices / 3, !0;
                    }
                }
                return !1;
            }, n.calcOriginalBoudingBoxAndSphere = function() {
                for (var e = new Ee(2147483647, -2147483647), t = 0; t < this._leafNum; t++) e.x = this._leafs[t]._sizeOfY.x < e.x ? this._leafs[t]._sizeOfY.x : e.x,
                    e.y = this._leafs[t]._sizeOfY.y > e.y ? this._leafs[t]._sizeOfY.y : e.y;
                var n = new Te(this._chunkOffsetX * ce.CHUNK_GRID_NUM * this._gridSize, e.x, this._chunkOffsetZ * ce.CHUNK_GRID_NUM * this._gridSize),
                    i = new Te((this._chunkOffsetX + 1) * ce.CHUNK_GRID_NUM * this._gridSize, e.y, (this._chunkOffsetZ + 1) * ce.CHUNK_GRID_NUM * this._gridSize);
                ce.__ADAPT_MATRIX__ && (Te.transformV3ToV3(n, ce.__ADAPT_MATRIX__, n), Te.transformV3ToV3(i, ce.__ADAPT_MATRIX__, i)),
                    this._boundingBox = new zt(n, i);
                var r = new Te();
                Te.subtract(i, n, r), Te.scale(r, .5, r);
                var a = new Te();
                Te.add(n, r, a), this._boundingSphere = new Me(a, Te.scalarLength(r)), this._boundingBoxCorners = o(8, null),
                    this._boundingBox.getCorners(this._boundingBoxCorners);
            }, n.calcLeafBoudingBox = function(e) {
                for (var t = 0; t < this._leafNum; t++) this._leafs[t].calcLeafBoudingBox(e);
            }, n.calcLeafBoudingSphere = function(e, t) {
                for (var n = 0; n < this._leafNum; n++) this._leafs[n].calcLeafBoudingSphere(e, t);
            }, n._getVertexBuffer = function(e) {
                return void 0 === e && (e = 0), 0 == e ? this._vertexBuffer : null;
            }, n._getIndexBuffer = function() {
                return this._indexBuffer;
            }, n._getType = function() {
                return t._type;
            }, n._prepareRender = function(e) {
                return !0;
            }, n._render = function(e) {
                this._bufferState.bind(), v.instance.drawElements(ti.RENDER_LINE_MODEL ? 1 : 4, this._currentNumberIndices, 5123, 0),
                    N.trianglesFaces += this._numberTriangle, N.renderBatches++;
            }, n.destroy = function() {
                this._owner = null, this._bufferState.destroy(), this._vertexBuffer && this._vertexBuffer.destroy(),
                    this._indexBuffer && this._indexBuffer.destroy();
            }, i(t, ["_TEMP_ARRAY_BUFFER", function() {
                return this._TEMP_ARRAY_BUFFER = new Uint32Array(ce.CHUNK_GRID_NUM / ce.LEAF_GRID_NUM * ce.CHUNK_GRID_NUM / ce.LEAF_GRID_NUM);
            }, "_type", function() {
                return this._type = te._typeCounter++;
            }]), t;
        }(te),
        Mn = (function(e) {
            function t() {
                this._shader = null, this._pyramid = null, this._intensity = 0, this._threshold = 1,
                    this._softKnee = .5, this._diffusion = 7, this._anamorphicRatio = 0, this._dirtIntensity = 0,
                    this.clamp = 65472, this.fastMode = !1, this.dirtTexture = null, t.__super.call(this),
                    this._shaderData = new ue(), this._linearColor = new xe(), this._shaderThreshold = new me(),
                    this._shaderParams = new me(), this._shaderSetting = new me(), this._dirtTileOffset = new me(),
                    this.color = new xe(1, 1, 1, 1), this._shader = Ve.find("PostProcessBloom"), this._pyramid = new Array(32);
            }
            r(t, "laya.d3.core.render.BloomEffect", e);
            var n = t.prototype;
            return n.render = function(e) {
                    var n = e.command,
                        i = e.camera.viewport;
                    this._shaderData.setTexture(t.SHADERVALUE_AUTOEXPOSURETEX, w.whiteTexture);
                    var r = this._anamorphicRatio,
                        a = 0 > r ? -r : 0,
                        o = r > 0 ? r : 0,
                        s = Math.floor(i.width / (2 - a)),
                        l = Math.floor(i.height / (2 - o)),
                        h = Math.max(s, l),
                        u = NaN;
                    u = Math.log2(h) + this._diffusion - 10;
                    var c = Math.floor(u),
                        _ = Math.min(Math.max(c, 1), 16),
                        d = .5 + u - c;
                    this._shaderData.setNumber(t.SHADERVALUE_SAMPLESCALE, d);
                    var f = ke.gammaToLinearSpace(this.threshold),
                        m = f * this._softKnee + 1e-5;
                    this._shaderThreshold.setValue(f, f - m, 2 * m, .25 / m), this._shaderData.setVector(t.SHADERVALUE_THRESHOLD, this._shaderThreshold);
                    var p = ke.gammaToLinearSpace(this.clamp);
                    this._shaderParams.setValue(p, 0, 0, 0), this._shaderData.setVector(t.SHADERVALUE_PARAMS, this._shaderParams);
                    for (var T = this.fastMode ? 1 : 0, E = e.source, v = 0; _ > v; v++) {
                        var g = 2 * v,
                            S = g + 1,
                            y = 0 == v ? 0 + T : 2 + T,
                            x = pi.getTemporary(s, l, 0, 3, 1),
                            D = pi.getTemporary(s, l, 0, 3, 1);
                        this._pyramid[g] = x, this._pyramid[S] = D, n.blit(E, x, this._shader, this._shaderData, y),
                            E = x, s = Math.max(s / 2, 1), l = Math.max(l / 2, 1);
                    }
                    var I = this._pyramid[2 * _ - 3];
                    for (v = _ - 2; v >= 0; v--) g = 2 * v, S = g + 1, x = this._pyramid[g], D = this._pyramid[S],
                        n.setShaderDataTexture(this._shaderData, t.SHADERVALUE_BLOOMTEX, x), n.blit(I, D, this._shader, this._shaderData, 4 + T),
                        I = D;
                    var R = this._linearColor;
                    this.color.toLinear(R);
                    var M = Math.pow(2, this._intensity / 10) - 1,
                        A = this._shaderSetting;
                    this._shaderSetting.setValue(d, M, this._dirtIntensity, _);
                    var C = C ? C : w.blackTexture,
                        L = C.width / C.height,
                        O = i.width / i.height,
                        N = this._dirtTileOffset;
                    N.setValue(1, 1, 0, 0), L > O ? N.setValue(O / L, 1, .5 * (1 - N.x), 0) : O > L && N.setValue(1, L / O, 0, .5 * (1 - N.y));
                    var V = e.compositeShaderData,
                        P = e.compositeDefineData;
                    for (this.fastMode ? P.add(Rt.SHADERDEFINE_BLOOM_LOW) : P.add(Rt.SHADERDEFINE_BLOOM),
                        V.setVector(Rt.SHADERVALUE_BLOOM_DIRTTILEOFFSET, N), V.setVector(Rt.SHADERVALUE_BLOOM_SETTINGS, A),
                        V.setVector(Rt.SHADERVALUE_BLOOM_COLOR, new me(R.r, R.g, R.b, R.a)), V.setTexture(Rt.SHADERVALUE_BLOOM_DIRTTEX, C),
                        V.setTexture(Rt.SHADERVALUE_BLOOMTEX, I), v = 0; _ > v; v++) g = 2 * v, S = g + 1,
                        this._pyramid[g] != I && pi.setReleaseTemporary(this._pyramid[g]), this._pyramid[S] != I && pi.setReleaseTemporary(this._pyramid[S]);
                    e.tempRenderTextures.push(I);
                }, a(0, n, "softKnee", function() {
                    return this._softKnee;
                }, function(e) {
                    this._softKnee = Math.min(Math.max(e, 0), 1);
                }), a(0, n, "intensity", function() {
                    return this._intensity;
                }, function(e) {
                    this._intensity = Math.max(e, 0);
                }), a(0, n, "threshold", function() {
                    return this._threshold;
                }, function(e) {
                    this._threshold = Math.max(e, 0);
                }), a(0, n, "anamorphicRatio", function() {
                    return this._anamorphicRatio;
                }, function(e) {
                    this._anamorphicRatio = Math.min(Math.max(e, -1), 1);
                }), a(0, n, "diffusion", function() {
                    return this._diffusion;
                }, function(e) {
                    this._diffusion = Math.min(Math.max(e, 1), 10);
                }), a(0, n, "dirtIntensity", function() {
                    return this._dirtIntensity;
                }, function(e) {
                    this._dirtIntensity = Math.max(e, 0);
                }), t.SUBSHADER_PREFILTER13 = 0, t.SUBSHADER_PREFILTER4 = 1, t.SUBSHADER_DOWNSAMPLE13 = 2,
                t.SUBSHADER_DOWNSAMPLE4 = 3, t.SUBSHADER_UPSAMPLETENT = 4, t.SUBSHADER_UPSAMPLEBOX = 5,
                t.MAXPYRAMIDSIZE = 16, i(t, ["SHADERVALUE_MAINTEX", function() {
                    return this.SHADERVALUE_MAINTEX = Ve.propertyNameToID("u_MainTex");
                }, "SHADERVALUE_AUTOEXPOSURETEX", function() {
                    return this.SHADERVALUE_AUTOEXPOSURETEX = Ve.propertyNameToID("u_AutoExposureTex");
                }, "SHADERVALUE_SAMPLESCALE", function() {
                    return this.SHADERVALUE_SAMPLESCALE = Ve.propertyNameToID("u_SampleScale");
                }, "SHADERVALUE_THRESHOLD", function() {
                    return this.SHADERVALUE_THRESHOLD = Ve.propertyNameToID("u_Threshold");
                }, "SHADERVALUE_PARAMS", function() {
                    return this.SHADERVALUE_PARAMS = Ve.propertyNameToID("u_Params");
                }, "SHADERVALUE_BLOOMTEX", function() {
                    return this.SHADERVALUE_BLOOMTEX = Ve.propertyNameToID("u_BloomTex");
                }]), t;
        }(be), function(e) {
            function t() {
                this._shaderData = null, this._nameID = 0, this._texture = null, t.__super.call(this);
            }
            r(t, "laya.d3.core.render.command.SetShaderDataTextureCMD", e);
            var n = t.prototype;
            return n.run = function() {
                this._shaderData.setTexture(this._nameID, this._texture);
            }, n.recover = function() {
                t._pool.push(this), this._shaderData = null, this._nameID = 0, this._texture = null;
            }, t.create = function(e, n, i) {
                var r;
                return r = t._pool.length > 0 ? t._pool.pop() : new t(), r._shaderData = e, r._nameID = n,
                    r._texture = i, r;
            }, t._pool = [], t;
        }(Q)),
        An = function(e) {
            function t() {
                this.radius = NaN, this.emitFromShell = !1, t.__super.call(this), this.radius = 1,
                    this.emitFromShell = !1, this.randomDirection = !1;
            }
            r(t, "laya.d3.core.particleShuriKen.module.shape.SphereShape", e);
            var n = t.prototype;
            return n._getShapeBoundBox = function(e) {
                var t = e.min;
                t.x = t.y = t.z = -this.radius;
                var n = e.max;
                n.x = n.y = n.z = this.radius;
            }, n._getSpeedBoundBox = function(e) {
                var t = e.min;
                t.x = t.y = t.z = -1;
                var n = e.max;
                n.x = n.y = n.z = 1;
            }, n.generatePositionAndDirection = function(e, t, n, i) {
                n ? (n.seed = i[16], this.emitFromShell ? Lt._randomPointUnitSphere(e, n) : Lt._randomPointInsideUnitSphere(e, n),
                        i[16] = n.seed) : this.emitFromShell ? Lt._randomPointUnitSphere(e) : Lt._randomPointInsideUnitSphere(e),
                    Te.scale(e, this.radius, e), this.randomDirection ? n ? (n.seed = i[17], Lt._randomPointUnitSphere(t, n),
                        i[17] = n.seed) : Lt._randomPointUnitSphere(t) : e.cloneTo(t);
            }, n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                n.radius = this.radius, n.emitFromShell = this.emitFromShell, n.randomDirection = this.randomDirection;
            }, t;
        }(k),
        Cn = function(e) {
            function t() {
                t.__super.call(this), this.inTangent = new Te(), this.outTangent = new Te(), this.value = new Te();
            }
            r(t, "laya.d3.core.Vector3Keyframe", e);
            var n = t.prototype;
            return n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                this.inTangent.cloneTo(n.inTangent), this.outTangent.cloneTo(n.outTangent), this.value.cloneTo(n.value);
            }, t;
        }(fe),
        Ln = function(e) {
            function t(e, n) {
                this._stacks = 0, this._slices = 0, t.__super.call(this), void 0 === e && (e = 48),
                    void 0 === n && (n = 48), this._stacks = e, this._slices = n;
                for (var i = ne.vertexDeclaration, r = i.vertexStride / 4, a = (this._stacks + 1) * (this._slices + 1), o = 3 * this._stacks * (this._slices + 1) * 2, s = new Float32Array(a * r), l = new Uint16Array(o), h = Math.PI / this._stacks, u = 2 * Math.PI / this._slices, c = 0, _ = 0, d = 0, f = 0; f < this._stacks + 1; f++)
                    for (var m = Math.sin(f * h), p = Math.cos(f * h), T = 0; T < this._slices + 1; T++) {
                        var E = m * Math.sin(T * u),
                            v = m * Math.cos(T * u);
                        s[_ + 0] = E * t._radius, s[_ + 1] = p * t._radius, s[_ + 2] = v * t._radius, s[_ + 3] = -(T / this._slices) + .75,
                            s[_ + 4] = f / this._stacks, _ += r, f != this._stacks - 1 && (l[d++] = c + 1, l[d++] = c,
                                l[d++] = c + (this._slices + 1), l[d++] = c + (this._slices + 1), l[d++] = c, l[d++] = c + this._slices,
                                c++);
                    }
                this._vertexBuffer = new Kt(4 * s.length, 35044, !1), this._vertexBuffer.vertexDeclaration = i,
                    this._indexBuffer = new qt("ushort", l.length, 35044, !1), this._vertexBuffer.setData(s),
                    this._indexBuffer.setData(l);
                var g = new Jt();
                g.bind(), g.applyVertexBuffer(this._vertexBuffer), g.applyIndexBuffer(this._indexBuffer),
                    g.unBind(), this._bufferState = g;
            }
            r(t, "laya.d3.resource.models.SkyDome", e);
            var n = t.prototype;
            return n._render = function(e) {
                var t = this._indexBuffer.indexCount;
                v.instance.drawElements(4, t, 5123, 0), N.trianglesFaces += t / 3, N.renderBatches++;
            }, a(0, n, "stacks", function() {
                return this._stacks;
            }), a(0, n, "slices", function() {
                return this._slices;
            }), t.__init__ = function() {
                t.instance = new t();
            }, t._radius = 1, t.instance = null, t;
        }(Le),
        On = function(e) {
            function t(e, n, i) {
                switch (this._radius = 1, this._height = .5, t.__super.call(this), void 0 === e && (e = .5),
                    void 0 === n && (n = 1), void 0 === i && (i = 1), this._radius = e, this._height = n,
                    this._orientation = i, this._type = 2, i) {
                    case 0:
                        this._nativeShape = new W._physics3D.btConeShapeX(e, n);
                        break;

                    case 1:
                        this._nativeShape = new W._physics3D.btConeShape(e, n);
                        break;

                    case 2:
                        this._nativeShape = new W._physics3D.btConeShapeZ(e, n);
                        break;

                    default:
                        throw "ConeColliderShape:unknown orientation.";
                }
            }
            r(t, "laya.d3.physics.shape.ConeColliderShape", e);
            var n = t.prototype;
            return n.clone = function() {
                var e = new t(this._radius, this._height, this._orientation);
                return this.cloneTo(e), e;
            }, a(0, n, "radius", function() {
                return this._radius;
            }), a(0, n, "height", function() {
                return this._height;
            }), a(0, n, "orientation", function() {
                return this._orientation;
            }), t;
        }(X),
        Nn = function(e) {
            function t() {
                this.x = NaN, this.y = NaN, this.z = NaN, t.__super.call(this), this.x = 1, this.y = 1,
                    this.z = 1, this.randomDirection = !1;
            }
            r(t, "laya.d3.core.particleShuriKen.module.shape.BoxShape", e);
            var n = t.prototype;
            return n._getShapeBoundBox = function(e) {
                var t = e.min;
                t.x = .5 * -this.x, t.y = .5 * -this.y, t.z = .5 * -this.z;
                var n = e.max;
                n.x = .5 * this.x, n.y = .5 * this.y, n.z = .5 * this.z;
            }, n._getSpeedBoundBox = function(e) {
                var t = e.min;
                t.x = 0, t.y = 0, t.z = 0;
                var n = e.max;
                n.x = 0, n.y = 1, n.z = 0;
            }, n.generatePositionAndDirection = function(e, t, n, i) {
                n ? (n.seed = i[16], Lt._randomPointInsideHalfUnitBox(e, n), i[16] = n.seed) : Lt._randomPointInsideHalfUnitBox(e),
                    e.x = this.x * e.x, e.y = this.y * e.y, e.z = this.z * e.z, this.randomDirection ? n ? (n.seed = i[17],
                        Lt._randomPointUnitSphere(t, n), i[17] = n.seed) : Lt._randomPointUnitSphere(t) : (t.x = 0,
                        t.y = 0, t.z = 1);
            }, n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                n.x = this.x, n.y = this.y, n.z = this.z, n.randomDirection = this.randomDirection;
            }, t;
        }(k),
        Vn = function(e) {
            function t() {
                t.__super.call(this), this.inTangent = new me(), this.outTangent = new me(), this.value = new he();
            }
            r(t, "laya.d3.core.QuaternionKeyframe", e);
            var n = t.prototype;
            return n.cloneTo = function(t) {
                e.prototype.cloneTo.call(this, t);
                var n = t;
                this.inTangent.cloneTo(n.inTangent), this.outTangent.cloneTo(n.outTangent), this.value.cloneTo(n.value);
            }, t;
        }(fe),
        Pn = function(e) {
            function t(e, n, i, r, a, o, s, l, h, u, c, _, d, f) {
                this._cornerTextureCoordinate = null, this._positionStartLifeTime = null, this._velocity = null,
                    this._startColor = null, this._startSize = null, this._startRotation0 = null, this._startRotation1 = null,
                    this._startRotation2 = null, this._startLifeTime = NaN, this._time = NaN, this._startSpeed = NaN,
                    this._randoms0 = null, this._randoms1 = null, this._simulationWorldPostion = null,
                    t.__super.call(this), this._cornerTextureCoordinate = e, this._positionStartLifeTime = n,
                    this._velocity = i, this._startColor = r, this._startSize = a, this._startRotation0 = o,
                    this._startRotation1 = s, this._startRotation2 = l, this._startLifeTime = h, this._time = u,
                    this._startSpeed = c, this._randoms0 = this.random0, this._randoms1 = this.random1,
                    this._simulationWorldPostion = f;
            }
            r(t, "laya.d3.graphics.Vertex.VertexShurikenParticleBillboard", e);
            var n = t.prototype;
            return a(0, n, "cornerTextureCoordinate", function() {
                return this._cornerTextureCoordinate;
            }), a(0, n, "random1", function() {
                return this._randoms1;
            }), a(0, n, "startRotation2", function() {
                return this._startRotation2;
            }), a(0, n, "positionStartLifeTime", function() {
                return this._positionStartLifeTime;
            }), a(0, n, "velocity", function() {
                return this._velocity;
            }), a(0, n, "random0", function() {
                return this._randoms0;
            }), a(0, n, "startSize", function() {
                return this._startSize;
            }), a(0, n, "startColor", function() {
                return this._startColor;
            }), a(0, n, "startRotation0", function() {
                return this._startRotation0;
            }), a(0, n, "startRotation1", function() {
                return this._startRotation1;
            }), a(0, n, "startLifeTime", function() {
                return this._startLifeTime;
            }), a(0, n, "time", function() {
                return this._time;
            }), a(0, n, "startSpeed", function() {
                return this._startSpeed;
            }), a(0, n, "simulationWorldPostion", function() {
                return this._simulationWorldPostion;
            }), a(1, t, "vertexDeclaration", function() {
                return t._vertexDeclaration;
            }, laya.d3.graphics.Vertex.VertexShuriKenParticle._$SET_vertexDeclaration), i(t, ["_vertexDeclaration", function() {
                return this._vertexDeclaration = new ft(152, [new ze(0, "vector4", 0), new ze(16, "vector4", 4), new ze(32, "vector4", 5), new ze(48, "vector4", 6), new ze(64, "vector3", 8), new ze(76, "vector3", 9), new ze(88, "single", 10), new ze(92, "vector4", 11), new ze(108, "vector4", 12), new ze(124, "vector3", 13), new ze(136, "vector4", 14)]);
            }]), t;
        }(_e),
        wn = function(e) {
            function t() {
                t.__super.call(this), this._dynamicWorldPositionNormalNeedUpdate = !0;
            }
            r(t, "laya.d3.core.render.SubMeshRenderElement", e);
            var n = t.prototype;
            return n._onWorldMatrixChanged = function() {
                this._dynamicWorldPositionNormalNeedUpdate = !0;
            }, n._computeWorldPositionsAndNormals = function(e, t, n, i) {
                if (this._dynamicWorldPositionNormalNeedUpdate) {
                    for (var r = this._geometry, a = r._vertexBuffer, o = a.vertexDeclaration.vertexStride / 4, s = a.getData(), l = this._transform.worldMatrix, h = this._transform.rotation, u = r._indices, c = 0; i > c; c++) {
                        var _ = n ? u[c] : c,
                            d = _ * o,
                            f = 3 * c;
                        ke.transformVector3ArrayToVector3ArrayCoordinate(s, d + e, l, this._dynamicWorldPositions, f), -1 !== t && ke.transformVector3ArrayByQuat(s, d + t, h, this._dynamicWorldNormals, f);
                    }
                    this._dynamicWorldPositionNormalNeedUpdate = !1;
                }
            }, n.setTransform = function(e) {
                this._transform !== e && (this._transform && this._transform.off("transformchanged", this, this._onWorldMatrixChanged),
                    e && e.on("transformchanged", this, this._onWorldMatrixChanged), this._dynamicWorldPositionNormalNeedUpdate = !0,
                    this._transform = e);
            }, n.setGeometry = function(e) {
                if (this._geometry !== e) {
                    var t = e,
                        n = t._mesh;
                    if (n) {
                        var i = n._subMeshCount > 1,
                            r = i ? t._indexCount : n._vertexCount;
                        if (10 >= r) {
                            var a = 3 * r;
                            this._dynamicVertexBatch = !0, this._dynamicWorldPositions = new Float32Array(a),
                                this._dynamicWorldNormals = new Float32Array(a), this._dynamicVertexCount = r, this._dynamicMultiSubMesh = i;
                        } else this._dynamicVertexBatch = !1;
                    }
                    this._geometry = e;
                }
            }, n.addToOpaqueRenderQueue = function(e, t) {
                var n = this.staticBatch,
                    i = t.elements;
                if (n) {
                    var r = Sn.instance,
                        a = r.getBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, n._batchID);
                    if (r._updateCountMark === a.updateMark) {
                        var o = a.indexInList;
                        if (a.batched) i[o].staticBatchElementList.push(this);
                        else {
                            var s = i[o],
                                l = s.render,
                                h = r._getBatchRenderElementFromPool();
                            h.renderType = 1, h.setGeometry(n), h.material = s.material;
                            var u = n.batchOwner,
                                c = u ? u._transform : null;
                            h.setTransform(c), h.render = l;
                            var _ = h.staticBatchElementList;
                            _.length = 0, _.push(s), _.push(this), i[o] = h, a.batched = !0;
                        }
                    } else a.updateMark = r._updateCountMark, a.indexInList = i.length, a.batched = !1,
                        i.push(this);
                } else if (this.material._shader._enableInstancing && B._angleInstancedArrays) {
                    var d = this._geometry,
                        f = ln.instance,
                        m = f.getInstanceBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, d._id);
                    if (f._updateCountMark === m.updateMark) {
                        var p = m.indexInList;
                        if (m.batched) {
                            var T = i[p].instanceBatchElementList;
                            T.length === En.instance.maxInstanceCount ? (m.updateMark = f._updateCountMark,
                                m.indexInList = i.length, m.batched = !1, i.push(this)) : T.push(this);
                        } else {
                            var E = i[p],
                                v = E.render,
                                g = f._getBatchRenderElementFromPool();
                            g.renderType = 2, g.setGeometry(En.instance), g.material = E.material, g.setTransform(null),
                                g.render = v, g.instanceSubMesh = d;
                            var S = g.instanceBatchElementList;
                            S.length = 0, S.push(E), S.push(this), i[p] = g, m.batched = !0;
                        }
                    } else m.updateMark = f._updateCountMark, m.indexInList = i.length, m.batched = !1,
                        i.push(this);
                } else if (this._dynamicVertexBatch) {
                    var y = this._geometry._vertexBuffer.vertexDeclaration,
                        x = ln.instance,
                        D = x.getVertexBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, y.id);
                    if (x._updateCountMark === D.updateMark) {
                        var I = D.indexInList;
                        if (D.batched) i[I].vertexBatchElementList.push(this);
                        else {
                            var R = i[I],
                                M = R.render,
                                A = x._getBatchRenderElementFromPool();
                            A.renderType = 3, A.setGeometry(yn.instance), A.material = R.material, A.setTransform(null),
                                A.render = M, A.vertexBatchVertexDeclaration = y;
                            var C = A.vertexBatchElementList;
                            C.length = 0, C.push(R), C.push(this), i[I] = A, D.batched = !0;
                        }
                    } else D.updateMark = x._updateCountMark, D.indexInList = i.length, D.batched = !1,
                        i.push(this);
                } else i.push(this);
            }, n.addToTransparentRenderQueue = function(e, t) {
                var n = this.staticBatch,
                    i = t.elements;
                if (n) {
                    var r = Sn.instance,
                        a = t.lastTransparentRenderElement;
                    if (a) {
                        var o = a.render;
                        if (a._geometry._getType() !== this._geometry._getType() || a.staticBatch !== n || a.material !== this.material || o.receiveShadow !== this.render.receiveShadow || o.lightmapIndex !== this.render.lightmapIndex) i.push(this),
                            t.lastTransparentBatched = !1;
                        else {
                            if (t.lastTransparentBatched) i[i.length - 1].staticBatchElementList.push(this);
                            else {
                                var s = r._getBatchRenderElementFromPool();
                                s.renderType = 1, s.setGeometry(n), s.material = a.material;
                                var l = n.batchOwner,
                                    h = l ? l._transform : null;
                                s.setTransform(h), s.render = this.render;
                                var u = s.staticBatchElementList;
                                u.length = 0, u.push(a), u.push(this), i[i.length - 1] = s;
                            }
                            t.lastTransparentBatched = !0;
                        }
                    } else i.push(this), t.lastTransparentBatched = !1;
                } else if (this.material._shader._enableInstancing && B._angleInstancedArrays) {
                    var c = this._geometry,
                        _ = ln.instance,
                        d = t.lastTransparentRenderElement;
                    if (d) {
                        var f = d.render;
                        if (d._geometry._getType() !== this._geometry._getType() || d._geometry !== c || d.material !== this.material || f.receiveShadow !== this.render.receiveShadow || f.lightmapIndex !== this.render.lightmapIndex) i.push(this),
                            t.lastTransparentBatched = !1;
                        else {
                            if (t.lastTransparentBatched) i[i.length - 1].instanceBatchElementList.push(this);
                            else {
                                var m = _._getBatchRenderElementFromPool();
                                m.renderType = 2, m.setGeometry(En.instance), m.material = d.material, m.setTransform(null),
                                    m.render = this.render, m.instanceSubMesh = c;
                                var p = m.instanceBatchElementList;
                                p.length = 0, p.push(d), p.push(this), i[i.length - 1] = m;
                            }
                            t.lastTransparentBatched = !0;
                        }
                    } else i.push(this), t.lastTransparentBatched = !1;
                } else if (this._dynamicVertexBatch) {
                    var T = this._geometry._vertexBuffer.vertexDeclaration,
                        E = ln.instance,
                        v = t.lastTransparentRenderElement;
                    if (v) {
                        var g = v.render;
                        if (v._geometry._getType() !== this._geometry._getType() || v._geometry._vertexBuffer._vertexDeclaration !== T || v.material !== this.material || g.receiveShadow !== this.render.receiveShadow || g.lightmapIndex !== this.render.lightmapIndex) i.push(this),
                            t.lastTransparentBatched = !1;
                        else {
                            if (t.lastTransparentBatched) i[i.length - 1].vertexBatchElementList.push(this);
                            else {
                                var S = E._getBatchRenderElementFromPool();
                                S.renderType = 3, S.setGeometry(yn.instance), S.material = v.material, S.setTransform(null),
                                    S.render = this.render, S.vertexBatchVertexDeclaration = T;
                                var y = S.vertexBatchElementList;
                                y.length = 0, y.push(v), y.push(this), i[i.length - 1] = S;
                            }
                            t.lastTransparentBatched = !0;
                        }
                    } else i.push(this), t.lastTransparentBatched = !1;
                } else i.push(this);
                t.lastTransparentRenderElement = this;
            }, n.destroy = function() {
                e.prototype.destroy.call(this), this._dynamicWorldPositions = null, this._dynamicWorldNormals = null,
                    this.staticBatch = null, this.staticBatchElementList = null, this.vertexBatchElementList = null,
                    this.vertexBatchVertexDeclaration = null;
            }, t._maxInstanceCount = 1024, i(t, ["_instanceMatrixData", function() {
                return this._instanceMatrixData = new Float32Array(16 * t._maxInstanceCount);
            }, "_instanceMatrixBuffer", function() {
                return this._instanceMatrixBuffer = new Kt(4 * t._instanceMatrixData.length, 35048);
            }]), t;
        }(Ae),
        bn = function(e) {
            function t(e, n, i, r, a, o, s, l, h, u, c, _, d, f) {
                this._cornerTextureCoordinate = null, this._positionStartLifeTime = null, this._velocity = null,
                    this._startColor = null, this._startSize = null, this._startRotation0 = null, this._startRotation1 = null,
                    this._startRotation2 = null, this._startLifeTime = NaN, this._time = NaN, this._startSpeed = NaN,
                    this._randoms0 = null, this._randoms1 = null, this._simulationWorldPostion = null,
                    t.__super.call(this), this._cornerTextureCoordinate = e, this._positionStartLifeTime = n,
                    this._velocity = i, this._startColor = r, this._startSize = a, this._startRotation0 = o,
                    this._startRotation1 = s, this._startRotation2 = l, this._startLifeTime = h, this._time = u,
                    this._startSpeed = c, this._randoms0 = this.random0, this._randoms1 = this.random1,
                    this._simulationWorldPostion = f;
            }
            r(t, "laya.d3.graphics.Vertex.VertexShurikenParticleMesh", e);
            var n = t.prototype;
            return a(0, n, "cornerTextureCoordinate", function() {
                return this._cornerTextureCoordinate;
            }), a(0, n, "velocity", function() {
                return this._velocity;
            }), a(0, n, "position", function() {
                return this._positionStartLifeTime;
            }), a(0, n, "random0", function() {
                return this._randoms0;
            }), a(0, n, "startSize", function() {
                return this._startSize;
            }), a(0, n, "startColor", function() {
                return this._startColor;
            }), a(0, n, "startRotation0", function() {
                return this._startRotation0;
            }), a(0, n, "startRotation1", function() {
                return this._startRotation1;
            }), a(0, n, "random1", function() {
                return this._randoms1;
            }), a(0, n, "startRotation2", function() {
                return this._startRotation2;
            }), a(0, n, "startLifeTime", function() {
                return this._startLifeTime;
            }), a(0, n, "time", function() {
                return this._time;
            }), a(0, n, "startSpeed", function() {
                return this._startSpeed;
            }), a(0, n, "simulationWorldPostion", function() {
                return this._simulationWorldPostion;
            }), a(1, t, "vertexDeclaration", function() {
                return t._vertexDeclaration;
            }, laya.d3.graphics.Vertex.VertexShuriKenParticle._$SET_vertexDeclaration), i(t, ["_vertexDeclaration", function() {
                return this._vertexDeclaration = new ft(172, [new ze(0, "vector3", 1), new ze(12, "vector4", 2), new ze(28, "vector2", 3), new ze(36, "vector4", 4), new ze(52, "vector4", 5), new ze(68, "vector4", 6), new ze(84, "vector3", 8), new ze(96, "vector3", 9), new ze(108, "single", 10), new ze(112, "vector4", 11), new ze(128, "vector4", 12), new ze(144, "vector3", 13), new ze(156, "vector4", 14)]);
            }]), t;
        }(_e),
        Fn = function(e) {
            function t(e, n) {
                this._needProcessCollisions = !1, this._needProcessTriggers = !1, t.__super.call(this),
                    void 0 === n && (n = !1), this._id = ++t._uniqueIDCounter, this._transform = new Yt(this),
                    this._isStatic = n, this.layer = 0, this.name = e ? e : "New Sprite3D";
            }
            r(t, "laya.d3.core.Sprite3D", e);
            var o = t.prototype;
            return n.imps(o, {
                "laya.resource.ICreateResource": !0
            }), o._setCreateURL = function(e) {
                this._url = b.formatURL(e);
            }, o._changeAnimatorsToLinkSprite3D = function(e, t, n) {
                var i = this.getComponent(Zt);
                if (i && (i.avatar || e._changeAnimatorToLinkSprite3DNoAvatar(i, t, n)), this._parent && this._parent instanceof laya.d3.core.Sprite3D) {
                    n.unshift(this._parent.name);
                    var r = this._parent;
                    r._hierarchyAnimator && r._changeAnimatorsToLinkSprite3D(e, t, n);
                }
            }, o._setHierarchyAnimator = function(e, t) {
                this._changeHierarchyAnimator(e), this._changeAnimatorAvatar(e.avatar);
                for (var n = 0, i = this._children.length; i > n; n++) {
                    var r = this._children[n];
                    r._hierarchyAnimator == t && r._setHierarchyAnimator(e, t);
                }
            }, o._clearHierarchyAnimator = function(e, t) {
                this._changeHierarchyAnimator(t), this._changeAnimatorAvatar(t ? t.avatar : null);
                for (var n = 0, i = this._children.length; i > n; n++) {
                    var r = this._children[n];
                    r._hierarchyAnimator == e && r._clearHierarchyAnimator(e, t);
                }
            }, o._changeHierarchyAnimatorAvatar = function(e, t) {
                this._changeAnimatorAvatar(t);
                for (var n = 0, i = this._children.length; i > n; n++) {
                    var r = this._children[n];
                    r._hierarchyAnimator == e && r._changeHierarchyAnimatorAvatar(e, t);
                }
            }, o._changeAnimatorToLinkSprite3DNoAvatar = function(e, t, n) {
                e._handleSpriteOwnersBySprite(t, n, this);
                for (var i = 0, r = this._children.length; r > i; i++) {
                    var a = this._children[i],
                        o = n.length;
                    n.push(a.name), a._changeAnimatorToLinkSprite3DNoAvatar(e, t, n), n.splice(o, 1);
                }
            }, o._changeHierarchyAnimator = function(e) {
                this._hierarchyAnimator = e;
            }, o._changeAnimatorAvatar = function(e) {}, o._onAdded = function() {
                if (this._parent instanceof laya.d3.core.Sprite3D) {
                    var t = this._parent;
                    this.transform._setParent(t.transform), t._hierarchyAnimator && (!this._hierarchyAnimator && this._setHierarchyAnimator(t._hierarchyAnimator, null),
                        t._changeAnimatorsToLinkSprite3D(this, !0, [this.name]));
                }
                e.prototype._onAdded.call(this);
            }, o._onRemoved = function() {
                if (e.prototype._onRemoved.call(this), this._parent instanceof laya.d3.core.Sprite3D) {
                    var t = this._parent;
                    this.transform._setParent(null), t._hierarchyAnimator && (this._hierarchyAnimator == t._hierarchyAnimator && this._clearHierarchyAnimator(t._hierarchyAnimator, null),
                        t._changeAnimatorsToLinkSprite3D(this, !1, [this.name]));
                }
            }, o._parse = function(e, t) {
                if (void 0 !== e.isStatic && (this._isStatic = e.isStatic), void 0 !== e.active && (this.active = e.active),
                    void 0 != e.name && (this.name = e.name), void 0 !== e.position) {
                    var n = this.transform.localPosition;
                    n.fromArray(e.position), this.transform.localPosition = n;
                }
                if (void 0 !== e.rotationEuler) {
                    var i = this.transform.localRotationEuler;
                    i.fromArray(e.rotationEuler), this.transform.localRotationEuler = i;
                }
                if (void 0 !== e.rotation) {
                    var r = this.transform.localRotation;
                    r.fromArray(e.rotation), this.transform.localRotation = r;
                }
                if (void 0 !== e.scale) {
                    var a = this.transform.localScale;
                    a.fromArray(e.scale), this.transform.localScale = a;
                }
                void 0 != e.layer && (this.layer = e.layer);
            }, o._cloneTo = function(t, n, i) {
                if (this.destroyed) throw new Error("Sprite3D: Can't be cloned if the Sprite3D has destroyed.");
                var r = t;
                r.name = this.name, r.destroyed = this.destroyed, r.active = this.active;
                var a = r.transform.localPosition;
                this.transform.localPosition.cloneTo(a), r.transform.localPosition = a;
                var o = r.transform.localRotation;
                this.transform.localRotation.cloneTo(o), r.transform.localRotation = o;
                var s = r.transform.localScale;
                this.transform.localScale.cloneTo(s), r.transform.localScale = s, r._isStatic = this._isStatic,
                    r.layer = this.layer, e.prototype._cloneTo.call(this, r, n, i);
            }, o.clone = function() {
                var e = t._createSprite3DInstance(this);
                return t._parseSprite3DInstance(this, e, this, e), e;
            }, o.destroy = function(t) {
                void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                    this._transform = null, this._scripts = null, this._url && S.clearRes(this._url));
            }, a(0, o, "id", function() {
                return this._id;
            }), a(0, o, "url", function() {
                return this._url;
            }), a(0, o, "layer", function() {
                return this._layer;
            }, function(e) {
                if (this._layer !== e) {
                    if (!(e >= 0 && 30 >= e)) throw new Error("Layer value must be 0-30.");
                    this._layer = e;
                }
            }), a(0, o, "transform", function() {
                return this._transform;
            }), a(0, o, "isStatic", function() {
                return this._isStatic;
            }), t._parse = function(e, t, n) {
                var i, r = e.data,
                    a = [];
                switch (e.version) {
                    case "LAYAHIERARCHY:02":
                        i = ke._createNodeByJson02(r, a);
                        break;

                    default:
                        i = ke._createNodeByJson(r, a);
                }
                return q.combine(i, a), i;
            }, t.__init__ = function() {}, t.instantiate = function(e, t, n, i, r) {
                void 0 === n && (n = !0);
                var a = e.clone();
                t && t.addChild(a);
                var o = a.transform;
                if (n) {
                    var s = o.worldMatrix;
                    e.transform.worldMatrix.cloneTo(s), o.worldMatrix = s;
                } else i && (o.position = i), r && (o.rotation = r);
                return a;
            }, t.load = function(e, t) {
                n.loader.create(e, t, null, "HIERARCHY");
            }, t._createSprite3DInstance = function(e) {
                for (var n = new e.constructor(), i = e._children, r = 0, a = i.length; a > r; r++) {
                    var o = t._createSprite3DInstance(i[r]);
                    n.addChild(o);
                }
                return n;
            }, t._parseSprite3DInstance = function(e, n, i, r) {
                for (var a = i._children, o = r._children, s = 0, l = a.length; l > s; s++) t._parseSprite3DInstance(e, n, a[s], o[s]);
                i._cloneTo(r, e, n);
            }, t._uniqueIDCounter = 0, i(t, ["WORLDMATRIX", function() {
                return this.WORLDMATRIX = Ve.propertyNameToID("u_WorldMat");
            }, "MVPMATRIX", function() {
                return this.MVPMATRIX = Ve.propertyNameToID("u_MvpMatrix");
            }]), t;
        }(D),
        Bn = function(e) {
            function t() {
                this._shaderValues = null, t.__super.call(this), this._defineDatas = new Ue(), this._disablePublicDefineDatas = new Ue(),
                    this._shaderValues = new ue(this), this.renderQueue = 2e3, this._alphaTest = !1;
            }
            r(t, "laya.d3.core.material.BaseMaterial", e);
            var o = t.prototype;
            return n.imps(o, {
                    "laya.d3.core.IClone": !0
                }), o._removeTetxureReference = function() {
                    var e = this._shaderValues.getData();
                    for (var t in e) {
                        var n = e[t];
                        n && n instanceof laya.resource.BaseTexture && n._removeReference();
                    }
                }, o._addReference = function(t) {
                    void 0 === t && (t = 1), e.prototype._addReference.call(this, t);
                    var n = this._shaderValues.getData();
                    for (var i in n) {
                        var r = n[i];
                        r && r instanceof laya.resource.BaseTexture && r._addReference();
                    }
                }, o._removeReference = function(t) {
                    void 0 === t && (t = 1), e.prototype._removeReference.call(this, t), this._removeTetxureReference();
                }, o._disposeResource = function() {
                    this._referenceCount > 0 && this._removeTetxureReference(), this._shaderValues = null;
                }, o.setShaderName = function(e) {
                    if (this._shader = Ve.find(e), !this._shader) throw new Error("BaseMaterial: unknown shader name.");
                }, o.cloneTo = function(e) {
                    var t = e;
                    t.name = this.name, t.renderQueue = this.renderQueue, this._disablePublicDefineDatas.cloneTo(t._disablePublicDefineDatas),
                        this._defineDatas.cloneTo(t._defineDatas), this._shaderValues.cloneTo(t._shaderValues);
                }, o.clone = function() {
                    var e = new this.constructor();
                    return this.cloneTo(e), e;
                }, a(0, o, "alphaTestValue", function() {
                    return this._shaderValues.getNumber(t.ALPHATESTVALUE);
                }, function(e) {
                    this._shaderValues.setNumber(t.ALPHATESTVALUE, e);
                }), a(0, o, "alphaTest", function() {
                    return this._alphaTest;
                }, function(e) {
                    this._alphaTest = e, e ? this._defineDatas.add(laya.d3.core.material.BaseMaterial.SHADERDEFINE_ALPHATEST) : this._defineDatas.remove(laya.d3.core.material.BaseMaterial.SHADERDEFINE_ALPHATEST);
                }), t.load = function(e, t) {
                    n.loader.create(e, t, null, "MATERIAL");
                }, t.__init__ = function() {
                    t.SHADERDEFINE_ALPHATEST = t.shaderDefines.registerDefine("ALPHATEST");
                }, t._parse = function(e, t, n) {
                    var i, r = e,
                        a = r.props,
                        o = a.type,
                        s = o.split("."),
                        h = l.window;
                    if (s.forEach(function(e) {
                            h = h[e];
                        }), "function" != typeof h) throw "_getSprite3DHierarchyInnerUrls 错误: " + e.type + " 不是类";
                    switch (i = new h(), r.version) {
                        case "LAYAMATERIAL:01":
                        case "LAYAMATERIAL:02":
                            var u = 0,
                                c = 0;
                            for (var _ in a) switch (_) {
                                case "vectors":
                                    var d = a[_];
                                    for (u = 0, c = d.length; c > u; u++) {
                                        var f = d[u],
                                            m = f.value;
                                        switch (m.length) {
                                            case 2:
                                                i[f.name] = new Ee(m[0], m[1]);
                                                break;

                                            case 3:
                                                i[f.name] = new Te(m[0], m[1], m[2]);
                                                break;

                                            case 4:
                                                i[f.name] = new me(m[0], m[1], m[2], m[3]);
                                                break;

                                            default:
                                                throw new Error("BaseMaterial:unkonwn color length.");
                                        }
                                    }
                                    break;

                                case "textures":
                                    var p = a[_];
                                    for (u = 0, c = p.length; c > u; u++) {
                                        var T = p[u],
                                            E = T.path;
                                        E && (i[T.name] = S.getRes(E));
                                    }
                                    break;

                                case "defines":
                                    var v = a[_];
                                    for (u = 0, c = v.length; c > u; u++) {
                                        var g = i._shader.getSubShaderAt(0).getMaterialDefineByName(v[u]);
                                        i._defineDatas.add(g);
                                    }
                                    break;

                                case "renderStates":
                                    var y = a[_],
                                        x = y[0],
                                        D = i;
                                    D.blend = x.blend, D.cull = x.cull, D.depthTest = x.depthTest, D.depthWrite = x.depthWrite,
                                        D.blendSrc = x.srcBlend, D.blendDst = x.dstBlend;
                                    break;

                                case "cull":
                                    i.cull = a[_];
                                    break;

                                case "blend":
                                    i.blend = a[_];
                                    break;

                                case "depthWrite":
                                    i.depthWrite = a[_];
                                    break;

                                case "srcBlend":
                                    i.blendSrc = a[_];
                                    break;

                                case "dstBlend":
                                    i.blendDst = a[_];
                                    break;

                                default:
                                    i[_] = a[_];
                            }
                            break;

                        default:
                            throw new Error("BaseMaterial:unkonwn version.");
                    }
                    return i;
                }, t.RENDERQUEUE_OPAQUE = 2e3, t.RENDERQUEUE_ALPHATEST = 2450, t.RENDERQUEUE_TRANSPARENT = 3e3,
                t.SHADERDEFINE_ALPHATEST = 0, i(t, ["ALPHATESTVALUE", function() {
                    return this.ALPHATESTVALUE = Ve.propertyNameToID("u_AlphaTestValue");
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe();
                }]), t;
        }(M),
        Un = function(e) {
            function t() {
                this._vertexBuffer = null, t.__super.call(this), this._bufferState = new Jt(), this._vertexBuffer = new Kt(64, 35044, !1),
                    this._vertexBuffer.vertexDeclaration = laya.d3.core.render.ScreenQuad._vertexDeclaration,
                    this._vertexBuffer.setData(t._vertices), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer),
                    this._bufferState.unBind(), this._setGPUMemory(this._vertexBuffer._byteLength);
            }
            r(t, "laya.d3.core.render.ScreenQuad", e);
            var n = t.prototype;
            return n.render = function() {
                this._bufferState.bind(), v.instance.drawArrays(5, 0, 4), N.renderBatches++;
            }, n.destroy = function() {
                e.prototype.destroy.call(this), this._bufferState.destroy(), this._vertexBuffer.destroy(),
                    this._setGPUMemory(0);
            }, t.__init__ = function() {
                t.instance = new t(), t.instance.lock = !0;
            }, t.SCREENQUAD_POSITION_UV = 0, t.instance = null, i(t, ["_vertexDeclaration", function() {
                return this._vertexDeclaration = new ft(16, [new ze(0, "vector4", 0)]);
            }, "_vertices", function() {
                return this._vertices = new Float32Array([1, 1, 1, 0, 1, -1, 1, 1, -1, 1, 0, 0, -1, -1, 0, 1]);
            }]), t;
        }(M),
        zn = function(e) {
            function t() {
                this._rootNode = null, this._nativeNodeCount = 0, this._nativeCurCloneCount = 0,
                    t.__super.call(this);
            }
            r(t, "laya.d3.core.Avatar", e);
            var i = t.prototype;
            return n.imps(i, {
                "laya.d3.core.IClone": !0
            }), i._initCloneToAnimator = function(e, t) {
                t._avatarNodeMap[e.name] = e;
                for (var n = 0, i = e.getChildCount(); i > n; n++) this._initCloneToAnimator(e.getChildByIndex(n), t);
            }, i._parseNode = function(e, t) {
                var n = e.props.name;
                t.name = n;
                var i = e.props,
                    r = t.transform,
                    a = r.localPosition,
                    o = r.localRotation,
                    s = r.localScale;
                a.fromArray(i.translate), o.fromArray(i.rotation), s.fromArray(i.scale), r.localPosition = a,
                    r.localRotation = o, r.localScale = s;
                for (var l = e.child, h = 0, u = l.length; u > h; h++) {
                    var c = l[h],
                        _ = new It(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16));
                    t.addChild(_), R.supportWebGLPlusAnimation && this._nativeNodeCount++, this._parseNode(c, _);
                }
            }, i._cloneDatasToAnimator = function(e) {
                var t;
                t = this._rootNode.clone();
                var n = this._rootNode.transform,
                    i = t.transform,
                    r = i.localPosition,
                    a = i.localRotation,
                    o = i.localScale;
                n.localPosition.cloneTo(r), n.localRotation.cloneTo(a), n.localScale.cloneTo(o),
                    i.localPosition = r, i.localRotation = a, i.localScale = o, e._avatarNodeMap = {},
                    this._initCloneToAnimator(t, e);
            }, i.cloneTo = function(e) {
                var t = e,
                    n = this._rootNode.clone();
                t._rootNode = n;
            }, i.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, i._cloneDatasToAnimatorNative = function(e) {
                var t = new Float32Array(3 * this._nativeNodeCount),
                    n = new Float32Array(4 * this._nativeNodeCount),
                    i = new Float32Array(3 * this._nativeNodeCount),
                    r = new Float32Array(16 * this._nativeNodeCount),
                    a = new Int16Array(this._nativeNodeCount);
                e._animationNodeLocalPositions = t, e._animationNodeLocalRotations = n, e._animationNodeLocalScales = i,
                    e._animationNodeWorldMatrixs = r, e._animationNodeParentIndices = a, this._nativeCurCloneCount = 0;
                var o = this._rootNode._cloneNative(t, n, i, r, a, -1, this),
                    s = this._rootNode.transform,
                    l = o.transform,
                    h = l.localPosition,
                    u = l.localRotation,
                    c = l.localScale;
                s.localPosition.cloneTo(h), s.localRotation.cloneTo(u), s.localScale.cloneTo(c),
                    l.localPosition = h, l.localRotation = u, l.localScale = c, e._avatarNodeMap = {},
                    this._initCloneToAnimator(o, e);
            }, t._parse = function(e, n, i) {
                var r = new t();
                if (r._rootNode = new It(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16)),
                    R.supportWebGLPlusAnimation && r._nativeNodeCount++, e.version) {
                    var a = e.rootNode;
                    a && r._parseNode(a, r._rootNode);
                }
                return r;
            }, t.load = function(e, t) {
                n.loader.create(e, t, null, "AVATAR");
            }, t;
        }(M),
        Gn = function(e) {
            function t() {
                this._nativeTriangleMesh = null, this._bounds = null, this._subMeshCount = 0, this._subMeshes = null,
                    this._vertexBuffers = null, this._indexBuffer = null, this._boneNames = null, this._inverseBindPoses = null,
                    this._inverseBindPosesBuffer = null, this._bindPoseIndices = null, this._skinDataPathMarks = null,
                    this._vertexCount = 0, this._tempVector30 = new Te(), this._tempVector31 = new Te(),
                    this._tempVector32 = new Te(), this._bufferState = new Jt(), this._instanceBufferState = new Jt(),
                    t.__super.call(this), this._subMeshes = [], this._vertexBuffers = [], this._skinDataPathMarks = [];
            }
            r(t, "laya.d3.resource.models.Mesh", e);
            var s = t.prototype;
            return n.imps(s, {
                "laya.d3.core.IClone": !0
            }), s._getPositionElement = function(e) {
                for (var t = e.vertexDeclaration.vertexElements, n = 0, i = t.length; i > n; n++) {
                    var r = t[n];
                    if ("vector3" === r.elementFormat && 0 === r.elementUsage) return r;
                }
                return null;
            }, s._generateBoundingObject = function() {
                var e = this._tempVector30,
                    t = this._tempVector31;
                e.x = e.y = e.z = Number.MAX_VALUE, t.x = t.y = t.z = -Number.MAX_VALUE;
                for (var n = this._vertexBuffers.length, i = 0; n > i; i++)
                    for (var r = this._vertexBuffers[i], a = this._getPositionElement(r), o = r.getData(), s = r.vertexDeclaration.vertexStride / 4, l = a.offset / 4, h = 0, u = o.length; u > h; h += s) {
                        var c = h + l,
                            _ = o[c],
                            d = o[c + 1],
                            f = o[c + 2];
                        e.x = Math.min(e.x, _), e.y = Math.min(e.y, d), e.z = Math.min(e.z, f), t.x = Math.max(t.x, _),
                            t.y = Math.max(t.y, d), t.z = Math.max(t.z, f);
                    }
                this._bounds = new xt(e, t);
            }, s._setSubMeshes = function(e) {
                this._subMeshes = e, this._subMeshCount = e.length;
                for (var t = 0; t < this._subMeshCount; t++) e[t]._indexInMesh = t;
                this._generateBoundingObject();
            }, s._getSubMesh = function(e) {
                return this._subMeshes[e];
            }, s._setBuffer = function(e, t) {
                var n = this._bufferState;
                n.bind(), n.applyVertexBuffers(e), n.applyIndexBuffer(t), n.unBind();
                var i = this._instanceBufferState;
                i.bind(), i.applyVertexBuffers(e), i.applyInstanceVertexBuffer(En.instance.instanceWorldMatrixBuffer),
                    i.applyInstanceVertexBuffer(En.instance.instanceMVPMatrixBuffer), i.applyIndexBuffer(t),
                    i.unBind();
            }, s._disposeResource = function() {
                for (var e = 0, t = this._subMeshes.length; t > e; e++) this._subMeshes[e].destroy();
                for (this._nativeTriangleMesh && W._physics3D.destroy(this._nativeTriangleMesh),
                    e = 0, t = this._vertexBuffers.length; t > e; e++) this._vertexBuffers[e].destroy();
                this._indexBuffer.destroy(), this._setCPUMemory(0), this._setGPUMemory(0), this._bufferState.destroy(),
                    this._instanceBufferState.destroy(), this._bufferState = null, this._instanceBufferState = null,
                    this._vertexBuffers = null, this._indexBuffer = null, this._subMeshes = null, this._nativeTriangleMesh = null,
                    this._vertexBuffers = null, this._indexBuffer = null, this._boneNames = null, this._inverseBindPoses = null;
            }, s._getPhysicMesh = function() {
                if (!this._nativeTriangleMesh) {
                    for (var e = W._physics3D, n = new e.btTriangleMesh(), i = t._nativeTempVector30, r = t._nativeTempVector31, a = t._nativeTempVector32, o = this._tempVector30, s = this._tempVector31, l = this._tempVector32, h = this._vertexBuffers[0], u = this._getPositionElement(h), c = h.getData(), _ = h.vertexDeclaration.vertexStride / 4, d = u.offset / 4, f = this._indexBuffer.getData(), m = 0, p = f.length; p > m; m += 3) {
                        var T = f[m] * _ + d,
                            E = f[m + 1] * _ + d,
                            v = f[m + 2] * _ + d;
                        o.setValue(c[T], c[T + 1], c[T + 2]), s.setValue(c[E], c[E + 1], c[E + 2]), l.setValue(c[v], c[v + 1], c[v + 2]),
                            ke._convertToBulletVec3(o, i, !0), ke._convertToBulletVec3(s, r, !0), ke._convertToBulletVec3(l, a, !0),
                            n.addTriangle(i, r, a, !0);
                    }
                    this._nativeTriangleMesh = n;
                }
                return this._nativeTriangleMesh;
            }, s.cloneTo = function(e) {
                for (var t = e, n = 0; n < this._vertexBuffers.length; n++) {
                    var i = this._vertexBuffers[n],
                        r = new Kt(i._byteLength, i.bufferUsage, i.canRead);
                    r.vertexDeclaration = i.vertexDeclaration, r.setData(i.getData().slice()), t._vertexBuffers.push(r),
                        t._vertexCount += r.vertexCount;
                }
                var a = this._indexBuffer,
                    s = new qt("ushort", a.indexCount, a.bufferUsage, a.canRead);
                s.setData(a.getData().slice()), t._indexBuffer = s, t._setBuffer(t._vertexBuffers, s),
                    t._setCPUMemory(this.cpuMemory), t._setGPUMemory(this.gpuMemory);
                var l = this._boneNames,
                    h = t._boneNames = o(l.length);
                for (n = 0; n < l.length; n++) h[n] = l[n];
                var u = this._inverseBindPoses,
                    c = t._inverseBindPoses = o(u.length);
                for (n = 0; n < u.length; n++) c[n] = u[n];
                for (t._bindPoseIndices = new Uint16Array(this._bindPoseIndices), n = 0; n < this._skinDataPathMarks.length; n++) t._skinDataPathMarks[n] = this._skinDataPathMarks[n].slice();
                for (n = 0; n < this.subMeshCount; n++) {
                    var _ = this._subMeshes[n],
                        d = _._subIndexBufferStart,
                        f = _._subIndexBufferCount,
                        m = _._boneIndicesList,
                        p = new on(t);
                    p._subIndexBufferStart.length = d.length, p._subIndexBufferCount.length = f.length,
                        p._boneIndicesList.length = m.length;
                    for (var T = 0; T < d.length; T++) p._subIndexBufferStart[T] = d[T];
                    for (T = 0; T < f.length; T++) p._subIndexBufferCount[T] = f[T];
                    for (T = 0; T < m.length; T++) p._boneIndicesList[T] = new Uint16Array(m[T]);
                    p._indexBuffer = s, p._indexStart = _._indexStart, p._indexCount = _._indexCount,
                        p._indices = new Uint16Array(s.getData().buffer, 2 * _._indexStart, _._indexCount);
                    var E = t._vertexBuffers[0];
                    p._vertexBuffer = E, t._subMeshes.push(p);
                }
                t._setSubMeshes(t._subMeshes);
            }, s.clone = function() {
                var e = new this.constructor();
                return this.cloneTo(e), e;
            }, a(0, s, "inverseAbsoluteBindPoses", function() {
                return this._inverseBindPoses;
            }), a(0, s, "vertexCount", function() {
                return this._vertexCount;
            }), a(0, s, "subMeshCount", function() {
                return this._subMeshCount;
            }), a(0, s, "bounds", function() {
                return this._bounds;
            }), t._parse = function(e, n, i) {
                var r = new t();
                return Se.read(e, r, r._subMeshes), r;
            }, t.load = function(e, t) {
                n.loader.create(e, t, null, "MESH");
            }, i(t, ["_nativeTempVector30", function() {
                return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
            }, "_nativeTempVector31", function() {
                return this._nativeTempVector31 = new W._physics3D.btVector3(0, 0, 0);
            }, "_nativeTempVector32", function() {
                return this._nativeTempVector32 = new W._physics3D.btVector3(0, 0, 0);
            }]), t;
        }(M),
        Hn = function(e) {
            function t(e, n, i, r) {
                this._terrainHeightData = null, this._width = 0, this._height = 0, this._bitType = 0,
                    this._value = NaN, t.__super.call(this), this._width = e, this._height = n, this._bitType = i,
                    this._value = r;
            }
            return r(t, "laya.d3.terrain.TerrainHeightData", e), t._pharse = function(e, n, i) {
                var r, a = new t(i[0], i[1], i[2], i[3]),
                    o = NaN;
                8 == a._bitType ? (r = new Uint8Array(e), o = 1 / 255) : 16 == a._bitType && (r = new Int16Array(e),
                    o = 1 / 32766), a._terrainHeightData = new Float32Array(a._height * a._width);
                for (var s = 0, l = a._height * a._width; l > s; s++) a._terrainHeightData[s] = r[s] * o * a._value / 2;
            }, t.load = function(e, t, i, r, a, o) {
                n.loader.create(e, t, null, "TERRAINHEIGHTDATA", [i, r, a, o], null, 1, !1);
            }, t;
        }(M),
        kn = function(e) {
            function t() {
                t.__super.call(this), this._nodes = new Qe(), this._events = [];
            }
            r(t, "laya.d3.animation.AnimationClip", e);
            var a = t.prototype;
            return a.duration = function() {
                return this._duration;
            }, a._hermiteInterpolate = function(e, t, n, i) {
                var r = e.outTangent,
                    a = t.inTangent;
                if (Number.isFinite(r) && Number.isFinite(a)) {
                    var o = n * n,
                        s = o * n,
                        l = 2 * s - 3 * o + 1,
                        h = s - 2 * o + n,
                        u = s - o,
                        c = -2 * s + 3 * o;
                    return l * e.value + h * r * i + u * a * i + c * t.value;
                }
                return e.value;
            }, a._hermiteInterpolateVector3 = function(e, t, n, i, r) {
                var a = e.value,
                    o = e.outTangent,
                    s = t.value,
                    l = t.inTangent,
                    h = n * n,
                    u = h * n,
                    c = 2 * u - 3 * h + 1,
                    _ = u - 2 * h + n,
                    d = u - h,
                    f = -2 * u + 3 * h,
                    m = o.x,
                    p = l.x;
                Number.isFinite(m) && Number.isFinite(p) ? r.x = c * a.x + _ * m * i + d * p * i + f * s.x : r.x = a.x,
                    m = o.y, p = l.y, Number.isFinite(m) && Number.isFinite(p) ? r.y = c * a.y + _ * m * i + d * p * i + f * s.y : r.y = a.y,
                    m = o.z, p = l.z, Number.isFinite(m) && Number.isFinite(p) ? r.z = c * a.z + _ * m * i + d * p * i + f * s.z : r.z = a.z;
            }, a._hermiteInterpolateQuaternion = function(e, t, n, i, r) {
                var a = e.value,
                    o = e.outTangent,
                    s = t.value,
                    l = t.inTangent,
                    h = n * n,
                    u = h * n,
                    c = 2 * u - 3 * h + 1,
                    _ = u - 2 * h + n,
                    d = u - h,
                    f = -2 * u + 3 * h,
                    m = o.x,
                    p = l.x;
                Number.isFinite(m) && Number.isFinite(p) ? r.x = c * a.x + _ * m * i + d * p * i + f * s.x : r.x = a.x,
                    m = o.y, p = l.y, Number.isFinite(m) && Number.isFinite(p) ? r.y = c * a.y + _ * m * i + d * p * i + f * s.y : r.y = a.y,
                    m = o.z, p = l.z, Number.isFinite(m) && Number.isFinite(p) ? r.z = c * a.z + _ * m * i + d * p * i + f * s.z : r.z = a.z,
                    m = o.w, p = l.w, Number.isFinite(m) && Number.isFinite(p) ? r.w = c * a.w + _ * m * i + d * p * i + f * s.w : r.w = a.w;
            }, a._evaluateClipDatasRealTime = function(e, n, i, r, a) {
                for (var o = 0, s = e.count; s > o; o++) {
                    var l = e.getNodeByIndex(o),
                        h = l.type,
                        u = 0,
                        c = l._keyFrames,
                        _ = c.length,
                        d = i[o];
                    if (a)
                        for (-1 !== d && n < c[d].time && (d = -1, i[o] = d), u = d + 1; _ > u && !(c[u].time > n);) d++,
                            u++, i[o] = d;
                    else
                        for (u = d + 1, u !== _ && n > c[u].time && (d = _ - 1, i[o] = d),
                            u = d + 1; d > -1 && !(c[d].time < n);) d--, u--, i[o] = d;
                    var f = u === _;
                    switch (h) {
                        case 0:
                            if (-1 !== d) {
                                var m = c[d];
                                if (f) l.data = m.value;
                                else {
                                    var p = c[u],
                                        T = p.time - m.time,
                                        E = NaN;
                                    E = 0 !== T ? (n - m.time) / T : 0, l.data = this._hermiteInterpolate(m, p, E, T);
                                }
                            } else l.data = c[0].value;
                            r && (l.data -= c[0].value);
                            break;

                        case 1:
                        case 4:
                            var v = l.data;
                            if (this._evaluateFrameNodeVector3DatasRealTime(c, d, f, n, v), r) {
                                var g = c[0].value;
                                v.x -= g.x, v.y -= g.y, v.z -= g.z;
                            }
                            break;

                        case 2:
                            var S = l.data;
                            if (this._evaluateFrameNodeQuaternionDatasRealTime(c, d, f, n, S), r) {
                                var y = t._tempQuaternion0,
                                    x = c[0].value;
                                ke.quaternionConjugate(x, y), he.multiply(y, S, S);
                            }
                            break;

                        case 3:
                            v = l.data, this._evaluateFrameNodeVector3DatasRealTime(c, d, f, n, v), r && (g = c[0].value,
                                v.x /= g.x, v.y /= g.y, v.z /= g.z);
                            break;

                        default:
                            throw "AnimationClip:unknown node type.";
                    }
                }
            }, a._evaluateClipDatasRealTimeForNative = function(e, t, n, i) {
                v.instance.evaluateClipDatasRealTime(e._nativeObj, t, n, i);
            }, a._evaluateFrameNodeVector3DatasRealTime = function(e, t, n, i, r) {
                if (-1 !== t) {
                    var a = e[t];
                    if (n) {
                        var o = a.value;
                        r.x = o.x, r.y = o.y, r.z = o.z;
                    } else {
                        var s = e[t + 1],
                            l = NaN,
                            h = a.time,
                            u = s.time - h;
                        l = 0 !== u ? (i - h) / u : 0, this._hermiteInterpolateVector3(a, s, l, u, r);
                    }
                } else {
                    var c = e[0].value;
                    r.x = c.x, r.y = c.y, r.z = c.z;
                }
            }, a._evaluateFrameNodeQuaternionDatasRealTime = function(e, t, n, i, r) {
                if (-1 !== t) {
                    var a = e[t];
                    if (n) {
                        var o = a.value;
                        r.x = o.x, r.y = o.y, r.z = o.z, r.w = o.w;
                    } else {
                        var s = e[t + 1],
                            l = NaN,
                            h = a.time,
                            u = s.time - h;
                        l = 0 !== u ? (i - h) / u : 0, this._hermiteInterpolateQuaternion(a, s, l, u, r);
                    }
                } else {
                    var c = e[0].value;
                    r.x = c.x, r.y = c.y, r.z = c.z, r.w = c.w;
                }
            }, a._binarySearchEventIndex = function(e) {
                for (var t = 0, n = this._events.length - 1, i = 0; n >= t;) {
                    i = Math.floor((t + n) / 2);
                    var r = this._events[i].time;
                    if (r == e) return i;
                    r > e ? n = i - 1 : t = i + 1;
                }
                return t;
            }, a.addEvent = function(e) {
                var t = this._binarySearchEventIndex(e.time);
                this._events.splice(t, 0, e);
            }, a._disposeResource = function() {
                this._nodes = null, this._nodesMap = null;
            }, t._parse = function(e, n, i) {
                var r = new t(),
                    a = new c(e),
                    o = a.readUTFString();
                switch (o) {
                    case "LAYAANIMATION:03":
                        Be.parse(r, a);
                        break;

                    case "LAYAANIMATION:04":
                    case "LAYAANIMATION:COMPRESSION_04":
                        Fe.parse(r, a, o);
                        break;

                    default:
                        throw "unknown animationClip version.";
                }
                return r;
            }, t.load = function(e, t) {
                n.loader.create(e, t, null, "ANIMATIONCLIP");
            }, i(t, ["_tempQuaternion0", function() {
                return this._tempQuaternion0 = new he();
            }]), t;
        }(M),
        Xn = function(e) {
            function t(e, n, i, r, a) {
                this._stateParamsMap = [], this._uploadMark = -1, this._uploadRenderType = -1, t.__super.call(this),
                    this._vs = e, this._ps = n, this._attributeMap = i, this._uniformMap = r, this._shaderPass = a,
                    this._create(), this.lock = !0;
            }
            r(t, "laya.d3.shader.ShaderInstance", e);
            var n = t.prototype;
            return n._create = function() {
                var e = v.instance;
                this._program = e.createProgram(), this._vshader = this._createShader(e, this._vs, 35633),
                    this._pshader = this._createShader(e, this._ps, 35632), e.attachShader(this._program, this._vshader),
                    e.attachShader(this._program, this._pshader);
                for (var t in this._attributeMap) e.bindAttribLocation(this._program, this._attributeMap[t], t);
                if (e.linkProgram(this._program), !R.isConchApp && Ve.debugMode && !e.getProgramParameter(this._program, 35714)) throw e.getProgramInfoLog(this._program);
                var n = [],
                    i = [],
                    r = [],
                    a = [],
                    o = [];
                this._customUniformParamsMap = [];
                var s = e.getProgramParameter(this._program, 35718);
                B.useProgram(e, this._program), this._curActTexIndex = 0;
                var l, h = 0,
                    u = 0;
                for (h = 0; s > h; h++) {
                    var c = e.getActiveUniform(this._program, h),
                        _ = c.name;
                    l = new gt(), l.location = e.getUniformLocation(this._program, _), _.indexOf("[0]") > 0 ? (l.name = _ = _.substr(0, _.length - 3),
                        l.isArray = !0) : (l.name = _, l.isArray = !1), l.type = c.type, this._addShaderUnifiormFun(l);
                    var d = this._uniformMap[_];
                    if (null != d) switch (l.dataOffset = Ve.propertyNameToID(_), d) {
                        case 0:
                            o.push(l);
                            break;

                        case 1:
                            a.push(l);
                            break;

                        case 2:
                            r.push(l);
                            break;

                        case 3:
                            i.push(l);
                            break;

                        case 4:
                            n.push(l);
                            break;

                        default:
                            throw new Error("Shader3D: period is unkonw.");
                    }
                }
                for (this._sceneUniformParamsMap = v.instance.createCommandEncoder(4 * n.length * 5 + 4, 64, !0),
                    h = 0, u = n.length; u > h; h++) this._sceneUniformParamsMap.addShaderUniform(n[h]);
                for (this._cameraUniformParamsMap = v.instance.createCommandEncoder(4 * i.length * 5 + 4, 64, !0),
                    h = 0, u = i.length; u > h; h++) this._cameraUniformParamsMap.addShaderUniform(i[h]);
                for (this._spriteUniformParamsMap = v.instance.createCommandEncoder(4 * r.length * 5 + 4, 64, !0),
                    h = 0, u = r.length; u > h; h++) this._spriteUniformParamsMap.addShaderUniform(r[h]);
                for (this._materialUniformParamsMap = v.instance.createCommandEncoder(4 * a.length * 5 + 4, 64, !0),
                    h = 0, u = a.length; u > h; h++) this._materialUniformParamsMap.addShaderUniform(a[h]);
                for (this._customUniformParamsMap.length = o.length, h = 0, u = o.length; u > h; h++) {
                    var f = o[h];
                    this._customUniformParamsMap[f.dataOffset] = f;
                }
                var m = this._shaderPass._stateMap;
                for (var p in m) this._stateParamsMap[m[p]] = Ve.propertyNameToID(p);
            }, n._getRenderState = function(e, t) {
                var n = this._stateParamsMap[t];
                return null == n ? null : e[n];
            }, n._disposeResource = function() {
                v.instance.deleteShader(this._vshader), v.instance.deleteShader(this._pshader),
                    v.instance.deleteProgram(this._program), this._vshader = this._pshader = this._program = null,
                    this._setGPUMemory(0), this._curActTexIndex = 0;
            }, n._addShaderUnifiormFun = function(e) {
                var t = v.instance;
                e.caller = this;
                var n = e.isArray;
                switch (e.type) {
                    case 35670:
                        e.fun = this._uniform1i, e.uploadedValue = new Array(1);
                        break;

                    case 5124:
                        e.fun = n ? this._uniform1iv : this._uniform1i, e.uploadedValue = new Array(1);
                        break;

                    case 5126:
                        e.fun = n ? this._uniform1fv : this._uniform1f, e.uploadedValue = new Array(1);
                        break;

                    case 35664:
                        e.fun = n ? this._uniform_vec2v : this._uniform_vec2, e.uploadedValue = new Array(2);
                        break;

                    case 35665:
                        e.fun = n ? this._uniform_vec3v : this._uniform_vec3, e.uploadedValue = new Array(3);
                        break;

                    case 35666:
                        e.fun = n ? this._uniform_vec4v : this._uniform_vec4, e.uploadedValue = new Array(4);
                        break;

                    case 35674:
                        e.fun = this._uniformMatrix2fv;
                        break;

                    case 35675:
                        e.fun = this._uniformMatrix3fv;
                        break;

                    case 35676:
                        e.fun = n ? this._uniformMatrix4fv : this._uniformMatrix4f;
                        break;

                    case 35678:
                        t.uniform1i(e.location, this._curActTexIndex), e.textureID = B._glTextureIDs[this._curActTexIndex++],
                            e.fun = this._uniform_sampler2D;
                        break;

                    case 35679:
                        t.uniform1i(e.location, this._curActTexIndex), e.textureID = B._glTextureIDs[this._curActTexIndex++],
                            e.fun = this._uniform_sampler3D;
                        break;

                    case 35680:
                        t.uniform1i(e.location, this._curActTexIndex), e.textureID = B._glTextureIDs[this._curActTexIndex++],
                            e.fun = this._uniform_samplerCube;
                        break;

                    default:
                        throw new Error("compile shader err!");
                }
            }, n._createShader = function(e, t, n) {
                var i = e.createShader(n);
                if (e.shaderSource(i, t), e.compileShader(i), Ve.debugMode && !e.getShaderParameter(i, 35713)) throw e.getShaderInfoLog(i);
                return i;
            }, n._uniform1f = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t ? (v.instance.uniform1f(e.location, n[0] = t), 1) : 0;
            }, n._uniform1fv = function(e, t) {
                if (t.length < 4) {
                    var n = e.uploadedValue;
                    return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] || n[3] !== t[3] ? (v.instance.uniform1fv(e.location, t),
                        n[0] = t[0], n[1] = t[1], n[2] = t[2], n[3] = t[3], 1) : 0;
                }
                return v.instance.uniform1fv(e.location, t), 1;
            }, n._uniform_vec2 = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t.x || n[1] !== t.y ? (v.instance.uniform2f(e.location, n[0] = t.x, n[1] = t.y),
                    1) : 0;
            }, n._uniform_vec2v = function(e, t) {
                if (t.length < 2) {
                    var n = e.uploadedValue;
                    return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] || n[3] !== t[3] ? (v.instance.uniform2fv(e.location, t),
                        n[0] = t[0], n[1] = t[1], n[2] = t[2], n[3] = t[3], 1) : 0;
                }
                return v.instance.uniform2fv(e.location, t), 1;
            }, n._uniform_vec3 = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t.x || n[1] !== t.y || n[2] !== t.z ? (v.instance.uniform3f(e.location, n[0] = t.x, n[1] = t.y, n[2] = t.z),
                    1) : 0;
            }, n._uniform_vec3v = function(e, t) {
                return v.instance.uniform3fv(e.location, t), 1;
            }, n._uniform_vec4 = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t.x || n[1] !== t.y || n[2] !== t.z || n[3] !== t.w ? (v.instance.uniform4f(e.location, n[0] = t.x, n[1] = t.y, n[2] = t.z, n[3] = t.w),
                    1) : 0;
            }, n._uniform_vec4v = function(e, t) {
                return v.instance.uniform4fv(e.location, t), 1;
            }, n._uniformMatrix2fv = function(e, t) {
                return v.instance.uniformMatrix2fv(e.location, !1, t), 1;
            }, n._uniformMatrix3fv = function(e, t) {
                return v.instance.uniformMatrix3fv(e.location, !1, t), 1;
            }, n._uniformMatrix4f = function(e, t) {
                var n = t.elements;
                return v.instance.uniformMatrix4fv(e.location, !1, n), 1;
            }, n._uniformMatrix4fv = function(e, t) {
                return v.instance.uniformMatrix4fv(e.location, !1, t), 1;
            }, n._uniform1i = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t ? (v.instance.uniform1i(e.location, n[0] = t), 1) : 0;
            }, n._uniform1iv = function(e, t) {
                return v.instance.uniform1iv(e.location, t), 1;
            }, n._uniform_ivec2 = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t[0] || n[1] !== t[1] ? (v.instance.uniform2i(e.location, n[0] = t[0], n[1] = t[1]),
                    1) : 0;
            }, n._uniform_ivec2v = function(e, t) {
                return v.instance.uniform2iv(e.location, t), 1;
            }, n._uniform_vec3i = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] ? (v.instance.uniform3i(e.location, n[0] = t[0], n[1] = t[1], n[2] = t[2]),
                    1) : 0;
            }, n._uniform_vec3vi = function(e, t) {
                return v.instance.uniform3iv(e.location, t), 1;
            }, n._uniform_vec4i = function(e, t) {
                var n = e.uploadedValue;
                return n[0] !== t[0] || n[1] !== t[1] || n[2] !== t[2] || n[3] !== t[3] ? (v.instance.uniform4i(e.location, n[0] = t[0], n[1] = t[1], n[2] = t[2], n[3] = t[3]),
                    1) : 0;
            }, n._uniform_vec4vi = function(e, t) {
                return v.instance.uniform4iv(e.location, t), 1;
            }, n._uniform_sampler2D = function(e, t) {
                var n = t._getSource() || t.defaulteTexture._getSource(),
                    i = v.instance;
                return B.activeTexture(i, e.textureID), B.bindTexture(i, 3553, n), 0;
            }, n._uniform_sampler3D = function(e, t) {
                var n = t._getSource() || t.defaulteTexture._getSource(),
                    i = v.instance;
                return B.activeTexture(i, e.textureID), B.bindTexture(i, 32879, n), 0;
            }, n._uniform_samplerCube = function(e, t) {
                var n = t._getSource() || t.defaulteTexture._getSource(),
                    i = v.instance;
                return B.activeTexture(i, e.textureID), B.bindTexture(i, 34067, n), 0;
            }, n.bind = function() {
                return B.useProgram(v.instance, this._program);
            }, n.uploadUniforms = function(e, t, n) {
                N.shaderCall += g.uploadShaderUniforms(v.instance, e, t, n);
            }, n.uploadRenderStateBlendDepth = function(e) {
                var t = v.instance,
                    n = this._shaderPass.renderState,
                    i = e.getData(),
                    r = this._getRenderState(i, 13),
                    a = this._getRenderState(i, 12),
                    o = this._getRenderState(i, 1);
                switch (null == r && (r = n.depthWrite), null == a && (a = n.depthTest), null == o && (o = n.blend),
                    B.setDepthMask(t, r), 0 === a ? B.setDepthTest(t, !1) : (B.setDepthTest(t, !0),
                        B.setDepthFunc(t, a)), o) {
                    case 0:
                        B.setBlend(t, !1);
                        break;

                    case 1:
                        B.setBlend(t, !0);
                        var s = this._getRenderState(i, 2);
                        null == s && (s = n.srcBlend);
                        var l = this._getRenderState(i, 3);
                        null == l && (l = n.dstBlend), B.setBlendFunc(t, s, l);
                        break;

                    case 2:
                        B.setBlend(t, !0);
                        var h = this._getRenderState(i, 4);
                        null == h && (h = n.srcBlendRGB);
                        var u = this._getRenderState(i, 5);
                        null == u && (u = n.dstBlendRGB);
                        var c = this._getRenderState(i, 6);
                        null == c && (c = n.srcBlendAlpha);
                        var _ = this._getRenderState(i, 7);
                        null == _ && (_ = n.dstBlendAlpha), B.setBlendFuncSeperate(t, h, u, c, _);
                }
            }, n.uploadRenderStateFrontFace = function(e, t, n) {
                var i = v.instance,
                    r = this._shaderPass.renderState,
                    a = e.getData(),
                    o = this._getRenderState(a, 0);
                null == o && (o = r.cull);
                var s = 0;
                switch (o) {
                    case 0:
                        B.setCullFace(i, !1);
                        break;

                    case 1:
                        B.setCullFace(i, !0), s = t ? n && n._isFrontFaceInvert ? 2305 : 2304 : n && n._isFrontFaceInvert ? 2304 : 2305,
                            B.setFrontFace(i, s);
                        break;

                    case 2:
                        B.setCullFace(i, !0), s = t ? n && n._isFrontFaceInvert ? 2304 : 2305 : n && n._isFrontFaceInvert ? 2305 : 2304,
                            B.setFrontFace(i, s);
                }
            }, n.uploadCustomUniform = function(e, t) {
                N.shaderCall += g.uploadCustomUniform(v.instance, this._customUniformParamsMap, e, t);
            }, n._uniformMatrix2fvForNative = function(e, t) {
                return v.instance.uniformMatrix2fvEx(e.location, !1, t), 1;
            }, n._uniformMatrix3fvForNative = function(e, t) {
                return v.instance.uniformMatrix3fvEx(e.location, !1, t), 1;
            }, n._uniformMatrix4fvForNative = function(e, t) {
                return v.instance.uniformMatrix4fvEx(e.location, !1, t), 1;
            }, t;
        }(M),
        Wn = (function(e) {
            function t() {
                this._version = NaN, this._cameraCoordinateInverse = !1, this._gridSize = NaN, this._chunkNumX = 0,
                    this._chunkNumZ = 0, this._heightDataX = 0, this._heightDataZ = 0, this._heightDataBitType = 0,
                    this._heightDataValue = NaN, this._heightDataUrl = null, this._detailTextureInfos = null,
                    this._chunkInfos = null, this._heightData = null, this._materialInfo = null, this._alphaMaps = null,
                    this._normalMaps = null, t.__super.call(this);
            }
            r(t, "laya.d3.terrain.TerrainRes", e);
            var i = t.prototype;
            return i.parseData = function(e) {
                var t = e[0],
                    n = e[1];
                if (this._version = t.version, 1 == this._version) {
                    this._cameraCoordinateInverse = t.cameraCoordinateInverse, this._gridSize = t.gridSize,
                        this._chunkNumX = t.chunkNumX, this._chunkNumZ = t.chunkNumZ;
                    var i = t.heightData;
                    if (this._heightDataX = i.numX, this._heightDataZ = i.numZ, this._heightDataBitType = i.bitType,
                        this._heightDataValue = i.value, this._heightDataUrl = n[i.url], this._materialInfo = new se(),
                        t.material) {
                        var r = t.material.ambient,
                            a = t.material.diffuse,
                            s = t.material.specular;
                        this._materialInfo.ambientColor = new Te(r[0], r[1], r[2]), this._materialInfo.diffuseColor = new Te(a[0], a[1], a[2]),
                            this._materialInfo.specularColor = new me(s[0], s[1], s[2], s[3]);
                    }
                    var l = t.detailTexture;
                    this._detailTextureInfos = o(l.length);
                    for (var h = 0; h < l.length; h++) {
                        var u = l[h],
                            c = new At();
                        c.diffuseTexture = n[u.diffuse], c.normalTexture = u.normal ? n[u.normal] : null,
                            u.scale ? c.scale = new Ee(u.scale[0], u.scale[1]) : c.scale = new Ee(1, 1), u.offset ? c.offset = new Ee(u.offset[0], u.offset[1]) : c.offset = new Ee(0, 0),
                            this._detailTextureInfos[h] = c;
                    }
                    var _ = t.alphaMap;
                    for (this._alphaMaps = o(_.length), h = 0; h < this._alphaMaps.length; h++) this._alphaMaps[h] = t.alphaMap[h];
                    var d = t.normalMap;
                    for (this._normalMaps = o(d.length), h = 0; h < this._normalMaps.length; h++) this._normalMaps[h] = t.normalMap[h];
                    var f = t.chunkInfo;
                    if (this._chunkNumX * this._chunkNumZ != f.length) return alert("terrain data error"), !1;
                    for (this._chunkInfos = o(f.length), h = 0; h < f.length; h++) {
                        var m = f[h],
                            p = new vt(),
                            T = m.alphaMap.length,
                            E = m.detailID.length;
                        if (T != E) return alert("terrain chunk data error"), !1;
                        p.alphaMap = o(T), p.detailID = o(E), p.normalMap = n[this._normalMaps[m.normalMap]];
                        for (var v = 0; T > v; v++) {
                            p.alphaMap[v] = n[this._alphaMaps[m.alphaMap[v]]];
                            var g = m.detailID[v],
                                y = g.length;
                            p.detailID[v] = new Uint8Array(y);
                            for (var x = 0; y > x; x++) p.detailID[v][x] = g[x];
                        }
                        this._chunkInfos[h] = p;
                    }
                    this._heightData = S.getRes(this._heightDataUrl), this.onLoadTerrainComplete(this._heightData);
                }
                return !0;
            }, i.onLoadTerrainComplete = function(e) {}, t._parse = function(e, n, i) {
                var r = new t();
                return r.parseData(e), r;
            }, t.load = function(e, t) {
                n.loader.create(e, t, null, "TERRAIN", null, null, 1, !1);
            }, t;
        }(M), function(e) {
            function t(e) {
                this._finalGravity = new Te(), this._tempRotationMatrix = new Ht(), t.__super.call(this, e),
                    this._defaultBoundBox = new zt(new Te(), new Te()), this._renderMode = -1, this.stretchedBillboardCameraSpeedScale = 0,
                    this.stretchedBillboardSpeedScale = 0, this.stretchedBillboardLengthScale = 1;
            }
            r(t, "laya.d3.core.particleShuriKen.ShurikenParticleRenderer", e);
            var n = t.prototype;
            return n._calculateBoundingBox = function() {
                var e = this._bounds.getMin();
                e.x = -Number.MAX_VALUE, e.y = -Number.MAX_VALUE, e.z = -Number.MAX_VALUE, this._bounds.setMin(e);
                var t = this._bounds.getMax();
                if (t.x = Number.MAX_VALUE, t.y = Number.MAX_VALUE, t.z = Number.MAX_VALUE, this._bounds.setMax(t),
                    R.supportWebGLPlusCulling) {
                    e = this._bounds.getMin(), t = this._bounds.getMax();
                    var n = wt._cullingBuffer;
                    n[this._cullingBufferIndex + 1] = e.x, n[this._cullingBufferIndex + 2] = e.y, n[this._cullingBufferIndex + 3] = e.z,
                        n[this._cullingBufferIndex + 4] = t.x, n[this._cullingBufferIndex + 5] = t.y, n[this._cullingBufferIndex + 6] = t.z;
                }
            }, n._needRender = function(e) {
                return e ? 0 !== e.containsBoundBox(this.bounds._getBoundBox()) && this._owner.particleSystem.isAlive ? !0 : !1 : !0;
            }, n._renderUpdate = function(e, t) {
                var n = this._owner.particleSystem,
                    i = this._shaderValues,
                    r = this._owner.transform;
                switch (n.simulationSpace) {
                    case 0:
                        break;

                    case 1:
                        i.setVector3(yi.WORLDPOSITION, r.position), i.setQuaternion(yi.WORLDROTATION, r.rotation);
                        break;

                    default:
                        throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
                }
                switch (n.scaleMode) {
                    case 0:
                        var a = r.scale;
                        i.setVector3(yi.POSITIONSCALE, a), i.setVector3(yi.SIZESCALE, a);
                        break;

                    case 1:
                        var o = r.localScale;
                        i.setVector3(yi.POSITIONSCALE, o), i.setVector3(yi.SIZESCALE, o);
                        break;

                    case 2:
                        i.setVector3(yi.POSITIONSCALE, r.scale), i.setVector3(yi.SIZESCALE, Te._ONE);
                }
                Te.scale(Ut.gravity, n.gravityModifier, this._finalGravity), i.setVector3(yi.GRAVITY, this._finalGravity),
                    i.setInt(yi.SIMULATIONSPACE, n.simulationSpace), i.setBool(yi.THREEDSTARTROTATION, n.threeDStartRotation),
                    i.setInt(yi.SCALINGMODE, n.scaleMode), i.setNumber(yi.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale),
                    i.setNumber(yi.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale),
                    i.setNumber(yi.CURRENTTIME, n._currentTime);
            }, n._destroy = function() {
                e.prototype._destroy.call(this), this._mesh && (this._mesh._removeReference(), this._mesh = null);
            }, a(0, n, "renderMode", function() {
                return this._renderMode;
            }, function(e) {
                if (this._renderMode !== e) {
                    var t = this._defineDatas;
                    switch (this._renderMode) {
                        case 0:
                            t.remove(yi.SHADERDEFINE_RENDERMODE_BILLBOARD);
                            break;

                        case 1:
                            t.remove(yi.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                            break;

                        case 2:
                            t.remove(yi.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                            break;

                        case 3:
                            t.remove(yi.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                            break;

                        case 4:
                            t.remove(yi.SHADERDEFINE_RENDERMODE_MESH);
                    }
                    switch (this._renderMode = e, e) {
                        case 0:
                            t.add(yi.SHADERDEFINE_RENDERMODE_BILLBOARD);
                            break;

                        case 1:
                            t.add(yi.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                            break;

                        case 2:
                            t.add(yi.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                            break;

                        case 3:
                            t.add(yi.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                            break;

                        case 4:
                            t.add(yi.SHADERDEFINE_RENDERMODE_MESH);
                            break;

                        default:
                            throw new Error("ShurikenParticleRender: unknown renderMode Value.");
                    }
                    this._owner.particleSystem._initBufferDatas();
                }
            }), a(0, n, "mesh", function() {
                return this._mesh;
            }, function(e) {
                this._mesh !== e && (this._mesh && this._mesh._removeReference(), this._mesh = e,
                    e && e._addReference(), this._owner.particleSystem._initBufferDatas());
            }), a(0, n, "bounds", function() {
                return this._boundsChange && (this._calculateBoundingBox(), this._boundsChange = !1),
                    this._bounds;
            }), t;
        }(Wt)),
        Yn = function(e) {
            function t(e, n) {
                this._isTrigger = !1, t.__super.call(this, e, n);
            }
            r(t, "laya.d3.physics.PhysicsTriggerComponent", e);
            var n = t.prototype;
            return n._onAdded = function() {
                e.prototype._onAdded.call(this), this.isTrigger = this._isTrigger;
            }, n._cloneTo = function(t) {
                e.prototype._cloneTo.call(this, t), t.isTrigger = this._isTrigger;
            }, a(0, n, "isTrigger", function() {
                return this._isTrigger;
            }, function(e) {
                if (this._isTrigger = e, this._nativeColliderObject) {
                    var t = this._nativeColliderObject.getCollisionFlags();
                    e ? 0 === (4 & t) && this._nativeColliderObject.setCollisionFlags(4 | t) : 0 !== (4 & t) && this._nativeColliderObject.setCollisionFlags(4 ^ t);
                }
            }), t;
        }(Xt),
        Zn = (function(e) {
            function t(e, n, i, r) {
                this._maxSlope = 45, this._jumpSpeed = 10, this._fallSpeed = 55, this._upAxis = new Te(0, 1, 0),
                    this._gravity = new Te(0, -9.8 * 3, 0), void 0 === e && (e = .1), void 0 === i && (i = 1),
                    void 0 === r && (r = Ut.COLLISIONFILTERGROUP_ALLFILTER), this._stepHeight = e, n && (this._upAxis = n),
                    t.__super.call(this, i, r);
            }
            r(t, "laya.d3.physics.CharacterController", e);
            var n = t.prototype;
            return n._constructCharacter = function() {
                var e = W._physics3D;
                this._nativeKinematicCharacter && e.destroy(this._nativeKinematicCharacter);
                var n = t._nativeTempVector30;
                n.setValue(this._upAxis.x, this._upAxis.y, this._upAxis.z), this._nativeKinematicCharacter = new e.btKinematicCharacterController(this._nativeColliderObject, this._colliderShape._nativeShape, this._stepHeight, n),
                    this.fallSpeed = this._fallSpeed, this.maxSlope = this._maxSlope, this.jumpSpeed = this._jumpSpeed,
                    this.gravity = this._gravity;
            }, n._onShapeChange = function(t) {
                e.prototype._onShapeChange.call(this, t), this._constructCharacter();
            }, n._onAdded = function() {
                var t = W._physics3D,
                    n = new t.btPairCachingGhostObject();
                n.setUserIndex(this.id), n.setCollisionFlags(16), this._nativeColliderObject = n,
                    this._colliderShape && this._constructCharacter(), e.prototype._onAdded.call(this);
            }, n._addToSimulation = function() {
                this._simulation._characters.push(this), this._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);
            }, n._removeFromSimulation = function() {
                this._simulation._removeCharacter(this);
                var e = this._simulation._characters;
                e.splice(e.indexOf(this), 1);
            }, n._cloneTo = function(t) {
                e.prototype._cloneTo.call(this, t);
                var n = t;
                n.stepHeight = this._stepHeight, n.upAxis = this._upAxis, n.maxSlope = this._maxSlope,
                    n.jumpSpeed = this._jumpSpeed, n.fallSpeed = this._fallSpeed, n.gravity = this._gravity;
            }, n._onDestroy = function() {
                W._physics3D.destroy(this._nativeKinematicCharacter), e.prototype._onDestroy.call(this),
                    this._nativeKinematicCharacter = null;
            }, n.move = function(e) {
                var t = Xt._nativeVector30;
                t.setValue(-e.x, e.y, e.z), this._nativeKinematicCharacter.setWalkDirection(t);
            }, n.jump = function(e) {
                if (e) {
                    var t = Xt._nativeVector30;
                    ke._convertToBulletVec3(e, t, !0), this._nativeKinematicCharacter.jump(t);
                } else this._nativeKinematicCharacter.jump();
            }, a(0, n, "fallSpeed", function() {
                return this._fallSpeed;
            }, function(e) {
                this._fallSpeed = e, this._nativeKinematicCharacter.setFallSpeed(e);
            }), a(0, n, "stepHeight", function() {
                return this._stepHeight;
            }, function(e) {
                this._stepHeight = e, this._constructCharacter();
            }), a(0, n, "jumpSpeed", function() {
                return this._jumpSpeed;
            }, function(e) {
                this._jumpSpeed = e, this._nativeKinematicCharacter.setJumpSpeed(e);
            }), a(0, n, "gravity", function() {
                return this._gravity;
            }, function(e) {
                this._gravity = e;
                var n = t._nativeTempVector30;
                n.setValue(-e.x, e.y, e.z), this._nativeKinematicCharacter.setGravity(n);
            }), a(0, n, "maxSlope", function() {
                return this._maxSlope;
            }, function(e) {
                this._maxSlope = e, this._nativeKinematicCharacter.setMaxSlope(e / 180 * Math.PI);
            }), a(0, n, "isGrounded", function() {
                return this._nativeKinematicCharacter.onGround();
            }), a(0, n, "upAxis", function() {
                return this._upAxis;
            }, function(e) {
                this._upAxis = e, this._constructCharacter();
            }), t.UPAXIS_X = 0, t.UPAXIS_Y = 1, t.UPAXIS_Z = 2, i(t, ["_nativeTempVector30", function() {
                return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
            }]), t;
        }(Xt), function(e) {
            function t(e) {
                this._terrainSprite3DOwner = null, this._projectionViewWorldMatrix = null, t.__super.call(this, e),
                    this._terrainSprite3DOwner = e, this._projectionViewWorldMatrix = new Ht();
            }
            r(t, "laya.d3.terrain.TerrainRender", e);
            var n = t.prototype;
            return n._needRender = function(e) {
                return e ? 0 !== e.containsBoundBox(this._bounds._getBoundBox()) : !0;
            }, n._calculateBoundingBox = function() {}, n._renderUpdate = function(e, t) {
                this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, t.worldMatrix);
            }, n._renderUpdateWithCamera = function(e, t) {
                var n = e.projectionViewMatrix;
                Ht.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix);
            }, n._destroy = function() {
                e.prototype._destroy.call(this), this._terrainSprite3DOwner = null;
            }, t;
        }(Wt)),
        jn = function(e) {
            function t(e) {
                t.__super.call(this, e), this._projectionViewWorldMatrix = new Ht();
            }
            r(t, "laya.d3.core.MeshRenderer", e);
            var n = t.prototype;
            return n._onMeshChange = function(e) {
                this._boundsChange = !0;
            }, n._calculateBoundingBox = function() {
                var e = this._owner.meshFilter.sharedMesh;
                if (e) {
                    var t = this._owner.transform.worldMatrix;
                    e.bounds._tranform(t, this._bounds);
                }
                if (R.supportWebGLPlusCulling) {
                    var n = this._bounds.getMin(),
                        i = this._bounds.getMax(),
                        r = wt._cullingBuffer;
                    r[this._cullingBufferIndex + 1] = n.x, r[this._cullingBufferIndex + 2] = n.y, r[this._cullingBufferIndex + 3] = n.z,
                        r[this._cullingBufferIndex + 4] = i.x, r[this._cullingBufferIndex + 5] = i.y, r[this._cullingBufferIndex + 6] = i.z;
                }
            }, n._changeRenderObjectsByMesh = function(e) {
                var t = e.subMeshCount;
                this._renderElements.length = t;
                for (var n = 0; t > n; n++) {
                    var i = this._renderElements[n];
                    if (!i) {
                        var r = this.sharedMaterials[n];
                        i = this._renderElements[n] = new wn(), i.setTransform(this._owner._transform),
                            i.render = this, i.material = r ? r : ci.defaultMaterial;
                    }
                    i.setGeometry(e._getSubMesh(n));
                }
            }, n._needRender = function(e) {
                return e ? 0 !== e.containsBoundBox(this.bounds._getBoundBox()) : !0;
            }, n._renderUpdate = function(e, t) {
                var n = e.renderElement;
                switch (n.renderType) {
                    case 0:
                        this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, t.worldMatrix);
                        break;

                    case 1:
                        this._oriDefineValue = this._defineDatas.value, t ? this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, t.worldMatrix) : this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, Ht.DEFAULT),
                            this._defineDatas.add(Ei.SHADERDEFINE_UV1), this._defineDatas.remove(Jn.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
                        break;

                    case 3:
                        this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, Ht.DEFAULT);
                        break;

                    case 2:
                        for (var i = En.instance.instanceWorldMatrixData, r = n.instanceBatchElementList, a = r.length, o = 0; a > o; o++) i.set(r[o]._transform.worldMatrix.elements, 16 * o);
                        En.instance.instanceWorldMatrixBuffer.setData(i, 0, 0, 16 * a), this._defineDatas.add(Ei.SHADERDEFINE_GPU_INSTANCE);
                }
            }, n._renderUpdateWithCamera = function(e, t) {
                var n = e.projectionViewMatrix,
                    i = e.renderElement;
                switch (i.renderType) {
                    case 0:
                    case 1:
                    case 3:
                        t ? (Ht.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
                        break;

                    case 2:
                        for (var r = En.instance.instanceMVPMatrixData, a = i.instanceBatchElementList, o = a.length, s = 0; o > s; s++) {
                            var l = a[s]._transform.worldMatrix;
                            ke.mulMatrixByArray(n.elements, 0, l.elements, 0, r, 16 * s);
                        }
                        En.instance.instanceMVPMatrixBuffer.setData(r, 0, 0, 16 * o);
                }
            }, n._renderUpdateWithCameraForNative = function(e, t) {
                var n = e.projectionViewMatrix,
                    i = e.renderElement;
                switch (i.renderType) {
                    case 0:
                        t ? (Ht.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
                        break;

                    case 1:
                    case 3:
                        var r = ue._SET_RUNTIME_VALUE_MODE_REFERENCE_;
                        ue.setRuntimeValueMode(!1), t ? (Ht.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix),
                                this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n),
                            ue.setRuntimeValueMode(r);
                        break;

                    case 2:
                        for (var a = En.instance.instanceMVPMatrixData, o = i.instanceBatchElementList, s = o.length, l = 0; s > l; l++) {
                            var h = o[l]._transform.worldMatrix;
                            ke.mulMatrixByArray(n.elements, 0, h.elements, 0, a, 16 * l);
                        }
                        En.instance.instanceMVPMatrixBuffer.setData(a, 0, 0, 16 * s);
                }
            }, n._revertBatchRenderUpdate = function(e) {
                var t = e.renderElement;
                switch (t.renderType) {
                    case 1:
                        this._defineDatas.value = this._oriDefineValue;
                        break;

                    case 2:
                        this._defineDatas.remove(Ei.SHADERDEFINE_GPU_INSTANCE);
                }
            }, n._destroy = function() {
                this._isPartOfStaticBatch && Sn.instance._destroyRenderSprite(this._owner), e.prototype._destroy.call(this);
            }, i(t, ["_tempVector30", function() {
                return this._tempVector30 = new Te();
            }, "_tempVector31", function() {
                return this._tempVector31 = new Te();
            }]), t;
        }(Wt),
        Kn = function(e) {
            function t(e) {
                this._projectionViewWorldMatrix = new Ht(), t.__super.call(this, e);
            }
            r(t, "laya.d3.core.trail.TrailRenderer", e);
            var n = t.prototype;
            return n._calculateBoundingBox = function() {
                var e = this._bounds.getMin();
                e.x = -Number.MAX_VALUE, e.y = -Number.MAX_VALUE, e.z = -Number.MAX_VALUE, this._bounds.setMin(e);
                var t = this._bounds.getMax();
                if (t.x = Number.MAX_VALUE, t.y = Number.MAX_VALUE, t.z = Number.MAX_VALUE, this._bounds.setMax(t),
                    R.supportWebGLPlusCulling) {
                    e = this._bounds.getMin(), t = this._bounds.getMax();
                    var n = wt._cullingBuffer;
                    n[this._cullingBufferIndex + 1] = e.x, n[this._cullingBufferIndex + 2] = e.y, n[this._cullingBufferIndex + 3] = e.z,
                        n[this._cullingBufferIndex + 4] = t.x, n[this._cullingBufferIndex + 5] = t.y, n[this._cullingBufferIndex + 6] = t.z;
                }
            }, n._needRender = function(e) {
                return !0;
            }, n._renderUpdate = function(t, n) {
                e.prototype._renderUpdate.call(this, t, n), this._owner.trailFilter._update(t);
            }, n._renderUpdateWithCamera = function(e, t) {
                var n = e.projectionViewMatrix;
                t ? (Ht.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
            }, t;
        }(Wt),
        qn = function(e) {
            function t(e) {
                this._projectionViewWorldMatrix = null, t.__super.call(this, e), this._projectionViewWorldMatrix = new Ht();
            }
            r(t, "laya.d3.core.pixelLine.PixelLineRenderer", e);
            var n = t.prototype;
            return n._calculateBoundingBox = function() {
                var e = this._bounds.getMin();
                e.x = -Number.MAX_VALUE, e.y = -Number.MAX_VALUE, e.z = -Number.MAX_VALUE, this._bounds.setMin(e);
                var t = this._bounds.getMax();
                if (t.x = Number.MAX_VALUE, t.y = Number.MAX_VALUE, t.z = Number.MAX_VALUE, this._bounds.setMax(t),
                    R.supportWebGLPlusCulling) {
                    e = this._bounds.getMin(), t = this._bounds.getMax();
                    var n = wt._cullingBuffer;
                    n[this._cullingBufferIndex + 1] = e.x, n[this._cullingBufferIndex + 2] = e.y, n[this._cullingBufferIndex + 3] = e.z,
                        n[this._cullingBufferIndex + 4] = t.x, n[this._cullingBufferIndex + 5] = t.y, n[this._cullingBufferIndex + 6] = t.z;
                }
            }, n._renderUpdateWithCamera = function(e, t) {
                var n = e.projectionViewMatrix,
                    i = this._shaderValues;
                if (t) {
                    var r = t.worldMatrix;
                    i.setMatrix4x4(Fn.WORLDMATRIX, r), Ht.multiply(n, r, this._projectionViewWorldMatrix),
                        i.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix);
                } else i.setMatrix4x4(Fn.WORLDMATRIX, Ht.DEFAULT), i.setMatrix4x4(Fn.MVPMATRIX, n);
            }, t;
        }(Wt),
        Qn = function(e) {
            function t() {
                this._reflectionMode = 1, this._enableLightCount = 3, this.enableLight = !0, this._time = 0,
                    t.__super.call(this), this._lights = [], this._lightmaps = [], this._skyRenderer = new mt(),
                    this._input = new Ze(), this._timer = n.timer, this._collsionTestList = [], this._renders = new un(),
                    this._opaqueQueue = new Ct(!1), this._transparentQueue = new Ct(!0), this._cameraPool = [],
                    this._animatorPool = new un(), this._scriptPool = new un(), this._castShadowRenders = new rn(),
                    this.currentCreationLayer = Math.pow(2, 0), this._key = new P(), this._pickIdToSprite = new Object(),
                    W._enbalePhysics && (this._physicsSimulation = new kt(W.physicsSettings)), this._defineDatas = new Ue(),
                    this._shaderValues = new ue(null), this.parallelSplitShadowMaps = [], this.enableFog = !1,
                    this.fogStart = 300, this.fogRange = 1e3, this.fogColor = new Te(.7, .7, .7), this.ambientColor = new Te(.212, .227, .259),
                    this.reflectionIntensity = 1, F.shaderHighPrecision && this._defineDatas.add(Ve.SHADERDEFINE_HIGHPRECISION),
                    R.supportWebGLPlusCulling && (this._cullingBufferIndices = new Int32Array(1024),
                        this._cullingBufferResult = new Int32Array(1024)), this._shaderValues.setTexture(laya.d3.core.scene.Scene3D.RANGEATTENUATIONTEXTURE, He._rangeAttenTex),
                    this._scene = this, W._enbalePhysics && !kt.disableSimulation && this._input.__init__(R.canvas, this);
                var e = W._config;
                if (e.octreeCulling && (this._octree = new Je(e.octreeInitialSize, e.octreeInitialCenter, e.octreeMinNodeSize, e.octreeLooseness)),
                    W._config.debugFrustumCulling) {
                    this._debugTool = new xi();
                    var i = new ri();
                    i.renderQueue = 3e3, i.alphaTest = !1, i.depthWrite = !1, i.cull = 2, i.blend = 1,
                        i.blendSrc = 770, i.blendDst = 771, i.depthTest = 513, this._debugTool.pixelLineRenderer.sharedMaterial = i;
                }
            }
            r(t, "laya.d3.core.scene.Scene3D", e);
            var s = t.prototype;
            return n.imps(s, {
                    "laya.webgl.submit.ISubmit": !0,
                    "laya.resource.ICreateResource": !0
                }), s._allotPickColorByID = function(e, t) {
                    var n = Math.floor(e / 65025);
                    e -= 255 * n * 255;
                    var i = Math.floor(e / 255);
                    e -= 255 * i;
                    var r = e;
                    t.x = n / 255, t.y = i / 255, t.z = r / 255, t.w = 1;
                }, s._searchIDByPickColor = function(e) {
                    var t = 255 * e.x * 255 + 255 * e.y + e.z;
                    return t;
                }, s._setLightmapToChildNode = function(e) {
                    e instanceof laya.d3.core.RenderableSprite3D && e._render._applyLightMapParams();
                    for (var t = e._children, n = 0, i = t.length; i > n; n++) this._setLightmapToChildNode(t[n]);
                }, s._update = function() {
                    var e = this.timer._delta / 1e3;
                    this._time += e, this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.TIME, this._time);
                    var t = this._physicsSimulation;
                    W._enbalePhysics && !kt.disableSimulation && (t._updatePhysicsTransformFromRender(),
                            Xt._addUpdateList = !1, t._simulate(e), t._updateCharacters(), Xt._addUpdateList = !0,
                            t._updateCollisions(), t._eventScripts(), this._input._update()), this._updateScript(),
                        Zt._update(this), this._lateUpdateScript();
                }, s._binarySearchIndexInCameraPool = function(e) {
                    for (var t = 0, n = this._cameraPool.length - 1, i = 0; n >= t;) {
                        i = Math.floor((t + n) / 2);
                        var r = this._cameraPool[i]._renderingOrder;
                        if (r == e._renderingOrder) return i;
                        r > e._renderingOrder ? n = i - 1 : t = i + 1;
                    }
                    return t;
                }, s._setCreateURL = function(e) {
                    this._url = b.formatURL(e);
                }, s._getGroup = function() {
                    return this._group;
                }, s._setGroup = function(e) {
                    this._group = e;
                }, s._updateScript = function() {
                    for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; i > n; n++) {
                        var r = t[n];
                        r && r.enabled && r.onUpdate();
                    }
                }, s._lateUpdateScript = function() {
                    for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; i > n; n++) {
                        var r = t[n];
                        r && r.enabled && r.onLateUpdate();
                    }
                }, s._preRenderScript = function() {
                    for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; i > n; n++) {
                        var r = t[n];
                        r && r.enabled && r.onPreRender();
                    }
                }, s._postRenderScript = function() {
                    for (var e = this._scriptPool, t = e.elements, n = 0, i = e.length; i > n; n++) {
                        var r = t[n];
                        r && r.enabled && r.onPostRender();
                    }
                }, s._prepareSceneToRender = function() {
                    var e = this._lights.length;
                    if (e > 0)
                        for (var t = 0, n = 0; e > n && !(this._lights[n]._prepareToScene() && (t++,
                                t >= this._enableLightCount)); n++);
                }, s._addCamera = function(e) {
                    for (var t = this._binarySearchIndexInCameraPool(e), n = e._renderingOrder, i = this._cameraPool.length; i > t && this._cameraPool[t]._renderingOrder <= n;) t++;
                    this._cameraPool.splice(t, 0, e);
                }, s._removeCamera = function(e) {
                    this._cameraPool.splice(this._cameraPool.indexOf(e), 1);
                }, s._preCulling = function(e, t) {
                    wt.renderObjectCulling(t, this, e, this._renders);
                }, s._clear = function(e, t) {
                    var n = t.viewport,
                        i = t.camera,
                        r = i.getRenderTexture(),
                        a = n.width,
                        o = n.height,
                        s = n.x,
                        l = i._getCanvasHeight() - n.y - o;
                    e.viewport(s, l, a, o);
                    var h = 0,
                        u = i.clearFlag;
                    switch (1 !== u || i.skyRenderer._isAvailable() || this._skyRenderer._isAvailable() || (u = 0),
                        u) {
                        case 0:
                            var c = i.clearColor;
                            if (e.enable(3089), e.scissor(s, l, a, o), c ? e.clearColor(c.x, c.y, c.z, c.w) : e.clearColor(0, 0, 0, 0),
                                r) switch (h = 16384, r.depthStencilFormat) {
                                case 0:
                                    h |= 256;
                                    break;

                                case 1:
                                    h |= 1024;
                                    break;

                                case 2:
                                    h |= 256, h |= 1024;
                            } else h = 16640;
                            B.setDepthMask(e, !0), e.clear(h), e.disable(3089);
                            break;

                        case 1:
                        case 2:
                            if (e.enable(3089), e.scissor(s, l, a, o), r) switch (r.depthStencilFormat) {
                                case 0:
                                    h = 256;
                                    break;

                                case 1:
                                    h = 1024;
                                    break;

                                case 2:
                                    h = 1280;
                            } else h = 256;
                            B.setDepthMask(e, !0), e.clear(h), e.disable(3089);
                            break;

                        case 3:
                            break;

                        default:
                            throw new Error("BaseScene:camera clearFlag invalid.");
                    }
                }, s._renderScene = function(e, t, n, i) {
                    var r = t.camera;
                    r.transform.position;
                    if (r.getRenderTexture() ? this._opaqueQueue._render(t, !0, n, i) : this._opaqueQueue._render(t, !1, n, i),
                        1 === r.clearFlag && (r.skyRenderer._isAvailable() ? r.skyRenderer._render(t) : this._skyRenderer._isAvailable() && this._skyRenderer._render(t)),
                        r.getRenderTexture() ? this._transparentQueue._render(t, !0, n, i) : this._transparentQueue._render(t, !1, n, i),
                        r._applyPostProcessCommandBuffers(), W._config.debugFrustumCulling)
                        for (var a = this._debugTool._render._renderElements, o = 0, s = a.length; s > o; o++) a[o]._render(t, !1, n, i);
                }, s._parse = function(e, t) {
                    var n = e.lightmaps;
                    if (n) {
                        for (var i = n.length, r = o(i), a = 0; i > a; a++) r[a] = S.getRes(n[a].path);
                        this.setlightmaps(r);
                    }
                    var s = e.ambientColor;
                    if (s) {
                        var l = this.ambientColor;
                        l.fromArray(s), this.ambientColor = l;
                    }
                    var h = e.sky;
                    if (h) switch (this._skyRenderer.material = S.getRes(h.material.path), h.mesh) {
                        case "SkyBox":
                            this._skyRenderer.mesh = xn.instance;
                            break;

                        case "SkyDome":
                            this._skyRenderer.mesh = Ln.instance;
                            break;

                        default:
                            this.skyRenderer.mesh = xn.instance;
                    }
                    var u = e.reflectionTexture;
                    u && (this.customReflection = S.getRes(u)), this.enableFog = e.enableFog, this.fogStart = e.fogStart,
                        this.fogRange = e.fogRange;
                    var c = e.fogColor;
                    if (c) {
                        var _ = this.fogColor;
                        _.fromArray(c), this.fogColor = _;
                    }
                }, s._onActive = function() {
                    laya.display.Node.prototype._onActive.call(this), n.stage._scene3Ds.push(this);
                }, s._onInActive = function() {
                    laya.display.Node.prototype._onInActive.call(this);
                    var e = n.stage._scene3Ds;
                    e.splice(e.indexOf(this), 1);
                }, s._addLight = function(e) {
                    this._lights.indexOf(e) < 0 && this._lights.push(e);
                }, s._removeLight = function(e) {
                    var t = this._lights.indexOf(e);
                    t >= 0 && this._lights.splice(t, 1);
                }, s._addRenderObject = function(e) {
                    if (this._octree) this._octree.add(e);
                    else if (this._renders.add(e), R.supportWebGLPlusCulling) {
                        var t = e._getIndexInList(),
                            n = this._cullingBufferIndices.length;
                        if (t >= n) {
                            var i = this._cullingBufferIndices,
                                r = this._cullingBufferResult;
                            this._cullingBufferIndices = new Int32Array(n + 1024), this._cullingBufferResult = new Int32Array(n + 1024),
                                this._cullingBufferIndices.set(i, 0), this._cullingBufferResult.set(r, 0);
                        }
                        this._cullingBufferIndices[t] = e._cullingBufferIndex;
                    }
                }, s._removeRenderObject = function(e) {
                    if (this._octree) this._octree.remove(e);
                    else {
                        var t;
                        R.supportWebGLPlusCulling && (t = this._renders.elements[this._renders.length - 1]),
                            this._renders.remove(e), R.supportWebGLPlusCulling && (this._cullingBufferIndices[t._getIndexInList()] = t._cullingBufferIndex);
                    }
                }, s._addShadowCastRenderObject = function(e) {
                    this._octree || this._castShadowRenders.add(e);
                }, s._removeShadowCastRenderObject = function(e) {
                    this._octree || this._castShadowRenders.remove(e);
                }, s._getRenderQueue = function(e) {
                    return 2500 >= e ? this._opaqueQueue : this._transparentQueue;
                }, s.setlightmaps = function(e) {
                    for (var t = this._lightmaps, n = 0, i = t.length; i > n; n++) t[n]._removeReference();
                    if (!e) throw new Error("Scene3D: value value can't be null.");
                    var r = e.length;
                    for (t.length = r, n = 0; r > n; n++) {
                        var a = e[n];
                        a._addReference(), t[n] = a;
                    }
                    for (n = 0, i = this._children.length; i > n; n++) this._setLightmapToChildNode(this._children[n]);
                }, s.getlightmaps = function() {
                    return this._lightmaps.slice();
                }, s.destroy = function(t) {
                    void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                        this._skyRenderer.destroy(), this._skyRenderer = null, this._lights = null, this._lightmaps = null,
                        this._renderTargetTexture = null, this._shaderValues = null, this._renders = null,
                        this._castShadowRenders = null, this._cameraPool = null, this._octree = null, this.parallelSplitShadowMaps = null,
                        this._physicsSimulation && this._physicsSimulation._destroy(), S.clearRes(this.url));
                }, s.render = function(e, t, n) {
                    e._curSubmit = V.RENDERBASE, this._children.length > 0 && e.addRenderObject(this);
                }, s.renderSubmit = function() {
                    v.instance;
                    this._prepareSceneToRender();
                    var e = 0,
                        t = 0,
                        n = 0;
                    for (e = 0, t = this._cameraPool.length, n = t - 1; t > e; e++) {
                        R.supportWebGLPlusRendering && ue.setRuntimeValueMode(e == n ? !0 : !1);
                        var i = this._cameraPool[e];
                        i.enableRender && i.render();
                    }
                    return p.set2DRenderConfig(), 1;
                }, s.getRenderType = function() {
                    return 0;
                }, s.releaseRender = function() {}, s.reUse = function(e, t) {
                    return 0;
                }, a(0, s, "fogColor", function() {
                    return this._shaderValues.getVector(laya.d3.core.scene.Scene3D.FOGCOLOR);
                }, function(e) {
                    this._shaderValues.setVector3(laya.d3.core.scene.Scene3D.FOGCOLOR, e);
                }), a(0, s, "enableFog", function() {
                    return this._enableFog;
                }, function(e) {
                    this._enableFog !== e && (this._enableFog = e, e ? this._defineDatas.add(laya.d3.core.scene.Scene3D.SHADERDEFINE_FOG) : this._defineDatas.remove(laya.d3.core.scene.Scene3D.SHADERDEFINE_FOG));
                }), a(0, s, "url", function() {
                    return this._url;
                }), a(0, s, "fogStart", function() {
                    return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.FOGSTART);
                }, function(e) {
                    this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.FOGSTART, e);
                }), a(0, s, "reflectionIntensity", function() {
                    return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.REFLETIONINTENSITY);
                }, function(e) {
                    e = Math.max(Math.min(e, 1), 0), this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.REFLETIONINTENSITY, e);
                }), a(0, s, "skyRenderer", function() {
                    return this._skyRenderer;
                }), a(0, s, "fogRange", function() {
                    return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.FOGRANGE);
                }, function(e) {
                    this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.FOGRANGE, e);
                }), a(0, s, "ambientColor", function() {
                    return this._shaderValues.getVector(laya.d3.core.scene.Scene3D.AMBIENTCOLOR);
                }, function(e) {
                    this._shaderValues.setVector3(laya.d3.core.scene.Scene3D.AMBIENTCOLOR, e);
                }), a(0, s, "customReflection", function() {
                    return this._shaderValues.getTexture(laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE);
                }, function(e) {
                    this._shaderValues.setTexture(laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE, e),
                        e ? this._defineDatas.add(laya.d3.core.scene.Scene3D.SHADERDEFINE_REFLECTMAP) : this._defineDatas.remove(laya.d3.core.scene.Scene3D.SHADERDEFINE_REFLECTMAP);
                }), a(0, s, "physicsSimulation", function() {
                    return this._physicsSimulation;
                }), a(0, s, "reflectionMode", function() {
                    return this._reflectionMode;
                }, function(e) {
                    this._reflectionMode = e;
                }), a(0, s, "timer", function() {
                    return this._timer;
                }, function(e) {
                    this._timer = e;
                }), a(0, s, "input", function() {
                    return this._input;
                }), t._parse = function(e, t, n) {
                    var i, r = e.data,
                        a = [];
                    switch (e.version) {
                        case "LAYAHIERARCHY:02":
                            i = ke._createNodeByJson02(r, a);
                            break;

                        default:
                            i = ke._createNodeByJson(r, a);
                    }
                    return q.combine(null, a), i;
                }, t.load = function(e, t) {
                    n.loader.create(e, t, null, "HIERARCHY");
                }, t.REFLECTIONMODE_SKYBOX = 0, t.REFLECTIONMODE_CUSTOM = 1, t.SHADERDEFINE_FOG = 0,
                t.SHADERDEFINE_DIRECTIONLIGHT = 0, t.SHADERDEFINE_POINTLIGHT = 0, t.SHADERDEFINE_SPOTLIGHT = 0,
                t.SHADERDEFINE_CAST_SHADOW = 0, t.SHADERDEFINE_SHADOW_PSSM1 = 0, t.SHADERDEFINE_SHADOW_PSSM2 = 0,
                t.SHADERDEFINE_SHADOW_PSSM3 = 0, t.SHADERDEFINE_SHADOW_PCF_NO = 0, t.SHADERDEFINE_SHADOW_PCF1 = 0,
                t.SHADERDEFINE_SHADOW_PCF2 = 0, t.SHADERDEFINE_SHADOW_PCF3 = 0, t.SHADERDEFINE_REFLECTMAP = 0,
                i(t, ["FOGCOLOR", function() {
                    return this.FOGCOLOR = Ve.propertyNameToID("u_FogColor");
                }, "FOGSTART", function() {
                    return this.FOGSTART = Ve.propertyNameToID("u_FogStart");
                }, "FOGRANGE", function() {
                    return this.FOGRANGE = Ve.propertyNameToID("u_FogRange");
                }, "LIGHTDIRECTION", function() {
                    return this.LIGHTDIRECTION = Ve.propertyNameToID("u_DirectionLight.Direction");
                }, "LIGHTDIRCOLOR", function() {
                    return this.LIGHTDIRCOLOR = Ve.propertyNameToID("u_DirectionLight.Color");
                }, "POINTLIGHTPOS", function() {
                    return this.POINTLIGHTPOS = Ve.propertyNameToID("u_PointLight.Position");
                }, "POINTLIGHTRANGE", function() {
                    return this.POINTLIGHTRANGE = Ve.propertyNameToID("u_PointLight.Range");
                }, "POINTLIGHTATTENUATION", function() {
                    return this.POINTLIGHTATTENUATION = Ve.propertyNameToID("u_PointLight.Attenuation");
                }, "POINTLIGHTCOLOR", function() {
                    return this.POINTLIGHTCOLOR = Ve.propertyNameToID("u_PointLight.Color");
                }, "SPOTLIGHTPOS", function() {
                    return this.SPOTLIGHTPOS = Ve.propertyNameToID("u_SpotLight.Position");
                }, "SPOTLIGHTDIRECTION", function() {
                    return this.SPOTLIGHTDIRECTION = Ve.propertyNameToID("u_SpotLight.Direction");
                }, "SPOTLIGHTSPOTANGLE", function() {
                    return this.SPOTLIGHTSPOTANGLE = Ve.propertyNameToID("u_SpotLight.Spot");
                }, "SPOTLIGHTRANGE", function() {
                    return this.SPOTLIGHTRANGE = Ve.propertyNameToID("u_SpotLight.Range");
                }, "SPOTLIGHTCOLOR", function() {
                    return this.SPOTLIGHTCOLOR = Ve.propertyNameToID("u_SpotLight.Color");
                }, "SHADOWDISTANCE", function() {
                    return this.SHADOWDISTANCE = Ve.propertyNameToID("u_shadowPSSMDistance");
                }, "SHADOWLIGHTVIEWPROJECT", function() {
                    return this.SHADOWLIGHTVIEWPROJECT = Ve.propertyNameToID("u_lightShadowVP");
                }, "SHADOWMAPPCFOFFSET", function() {
                    return this.SHADOWMAPPCFOFFSET = Ve.propertyNameToID("u_shadowPCFoffset");
                }, "SHADOWMAPTEXTURE1", function() {
                    return this.SHADOWMAPTEXTURE1 = Ve.propertyNameToID("u_shadowMap1");
                }, "SHADOWMAPTEXTURE2", function() {
                    return this.SHADOWMAPTEXTURE2 = Ve.propertyNameToID("u_shadowMap2");
                }, "SHADOWMAPTEXTURE3", function() {
                    return this.SHADOWMAPTEXTURE3 = Ve.propertyNameToID("u_shadowMap3");
                }, "AMBIENTCOLOR", function() {
                    return this.AMBIENTCOLOR = Ve.propertyNameToID("u_AmbientColor");
                }, "REFLECTIONTEXTURE", function() {
                    return this.REFLECTIONTEXTURE = Ve.propertyNameToID("u_ReflectTexture");
                }, "REFLETIONINTENSITY", function() {
                    return this.REFLETIONINTENSITY = Ve.propertyNameToID("u_ReflectIntensity");
                }, "TIME", function() {
                    return this.TIME = Ve.propertyNameToID("u_Time");
                }, "ANGLEATTENUATIONTEXTURE", function() {
                    return this.ANGLEATTENUATIONTEXTURE = Ve.propertyNameToID("u_AngleTexture");
                }, "RANGEATTENUATIONTEXTURE", function() {
                    return this.RANGEATTENUATIONTEXTURE = Ve.propertyNameToID("u_RangeTexture");
                }, "POINTLIGHTMATRIX", function() {
                    return this.POINTLIGHTMATRIX = Ve.propertyNameToID("u_PointLightMatrix");
                }, "SPOTLIGHTMATRIX", function() {
                    return this.SPOTLIGHTMATRIX = Ve.propertyNameToID("u_SpotLightMatrix");
                }]), t;
        }(O),
        Jn = function(e) {
            function t(e) {
                this.pickColor = null, this._render = null, t.__super.call(this, e);
            }
            r(t, "laya.d3.core.RenderableSprite3D", e);
            var n = t.prototype;
            return n._onInActive = function() {
                    laya.display.Node.prototype._onInActive.call(this);
                    var e = this._scene;
                    e._removeRenderObject(this._render), this._render.castShadow && e._removeShadowCastRenderObject(this._render);
                }, n._onActive = function() {
                    laya.display.Node.prototype._onActive.call(this);
                    var e = this._scene;
                    e._addRenderObject(this._render), this._render.castShadow && e._addShadowCastRenderObject(this._render);
                }, n._onActiveInScene = function() {
                    if (laya.display.Node.prototype._onActiveInScene.call(this), W._editerEnvironment) {
                        var e = this._scene,
                            t = new me();
                        e._allotPickColorByID(this.id, t), e._pickIdToSprite[this.id] = this, this._render._shaderValues.setVector(laya.d3.core.RenderableSprite3D.PICKCOLOR, t);
                    }
                }, n._addToInitStaticBatchManager = function() {}, n._setBelongScene = function(e) {
                    laya.display.Node.prototype._setBelongScene.call(this, e), this._render._setBelongScene(e);
                }, n._setUnBelongScene = function() {
                    this._render._defineDatas.remove(laya.d3.core.RenderableSprite3D.SAHDERDEFINE_LIGHTMAP),
                        laya.display.Node.prototype._setUnBelongScene.call(this);
                }, n._changeHierarchyAnimator = function(t) {
                    if (this._hierarchyAnimator) {
                        var n = this._hierarchyAnimator._renderableSprites;
                        n.splice(n.indexOf(this), 1);
                    }
                    t && t._renderableSprites.push(this), e.prototype._changeHierarchyAnimator.call(this, t);
                }, n.destroy = function(t) {
                    void 0 === t && (t = !0), e.prototype.destroy.call(this, t), this._render._destroy(),
                        this._render = null;
                }, t.__init__ = function() {
                    t.SHADERDEFINE_RECEIVE_SHADOW = t.shaderDefines.registerDefine("RECEIVESHADOW"),
                        t.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = t.shaderDefines.registerDefine("SCALEOFFSETLIGHTINGMAPUV"),
                        t.SAHDERDEFINE_LIGHTMAP = t.shaderDefines.registerDefine("LIGHTMAP");
                }, t.SHADERDEFINE_RECEIVE_SHADOW = 0, t.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = 0,
                t.SAHDERDEFINE_LIGHTMAP = 0, i(t, ["LIGHTMAPSCALEOFFSET", function() {
                    return this.LIGHTMAPSCALEOFFSET = Ve.propertyNameToID("u_LightmapScaleOffset");
                }, "LIGHTMAP", function() {
                    return this.LIGHTMAP = Ve.propertyNameToID("u_LightMap");
                }, "PICKCOLOR", function() {
                    return this.PICKCOLOR = Ve.propertyNameToID("u_PickColor");
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe();
                }]), t;
        }(Fn),
        $n = function(e) {
            function t() {
                this._albedoIntensity = 1, this._enableVertexColor = !1, this._albedoColor = new me(1, 1, 1, 1),
                    t.__super.call(this), this.setShaderName("Unlit"), this._shaderValues.setVector(t.ALBEDOCOLOR, new me(1, 1, 1, 1)),
                    this.renderMode = 0;
            }
            r(t, "laya.d3.core.material.UnlitMaterial", e);
            var n = t.prototype;
            return a(0, n, "_ColorB", function() {
                    return this._albedoColor.z;
                }, function(e) {
                    this._albedoColor.z = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorR", function() {
                    return this._albedoColor.x;
                }, function(e) {
                    this._albedoColor.x = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "albedoColorA", function() {
                    return this._ColorA;
                }, function(e) {
                    this._ColorA = e;
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "_ColorG", function() {
                    return this._albedoColor.y;
                }, function(e) {
                    this._albedoColor.y = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorA", function() {
                    return this._albedoColor.w;
                }, function(e) {
                    this._albedoColor.w = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_AlbedoIntensity", function() {
                    return this._albedoIntensity;
                }, function(e) {
                    if (this._albedoIntensity !== e) {
                        var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
                        me.scale(this._albedoColor, e, n), this._albedoIntensity = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
                    }
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "_Cutoff", function() {
                    return this.alphaTestValue;
                }, function(e) {
                    this.alphaTestValue = e;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "albedoColorR", function() {
                    return this._ColorR;
                }, function(e) {
                    this._ColorR = e;
                }), a(0, n, "albedoColorG", function() {
                    return this._ColorG;
                }, function(e) {
                    this._ColorG = e;
                }), a(0, n, "albedoColorB", function() {
                    return this._ColorB;
                }, function(e) {
                    this._ColorB = e;
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "albedoColor", function() {
                    return this._albedoColor;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
                    me.scale(e, this._albedoIntensity, n), this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
                }), a(0, n, "albedoIntensity", function() {
                    return this._albedoIntensity;
                }, function(e) {
                    this._AlbedoIntensity = e;
                }), a(0, n, "enableVertexColor", function() {
                    return this._enableVertexColor;
                }, function(e) {
                    this._enableVertexColor = e, e ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);
                }), a(0, n, "albedoTexture", function() {
                    return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE),
                        this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 0:
                            this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513;
                            break;

                        case 1:
                            this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513;
                            break;

                        case 2:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513;
                            break;

                        default:
                            throw new Error("UnlitMaterial : renderMode value error.");
                    }
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_ALBEDOTEXTURE = t.shaderDefines.registerDefine("ALBEDOTEXTURE"),
                        t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), t.SHADERDEFINE_ENABLEVERTEXCOLOR = t.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
                }, t.RENDERMODE_OPAQUE = 0, t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_TRANSPARENT = 2,
                t.RENDERMODE_ADDTIVE = 3, t.SHADERDEFINE_ALBEDOTEXTURE = 0, t.SHADERDEFINE_TILINGOFFSET = 0,
                t.SHADERDEFINE_ENABLEVERTEXCOLOR = 0, i(t, ["ALBEDOTEXTURE", function() {
                    return this.ALBEDOTEXTURE = Ve.propertyNameToID("u_AlbedoTexture");
                }, "ALBEDOCOLOR", function() {
                    return this.ALBEDOCOLOR = Ve.propertyNameToID("u_AlbedoColor");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        ei = function(e) {
            function t() {
                this._intensityColor = null, this._intensity = NaN, this._shadow = !1, this._shadowFarPlane = 0,
                    this._shadowMapSize = 0, this._shadowMapCount = 0, this._shadowMapPCFType = 0, this._parallelSplitShadowMap = null,
                    this._lightmapBakedType = 0, this.color = null, t.__super.call(this), this._intensity = 1,
                    this._intensityColor = new Te(), this.color = new Te(1, 1, 1), this._shadow = !1,
                    this._shadowFarPlane = 8, this._shadowMapSize = 512, this._shadowMapCount = 1, this._shadowMapPCFType = 0,
                    this._lightmapBakedType = t.LIGHTMAPBAKEDTYPE_REALTIME;
            }
            r(t, "laya.d3.core.light.LightSprite", e);
            var n = t.prototype;
            return n._parse = function(t, n) {
                    e.prototype._parse.call(this, t, n);
                    var i = t.color;
                    this.color.fromArray(i), this.intensity = t.intensity, this.lightmapBakedType = t.lightmapBakedType;
                }, n._onActive = function() {
                    laya.display.Node.prototype._onActive.call(this), this.lightmapBakedType !== t.LIGHTMAPBAKEDTYPE_BAKED && this._scene._addLight(this);
                }, n._onInActive = function() {
                    laya.display.Node.prototype._onInActive.call(this), this.lightmapBakedType !== t.LIGHTMAPBAKEDTYPE_BAKED && this._scene._removeLight(this);
                }, n._prepareToScene = function() {
                    return !1;
                }, a(0, n, "lightmapBakedType", function() {
                    return this._lightmapBakedType;
                }, function(e) {
                    this._lightmapBakedType !== e && (this._lightmapBakedType = e, this.activeInHierarchy && (e !== t.LIGHTMAPBAKEDTYPE_BAKED ? this._scene._addLight(this) : this._scene._removeLight(this)));
                }), a(0, n, "shadowPCFType", function() {
                    return this._shadowMapPCFType;
                }, function(e) {
                    this._shadowMapPCFType = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setPCFType(e);
                }), a(0, n, "intensity", function() {
                    return this._intensity;
                }, function(e) {
                    this._intensity = e;
                }), a(0, n, "shadow", function() {
                    return this._shadow;
                }, function(e) {
                    throw new Error("LightSprite: must override it.");
                }), a(0, n, "shadowDistance", function() {
                    return this._shadowFarPlane;
                }, function(e) {
                    this._shadowFarPlane = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setFarDistance(e);
                }), a(0, n, "shadowPSSMCount", function() {
                    return this._shadowMapCount;
                }, function(e) {
                    this._shadowMapCount = e, this._parallelSplitShadowMap && (this._parallelSplitShadowMap.shadowMapCount = e);
                }), a(0, n, "shadowResolution", function() {
                    return this._shadowMapSize;
                }, function(e) {
                    this._shadowMapSize = e, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setShadowMapTextureSize(e);
                }), a(0, n, "diffuseColor", function() {
                    return console.log("LightSprite: discard property,please use color property instead."),
                        this.color;
                }, function(e) {
                    console.log("LightSprite: discard property,please use color property instead."),
                        this.color = e;
                }), t.LIGHTMAPBAKEDTYPE_REALTIME = 0, t.LIGHTMAPBAKEDTYPE_MIXED = 1, t.LIGHTMAPBAKEDTYPE_BAKED = 2,
                t;
        }(Fn),
        ti = function(e) {
            function t(e) {
                this._terrainRes = null, this._lightmapScaleOffset = null, t.__super.call(this),
                    this._lightmapScaleOffset = new me(1, 1, 0, 0), e && (this._terrainRes = e, this.buildTerrain(e));
            }
            r(t, "laya.d3.terrain.Terrain", e);
            var i = t.prototype;
            return i._parse = function(t, n) {
                    e.prototype._parse.call(this, t, n), this.terrainRes = S.getRes(t.dataPath);
                    var i = t.lightmapIndex;
                    null != i && this.setLightmapIndex(i);
                    var r = t.lightmapScaleOffset;
                    r && this.setLightmapScaleOffset(new me(r[0], r[1], r[2], r[3]));
                }, i.setLightmapIndex = function(e) {
                    for (var t = 0; t < this._children.length; t++) {
                        var n = this._children[t];
                        n.terrainRender.lightmapIndex = e;
                    }
                }, i.setLightmapScaleOffset = function(e) {
                    if (e) {
                        e.cloneTo(this._lightmapScaleOffset);
                        for (var t = 0; t < this._children.length; t++) {
                            var n = this._children[t];
                            n.terrainRender.lightmapScaleOffset = this._lightmapScaleOffset;
                        }
                    }
                }, i.disableLight = function() {
                    for (var e = 0, t = this._children.length; t > e; e++)
                        for (var n = this._children[e], i = 0, r = n._render.sharedMaterials.length; r > i; i++) {
                            var a = n._render.sharedMaterials[i];
                            a.disableLight();
                        }
                }, i.buildTerrain = function(e) {
                    for (var t = e._chunkNumX, n = e._chunkNumZ, i = e._heightData, r = 0, a = 0; n > a; a++)
                        for (var o = 0; t > o; o++) {
                            for (var s = new Ri(o, a, e._gridSize, i._terrainHeightData, i._width, i._height, e._cameraCoordinateInverse), l = e._chunkInfos[r++], h = 0; h < l.alphaMap.length; h++) {
                                var u = l.detailID[h].length,
                                    c = u > 0 ? e._detailTextureInfos[l.detailID[h][0]].diffuseTexture : null,
                                    _ = u > 1 ? e._detailTextureInfos[l.detailID[h][1]].diffuseTexture : null,
                                    d = u > 2 ? e._detailTextureInfos[l.detailID[h][2]].diffuseTexture : null,
                                    f = u > 3 ? e._detailTextureInfos[l.detailID[h][3]].diffuseTexture : null,
                                    m = u > 0 ? e._detailTextureInfos[l.detailID[h][0]].scale : null,
                                    p = u > 1 ? e._detailTextureInfos[l.detailID[h][1]].scale : null,
                                    T = u > 2 ? e._detailTextureInfos[l.detailID[h][2]].scale : null,
                                    E = u > 3 ? e._detailTextureInfos[l.detailID[h][3]].scale : null;
                                s.buildRenderElementAndMaterial(u, l.normalMap, l.alphaMap[h], c, _, d, f, e._materialInfo.ambientColor, e._materialInfo.diffuseColor, e._materialInfo.specularColor, m ? m.x : 1, m ? m.y : 1, p ? p.x : 1, p ? p.y : 1, T ? T.x : 1, T ? T.y : 1, E ? E.x : 1, E ? E.y : 1);
                            }
                            s.terrainRender.receiveShadow = !0, s.terrainRender.lightmapScaleOffset = this._lightmapScaleOffset,
                                this.addChild(s);
                        }
                }, i.width = function() {
                    return this._terrainRes._chunkNumX * ce.CHUNK_GRID_NUM * this._terrainRes._gridSize;
                }, i.depth = function() {
                    return this._terrainRes._chunkNumZ * ce.CHUNK_GRID_NUM * this._terrainRes._gridSize;
                }, i.getHeightXZ = function(e, n) {
                    if (!this._terrainRes) return NaN;
                    if (e -= this.transform.position.x, n -= this.transform.position.z, t.__VECTOR3__ || (t.__VECTOR3__ = new Te()),
                        t.__VECTOR3__.x = e, t.__VECTOR3__.y = 0, t.__VECTOR3__.z = n, Te.transformV3ToV3(t.__VECTOR3__, ce.__ADAPT_MATRIX_INV__, t.__VECTOR3__),
                        e = t.__VECTOR3__.x, n = t.__VECTOR3__.z, 0 > e || e > this.width() || 0 > n || n > this.depth()) return NaN;
                    var i = this._terrainRes._gridSize,
                        r = parseInt("" + e / i),
                        a = parseInt("" + n / i),
                        o = e - r * i,
                        s = n - a * i,
                        l = NaN,
                        h = NaN,
                        u = NaN,
                        c = NaN,
                        _ = NaN,
                        d = this._terrainRes._heightData;
                    return o + s > i ? (l = d._terrainHeightData[(a + 1 - 1) * d._width + r + 1], h = d._terrainHeightData[(a + 1 - 1) * d._width + r],
                        u = d._terrainHeightData[(a - 1) * d._width + r + 1], c = (i - o) / i, _ = (i - s) / i,
                        l + (h - l) * c + (u - l) * _) : (l = d._terrainHeightData[Math.max(0, a - 1) * d._width + r],
                        h = d._terrainHeightData[Math.min(d._width * d._height - 1, (a + 1 - 1) * d._width + r)],
                        u = d._terrainHeightData[Math.min(d._width * d._height - 1, Math.max(0, a - 1) * d._width + r + 1)],
                        c = o / i, _ = s / i, l + (h - l) * _ + (u - l) * c);
                }, a(0, i, "terrainRes", null, function(e) {
                    e && (this._terrainRes = e, this.buildTerrain(e));
                }), t.load = function(e) {
                    n.loader.create(e, null, null, "TERRAIN", null, null, 1, !1);
                }, t.RENDER_LINE_MODEL = !1, t.LOD_TOLERANCE_VALUE = 4, t.LOD_DISTANCE_FACTOR = 2,
                t.__VECTOR3__ = null, t;
        }(Fn),
        ni = function(e) {
            function t() {
                this._color = null, t.__super.call(this), this.setShaderName("Trail"), this._color = new me(1, 1, 1, 1),
                    this._shaderValues.setVector(t.TINTCOLOR, new me(1, 1, 1, 1)), this.renderMode = 0;
            }
            r(t, "laya.d3.core.trail.TrailMaterial", e);
            var n = t.prototype;
            return a(0, n, "_TintColorB", function() {
                    return this._color.z;
                }, function(e) {
                    this._color.z = e, this.color = this._color;
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "texture", function() {
                    return this._shaderValues.getTexture(t.MAINTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_MAINTEXTURE),
                        this._shaderValues.setTexture(t.MAINTEXTURE, e);
                }), a(0, n, "_TintColorR", function() {
                    return this._color.x;
                }, function(e) {
                    this._color.x = e, this.color = this._color;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "_TintColorG", function() {
                    return this._color.y;
                }, function(e) {
                    this._color.y = e, this.color = this._color;
                }), a(0, n, "_TintColorA", function() {
                    return this._color.w;
                }, function(e) {
                    this._color.w = e, this.color = this._color;
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 1:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 1, this.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ADDTIVEFOG);
                            break;

                        case 0:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513,
                                this._defineDatas.remove(t.SHADERDEFINE_ADDTIVEFOG);
                            break;

                        default:
                            throw new Error("TrailMaterial : renderMode value error.");
                    }
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "colorR", function() {
                    return this._TintColorR;
                }, function(e) {
                    this._TintColorR = e;
                }), a(0, n, "colorG", function() {
                    return this._TintColorG;
                }, function(e) {
                    this._TintColorG = e;
                }), a(0, n, "colorB", function() {
                    return this._TintColorB;
                }, function(e) {
                    this._TintColorB = e;
                }), a(0, n, "colorA", function() {
                    return this._TintColorA;
                }, function(e) {
                    this._TintColorA = e;
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "color", function() {
                    return this._shaderValues.getVector(t.TINTCOLOR);
                }, function(e) {
                    this._shaderValues.setVector(t.TINTCOLOR, e);
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_MAINTEXTURE = t.shaderDefines.registerDefine("MAINTEXTURE"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"),
                        t.SHADERDEFINE_ADDTIVEFOG = t.shaderDefines.registerDefine("ADDTIVEFOG");
                }, t.RENDERMODE_ALPHABLENDED = 0, t.RENDERMODE_ADDTIVE = 1, t.SHADERDEFINE_MAINTEXTURE = 0,
                t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ADDTIVEFOG = 0, i(t, ["defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "MAINTEXTURE", function() {
                    return this.MAINTEXTURE = Ve.propertyNameToID("u_MainTexture");
                }, "TINTCOLOR", function() {
                    return this.TINTCOLOR = Ve.propertyNameToID("u_MainColor");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        ii = function(e) {
            function t() {
                this._sunDisk = 0, t.__super.call(this), this.setShaderName("SkyBoxProcedural"),
                    this.sunDisk = 1, this.sunSize = .04, this.sunSizeConvergence = 5, this.atmosphereThickness = 1,
                    this.skyTint = new me(.5, .5, .5, 1), this.groundTint = new me(.369, .349, .341, 1),
                    this.exposure = 1.3;
            }
            r(t, "laya.d3.core.material.SkyProceduralMaterial", e);
            var n = t.prototype;
            return a(0, n, "exposure", function() {
                    return this._shaderValues.getNumber(t.EXPOSURE);
                }, function(e) {
                    e = Math.min(Math.max(0, e), 8), this._shaderValues.setNumber(t.EXPOSURE, e);
                }), a(0, n, "sunSize", function() {
                    return this._shaderValues.getNumber(t.SUNSIZE);
                }, function(e) {
                    e = Math.min(Math.max(0, e), 1), this._shaderValues.setNumber(t.SUNSIZE, e);
                }), a(0, n, "sunDisk", function() {
                    return this._sunDisk;
                }, function(e) {
                    switch (e) {
                        case 1:
                            this._defineDatas.remove(t.SHADERDEFINE_SUN_SIMPLE), this._defineDatas.add(t.SHADERDEFINE_SUN_HIGH_QUALITY);
                            break;

                        case 2:
                            this._defineDatas.remove(t.SHADERDEFINE_SUN_HIGH_QUALITY), this._defineDatas.add(t.SHADERDEFINE_SUN_SIMPLE);
                            break;

                        case 0:
                            this._defineDatas.remove(t.SHADERDEFINE_SUN_HIGH_QUALITY), this._defineDatas.remove(t.SHADERDEFINE_SUN_SIMPLE);
                            break;

                        default:
                            throw "SkyBoxProceduralMaterial: unknown sun value.";
                    }
                    this._sunDisk = e;
                }), a(0, n, "sunSizeConvergence", function() {
                    return this._shaderValues.getNumber(t.SUNSIZECONVERGENCE);
                }, function(e) {
                    e = Math.min(Math.max(0, e), 20), this._shaderValues.setNumber(t.SUNSIZECONVERGENCE, e);
                }), a(0, n, "atmosphereThickness", function() {
                    return this._shaderValues.getNumber(t.ATMOSPHERETHICKNESS);
                }, function(e) {
                    e = Math.min(Math.max(0, e), 5), this._shaderValues.setNumber(t.ATMOSPHERETHICKNESS, e);
                }), a(0, n, "groundTint", function() {
                    return this._shaderValues.getVector(t.GROUNDTINT);
                }, function(e) {
                    this._shaderValues.setVector(t.GROUNDTINT, e);
                }), a(0, n, "skyTint", function() {
                    return this._shaderValues.getVector(t.SKYTINT);
                }, function(e) {
                    this._shaderValues.setVector(t.SKYTINT, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_SUN_HIGH_QUALITY = t.shaderDefines.registerDefine("SUN_HIGH_QUALITY"),
                        t.SHADERDEFINE_SUN_SIMPLE = t.shaderDefines.registerDefine("SUN_SIMPLE");
                }, t.SUN_NODE = 0, t.SUN_HIGH_QUALITY = 1, t.SUN_SIMPLE = 2, t.SHADERDEFINE_SUN_HIGH_QUALITY = 0,
                t.SHADERDEFINE_SUN_SIMPLE = 0, i(t, ["SUNSIZE", function() {
                    return this.SUNSIZE = Ve.propertyNameToID("u_SunSize");
                }, "SUNSIZECONVERGENCE", function() {
                    return this.SUNSIZECONVERGENCE = Ve.propertyNameToID("u_SunSizeConvergence");
                }, "ATMOSPHERETHICKNESS", function() {
                    return this.ATMOSPHERETHICKNESS = Ve.propertyNameToID("u_AtmosphereThickness");
                }, "SKYTINT", function() {
                    return this.SKYTINT = Ve.propertyNameToID("u_SkyTint");
                }, "GROUNDTINT", function() {
                    return this.GROUNDTINT = Ve.propertyNameToID("u_GroundTint");
                }, "EXPOSURE", function() {
                    return this.EXPOSURE = Ve.propertyNameToID("u_Exposure");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        ri = function(e) {
            function t() {
                t.__super.call(this), this.setShaderName("LineShader"), this._shaderValues.setVector(t.COLOR, new me(1, 1, 1, 1));
            }
            r(t, "laya.d3.core.pixelLine.PixelLineMaterial", e);
            var n = t.prototype;
            return a(0, n, "blend", function() {
                return this._shaderValues.getInt(t.BLEND);
            }, function(e) {
                this._shaderValues.setInt(t.BLEND, e);
            }), a(0, n, "color", function() {
                return this._shaderValues.getVector(t.COLOR);
            }, function(e) {
                this._shaderValues.setVector(t.COLOR, e);
            }), a(0, n, "cull", function() {
                return this._shaderValues.getInt(t.CULL);
            }, function(e) {
                this._shaderValues.setInt(t.CULL, e);
            }), a(0, n, "depthWrite", function() {
                return this._shaderValues.getBool(t.DEPTH_WRITE);
            }, function(e) {
                this._shaderValues.setBool(t.DEPTH_WRITE, e);
            }), a(0, n, "blendSrc", function() {
                return this._shaderValues.getInt(t.BLEND_SRC);
            }, function(e) {
                this._shaderValues.setInt(t.BLEND_SRC, e);
            }), a(0, n, "blendDst", function() {
                return this._shaderValues.getInt(t.BLEND_DST);
            }, function(e) {
                this._shaderValues.setInt(t.BLEND_DST, e);
            }), a(0, n, "depthTest", function() {
                return this._shaderValues.getInt(t.DEPTH_TEST);
            }, function(e) {
                this._shaderValues.setInt(t.DEPTH_TEST, e);
            }), i(t, ["COLOR", function() {
                return this.COLOR = Ve.propertyNameToID("u_Color");
            }, "defaultMaterial", function() {
                return this.defaultMaterial = new t();
            }, "shaderDefines", function() {
                return this.shaderDefines = new pe(Bn.shaderDefines);
            }, "CULL", function() {
                return this.CULL = Ve.propertyNameToID("s_Cull");
            }, "BLEND", function() {
                return this.BLEND = Ve.propertyNameToID("s_Blend");
            }, "BLEND_SRC", function() {
                return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
            }, "BLEND_DST", function() {
                return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
            }, "DEPTH_TEST", function() {
                return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
            }, "DEPTH_WRITE", function() {
                return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
            }]), t;
        }(Bn),
        ai = function(e) {
            function t(e, i) {
                t.__super.call(this), this._skyRenderer = new mt(), this._forward = new Te(), this._up = new Te(),
                    this.clearColor = new me(100 / 255, 149 / 255, 237 / 255, 1), void 0 === e && (e = .3),
                    void 0 === i && (i = 1e3), this._shaderValues = new ue(null), this._fieldOfView = 60,
                    this._useUserProjectionMatrix = !1, this._orthographic = !1, this._orthographicVerticalSize = 10,
                    this.renderingOrder = 0, this._nearPlane = e, this._farPlane = i, this.cullingMask = 2147483647,
                    this.clearFlag = 0, this.useOcclusionCulling = !0, this._calculateProjectionMatrix(),
                    n.stage.on("resize", this, this._onScreenSizeChanged);
            }
            r(t, "laya.d3.core.BaseCamera", e);
            var o = t.prototype;
            return o._sortCamerasByRenderingOrder = function() {
                    if (this.displayedInStage)
                        for (var e = this.scene._cameraPool, t = e.length - 1, n = 0; t > n; n++)
                            if (e[n].renderingOrder > e[t].renderingOrder) {
                                var i = e[n];
                                e[n] = e[t], e[t] = i;
                            }
                }, o._calculateProjectionMatrix = function() {}, o._onScreenSizeChanged = function() {
                    this._calculateProjectionMatrix();
                }, o._prepareCameraToRender = function() {
                    this.transform.getForward(this._forward), this.transform.getUp(this._up);
                    var e = this._shaderValues;
                    e.setVector3(laya.d3.core.BaseCamera.CAMERAPOS, this.transform.position), e.setVector3(laya.d3.core.BaseCamera.CAMERADIRECTION, this._forward),
                        e.setVector3(laya.d3.core.BaseCamera.CAMERAUP, this._up);
                }, o._prepareCameraViewProject = function(e, n, i, r) {
                    var a = this._shaderValues;
                    a.setMatrix4x4(laya.d3.core.BaseCamera.VIEWMATRIX, e), a.setMatrix4x4(laya.d3.core.BaseCamera.PROJECTMATRIX, n),
                        a.setMatrix4x4(laya.d3.core.BaseCamera.VIEWPROJECTMATRIX, i), this.transform.worldMatrix.cloneTo(t._tempMatrix4x40),
                        t._tempMatrix4x40.transpose(), Ht.multiply(n, t._tempMatrix4x40, r), a.setMatrix4x4(laya.d3.core.BaseCamera.VPMATRIX_NO_TRANSLATE, r);
                }, o.render = function(e, t) {}, o.addLayer = function(e) {
                    this.cullingMask |= Math.pow(2, e);
                }, o.removeLayer = function(e) {
                    this.cullingMask &= ~Math.pow(2, e);
                }, o.addAllLayers = function() {
                    this.cullingMask = 2147483647;
                }, o.removeAllLayers = function() {
                    this.cullingMask = 0;
                }, o.resetProjectionMatrix = function() {
                    this._useUserProjectionMatrix = !1, this._calculateProjectionMatrix();
                }, o._onActive = function() {
                    this._scene._addCamera(this), laya.display.Node.prototype._onActive.call(this);
                }, o._onInActive = function() {
                    this._scene._removeCamera(this), laya.display.Node.prototype._onInActive.call(this);
                }, o._parse = function(t, n) {
                    e.prototype._parse.call(this, t, n);
                    var i = t.clearFlag;
                    void 0 !== i && (this.clearFlag = i), this.orthographic = t.orthographic, this.fieldOfView = t.fieldOfView,
                        this.nearPlane = t.nearPlane, this.farPlane = t.farPlane;
                    var r = t.clearColor;
                    this.clearColor = new me(r[0], r[1], r[2], r[3]);
                    var a = t.skyboxMaterial;
                    a && (this._skyRenderer.material = S.getRes(a.path));
                }, o.destroy = function(t) {
                    void 0 === t && (t = !0), this._skyRenderer.destroy(), this._skyRenderer = null,
                        n.stage.off("resize", this, this._onScreenSizeChanged), e.prototype.destroy.call(this, t);
                }, a(0, o, "renderingOrder", function() {
                    return this._renderingOrder;
                }, function(e) {
                    this._renderingOrder = e, this._sortCamerasByRenderingOrder();
                }), a(0, o, "skyRenderer", function() {
                    return this._skyRenderer;
                }), a(0, o, "orthographic", function() {
                    return this._orthographic;
                }, function(e) {
                    this._orthographic = e, this._calculateProjectionMatrix();
                }), a(0, o, "fieldOfView", function() {
                    return this._fieldOfView;
                }, function(e) {
                    this._fieldOfView = e, this._calculateProjectionMatrix();
                }), a(0, o, "nearPlane", function() {
                    return this._nearPlane;
                }, function(e) {
                    this._nearPlane = e, this._calculateProjectionMatrix();
                }), a(0, o, "farPlane", function() {
                    return this._farPlane;
                }, function(e) {
                    this._farPlane = e, this._calculateProjectionMatrix();
                }), a(0, o, "orthographicVerticalSize", function() {
                    return this._orthographicVerticalSize;
                }, function(e) {
                    this._orthographicVerticalSize = e, this._calculateProjectionMatrix();
                }), t.RENDERINGTYPE_DEFERREDLIGHTING = "DEFERREDLIGHTING", t.RENDERINGTYPE_FORWARDRENDERING = "FORWARDRENDERING",
                t.CLEARFLAG_SOLIDCOLOR = 0, t.CLEARFLAG_SKY = 1, t.CLEARFLAG_DEPTHONLY = 2, t.CLEARFLAG_NONE = 3,
                i(t, ["_tempMatrix4x40", function() {
                    return this._tempMatrix4x40 = new Ht();
                }, "CAMERAPOS", function() {
                    return this.CAMERAPOS = Ve.propertyNameToID("u_CameraPos");
                }, "VIEWMATRIX", function() {
                    return this.VIEWMATRIX = Ve.propertyNameToID("u_View");
                }, "PROJECTMATRIX", function() {
                    return this.PROJECTMATRIX = Ve.propertyNameToID("u_Projection");
                }, "VIEWPROJECTMATRIX", function() {
                    return this.VIEWPROJECTMATRIX = Ve.propertyNameToID("u_ViewProjection");
                }, "VPMATRIX_NO_TRANSLATE", function() {
                    return this.VPMATRIX_NO_TRANSLATE = Ve.propertyNameToID("u_MvpMatrix");
                }, "CAMERADIRECTION", function() {
                    return this.CAMERADIRECTION = Ve.propertyNameToID("u_CameraDirection");
                }, "CAMERAUP", function() {
                    return this.CAMERAUP = Ve.propertyNameToID("u_CameraUp");
                }, "_invertYScaleMatrix", function() {
                    return this._invertYScaleMatrix = new Ht(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
                }, "_invertYProjectionMatrix", function() {
                    return this._invertYProjectionMatrix = new Ht();
                }, "_invertYProjectionViewMatrix", function() {
                    return this._invertYProjectionViewMatrix = new Ht();
                }]), t;
        }(Fn),
        oi = function(e) {
            function t() {
                this._albedoColor = null, this._emissionColor = null, t.__super.call(this), this.setShaderName("PBRStandard"),
                    this._albedoColor = new me(1, 1, 1, 1), this._shaderValues.setVector(t.ALBEDOCOLOR, new me(1, 1, 1, 1)),
                    this._emissionColor = new me(0, 0, 0, 0), this._shaderValues.setVector(t.EMISSIONCOLOR, new me(0, 0, 0, 0)),
                    this._shaderValues.setNumber(t.METALLIC, 0), this._shaderValues.setNumber(t.SMOOTHNESS, .5),
                    this._shaderValues.setNumber(t.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber(t.SMOOTHNESSSOURCE, 0),
                    this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber(t.NORMALSCALE, 1),
                    this._shaderValues.setNumber(t.PARALLAXSCALE, .001), this._shaderValues.setBool(t.ENABLEEMISSION, !1),
                    this._shaderValues.setBool(t.ENABLEREFLECT, !0), this._shaderValues.setNumber(Bn.ALPHATESTVALUE, .5),
                    this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_REFLECTMAP), this.renderMode = 0;
            }
            r(t, "laya.d3.core.material.PBRStandardMaterial", e);
            var n = t.prototype;
            return n.cloneTo = function(t) {
                    e.prototype.cloneTo.call(this, t);
                    var n = t;
                    this._albedoColor.cloneTo(n._albedoColor), this._emissionColor.cloneTo(n._emissionColor);
                }, a(0, n, "_Parallax", function() {
                    return this._shaderValues.getNumber(t.PARALLAXSCALE);
                }, function(e) {
                    this._shaderValues.setNumber(t.PARALLAXSCALE, e);
                }), a(0, n, "_ColorB", function() {
                    return this._albedoColor.z;
                }, function(e) {
                    this._albedoColor.z = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorR", function() {
                    return this._albedoColor.x;
                }, function(e) {
                    this._albedoColor.x = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorG", function() {
                    return this._albedoColor.y;
                }, function(e) {
                    this._albedoColor.y = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "metallic", function() {
                    return this._Metallic;
                }, function(e) {
                    this._Metallic = Math.max(0, Math.min(1, e));
                }), a(0, n, "_GlossMapScale", function() {
                    return this._shaderValues.getNumber(t.SMOOTHNESSSCALE);
                }, function(e) {
                    this._shaderValues.setNumber(t.SMOOTHNESSSCALE, e);
                }), a(0, n, "_Glossiness", function() {
                    return this._shaderValues.getNumber(t.SMOOTHNESS);
                }, function(e) {
                    this._shaderValues.setNumber(t.SMOOTHNESS, e);
                }), a(0, n, "_ColorA", function() {
                    return this._albedoColor.w;
                }, function(e) {
                    this._albedoColor.w = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "enableReflection", function() {
                    return this._shaderValues.getBool(t.ENABLEREFLECT);
                }, function(e) {
                    this._shaderValues.setBool(t.ENABLEREFLECT, !0), e ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_REFLECTMAP);
                }), a(0, n, "_Metallic", function() {
                    return this._shaderValues.getNumber(t.METALLIC);
                }, function(e) {
                    this._shaderValues.setNumber(t.METALLIC, e);
                }), a(0, n, "_BumpScale", function() {
                    return this._shaderValues.getNumber(t.NORMALSCALE);
                }, function(e) {
                    this._shaderValues.setNumber(t.NORMALSCALE, e);
                }), a(0, n, "_OcclusionStrength", function() {
                    return this._shaderValues.getNumber(t.OCCLUSIONSTRENGTH);
                }, function(e) {
                    this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, e);
                }), a(0, n, "_EmissionColorR", function() {
                    return this._emissionColor.x;
                }, function(e) {
                    this._emissionColor.x = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "_EmissionColorG", function() {
                    return this._emissionColor.y;
                }, function(e) {
                    this._emissionColor.y = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "_EmissionColorB", function() {
                    return this._emissionColor.z;
                }, function(e) {
                    this._emissionColor.z = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "_EmissionColorA", function() {
                    return this._emissionColor.w;
                }, function(e) {
                    this._emissionColor.w = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "albedoColorA", function() {
                    return this._ColorA;
                }, function(e) {
                    this._ColorA = e;
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "_Cutoff", function() {
                    return this.alphaTestValue;
                }, function(e) {
                    this.alphaTestValue = e;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "albedoColorR", function() {
                    return this._ColorR;
                }, function(e) {
                    this._ColorR = e;
                }), a(0, n, "albedoColorG", function() {
                    return this._ColorG;
                }, function(e) {
                    this._ColorG = e;
                }), a(0, n, "albedoColorB", function() {
                    return this._ColorB;
                }, function(e) {
                    this._ColorB = e;
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "albedoColor", function() {
                    return this._albedoColor;
                }, function(e) {
                    this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, e);
                }), a(0, n, "albedoTexture", function() {
                    return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_ALBEDOTEXTURE),
                        this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "parallaxTexture", function() {
                    return this._shaderValues.getTexture(t.PARALLAXTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_PARALLAXTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_PARALLAXTEXTURE),
                        this._shaderValues.setTexture(t.PARALLAXTEXTURE, e);
                }), a(0, n, "normalTexture", function() {
                    return this._shaderValues.getTexture(t.NORMALTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_NORMALTEXTURE),
                        this._shaderValues.setTexture(t.NORMALTEXTURE, e);
                }), a(0, n, "emissionColor", function() {
                    return this._shaderValues.getVector(t.EMISSIONCOLOR);
                }, function(e) {
                    this._shaderValues.setVector(t.EMISSIONCOLOR, e);
                }), a(0, n, "parallaxTextureScale", function() {
                    return this._Parallax;
                }, function(e) {
                    this._Parallax = Math.max(.005, Math.min(.08, e));
                }), a(0, n, "normalTextureScale", function() {
                    return this._BumpScale;
                }, function(e) {
                    this._BumpScale = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "occlusionTexture", function() {
                    return this._shaderValues.getTexture(t.OCCLUSIONTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_OCCLUSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_OCCLUSIONTEXTURE),
                        this._shaderValues.setTexture(t.OCCLUSIONTEXTURE, e);
                }), a(0, n, "occlusionTextureStrength", function() {
                    return this._OcclusionStrength;
                }, function(e) {
                    this._OcclusionStrength = Math.max(0, Math.min(1, e));
                }), a(0, n, "enableEmission", function() {
                    return this._shaderValues.getBool(t.ENABLEEMISSION);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSION) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSION),
                        this._shaderValues.setBool(t.ENABLEEMISSION, e);
                }), a(0, n, "metallicGlossTexture", function() {
                    return this._shaderValues.getTexture(t.METALLICGLOSSTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE),
                        this._shaderValues.setTexture(t.METALLICGLOSSTEXTURE, e);
                }), a(0, n, "emissionColorA", function() {
                    return this._EmissionColorA;
                }, function(e) {
                    this._EmissionColorA = e;
                }), a(0, n, "smoothness", function() {
                    return this._Glossiness;
                }, function(e) {
                    this._Glossiness = Math.max(0, Math.min(1, e));
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "smoothnessTextureScale", function() {
                    return this._GlossMapScale;
                }, function(e) {
                    this._GlossMapScale = Math.max(0, Math.min(1, e));
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "smoothnessSource", function() {
                    return this._shaderValues.getInt(t.SMOOTHNESSSOURCE);
                }, function(e) {
                    e ? (this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA),
                        this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 1)) : (this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA),
                        this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 0));
                }), a(0, n, "emissionColorR", function() {
                    return this._EmissionColorR;
                }, function(e) {
                    this._EmissionColorR = e;
                }), a(0, n, "emissionColorG", function() {
                    return this._EmissionColorG;
                }, function(e) {
                    this._EmissionColorG = e;
                }), a(0, n, "emissionColorB", function() {
                    return this._EmissionColorB;
                }, function(e) {
                    this._EmissionColorB = e;
                }), a(0, n, "emissionTexture", function() {
                    return this._shaderValues.getTexture(t.EMISSIONTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSIONTEXTURE),
                        this._shaderValues.setTexture(t.EMISSIONTEXTURE, e);
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 0:
                            this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        case 1:
                            this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        case 2:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513,
                                this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        case 3:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2,
                                this.blend = 1, this.blendSrc = 1, this.blendDst = 771, this.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        default:
                            throw new Error("PBRSpecularMaterial : renderMode value error.");
                    }
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_ALBEDOTEXTURE = t.shaderDefines.registerDefine("ALBEDOTEXTURE"),
                        t.SHADERDEFINE_METALLICGLOSSTEXTURE = t.shaderDefines.registerDefine("METALLICGLOSSTEXTURE"),
                        t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = t.shaderDefines.registerDefine("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"),
                        t.SHADERDEFINE_NORMALTEXTURE = t.shaderDefines.registerDefine("NORMALTEXTURE"),
                        t.SHADERDEFINE_PARALLAXTEXTURE = t.shaderDefines.registerDefine("PARALLAXTEXTURE"),
                        t.SHADERDEFINE_OCCLUSIONTEXTURE = t.shaderDefines.registerDefine("OCCLUSIONTEXTURE"),
                        t.SHADERDEFINE_EMISSION = t.shaderDefines.registerDefine("EMISSION"), t.SHADERDEFINE_EMISSIONTEXTURE = t.shaderDefines.registerDefine("EMISSIONTEXTURE"),
                        t.SHADERDEFINE_REFLECTMAP = t.shaderDefines.registerDefine("REFLECTMAP"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"),
                        t.SHADERDEFINE_ALPHAPREMULTIPLY = t.shaderDefines.registerDefine("ALPHAPREMULTIPLY");
                }, t.SmoothnessSource_MetallicGlossTexture_Alpha = 0, t.SmoothnessSource_AlbedoTexture_Alpha = 1,
                t.RENDERMODE_OPAQUE = 0, t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_FADE = 2, t.RENDERMODE_TRANSPARENT = 3,
                t.SHADERDEFINE_ALBEDOTEXTURE = 0, t.SHADERDEFINE_NORMALTEXTURE = 0, t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = 0,
                t.SHADERDEFINE_METALLICGLOSSTEXTURE = 0, t.SHADERDEFINE_OCCLUSIONTEXTURE = 0, t.SHADERDEFINE_PARALLAXTEXTURE = 0,
                t.SHADERDEFINE_EMISSION = 0, t.SHADERDEFINE_EMISSIONTEXTURE = 0, t.SHADERDEFINE_REFLECTMAP = 0,
                t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ALPHAPREMULTIPLY = 0, t.SMOOTHNESSSOURCE = -1,
                t.ENABLEEMISSION = -1, t.ENABLEREFLECT = -1, i(t, ["ALBEDOTEXTURE", function() {
                    return this.ALBEDOTEXTURE = Ve.propertyNameToID("u_AlbedoTexture");
                }, "METALLICGLOSSTEXTURE", function() {
                    return this.METALLICGLOSSTEXTURE = Ve.propertyNameToID("u_MetallicGlossTexture");
                }, "NORMALTEXTURE", function() {
                    return this.NORMALTEXTURE = Ve.propertyNameToID("u_NormalTexture");
                }, "PARALLAXTEXTURE", function() {
                    return this.PARALLAXTEXTURE = Ve.propertyNameToID("u_ParallaxTexture");
                }, "OCCLUSIONTEXTURE", function() {
                    return this.OCCLUSIONTEXTURE = Ve.propertyNameToID("u_OcclusionTexture");
                }, "EMISSIONTEXTURE", function() {
                    return this.EMISSIONTEXTURE = Ve.propertyNameToID("u_EmissionTexture");
                }, "ALBEDOCOLOR", function() {
                    return this.ALBEDOCOLOR = Ve.propertyNameToID("u_AlbedoColor");
                }, "EMISSIONCOLOR", function() {
                    return this.EMISSIONCOLOR = Ve.propertyNameToID("u_EmissionColor");
                }, "METALLIC", function() {
                    return this.METALLIC = Ve.propertyNameToID("u_metallic");
                }, "SMOOTHNESS", function() {
                    return this.SMOOTHNESS = Ve.propertyNameToID("u_smoothness");
                }, "SMOOTHNESSSCALE", function() {
                    return this.SMOOTHNESSSCALE = Ve.propertyNameToID("u_smoothnessScale");
                }, "OCCLUSIONSTRENGTH", function() {
                    return this.OCCLUSIONSTRENGTH = Ve.propertyNameToID("u_occlusionStrength");
                }, "NORMALSCALE", function() {
                    return this.NORMALSCALE = Ve.propertyNameToID("u_normalScale");
                }, "PARALLAXSCALE", function() {
                    return this.PARALLAXSCALE = Ve.propertyNameToID("u_parallaxScale");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        si = function(e) {
            function t() {
                t.__super.call(this), this.setShaderName("PARTICLESHURIKEN"), this._color = new me(1, 1, 1, 1),
                    this.renderMode = 0;
            }
            r(t, "laya.d3.core.particleShuriKen.ShurikenParticleMaterial", e);
            var n = t.prototype;
            return a(0, n, "_TintColorB", function() {
                    return this._color.z;
                }, function(e) {
                    this._color.z = e, this.color = this._color;
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "texture", function() {
                    return this._shaderValues.getTexture(t.DIFFUSETEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP),
                        this._shaderValues.setTexture(t.DIFFUSETEXTURE, e);
                }), a(0, n, "_TintColorR", function() {
                    return this._color.x;
                }, function(e) {
                    this._color.x = e, this.color = this._color;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "_TintColorG", function() {
                    return this._color.y;
                }, function(e) {
                    this._color.y = e, this.color = this._color;
                }), a(0, n, "_TintColorA", function() {
                    return this._color.w;
                }, function(e) {
                    this._color.w = e, this.color = this._color;
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 1:
                            this.renderQueue = 3e3, this.depthWrite = !1, this.cull = 0, this.blend = 1, this.blendSrc = 770,
                                this.blendDst = 1, this.alphaTest = !1, this._defineDatas.add(t.SHADERDEFINE_ADDTIVEFOG);
                            break;

                        case 0:
                            this.renderQueue = 3e3, this.depthWrite = !1, this.cull = 0, this.blend = 1, this.blendSrc = 770,
                                this.blendDst = 771, this.alphaTest = !1, this._defineDatas.remove(t.SHADERDEFINE_ADDTIVEFOG);
                            break;

                        default:
                            throw new Error("ShurikenParticleMaterial : renderMode value error.");
                    }
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "colorR", function() {
                    return this._TintColorR;
                }, function(e) {
                    this._TintColorR = e;
                }), a(0, n, "colorG", function() {
                    return this._TintColorG;
                }, function(e) {
                    this._TintColorG = e;
                }), a(0, n, "colorB", function() {
                    return this._TintColorB;
                }, function(e) {
                    this._TintColorB = e;
                }), a(0, n, "colorA", function() {
                    return this._TintColorA;
                }, function(e) {
                    this._TintColorA = e;
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "color", function() {
                    return this._shaderValues.getVector(t.TINTCOLOR);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR),
                        this._shaderValues.setVector(t.TINTCOLOR, e);
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_DIFFUSEMAP = t.shaderDefines.registerDefine("DIFFUSEMAP"), t.SHADERDEFINE_TINTCOLOR = t.shaderDefines.registerDefine("TINTCOLOR"),
                        t.SHADERDEFINE_ADDTIVEFOG = t.shaderDefines.registerDefine("ADDTIVEFOG"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET");
                }, t.RENDERMODE_ALPHABLENDED = 0, t.RENDERMODE_ADDTIVE = 1, t.SHADERDEFINE_DIFFUSEMAP = 0,
                t.SHADERDEFINE_TINTCOLOR = 0, t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ADDTIVEFOG = 0,
                i(t, ["DIFFUSETEXTURE", function() {
                    return this.DIFFUSETEXTURE = Ve.propertyNameToID("u_texture");
                }, "TINTCOLOR", function() {
                    return this.TINTCOLOR = Ve.propertyNameToID("u_Tintcolor");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        li = function(e) {
            function t() {
                this._color = null, t.__super.call(this), this.setShaderName("Effect"), this._color = new me(1, 1, 1, 1),
                    this._shaderValues.setVector(t.TINTCOLOR, new me(1, 1, 1, 1)), this.renderMode = 0;
            }
            r(t, "laya.d3.core.material.EffectMaterial", e);
            var n = t.prototype;
            return a(0, n, "_TintColorB", function() {
                    return this._color.z;
                }, function(e) {
                    this._color.z = e, this.color = this._color;
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "texture", function() {
                    return this._shaderValues.getTexture(t.MAINTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.EffectMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_MAINTEXTURE),
                        this._shaderValues.setTexture(t.MAINTEXTURE, e);
                }), a(0, n, "_TintColorR", function() {
                    return this._color.x;
                }, function(e) {
                    this._color.x = e, this.color = this._color;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "_TintColorG", function() {
                    return this._color.y;
                }, function(e) {
                    this._color.y = e, this.color = this._color;
                }), a(0, n, "_TintColorA", function() {
                    return this._color.w;
                }, function(e) {
                    this._color.w = e, this.color = this._color;
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 0:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 1, this.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ADDTIVEFOG);
                            break;

                        case 1:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513,
                                this._defineDatas.remove(t.SHADERDEFINE_ADDTIVEFOG);
                            break;

                        default:
                            throw new Error("MeshEffectMaterial : renderMode value error.");
                    }
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "colorR", function() {
                    return this._TintColorR;
                }, function(e) {
                    this._TintColorR = e;
                }), a(0, n, "colorG", function() {
                    return this._TintColorG;
                }, function(e) {
                    this._TintColorG = e;
                }), a(0, n, "colorB", function() {
                    return this._TintColorB;
                }, function(e) {
                    this._TintColorB = e;
                }), a(0, n, "colorA", function() {
                    return this._TintColorA;
                }, function(e) {
                    this._TintColorA = e;
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "color", function() {
                    return this._shaderValues.getVector(t.TINTCOLOR);
                }, function(e) {
                    this._shaderValues.setVector(t.TINTCOLOR, e);
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_MAINTEXTURE = t.shaderDefines.registerDefine("MAINTEXTURE"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"),
                        t.SHADERDEFINE_ADDTIVEFOG = t.shaderDefines.registerDefine("ADDTIVEFOG");
                }, t.RENDERMODE_ADDTIVE = 0, t.RENDERMODE_ALPHABLENDED = 1, t.SHADERDEFINE_MAINTEXTURE = 0,
                t.SHADERDEFINE_TILINGOFFSET = 0, t.SHADERDEFINE_ADDTIVEFOG = 0, i(t, ["defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "MAINTEXTURE", function() {
                    return this.MAINTEXTURE = Ve.propertyNameToID("u_AlbedoTexture");
                }, "TINTCOLOR", function() {
                    return this.TINTCOLOR = Ve.propertyNameToID("u_AlbedoColor");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        hi = function(e) {
            function t() {
                t.__super.call(this), this.setShaderName("WaterPrimary"), this._shaderValues.setVector(t.HORIZONCOLOR, new me(.172, .463, .435, 0)),
                    this._shaderValues.setNumber(t.WAVESCALE, .15), this._shaderValues.setVector(t.WAVESPEED, new me(19, 9, -16, -7));
            }
            r(t, "laya.d3.core.material.WaterPrimaryMaterial", e);
            var n = t.prototype;
            return a(0, n, "waveSpeed", function() {
                return this._shaderValues.getVector(t.WAVESPEED);
            }, function(e) {
                this._shaderValues.setVector(t.WAVESPEED, e);
            }), a(0, n, "horizonColor", function() {
                return this._shaderValues.getVector(t.HORIZONCOLOR);
            }, function(e) {
                this._shaderValues.setVector(t.HORIZONCOLOR, e);
            }), a(0, n, "mainTexture", function() {
                return this._shaderValues.getTexture(t.MAINTEXTURE);
            }, function(e) {
                e ? this._defineDatas.add(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE),
                    this._shaderValues.setTexture(t.MAINTEXTURE, e);
            }), a(0, n, "normalTexture", function() {
                return this._shaderValues.getTexture(t.NORMALTEXTURE);
            }, function(e) {
                e ? this._defineDatas.add(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE),
                    this._shaderValues.setTexture(t.NORMALTEXTURE, e);
            }), a(0, n, "waveScale", function() {
                return this._shaderValues.getNumber(t.WAVESCALE);
            }, function(e) {
                this._shaderValues.setNumber(t.WAVESCALE, e);
            }), t.__init__ = function() {
                t.SHADERDEFINE_MAINTEXTURE = t.shaderDefines.registerDefine("MAINTEXTURE"), t.SHADERDEFINE_NORMALTEXTURE = t.shaderDefines.registerDefine("NORMALTEXTURE");
            }, t.SHADERDEFINE_MAINTEXTURE = 0, t.SHADERDEFINE_NORMALTEXTURE = 0, i(t, ["HORIZONCOLOR", function() {
                return this.HORIZONCOLOR = Ve.propertyNameToID("u_HorizonColor");
            }, "MAINTEXTURE", function() {
                return this.MAINTEXTURE = Ve.propertyNameToID("u_MainTexture");
            }, "NORMALTEXTURE", function() {
                return this.NORMALTEXTURE = Ve.propertyNameToID("u_NormalTexture");
            }, "WAVESCALE", function() {
                return this.WAVESCALE = Ve.propertyNameToID("u_WaveScale");
            }, "WAVESPEED", function() {
                return this.WAVESPEED = Ve.propertyNameToID("u_WaveSpeed");
            }, "defaultMaterial", function() {
                return this.defaultMaterial = new t();
            }, "shaderDefines", function() {
                return this.shaderDefines = new pe(Bn.shaderDefines);
            }]), t;
        }(Bn),
        ui = function(e) {
            function t() {
                this._enableLighting = !0, t.__super.call(this), this.setShaderName("ExtendTerrain"),
                    this.renderMode = 1;
            }
            r(t, "laya.d3.core.material.ExtendTerrainMaterial", e);
            var n = t.prototype;
            return n._setDetailNum = function(e) {
                    switch (e) {
                        case 1:
                            this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                            break;

                        case 2:
                            this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                            break;

                        case 3:
                            this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                            break;

                        case 4:
                            this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                            break;

                        case 5:
                            this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                    }
                }, a(0, n, "diffuseScaleOffset2", null, function(e) {
                    this._shaderValues.setVector(t.DIFFUSESCALEOFFSET2, e);
                }), a(0, n, "splatAlphaTexture", function() {
                    return this._shaderValues.getTexture(t.SPLATALPHATEXTURE);
                }, function(e) {
                    this._shaderValues.setTexture(t.SPLATALPHATEXTURE, e);
                }), a(0, n, "diffuseScaleOffset3", null, function(e) {
                    this._shaderValues.setVector(t.DIFFUSESCALEOFFSET3, e);
                }), a(0, n, "diffuseTexture1", null, function(e) {
                    this._shaderValues.setTexture(t.DIFFUSETEXTURE1, e), this._setDetailNum(1);
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 1:
                            this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, this.blend = 0, this.depthTest = 513;
                            break;

                        case 2:
                            this.renderQueue = 2e3, this.depthWrite = !1, this.cull = 2, this.blend = 1, this.blendSrc = 770,
                                this.blendDst = 771, this.depthTest = 515;
                            break;

                        default:
                            throw new Error("ExtendTerrainMaterial:renderMode value error.");
                    }
                }), a(0, n, "diffuseTexture2", function() {
                    return this._shaderValues.getTexture(t.DIFFUSETEXTURE2);
                }, function(e) {
                    this._shaderValues.setTexture(t.DIFFUSETEXTURE2, e), this._setDetailNum(2);
                }), a(0, n, "diffuseScaleOffset1", null, function(e) {
                    this._shaderValues.setVector(t.DIFFUSESCALEOFFSET1, e);
                }), a(0, n, "diffuseTexture3", function() {
                    return this._shaderValues.getTexture(t.DIFFUSETEXTURE3);
                }, function(e) {
                    this._shaderValues.setTexture(t.DIFFUSETEXTURE3, e), this._setDetailNum(3);
                }), a(0, n, "diffuseTexture4", function() {
                    return this._shaderValues.getTexture(t.DIFFUSETEXTURE4);
                }, function(e) {
                    this._shaderValues.setTexture(t.DIFFUSETEXTURE4, e), this._setDetailNum(4);
                }), a(0, n, "diffuseTexture5", function() {
                    return this._shaderValues.getTexture(t.DIFFUSETEXTURE5);
                }, function(e) {
                    this._shaderValues.setTexture(t.DIFFUSETEXTURE5, e), this._setDetailNum(5);
                }), a(0, n, "diffuseScaleOffset4", null, function(e) {
                    this._shaderValues.setVector(t.DIFFUSESCALEOFFSET4, e);
                }), a(0, n, "diffuseScaleOffset5", null, function(e) {
                    this._shaderValues.setVector(t.DIFFUSESCALEOFFSET5, e);
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "enableLighting", function() {
                    return this._enableLighting;
                }, function(e) {
                    this._enableLighting !== e && (e ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT),
                        this._enableLighting = e);
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_DETAIL_NUM1 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM1"),
                        t.SHADERDEFINE_DETAIL_NUM2 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM2"),
                        t.SHADERDEFINE_DETAIL_NUM3 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM3"),
                        t.SHADERDEFINE_DETAIL_NUM4 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM4"),
                        t.SHADERDEFINE_DETAIL_NUM5 = t.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM5");
                }, t.RENDERMODE_OPAQUE = 1, t.RENDERMODE_TRANSPARENT = 2, t.SHADERDEFINE_DETAIL_NUM1 = 0,
                t.SHADERDEFINE_DETAIL_NUM2 = 0, t.SHADERDEFINE_DETAIL_NUM3 = 0, t.SHADERDEFINE_DETAIL_NUM4 = 0,
                t.SHADERDEFINE_DETAIL_NUM5 = 0, i(t, ["SPLATALPHATEXTURE", function() {
                    return this.SPLATALPHATEXTURE = Ve.propertyNameToID("u_SplatAlphaTexture");
                }, "DIFFUSETEXTURE1", function() {
                    return this.DIFFUSETEXTURE1 = Ve.propertyNameToID("u_DiffuseTexture1");
                }, "DIFFUSETEXTURE2", function() {
                    return this.DIFFUSETEXTURE2 = Ve.propertyNameToID("u_DiffuseTexture2");
                }, "DIFFUSETEXTURE3", function() {
                    return this.DIFFUSETEXTURE3 = Ve.propertyNameToID("u_DiffuseTexture3");
                }, "DIFFUSETEXTURE4", function() {
                    return this.DIFFUSETEXTURE4 = Ve.propertyNameToID("u_DiffuseTexture4");
                }, "DIFFUSETEXTURE5", function() {
                    return this.DIFFUSETEXTURE5 = Ve.propertyNameToID("u_DiffuseTexture5");
                }, "DIFFUSESCALEOFFSET1", function() {
                    return this.DIFFUSESCALEOFFSET1 = Ve.propertyNameToID("u_DiffuseScaleOffset1");
                }, "DIFFUSESCALEOFFSET2", function() {
                    return this.DIFFUSESCALEOFFSET2 = Ve.propertyNameToID("u_DiffuseScaleOffset2");
                }, "DIFFUSESCALEOFFSET3", function() {
                    return this.DIFFUSESCALEOFFSET3 = Ve.propertyNameToID("u_DiffuseScaleOffset3");
                }, "DIFFUSESCALEOFFSET4", function() {
                    return this.DIFFUSESCALEOFFSET4 = Ve.propertyNameToID("u_DiffuseScaleOffset4");
                }, "DIFFUSESCALEOFFSET5", function() {
                    return this.DIFFUSESCALEOFFSET5 = Ve.propertyNameToID("u_DiffuseScaleOffset5");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        ci = function(e) {
            function t() {
                this._enableVertexColor = !1, t.__super.call(this), this.setShaderName("BLINNPHONG"),
                    this._albedoIntensity = 1, this._albedoColor = new me(1, 1, 1, 1);
                var e = this._shaderValues;
                e.setVector(t.ALBEDOCOLOR, new me(1, 1, 1, 1)), e.setVector(t.MATERIALSPECULAR, new me(1, 1, 1, 1)),
                    e.setNumber(t.SHININESS, .078125), e.setNumber(Bn.ALPHATESTVALUE, .5), e.setVector(t.TILINGOFFSET, new me(1, 1, 0, 0)),
                    this._enableLighting = !0, this.renderMode = 0;
            }
            r(t, "laya.d3.core.material.BlinnPhongMaterial", e);
            var n = t.prototype;
            return n.disableFog = function() {
                    this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_FOG);
                }, n.cloneTo = function(t) {
                    e.prototype.cloneTo.call(this, t);
                    var n = t;
                    n._enableLighting = this._enableLighting, n._albedoIntensity = this._albedoIntensity,
                        n._enableVertexColor = this._enableVertexColor, this._albedoColor.cloneTo(n._albedoColor);
                }, a(0, n, "_SpecColorG", function() {
                    return this._shaderValues.getVector(t.MATERIALSPECULAR).y;
                }, function(e) {
                    this._shaderValues.getVector(t.MATERIALSPECULAR).y = e;
                }), a(0, n, "_ColorB", function() {
                    return this._albedoColor.z;
                }, function(e) {
                    this._albedoColor.z = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorR", function() {
                    return this._albedoColor.x;
                }, function(e) {
                    this._albedoColor.x = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "albedoColorA", function() {
                    return this._ColorA;
                }, function(e) {
                    this._ColorA = e;
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "_SpecColorB", function() {
                    return this._shaderValues.getVector(t.MATERIALSPECULAR).z;
                }, function(e) {
                    this._shaderValues.getVector(t.MATERIALSPECULAR).z = e;
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 0:
                            this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513;
                            break;

                        case 1:
                            this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513;
                            break;

                        case 2:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513;
                            break;

                        default:
                            throw new Error("Material:renderMode value error.");
                    }
                }), a(0, n, "_SpecColorR", function() {
                    return this._shaderValues.getVector(t.MATERIALSPECULAR).x;
                }, function(e) {
                    this._shaderValues.getVector(t.MATERIALSPECULAR).x = e;
                }), a(0, n, "_ColorG", function() {
                    return this._albedoColor.y;
                }, function(e) {
                    this._albedoColor.y = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorA", function() {
                    return this._albedoColor.w;
                }, function(e) {
                    this._albedoColor.w = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "specularColor", function() {
                    return this._shaderValues.getVector(t.MATERIALSPECULAR);
                }, function(e) {
                    this._shaderValues.setVector(t.MATERIALSPECULAR, e);
                }), a(0, n, "albedoColorB", function() {
                    return this._ColorB;
                }, function(e) {
                    this._ColorB = e;
                }), a(0, n, "_SpecColorA", function() {
                    return this._shaderValues.getVector(t.MATERIALSPECULAR).w;
                }, function(e) {
                    this._shaderValues.getVector(t.MATERIALSPECULAR).w = e;
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "_AlbedoIntensity", function() {
                    return this._albedoIntensity;
                }, function(e) {
                    if (this._albedoIntensity !== e) {
                        var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
                        me.scale(this._albedoColor, e, n), this._albedoIntensity = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
                    }
                }), a(0, n, "specularColorA", function() {
                    return this._SpecColorA;
                }, function(e) {
                    this._SpecColorA = e;
                }), a(0, n, "_Shininess", function() {
                    return this._shaderValues.getNumber(t.SHININESS);
                }, function(e) {
                    e = Math.max(0, Math.min(1, e)), this._shaderValues.setNumber(t.SHININESS, e);
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "_Cutoff", function() {
                    return this.alphaTestValue;
                }, function(e) {
                    this.alphaTestValue = e;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "albedoTexture", function() {
                    return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP),
                        this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
                }), a(0, n, "enableVertexColor", function() {
                    return this._enableVertexColor;
                }, function(e) {
                    this._enableVertexColor = e, e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);
                }), a(0, n, "albedoColor", function() {
                    return this._albedoColor;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.ALBEDOCOLOR);
                    me.scale(e, this._albedoIntensity, n), this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, n);
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "enableLighting", function() {
                    return this._enableLighting;
                }, function(e) {
                    this._enableLighting !== e && (e ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT),
                        this._enableLighting = e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "albedoColorR", function() {
                    return this._ColorR;
                }, function(e) {
                    this._ColorR = e;
                }), a(0, n, "albedoColorG", function() {
                    return this._ColorG;
                }, function(e) {
                    this._ColorG = e;
                }), a(0, n, "albedoIntensity", function() {
                    return this._albedoIntensity;
                }, function(e) {
                    this._AlbedoIntensity = e;
                }), a(0, n, "specularColorR", function() {
                    return this._SpecColorR;
                }, function(e) {
                    this._SpecColorR = e;
                }), a(0, n, "specularColorG", function() {
                    return this._SpecColorG;
                }, function(e) {
                    this._SpecColorG = e;
                }), a(0, n, "specularColorB", function() {
                    return this._SpecColorB;
                }, function(e) {
                    this._SpecColorB = e;
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "shininess", function() {
                    return this._Shininess;
                }, function(e) {
                    this._Shininess = e;
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "normalTexture", function() {
                    return this._shaderValues.getTexture(t.NORMALTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_NORMALMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_NORMALMAP),
                        this._shaderValues.setTexture(t.NORMALTEXTURE, e);
                }), a(0, n, "specularTexture", function() {
                    return this._shaderValues.getTexture(t.SPECULARTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP),
                        this._shaderValues.setTexture(t.SPECULARTEXTURE, e);
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_DIFFUSEMAP = t.shaderDefines.registerDefine("DIFFUSEMAP"), t.SHADERDEFINE_NORMALMAP = t.shaderDefines.registerDefine("NORMALMAP"),
                        t.SHADERDEFINE_SPECULARMAP = t.shaderDefines.registerDefine("SPECULARMAP"), t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"),
                        t.SHADERDEFINE_ENABLEVERTEXCOLOR = t.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
                }, t.SPECULARSOURCE_DIFFUSEMAPALPHA = 0, t.SPECULARSOURCE_SPECULARMAP = 0, t.RENDERMODE_OPAQUE = 0,
                t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_TRANSPARENT = 2, t.SHADERDEFINE_DIFFUSEMAP = 0,
                t.SHADERDEFINE_NORMALMAP = 0, t.SHADERDEFINE_SPECULARMAP = 0, t.SHADERDEFINE_TILINGOFFSET = 0,
                t.SHADERDEFINE_ENABLEVERTEXCOLOR = 0, i(t, ["ALBEDOTEXTURE", function() {
                    return this.ALBEDOTEXTURE = Ve.propertyNameToID("u_DiffuseTexture");
                }, "NORMALTEXTURE", function() {
                    return this.NORMALTEXTURE = Ve.propertyNameToID("u_NormalTexture");
                }, "SPECULARTEXTURE", function() {
                    return this.SPECULARTEXTURE = Ve.propertyNameToID("u_SpecularTexture");
                }, "ALBEDOCOLOR", function() {
                    return this.ALBEDOCOLOR = Ve.propertyNameToID("u_DiffuseColor");
                }, "MATERIALSPECULAR", function() {
                    return this.MATERIALSPECULAR = Ve.propertyNameToID("u_MaterialSpecular");
                }, "SHININESS", function() {
                    return this.SHININESS = Ve.propertyNameToID("u_Shininess");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        _i = function(e) {
            function t() {
                this._diffuseScale1 = null, this._diffuseScale2 = null, this._diffuseScale3 = null,
                    this._diffuseScale4 = null, t.__super.call(this), this.setShaderName("Terrain"),
                    this.renderMode = 1, this._diffuseScale1 = new Ee(), this._diffuseScale2 = new Ee(),
                    this._diffuseScale3 = new Ee(), this._diffuseScale4 = new Ee(), this.ambientColor = new Te(.6, .6, .6),
                    this.diffuseColor = new Te(1, 1, 1), this.specularColor = new me(.2, .2, .2, 32);
            }
            r(t, "laya.d3.core.material.TerrainMaterial", e);
            var n = t.prototype;
            return n.setDiffuseScale1 = function(e, t) {
                    this._diffuseScale1.x = e, this._diffuseScale1.y = t, this._shaderValues.setVector2(6, this._diffuseScale1);
                }, n.setDiffuseScale2 = function(e, t) {
                    this._diffuseScale2.x = e, this._diffuseScale2.y = t, this._shaderValues.setVector2(7, this._diffuseScale2);
                }, n.setDiffuseScale3 = function(e, t) {
                    this._diffuseScale3.x = e, this._diffuseScale3.y = t, this._shaderValues.setVector2(8, this._diffuseScale3);
                }, n.setDiffuseScale4 = function(e, t) {
                    this._diffuseScale4.x = e, this._diffuseScale4.y = t, this._shaderValues.setVector2(9, this._diffuseScale4);
                }, n.setDetailNum = function(e) {
                    switch (e) {
                        case 1:
                            this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                            break;

                        case 2:
                            this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                            break;

                        case 3:
                            this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                            break;

                        case 4:
                            this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2),
                                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3);
                    }
                }, n.disableLight = function() {
                    this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT);
                }, n.setShaderName = function(t) {
                    e.prototype.setShaderName.call(this, t);
                }, a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 1:
                            this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, this.blend = 0, this.depthTest = 513;
                            break;

                        case 2:
                            this.renderQueue = 2e3, this.depthWrite = !1, this.cull = 2, this.blend = 1, this.blendSrc = 770,
                                this.blendDst = 771, this.depthTest = 515;
                            break;

                        default:
                            throw new Error("TerrainMaterial:renderMode value error.");
                    }
                }), a(0, n, "diffuseTexture2", function() {
                    return this._shaderValues.getTexture(3);
                }, function(e) {
                    this._shaderValues.setTexture(3, e);
                }), a(0, n, "ambientColor", function() {
                    return this._shaderValues.getVector(10);
                }, function(e) {
                    this._shaderValues.setVector3(10, e);
                }), a(0, n, "diffuseTexture4", function() {
                    return this._shaderValues.getTexture(5);
                }, function(e) {
                    this._shaderValues.setTexture(5, e);
                }), a(0, n, "diffuseColor", function() {
                    return this._shaderValues.getVector(11);
                }, function(e) {
                    this._shaderValues.setVector3(11, e);
                }), a(0, n, "diffuseTexture1", function() {
                    return this._shaderValues.getTexture(2);
                }, function(e) {
                    this._shaderValues.setTexture(2, e);
                }), a(0, n, "specularColor", function() {
                    return this._shaderValues.getVector(12);
                }, function(e) {
                    this._shaderValues.setVector(12, e);
                }), a(0, n, "diffuseTexture3", function() {
                    return this._shaderValues.getTexture(4);
                }, function(e) {
                    this._shaderValues.setTexture(4, e);
                }), a(0, n, "splatAlphaTexture", function() {
                    return this._shaderValues.getTexture(0);
                }, function(e) {
                    this._shaderValues.setTexture(0, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "normalTexture", function() {
                    return this._shaderValues.getTexture(1);
                }, function(e) {
                    this._shaderValues.setTexture(1, e);
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_DETAIL_NUM1 = t.shaderDefines.registerDefine("DETAIL_NUM1"), t.SHADERDEFINE_DETAIL_NUM2 = t.shaderDefines.registerDefine("DETAIL_NUM2"),
                        t.SHADERDEFINE_DETAIL_NUM4 = t.shaderDefines.registerDefine("DETAIL_NUM4"), t.SHADERDEFINE_DETAIL_NUM3 = t.shaderDefines.registerDefine("DETAIL_NUM3");
                }, t.RENDERMODE_OPAQUE = 1, t.RENDERMODE_TRANSPARENT = 2, t.SPLATALPHATEXTURE = 0,
                t.NORMALTEXTURE = 1, t.DIFFUSETEXTURE1 = 2, t.DIFFUSETEXTURE2 = 3, t.DIFFUSETEXTURE3 = 4,
                t.DIFFUSETEXTURE4 = 5, t.DIFFUSESCALE1 = 6, t.DIFFUSESCALE2 = 7, t.DIFFUSESCALE3 = 8,
                t.DIFFUSESCALE4 = 9, t.MATERIALAMBIENT = 10, t.MATERIALDIFFUSE = 11, t.MATERIALSPECULAR = 12,
                t.SHADERDEFINE_DETAIL_NUM1 = 0, t.SHADERDEFINE_DETAIL_NUM2 = 0, t.SHADERDEFINE_DETAIL_NUM3 = 0,
                t.SHADERDEFINE_DETAIL_NUM4 = 0, i(t, ["CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        di = function(e) {
            function t() {
                t.__super.call(this), this.setShaderName("SkyBox");
            }
            r(t, "laya.d3.core.material.SkyBoxMaterial", e);
            var n = t.prototype;
            return a(0, n, "tintColor", function() {
                return this._shaderValues.getVector(t.TINTCOLOR);
            }, function(e) {
                this._shaderValues.setVector(t.TINTCOLOR, e);
            }), a(0, n, "exposure", function() {
                return this._shaderValues.getNumber(t.EXPOSURE);
            }, function(e) {
                this._shaderValues.setNumber(t.EXPOSURE, e);
            }), a(0, n, "rotation", function() {
                return this._shaderValues.getNumber(t.ROTATION);
            }, function(e) {
                this._shaderValues.setNumber(t.ROTATION, e);
            }), a(0, n, "textureCube", function() {
                return this._shaderValues.getTexture(t.TEXTURECUBE);
            }, function(e) {
                this._shaderValues.setTexture(t.TEXTURECUBE, e);
            }), i(t, ["TINTCOLOR", function() {
                return this.TINTCOLOR = Ve.propertyNameToID("u_TintColor");
            }, "EXPOSURE", function() {
                return this.EXPOSURE = Ve.propertyNameToID("u_Exposure");
            }, "ROTATION", function() {
                return this.ROTATION = Ve.propertyNameToID("u_Rotation");
            }, "TEXTURECUBE", function() {
                return this.TEXTURECUBE = Ve.propertyNameToID("u_CubeTexture");
            }, "defaultMaterial", function() {
                return this.defaultMaterial = new t();
            }]), t;
        }(Bn),
        fi = function(e) {
            function t() {
                this._albedoColor = null, this._specularColor = null, this._emissionColor = null,
                    t.__super.call(this), this.setShaderName("PBRSpecular"), this._albedoColor = new me(1, 1, 1, 1),
                    this._shaderValues.setVector(t.ALBEDOCOLOR, new me(1, 1, 1, 1)), this._emissionColor = new me(0, 0, 0, 0),
                    this._shaderValues.setVector(t.EMISSIONCOLOR, new me(0, 0, 0, 0)), this._specularColor = new me(.2, .2, .2, .2),
                    this._shaderValues.setVector(t.SPECULARCOLOR, new me(.2, .2, .2, .2)), this._shaderValues.setNumber(t.SMOOTHNESS, .5),
                    this._shaderValues.setNumber(t.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber(t.SMOOTHNESSSOURCE, 0),
                    this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber(t.NORMALSCALE, 1),
                    this._shaderValues.setNumber(t.PARALLAXSCALE, .001), this._shaderValues.setBool(t.ENABLEEMISSION, !1),
                    this._shaderValues.setNumber(Bn.ALPHATESTVALUE, .5), this.renderMode = 0;
            }
            r(t, "laya.d3.core.material.PBRSpecularMaterial", e);
            var n = t.prototype;
            return n.cloneTo = function(t) {
                    e.prototype.cloneTo.call(this, t);
                    var n = t;
                    this._albedoColor.cloneTo(n._albedoColor), this._specularColor.cloneTo(n._specularColor),
                        this._emissionColor.cloneTo(n._emissionColor);
                }, a(0, n, "emissionTexture", function() {
                    return this._shaderValues.getTexture(t.EMISSIONTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSIONTEXTURE),
                        this._shaderValues.setTexture(t.EMISSIONTEXTURE, e);
                }), a(0, n, "_SpecColorG", function() {
                    return this._specularColor.y;
                }, function(e) {
                    this._specularColor.y = e, this.specularColor = this._specularColor;
                }), a(0, n, "_ColorB", function() {
                    return this._albedoColor.z;
                }, function(e) {
                    this._albedoColor.z = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_ColorR", function() {
                    return this._albedoColor.x;
                }, function(e) {
                    this._albedoColor.x = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "albedoColorA", function() {
                    return this._ColorA;
                }, function(e) {
                    this._ColorA = e;
                }), a(0, n, "_MainTex_STX", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).x;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.x = e, this.tilingOffset = n;
                }), a(0, n, "_SpecColorB", function() {
                    return this._specularColor.z;
                }, function(e) {
                    this._specularColor.z = e, this.specularColor = this._specularColor;
                }), a(0, n, "renderMode", null, function(e) {
                    switch (e) {
                        case 0:
                            this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        case 1:
                            this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2,
                                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        case 2:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2,
                                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513,
                                this._defineDatas.remove(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        case 3:
                            this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2,
                                this.blend = 1, this.blendSrc = 1, this.blendDst = 771, this.depthTest = 513, this._defineDatas.add(t.SHADERDEFINE_ALPHAPREMULTIPLY);
                            break;

                        default:
                            throw new Error("PBRSpecularMaterial : renderMode value error.");
                    }
                }), a(0, n, "_SpecColorR", function() {
                    return this._specularColor.x;
                }, function(e) {
                    this._specularColor.x = e, this.specularColor = this._specularColor;
                }), a(0, n, "_ColorG", function() {
                    return this._albedoColor.y;
                }, function(e) {
                    this._albedoColor.y = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "_Glossiness", function() {
                    return this._shaderValues.getNumber(t.SMOOTHNESS);
                }, function(e) {
                    this._shaderValues.setNumber(t.SMOOTHNESS, e);
                }), a(0, n, "_ColorA", function() {
                    return this._albedoColor.w;
                }, function(e) {
                    this._albedoColor.w = e, this.albedoColor = this._albedoColor;
                }), a(0, n, "specularColor", function() {
                    return this._shaderValues.getVector(t.SPECULARCOLOR);
                }, function(e) {
                    this._shaderValues.setVector(t.SPECULARCOLOR, e);
                }), a(0, n, "albedoColorB", function() {
                    return this._ColorB;
                }, function(e) {
                    this._ColorB = e;
                }), a(0, n, "_SpecColorA", function() {
                    return this._specularColor.w;
                }, function(e) {
                    this._specularColor.w = e, this.specularColor = this._specularColor;
                }), a(0, n, "_GlossMapScale", function() {
                    return this._shaderValues.getNumber(t.SMOOTHNESSSCALE);
                }, function(e) {
                    this._shaderValues.setNumber(t.SMOOTHNESSSCALE, e);
                }), a(0, n, "_BumpScale", function() {
                    return this._shaderValues.getNumber(t.NORMALSCALE);
                }, function(e) {
                    this._shaderValues.setNumber(t.NORMALSCALE, e);
                }), a(0, n, "_Parallax", function() {
                    return this._shaderValues.getNumber(t.PARALLAXSCALE);
                }, function(e) {
                    this._shaderValues.setNumber(t.PARALLAXSCALE, e);
                }), a(0, n, "_OcclusionStrength", function() {
                    return this._shaderValues.getNumber(t.OCCLUSIONSTRENGTH);
                }, function(e) {
                    this._shaderValues.setNumber(t.OCCLUSIONSTRENGTH, e);
                }), a(0, n, "_EmissionColorR", function() {
                    return this._emissionColor.x;
                }, function(e) {
                    this._emissionColor.x = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "tilingOffset", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET);
                }, function(e) {
                    e && (1 != e.x || 1 != e.y || 0 != e.z || 0 != e.w) ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET),
                        this._shaderValues.setVector(t.TILINGOFFSET, e);
                }), a(0, n, "_EmissionColorG", function() {
                    return this._emissionColor.y;
                }, function(e) {
                    this._emissionColor.y = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "blendSrc", function() {
                    return this._shaderValues.getInt(t.BLEND_SRC);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_SRC, e);
                }), a(0, n, "tilingOffsetW", function() {
                    return this._MainTex_STW;
                }, function(e) {
                    this._MainTex_STW = e;
                }), a(0, n, "_EmissionColorB", function() {
                    return this._emissionColor.z;
                }, function(e) {
                    this._emissionColor.z = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "_EmissionColorA", function() {
                    return this._emissionColor.w;
                }, function(e) {
                    this._emissionColor.w = e, this.emissionColor = this._emissionColor;
                }), a(0, n, "_MainTex_STY", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).y;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.y = e, this.tilingOffset = n;
                }), a(0, n, "_MainTex_STZ", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).z;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.z = e, this.tilingOffset = n;
                }), a(0, n, "_Cutoff", function() {
                    return this.alphaTestValue;
                }, function(e) {
                    this.alphaTestValue = e;
                }), a(0, n, "_MainTex_STW", function() {
                    return this._shaderValues.getVector(t.TILINGOFFSET).w;
                }, function(e) {
                    var n = this._shaderValues.getVector(t.TILINGOFFSET);
                    n.w = e, this.tilingOffset = n;
                }), a(0, n, "albedoColorR", function() {
                    return this._ColorR;
                }, function(e) {
                    this._ColorR = e;
                }), a(0, n, "albedoColorG", function() {
                    return this._ColorG;
                }, function(e) {
                    this._ColorG = e;
                }), a(0, n, "tilingOffsetX", function() {
                    return this._MainTex_STX;
                }, function(e) {
                    this._MainTex_STX = e;
                }), a(0, n, "albedoColor", function() {
                    return this._albedoColor;
                }, function(e) {
                    this._albedoColor = e, this._shaderValues.setVector(t.ALBEDOCOLOR, e);
                }), a(0, n, "albedoTexture", function() {
                    return this._shaderValues.getTexture(t.ALBEDOTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_ALBEDOTEXTURE),
                        this._shaderValues.setTexture(t.ALBEDOTEXTURE, e);
                }), a(0, n, "cull", function() {
                    return this._shaderValues.getInt(t.CULL);
                }, function(e) {
                    this._shaderValues.setInt(t.CULL, e);
                }), a(0, n, "parallaxTexture", function() {
                    return this._shaderValues.getTexture(t.PARALLAXTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_PARALLAXTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_PARALLAXTEXTURE),
                        this._shaderValues.setTexture(t.PARALLAXTEXTURE, e);
                }), a(0, n, "normalTexture", function() {
                    return this._shaderValues.getTexture(t.NORMALTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_NORMALTEXTURE),
                        this._shaderValues.setTexture(t.NORMALTEXTURE, e);
                }), a(0, n, "emissionColor", function() {
                    return this._shaderValues.getVector(t.EMISSIONCOLOR);
                }, function(e) {
                    this._shaderValues.setVector(t.EMISSIONCOLOR, e);
                }), a(0, n, "parallaxTextureScale", function() {
                    return this._Parallax;
                }, function(e) {
                    this._Parallax = Math.max(.005, Math.min(.08, e));
                }), a(0, n, "normalTextureScale", function() {
                    return this._BumpScale;
                }, function(e) {
                    this._BumpScale = e;
                }), a(0, n, "tilingOffsetZ", function() {
                    return this._MainTex_STZ;
                }, function(e) {
                    this._MainTex_STZ = e;
                }), a(0, n, "occlusionTexture", function() {
                    return this._shaderValues.getTexture(t.OCCLUSIONTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_OCCLUSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_OCCLUSIONTEXTURE),
                        this._shaderValues.setTexture(t.OCCLUSIONTEXTURE, e);
                }), a(0, n, "occlusionTextureStrength", function() {
                    return this._OcclusionStrength;
                }, function(e) {
                    this._OcclusionStrength = Math.max(0, Math.min(1, e));
                }), a(0, n, "specularTexture", function() {
                    return this._shaderValues.getTexture(t.SPECULARTEXTURE);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SPECULARTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SPECULARTEXTURE),
                        this._shaderValues.setTexture(t.SPECULARTEXTURE, e);
                }), a(0, n, "specularColorR", function() {
                    return this._SpecColorR;
                }, function(e) {
                    this._SpecColorR = e;
                }), a(0, n, "smoothness", function() {
                    return this._Glossiness;
                }, function(e) {
                    this._Glossiness = Math.max(0, Math.min(1, e));
                }), a(0, n, "specularColorG", function() {
                    return this._SpecColorG;
                }, function(e) {
                    this._SpecColorG = e;
                }), a(0, n, "specularColorB", function() {
                    return this._SpecColorB;
                }, function(e) {
                    this._SpecColorB = e;
                }), a(0, n, "specularColorA", function() {
                    return this._SpecColorA;
                }, function(e) {
                    this._SpecColorA = e;
                }), a(0, n, "blendDst", function() {
                    return this._shaderValues.getInt(t.BLEND_DST);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND_DST, e);
                }), a(0, n, "smoothnessTextureScale", function() {
                    return this._GlossMapScale;
                }, function(e) {
                    this._GlossMapScale = Math.max(0, Math.min(1, e));
                }), a(0, n, "depthWrite", function() {
                    return this._shaderValues.getBool(t.DEPTH_WRITE);
                }, function(e) {
                    this._shaderValues.setBool(t.DEPTH_WRITE, e);
                }), a(0, n, "smoothnessSource", function() {
                    return this._shaderValues.getInt(t.SMOOTHNESSSOURCE);
                }, function(e) {
                    e ? (this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA),
                        this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 1)) : (this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA),
                        this._shaderValues.setInt(t.SMOOTHNESSSOURCE, 0));
                }), a(0, n, "enableEmission", function() {
                    return this._shaderValues.getBool(t.ENABLEEMISSION);
                }, function(e) {
                    e ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSION) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSION),
                        this._shaderValues.setBool(t.ENABLEEMISSION, e);
                }), a(0, n, "enableReflection", function() {
                    return this._shaderValues.getBool(t.ENABLEREFLECT);
                }, function(e) {
                    this._shaderValues.setBool(t.ENABLEREFLECT, !0), e ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_REFLECTMAP);
                }), a(0, n, "tilingOffsetY", function() {
                    return this._MainTex_STY;
                }, function(e) {
                    this._MainTex_STY = e;
                }), a(0, n, "blend", function() {
                    return this._shaderValues.getInt(t.BLEND);
                }, function(e) {
                    this._shaderValues.setInt(t.BLEND, e);
                }), a(0, n, "depthTest", function() {
                    return this._shaderValues.getInt(t.DEPTH_TEST);
                }, function(e) {
                    this._shaderValues.setInt(t.DEPTH_TEST, e);
                }), t.__init__ = function() {
                    t.SHADERDEFINE_ALBEDOTEXTURE = t.shaderDefines.registerDefine("ALBEDOTEXTURE"),
                        t.SHADERDEFINE_SPECULARTEXTURE = t.shaderDefines.registerDefine("SPECULARTEXTURE"),
                        t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = t.shaderDefines.registerDefine("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"),
                        t.SHADERDEFINE_NORMALTEXTURE = t.shaderDefines.registerDefine("NORMALTEXTURE"),
                        t.SHADERDEFINE_PARALLAXTEXTURE = t.shaderDefines.registerDefine("PARALLAXTEXTURE"),
                        t.SHADERDEFINE_OCCLUSIONTEXTURE = t.shaderDefines.registerDefine("OCCLUSIONTEXTURE"),
                        t.SHADERDEFINE_EMISSION = t.shaderDefines.registerDefine("EMISSION"), t.SHADERDEFINE_EMISSIONTEXTURE = t.shaderDefines.registerDefine("EMISSIONTEXTURE"),
                        t.SHADERDEFINE_TILINGOFFSET = t.shaderDefines.registerDefine("TILINGOFFSET"), t.SHADERDEFINE_ALPHAPREMULTIPLY = t.shaderDefines.registerDefine("ALPHAPREMULTIPLY");
                }, t.SmoothnessSource_SpecularTexture_Alpha = 0, t.SmoothnessSource_AlbedoTexture_Alpha = 1,
                t.RENDERMODE_OPAQUE = 0, t.RENDERMODE_CUTOUT = 1, t.RENDERMODE_FADE = 2, t.RENDERMODE_TRANSPARENT = 3,
                t.SHADERDEFINE_ALBEDOTEXTURE = 0, t.SHADERDEFINE_NORMALTEXTURE = 0, t.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = 0,
                t.SHADERDEFINE_SPECULARTEXTURE = 0, t.SHADERDEFINE_OCCLUSIONTEXTURE = 0, t.SHADERDEFINE_PARALLAXTEXTURE = 0,
                t.SHADERDEFINE_EMISSION = 0, t.SHADERDEFINE_EMISSIONTEXTURE = 0, t.SHADERDEFINE_TILINGOFFSET = 0,
                t.SHADERDEFINE_ALPHAPREMULTIPLY = 0, t.SMOOTHNESSSOURCE = -1, t.ENABLEEMISSION = -1,
                t.ENABLEREFLECT = -1, i(t, ["ALBEDOTEXTURE", function() {
                    return this.ALBEDOTEXTURE = Ve.propertyNameToID("u_AlbedoTexture");
                }, "SPECULARTEXTURE", function() {
                    return this.SPECULARTEXTURE = Ve.propertyNameToID("u_SpecularTexture");
                }, "NORMALTEXTURE", function() {
                    return this.NORMALTEXTURE = Ve.propertyNameToID("u_NormalTexture");
                }, "PARALLAXTEXTURE", function() {
                    return this.PARALLAXTEXTURE = Ve.propertyNameToID("u_ParallaxTexture");
                }, "OCCLUSIONTEXTURE", function() {
                    return this.OCCLUSIONTEXTURE = Ve.propertyNameToID("u_OcclusionTexture");
                }, "EMISSIONTEXTURE", function() {
                    return this.EMISSIONTEXTURE = Ve.propertyNameToID("u_EmissionTexture");
                }, "ALBEDOCOLOR", function() {
                    return this.ALBEDOCOLOR = Ve.propertyNameToID("u_AlbedoColor");
                }, "SPECULARCOLOR", function() {
                    return this.SPECULARCOLOR = Ve.propertyNameToID("u_SpecularColor");
                }, "EMISSIONCOLOR", function() {
                    return this.EMISSIONCOLOR = Ve.propertyNameToID("u_EmissionColor");
                }, "SMOOTHNESS", function() {
                    return this.SMOOTHNESS = Ve.propertyNameToID("u_smoothness");
                }, "SMOOTHNESSSCALE", function() {
                    return this.SMOOTHNESSSCALE = Ve.propertyNameToID("u_smoothnessScale");
                }, "OCCLUSIONSTRENGTH", function() {
                    return this.OCCLUSIONSTRENGTH = Ve.propertyNameToID("u_occlusionStrength");
                }, "NORMALSCALE", function() {
                    return this.NORMALSCALE = Ve.propertyNameToID("u_normalScale");
                }, "PARALLAXSCALE", function() {
                    return this.PARALLAXSCALE = Ve.propertyNameToID("u_parallaxScale");
                }, "TILINGOFFSET", function() {
                    return this.TILINGOFFSET = Ve.propertyNameToID("u_TilingOffset");
                }, "CULL", function() {
                    return this.CULL = Ve.propertyNameToID("s_Cull");
                }, "BLEND", function() {
                    return this.BLEND = Ve.propertyNameToID("s_Blend");
                }, "BLEND_SRC", function() {
                    return this.BLEND_SRC = Ve.propertyNameToID("s_BlendSrc");
                }, "BLEND_DST", function() {
                    return this.BLEND_DST = Ve.propertyNameToID("s_BlendDst");
                }, "DEPTH_TEST", function() {
                    return this.DEPTH_TEST = Ve.propertyNameToID("s_DepthTest");
                }, "DEPTH_WRITE", function() {
                    return this.DEPTH_WRITE = Ve.propertyNameToID("s_DepthWrite");
                }, "defaultMaterial", function() {
                    return this.defaultMaterial = new t();
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Bn.shaderDefines);
                }]), t;
        }(Bn),
        mi = (function(t) {
            function n(e, t) {
                this._isKinematic = !1, this._mass = 1, this._angularDamping = 0, this._linearDamping = 0,
                    this._overrideGravity = !1, this._detectCollisions = !0, this._gravity = new Te(0, -10, 0),
                    this._totalTorque = new Te(0, 0, 0), this._linearVelocity = new Te(), this._angularVelocity = new Te(),
                    this._linearFactor = new Te(1, 1, 1), this._angularFactor = new Te(1, 1, 1), void 0 === e && (e = 1),
                    void 0 === t && (t = Ut.COLLISIONFILTERGROUP_ALLFILTER), n.__super.call(this, e, t);
            }
            r(n, "laya.d3.physics.Rigidbody3D", t);
            var o = n.prototype;
            return o._updateMass = function(e) {
                    this._nativeColliderObject && this._colliderShape && (this._colliderShape._nativeShape.calculateLocalInertia(e, n._nativeInertia),
                        this._nativeColliderObject.setMassProps(e, n._nativeInertia), this._nativeColliderObject.updateInertiaTensor());
                }, o._delegateMotionStateGetWorldTransform = function(e) {}, o._delegateMotionStateSetWorldTransform = function(e) {
                    var t = this._rigidbody;
                    t._simulation._updatedRigidbodies++;
                    var n = W._physics3D,
                        i = n.wrapPointer(e, n.btTransform);
                    t._updateTransformComponent(i);
                }, o._delegateMotionStateGetWorldTransformNative = function(e, t) {}, o._delegateMotionStateSetWorldTransformNative = function(e, t) {
                    var n = e;
                    n._simulation._updatedRigidbodies++;
                    var i = W._physics3D,
                        r = i.wrapPointer(t, i.btTransform);
                    n._updateTransformComponent(r);
                }, o._onScaleChange = function(e) {
                    laya.d3.physics.PhysicsComponent.prototype._onScaleChange.call(this, e), this._updateMass(this._isKinematic ? 0 : this._mass);
                }, o._delegateMotionStateClear = function() {
                    this._rigidbody = null;
                }, o._onAdded = function() {
                    var i = W._physics3D,
                        r = new i.LayaMotionState(),
                        a = null != e.conch;
                    a && i.LayaMotionState.prototype.setRigidbody ? (r.setRigidbody(this), r.setNativeGetWorldTransform(this._delegateMotionStateGetWorldTransformNative),
                            r.setNativeSetWorldTransform(this._delegateMotionStateSetWorldTransformNative)) : (r.getWorldTransform = this._delegateMotionStateGetWorldTransform,
                            r.setWorldTransform = this._delegateMotionStateSetWorldTransform), r.clear = this._delegateMotionStateClear,
                        r._rigidbody = this, this._nativeMotionState = r;
                    var o = new i.btRigidBodyConstructionInfo(0, r, null, n._nativeVector3Zero),
                        s = new i.btRigidBody(o);
                    s.setUserIndex(this.id), this._nativeColliderObject = s, t.prototype._onAdded.call(this),
                        this.mass = this._mass, this.linearFactor = this._linearFactor, this.angularFactor = this._angularFactor,
                        this.linearDamping = this._linearDamping, this.angularDamping = this._angularDamping,
                        this.overrideGravity = this._overrideGravity, this.gravity = this._gravity, this.isKinematic = this._isKinematic,
                        i.destroy(o);
                }, o._onShapeChange = function(e) {
                    laya.d3.physics.PhysicsComponent.prototype._onShapeChange.call(this, e), this._isKinematic ? this._updateMass(0) : (this._nativeColliderObject.setCenterOfMassTransform(this._nativeColliderObject.getWorldTransform()),
                        this._updateMass(this._mass));
                }, o._parse = function(e) {
                    null != e.friction && (this.friction = e.friction), null != e.rollingFriction && (this.rollingFriction = e.rollingFriction),
                        null != e.restitution && (this.restitution = e.restitution), null != e.isTrigger && (this.isTrigger = e.isTrigger),
                        null != e.mass && (this.mass = e.mass), null != e.isKinematic && (this.isKinematic = e.isKinematic),
                        null != e.linearDamping && (this.linearDamping = e.linearDamping), null != e.angularDamping && (this.angularDamping = e.angularDamping),
                        null != e.overrideGravity && (this.overrideGravity = e.overrideGravity), e.gravity && (this.gravity.fromArray(e.gravity),
                            this.gravity = this.gravity), laya.d3.physics.PhysicsComponent.prototype._parse.call(this, e),
                        this._parseShape(e.shapes);
                }, o._onDestroy = function() {
                    var e = W._physics3D;
                    this._nativeMotionState.clear(), e.destroy(this._nativeMotionState), laya.d3.physics.PhysicsComponent.prototype._onDestroy.call(this),
                        this._nativeMotionState = null, this._gravity = null, this._totalTorque = null,
                        this._linearVelocity = null, this._angularVelocity = null, this._linearFactor = null,
                        this._angularFactor = null;
                }, o._addToSimulation = function() {
                    this._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);
                }, o._removeFromSimulation = function() {
                    this._simulation._removeRigidBody(this);
                }, o._cloneTo = function(e) {
                    t.prototype._cloneTo.call(this, e);
                    var n = e;
                    n.isKinematic = this._isKinematic, n.mass = this._mass, n.gravity = this._gravity,
                        n.angularDamping = this._angularDamping, n.linearDamping = this._linearDamping,
                        n.overrideGravity = this._overrideGravity, n.linearVelocity = this._linearVelocity,
                        n.angularVelocity = this._angularVelocity, n.linearFactor = this._linearFactor,
                        n.angularFactor = this._angularFactor, n.detectCollisions = this._detectCollisions;
                }, o.applyForce = function(e, t) {
                    if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                    var i = n._nativeTempVector30;
                    if (i.setValue(-e.x, e.y, e.z), t) {
                        var r = n._nativeTempVector31;
                        r.setValue(-t.x, t.y, t.z), this._nativeColliderObject.applyForce(i, r);
                    } else this._nativeColliderObject.applyCentralForce(i);
                }, o.applyTorque = function(e) {
                    if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                    var t = n._nativeTempVector30;
                    t.setValue(-e.x, e.y, e.z), this._nativeColliderObject.applyTorque(t);
                }, o.applyImpulse = function(e, t) {
                    if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                    n._nativeImpulse.setValue(-e.x, e.y, e.z), t ? (n._nativeImpulseOffset.setValue(-t.x, t.y, t.z),
                        this._nativeColliderObject.applyImpulse(n._nativeImpulse, n._nativeImpulseOffset)) : this._nativeColliderObject.applyCentralImpulse(n._nativeImpulse);
                }, o.applyTorqueImpulse = function(e) {
                    if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                    var t = n._nativeTempVector30;
                    t.setValue(-e.x, e.y, e.z), this._nativeColliderObject.applyTorqueImpulse(t);
                }, o.wakeUp = function() {
                    this._nativeColliderObject && this._nativeColliderObject.activate(!1);
                }, o.clearForces = function() {
                    var e = this._nativeColliderObject;
                    if (null == e) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
                    e.clearForces();
                    var t = n._nativeVector3Zero;
                    e.setInterpolationAngularVelocity(t), e.setLinearVelocity(t), e.setInterpolationAngularVelocity(t),
                        e.setAngularVelocity(t);
                }, a(0, o, "angularDamping", function() {
                    return this._angularDamping;
                }, function(e) {
                    this._angularDamping = e, this._nativeColliderObject && this._nativeColliderObject.setDamping(this._linearDamping, e);
                }), a(0, o, "mass", function() {
                    return this._mass;
                }, function(e) {
                    e = Math.max(e, 1e-7), this._mass = e, this._isKinematic || this._updateMass(e);
                }), a(0, o, "linearDamping", function() {
                    return this._linearDamping;
                }, function(e) {
                    this._linearDamping = e, this._nativeColliderObject && this._nativeColliderObject.setDamping(e, this._angularDamping);
                }), a(0, o, "isKinematic", function() {
                    return this._isKinematic;
                }, function(e) {
                    this._isKinematic = e;
                    var t = !!(this._simulation && this._enabled && this._colliderShape);
                    t && this._removeFromSimulation();
                    var i = this._nativeColliderObject,
                        r = i.getCollisionFlags();
                    e ? (r = 2 | r, i.setCollisionFlags(r), this._nativeColliderObject.forceActivationState(4),
                        this._enableProcessCollisions = !1, this._updateMass(0)) : ((2 & r) > 0 && (r = 2 ^ r),
                        i.setCollisionFlags(r), this._nativeColliderObject.setActivationState(1), this._enableProcessCollisions = !0,
                        this._updateMass(this._mass));
                    var a = n._nativeVector3Zero;
                    i.setInterpolationLinearVelocity(a), i.setLinearVelocity(a), i.setInterpolationAngularVelocity(a),
                        i.setAngularVelocity(a), t && this._addToSimulation();
                }), a(0, o, "gravity", function() {
                    return this._gravity;
                }, function(e) {
                    this._gravity = e, n._nativeGravity.setValue(-e.x, e.y, e.z), this._nativeColliderObject.setGravity(n._nativeGravity);
                }), a(0, o, "overrideGravity", function() {
                    return this._overrideGravity;
                }, function(e) {
                    if (this._overrideGravity = e, this._nativeColliderObject) {
                        var t = this._nativeColliderObject.getFlags();
                        e ? 0 === (1 & t) && this._nativeColliderObject.setFlags(1 | t) : (1 & t) > 0 && this._nativeColliderObject.setFlags(1 ^ t);
                    }
                }), a(0, o, "totalForce", function() {
                    return this._nativeColliderObject ? this._nativeColliderObject.getTotalForce() : null;
                }), a(0, o, "linearVelocity", function() {
                    return this._nativeColliderObject && ke._convertToLayaVec3(this._nativeColliderObject.getLinearVelocity(), this._linearVelocity, !0),
                        this._linearVelocity;
                }, function(e) {
                    if (this._linearVelocity = e, this._nativeColliderObject) {
                        var t = n._nativeTempVector30;
                        ke._convertToBulletVec3(e, t, !0), this.isSleeping && this.wakeUp(), this._nativeColliderObject.setLinearVelocity(t);
                    }
                }), a(0, o, "detectCollisions", function() {
                    return this._detectCollisions;
                }, function(e) {
                    this._detectCollisions !== e && (this._detectCollisions = e, this._colliderShape && this._enabled && this._simulation && (this._simulation._removeRigidBody(this),
                        this._simulation._addRigidBody(this, this._collisionGroup, e ? this._canCollideWith : 0)));
                }), a(0, o, "linearFactor", function() {
                    return this._nativeColliderObject ? this._linearFactor : null;
                }, function(e) {
                    if (this._linearFactor = e, this._nativeColliderObject) {
                        var t = n._nativeTempVector30;
                        ke._convertToBulletVec3(e, t, !1), this._nativeColliderObject.setLinearFactor(t);
                    }
                }), a(0, o, "angularFactor", function() {
                    return this._nativeColliderObject ? this._angularFactor : null;
                }, function(e) {
                    if (this._angularFactor = e, this._nativeColliderObject) {
                        var t = n._nativeTempVector30;
                        ke._convertToBulletVec3(e, t, !1), this._nativeColliderObject.setAngularFactor(t);
                    }
                }), a(0, o, "angularVelocity", function() {
                    return this._nativeColliderObject && ke._convertToLayaVec3(this._nativeColliderObject.getAngularVelocity(), this._angularVelocity, !0),
                        this._angularVelocity;
                }, function(e) {
                    if (this._angularVelocity = e, this._nativeColliderObject) {
                        var t = n._nativeTempVector30;
                        ke._convertToBulletVec3(e, t, !0), this.isSleeping && this.wakeUp(), this._nativeColliderObject.setAngularVelocity(t);
                    }
                }), a(0, o, "totalTorque", function() {
                    if (this._nativeColliderObject) {
                        var e = this._nativeColliderObject.getTotalTorque(),
                            t = this._totalTorque;
                        t.x = -e.x, t.y = e.y, t.z = e.z;
                    }
                    return null;
                }), a(0, o, "isSleeping", function() {
                    return this._nativeColliderObject ? 2 === this._nativeColliderObject.getActivationState() : !1;
                }), a(0, o, "sleepLinearVelocity", function() {
                    return this._nativeColliderObject.getLinearSleepingThreshold();
                }, function(e) {
                    this._nativeColliderObject.setSleepingThresholds(e, this._nativeColliderObject.getAngularSleepingThreshold());
                }), a(0, o, "sleepAngularVelocity", function() {
                    return this._nativeColliderObject.getAngularSleepingThreshold();
                }, function(e) {
                    this._nativeColliderObject.setSleepingThresholds(this._nativeColliderObject.getLinearSleepingThreshold(), e);
                }), n.TYPE_STATIC = 0, n.TYPE_DYNAMIC = 1, n.TYPE_KINEMATIC = 2, n._BT_DISABLE_WORLD_GRAVITY = 1,
                n._BT_ENABLE_GYROPSCOPIC_FORCE = 2, i(n, ["_nativeTempVector30", function() {
                    return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeTempVector31", function() {
                    return this._nativeTempVector31 = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeVector3Zero", function() {
                    return this._nativeVector3Zero = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeInertia", function() {
                    return this._nativeInertia = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeImpulse", function() {
                    return this._nativeImpulse = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeImpulseOffset", function() {
                    return this._nativeImpulseOffset = new W._physics3D.btVector3(0, 0, 0);
                }, "_nativeGravity", function() {
                    return this._nativeGravity = new W._physics3D.btVector3(0, 0, 0);
                }]), n;
        }(Yn), function(e) {
            function t(e, n) {
                void 0 === e && (e = 1), void 0 === n && (n = Ut.COLLISIONFILTERGROUP_ALLFILTER),
                    t.__super.call(this, e, n);
            }
            r(t, "laya.d3.physics.PhysicsCollider", e);
            var n = t.prototype;
            return n._addToSimulation = function() {
                this._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);
            }, n._removeFromSimulation = function() {
                this._simulation._removePhysicsCollider(this);
            }, n._onTransformChanged = function(e) {
                e &= 56, e && (this._transformFlag |= e, this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
            }, n._parse = function(e) {
                null != e.friction && (this.friction = e.friction), null != e.rollingFriction && (this.rollingFriction = e.rollingFriction),
                    null != e.restitution && (this.restitution = e.restitution), null != e.isTrigger && (this.isTrigger = e.isTrigger),
                    laya.d3.physics.PhysicsComponent.prototype._parse.call(this, e), this._parseShape(e.shapes);
            }, n._onAdded = function() {
                var t = W._physics3D,
                    n = new t.btCollisionObject();
                n.setUserIndex(this.id), n.forceActivationState(5);
                var i = n.getCollisionFlags();
                this.owner.isStatic ? ((2 & i) > 0 && (i = 2 ^ i), i = 1 | i) : ((1 & i) > 0 && (i = 1 ^ i),
                    i = 2 | i), n.setCollisionFlags(i), this._nativeColliderObject = n, e.prototype._onAdded.call(this);
            }, t;
        }(Yn), function(e) {
            function t(e) {
                this._bones = [], this._skinnedDataLoopMarks = [], this._localBounds = new xt(Te._ZERO, Te._ZERO),
                    this._cacheAnimationNode = [], t.__super.call(this, e);
            }
            r(t, "laya.d3.core.SkinnedMeshRenderer", e);
            var n = t.prototype;
            return n._computeSkinnedData = function() {
                if (this._cacheMesh && this._cacheAvatar || this._cacheMesh && this._cacheRootBone)
                    for (var e = this._cacheMesh._inverseBindPoses, t = this._cacheMesh._bindPoseIndices, n = this._cacheMesh._skinDataPathMarks, i = 0, r = this._cacheMesh.subMeshCount; r > i; i++)
                        for (var a = this._cacheMesh._getSubMesh(i)._boneIndicesList, o = this._skinnedData[i], s = 0, l = a.length; l > s; s++) {
                            var h = a[s];
                            R.supportWebGLPlusAnimation ? this._computeSubSkinnedDataNative(this._cacheAnimator._animationNodeWorldMatrixs, this._cacheAnimationNodeIndices, this._cacheMesh._inverseBindPosesBuffer, h, t, o[s]) : this._computeSubSkinnedData(e, h, t, o[s], n);
                        }
            }, n._computeSubSkinnedData = function(e, t, n, i, r) {
                for (var a = 0, o = t.length; o > a; a++) {
                    var s = t[a];
                    if (this._skinnedDataLoopMarks[s] === N.loopCount)
                        for (var l = r[s], h = this._skinnedData[l[0]][l[1]], u = 16 * l[2], c = 16 * a, _ = 0; 16 > _; _++) i[c + _] = h[u + _];
                    else {
                        if (this._cacheRootBone) {
                            var d = n[s];
                            ke._mulMatrixArray(this._bones[d].transform.worldMatrix.elements, e[d], i, 16 * a);
                        } else ke._mulMatrixArray(this._cacheAnimationNode[s].transform.getWorldMatrix(), e[n[s]], i, 16 * a);
                        this._skinnedDataLoopMarks[s] = N.loopCount;
                    }
                }
            }, n._boundChange = function() {
                this._boundsChange = !0;
            }, n._onMeshChange = function(t) {
                e.prototype._onMeshChange.call(this, t), this._cacheMesh = t;
                var n = t.subMeshCount;
                this._skinnedData = o(n), this._skinnedDataLoopMarks.length = t._bindPoseIndices.length;
                for (var i = 0; n > i; i++)
                    for (var r = t._getSubMesh(i)._boneIndicesList, a = r.length, s = this._skinnedData[i] = o(a), l = 0; a > l; l++) s[l] = new Float32Array(16 * r[l].length);
                this._bones || this._cacheAvatar && t && this._getCacheAnimationNodes();
            }, n._setCacheAnimator = function(e) {
                this._cacheAnimator = e, this._defineDatas.add(Di.SHADERDEFINE_BONE), this._setRootNode();
            }, n._calculateBoundingBox = function() {
                if (this._cacheRootBone) this._localBounds._tranform(this._cacheRootBone.transform.worldMatrix, this._bounds);
                else if (this._cacheAnimator && this._rootBone) {
                    var n = t._tempMatrix4x4;
                    ke.matrix4x4MultiplyMFM(this._cacheAnimator.owner.transform.worldMatrix, this._cacheRootAnimationNode.transform.getWorldMatrix(), n),
                        this._localBounds._tranform(n, this._bounds);
                } else e.prototype._calculateBoundingBox.call(this);
                if (R.supportWebGLPlusCulling) {
                    var i = this._bounds.getMin(),
                        r = this._bounds.getMax(),
                        a = wt._cullingBuffer;
                    a[this._cullingBufferIndex + 1] = i.x, a[this._cullingBufferIndex + 2] = i.y, a[this._cullingBufferIndex + 3] = i.z,
                        a[this._cullingBufferIndex + 4] = r.x, a[this._cullingBufferIndex + 5] = r.y, a[this._cullingBufferIndex + 6] = r.z;
                }
            }, n._changeRenderObjectsByMesh = function(e) {
                var t = e.subMeshCount;
                this._renderElements.length = t;
                for (var n = 0; t > n; n++) {
                    var i = this._renderElements[n];
                    if (!i) {
                        var r = this.sharedMaterials[n];
                        i = this._renderElements[n] = new Ae(), i.setTransform(this._owner._transform),
                            i.render = this, i.material = r ? r : ci.defaultMaterial;
                    }
                    i.setGeometry(e._getSubMesh(n));
                }
            }, n._renderUpdate = function(e, t) {
                if (this._cacheAnimator)
                    if (this._computeSkinnedData(), this._cacheRootBone) this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, Ht.DEFAULT);
                    else {
                        var n = this._cacheAnimator.owner._transform;
                        this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, n.worldMatrix);
                    }
                else this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, t.worldMatrix);
            }, n._renderUpdateWithCamera = function(e, t) {
                var n = e.projectionViewMatrix;
                if (this._cacheRootBone) this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
                else {
                    if (this._cacheAnimator) {
                        var i = this._cacheAnimator.owner._transform;
                        Ht.multiply(n, i.worldMatrix, this._projectionViewWorldMatrix);
                    } else Ht.multiply(n, t.worldMatrix, this._projectionViewWorldMatrix);
                    this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix);
                }
            }, n._destroy = function() {
                e.prototype._destroy.call(this), this._cacheRootBone ? this._cacheRootBone.transform.off("transformchanged", this, this._boundChange) : this._cacheRootAnimationNode && this._cacheRootAnimationNode.transform.off("transformchanged", this, this._boundChange);
            }, n._setRootBone = function(e) {
                this._rootBone = e, this._setRootNode();
            }, n._setRootNode = function() {
                var e;
                e = this._cacheAnimator && this._rootBone && this._cacheAvatar ? this._cacheAnimator._avatarNodeMap[this._rootBone] : null,
                    this._cacheRootAnimationNode != e && (this._boundChange(), this._cacheRootAnimationNode && this._cacheRootAnimationNode.transform.off("transformchanged", this, this._boundChange),
                        e && e.transform.on("transformchanged", this, this._boundChange), this._cacheRootAnimationNode = e);
            }, n._getCacheAnimationNodes = function() {
                var e = this._cacheMesh._boneNames,
                    t = this._cacheMesh._bindPoseIndices,
                    n = t.length;
                if (R.supportWebGLPlusAnimation) {
                    this._cacheAnimationNodeIndices = new Uint16Array(n);
                    var i = this._cacheAnimator._avatarNodeMap;
                    for (o = 0; n > o; o++) {
                        var r = i[e[t[o]]];
                        this._cacheAnimationNodeIndices[o] = r._worldMatrixIndex;
                    }
                } else {
                    this._cacheAnimationNode.length = n;
                    for (var a = this._cacheAnimator._avatarNodeMap, o = 0; n > o; o++) {
                        var s = a[e[t[o]]];
                        this._cacheAnimationNode[o] = s;
                    }
                }
            }, n._setCacheAvatar = function(e) {
                this._cacheAvatar !== e && (this._cacheMesh ? (this._cacheAvatar = e, e && (this._defineDatas.add(Di.SHADERDEFINE_BONE),
                    this._getCacheAnimationNodes())) : this._cacheAvatar = e, this._setRootNode());
            }, n._computeSubSkinnedDataNative = function(e, t, n, i, r, a) {
                v.instance.computeSubSkinnedData(e, t, n, i, r, a);
            }, a(0, n, "localBounds", function() {
                return this._localBounds;
            }, function(e) {
                this._localBounds = e;
            }), a(0, n, "rootBone", function() {
                return this._cacheRootBone;
            }, function(e) {
                this._cacheRootBone != e && (this._cacheRootBone && this._cacheRootBone.transform.off("transformchanged", this, this._boundChange),
                    e.transform.on("transformchanged", this, this._boundChange), this._cacheRootBone = e,
                    this._boundChange());
            }), a(0, n, "bones", function() {
                return this._bones;
            }), i(t, ["_tempMatrix4x4", function() {
                return this._tempMatrix4x4 = new Ht();
            }]), t;
        }(jn)),
        pi = function(e) {
            function t(e, n, i, r) {
                void 0 === i && (i = 0), void 0 === r && (r = 0), t.__super.call(this, i, !1), this._glTextureType = 3553,
                    this._width = e, this._height = n, this._depthStencilFormat = r, this._create(e, n);
            }
            r(t, "laya.d3.resource.RenderTexture", e);
            var n = t.prototype;
            return n._create = function(e, t) {
                var n = v.instance;
                this._frameBuffer = n.createFramebuffer(), B.bindTexture(n, this._glTextureType, this._glTexture);
                var i = this._getGLFormat();
                if (n.texImage2D(this._glTextureType, 0, i, e, t, 0, i, 5121, null), this._setGPUMemory(e * t * 4),
                    n.bindFramebuffer(36160, this._frameBuffer), n.framebufferTexture2D(36160, 36064, 3553, this._glTexture, 0),
                    3 !== this._depthStencilFormat) switch (this._depthStencilBuffer = n.createRenderbuffer(),
                    n.bindRenderbuffer(36161, this._depthStencilBuffer), this._depthStencilFormat) {
                    case 0:
                        n.renderbufferStorage(36161, 33189, e, t), n.framebufferRenderbuffer(36160, 36096, 36161, this._depthStencilBuffer);
                        break;

                    case 1:
                        n.renderbufferStorage(36161, 36168, e, t), n.framebufferRenderbuffer(36160, 36128, 36161, this._depthStencilBuffer);
                        break;

                    case 2:
                        n.renderbufferStorage(36161, 34041, e, t), n.framebufferRenderbuffer(36160, 33306, 36161, this._depthStencilBuffer);
                        break;

                    default:
                        throw "RenderTexture: unkonw depth format.";
                }
                n.bindFramebuffer(36160, null), n.bindRenderbuffer(36161, null), this._setWarpMode(10242, this._wrapModeU),
                    this._setWarpMode(10243, this._wrapModeV), this._setFilterMode(this._filterMode),
                    this._setAnisotropy(this._anisoLevel), this._readyed = !0, this._activeResource();
            }, n._start = function() {
                v.instance.bindFramebuffer(36160, this._frameBuffer), t._currentActive = this, this._readyed = !1;
            }, n._end = function() {
                v.instance.bindFramebuffer(36160, null), t._currentActive = null, this._readyed = !0;
            }, n.getData = function(e, t, n, i, r) {
                if (R.isConchApp && 2 == conchConfig.threadMode) throw "native 2 thread mode use getDataAsync";
                var a = v.instance;
                a.bindFramebuffer(36160, this._frameBuffer);
                var o = 36053 === a.checkFramebufferStatus(36160);
                return o ? (a.readPixels(e, t, n, i, 6408, 5121, r), a.bindFramebuffer(36160, null),
                    r) : (a.bindFramebuffer(36160, null), null);
            }, n.getDataAsync = function(e, t, n, i, r) {
                var a = v.instance;
                a.bindFramebuffer(36160, this._frameBuffer), a.readPixelsAsync(e, t, n, i, 6408, 5121, function(e) {
                    r(new Uint8Array(e));
                }), a.bindFramebuffer(36160, null);
            }, n._disposeResource = function() {
                if (this._frameBuffer) {
                    var e = v.instance;
                    e.deleteTexture(this._glTexture), e.deleteFramebuffer(this._frameBuffer), e.deleteRenderbuffer(this._depthStencilBuffer),
                        this._glTexture = null, this._frameBuffer = null, this._depthStencilBuffer = null,
                        this._setGPUMemory(0);
                }
            }, a(0, n, "depthStencilFormat", function() {
                return this._depthStencilFormat;
            }), a(0, n, "defaulteTexture", function() {
                return w.grayTexture;
            }), a(1, t, "currentActive", function() {
                return t._currentActive;
            }, laya.resource.BaseTexture._$SET_currentActive), t.getTemporary = function(e, n, i, r, a) {
                void 0 === i && (i = 0), void 0 === r && (r = 0), void 0 === a && (a = 1);
                var o = 1e7 * a + 1e6 * r + 1e5 * i + 1e4 * n + e,
                    s = t._temporaryMap[o];
                if (!s || s && 0 === s.length) {
                    var l = new t(e, n, i, r);
                    return l.filterMode = a, l;
                }
                return s.pop();
            }, t.setReleaseTemporary = function(e) {
                var n = 1e7 * e.filterMode + 1e6 * e.depthStencilFormat + 1e5 * e.format + 1e4 * e.height + e.width,
                    i = t._temporaryMap[n];
                i || (t._temporaryMap[n] = i = []), i.push(e);
            }, t._temporaryMap = {}, t._currentActive = null, t;
        }(s),
        Ti = function(e) {
            function t(e, n) {
                void 0 === e && (e = 0), void 0 === n && (n = !1), t.__super.call(this, e, n), this._glTextureType = 34067;
            }
            r(t, "laya.d3.resource.TextureCube", e);
            var i = t.prototype;
            return i.setSixSideImageSources = function(e, t) {
                void 0 === t && (t = !1);
                for (var n = 0, i = 0, r = 0; 6 > r; r++) {
                    var a = e[r];
                    if (!a) return void console.log("TextureCube: image Source can't be null.");
                    var o = a.width,
                        s = a.height;
                    if (r > 0 && n !== o) return void console.log("TextureCube: each side image's width and height must same.");
                    if (n = o, i = s, n !== i) return void console.log("TextureCube: each side image's width and height must same.");
                }
                this._width = n, this._height = i;
                var l = v.instance;
                B.bindTexture(l, this._glTextureType, this._glTexture);
                var h = this._getGLFormat();
                if (R.isConchApp) {
                    if (1 == t)
                        for (var u = 0; 6 > u; u++) e[u].setPremultiplyAlpha(t);
                    l.texImage2D(34073, 0, 6408, 6408, 5121, e[0]), l.texImage2D(34074, 0, 6408, 6408, 5121, e[1]),
                        l.texImage2D(34069, 0, 6408, 6408, 5121, e[2]), l.texImage2D(34070, 0, 6408, 6408, 5121, e[3]),
                        l.texImage2D(34071, 0, 6408, 6408, 5121, e[4]), l.texImage2D(34072, 0, 6408, 6408, 5121, e[5]);
                } else t && l.pixelStorei(37441, !0), l.texImage2D(34073, 0, h, h, 5121, e[0]),
                    l.texImage2D(34074, 0, h, h, 5121, e[1]), l.texImage2D(34069, 0, h, h, 5121, e[2]),
                    l.texImage2D(34070, 0, h, h, 5121, e[3]), l.texImage2D(34071, 0, h, h, 5121, e[4]),
                    l.texImage2D(34072, 0, h, h, 5121, e[5]), t && l.pixelStorei(37441, !1);
                this._mipmap && this._isPot(n) && this._isPot(i) ? (l.generateMipmap(this._glTextureType),
                        this._setGPUMemory(n * i * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(n * i * 4 * 6),
                    this._setWarpMode(10242, this._wrapModeU), this._setWarpMode(10243, this._wrapModeV),
                    this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
            }, i.setSixSidePixels = function(e, t, n) {
                if (0 >= e || 0 >= t) throw new Error("TextureCube:width or height must large than 0.");
                if (!n) throw new Error("TextureCube:pixels can't be null.");
                this._width = e, this._height = t;
                var i = v.instance;
                B.bindTexture(i, this._glTextureType, this._glTexture);
                var r = this._getGLFormat();
                i.texImage2D(34073, 0, r, e, t, 0, r, 5121, n[0]), i.texImage2D(34074, 0, r, e, t, 0, r, 5121, n[1]),
                    i.texImage2D(34069, 0, r, e, t, 0, r, 5121, n[2]), i.texImage2D(34070, 0, r, e, t, 0, r, 5121, n[3]),
                    i.texImage2D(34071, 0, r, e, t, 0, r, 5121, n[4]), i.texImage2D(34072, 0, r, e, t, 0, r, 5121, n[5]),
                    this._mipmap && this._isPot(e) && this._isPot(t) ? (i.generateMipmap(this._glTextureType),
                        this._setGPUMemory(e * t * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(e * t * 4 * 6),
                    this._setWarpMode(10242, this._wrapModeU), this._setWarpMode(10243, this._wrapModeV),
                    this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
            }, i._recoverResource = function() {}, a(0, i, "defaulteTexture", function() {
                return t.grayTexture;
            }), t.__init__ = function() {
                var e = new Uint8Array(3);
                e[0] = 128, e[1] = 128, e[2] = 128, t.grayTexture = new t(0, !1), t.grayTexture.setSixSidePixels(1, 1, [e, e, e, e, e, e]),
                    t.grayTexture.lock = !0;
            }, t._parse = function(e, n, i) {
                var r = i ? new t(i[0], i[1]) : new t();
                return r.setSixSideImageSources(e), r;
            }, t.load = function(e, t) {
                n.loader.create(e, t, null, "TEXTURECUBE");
            }, t.grayTexture = null, t;
        }(s),
        Ei = function(e) {
            function t(e, n) {
                t.__super.call(this, n), this._meshFilter = new $e(this), this._render = new jn(this),
                    e && (this._meshFilter.sharedMesh = e);
            }
            r(t, "laya.d3.core.MeshSprite3D", e);
            var n = t.prototype;
            return n._parse = function(e, t) {
                    laya.d3.core.Sprite3D.prototype._parse.call(this, e, t);
                    var n = this.meshRenderer,
                        i = e.lightmapIndex;
                    null != i && (n.lightmapIndex = i);
                    var r = e.lightmapScaleOffset;
                    r && (n.lightmapScaleOffset = new me(r[0], r[1], r[2], r[3])), void 0 != e.meshPath && (this.meshFilter.sharedMesh = S.getRes(e.meshPath)),
                        void 0 != e.enableRender && (this.meshRenderer.enable = e.enableRender);
                    var a = e.materials;
                    if (a) {
                        var o = n.sharedMaterials,
                            s = a.length;
                        o.length = s;
                        for (var l = 0; s > l; l++) o[l] = S.getRes(a[l].path);
                        n.sharedMaterials = o;
                    }
                }, n._addToInitStaticBatchManager = function() {
                    Sn.instance._addBatchSprite(this);
                }, n._cloneTo = function(e, t, n) {
                    var i = e;
                    i._meshFilter.sharedMesh = this._meshFilter.sharedMesh;
                    var r = this._render,
                        a = i._render;
                    a.enable = r.enable, a.sharedMaterials = r.sharedMaterials, a.castShadow = r.castShadow;
                    var o = r.lightmapScaleOffset;
                    o && (a.lightmapScaleOffset = o.clone()), a.lightmapIndex = r.lightmapIndex, a.receiveShadow = r.receiveShadow,
                        a.sortingFudge = r.sortingFudge, laya.d3.core.Sprite3D.prototype._cloneTo.call(this, e, t, n);
                }, n.destroy = function(t) {
                    void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                        this._meshFilter.destroy());
                }, a(0, n, "meshFilter", function() {
                    return this._meshFilter;
                }), a(0, n, "meshRenderer", function() {
                    return this._render;
                }), t.__init__ = function() {
                    t.SHADERDEFINE_UV0 = t.shaderDefines.registerDefine("UV"), t.SHADERDEFINE_COLOR = t.shaderDefines.registerDefine("COLOR"),
                        t.SHADERDEFINE_UV1 = t.shaderDefines.registerDefine("UV1"), t.SHADERDEFINE_GPU_INSTANCE = t.shaderDefines.registerDefine("GPU_INSTANCE"),
                        q._registerManager(Sn.instance), ee._registerManager(ln.instance);
                }, t.SHADERDEFINE_UV0 = 0, t.SHADERDEFINE_COLOR = 0, t.SHADERDEFINE_UV1 = 0, t.SHADERDEFINE_GPU_INSTANCE = 0,
                i(t, ["shaderDefines", function() {
                    return this.shaderDefines = new pe(Jn.shaderDefines);
                }]), t;
        }(Jn),
        vi = function(e) {
            function t() {
                this._direction = null, this._spotAngle = NaN, this._range = NaN, t.__super.call(this),
                    this._spotAngle = 30, this._range = 10, this._direction = new Te();
            }
            r(t, "laya.d3.core.light.SpotLight", e);
            var n = t.prototype;
            return n._onActive = function() {
                e.prototype._onActive.call(this), this._lightmapBakedType !== ei.LIGHTMAPBAKEDTYPE_BAKED && this.scene._defineDatas.add(Qn.SHADERDEFINE_SPOTLIGHT);
            }, n._onInActive = function() {
                e.prototype._onInActive.call(this), this._lightmapBakedType !== ei.LIGHTMAPBAKEDTYPE_BAKED && this.scene._defineDatas.remove(Qn.SHADERDEFINE_SPOTLIGHT);
            }, n._prepareToScene = function() {
                var e = this._scene;
                if (e.enableLight && this.activeInHierarchy) {
                    var t = (e._defineDatas, e._shaderValues);
                    return Te.scale(this.color, this._intensity, this._intensityColor), t.setVector3(Qn.SPOTLIGHTCOLOR, this._intensityColor),
                        t.setVector3(Qn.SPOTLIGHTPOS, this.transform.position), this.transform.worldMatrix.getForward(this._direction),
                        Te.normalize(this._direction, this._direction), t.setVector3(Qn.SPOTLIGHTDIRECTION, this._direction),
                        t.setNumber(Qn.SPOTLIGHTRANGE, this.range), t.setNumber(Qn.SPOTLIGHTSPOTANGLE, this.spotAngle * Math.PI / 180), !0;
                }
                return !1;
            }, n._parse = function(t, n) {
                e.prototype._parse.call(this, t, n), this.range = t.range, this.spotAngle = t.spotAngle;
            }, a(0, n, "spotAngle", function() {
                return this._spotAngle;
            }, function(e) {
                this._spotAngle = Math.max(Math.min(e, 180), 0);
            }), a(0, n, "range", function() {
                return this._range;
            }, function(e) {
                this._range = e;
            }), i(t, ["_tempMatrix0", function() {
                return this._tempMatrix0 = new Ht();
            }, "_tempMatrix1", function() {
                return this._tempMatrix1 = new Ht();
            }]), t;
        }(ei),
        gi = function(e) {
            function t() {
                this._direction = null, t.__super.call(this), this._direction = new Te();
            }
            r(t, "laya.d3.core.light.DirectionLight", e);
            var n = t.prototype;
            return n._initShadow = function() {
                if (this._shadow) this._parallelSplitShadowMap = new we(), this.scene.parallelSplitShadowMaps.push(this._parallelSplitShadowMap),
                    this.transform.worldMatrix.getForward(this._direction), Te.normalize(this._direction, this._direction),
                    this._parallelSplitShadowMap.setInfo(this.scene, this._shadowFarPlane, this._direction, this._shadowMapSize, this._shadowMapCount, this._shadowMapPCFType);
                else {
                    var e = this._scene._defineDatas,
                        t = this.scene.parallelSplitShadowMaps;
                    t.splice(t.indexOf(this._parallelSplitShadowMap), 1), this._parallelSplitShadowMap.disposeAllRenderTarget(),
                        this._parallelSplitShadowMap = null, e.remove(Qn.SHADERDEFINE_SHADOW_PSSM1), e.remove(Qn.SHADERDEFINE_SHADOW_PSSM2),
                        e.remove(Qn.SHADERDEFINE_SHADOW_PSSM3);
                }
            }, n._onActive = function() {
                e.prototype._onActive.call(this), this._shadow && this._initShadow(), this._lightmapBakedType !== ei.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.add(Qn.SHADERDEFINE_DIRECTIONLIGHT);
            }, n._onInActive = function() {
                e.prototype._onInActive.call(this), this._lightmapBakedType !== ei.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.remove(Qn.SHADERDEFINE_DIRECTIONLIGHT);
            }, n._prepareToScene = function() {
                var e = this._scene;
                if (e.enableLight && this.activeInHierarchy) {
                    var t = (e._defineDatas, e._shaderValues);
                    return Te.scale(this.color, this._intensity, this._intensityColor), t.setVector3(Qn.LIGHTDIRCOLOR, this._intensityColor),
                        this.transform.worldMatrix.getForward(this._direction), Te.normalize(this._direction, this._direction),
                        t.setVector3(Qn.LIGHTDIRECTION, this._direction), !0;
                }
                return !1;
            }, a(0, n, "shadow", e.prototype._$get_shadow, function(e) {
                this._shadow !== e && (this._shadow = e, this.scene && this._initShadow());
            }), t;
        }(ei),
        Si = function(e) {
            function t() {
                t.__super.call(this, this.name), this._render = new Kn(this), this._geometryFilter = new et(this);
            }
            r(t, "laya.d3.core.trail.TrailSprite3D", e);
            var n = t.prototype;
            return n._parse = function(e, t) {
                laya.d3.core.Sprite3D.prototype._parse.call(this, e, t);
                var n = this._render,
                    i = this._geometryFilter,
                    r = 0,
                    a = 0,
                    o = e.materials;
                if (o) {
                    var s = n.sharedMaterials,
                        l = o.length;
                    for (s.length = l, r = 0; l > r; r++) s[r] = S.getRes(o[r].path);
                    n.sharedMaterials = s;
                }
                i.time = e.time, i.minVertexDistance = e.minVertexDistance, i.widthMultiplier = e.widthMultiplier,
                    i.textureMode = e.textureMode, null != e.alignment && (i.alignment = e.alignment);
                var h = [],
                    u = e.widthCurve;
                for (r = 0, a = u.length; a > r; r++) {
                    var c = new Tn();
                    c.time = u[r].time, c.inTangent = u[r].inTangent, c.outTangent = u[r].outTangent,
                        c.value = u[r].value, h.push(c);
                }
                i.widthCurve = h;
                var _ = e.colorGradient,
                    d = _.colorKeys,
                    f = _.alphaKeys,
                    m = new le(d.length, f.length);
                for (m.mode = _.mode, r = 0, a = d.length; a > r; r++) {
                    var p = d[r];
                    m.addColorRGB(p.time, new xe(p.value[0], p.value[1], p.value[2], 1));
                }
                for (r = 0, a = f.length; a > r; r++) {
                    var T = f[r];
                    m.addColorAlpha(T.time, T.value);
                }
                i.colorGradient = m;
            }, n._onActive = function() {
                e.prototype._onActive.call(this), this._transform.position.cloneTo(this._geometryFilter._lastPosition);
            }, n._cloneTo = function(e, t, n) {
                laya.d3.core.Sprite3D.prototype._cloneTo.call(this, e, t, n);
                var i = 0,
                    r = 0,
                    a = e,
                    o = a.trailFilter;
                o.time = this.trailFilter.time, o.minVertexDistance = this.trailFilter.minVertexDistance,
                    o.widthMultiplier = this.trailFilter.widthMultiplier, o.textureMode = this.trailFilter.textureMode;
                var s = this.trailFilter.widthCurve,
                    l = [];
                for (i = 0, r = s.length; r > i; i++) {
                    var h = new Tn();
                    s[i].cloneTo(h), l.push(h);
                }
                o.widthCurve = l;
                var u = new le(this.trailFilter.colorGradient.maxColorRGBKeysCount, this.trailFilter.colorGradient.maxColorAlphaKeysCount);
                this.trailFilter.colorGradient.cloneTo(u), o.colorGradient = u;
                var c = a.trailRenderer;
                c.sharedMaterial = this.trailRenderer.sharedMaterial;
            }, n.destroy = function(t) {
                void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                    this._geometryFilter.destroy(), this._geometryFilter = null);
            }, a(0, n, "trailFilter", function() {
                return this._geometryFilter;
            }), a(0, n, "trailRenderer", function() {
                return this._render;
            }), t.__init__ = function() {
                t.SHADERDEFINE_GRADIENTMODE_BLEND = t.shaderDefines.registerDefine("GRADIENTMODE_BLEND");
            }, t.SHADERDEFINE_GRADIENTMODE_BLEND = 0, i(t, ["CURTIME", function() {
                return this.CURTIME = Ve.propertyNameToID("u_CurTime");
            }, "LIFETIME", function() {
                return this.LIFETIME = Ve.propertyNameToID("u_LifeTime");
            }, "WIDTHCURVE", function() {
                return this.WIDTHCURVE = Ve.propertyNameToID("u_WidthCurve");
            }, "WIDTHCURVEKEYLENGTH", function() {
                return this.WIDTHCURVEKEYLENGTH = Ve.propertyNameToID("u_WidthCurveKeyLength");
            }, "GRADIENTCOLORKEY", function() {
                return this.GRADIENTCOLORKEY = Ve.propertyNameToID("u_GradientColorkey");
            }, "GRADIENTALPHAKEY", function() {
                return this.GRADIENTALPHAKEY = Ve.propertyNameToID("u_GradientAlphakey");
            }, "shaderDefines", function() {
                return this.shaderDefines = new pe(Jn.shaderDefines);
            }]), t;
        }(Jn),
        yi = function(e) {
            function t() {
                t.__super.call(this, null), this._render = new Wn(this), this._particleSystem = new sn(this);
                var e = this._render._renderElements,
                    n = e[0] = new Ae();
                n.setTransform(this._transform), n.render = this._render, n.setGeometry(this._particleSystem),
                    n.material = si.defaultMaterial;
            }
            r(t, "laya.d3.core.particleShuriKen.ShuriKenParticle3D", e);
            var n = t.prototype;
            return n._initParticleVelocity = function(e) {
                    for (var t = new Xe(), n = e.velocitys, i = 0, r = n.length; r > i; i++) {
                        var a = n[i];
                        t.add(a.key, a.value);
                    }
                    return t;
                }, n._initParticleColor = function(e) {
                    var t = new le(4, 4),
                        n = e.alphas,
                        i = 0,
                        r = 0;
                    for (i = 0, r = n.length; r > i; i++) {
                        var a = n[i];
                        3 === i && 1 !== a.key && (a.key = 1, console.log("GradientDataColor warning:the forth key is  be force set to 1.")),
                            t.addColorAlpha(a.key, a.value);
                    }
                    var o = e.rgbs;
                    for (i = 0, r = o.length; r > i; i++) {
                        var s = o[i],
                            l = s.value;
                        3 === i && 1 !== s.key && (s.key = 1, console.log("GradientDataColor warning:the forth key is  be force set to 1.")),
                            t.addColorRGB(s.key, new xe(l[0], l[1], l[2], 1));
                    }
                    return t;
                }, n._initParticleSize = function(e) {
                    for (var t = new Xe(), n = e.sizes, i = 0, r = n.length; r > i; i++) {
                        var a = n[i];
                        t.add(a.key, a.value);
                    }
                    return t;
                }, n._initParticleRotation = function(e) {
                    for (var t = new Xe(), n = e.angularVelocitys, i = 0, r = n.length; r > i; i++) {
                        var a = n[i];
                        t.add(a.key, a.value / 180 * Math.PI);
                    }
                    return t;
                }, n._initParticleFrame = function(e) {
                    for (var t = new at(), n = e.frames, i = 0, r = n.length; r > i; i++) {
                        var a = n[i];
                        t.add(a.key, a.value);
                    }
                    return t;
                }, n._parse = function(e, n) {
                    laya.d3.core.Sprite3D.prototype._parse.call(this, e, n);
                    var i, r = Math.PI / 180,
                        a = 0,
                        o = 0,
                        s = this.particleRenderer,
                        l = e.material;
                    l && (i = S.getRes(l.path)), s.sharedMaterial = i;
                    var h = e.meshPath;
                    h && (s.mesh = S.getRes(h)), s.renderMode = e.renderMode, s.stretchedBillboardCameraSpeedScale = e.stretchedBillboardCameraSpeedScale,
                        s.stretchedBillboardSpeedScale = e.stretchedBillboardSpeedScale, s.stretchedBillboardLengthScale = e.stretchedBillboardLengthScale,
                        s.sortingFudge = e.sortingFudge ? e.sortingFudge : 0;
                    var u = this.particleSystem;
                    u.isPerformanceMode = e.isPerformanceMode, u.duration = e.duration, u.looping = e.looping,
                        u.prewarm = e.prewarm, u.startDelayType = e.startDelayType, u.startDelay = e.startDelay,
                        u.startDelayMin = e.startDelayMin, u.startDelayMax = e.startDelayMax, u.startLifetimeType = e.startLifetimeType,
                        u.startLifetimeConstant = e.startLifetimeConstant, u.startLifeTimeGradient = t._initStartLife(e.startLifetimeGradient),
                        u.startLifetimeConstantMin = e.startLifetimeConstantMin, u.startLifetimeConstantMax = e.startLifetimeConstantMax,
                        u.startLifeTimeGradientMin = t._initStartLife(e.startLifetimeGradientMin), u.startLifeTimeGradientMax = t._initStartLife(e.startLifetimeGradientMax),
                        u.startSpeedType = e.startSpeedType, u.startSpeedConstant = e.startSpeedConstant,
                        u.startSpeedConstantMin = e.startSpeedConstantMin, u.startSpeedConstantMax = e.startSpeedConstantMax,
                        u.threeDStartSize = e.threeDStartSize, u.startSizeType = e.startSizeType, u.startSizeConstant = e.startSizeConstant;
                    var c = e.startSizeConstantSeparate,
                        _ = u.startSizeConstantSeparate;
                    _.x = c[0], _.y = c[1], _.z = c[2], u.startSizeConstantMin = e.startSizeConstantMin,
                        u.startSizeConstantMax = e.startSizeConstantMax;
                    var d = e.startSizeConstantMinSeparate,
                        f = u.startSizeConstantMinSeparate;
                    f.x = d[0], f.y = d[1], f.z = d[2];
                    var m = e.startSizeConstantMaxSeparate,
                        p = u.startSizeConstantMaxSeparate;
                    p.x = m[0], p.y = m[1], p.z = m[2], u.threeDStartRotation = e.threeDStartRotation,
                        u.startRotationType = e.startRotationType, u.startRotationConstant = e.startRotationConstant * r;
                    var T = e.startRotationConstantSeparate,
                        E = u.startRotationConstantSeparate;
                    E.x = T[0] * r, E.y = T[1] * r, E.z = T[2] * r, u.startRotationConstantMin = e.startRotationConstantMin * r,
                        u.startRotationConstantMax = e.startRotationConstantMax * r;
                    var v = e.startRotationConstantMinSeparate,
                        g = u.startRotationConstantMinSeparate;
                    g.x = v[0] * r, g.y = v[1] * r, g.z = v[2] * r;
                    var y = e.startRotationConstantMaxSeparate,
                        x = u.startRotationConstantMaxSeparate;
                    x.x = y[0] * r, x.y = y[1] * r, x.z = y[2] * r, u.randomizeRotationDirection = e.randomizeRotationDirection,
                        u.startColorType = e.startColorType;
                    var D = e.startColorConstant,
                        I = u.startColorConstant;
                    I.x = D[0], I.y = D[1], I.z = D[2], I.w = D[3];
                    var R = e.startColorConstantMin,
                        M = u.startColorConstantMin;
                    M.x = R[0], M.y = R[1], M.z = R[2], M.w = R[3];
                    var A = e.startColorConstantMax,
                        C = u.startColorConstantMax;
                    C.x = A[0], C.y = A[1], C.z = A[2], C.w = A[3], u.gravityModifier = e.gravityModifier,
                        u.simulationSpace = e.simulationSpace, u.scaleMode = e.scaleMode, u.playOnAwake = e.playOnAwake,
                        u.maxParticles = e.maxParticles;
                    var L = e.autoRandomSeed;
                    null != L && (u.autoRandomSeed = L);
                    var O = e.randomSeed;
                    null != O && (u.randomSeed[0] = O);
                    var N = e.emission,
                        V = u.emission;
                    if (N) {
                        V.emissionRate = N.emissionRate;
                        var P = N.bursts;
                        if (P)
                            for (a = 0, o = P.length; o > a; a++) {
                                var w = P[a];
                                V.addBurst(new nt(w.time, w.min, w.max));
                            }
                        V.enbale = N.enable;
                    } else V.enbale = !1;
                    var b = e.shape;
                    if (b) {
                        var F;
                        switch (b.shapeType) {
                            case 0:
                                var B;
                                F = B = new An(), B.radius = b.sphereRadius, B.emitFromShell = b.sphereEmitFromShell,
                                    B.randomDirection = b.sphereRandomDirection;
                                break;

                            case 1:
                                var U;
                                F = U = new In(), U.radius = b.hemiSphereRadius, U.emitFromShell = b.hemiSphereEmitFromShell,
                                    U.randomDirection = b.hemiSphereRandomDirection;
                                break;

                            case 2:
                                var z;
                                F = z = new $t(), z.angle = b.coneAngle * r, z.radius = b.coneRadius, z.length = b.coneLength,
                                    z.emitType = b.coneEmitType, z.randomDirection = b.coneRandomDirection;
                                break;

                            case 3:
                                var G;
                                F = G = new Nn(), G.x = b.boxX, G.y = b.boxY, G.z = b.boxZ, G.randomDirection = b.boxRandomDirection;
                                break;

                            case 7:
                                var k;
                                F = k = new tn(), k.radius = b.circleRadius, k.arc = b.circleArc * r, k.emitFromEdge = b.circleEmitFromEdge,
                                    k.randomDirection = b.circleRandomDirection;
                                break;

                            default:
                                var X;
                                F = X = new tn(), X.radius = b.circleRadius, X.arc = b.circleArc * r, X.emitFromEdge = b.circleEmitFromEdge,
                                    X.randomDirection = b.circleRandomDirection;
                        }
                        F.enable = b.enable, u.shape = F;
                    }
                    var W = e.velocityOverLifetime;
                    if (W) {
                        var Z, j = W.velocity;
                        switch (j.type) {
                            case 0:
                                var K = j.constant;
                                Z = yt.createByConstant(new Te(K[0], K[1], K[2]));
                                break;

                            case 1:
                                Z = yt.createByGradient(this._initParticleVelocity(j.gradientX), this._initParticleVelocity(j.gradientY), this._initParticleVelocity(j.gradientZ));
                                break;

                            case 2:
                                var q = j.constantMin,
                                    Q = j.constantMax;
                                Z = yt.createByRandomTwoConstant(new Te(q[0], q[1], q[2]), new Te(Q[0], Q[1], Q[2]));
                                break;

                            case 3:
                                Z = yt.createByRandomTwoGradient(this._initParticleVelocity(j.gradientXMin), this._initParticleVelocity(j.gradientXMax), this._initParticleVelocity(j.gradientYMin), this._initParticleVelocity(j.gradientYMax), this._initParticleVelocity(j.gradientZMin), this._initParticleVelocity(j.gradientZMax));
                        }
                        var J = new ge(Z);
                        J.space = W.space, J.enbale = W.enable, u.velocityOverLifetime = J;
                    }
                    var $ = e.colorOverLifetime;
                    if ($) {
                        var ee, te = $.color;
                        switch (te.type) {
                            case 0:
                                var ne = te.constant;
                                ee = re.createByConstant(new me(ne[0], ne[1], ne[2], ne[3]));
                                break;

                            case 1:
                                ee = re.createByGradient(this._initParticleColor(te.gradient));
                                break;

                            case 2:
                                var ie = te.constantMin,
                                    ae = te.constantMax;
                                ee = re.createByRandomTwoConstant(new me(ie[0], ie[1], ie[2], ie[3]), new me(ae[0], ae[1], ae[2], ae[3]));
                                break;

                            case 3:
                                ee = re.createByRandomTwoGradient(this._initParticleColor(te.gradientMin), this._initParticleColor(te.gradientMax));
                        }
                        var oe = new H(ee);
                        oe.enbale = $.enable, u.colorOverLifetime = oe;
                    }
                    var se = e.sizeOverLifetime;
                    if (se) {
                        var le, he = se.size;
                        switch (he.type) {
                            case 0:
                                le = he.separateAxes ? Et.createByGradientSeparate(this._initParticleSize(he.gradientX), this._initParticleSize(he.gradientY), this._initParticleSize(he.gradientZ)) : Et.createByGradient(this._initParticleSize(he.gradient));
                                break;

                            case 1:
                                if (he.separateAxes) {
                                    var ue = he.constantMinSeparate,
                                        ce = he.constantMaxSeparate;
                                    le = Et.createByRandomTwoConstantSeparate(new Te(ue[0], ue[1], ue[2]), new Te(ce[0], ce[1], ce[2]));
                                } else le = Et.createByRandomTwoConstant(he.constantMin, he.constantMax);
                                break;

                            case 2:
                                le = he.separateAxes ? Et.createByRandomTwoGradientSeparate(this._initParticleSize(he.gradientXMin), this._initParticleSize(he.gradientYMin), this._initParticleSize(he.gradientZMin), this._initParticleSize(he.gradientXMax), this._initParticleSize(he.gradientYMax), this._initParticleSize(he.gradientZMax)) : Et.createByRandomTwoGradient(this._initParticleSize(he.gradientMin), this._initParticleSize(he.gradientMax));
                        }
                        var _e = new de(le);
                        _e.enbale = se.enable, u.sizeOverLifetime = _e;
                    }
                    var fe = e.rotationOverLifetime;
                    if (fe) {
                        var pe, ve = fe.angularVelocity;
                        switch (ve.type) {
                            case 0:
                                if (ve.separateAxes) {
                                    var Se = ve.constantSeparate;
                                    pe = ht.createByConstantSeparate(new Te(Se[0] * r, Se[1] * r, Se[2] * r));
                                } else pe = ht.createByConstant(ve.constant * r);
                                break;

                            case 1:
                                pe = ve.separateAxes ? ht.createByGradientSeparate(this._initParticleRotation(ve.gradientX), this._initParticleRotation(ve.gradientY), this._initParticleRotation(ve.gradientZ)) : ht.createByGradient(this._initParticleRotation(ve.gradient));
                                break;

                            case 2:
                                if (ve.separateAxes) {
                                    var ye = ve.constantMinSeparate,
                                        xe = ve.constantMaxSeparate;
                                    pe = ht.createByRandomTwoConstantSeparate(new Te(ye[0] * r, ye[1] * r, ye[2] * r), new Te(xe[0] * r, xe[1] * r, xe[2] * r));
                                } else pe = ht.createByRandomTwoConstant(ve.constantMin * r, ve.constantMax * r);
                                break;

                            case 3:
                                ve.separateAxes || (pe = ht.createByRandomTwoGradient(this._initParticleRotation(ve.gradientMin), this._initParticleRotation(ve.gradientMax)));
                        }
                        var De = new Nt(pe);
                        De.enbale = fe.enable, u.rotationOverLifetime = De;
                    }
                    var Ie = e.textureSheetAnimation;
                    if (Ie) {
                        var Re, Me = Ie.frame;
                        switch (Me.type) {
                            case 0:
                                Re = Y.createByConstant(Me.constant);
                                break;

                            case 1:
                                Re = Y.createByOverTime(this._initParticleFrame(Me.overTime));
                                break;

                            case 2:
                                Re = Y.createByRandomTwoConstant(Me.constantMin, Me.constantMax);
                                break;

                            case 3:
                                Re = Y.createByRandomTwoOverTime(this._initParticleFrame(Me.overTimeMin), this._initParticleFrame(Me.overTimeMax));
                        }
                        var Ae, Ce = Ie.startFrame;
                        switch (Ce.type) {
                            case 0:
                                Ae = Dt.createByConstant(Ce.constant);
                                break;

                            case 1:
                                Ae = Dt.createByRandomTwoConstant(Ce.constantMin, Ce.constantMax);
                        }
                        var Le = new Oe(Re, Ae);
                        Le.enable = Ie.enable;
                        var Ne = Ie.tiles;
                        Le.tiles = new Ee(Ne[0], Ne[1]), Le.type = Ie.type, Le.randomRow = Ie.randomRow;
                        var Ve = Ie.rowIndex;
                        void 0 !== Ve && (Le.rowIndex = Ve), Le.cycles = Ie.cycles, u.textureSheetAnimation = Le;
                    }
                }, n._activeHierarchy = function(e) {
                    laya.display.Node.prototype._activeHierarchy.call(this, e), this.particleSystem.playOnAwake && this.particleSystem.play();
                }, n._inActiveHierarchy = function(e) {
                    laya.display.Node.prototype._inActiveHierarchy.call(this, e), this.particleSystem.isAlive && this.particleSystem.simulate(0, !0);
                }, n._cloneTo = function(e, t, n) {
                    var i = e,
                        r = i._particleSystem;
                    this._particleSystem.cloneTo(r);
                    var a = i._render,
                        o = this._render;
                    a.sharedMaterials = o.sharedMaterials, a.enable = o.enable, a.renderMode = o.renderMode,
                        a.mesh = o.mesh, a.stretchedBillboardCameraSpeedScale = o.stretchedBillboardCameraSpeedScale,
                        a.stretchedBillboardSpeedScale = o.stretchedBillboardSpeedScale, a.stretchedBillboardLengthScale = o.stretchedBillboardLengthScale,
                        a.sortingFudge = o.sortingFudge, laya.d3.core.Sprite3D.prototype._cloneTo.call(this, e, t, n);
                }, n.destroy = function(t) {
                    void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                        this._particleSystem.destroy(), this._particleSystem = null);
                }, a(0, n, "particleSystem", function() {
                    return this._particleSystem;
                }), a(0, n, "particleRenderer", function() {
                    return this._render;
                }), t.__init__ = function() {
                    t.SHADERDEFINE_RENDERMODE_BILLBOARD = t.shaderDefines.registerDefine("SPHERHBILLBOARD"),
                        t.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = t.shaderDefines.registerDefine("STRETCHEDBILLBOARD"),
                        t.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = t.shaderDefines.registerDefine("HORIZONTALBILLBOARD"),
                        t.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = t.shaderDefines.registerDefine("VERTICALBILLBOARD"),
                        t.SHADERDEFINE_COLOROVERLIFETIME = t.shaderDefines.registerDefine("COLOROVERLIFETIME"),
                        t.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = t.shaderDefines.registerDefine("RANDOMCOLOROVERLIFETIME"),
                        t.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMECONSTANT"),
                        t.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMECURVE"),
                        t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMERANDOMCONSTANT"),
                        t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = t.shaderDefines.registerDefine("VELOCITYOVERLIFETIMERANDOMCURVE"),
                        t.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = t.shaderDefines.registerDefine("TEXTURESHEETANIMATIONCURVE"),
                        t.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = t.shaderDefines.registerDefine("TEXTURESHEETANIMATIONRANDOMCURVE"),
                        t.SHADERDEFINE_ROTATIONOVERLIFETIME = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIME"),
                        t.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMESEPERATE"),
                        t.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMECONSTANT"),
                        t.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMECURVE"),
                        t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMERANDOMCONSTANTS"),
                        t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = t.shaderDefines.registerDefine("ROTATIONOVERLIFETIMERANDOMCURVES"),
                        t.SHADERDEFINE_SIZEOVERLIFETIMECURVE = t.shaderDefines.registerDefine("SIZEOVERLIFETIMECURVE"),
                        t.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = t.shaderDefines.registerDefine("SIZEOVERLIFETIMECURVESEPERATE"),
                        t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = t.shaderDefines.registerDefine("SIZEOVERLIFETIMERANDOMCURVES"),
                        t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = t.shaderDefines.registerDefine("SIZEOVERLIFETIMERANDOMCURVESSEPERATE"),
                        t.SHADERDEFINE_RENDERMODE_MESH = t.shaderDefines.registerDefine("RENDERMODE_MESH"),
                        t.SHADERDEFINE_SHAPE = t.shaderDefines.registerDefine("SHAPE");
                }, t._initStartLife = function(e) {
                    for (var t = new Xe(), n = e.startLifetimes, i = 0, r = n.length; r > i; i++) {
                        var a = n[i];
                        t.add(a.key, a.value);
                    }
                    return t;
                }, t.SHADERDEFINE_RENDERMODE_BILLBOARD = 0, t.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = 0,
                t.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = 0, t.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = 0,
                t.SHADERDEFINE_COLOROVERLIFETIME = 0, t.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = 0,
                t.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = 0, t.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = 0,
                t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = 0, t.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = 0,
                t.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = 0, t.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = 0,
                t.SHADERDEFINE_ROTATIONOVERLIFETIME = 0, t.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = 0,
                t.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = 0, t.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = 0,
                t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = 0, t.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = 0,
                t.SHADERDEFINE_SIZEOVERLIFETIMECURVE = 0, t.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = 0,
                t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = 0, t.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = 0,
                t.SHADERDEFINE_RENDERMODE_MESH = 0, t.SHADERDEFINE_SHAPE = 0, i(t, ["WORLDPOSITION", function() {
                    return this.WORLDPOSITION = Ve.propertyNameToID("u_WorldPosition");
                }, "WORLDROTATION", function() {
                    return this.WORLDROTATION = Ve.propertyNameToID("u_WorldRotation");
                }, "POSITIONSCALE", function() {
                    return this.POSITIONSCALE = Ve.propertyNameToID("u_PositionScale");
                }, "SIZESCALE", function() {
                    return this.SIZESCALE = Ve.propertyNameToID("u_SizeScale");
                }, "SCALINGMODE", function() {
                    return this.SCALINGMODE = Ve.propertyNameToID("u_ScalingMode");
                }, "GRAVITY", function() {
                    return this.GRAVITY = Ve.propertyNameToID("u_Gravity");
                }, "THREEDSTARTROTATION", function() {
                    return this.THREEDSTARTROTATION = Ve.propertyNameToID("u_ThreeDStartRotation");
                }, "STRETCHEDBILLBOARDLENGTHSCALE", function() {
                    return this.STRETCHEDBILLBOARDLENGTHSCALE = Ve.propertyNameToID("u_StretchedBillboardLengthScale");
                }, "STRETCHEDBILLBOARDSPEEDSCALE", function() {
                    return this.STRETCHEDBILLBOARDSPEEDSCALE = Ve.propertyNameToID("u_StretchedBillboardSpeedScale");
                }, "SIMULATIONSPACE", function() {
                    return this.SIMULATIONSPACE = Ve.propertyNameToID("u_SimulationSpace");
                }, "CURRENTTIME", function() {
                    return this.CURRENTTIME = Ve.propertyNameToID("u_CurrentTime");
                }, "VOLVELOCITYCONST", function() {
                    return this.VOLVELOCITYCONST = Ve.propertyNameToID("u_VOLVelocityConst");
                }, "VOLVELOCITYGRADIENTX", function() {
                    return this.VOLVELOCITYGRADIENTX = Ve.propertyNameToID("u_VOLVelocityGradientX");
                }, "VOLVELOCITYGRADIENTY", function() {
                    return this.VOLVELOCITYGRADIENTY = Ve.propertyNameToID("u_VOLVelocityGradientY");
                }, "VOLVELOCITYGRADIENTZ", function() {
                    return this.VOLVELOCITYGRADIENTZ = Ve.propertyNameToID("u_VOLVelocityGradientZ");
                }, "VOLVELOCITYCONSTMAX", function() {
                    return this.VOLVELOCITYCONSTMAX = Ve.propertyNameToID("u_VOLVelocityConstMax");
                }, "VOLVELOCITYGRADIENTXMAX", function() {
                    return this.VOLVELOCITYGRADIENTXMAX = Ve.propertyNameToID("u_VOLVelocityGradientMaxX");
                }, "VOLVELOCITYGRADIENTYMAX", function() {
                    return this.VOLVELOCITYGRADIENTYMAX = Ve.propertyNameToID("u_VOLVelocityGradientMaxY");
                }, "VOLVELOCITYGRADIENTZMAX", function() {
                    return this.VOLVELOCITYGRADIENTZMAX = Ve.propertyNameToID("u_VOLVelocityGradientMaxZ");
                }, "VOLSPACETYPE", function() {
                    return this.VOLSPACETYPE = Ve.propertyNameToID("u_VOLSpaceType");
                }, "COLOROVERLIFEGRADIENTALPHAS", function() {
                    return this.COLOROVERLIFEGRADIENTALPHAS = Ve.propertyNameToID("u_ColorOverLifeGradientAlphas");
                }, "COLOROVERLIFEGRADIENTCOLORS", function() {
                    return this.COLOROVERLIFEGRADIENTCOLORS = Ve.propertyNameToID("u_ColorOverLifeGradientColors");
                }, "MAXCOLOROVERLIFEGRADIENTALPHAS", function() {
                    return this.MAXCOLOROVERLIFEGRADIENTALPHAS = Ve.propertyNameToID("u_MaxColorOverLifeGradientAlphas");
                }, "MAXCOLOROVERLIFEGRADIENTCOLORS", function() {
                    return this.MAXCOLOROVERLIFEGRADIENTCOLORS = Ve.propertyNameToID("u_MaxColorOverLifeGradientColors");
                }, "SOLSIZEGRADIENT", function() {
                    return this.SOLSIZEGRADIENT = Ve.propertyNameToID("u_SOLSizeGradient");
                }, "SOLSIZEGRADIENTX", function() {
                    return this.SOLSIZEGRADIENTX = Ve.propertyNameToID("u_SOLSizeGradientX");
                }, "SOLSIZEGRADIENTY", function() {
                    return this.SOLSIZEGRADIENTY = Ve.propertyNameToID("u_SOLSizeGradientY");
                }, "SOLSizeGradientZ", function() {
                    return this.SOLSizeGradientZ = Ve.propertyNameToID("u_SOLSizeGradientZ");
                }, "SOLSizeGradientMax", function() {
                    return this.SOLSizeGradientMax = Ve.propertyNameToID("u_SOLSizeGradientMax");
                }, "SOLSIZEGRADIENTXMAX", function() {
                    return this.SOLSIZEGRADIENTXMAX = Ve.propertyNameToID("u_SOLSizeGradientMaxX");
                }, "SOLSIZEGRADIENTYMAX", function() {
                    return this.SOLSIZEGRADIENTYMAX = Ve.propertyNameToID("u_SOLSizeGradientMaxY");
                }, "SOLSizeGradientZMAX", function() {
                    return this.SOLSizeGradientZMAX = Ve.propertyNameToID("u_SOLSizeGradientMaxZ");
                }, "ROLANGULARVELOCITYCONST", function() {
                    return this.ROLANGULARVELOCITYCONST = Ve.propertyNameToID("u_ROLAngularVelocityConst");
                }, "ROLANGULARVELOCITYCONSTSEPRARATE", function() {
                    return this.ROLANGULARVELOCITYCONSTSEPRARATE = Ve.propertyNameToID("u_ROLAngularVelocityConstSeprarate");
                }, "ROLANGULARVELOCITYGRADIENT", function() {
                    return this.ROLANGULARVELOCITYGRADIENT = Ve.propertyNameToID("u_ROLAngularVelocityGradient");
                }, "ROLANGULARVELOCITYGRADIENTX", function() {
                    return this.ROLANGULARVELOCITYGRADIENTX = Ve.propertyNameToID("u_ROLAngularVelocityGradientX");
                }, "ROLANGULARVELOCITYGRADIENTY", function() {
                    return this.ROLANGULARVELOCITYGRADIENTY = Ve.propertyNameToID("u_ROLAngularVelocityGradientY");
                }, "ROLANGULARVELOCITYGRADIENTZ", function() {
                    return this.ROLANGULARVELOCITYGRADIENTZ = Ve.propertyNameToID("u_ROLAngularVelocityGradientZ");
                }, "ROLANGULARVELOCITYCONSTMAX", function() {
                    return this.ROLANGULARVELOCITYCONSTMAX = Ve.propertyNameToID("u_ROLAngularVelocityConstMax");
                }, "ROLANGULARVELOCITYCONSTMAXSEPRARATE", function() {
                    return this.ROLANGULARVELOCITYCONSTMAXSEPRARATE = Ve.propertyNameToID("u_ROLAngularVelocityConstMaxSeprarate");
                }, "ROLANGULARVELOCITYGRADIENTMAX", function() {
                    return this.ROLANGULARVELOCITYGRADIENTMAX = Ve.propertyNameToID("u_ROLAngularVelocityGradientMax");
                }, "ROLANGULARVELOCITYGRADIENTXMAX", function() {
                    return this.ROLANGULARVELOCITYGRADIENTXMAX = Ve.propertyNameToID("u_ROLAngularVelocityGradientMaxX");
                }, "ROLANGULARVELOCITYGRADIENTYMAX", function() {
                    return this.ROLANGULARVELOCITYGRADIENTYMAX = Ve.propertyNameToID("u_ROLAngularVelocityGradientMaxY");
                }, "ROLANGULARVELOCITYGRADIENTZMAX", function() {
                    return this.ROLANGULARVELOCITYGRADIENTZMAX = Ve.propertyNameToID("u_ROLAngularVelocityGradientMaxZ");
                }, "ROLANGULARVELOCITYGRADIENTWMAX", function() {
                    return this.ROLANGULARVELOCITYGRADIENTWMAX = Ve.propertyNameToID("u_ROLAngularVelocityGradientMaxW");
                }, "TEXTURESHEETANIMATIONCYCLES", function() {
                    return this.TEXTURESHEETANIMATIONCYCLES = Ve.propertyNameToID("u_TSACycles");
                }, "TEXTURESHEETANIMATIONSUBUVLENGTH", function() {
                    return this.TEXTURESHEETANIMATIONSUBUVLENGTH = Ve.propertyNameToID("u_TSASubUVLength");
                }, "TEXTURESHEETANIMATIONGRADIENTUVS", function() {
                    return this.TEXTURESHEETANIMATIONGRADIENTUVS = Ve.propertyNameToID("u_TSAGradientUVs");
                }, "TEXTURESHEETANIMATIONGRADIENTMAXUVS", function() {
                    return this.TEXTURESHEETANIMATIONGRADIENTMAXUVS = Ve.propertyNameToID("u_TSAMaxGradientUVs");
                }, "shaderDefines", function() {
                    return this.shaderDefines = new pe(Jn.shaderDefines);
                }]), t;
        }(Jn),
        xi = function(e) {
            function t(e, n) {
                this._geometryFilter = null, void 0 === e && (e = 2), t.__super.call(this, n), this._geometryFilter = new mn(this, e),
                    this._render = new qn(this), this._changeRenderObjects(this._render, 0, ri.defaultMaterial);
            }
            r(t, "laya.d3.core.pixelLine.PixelLineSprite3D", e);
            var n = t.prototype;
            return n._changeRenderObjects = function(e, t, n) {
                var i = this._render._renderElements;
                n || (n = ri.defaultMaterial);
                var r = i[t];
                r || (r = i[t] = new Ae()), r.setTransform(this._transform), r.setGeometry(this._geometryFilter),
                    r.render = this._render, r.material = n;
            }, n.addLine = function(e, t, n, i) {
                if (this._geometryFilter._lineCount === this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount has equal with maxLineCount.";
                this._geometryFilter._updateLineData(this._geometryFilter._lineCount++, e, t, n, i);
            }, n.addLines = function(e) {
                var t = this._geometryFilter._lineCount,
                    n = e.length;
                if (t + n > this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.";
                this._geometryFilter._updateLineDatas(t, e), this._geometryFilter._lineCount += n;
            }, n.removeLine = function(e) {
                if (!(e < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
                this._geometryFilter._removeLineData(e);
            }, n.setLine = function(e, t, n, i, r) {
                if (!(e < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
                this._geometryFilter._updateLineData(e, t, n, i, r);
            }, n.getLine = function(e, t) {
                if (!(e < this.lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
                this._geometryFilter._getLineData(e, t);
            }, n.clear = function() {
                this._geometryFilter._lineCount = 0;
            }, a(0, n, "maxLineCount", function() {
                return this._geometryFilter._maxLineCount;
            }, function(e) {
                this._geometryFilter._resizeLineData(e), this._geometryFilter._lineCount = Math.min(this._geometryFilter._lineCount, e);
            }), a(0, n, "pixelLineRenderer", function() {
                return this._render;
            }), a(0, n, "lineCount", function() {
                return this._geometryFilter._lineCount;
            }, function(e) {
                if (e > this.maxLineCount) throw "PixelLineSprite3D: lineCount can't large than maxLineCount";
                this._geometryFilter._lineCount = e;
            }), t;
        }(Jn),
        Di = function(e) {
            function t(e, n) {
                t.__super.call(this, n), this._meshFilter = new $e(this), this._render = new mi(this),
                    e && (this._meshFilter.sharedMesh = e);
            }
            r(t, "laya.d3.core.SkinnedMeshSprite3D", e);
            var n = t.prototype;
            return n._parse = function(e, t) {
                laya.d3.core.Sprite3D.prototype._parse.call(this, e, t);
                var n = this.skinnedMeshRenderer,
                    i = e.lightmapIndex;
                null != i && (n.lightmapIndex = i);
                var r = e.lightmapScaleOffset;
                r && (n.lightmapScaleOffset = new me(r[0], r[1], r[2], r[3]));
                var a;
                if (a = e.meshPath) {
                    var o = S.getRes(a);
                    o && (this.meshFilter.sharedMesh = o);
                }
                var s = e.materials;
                if (s) {
                    var l = n.sharedMaterials,
                        h = s.length;
                    l.length = h;
                    for (var u = 0; h > u; u++) l[u] = S.getRes(s[u].path);
                    n.sharedMaterials = l;
                }
                var c = e.boundBox,
                    _ = c.min,
                    d = c.max;
                if (n.localBounds.setMin(new Te(_[0], _[1], _[2])), n.localBounds.setMax(new Te(d[0], d[1], d[2])),
                    t) {
                    var f = e.rootBone;
                    n.rootBone = t[f];
                    var m = e.bones,
                        p = 0;
                    for (u = 0, p = m.length; p > u; u++) n.bones.push(t[m[u]]);
                } else e.rootBone && n._setRootBone(e.rootBone);
            }, n._changeHierarchyAnimator = function(t) {
                e.prototype._changeHierarchyAnimator.call(this, t), this.skinnedMeshRenderer._setCacheAnimator(t);
            }, n._changeAnimatorAvatar = function(e) {
                this.skinnedMeshRenderer._setCacheAvatar(e);
            }, n._cloneTo = function(e, n, i) {
                var r = e;
                r.meshFilter.sharedMesh = this.meshFilter.sharedMesh;
                var a = this._render,
                    o = r._render;
                o.enable = a.enable, o.sharedMaterials = a.sharedMaterials, o.castShadow = a.castShadow;
                var s = a.lightmapScaleOffset;
                s && (o.lightmapScaleOffset = s.clone()), o.receiveShadow = a.receiveShadow, o.sortingFudge = a.sortingFudge,
                    o._rootBone = a._rootBone;
                var l = a.bones,
                    h = o.bones,
                    u = l.length;
                h.length = u;
                var c = a.rootBone;
                if (c) {
                    var _ = ke._getHierarchyPath(n, c, t._tempArray0);
                    _ ? o.rootBone = ke._getNodeByHierarchyPath(i, _) : o.rootBone = c;
                }
                for (var d = 0; d < l.length; d++) _ = ke._getHierarchyPath(n, l[d], t._tempArray0),
                    _ ? h[d] = ke._getNodeByHierarchyPath(i, _) : h[d] = l[d];
                var f = a.localBounds;
                f && f.cloneTo(o.localBounds), laya.d3.core.Sprite3D.prototype._cloneTo.call(this, e, n, i);
            }, n.destroy = function(t) {
                void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                    this._meshFilter.destroy());
            }, a(0, n, "meshFilter", function() {
                return this._meshFilter;
            }), a(0, n, "skinnedMeshRenderer", function() {
                return this._render;
            }), t.__init__ = function() {
                t.SHADERDEFINE_BONE = t.shaderDefines.registerDefine("BONE");
            }, t._tempArray0 = [], t.SHADERDEFINE_BONE = 0, i(t, ["BONES", function() {
                return this.BONES = Ve.propertyNameToID("u_Bones");
            }, "shaderDefines", function() {
                return this.shaderDefines = new pe(Ei.shaderDefines);
            }]), t;
        }(Jn),
        Ii = function(e) {
            function t() {
                this._range = NaN, this._lightMatrix = new Ht(), t.__super.call(this), this._range = 6;
            }
            r(t, "laya.d3.core.light.PointLight", e);
            var n = t.prototype;
            return n._onActive = function() {
                e.prototype._onActive.call(this), this._lightmapBakedType !== ei.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.add(Qn.SHADERDEFINE_POINTLIGHT);
            }, n._onInActive = function() {
                e.prototype._onInActive.call(this), this._lightmapBakedType !== ei.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.remove(Qn.SHADERDEFINE_POINTLIGHT);
            }, n._prepareToScene = function() {
                var e = this._scene;
                if (e.enableLight && this.activeInHierarchy) {
                    var n = (e._defineDatas, e._shaderValues);
                    Te.scale(this.color, this._intensity, this._intensityColor), n.setVector3(Qn.POINTLIGHTCOLOR, this._intensityColor),
                        n.setVector3(Qn.POINTLIGHTPOS, this.transform.position), n.setNumber(Qn.POINTLIGHTRANGE, this.range);
                    var i = this._lightMatrix,
                        r = i.elements;
                    i.identity(), r[0] = r[5] = r[10] = 1 / this._range;
                    var a = t._tempMatrix0;
                    return this.transform.worldMatrix.invert(a), Ht.multiply(i, a, i), n.setMatrix4x4(Qn.POINTLIGHTMATRIX, i), !0;
                }
                return !1;
            }, n._parse = function(t, n) {
                e.prototype._parse.call(this, t, n), this.range = t.range;
            }, a(0, n, "range", function() {
                return this._range;
            }, function(e) {
                this._range = e;
            }), i(t, ["_tempMatrix0", function() {
                return this._tempMatrix0 = new Ht();
            }]), t;
        }(ei),
        Ri = function(e) {
            function t(e, n, i, r, a, o, s, l) {
                this._terrainFilter = null, t.__super.call(this, l), this._terrainFilter = new Rn(this, e, n, i, r, a, o, s),
                    this._render = new Zn(this);
            }
            r(t, "laya.d3.terrain.TerrainChunk", e);
            var n = t.prototype;
            return n.buildRenderElementAndMaterial = function(e, t, n, i, r, a, o, s, l, h, u, c, _, d, f, m, p, T) {
                void 0 === u && (u = 1), void 0 === c && (c = 1), void 0 === _ && (_ = 1), void 0 === d && (d = 1),
                    void 0 === f && (f = 1), void 0 === m && (m = 1), void 0 === p && (p = 1), void 0 === T && (T = 1);
                var E = new _i();
                l && (E.diffuseColor = l), s && (E.ambientColor = s), h && (E.specularColor = h),
                    E.splatAlphaTexture = S.getRes(n), E.normalTexture = t ? S.getRes(t) : null, E.diffuseTexture1 = i ? S.getRes(i) : null,
                    E.diffuseTexture2 = r ? S.getRes(r) : null, E.diffuseTexture3 = a ? S.getRes(a) : null,
                    E.diffuseTexture4 = o ? S.getRes(o) : null, E.setDiffuseScale1(u, c), E.setDiffuseScale2(_, d),
                    E.setDiffuseScale3(f, m), E.setDiffuseScale4(p, T), E.setDetailNum(e), 0 != this._render._renderElements.length && (E.renderMode = 2);
                var v = new Ae();
                v.setTransform(this._transform), v.render = this._render, v.setGeometry(this._terrainFilter),
                    this._render._renderElements.push(v), this._render.sharedMaterial = E;
            }, n._cloneTo = function(e, t, n) {
                console.log("Terrain Chunk can't clone");
            }, n.destroy = function(t) {
                void 0 === t && (t = !0), this.destroyed || (e.prototype.destroy.call(this, t),
                    this._terrainFilter.destroy(), this._terrainFilter = null);
            }, a(0, n, "terrainFilter", function() {
                return this._terrainFilter;
            }), a(0, n, "terrainRender", function() {
                return this._render;
            }), t;
        }(Jn),
        Mi = function(e) {
            function t(e, n, i) {
                this._updateViewMatrix = !0, this._offScreenRenderTexture = null, this._alwaysUseRenderTexture = !1,
                    this._renderTexture = null, this._postProcess = null, this.enableRender = !0, this._screenShaderData = new ue(),
                    this._postProcessCommandBuffers = [], void 0 === e && (e = 0), void 0 === n && (n = .3),
                    void 0 === i && (i = 1e3), this._viewMatrix = new Ht(), this._projectionMatrix = new Ht(),
                    this._projectionViewMatrix = new Ht(), this._projectionViewMatrixNoTranslateScale = new Ht(),
                    this._viewport = new Mt(0, 0, 0, 0), this._normalizedViewport = new Mt(0, 0, 1, 1),
                    this._aspectRatio = e, this._boundFrustum = new Vt(Ht.DEFAULT), R.supportWebGLPlusCulling && (this._boundFrustumBuffer = new Float32Array(24)),
                    t.__super.call(this, n, i), this.transform.on("transformchanged", this, this._onTransformChanged);
            }
            r(t, "laya.d3.core.Camera", e);
            var o = t.prototype;
            return o._isLayerVisible = function(e) {
                return 0 != (Math.pow(2, e) & this.cullingMask);
            }, o._onTransformChanged = function(e) {
                e &= 64, e && (this._updateViewMatrix = !0);
            }, o._calculationViewport = function(e, t, n) {
                var i = e.x * t,
                    r = e.y * n,
                    a = i + Math.max(e.width * t, 0),
                    o = r + Math.max(e.height * n, 0),
                    s = Math.ceil(i),
                    l = Math.ceil(r),
                    h = Math.floor(a),
                    u = Math.floor(o),
                    c = s - i >= .5 ? Math.floor(i) : s,
                    _ = l - r >= .5 ? Math.floor(r) : l,
                    d = a - h >= .5 ? Math.ceil(a) : h,
                    f = o - u >= .5 ? Math.ceil(o) : u;
                this._viewport.x = c, this._viewport.y = _, this._viewport.width = d - c, this._viewport.height = f - _;
            }, o._parse = function(t, n) {
                e.prototype._parse.call(this, t, n);
                var i = t.viewport;
                this.normalizedViewport = new Mt(i[0], i[1], i[2], i[3]);
            }, o._calculateProjectionMatrix = function() {
                if (!this._useUserProjectionMatrix)
                    if (this._orthographic) {
                        var e = this.orthographicVerticalSize * this.aspectRatio * .5,
                            t = .5 * this.orthographicVerticalSize;
                        Ht.createOrthoOffCenter(-e, e, -t, t, this.nearPlane, this.farPlane, this._projectionMatrix);
                    } else Ht.createPerspective(3.1416 * this.fieldOfView / 180, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);
            }, o._getCanvasHeight = function() {
                return this._offScreenRenderTexture ? this._offScreenRenderTexture.height : J.clientHeight;
            }, o._applyPostProcessCommandBuffers = function() {
                for (var e = 0, t = this._postProcessCommandBuffers.length; t > e; e++) this._postProcessCommandBuffers[e]._apply();
            }, o._needForceSetRenderTexture = function() {
                return this._alwaysUseRenderTexture && !this._offScreenRenderTexture;
            }, o.render = function(e, t) {
                if (this._scene) {
                    var n = this._needForceSetRenderTexture();
                    n && (this._renderTexture = pi.getTemporary(J.clientWidth, J.clientHeight, 0, 0, 1));
                    var i = v.instance,
                        r = J._instance,
                        a = r.scene = this._scene;
                    if (a.parallelSplitShadowMaps[0]) {
                        ue.setRuntimeValueMode(!1);
                        var o = a.parallelSplitShadowMaps[0];
                        o._calcAllLightCameraInfo(this), a._defineDatas.add(Qn.SHADERDEFINE_CAST_SHADOW);
                        for (var s = 0, l = o.shadowMapCount; l > s; s++) {
                            var h = o.cameras[s];
                            r.camera = h, r.projectionViewMatrix = h.projectionViewMatrix, wt.renderObjectCulling(h, a, r, a._castShadowRenders);
                            var u = o.cameras[s + 1].renderTarget;
                            u._start(), r.camera = h, r.viewport = h.viewport, h._prepareCameraToRender(), h._prepareCameraViewProject(h.viewMatrix, h.projectionMatrix, r.projectionViewMatrix, h._projectionViewMatrixNoTranslateScale),
                                a._clear(i, r);
                            var c = a._opaqueQueue;
                            c._render(r, !1), u._end();
                        }
                        a._defineDatas.remove(Qn.SHADERDEFINE_CAST_SHADOW), ue.setRuntimeValueMode(!0);
                    }
                    r.camera = this, a._preRenderScript();
                    var _, d;
                    _ = r.viewMatrix = this.viewMatrix;
                    var f = this._renderTexture;
                    if (f ? (f._start(), Ht.multiply(ai._invertYScaleMatrix, this._projectionMatrix, ai._invertYProjectionMatrix),
                            Ht.multiply(ai._invertYScaleMatrix, this.projectionViewMatrix, ai._invertYProjectionViewMatrix),
                            d = r.projectionMatrix = ai._invertYProjectionMatrix, r.projectionViewMatrix = ai._invertYProjectionViewMatrix) : (d = r.projectionMatrix = this._projectionMatrix,
                            r.projectionViewMatrix = this.projectionViewMatrix), r.viewport = this.viewport,
                        this._prepareCameraToRender(), this._prepareCameraViewProject(_, d, r.projectionViewMatrix, this._projectionViewMatrixNoTranslateScale),
                        a._preCulling(r, this), a._clear(i, r), a._renderScene(i, r, e, t), a._postRenderScript(),
                        f && f._end(), this._postProcess && this._postProcess._render(), n) {
                        var m = nn.create(this._renderTexture, null, lt.screenShader, this._screenShaderData);
                        m.run(), m.recover(), pi.setReleaseTemporary(this._renderTexture);
                    }
                }
            }, o.viewportPointToRay = function(e, t) {
                ct.calculateCursorRay(e, this.viewport, this._projectionMatrix, this.viewMatrix, null, t);
            }, o.normalizedViewportPointToRay = function(e, n) {
                var i = t._tempVector20,
                    r = this.viewport;
                i.x = e.x * r.width, i.y = e.y * r.height, ct.calculateCursorRay(i, this.viewport, this._projectionMatrix, this.viewMatrix, null, n);
            }, o.worldToViewportPoint = function(e, t) {
                Ht.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix),
                    this.viewport.project(e, this._projectionViewMatrix, t), t.x = t.x / n.stage.clientScaleX,
                    t.y = t.y / n.stage.clientScaleY;
            }, o.worldToNormalizedViewportPoint = function(e, t) {
                Ht.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix),
                    this.normalizedViewport.project(e, this._projectionViewMatrix, t), t.x = t.x / n.stage.clientScaleX,
                    t.y = t.y / n.stage.clientScaleY;
            }, o.convertScreenCoordToOrthographicCoord = function(e, t) {
                if (this._orthographic) {
                    var n = J.clientWidth,
                        i = J.clientHeight,
                        r = this.orthographicVerticalSize * this.aspectRatio / n,
                        a = this.orthographicVerticalSize / i;
                    return t.x = (-n / 2 + e.x) * r, t.y = (i / 2 - e.y) * a, t.z = (this.nearPlane - this.farPlane) * (e.z + 1) / 2 - this.nearPlane,
                        Te.transformCoordinate(t, this.transform.worldMatrix, t), !0;
                }
                return !1;
            }, o.destroy = function(t) {
                void 0 === t && (t = !0), this._offScreenRenderTexture = null, this.transform.off("transformchanged", this, this._onTransformChanged),
                    e.prototype.destroy.call(this, t);
            }, o.addCommandBuffer = function(e, t) {
                switch (e) {
                    case 0:
                        this._postProcessCommandBuffers.push(t);
                        break;

                    default:
                        throw "Camera:unknown event.";
                }
            }, o.removeCommandBuffer = function(e, t) {
                switch (e) {
                    case 0:
                        var n = this._postProcessCommandBuffers.indexOf(t); -
                        1 !== n && this._postProcessCommandBuffers.splice(n, 1);
                        break;

                    default:
                        throw "Camera:unknown event.";
                }
            }, o.removeCommandBuffers = function(e) {
                switch (e) {
                    case 0:
                        this._postProcessCommandBuffers.length = 0;
                        break;

                    default:
                        throw "Camera:unknown event.";
                }
            }, o.getRenderTexture = function() {
                return this._renderTexture;
            }, a(0, o, "renderTarget", function() {
                return this._offScreenRenderTexture;
            }, function(e) {
                this._offScreenRenderTexture !== e && (this._offScreenRenderTexture = e, this._renderTexture = e,
                    this._calculateProjectionMatrix());
            }), a(0, o, "projectionViewMatrix", function() {
                return Ht.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix),
                    this._projectionViewMatrix;
            }), a(0, o, "aspectRatio", function() {
                if (0 === this._aspectRatio) {
                    var e = this.viewport;
                    return e.width / e.height;
                }
                return this._aspectRatio;
            }, function(e) {
                if (0 > e) throw new Error("Camera: the aspect ratio has to be a positive real number.");
                this._aspectRatio = e, this._calculateProjectionMatrix();
            }), a(0, o, "boundFrustum", function() {
                if (this._boundFrustum.matrix = this.projectionViewMatrix, R.supportWebGLPlusCulling) {
                    var e = this._boundFrustum.near,
                        t = this._boundFrustum.far,
                        n = this._boundFrustum.left,
                        i = this._boundFrustum.right,
                        r = this._boundFrustum.top,
                        a = this._boundFrustum.bottom,
                        o = e.normal,
                        s = t.normal,
                        l = n.normal,
                        h = i.normal,
                        u = r.normal,
                        c = a.normal,
                        _ = this._boundFrustumBuffer;
                    _[0] = o.x, _[1] = o.y, _[2] = o.z, _[3] = e.distance, _[4] = s.x, _[5] = s.y, _[6] = s.z,
                        _[7] = t.distance, _[8] = l.x, _[9] = l.y, _[10] = l.z, _[11] = n.distance, _[12] = h.x,
                        _[13] = h.y, _[14] = h.z, _[15] = i.distance, _[16] = u.x, _[17] = u.y, _[18] = u.z,
                        _[19] = r.distance, _[20] = c.x, _[21] = c.y, _[22] = c.z, _[23] = a.distance;
                }
                return this._boundFrustum;
            }), a(0, o, "viewport", function() {
                return this._offScreenRenderTexture ? this._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height) : this._calculationViewport(this._normalizedViewport, J.clientWidth, J.clientHeight),
                    this._viewport;
            }, function(e) {
                var t = 0,
                    n = 0;
                this._offScreenRenderTexture ? (t = this._offScreenRenderTexture.width, n = this._offScreenRenderTexture.height) : (t = J.clientWidth,
                        n = J.clientHeight), this._normalizedViewport.x = e.x / t, this._normalizedViewport.y = e.y / n,
                    this._normalizedViewport.width = e.width / t, this._normalizedViewport.height = e.height / n,
                    this._calculationViewport(this._normalizedViewport, t, n), this._calculateProjectionMatrix();
            }), a(0, o, "alwaysUseRenderTexture", function() {
                return this._alwaysUseRenderTexture;
            }, function(e) {
                this._alwaysUseRenderTexture = e;
            }), a(0, o, "normalizedViewport", function() {
                return this._normalizedViewport;
            }, function(e) {
                var t = 0,
                    n = 0;
                this._offScreenRenderTexture ? (t = this._offScreenRenderTexture.width, n = this._offScreenRenderTexture.height) : (t = J.clientWidth,
                        n = J.clientHeight), this._normalizedViewport !== e && e.cloneTo(this._normalizedViewport),
                    this._calculationViewport(e, t, n), this._calculateProjectionMatrix();
            }), a(0, o, "projectionMatrix", function() {
                return this._projectionMatrix;
            }, function(e) {
                this._projectionMatrix = e, this._useUserProjectionMatrix = !0;
            }), a(0, o, "viewMatrix", function() {
                if (this._updateViewMatrix) {
                    var e = this.transform.scale,
                        t = e.x,
                        n = e.y,
                        i = e.z,
                        r = this._viewMatrix.elements;
                    this.transform.worldMatrix.cloneTo(this._viewMatrix), r[0] /= t, r[1] /= t, r[2] /= t,
                        r[4] /= n, r[5] /= n, r[6] /= n, r[8] /= i, r[9] /= i, r[10] /= i, this._viewMatrix.invert(this._viewMatrix),
                        this._updateViewMatrix = !1;
                }
                return this._viewMatrix;
            }), a(0, o, "postProcess", function() {
                return this._postProcess;
            }, function(e) {
                this._postProcess = e, this.alwaysUseRenderTexture = !0;
                var t = new lt();
                this.addCommandBuffer(0, t), e._init(this, t);
            }), t.CAMERAEVENT_POSTPROCESS = 0, t._updateMark = 0, i(t, ["_tempVector20", function() {
                return this._tempVector20 = new Ee();
            }]), t;
        }(ai);
    (function(e) {
        function t(e, n, i) {
            this._minX = NaN, this._minZ = NaN, this._cellSize = null, this._heightMap = null,
                t.__super.call(this, e, i), this._heightMap = n, this._cellSize = new Ee();
        }
        r(t, "laya.d3.core.MeshTerrainSprite3D", e);
        var n = t.prototype;
        return n._disableRotation = function() {
            var e = this.transform.rotation;
            e.x = 0, e.y = 0, e.z = 0, e.w = 1, this.transform.rotation = e;
        }, n._getScaleX = function() {
            var e = this.transform.worldMatrix,
                t = e.elements,
                n = t[0],
                i = t[1],
                r = t[2];
            return Math.sqrt(n * n + i * i + r * r);
        }, n._getScaleZ = function() {
            var e = this.transform.worldMatrix,
                t = e.elements,
                n = t[8],
                i = t[9],
                r = t[10];
            return Math.sqrt(n * n + i * i + r * r);
        }, n._initCreateFromMesh = function(e, t) {
            this._heightMap = Ge.creatFromMesh(this.meshFilter.sharedMesh, e, t, this._cellSize);
            var n = this.meshFilter.sharedMesh.bounds,
                i = n.getMin();
            n.getMax();
            this._minX = i.x, this._minZ = i.z;
        }, n._initCreateFromMeshHeightMap = function(e, t, n) {
            var i = this.meshFilter.sharedMesh.bounds;
            this._heightMap = Ge.createFromImage(e, t, n), this._computeCellSize(i);
            var r = i.getMin();
            i.getMax();
            this._minX = r.x, this._minZ = r.z;
        }, n._computeCellSize = function(e) {
            var t = e.getMin(),
                n = e.getMax(),
                i = t.x,
                r = t.z,
                a = n.x,
                o = n.z,
                s = a - i,
                l = o - r;
            this._cellSize.x = s / (this._heightMap.width - 1), this._cellSize.y = l / (this._heightMap.height - 1);
        }, n._update = function(e) {
            this._disableRotation();
        }, n.getHeight = function(e, n) {
            t._tempVector3.x = e, t._tempVector3.y = 0, t._tempVector3.z = n, this._disableRotation();
            var i = this.transform.worldMatrix;
            i.invert(t._tempMatrix4x4), Te.transformCoordinate(t._tempVector3, t._tempMatrix4x4, t._tempVector3),
                e = t._tempVector3.x, n = t._tempVector3.z;
            var r = (e - this._minX) / this._cellSize.x,
                a = (n - this._minZ) / this._cellSize.y,
                o = Math.floor(a),
                s = Math.floor(r),
                l = r - s,
                h = a - o,
                u = NaN,
                c = NaN,
                _ = i.elements,
                d = _[4],
                f = _[5],
                m = _[6],
                p = Math.sqrt(d * d + f * f + m * m),
                T = _[13],
                E = this._heightMap.getHeight(o, s + 1),
                v = this._heightMap.getHeight(o + 1, s);
            if (isNaN(E) || isNaN(v)) return NaN;
            if (1 >= l + h) {
                var g = this._heightMap.getHeight(o, s);
                return isNaN(g) ? NaN : (u = E - g, c = v - g, (g + l * u + h * c) * p + T);
            }
            var S = this._heightMap.getHeight(o + 1, s + 1);
            return isNaN(S) ? NaN : (u = v - S, c = E - S, (S + (1 - l) * u + (1 - h) * c) * p + T);
        }, a(0, n, "minX", function() {
            var e = this.transform.worldMatrix,
                t = e.elements;
            return this._minX * this._getScaleX() + t[12];
        }), a(0, n, "width", function() {
            return (this._heightMap.width - 1) * this._cellSize.x * this._getScaleX();
        }), a(0, n, "minZ", function() {
            var e = this.transform.worldMatrix,
                t = e.elements;
            return this._minZ * this._getScaleZ() + t[14];
        }), a(0, n, "depth", function() {
            return (this._heightMap.height - 1) * this._cellSize.y * this._getScaleZ();
        }), t.createFromMesh = function(e, n, i, r) {
            var a = new t(e, null, r);
            return a._initCreateFromMesh(n, i), a;
        }, t.createFromMeshAndHeightMap = function(e, n, i, r, a) {
            var o = new t(e, null, a);
            return o._initCreateFromMeshHeightMap(n, i, r), o;
        }, i(t, ["_tempVector3", function() {
            return this._tempVector3 = new Te();
        }, "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new Ht();
        }]), t;
    })(Ei);
}(window, document, Laya);