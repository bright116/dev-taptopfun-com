!function(t, e, n) {
    n.un, n.uns;
    var i = n.static, r = n.class, a = n.getset, o = n.__newvec, s = laya.resource.BaseTexture, l = laya.utils.Browser, h = laya.webgl.utils.Buffer, u = laya.webgl.BufferStateBase, c = laya.utils.Byte, _ = laya.utils.ClassUtils, d = laya.layagl.CommandEncoder, f = laya.components.Component, m = n.Config, p = laya.resource.Context, T = (laya.events.Event, 
    laya.events.EventDispatcher), E = laya.utils.Handler, v = (laya.webgl.utils.InlcudeFile, 
    laya.layagl.LayaGL), g = laya.layagl.LayaGLRunner, S = laya.net.Loader, y = laya.net.LoaderManager, x = laya.maths.MathUtil, D = laya.display.Node, I = laya.maths.Point, R = laya.renders.Render, M = (laya.resource.RenderTexture2D, 
    laya.resource.Resource), A = laya.utils.RunDriver, C = (laya.webgl.shader.Shader, 
    laya.webgl.utils.ShaderCompile), L = laya.webgl.utils.ShaderNode, O = laya.display.Sprite, N = laya.utils.Stat, V = laya.webgl.submit.Submit, w = laya.webgl.submit.SubmitKey, P = laya.resource.Texture2D, b = (laya.utils.Timer, 
    laya.net.URL), F = laya.webgl.WebGL, B = laya.webgl.WebGLContext;
    n.interface("laya.d3.core.IClone"), n.interface("laya.d3.graphics.IVertex"), n.interface("laya.d3.core.scene.IOctreeObject");
    var U = function() {
        function t(t, e, n, i, r) {
            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 1);
            var a;
            (a = r || new Float32Array(4))[0] = t, a[1] = e, a[2] = n, a[3] = i, this.elements = a;
        }
        r(t, "laya.d3.math.Native.ConchQuaternion");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.scaling = function(t, e) {
            var n = e.elements, i = this.elements;
            n[0] = i[0] * t, n[1] = i[1] * t, n[2] = i[2] * t, n[3] = i[3] * t;
        }, e.normalize = function(e) {
            t._normalizeArray(this.elements, e.elements);
        }, e.length = function() {
            var t = this.elements, e = t[0], n = t[1], i = t[2], r = t[3];
            return Math.sqrt(e * e + n * n + i * i + r * r);
        }, e.rotateX = function(t, e) {
            var n = e.elements, i = this.elements;
            t *= .5;
            var r = i[0], a = i[1], o = i[2], s = i[3], l = Math.sin(t), h = Math.cos(t);
            n[0] = r * h + s * l, n[1] = a * h + o * l, n[2] = o * h - a * l, n[3] = s * h - r * l;
        }, e.rotateY = function(t, e) {
            var n = e.elements, i = this.elements;
            t *= .5;
            var r = i[0], a = i[1], o = i[2], s = i[3], l = Math.sin(t), h = Math.cos(t);
            n[0] = r * h - o * l, n[1] = a * h + s * l, n[2] = o * h + r * l, n[3] = s * h - a * l;
        }, e.rotateZ = function(t, e) {
            var n = e.elements, i = this.elements;
            t *= .5;
            var r = i[0], a = i[1], o = i[2], s = i[3], l = Math.sin(t), h = Math.cos(t);
            n[0] = r * h + a * l, n[1] = a * h - r * l, n[2] = o * h + s * l, n[3] = s * h - o * l;
        }, e.getYawPitchRoll = function(e) {
            G.transformQuat(G.ForwardRH, this, t.TEMPVector31), G.transformQuat(G.Up, this, t.TEMPVector32);
            var n = t.TEMPVector32.elements;
            t.angleTo(G.ZERO, t.TEMPVector31, t.TEMPVector33);
            var i = t.TEMPVector33.elements;
            i[0] == Math.PI / 2 ? (i[1] = t.arcTanAngle(n[2], n[0]), i[2] = 0) : i[0] == -Math.PI / 2 ? (i[1] = t.arcTanAngle(-n[2], -n[0]), 
            i[2] = 0) : (He.createRotationY(-i[1], t.TEMPMatrix0), He.createRotationX(-i[0], t.TEMPMatrix1), 
            G.transformCoordinate(t.TEMPVector32, t.TEMPMatrix0, t.TEMPVector32), G.transformCoordinate(t.TEMPVector32, t.TEMPMatrix1, t.TEMPVector32), 
            i[2] = t.arcTanAngle(n[1], -n[0])), i[1] <= -Math.PI && (i[1] = Math.PI), i[2] <= -Math.PI && (i[2] = Math.PI), 
            i[1] >= Math.PI && i[2] >= Math.PI && (i[1] = 0, i[2] = 0, i[0] = Math.PI - i[0]);
            var r = e.elements;
            r[0] = i[1], r[1] = i[0], r[2] = i[2];
        }, e.invert = function(t) {
            var e = t.elements, n = this.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = i * i + r * r + a * a + o * o, l = s ? 1 / s : 0;
            e[0] = -i * l, e[1] = -r * l, e[2] = -a * l, e[3] = o * l;
        }, e.identity = function() {
            var t = this.elements;
            t[0] = 0, t[1] = 0, t[2] = 0, t[3] = 1;
        }, e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.elements[0] = t[e + 0], this.elements[1] = t[e + 1], 
            this.elements[2] = t[e + 2], this.elements[3] = t[e + 3];
        }, e.cloneTo = function(t) {
            var e, n, i;
            if (n = this.elements, i = t.elements, n !== i) for (e = 0; e < 4; ++e) i[e] = n[e];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.equals = function(t) {
            var e = this.elements, n = t.elements;
            return it.nearEqual(e[0], n[0]) && it.nearEqual(e[1], n[1]) && it.nearEqual(e[2], n[2]) && it.nearEqual(e[3], n[3]);
        }, e.lengthSquared = function() {
            var t = this.elements[0], e = this.elements[1], n = this.elements[2], i = this.elements[3];
            return t * t + e * e + n * n + i * i;
        }, a(0, e, "x", function() {
            return this.elements[0];
        }, function(t) {
            this.elements[0] = t;
        }), a(0, e, "y", function() {
            return this.elements[1];
        }, function(t) {
            this.elements[1] = t;
        }), a(0, e, "z", function() {
            return this.elements[2];
        }, function(t) {
            this.elements[2] = t;
        }), a(0, e, "w", function() {
            return this.elements[3];
        }, function(t) {
            this.elements[3] = t;
        }), t._dotArray = function(t, e) {
            return t[0] * e[0] + t[1] * e[1] + t[2] * e[2] + t[3] * e[3];
        }, t._normalizeArray = function(t, e) {
            var n = t[0], i = t[1], r = t[2], a = t[3], o = n * n + i * i + r * r + a * a;
            o > 0 && (o = 1 / Math.sqrt(o), e[0] = n * o, e[1] = i * o, e[2] = r * o, e[3] = a * o);
        }, t._lerpArray = function(e, n, i, r) {
            var a = 1 - i;
            t._dotArray(e, n) >= 0 ? (r[0] = a * e[0] + i * n[0], r[1] = a * e[1] + i * n[1], 
            r[2] = a * e[2] + i * n[2], r[3] = a * e[3] + i * n[3]) : (r[0] = a * e[0] - i * n[0], 
            r[1] = a * e[1] - i * n[1], r[2] = a * e[2] - i * n[2], r[3] = a * e[3] - i * n[3]), 
            t._normalizeArray(r, r);
        }, t.createFromYawPitchRoll = function(t, e, n, i) {
            var r = .5 * n, a = .5 * e, o = .5 * t, s = Math.sin(r), l = Math.cos(r), h = Math.sin(a), u = Math.cos(a), c = Math.sin(o), _ = Math.cos(o), d = i.elements;
            d[0] = _ * h * l + c * u * s, d[1] = c * u * l - _ * h * s, d[2] = _ * u * s - c * h * l, 
            d[3] = _ * u * l + c * h * s;
        }, t.multiply = function(t, e, n) {
            var i = t.elements, r = e.elements, a = n.elements, o = i[0], s = i[1], l = i[2], h = i[3], u = r[0], c = r[1], _ = r[2], d = r[3], f = s * _ - l * c, m = l * u - o * _, p = o * c - s * u, T = o * u + s * c + l * _;
            a[0] = o * d + u * h + f, a[1] = s * d + c * h + m, a[2] = l * d + _ * h + p, a[3] = h * d - T;
        }, t.arcTanAngle = function(t, e) {
            return 0 == t ? 1 == e ? Math.PI / 2 : -Math.PI / 2 : t > 0 ? Math.atan(e / t) : t < 0 ? e > 0 ? Math.atan(e / t) + Math.PI : Math.atan(e / t) - Math.PI : 0;
        }, t.angleTo = function(e, n, i) {
            G.subtract(n, e, t.TEMPVector30), G.normalize(t.TEMPVector30, t.TEMPVector30), i.elements[0] = Math.asin(t.TEMPVector30.y), 
            i.elements[1] = t.arcTanAngle(-t.TEMPVector30.z, -t.TEMPVector30.x);
        }, t.createFromAxisAngle = function(t, e, n) {
            var i = n.elements, r = t.elements;
            e *= .5;
            var a = Math.sin(e);
            i[0] = a * r[0], i[1] = a * r[1], i[2] = a * r[2], i[3] = Math.cos(e);
        }, t.createFromMatrix3x3 = function(t, e) {
            var n, i = e.elements, r = t.elements, a = r[0] + r[4] + r[8];
            if (a > 0) n = Math.sqrt(a + 1), i[3] = .5 * n, n = .5 / n, i[0] = (r[5] - r[7]) * n, 
            i[1] = (r[6] - r[2]) * n, i[2] = (r[1] - r[3]) * n; else {
                var o = 0;
                r[4] > r[0] && (o = 1), r[8] > r[3 * o + o] && (o = 2);
                var s = (o + 1) % 3, l = (o + 2) % 3;
                n = Math.sqrt(r[3 * o + o] - r[3 * s + s] - r[3 * l + l] + 1), i[o] = .5 * n, n = .5 / n, 
                i[3] = (r[3 * s + l] - r[3 * l + s]) * n, i[s] = (r[3 * s + o] + r[3 * o + s]) * n, 
                i[l] = (r[3 * l + o] + r[3 * o + l]) * n;
            }
        }, t.createFromMatrix4x4 = function(t, e) {
            var n, i, r = t.elements, a = e.elements, o = r[0] + r[5] + r[10];
            o > 0 ? (n = Math.sqrt(o + 1), a[3] = .5 * n, n = .5 / n, a[0] = (r[6] - r[9]) * n, 
            a[1] = (r[8] - r[2]) * n, a[2] = (r[1] - r[4]) * n) : r[0] >= r[5] && r[0] >= r[10] ? (i = .5 / (n = Math.sqrt(1 + r[0] - r[5] - r[10])), 
            a[0] = .5 * n, a[1] = (r[1] + r[4]) * i, a[2] = (r[2] + r[8]) * i, a[3] = (r[6] - r[9]) * i) : r[5] > r[10] ? (i = .5 / (n = Math.sqrt(1 + r[5] - r[0] - r[10])), 
            a[0] = (r[4] + r[1]) * i, a[1] = .5 * n, a[2] = (r[9] + r[6]) * i, a[3] = (r[8] - r[2]) * i) : (i = .5 / (n = Math.sqrt(1 + r[10] - r[0] - r[5])), 
            a[0] = (r[8] + r[2]) * i, a[1] = (r[9] + r[6]) * i, a[2] = .5 * n, a[3] = (r[1] - r[4]) * i);
        }, t.slerp = function(t, e, n, i) {
            var r, a, o, s, l, h = t.elements, u = e.elements, c = i.elements, _ = h[0], d = h[1], f = h[2], m = h[3], p = u[0], T = u[1], E = u[2], v = u[3];
            return (a = _ * p + d * T + f * E + m * v) < 0 && (a = -a, p = -p, T = -T, E = -E, 
            v = -v), 1 - a > 1e-6 ? (r = Math.acos(a), o = Math.sin(r), s = Math.sin((1 - n) * r) / o, 
            l = Math.sin(n * r) / o) : (s = 1 - n, l = n), c[0] = s * _ + l * p, c[1] = s * d + l * T, 
            c[2] = s * f + l * E, c[3] = s * m + l * v, c;
        }, t.lerp = function(e, n, i, r) {
            t._lerpArray(e.elements, n.elements, i, r.elements);
        }, t.add = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2], i[3] = r[3] + a[3];
        }, t.dot = function(e, n) {
            return t._dotArray(e.elements, n.elements);
        }, t.rotationLookAt = function(e, n, i) {
            t.lookAt(G.ZERO, e, n, i);
        }, t.lookAt = function(e, n, i, r) {
            Be.lookAt(e, n, i, t._tempMatrix3x3), t.rotationMatrix(t._tempMatrix3x3, r);
        }, t.invert = function(t, e) {
            var n = t.elements, i = e.elements, r = t.lengthSquared();
            it.isZero(r) || (r = 1 / r, i[0] = -n[0] * r, i[1] = -n[1] * r, i[2] = -n[2] * r, 
            i[3] = n[3] * r);
        }, t.rotationMatrix = function(t, e) {
            var n = t.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = n[4], l = n[5], h = n[6], u = n[7], c = n[8], _ = e.elements, d = NaN, f = NaN, m = i + s + c;
            m > 0 ? (d = Math.sqrt(m + 1), _[3] = .5 * d, d = .5 / d, _[0] = (l - u) * d, _[1] = (h - a) * d, 
            _[2] = (r - o) * d) : i >= s && i >= c ? (f = .5 / (d = Math.sqrt(1 + i - s - c)), 
            _[0] = .5 * d, _[1] = (r + o) * f, _[2] = (a + h) * f, _[3] = (l - u) * f) : s > c ? (f = .5 / (d = Math.sqrt(1 + s - i - c)), 
            _[0] = (o + r) * f, _[1] = .5 * d, _[2] = (u + l) * f, _[3] = (h - a) * f) : (f = .5 / (d = Math.sqrt(1 + c - i - s)), 
            _[0] = (h + a) * f, _[1] = (u + l) * f, _[2] = .5 * d, _[3] = (r - o) * f);
        }, t.DEFAULT = new t(), i(t, [ "TEMPVector30", function() {
            return this.TEMPVector30 = new G();
        }, "TEMPVector31", function() {
            return this.TEMPVector31 = new G();
        }, "TEMPVector32", function() {
            return this.TEMPVector32 = new G();
        }, "TEMPVector33", function() {
            return this.TEMPVector33 = new G();
        }, "TEMPMatrix0", function() {
            return this.TEMPMatrix0 = new He();
        }, "TEMPMatrix1", function() {
            return this.TEMPMatrix1 = new He();
        }, "_tempMatrix3x3", function() {
            return this._tempMatrix3x3 = new Be();
        }, "NAN", function() {
            return this.NAN = new t(NaN, NaN, NaN, NaN);
        } ]), t;
    }(), z = function() {
        function t(t, e, n, i) {
            this.elements = null, void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), 
            void 0 === i && (i = 0);
            var r = this.elements = new Float32Array(4);
            r[0] = t, r[1] = e, r[2] = n, r[3] = i;
        }
        r(t, "laya.d3.math.Native.ConchVector4");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.elements[0] = t[e + 0], this.elements[1] = t[e + 1], 
            this.elements[2] = t[e + 2], this.elements[3] = t[e + 3];
        }, e.cloneTo = function(t) {
            var e = t.elements, n = this.elements;
            e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, e.lengthSquared = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, a(0, e, "x", function() {
            return this.elements[0];
        }, function(t) {
            this.elements[0] = t;
        }), a(0, e, "y", function() {
            return this.elements[1];
        }, function(t) {
            this.elements[1] = t;
        }), a(0, e, "z", function() {
            return this.elements[2];
        }, function(t) {
            this.elements[2] = t;
        }), a(0, e, "w", function() {
            return this.elements[3];
        }, function(t) {
            this.elements[3] = t;
        }), t.lerp = function(t, e, n, i) {
            var r = i.elements, a = t.elements, o = e.elements, s = a[0], l = a[1], h = a[2], u = a[3];
            r[0] = s + n * (o[0] - s), r[1] = l + n * (o[1] - l), r[2] = h + n * (o[2] - h), 
            r[3] = u + n * (o[3] - u);
        }, t.transformByM4x4 = function(t, e, n) {
            var i = t.elements, r = i[0], a = i[1], o = i[2], s = i[3], l = e.elements, h = n.elements;
            h[0] = r * l[0] + a * l[4] + o * l[8] + s * l[12], h[1] = r * l[1] + a * l[5] + o * l[9] + s * l[13], 
            h[2] = r * l[2] + a * l[6] + o * l[10] + s * l[14], h[3] = r * l[3] + a * l[7] + o * l[11] + s * l[15];
        }, t.equals = function(t, e) {
            var n = t.elements, i = e.elements;
            return it.nearEqual(Math.abs(n[0]), Math.abs(i[0])) && it.nearEqual(Math.abs(n[1]), Math.abs(i[1])) && it.nearEqual(Math.abs(n[2]), Math.abs(i[2])) && it.nearEqual(Math.abs(n[3]), Math.abs(i[3]));
        }, t.normalize = function(t, e) {
            var n = t.elements, i = e.elements, r = t.length();
            r > 0 && (i[0] = n[0] * r, i[1] = n[1] * r, i[2] = n[2] * r, i[3] = n[3] * r);
        }, t.add = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2], i[3] = r[3] + a[3];
        }, t.subtract = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] - a[0], i[1] = r[1] - a[1], i[2] = r[2] - a[2], i[3] = r[3] - a[3];
        }, t.multiply = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] * a[0], i[1] = r[1] * a[1], i[2] = r[2] * a[2], i[3] = r[3] * a[3];
        }, t.scale = function(t, e, n) {
            var i = n.elements, r = t.elements;
            i[0] = r[0] * e, i[1] = r[1] * e, i[2] = r[2] * e, i[3] = r[3] * e;
        }, t.Clamp = function(t, e, n, i) {
            var r = t.elements, a = r[0], o = r[1], s = r[2], l = r[3], h = e.elements, u = h[0], c = h[1], _ = h[2], d = h[3], f = n.elements, m = f[0], p = f[1], T = f[2], E = f[3], v = i.elements;
            a = (a = a > m ? m : a) < u ? u : a, o = (o = o > p ? p : o) < c ? c : o, s = (s = s > T ? T : s) < _ ? _ : s, 
            l = (l = l > E ? E : l) < d ? d : l, v[0] = a, v[1] = o, v[2] = s, v[3] = l;
        }, t.distanceSquared = function(t, e) {
            var n = t.elements, i = e.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2], s = n[3] - i[3];
            return r * r + a * a + o * o + s * s;
        }, t.distance = function(t, e) {
            var n = t.elements, i = e.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2], s = n[3] - i[3];
            return Math.sqrt(r * r + a * a + o * o + s * s);
        }, t.dot = function(t, e) {
            var n = t.elements, i = e.elements;
            return n[0] * i[0] + n[1] * i[1] + n[2] * i[2] + n[3] * i[3];
        }, t.min = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = Math.min(r[0], a[0]), i[1] = Math.min(r[1], a[1]), i[2] = Math.min(r[2], a[2]), 
            i[3] = Math.min(r[3], a[3]);
        }, t.max = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = Math.max(r[0], a[0]), i[1] = Math.max(r[1], a[1]), i[2] = Math.max(r[2], a[2]), 
            i[3] = Math.max(r[3], a[3]);
        }, i(t, [ "ZERO", function() {
            return this.ZERO = new t();
        }, "ONE", function() {
            return this.ONE = new t(1, 1, 1, 1);
        }, "UnitX", function() {
            return this.UnitX = new t(1, 0, 0, 0);
        }, "UnitY", function() {
            return this.UnitY = new t(0, 1, 0, 0);
        }, "UnitZ", function() {
            return this.UnitZ = new t(0, 0, 1, 0);
        }, "UnitW", function() {
            return this.UnitW = new t(0, 0, 0, 1);
        } ]), t;
    }(), G = function() {
        function t(t, e, n, i) {
            this.elements = null, void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0);
            var r;
            r = i || new Float32Array(3), this.elements = r, r[0] = t, r[1] = e, r[2] = n;
        }
        r(t, "laya.d3.math.Native.ConchVector3");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.setValue = function(t, e, n) {
            this.elements[0] = t, this.elements[1] = e, this.elements[2] = n;
        }, e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.elements[0] = t[e + 0], this.elements[1] = t[e + 1], 
            this.elements[2] = t[e + 2];
        }, e.cloneTo = function(t) {
            var e = t.elements, n = this.elements;
            e[0] = n[0], e[1] = n[1], e[2] = n[2];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.toDefault = function() {
            this.elements[0] = 0, this.elements[1] = 0, this.elements[2] = 0;
        }, a(0, e, "x", function() {
            return this.elements[0];
        }, function(t) {
            this.elements[0] = t;
        }), a(0, e, "y", function() {
            return this.elements[1];
        }, function(t) {
            this.elements[1] = t;
        }), a(0, e, "z", function() {
            return this.elements[2];
        }, function(t) {
            this.elements[2] = t;
        }), t.distanceSquared = function(t, e) {
            var n = t.elements, i = e.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2];
            return r * r + a * a + o * o;
        }, t.distance = function(t, e) {
            var n = t.elements, i = e.elements, r = n[0] - i[0], a = n[1] - i[1], o = n[2] - i[2];
            return Math.sqrt(r * r + a * a + o * o);
        }, t.min = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = Math.min(r[0], a[0]), i[1] = Math.min(r[1], a[1]), i[2] = Math.min(r[2], a[2]);
        }, t.max = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = Math.max(r[0], a[0]), i[1] = Math.max(r[1], a[1]), i[2] = Math.max(r[2], a[2]);
        }, t.transformQuat = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements, o = r[0], s = r[1], l = r[2], h = a[0], u = a[1], c = a[2], _ = a[3], d = _ * o + u * l - c * s, f = _ * s + c * o - h * l, m = _ * l + h * s - u * o, p = -h * o - u * s - c * l;
            i[0] = d * _ + p * -h + f * -c - m * -u, i[1] = f * _ + p * -u + m * -h - d * -c, 
            i[2] = m * _ + p * -c + d * -u - f * -h;
        }, t.scalarLength = function(t) {
            var e = t.elements, n = e[0], i = e[1], r = e[2];
            return Math.sqrt(n * n + i * i + r * r);
        }, t.scalarLengthSquared = function(t) {
            var e = t.elements, n = e[0], i = e[1], r = e[2];
            return n * n + i * i + r * r;
        }, t.normalize = function(t, e) {
            var n = t.elements, i = e.elements, r = n[0], a = n[1], o = n[2], s = r * r + a * a + o * o;
            s > 0 && (s = 1 / Math.sqrt(s), i[0] = n[0] * s, i[1] = n[1] * s, i[2] = n[2] * s);
        }, t.multiply = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] * a[0], i[1] = r[1] * a[1], i[2] = r[2] * a[2];
        }, t.scale = function(t, e, n) {
            var i = n.elements, r = t.elements;
            i[0] = r[0] * e, i[1] = r[1] * e, i[2] = r[2] * e;
        }, t.lerp = function(t, e, n, i) {
            var r = i.elements, a = t.elements, o = e.elements, s = a[0], l = a[1], h = a[2];
            r[0] = s + n * (o[0] - s), r[1] = l + n * (o[1] - l), r[2] = h + n * (o[2] - h);
        }, t.transformV3ToV3 = function(e, n, i) {
            var r = t._tempVector4;
            t.transformV3ToV4(e, n, r);
            var a = r.elements, o = i.elements;
            o[0] = a[0], o[1] = a[1], o[2] = a[2];
        }, t.transformV3ToV4 = function(t, e, n) {
            var i = t.elements, r = i[0], a = i[1], o = i[2], s = e.elements, l = n.elements;
            l[0] = r * s[0] + a * s[4] + o * s[8] + s[12], l[1] = r * s[1] + a * s[5] + o * s[9] + s[13], 
            l[2] = r * s[2] + a * s[6] + o * s[10] + s[14], l[3] = r * s[3] + a * s[7] + o * s[11] + s[15];
        }, t.TransformNormal = function(t, e, n) {
            var i = t.elements, r = i[0], a = i[1], o = i[2], s = e.elements, l = n.elements;
            l[0] = r * s[0] + a * s[4] + o * s[8], l[1] = r * s[1] + a * s[5] + o * s[9], l[2] = r * s[2] + a * s[6] + o * s[10];
        }, t.transformCoordinate = function(t, e, n) {
            var i = t.elements, r = i[0], a = i[1], o = i[2], s = e.elements, l = r * s[3] + a * s[7] + o * s[11] + s[15], h = n.elements;
            h[0] = r * s[0] + a * s[4] + o * s[8] + s[12] / l, h[1] = r * s[1] + a * s[5] + o * s[9] + s[13] / l, 
            h[2] = r * s[2] + a * s[6] + o * s[10] + s[14] / l;
        }, t.Clamp = function(t, e, n, i) {
            var r = t.elements, a = r[0], o = r[1], s = r[2], l = e.elements, h = l[0], u = l[1], c = l[2], _ = n.elements, d = _[0], f = _[1], m = _[2], p = i.elements;
            a = (a = a > d ? d : a) < h ? h : a, o = (o = o > f ? f : o) < u ? u : o, s = (s = s > m ? m : s) < c ? c : s, 
            p[0] = a, p[1] = o, p[2] = s;
        }, t.add = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] + a[0], i[1] = r[1] + a[1], i[2] = r[2] + a[2];
        }, t.subtract = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements;
            i[0] = r[0] - a[0], i[1] = r[1] - a[1], i[2] = r[2] - a[2];
        }, t.cross = function(t, e, n) {
            var i = t.elements, r = e.elements, a = n.elements, o = i[0], s = i[1], l = i[2], h = r[0], u = r[1], c = r[2];
            a[0] = s * c - l * u, a[1] = l * h - o * c, a[2] = o * u - s * h;
        }, t.dot = function(t, e) {
            var n = t.elements, i = e.elements;
            return n[0] * i[0] + n[1] * i[1] + n[2] * i[2];
        }, t.equals = function(t, e) {
            var n = t.elements, i = e.elements;
            return it.nearEqual(n[0], i[0]) && it.nearEqual(n[1], i[1]) && it.nearEqual(n[2], i[2]);
        }, t.ZERO = new t(0, 0, 0), t.ONE = new t(1, 1, 1), t.NegativeUnitX = new t(-1, 0, 0), 
        t.UnitX = new t(1, 0, 0), t.UnitY = new t(0, 1, 0), t.UnitZ = new t(0, 0, 1), t.ForwardRH = new t(0, 0, -1), 
        t.ForwardLH = new t(0, 0, 1), t.Up = new t(0, 1, 0), t.NAN = new t(NaN, NaN, NaN), 
        i(t, [ "_tempVector4", function() {
            return this._tempVector4 = new z();
        } ]), t;
    }(), H = function() {
        function t(t) {
            this._color = null, this.enbale = !1, this._color = t;
        }
        r(t, "laya.d3.core.particleShuriKen.module.ColorOverLifetime");
        var e = t.prototype;
        return e.cloneTo = function(t) {
            var e = t;
            this._color.cloneTo(e._color), e.enbale = this.enbale;
        }, e.clone = function() {
            var t;
            switch (this._color.type) {
              case 0:
                t = rt.createByConstant(this._color.constant.clone());
                break;

              case 1:
                t = rt.createByGradient(this._color.gradient.clone());
                break;

              case 2:
                t = rt.createByRandomTwoConstant(this._color.constantMin.clone(), this._color.constantMax.clone());
                break;

              case 3:
                t = rt.createByRandomTwoGradient(this._color.gradientMin.clone(), this._color.gradientMax.clone());
            }
            var e = new this.constructor(t);
            return e.enbale = this.enbale, e;
        }, a(0, e, "color", function() {
            return this._color;
        }), t;
    }(), k = function() {
        function t() {
            this.enable = !1, this.randomDirection = !1;
        }
        r(t, "laya.d3.core.particleShuriKen.module.shape.BaseShape");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e._getShapeBoundBox = function(t) {
            throw new Error("BaseShape: must override it.");
        }, e._getSpeedBoundBox = function(t) {
            throw new Error("BaseShape: must override it.");
        }, e.generatePositionAndDirection = function(t, e, n, i) {
            throw new Error("BaseShape: must override it.");
        }, e._calculateProceduralBounds = function(t, e, n) {
            this._getShapeBoundBox(t);
            var i = t.min, r = t.max;
            Tt.multiply(i, e, i), Tt.multiply(r, e, r);
            var a = new ze(new Tt(), new Tt());
            this.randomDirection ? (a.min = new Tt(-1, -1, -1), a.max = new Tt(1, 1, 1)) : this._getSpeedBoundBox(a);
            var o = new ze(new Tt(), new Tt()), s = o.min, l = o.max;
            Tt.scale(a.min, n.y, s), Tt.scale(a.max, n.y, l), Tt.add(t.min, s, s), Tt.add(t.max, l, l), 
            Tt.min(t.min, s, t.min), Tt.max(t.max, s, t.max);
            var h = new ze(new Tt(), new Tt()), u = h.min, c = h.max;
            Tt.scale(a.min, n.x, u), Tt.scale(a.max, n.x, c), Tt.min(h.min, c, s), Tt.max(h.min, c, l), 
            Tt.min(t.min, s, t.min), Tt.max(t.max, s, t.max);
        }, e.cloneTo = function(t) {
            t.enable = this.enable;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, t;
    }(), X = function() {
        function t() {
            this._attatched = !1, this._indexInCompound = -1, this._compoundParent = null, this._attatchedCollisionObject = null, 
            this._referenceCount = 0, this.needsCustomCollisionCallback = !1, this._scale = new Tt(1, 1, 1), 
            this._centerMatrix = new He(), this._localOffset = new Tt(0, 0, 0), this._localRotation = new ht(0, 0, 0, 1);
        }
        r(t, "laya.d3.physics.shape.ColliderShape");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e._setScale = function(e) {
            this._compoundParent ? this.updateLocalTransformations() : (t._nativeScale.setValue(e.x, e.y, e.z), 
            this._nativeShape.setLocalScaling(t._nativeScale));
        }, e._addReference = function() {
            this._referenceCount++;
        }, e._removeReference = function() {
            this._referenceCount--;
        }, e.updateLocalTransformations = function() {
            if (this._compoundParent) {
                var e = t._tempVector30;
                Tt.multiply(this.localOffset, this._scale, e), t._createAffineTransformation(e, this.localRotation, this._centerMatrix.elements);
            } else t._createAffineTransformation(this.localOffset, this.localRotation, this._centerMatrix.elements);
        }, e.cloneTo = function(t) {
            var e = t;
            this._localOffset.cloneTo(e.localOffset), this._localRotation.cloneTo(e.localRotation), 
            e.localOffset = e.localOffset, e.localRotation = e.localRotation;
        }, e.clone = function() {
            return null;
        }, e.destroy = function() {
            this._nativeShape && (W._physics3D.destroy(this._nativeShape), this._nativeShape = null);
        }, a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "localOffset", function() {
            return this._localOffset;
        }, function(t) {
            this._localOffset = t, this._compoundParent && this._compoundParent._updateChildTransform(this);
        }), a(0, e, "localRotation", function() {
            return this._localRotation;
        }, function(t) {
            this._localRotation = t, this._compoundParent && this._compoundParent._updateChildTransform(this);
        }), t._creatShape = function(t) {
            var e;
            switch (t.type) {
              case "BoxColliderShape":
                var n = t.size;
                e = n ? new hn(n[0], n[1], n[2]) : new hn();
                break;

              case "SphereColliderShape":
                e = new tn(t.radius);
                break;

              case "CapsuleColliderShape":
                e = new an(t.radius, t.height, t.orientation);
                break;

              case "MeshColliderShape":
                var i = new Dn();
                t.mesh && (i.mesh = S.getRes(t.mesh)), e = i;
                break;

              case "ConeColliderShape":
                e = new On(t.radius, t.height, t.orientation);
                break;

              case "CylinderColliderShape":
                e = new pn(t.radius, t.height, t.orientation);
                break;

              default:
                throw "unknown shape type.";
            }
            if (t.center) {
                var r = e.localOffset;
                r.fromArray(t.center), e.localOffset = r;
            }
            return e;
        }, t._createAffineTransformation = function(t, e, n) {
            var i = e.x, r = e.y, a = e.z, o = e.w, s = i + i, l = r + r, h = a + a, u = i * s, c = i * l, _ = i * h, d = r * l, f = r * h, m = a * h, p = o * s, T = o * l, E = o * h;
            n[0] = 1 - (d + m), n[1] = c + E, n[2] = _ - T, n[3] = 0, n[4] = c - E, n[5] = 1 - (u + m), 
            n[6] = f + p, n[7] = 0, n[8] = _ + T, n[9] = f - p, n[10] = 1 - (u + d), n[11] = 0, 
            n[12] = t.x, n[13] = t.y, n[14] = t.z, n[15] = 1;
        }, t.SHAPEORIENTATION_UPX = 0, t.SHAPEORIENTATION_UPY = 1, t.SHAPEORIENTATION_UPZ = 2, 
        t.SHAPETYPES_BOX = 0, t.SHAPETYPES_SPHERE = 1, t.SHAPETYPES_CYLINDER = 2, t.SHAPETYPES_CAPSULE = 3, 
        t.SHAPETYPES_CONVEXHULL = 4, t.SHAPETYPES_COMPOUND = 5, t.SHAPETYPES_STATICPLANE = 6, 
        t.SHAPETYPES_CONE = 7, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_nativeScale", function() {
            return this._nativeScale = new W._physics3D.btVector3(1, 1, 1);
        }, "_nativeVector30", function() {
            return this._nativeVector30 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativQuaternion0", function() {
            return this._nativQuaternion0 = new W._physics3D.btQuaternion(0, 0, 0, 1);
        }, "_nativeTransform0", function() {
            return this._nativeTransform0 = new W._physics3D.btTransform();
        } ]), t;
    }(), W = function() {
        function e() {}
        return r(e, "Laya3D"), a(1, e, "enbalePhysics", function() {
            return e._enbalePhysics;
        }), e._cancelLoadByUrl = function(t) {
            n.loader.cancelLoadByUrl(t), e._innerFirstLevelLoaderManager.cancelLoadByUrl(t), 
            e._innerSecondLevelLoaderManager.cancelLoadByUrl(t), e._innerThirdLevelLoaderManager.cancelLoadByUrl(t), 
            e._innerFourthLevelLoaderManager.cancelLoadByUrl(t);
        }, e._changeWebGLSize = function(t, e) {
            F.onStageResize(t, e), J.clientWidth = t, J.clientHeight = e;
        }, e.__init__ = function(t, i, r) {
            if (m.isAntialias = r.isAntialias, m.isAlpha = r.isAlpha, m.premultipliedAlpha = r.premultipliedAlpha, 
            m.isStencil = r.isStencil, F.enable()) {
                A.changeWebGLSize = e._changeWebGLSize, R.is3DMode = !0, n.init(t, i), R.supportWebGLPlusRendering || (v.instance = F.mainContext, 
                v.instance.createCommandEncoder = function(t, e, n) {
                    return void 0 === t && (t = 128), void 0 === e && (e = 64), void 0 === n && (n = !1), 
                    new d(this, t, e, n);
                }), e.enableNative3D(), Fn.__init__(), Jn.__init__(), Ei.__init__(), Di.__init__(), 
                yi.__init__(), Bn.__init__(), ci.__init__(), oi.__init__(), fi.__init__(), ii.__init__(), 
                $n.__init__(), Si.__init__(), ni.__init__(), li.__init__(), hi.__init__(), si.__init__(), 
                _i.__init__(), ui.__init__(), Ht.__init__(), ri.defaultMaterial.lock = !0, ci.defaultMaterial.lock = !0, 
                li.defaultMaterial.lock = !0, oi.defaultMaterial.lock = !0, fi.defaultMaterial.lock = !0, 
                $n.defaultMaterial.lock = !0, si.defaultMaterial.lock = !0, ni.defaultMaterial.lock = !0, 
                ii.defaultMaterial.lock = !0, di.defaultMaterial.lock = !0, hi.defaultMaterial.lock = !0, 
                P.__init__(), Ti.__init__(), xn.__init__(), Ln.__init__(), Un.__init__(), Re.__init__(), 
                Pe.__init__(), Ct.__init__();
                var a = y.createMap;
                a.lh = [ "HIERARCHY", Fn._parse ], a.ls = [ "HIERARCHY", Qn._parse ], a.lm = [ "MESH", Gn._parse ], 
                a.lmat = [ "MATERIAL", Bn._parse ], a.ltc = [ "TEXTURECUBE", Ti._parse ], a.jpg = [ "TEXTURE2D", P._parse ], 
                a.jpeg = [ "TEXTURE2D", P._parse ], a.bmp = [ "TEXTURE2D", P._parse ], a.gif = [ "TEXTURE2D", P._parse ], 
                a.png = [ "TEXTURE2D", P._parse ], a.dds = [ "TEXTURE2D", P._parse ], a.ktx = [ "TEXTURE2D", P._parse ], 
                a.pvr = [ "TEXTURE2D", P._parse ], a.lani = [ "ANIMATIONCLIP", kn._parse ], a.lav = [ "AVATAR", zn._parse ], 
                a.thdata = [ "TERRAINHEIGHTDATA", Hn._pharse ];
                var o = S.parserMap;
                o.HIERARCHY = e._loadHierarchy, o.MESH = e._loadMesh, o.MATERIAL = e._loadMaterial, 
                o.TEXTURECUBE = e._loadTextureCube, o.TEXTURE2D = e._loadTexture2D, o.ANIMATIONCLIP = e._loadAnimationClip, 
                o.AVATAR = e._loadAvatar, e._innerFirstLevelLoaderManager.on("error", null, e._eventLoadManagerError), 
                e._innerSecondLevelLoaderManager.on("error", null, e._eventLoadManagerError), e._innerThirdLevelLoaderManager.on("error", null, e._eventLoadManagerError), 
                e._innerFourthLevelLoaderManager.on("error", null, e._eventLoadManagerError);
            } else alert("Laya3D init error,must support webGL!");
        }, e.enableNative3D = function() {
            if (R.isConchApp) {
                v = t.LayaGLContext;
                var e = ut, n = Xn, i = zn, r = Pe, a = jn;
                if (R.supportWebGLPlusRendering && (e.prototype._initData = e.prototype._initDataForNative, 
                e.prototype.setBool = e.prototype.setBoolForNative, e.prototype.getBool = e.prototype.getBoolForNative, 
                e.prototype.setInt = e.prototype.setIntForNative, e.prototype.getInt = e.prototype.getIntForNative, 
                e.prototype.setNumber = e.prototype.setNumberForNative, e.prototype.getNumber = e.prototype.getNumberForNative, 
                e.prototype.setVector = e.prototype.setVectorForNative, e.prototype.getVector = e.prototype.getVectorForNative, 
                e.prototype.setVector2 = e.prototype.setVector2ForNative, e.prototype.getVector2 = e.prototype.getVector2ForNative, 
                e.prototype.setVector3 = e.prototype.setVector3ForNative, e.prototype.getVector3 = e.prototype.getVector3ForNative, 
                e.prototype.setQuaternion = e.prototype.setQuaternionForNative, e.prototype.getQuaternion = e.prototype.getQuaternionForNative, 
                e.prototype.setMatrix4x4 = e.prototype.setMatrix4x4ForNative, e.prototype.getMatrix4x4 = e.prototype.getMatrix4x4ForNative, 
                e.prototype.setBuffer = e.prototype.setBufferForNative, e.prototype.getBuffer = e.prototype.getBufferForNative, 
                e.prototype.setTexture = e.prototype.setTextureForNative, e.prototype.getTexture = e.prototype.getTextureForNative, 
                e.prototype.setAttribute = e.prototype.setAttributeForNative, e.prototype.getAttribute = e.prototype.getAttributeForNative, 
                e.prototype.cloneTo = e.prototype.cloneToForNative, e.prototype.getData = e.prototype.getDataForNative, 
                n.prototype._uniformMatrix2fv = n.prototype._uniformMatrix2fvForNative, n.prototype._uniformMatrix3fv = n.prototype._uniformMatrix3fvForNative, 
                n.prototype._uniformMatrix4fv = n.prototype._uniformMatrix4fvForNative, a.prototype._renderUpdateWithCamera = a.prototype._renderUpdateWithCameraForNative), 
                R.supportWebGLPlusCulling && (r.renderObjectCulling = Pe.renderObjectCullingNative), 
                R.supportWebGLPlusAnimation) {
                    i.prototype._cloneDatasToAnimator = i.prototype._cloneDatasToAnimatorNative, Tn = t.conchFloatKeyframe, 
                    Cn = t.conchFloatArrayKeyframe, Vn = t.conchFloatArrayKeyframe, Se = t.conchKeyframeNode, 
                    Qt = t.conchKeyframeNodeList;
                    var o = kn;
                    o.prototype._evaluateClipDatasRealTime = o.prototype._evaluateClipDatasRealTimeForNative;
                }
            }
            F.shaderHighPrecision = !1, v.instance.getShaderPrecisionFormat(35632, 36338).precision ? F.shaderHighPrecision = !0 : F.shaderHighPrecision = !1;
        }, e.formatRelativePath = function(t, e) {
            var n;
            if (n = t + e, "." === e.charAt(0)) {
                for (var i = n.split("/"), r = 0, a = i.length; r < a; r++) if (".." == i[r]) {
                    var o = r - 1;
                    o > 0 && ".." !== i[o] && (i.splice(o, 2), r -= 2);
                }
                n = i.join("/");
            }
            return n;
        }, e._endLoad = function(t, e, n) {
            if (n) for (var i = 0, r = n.length; i < r; i++) {
                var a = S.getRes(n[i]);
                a && a._removeReference();
            }
            t.endLoad(e);
        }, e._eventLoadManagerError = function(t) {
            n.loader.event("error", t);
        }, e._addHierarchyInnerUrls = function(t, n, i, r, a, o, s, l) {
            var h = e.formatRelativePath(r, a);
            return i && (h += i), t.push({
                url: h,
                type: o,
                constructParams: s,
                propertyParams: l
            }), n.push(h), h;
        }, e._getSprite3DHierarchyInnerUrls = function(t, n, i, r, a, o, s, l) {
            var h = 0, u = 0, c = t.props;
            switch (t.type) {
              case "Scene3D":
                var _ = c.lightmaps;
                for (h = 0, u = _.length; h < u; h++) {
                    var d = _[h];
                    d.path = e._addHierarchyInnerUrls(a, o, s, l, d.path, "TEXTURE2D", d.constructParams, d.propertyParams);
                }
                var f = c.reflectionTexture;
                if (f && (c.reflectionTexture = e._addHierarchyInnerUrls(r, o, s, l, f, "TEXTURECUBE")), 
                c.sky) {
                    var m = c.sky.material;
                    m && (m.path = e._addHierarchyInnerUrls(i, o, s, l, m.path, "MATERIAL"));
                }
                break;

              case "Camera":
                var p = c.skyboxMaterial;
                p && (p.path = e._addHierarchyInnerUrls(i, o, s, l, p.path, "MATERIAL"));
                break;

              case "TrailSprite3D":
              case "MeshSprite3D":
              case "SkinnedMeshSprite3D":
                var T = c.meshPath;
                T && (c.meshPath = e._addHierarchyInnerUrls(n, o, s, l, T, "MESH"));
                var E = c.materials;
                if (E) for (h = 0, u = E.length; h < u; h++) E[h].path = e._addHierarchyInnerUrls(i, o, s, l, E[h].path, "MATERIAL");
                break;

              case "ShuriKenParticle3D":
                var v = c.meshPath;
                v && (c.meshPath = e._addHierarchyInnerUrls(n, o, s, l, v, "MESH")), c.material.path = e._addHierarchyInnerUrls(i, o, s, l, c.material.path, "MATERIAL");
                break;

              case "Terrain":
                e._addHierarchyInnerUrls(a, o, s, l, c.dataPath, "TERRAIN");
            }
            var g = t.components;
            if (g) for (var S = 0, y = g.length; S < y; S++) {
                var x = g[S];
                switch (x.type) {
                  case "Animator":
                    x.avatarPath;
                    var D = x.avatar;
                    D && (D.path = e._addHierarchyInnerUrls(a, o, s, l, D.path, "AVATAR"));
                    var I = x.clipPaths;
                    if (I) for (h = 0, u = I.length; h < u; h++) I[h] = e._addHierarchyInnerUrls(a, o, s, l, I[h], "ANIMATIONCLIP"); else {
                        var R = x.layers;
                        for (h = 0; h < R.length; h++) for (var M = R[h].states, A = 0, C = M.length; A < C; A++) {
                            var L = M[A].clipPath;
                            L && (M[A].clipPath = e._addHierarchyInnerUrls(a, o, s, l, L, "ANIMATIONCLIP"));
                        }
                    }
                    break;

                  case "PhysicsCollider":
                  case "Rigidbody3D":
                  case "CharacterController":
                    var O = x.shapes;
                    for (h = 0; h < O.length; h++) {
                        var N = O[h];
                        if ("MeshColliderShape" === N.type) {
                            var V = N.mesh;
                            V && (N.mesh = e._addHierarchyInnerUrls(n, o, s, l, V, "MESH"));
                        }
                    }
                }
            }
            var w = t.child;
            for (h = 0, u = w.length; h < u; h++) e._getSprite3DHierarchyInnerUrls(w[h], n, i, r, a, o, s, l);
        }, e._loadHierarchy = function(t) {
            t.on("loaded", null, e._onHierarchylhLoaded, [ t ]), t.load(t.url, "json", !1, null, !0);
        }, e._onHierarchylhLoaded = function(t, n) {
            var i = t.url, r = kt.getURLVerion(i), a = b.getPath(i), o = [], s = [], l = [], h = [], u = [];
            e._getSprite3DHierarchyInnerUrls(n.data, o, s, l, h, u, r, a);
            var c = o.length + s.length + h.length, _ = c + 1, d = 1 / _;
            if (e._onProcessChange(t, 0, d, 1), h.length > 0) {
                var f = c / _, m = E.create(null, e._onProcessChange, [ t, d, f ], !1);
                e._innerFourthLevelLoaderManager._create(h, !1, E.create(null, e._onHierarchyInnerForthLevResouLoaded, [ t, m, n, u, o, s, l, d + f * h.length, f ]), m, null, null, null, 1, !0);
            } else e._onHierarchyInnerForthLevResouLoaded(t, null, n, u, o, s, l, d, f);
        }, e._onHierarchyInnerForthLevResouLoaded = function(t, n, i, r, a, o, s, l, h) {
            if (n && n.recover(), s.length > 0) {
                var u = E.create(null, e._onProcessChange, [ t, l, h ], !1);
                e._innerThirdLevelLoaderManager._create(s, !1, E.create(null, e._onHierarchyInnerThirdLevResouLoaded, [ t, u, i, r, a, o, l + h * o.length, h ]), n, null, null, null, 1, !0);
            } else e._onHierarchyInnerThirdLevResouLoaded(t, null, i, r, a, o, l, h);
        }, e._onHierarchyInnerThirdLevResouLoaded = function(t, n, i, r, a, o, s, l) {
            if (n && n.recover(), o.length > 0) {
                var h = E.create(null, e._onProcessChange, [ t, s, l ], !1);
                e._innerSecondLevelLoaderManager._create(o, !1, E.create(null, e._onHierarchyInnerSecondLevResouLoaded, [ t, h, i, r, a, s + l * o.length, l ]), n, null, null, null, 1, !0);
            } else e._onHierarchyInnerSecondLevResouLoaded(t, null, i, r, a, s, l);
        }, e._onHierarchyInnerSecondLevResouLoaded = function(t, n, i, r, a, o, s) {
            if (n && n.recover(), a.length > 0) {
                var l = E.create(null, e._onProcessChange, [ t, o, s ], !1);
                e._innerFirstLevelLoaderManager._create(a, !1, E.create(null, e._onHierarchyInnerFirstLevResouLoaded, [ t, l, i, r ]), n, null, null, null, 1, !0);
            } else e._onHierarchyInnerFirstLevResouLoaded(t, null, i, r);
        }, e._onHierarchyInnerFirstLevResouLoaded = function(t, n, i, r) {
            n && n.recover(), t._cache = t._createCache;
            var a = "Scene3D" === i.data.type ? Qn._parse(i, t._propertyParams, t._constructParams) : Fn._parse(i, t._propertyParams, t._constructParams);
            e._endLoad(t, a, r);
        }, e._loadMesh = function(t) {
            t.on("loaded", null, e._onMeshLmLoaded, [ t ]), t.load(t.url, "arraybuffer", !1, null, !0);
        }, e._onMeshLmLoaded = function(t, n) {
            t._cache = t._createCache;
            var i = Gn._parse(n, t._propertyParams, t._constructParams);
            e._endLoad(t, i);
        }, e._loadMaterial = function(t) {
            t.on("loaded", null, e._onMaterilLmatLoaded, [ t ]), t.load(t.url, "json", !1, null, !0);
        }, e._onMaterilLmatLoaded = function(t, n) {
            var i, r = t.url, a = kt.getURLVerion(r), o = b.getPath(r), s = [], l = [];
            switch (n.customProps, n.version) {
              case "LAYAMATERIAL:01":
              case "LAYAMATERIAL:02":
                var h = 0, u = 0, c = n.props.textures;
                if (c) for (h = 0, u = c.length; h < u; h++) {
                    var _ = c[h], d = _.path;
                    d && (i = e.formatRelativePath(o, d), a && (i += a), s.push({
                        url: i,
                        constructParams: _.constructParams,
                        propertyParams: _.propertyParams
                    }), l.push(i), _.path = i);
                }
                break;

              default:
                throw new Error("Laya3D:unkonwn version.");
            }
            var f = s.length, m = f + 1, p = 1 / m;
            if (e._onProcessChange(t, 0, p, 1), f > 0) {
                var T = E.create(null, e._onProcessChange, [ t, p, f / m ], !1);
                e._innerFourthLevelLoaderManager._create(s, !1, E.create(null, e._onMateialTexturesLoaded, [ t, T, n, l ]), T, null, null, null, 1, !0);
            } else e._onMateialTexturesLoaded(t, null, n, null);
        }, e._onMateialTexturesLoaded = function(t, n, i, r) {
            t._cache = t._createCache;
            var a = Bn._parse(i, t._propertyParams, t._constructParams);
            e._endLoad(t, a, r), n && n.recover();
        }, e._loadAvatar = function(t) {
            t.on("loaded", null, function(n) {
                t._cache = t._createCache;
                var i = zn._parse(n, t._propertyParams, t._constructParams);
                e._endLoad(t, i);
            }), t.load(t.url, "json", !1, null, !0);
        }, e._loadAnimationClip = function(t) {
            t.on("loaded", null, function(n) {
                t._cache = t._createCache;
                var i = kn._parse(n, t._propertyParams, t._constructParams);
                e._endLoad(t, i);
            }), t.load(t.url, "arraybuffer", !1, null, !0);
        }, e._loadTexture2D = function(t) {
            var n, i = t.url, r = i.lastIndexOf(".") + 1, a = i.indexOf("?"), o = -1 == a ? i.length : a;
            switch (i.substr(r, o - r)) {
              case "jpg":
              case "jpeg":
              case "bmp":
              case "gif":
              case "png":
                n = "nativeimage";
                break;

              case "dds":
              case "ktx":
              case "pvr":
                n = "arraybuffer";
            }
            t.on("loaded", null, function(n) {
                t._cache = t._createCache;
                var i = P._parse(n, t._propertyParams, t._constructParams);
                e._endLoad(t, i);
            }), t.load(t.url, n, !1, null, !0);
        }, e._loadTextureCube = function(t) {
            t.on("loaded", null, e._onTextureCubeLtcLoaded, [ t ]), t.load(t.url, "json", !1, null, !0);
        }, e._onTextureCubeLtcLoaded = function(t, n) {
            var i = b.getPath(t.url), r = [ e.formatRelativePath(i, n.front), e.formatRelativePath(i, n.back), e.formatRelativePath(i, n.left), e.formatRelativePath(i, n.right), e.formatRelativePath(i, n.up), e.formatRelativePath(i, n.down) ];
            e._onProcessChange(t, 0, 1 / 7, 1);
            var a = E.create(null, e._onProcessChange, [ t, 1 / 7, 6 / 7 ], !1);
            e._innerFourthLevelLoaderManager.load(r, E.create(null, e._onTextureCubeImagesLoaded, [ t, r, a ]), a, "nativeimage");
        }, e._onTextureCubeImagesLoaded = function(t, n, i) {
            for (var r = new Array(6), a = 0; a < 6; a++) r[a] = S.getRes(n[a]);
            t._cache = t._createCache;
            var o = Ti._parse(r, t._propertyParams, t._constructParams);
            for (i.recover(), a = 0; a < 6; a++) S.clearRes(n[a]);
            e._endLoad(t, o);
        }, e._onProcessChange = function(t, e, n, i) {
            (i = e + i * n) < 1 && t.event("progress", i);
        }, e.init = function(n, i, r, a) {
            if (!e._isInit) {
                e._isInit = !0, (r = r || ue._default).cloneTo(e._config), e._editerEnvironment = e._config._editerEnvironment;
                var o = t.Physics3D;
                null == o ? (e._enbalePhysics = !1, e.__init__(n, i, e._config), a && a.run()) : (e._enbalePhysics = !0, 
                o(1024 * e._config.defaultPhysicsMemory * 1024).then(function() {
                    e.__init__(n, i, e._config), a && a.run();
                }));
            }
        }, e.HIERARCHY = "HIERARCHY", e.MESH = "MESH", e.MATERIAL = "MATERIAL", e.TEXTURE2D = "TEXTURE2D", 
        e.TEXTURECUBE = "TEXTURECUBE", e.ANIMATIONCLIP = "ANIMATIONCLIP", e.AVATAR = "AVATAR", 
        e.TERRAINHEIGHTDATA = "TERRAINHEIGHTDATA", e.TERRAINRES = "TERRAIN", e._isInit = !1, 
        e._enbalePhysics = !1, e._editerEnvironment = !1, i(e, [ "_innerFirstLevelLoaderManager", function() {
            return this._innerFirstLevelLoaderManager = new y();
        }, "_innerSecondLevelLoaderManager", function() {
            return this._innerSecondLevelLoaderManager = new y();
        }, "_innerThirdLevelLoaderManager", function() {
            return this._innerThirdLevelLoaderManager = new y();
        }, "_innerFourthLevelLoaderManager", function() {
            return this._innerFourthLevelLoaderManager = new y();
        }, "_physics3D", function() {
            return this._physics3D = t.Physics3D;
        }, "_config", function() {
            return this._config = new ue();
        }, "physicsSettings", function() {
            return this.physicsSettings = new at();
        } ]), e;
    }(), Y = function() {
        function t() {
            this._type = 0, this._constant = 0, this._overTime = null, this._constantMin = 0, 
            this._constantMax = 0, this._overTimeMin = null, this._overTimeMax = null;
        }
        r(t, "laya.d3.core.particleShuriKen.module.FrameOverTime");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._type = this._type, e._constant = this._constant, this._overTime.cloneTo(e._overTime), 
            e._constantMin = this._constantMin, e._constantMax = this._constantMax, this._overTimeMin.cloneTo(e._overTimeMin), 
            this._overTimeMax.cloneTo(e._overTimeMax);
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "frameOverTimeData", function() {
            return this._overTime;
        }), a(0, e, "constant", function() {
            return this._constant;
        }), a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "frameOverTimeDataMin", function() {
            return this._overTimeMin;
        }), a(0, e, "constantMin", function() {
            return this._constantMin;
        }), a(0, e, "frameOverTimeDataMax", function() {
            return this._overTimeMax;
        }), a(0, e, "constantMax", function() {
            return this._constantMax;
        }), t.createByConstant = function(e) {
            var n = new t();
            return n._type = 0, n._constant = e, n;
        }, t.createByOverTime = function(e) {
            var n = new t();
            return n._type = 1, n._overTime = e, n;
        }, t.createByRandomTwoConstant = function(e, n) {
            var i = new t();
            return i._type = 2, i._constantMin = e, i._constantMax = n, i;
        }, t.createByRandomTwoOverTime = function(e, n) {
            var i = new t();
            return i._type = 3, i._overTimeMin = e, i._overTimeMax = n, i;
        }, t;
    }(), Z = function() {
        function t() {
            this.cull = 0, this.blend = 0, this.srcBlend = 0, this.dstBlend = 0, this.srcBlendRGB = 0, 
            this.dstBlendRGB = 0, this.srcBlendAlpha = 0, this.dstBlendAlpha = 0, this.blendConstColor = null, 
            this.blendEquation = 0, this.blendEquationRGB = 0, this.blendEquationAlpha = 0, 
            this.depthTest = 0, this.depthWrite = !1, this.cull = 2, this.blend = 0, this.srcBlend = 1, 
            this.dstBlend = 0, this.srcBlendRGB = 1, this.dstBlendRGB = 0, this.srcBlendAlpha = 1, 
            this.dstBlendAlpha = 0, this.blendConstColor = new mt(1, 1, 1, 1), this.blendEquation = 0, 
            this.blendEquationRGB = 0, this.blendEquationAlpha = 0, this.depthTest = 515, this.depthWrite = !0;
        }
        r(t, "laya.d3.core.material.RenderState");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e.cull = this.cull, e.blend = this.blend, e.srcBlend = this.srcBlend, e.dstBlend = this.dstBlend, 
            e.srcBlendRGB = this.srcBlendRGB, e.dstBlendRGB = this.dstBlendRGB, e.srcBlendAlpha = this.srcBlendAlpha, 
            e.dstBlendAlpha = this.dstBlendAlpha, this.blendConstColor.cloneTo(e.blendConstColor), 
            e.blendEquation = this.blendEquation, e.blendEquationRGB = this.blendEquationRGB, 
            e.blendEquationAlpha = this.blendEquationAlpha, e.depthTest = this.depthTest, e.depthWrite = this.depthWrite;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, t.CULL_NONE = 0, t.CULL_FRONT = 1, t.CULL_BACK = 2, t.BLEND_DISABLE = 0, t.BLEND_ENABLE_ALL = 1, 
        t.BLEND_ENABLE_SEPERATE = 2, t.BLENDPARAM_ZERO = 0, t.BLENDPARAM_ONE = 1, t.BLENDPARAM_SRC_COLOR = 768, 
        t.BLENDPARAM_ONE_MINUS_SRC_COLOR = 769, t.BLENDPARAM_DST_COLOR = 774, t.BLENDPARAM_ONE_MINUS_DST_COLOR = 775, 
        t.BLENDPARAM_SRC_ALPHA = 770, t.BLENDPARAM_ONE_MINUS_SRC_ALPHA = 771, t.BLENDPARAM_DST_ALPHA = 772, 
        t.BLENDPARAM_ONE_MINUS_DST_ALPHA = 773, t.BLENDPARAM_SRC_ALPHA_SATURATE = 776, t.BLENDEQUATION_ADD = 0, 
        t.BLENDEQUATION_SUBTRACT = 1, t.BLENDEQUATION_REVERSE_SUBTRACT = 2, t.DEPTHTEST_OFF = 0, 
        t.DEPTHTEST_NEVER = 512, t.DEPTHTEST_LESS = 513, t.DEPTHTEST_EQUAL = 514, t.DEPTHTEST_LEQUAL = 515, 
        t.DEPTHTEST_GREATER = 516, t.DEPTHTEST_NOTEQUAL = 517, t.DEPTHTEST_GEQUAL = 518, 
        t.DEPTHTEST_ALWAYS = 519, t;
    }(), j = function() {
        function t(t, e) {
            this.origin = null, this.direction = null, this.origin = t, this.direction = e;
        }
        return r(t, "laya.d3.math.Ray"), t;
    }(), K = function() {
        function t() {
            this._idCounter = 0, this.colliderA = null, this.colliderB = null, this.distance = 0, 
            this.normal = new Tt(), this.positionOnA = new Tt(), this.positionOnB = new Tt(), 
            this._id = ++this._idCounter;
        }
        return r(t, "laya.d3.physics.ContactPoint"), t;
    }(), q = function() {
        function t() {
            this._initBatchSprites = [], this._staticBatches = {}, this._batchRenderElementPoolIndex = 0, 
            this._batchRenderElementPool = [];
        }
        r(t, "laya.d3.graphics.StaticBatchManager");
        var e = t.prototype;
        return e._partition = function(t, e, n) {
            for (var i = t[Math.floor((n + e) / 2)]; e <= n; ) {
                for (;this._compare(t[e], i) < 0; ) e++;
                for (;this._compare(t[n], i) > 0; ) n--;
                if (e < n) {
                    var r = t[e];
                    t[e] = t[n], t[n] = r, e++, n--;
                } else if (e === n) {
                    e++;
                    break;
                }
            }
            return e;
        }, e._quickSort = function(t, e, n) {
            if (t.length > 1) {
                var i = this._partition(t, e, n), r = i - 1;
                e < r && this._quickSort(t, e, r), i < n && this._quickSort(t, i, n);
            }
        }, e._compare = function(t, e) {
            throw "StaticBatch:must override this function.";
        }, e._initStaticBatchs = function(t) {
            throw "StaticBatch:must override this function.";
        }, e._getBatchRenderElementFromPool = function() {
            throw "StaticBatch:must override this function.";
        }, e._addBatchSprite = function(t) {
            this._initBatchSprites.push(t);
        }, e._clear = function() {
            this._batchRenderElementPoolIndex = 0;
        }, e._garbageCollection = function() {
            throw "StaticBatchManager: must override it.";
        }, e.dispose = function() {
            this._staticBatches = null;
        }, t._registerManager = function(e) {
            t._managers.push(e);
        }, t._addToStaticBatchQueue = function(e, n) {
            e instanceof laya.d3.core.RenderableSprite3D && e.isStatic && n.push(e);
            for (var i = 0, r = e.numChildren; i < r; i++) t._addToStaticBatchQueue(e._children[i], n);
        }, t.combine = function(e, n) {
            n || (n = [], e && t._addToStaticBatchQueue(e, n));
            var i = n.length;
            if (i > 0) {
                for (var r = 0; r < i; r++) {
                    var a = n[r];
                    a.isStatic && a._addToInitStaticBatchManager();
                }
                for (var o = 0, s = t._managers.length; o < s; o++) t._managers[o]._initStaticBatchs(e);
            }
        }, t._managers = [], t;
    }(), Q = function() {
        function t() {}
        r(t, "laya.d3.core.render.command.Command");
        var e = t.prototype;
        return e.run = function() {}, e.recover = function() {}, t;
    }(), J = function() {
        function t() {}
        return r(t, "laya.d3.core.render.RenderContext3D"), t.clientWidth = 0, t.clientHeight = 0, 
        i(t, [ "_instance", function() {
            return this._instance = new t();
        } ]), t;
    }(), $ = (function() {
        function t() {}
        r(t, "laya.d3.core.GradientMode"), t.Blend = 0, t.Fixed = 1;
    }(), function() {
        function t() {
            this.length = 0, this.elements = [];
        }
        return r(t, "laya.d3.component.SingletonList"), t.prototype._add = function(t) {
            this.length === this.elements.length ? this.elements.push(t) : this.elements[this.length] = t;
        }, t;
    }()), tt = function() {
        function t() {
            this._batchRenderElementPool = [];
        }
        r(t, "laya.d3.graphics.DynamicBatchManager");
        var e = t.prototype;
        return e._clear = function() {
            this._batchRenderElementPoolIndex = 0;
        }, e._getBatchRenderElementFromPool = function() {
            throw "StaticBatch:must override this function.";
        }, e.dispose = function() {}, t._registerManager = function(e) {
            t._managers.push(e);
        }, t._managers = [], t;
    }(), et = (function() {
        function t() {
            this._damping = NaN, this._impulseClamp = NaN, this._tau = NaN, this._pivotInA = new Tt(), 
            this._pivotInB = new Tt();
        }
        r(t, "laya.d3.physics.constraints.Point2PointConstraint");
        var e = t.prototype;
        a(0, e, "pivotInA", function() {
            return this._pivotInA;
        }, function(t) {
            this._pivotInA = t;
        }), a(0, e, "pivotInB", function() {
            return this._pivotInB;
        }, function(t) {
            this._pivotInB = t;
        }), a(0, e, "damping", function() {
            return this._damping;
        }, function(t) {
            this._damping = t;
        }), a(0, e, "impulseClamp", function() {
            return this._impulseClamp;
        }, function(t) {
            this._impulseClamp = t;
        }), a(0, e, "tau", function() {
            return this._tau;
        }, function(t) {
            this._tau = t;
        });
    }(), function() {
        function t() {
            this._destroyed = !1;
        }
        r(t, "laya.d3.core.GeometryElement");
        var e = t.prototype;
        return n.imps(e, {
            "laya.resource.IDestroy": !0
        }), e._getType = function() {
            throw "GeometryElement:must override it.";
        }, e._prepareRender = function(t) {
            return !0;
        }, e._render = function(t) {
            throw "GeometryElement:must override it.";
        }, e.destroy = function() {
            this._destroyed || (this._destroyed = !0);
        }, a(0, e, "destroyed", function() {
            return this._destroyed;
        }), t._typeCounter = 0, t;
    }()), nt = function() {
        function t(t, e) {
            this._position = null, this._textureCoordinate0 = null, this._position = t, this._textureCoordinate0 = e;
        }
        r(t, "laya.d3.graphics.Vertex.VertexPositionTexture0");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.graphics.IVertex": !0
        }), a(0, e, "position", function() {
            return this._position;
        }), a(0, e, "textureCoordinate0", function() {
            return this._textureCoordinate0;
        }), a(0, e, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }), a(1, t, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }), i(t, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new fe(20, [ new zt(0, "vector3", 0), new zt(12, "vector2", 2) ]);
        } ]), t;
    }(), it = function() {
        function t() {}
        return r(t, "laya.d3.math.MathUtils3D"), t.isZero = function(e) {
            return Math.abs(e) < t.zeroTolerance;
        }, t.nearEqual = function(e, n) {
            return !!t.isZero(e - n);
        }, t.fastInvSqrt = function(e) {
            return t.isZero(e) ? e : 1 / Math.sqrt(e);
        }, i(t, [ "zeroTolerance", function() {
            return this.zeroTolerance = 1e-6;
        }, "MaxValue", function() {
            return this.MaxValue = 3.40282347e38;
        }, "MinValue", function() {
            return this.MinValue = -3.40282347e38;
        } ]), t;
    }(), rt = function() {
        function t() {
            this._type = 0, this._constant = null, this._constantMin = null, this._constantMax = null, 
            this._gradient = null, this._gradientMin = null, this._gradientMax = null;
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientColor");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._type = this._type, this._constant.cloneTo(e._constant), this._constantMin.cloneTo(e._constantMin), 
            this._constantMax.cloneTo(e._constantMax), this._gradient.cloneTo(e._gradient), 
            this._gradientMin.cloneTo(e._gradientMin), this._gradientMax.cloneTo(e._gradientMax);
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradient", function() {
            return this._gradient;
        }), a(0, e, "constant", function() {
            return this._constant;
        }), a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "gradientMin", function() {
            return this._gradientMin;
        }), a(0, e, "constantMin", function() {
            return this._constantMin;
        }), a(0, e, "gradientMax", function() {
            return this._gradientMax;
        }), a(0, e, "constantMax", function() {
            return this._constantMax;
        }), t.createByConstant = function(e) {
            var n = new t();
            return n._type = 0, n._constant = e, n;
        }, t.createByGradient = function(e) {
            var n = new t();
            return n._type = 1, n._gradient = e, n;
        }, t.createByRandomTwoConstant = function(e, n) {
            var i = new t();
            return i._type = 2, i._constantMin = e, i._constantMax = n, i;
        }, t.createByRandomTwoGradient = function(e, n) {
            var i = new t();
            return i._type = 3, i._gradientMin = e, i._gradientMax = n, i;
        }, t;
    }(), at = (function() {
        function t(t, e) {
            this._width = 0, this._height = 0, this._width = t, this._height = e;
        }
        r(t, "laya.d3.utils.Size");
        var e = t.prototype;
        a(0, e, "width", function() {
            return -1 === this._width ? J.clientWidth : this._width;
        }), a(0, e, "height", function() {
            return -1 === this._height ? J.clientHeight : this._height;
        }), a(1, t, "fullScreen", function() {
            return new t(-1, -1);
        });
    }(), function() {
        function t() {
            this.flags = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60;
        }
        return r(t, "laya.d3.physics.PhysicsSettings"), t;
    }()), ot = function() {
        function t(t, e) {
            this.normal = null, this.distance = NaN, void 0 === e && (e = 0), this.normal = t, 
            this.distance = e;
        }
        return r(t, "laya.d3.math.Plane"), t.prototype.normalize = function() {
            var t = this.normal.x, e = this.normal.y, n = this.normal.z, i = 1 / Math.sqrt(t * t + e * e + n * n);
            this.normal.x = t * i, this.normal.y = e * i, this.normal.z = n * i, this.distance *= i;
        }, t.createPlaneBy3P = function(e, n, i) {
            var r = n.x - e.x, a = n.y - e.y, o = n.z - e.z, s = i.x - e.x, l = i.y - e.y, h = i.z - e.z, u = a * h - o * l, c = o * s - r * h, _ = r * l - a * s, d = 1 / Math.sqrt(u * u + c * c + _ * _), f = u * d, m = c * d, p = _ * d;
            t._TEMPVec3.x = f, t._TEMPVec3.y = m, t._TEMPVec3.z = p;
            var T = -(f * e.x + m * e.y + p * e.z);
            return new t(t._TEMPVec3, T);
        }, t.PlaneIntersectionType_Back = 0, t.PlaneIntersectionType_Front = 1, t.PlaneIntersectionType_Intersecting = 2, 
        i(t, [ "_TEMPVec3", function() {
            return this._TEMPVec3 = new Tt();
        } ]), t;
    }(), st = function() {
        function t() {
            this.ambientColor = null, this.diffuseColor = null, this.specularColor = null;
        }
        return r(t, "laya.d3.terrain.unit.MaterialInfo"), t;
    }(), lt = function() {
        function t(t, e) {
            this._mode = 0, this._maxColorRGBKeysCount = 0, this._maxColorAlphaKeysCount = 0, 
            this._colorRGBKeysCount = 0, this._colorAlphaKeysCount = 0, this._alphaElements = null, 
            this._rgbElements = null, this._maxColorRGBKeysCount = t, this._maxColorAlphaKeysCount = e, 
            this._rgbElements = new Float32Array(4 * t), this._alphaElements = new Float32Array(2 * e);
        }
        r(t, "laya.d3.core.Gradient");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.addColorRGB = function(t, e) {
            if (this._colorRGBKeysCount < this._maxColorRGBKeysCount) {
                var n = 4 * this._colorRGBKeysCount;
                this._rgbElements[n] = t, this._rgbElements[n + 1] = e.r, this._rgbElements[n + 2] = e.g, 
                this._rgbElements[n + 3] = e.b, this._colorRGBKeysCount++;
            } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorRGBKeysCount);
        }, e.addColorAlpha = function(t, e) {
            if (this._colorAlphaKeysCount < this._maxColorAlphaKeysCount) {
                var n = 2 * this._colorAlphaKeysCount;
                this._alphaElements[n] = t, this._alphaElements[n + 1] = e, this._colorAlphaKeysCount++;
            } else console.warn("Gradient:warning:data count must lessEqual than " + this._maxColorAlphaKeysCount);
        }, e.updateColorRGB = function(t, e, n) {
            if (t < this._colorRGBKeysCount) {
                var i = 4 * t;
                this._rgbElements[i] = e, this._rgbElements[i + 1] = n.r, this._rgbElements[i + 2] = n.g, 
                this._rgbElements[i + 3] = n.b;
            } else console.warn("Gradient:warning:index must lessEqual than colorRGBKeysCount:" + this._colorRGBKeysCount);
        }, e.updateColorAlpha = function(t, e, n) {
            if (t < this._colorAlphaKeysCount) {
                var i = 2 * t;
                this._alphaElements[i] = e, this._alphaElements[i + 1] = n;
            } else console.warn("Gradient:warning:index must lessEqual than colorAlphaKeysCount:" + this._colorAlphaKeysCount);
        }, e.cloneTo = function(t) {
            var e = t, n = 0, i = 0;
            e._colorAlphaKeysCount = this._colorAlphaKeysCount;
            var r = e._alphaElements;
            for (r.length = this._alphaElements.length, n = 0, i = this._alphaElements.length; n < i; n++) r[n] = this._alphaElements[n];
            e._colorRGBKeysCount = this._colorRGBKeysCount;
            var a = e._rgbElements;
            for (a.length = this._rgbElements.length, n = 0, i = this._rgbElements.length; n < i; n++) a[n] = this._rgbElements[n];
        }, e.clone = function() {
            var e = new t(this._maxColorRGBKeysCount, this._maxColorAlphaKeysCount);
            return this.cloneTo(e), e;
        }, a(0, e, "colorRGBKeysCount", function() {
            return this._colorRGBKeysCount / 4;
        }), a(0, e, "mode", function() {
            return this._mode;
        }, function(t) {
            this._mode = t;
        }), a(0, e, "colorAlphaKeysCount", function() {
            return this._colorAlphaKeysCount / 2;
        }), a(0, e, "maxColorRGBKeysCount", function() {
            return this._maxColorRGBKeysCount;
        }), a(0, e, "maxColorAlphaKeysCount", function() {
            return this._maxColorAlphaKeysCount;
        }), t;
    }(), ht = function() {
        function t(t, e, n, i, r) {
            void 0 === t && (t = 0), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 1), 
            this.x = t, this.y = e, this.z = n, this.w = i;
        }
        r(t, "laya.d3.math.Quaternion");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.scaling = function(t, e) {
            e.x = this.x * t, e.y = this.y * t, e.z = this.z * t, e.w = this.w * t;
        }, e.normalize = function(t) {
            var e = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
            e > 0 && (e = 1 / Math.sqrt(e), t.x = this.x * e, t.y = this.y * e, t.z = this.z * e, 
            t.w = this.w * e);
        }, e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, e.rotateX = function(t, e) {
            t *= .5;
            var n = Math.sin(t), i = Math.cos(t);
            e.x = this.x * i + this.w * n, e.y = this.y * i + this.z * n, e.z = this.z * i - this.y * n, 
            e.w = this.w * i - this.x * n;
        }, e.rotateY = function(t, e) {
            t *= .5;
            var n = Math.sin(t), i = Math.cos(t);
            e.x = this.x * i - this.z * n, e.y = this.y * i + this.w * n, e.z = this.z * i + this.x * n, 
            e.w = this.w * i - this.y * n;
        }, e.rotateZ = function(t, e) {
            t *= .5;
            var n = Math.sin(t), i = Math.cos(t);
            e.x = this.x * i + this.y * n, e.y = this.y * i - this.x * n, e.z = this.z * i + this.w * n, 
            e.w = this.w * i - this.z * n;
        }, e.getYawPitchRoll = function(e) {
            Tt.transformQuat(Tt._ForwardRH, this, t.TEMPVector31), Tt.transformQuat(Tt._Up, this, t.TEMPVector32);
            var n = t.TEMPVector32;
            t.angleTo(Tt._ZERO, t.TEMPVector31, t.TEMPVector33);
            var i = t.TEMPVector33;
            i.x == Math.PI / 2 ? (i.y = t.arcTanAngle(n.z, n.x), i.z = 0) : i.x == -Math.PI / 2 ? (i.y = t.arcTanAngle(-n.z, -n.x), 
            i.z = 0) : (He.createRotationY(-i.y, t.TEMPMatrix0), He.createRotationX(-i.x, t.TEMPMatrix1), 
            Tt.transformCoordinate(t.TEMPVector32, t.TEMPMatrix0, t.TEMPVector32), Tt.transformCoordinate(t.TEMPVector32, t.TEMPMatrix1, t.TEMPVector32), 
            i.z = t.arcTanAngle(n.y, -n.x)), i.y <= -Math.PI && (i.y = Math.PI), i.z <= -Math.PI && (i.z = Math.PI), 
            i.y >= Math.PI && i.z >= Math.PI && (i.y = 0, i.z = 0, i.x = Math.PI - i.x);
            var r = e;
            r.x = i.y, r.y = i.x, r.z = i.z;
        }, e.invert = function(t) {
            var e = this.x, n = this.y, i = this.z, r = this.w, a = e * e + n * n + i * i + r * r, o = a ? 1 / a : 0;
            t.x = -e * o, t.y = -n * o, t.z = -i * o, t.w = r * o;
        }, e.identity = function() {
            this.x = 0, this.y = 0, this.z = 0, this.w = 1;
        }, e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.x = t[e + 0], this.y = t[e + 1], this.z = t[e + 2], 
            this.w = t[e + 3];
        }, e.cloneTo = function(t) {
            this !== t && (t.x = this.x, t.y = this.y, t.z = this.z, t.w = this.w);
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.equals = function(t) {
            return it.nearEqual(this.x, t.x) && it.nearEqual(this.y, t.y) && it.nearEqual(this.z, t.z) && it.nearEqual(this.w, t.w);
        }, e.lengthSquared = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, e.forNativeElement = function(t) {
            t ? (this.elements = t, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z, 
            this.elements[3] = this.w) : this.elements = new Float32Array([ this.x, this.y, this.z, this.w ]), 
            Et.rewriteNumProperty(this, "x", 0), Et.rewriteNumProperty(this, "y", 1), Et.rewriteNumProperty(this, "z", 2), 
            Et.rewriteNumProperty(this, "w", 3);
        }, t.createFromYawPitchRoll = function(t, e, n, i) {
            var r = .5 * n, a = .5 * e, o = .5 * t, s = Math.sin(r), l = Math.cos(r), h = Math.sin(a), u = Math.cos(a), c = Math.sin(o), _ = Math.cos(o);
            i.x = _ * h * l + c * u * s, i.y = c * u * l - _ * h * s, i.z = _ * u * s - c * h * l, 
            i.w = _ * u * l + c * h * s;
        }, t.multiply = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = t.w, s = e.x, l = e.y, h = e.z, u = e.w, c = r * h - a * l, _ = a * s - i * h, d = i * l - r * s, f = i * s + r * l + a * h;
            n.x = i * u + s * o + c, n.y = r * u + l * o + _, n.z = a * u + h * o + d, n.w = o * u - f;
        }, t.arcTanAngle = function(t, e) {
            return 0 == t ? 1 == e ? Math.PI / 2 : -Math.PI / 2 : t > 0 ? Math.atan(e / t) : t < 0 ? e > 0 ? Math.atan(e / t) + Math.PI : Math.atan(e / t) - Math.PI : 0;
        }, t.angleTo = function(e, n, i) {
            Tt.subtract(n, e, t.TEMPVector30), Tt.normalize(t.TEMPVector30, t.TEMPVector30), 
            i.x = Math.asin(t.TEMPVector30.y), i.y = t.arcTanAngle(-t.TEMPVector30.z, -t.TEMPVector30.x);
        }, t.createFromAxisAngle = function(t, e, n) {
            e *= .5;
            var i = Math.sin(e);
            n.x = i * t.x, n.y = i * t.y, n.z = i * t.z, n.w = Math.cos(e);
        }, t.createFromMatrix4x4 = function(t, e) {
            var n, i, r = t.elements, a = r[0] + r[5] + r[10];
            a > 0 ? (n = Math.sqrt(a + 1), e.w = .5 * n, n = .5 / n, e.x = (r[6] - r[9]) * n, 
            e.y = (r[8] - r[2]) * n, e.z = (r[1] - r[4]) * n) : r[0] >= r[5] && r[0] >= r[10] ? (i = .5 / (n = Math.sqrt(1 + r[0] - r[5] - r[10])), 
            e.x = .5 * n, e.y = (r[1] + r[4]) * i, e.z = (r[2] + r[8]) * i, e.w = (r[6] - r[9]) * i) : r[5] > r[10] ? (i = .5 / (n = Math.sqrt(1 + r[5] - r[0] - r[10])), 
            e.x = (r[4] + r[1]) * i, e.y = .5 * n, e.z = (r[9] + r[6]) * i, e.w = (r[8] - r[2]) * i) : (i = .5 / (n = Math.sqrt(1 + r[10] - r[0] - r[5])), 
            e.x = (r[8] + r[2]) * i, e.y = (r[9] + r[6]) * i, e.z = .5 * n, e.w = (r[1] - r[4]) * i);
        }, t.slerp = function(t, e, n, i) {
            var r, a, o, s, l, h = t.x, u = t.y, c = t.z, _ = t.w, d = e.x, f = e.y, m = e.z, p = e.w;
            return (a = h * d + u * f + c * m + _ * p) < 0 && (a = -a, d = -d, f = -f, m = -m, 
            p = -p), 1 - a > 1e-6 ? (r = Math.acos(a), o = Math.sin(r), s = Math.sin((1 - n) * r) / o, 
            l = Math.sin(n * r) / o) : (s = 1 - n, l = n), i.x = s * h + l * d, i.y = s * u + l * f, 
            i.z = s * c + l * m, i.w = s * _ + l * p, i;
        }, t.lerp = function(e, n, i, r) {
            var a = 1 - i;
            t.dot(e, n) >= 0 ? (r.x = a * e.x + i * n.x, r.y = a * e.y + i * n.y, r.z = a * e.z + i * n.z, 
            r.w = a * e.w + i * n.w) : (r.x = a * e.x - i * n.x, r.y = a * e.y - i * n.y, r.z = a * e.z - i * n.z, 
            r.w = a * e.w - i * n.w), r.normalize(r);
        }, t.add = function(t, e, n) {
            n.x = t.x + e.x, n.y = t.y + e.y, n.z = t.z + e.z, n.w = t.w + e.w;
        }, t.dot = function(t, e) {
            return t.x * e.x + t.y * e.y + t.z * e.z + t.w * e.w;
        }, t.rotationLookAt = function(e, n, i) {
            t.lookAt(Tt._ZERO, e, n, i);
        }, t.lookAt = function(e, n, i, r) {
            Be.lookAt(e, n, i, t._tempMatrix3x3), t.rotationMatrix(t._tempMatrix3x3, r);
        }, t.invert = function(t, e) {
            var n = t.lengthSquared();
            it.isZero(n) || (n = 1 / n, e.x = -t.x * n, e.y = -t.y * n, e.z = -t.z * n, e.w = t.w * n);
        }, t.rotationMatrix = function(t, e) {
            var n = t.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = n[4], l = n[5], h = n[6], u = n[7], c = n[8], _ = NaN, d = NaN, f = i + s + c;
            f > 0 ? (_ = Math.sqrt(f + 1), e.w = .5 * _, _ = .5 / _, e.x = (l - u) * _, e.y = (h - a) * _, 
            e.z = (r - o) * _) : i >= s && i >= c ? (d = .5 / (_ = Math.sqrt(1 + i - s - c)), 
            e.x = .5 * _, e.y = (r + o) * d, e.z = (a + h) * d, e.w = (l - u) * d) : s > c ? (d = .5 / (_ = Math.sqrt(1 + s - i - c)), 
            e.x = (o + r) * d, e.y = .5 * _, e.z = (u + l) * d, e.w = (h - a) * d) : (d = .5 / (_ = Math.sqrt(1 + c - i - s)), 
            e.x = (h + a) * d, e.y = (u + l) * d, e.z = .5 * _, e.w = (r - o) * d);
        }, t.DEFAULT = new t(), i(t, [ "TEMPVector30", function() {
            return this.TEMPVector30 = new Tt();
        }, "TEMPVector31", function() {
            return this.TEMPVector31 = new Tt();
        }, "TEMPVector32", function() {
            return this.TEMPVector32 = new Tt();
        }, "TEMPVector33", function() {
            return this.TEMPVector33 = new Tt();
        }, "TEMPMatrix0", function() {
            return this.TEMPMatrix0 = new He();
        }, "TEMPMatrix1", function() {
            return this.TEMPMatrix1 = new He();
        }, "_tempMatrix3x3", function() {
            return this._tempMatrix3x3 = new Be();
        }, "NAN", function() {
            return this.NAN = new t(NaN, NaN, NaN, NaN);
        } ]), t;
    }(), ut = function() {
        function t(t) {
            this._ownerResource = null, this._data = null, this._int32Data = null, this._float32Data = null, 
            this._nativeArray = null, this._frameCount = 0, this._runtimeCopyValues = [], this._ownerResource = t, 
            this._initData();
        }
        r(t, "laya.d3.shader.ShaderData");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e._initData = function() {
            this._data = new Object();
        }, e.getData = function() {
            return this._data;
        }, e.getBool = function(t) {
            return this._data[t];
        }, e.setBool = function(t, e) {
            this._data[t] = e;
        }, e.getInt = function(t) {
            return this._data[t];
        }, e.setInt = function(t, e) {
            this._data[t] = e;
        }, e.getNumber = function(t) {
            return this._data[t];
        }, e.setNumber = function(t, e) {
            this._data[t] = e;
        }, e.getVector2 = function(t) {
            return this._data[t];
        }, e.setVector2 = function(t, e) {
            this._data[t] = e;
        }, e.getVector3 = function(t) {
            return this._data[t];
        }, e.setVector3 = function(t, e) {
            this._data[t] = e;
        }, e.getVector = function(t) {
            return this._data[t];
        }, e.setVector = function(t, e) {
            this._data[t] = e;
        }, e.getQuaternion = function(t) {
            return this._data[t];
        }, e.setQuaternion = function(t, e) {
            this._data[t] = e;
        }, e.getMatrix4x4 = function(t) {
            return this._data[t];
        }, e.setMatrix4x4 = function(t, e) {
            this._data[t] = e;
        }, e.getBuffer = function(t) {
            return this._data[t];
        }, e.setBuffer = function(t, e) {
            this._data[t] = e;
        }, e.setTexture = function(t, e) {
            var n = this._data[t];
            this._data[t] = e, this._ownerResource && this._ownerResource.referenceCount > 0 && (n && n._removeReference(), 
            e && e._addReference());
        }, e.getTexture = function(t) {
            return this._data[t];
        }, e.setAttribute = function(t, e) {
            this._data[t] = e;
        }, e.getAttribute = function(t) {
            return this._data[t];
        }, e.getLength = function() {
            return this._data.length;
        }, e.setLength = function(t) {
            this._data.length = t;
        }, e.cloneTo = function(t) {
            var e = t._data;
            for (var n in this._data) {
                var i = this._data[n];
                if (null != i) if ("number" == typeof i) e[n] = i; else if ("number" == typeof i && Math.floor(i) == i) e[n] = i; else if ("boolean" == typeof i) e[n] = i; else if (i instanceof laya.d3.math.Vector2) {
                    var r = e[n] || (e[n] = new Et());
                    i.cloneTo(r), e[n] = r;
                } else if (i instanceof laya.d3.math.Vector3) {
                    var a = e[n] || (e[n] = new Tt());
                    i.cloneTo(a), e[n] = a;
                } else if (i instanceof laya.d3.math.Vector4) {
                    var o = e[n] || (e[n] = new mt());
                    i.cloneTo(o), e[n] = o;
                } else if (i instanceof laya.d3.math.Matrix4x4) {
                    var s = e[n] || (e[n] = new He());
                    i.cloneTo(s), e[n] = s;
                } else i instanceof laya.resource.BaseTexture && (e[n] = i);
            }
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.cloneToForNative = function(t) {
            var e = t;
            this._int32Data.length - e._int32Data.length > 0 && e.needRenewArrayBufferForNative(this._int32Data.length), 
            e._int32Data.set(this._int32Data, 0);
            var n = e._nativeArray, i = this._nativeArray.length;
            n.length = i;
            for (var r = 0; r < i; r++) {
                var a = this._nativeArray[r];
                if (a) if ("number" == typeof a) n[r] = a, e.setNumber(r, a); else if ("number" == typeof a && Math.floor(a) == a) n[r] = a, 
                e.setInt(r, a); else if ("boolean" == typeof a) n[r] = a, e.setBool(r, a); else if (a instanceof laya.d3.math.Vector2) {
                    var o = n[r] || (n[r] = new Et());
                    a.cloneTo(o), n[r] = o, e.setVector2(r, o);
                } else if (a instanceof laya.d3.math.Vector3) {
                    var s = n[r] || (n[r] = new Tt());
                    a.cloneTo(s), n[r] = s, e.setVector3(r, s);
                } else if (a instanceof laya.d3.math.Vector4) {
                    var l = n[r] || (n[r] = new mt());
                    a.cloneTo(l), n[r] = l, e.setVector(r, l);
                } else if (a instanceof laya.d3.math.Matrix4x4) {
                    var h = n[r] || (n[r] = new He());
                    a.cloneTo(h), n[r] = h, e.setMatrix4x4(r, h);
                } else a instanceof laya.resource.BaseTexture && (n[r] = a, e.setTexture(r, a));
            }
        }, e._initDataForNative = function() {
            this._frameCount = -1, this._runtimeCopyValues.length = 0, this._nativeArray = [], 
            this._data = new ArrayBuffer(32), this._int32Data = new Int32Array(this._data), 
            this._float32Data = new Float32Array(this._data), v.createArrayBufferRef(this._data, 0, !0);
        }, e.needRenewArrayBufferForNative = function(t) {
            if (t >= this._int32Data.length) {
                var e = 4 * (t + 1), n = this._int32Data, i = this._data.conchRef, r = this._data._ptrID;
                this._data = new ArrayBuffer(e), this._int32Data = new Int32Array(this._data), this._float32Data = new Float32Array(this._data), 
                this._data.conchRef = i, this._data._ptrID = r, n && this._int32Data.set(n, 0), 
                conch.updateArrayBufferRef(this._data._ptrID, i.isSyncToRender(), this._data);
            }
        }, e.getDataForNative = function() {
            return this._nativeArray;
        }, e.getIntForNative = function(t) {
            return this._int32Data[t];
        }, e.setIntForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._int32Data[t] = e, this._nativeArray[t] = e;
        }, e.getBoolForNative = function(t) {
            return 1 == this._int32Data[t];
        }, e.setBoolForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._int32Data[t] = e, this._nativeArray[t] = e;
        }, e.getNumberForNative = function(t) {
            return this._float32Data[t];
        }, e.setNumberForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._float32Data[t] = e, this._nativeArray[t] = e;
        }, e.getMatrix4x4ForNative = function(t) {
            return this._nativeArray[t];
        }, e.setMatrix4x4ForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._nativeArray[t] = e;
            var n = this.setReferenceForNative(e.elements);
            this._int32Data[t] = n;
        }, e.getVectorForNative = function(t) {
            return this._nativeArray[t];
        }, e.setVectorForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._nativeArray[t] = e, e.elements || e.forNativeElement();
            var n = this.setReferenceForNative(e.elements);
            this._int32Data[t] = n;
        }, e.getVector2ForNative = function(t) {
            return this._nativeArray[t];
        }, e.setVector2ForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._nativeArray[t] = e, e.elements || e.forNativeElement();
            var n = this.setReferenceForNative(e.elements);
            this._int32Data[t] = n;
        }, e.getVector3ForNative = function(t) {
            return this._nativeArray[t];
        }, e.setVector3ForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._nativeArray[t] = e, e.elements || e.forNativeElement();
            var n = this.setReferenceForNative(e.elements);
            this._int32Data[t] = n;
        }, e.getQuaternionForNative = function(t) {
            return this._nativeArray[t];
        }, e.setQuaternionForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._nativeArray[t] = e, e.elements || e.forNativeElement();
            var n = this.setReferenceForNative(e.elements);
            this._int32Data[t] = n;
        }, e.getBufferForNative = function(t) {
            return this._nativeArray[t];
        }, e.setBufferForNative = function(t, e) {
            this.needRenewArrayBufferForNative(t), this._nativeArray[t] = e;
            var n = this.setReferenceForNative(e);
            this._int32Data[t] = n;
        }, e.getAttributeForNative = function(t) {
            return this._nativeArray[t];
        }, e.setAttributeForNative = function(t, e) {
            this._nativeArray[t] = e, e._ptrID || v.createArrayBufferRef(e, 0, !0), v.syncBufferToRenderThread(e), 
            this._int32Data[t] = e._ptrID;
        }, e.getTextureForNative = function(t) {
            return this._nativeArray[t];
        }, e.setTextureForNative = function(t, e) {
            if (e) {
                this.needRenewArrayBufferForNative(t);
                var n = this._nativeArray[t];
                this._nativeArray[t] = e, this._int32Data[t] = e._glTexture.id, this._ownerResource && this._ownerResource.referenceCount > 0 && (n && n._removeReference(), 
                e && e._addReference());
            }
        }, e.setReferenceForNative = function(e) {
            this.clearRuntimeCopyArray();
            var n = 0, i = 0;
            return t._SET_RUNTIME_VALUE_MODE_REFERENCE_ ? (v.createArrayBufferRefs(e, 0, !0, 0), 
            n = 0, i = e.getPtrID(n)) : (v.createArrayBufferRefs(e, 0, !0, 1), n = e.getRefNum() - 1, 
            i = e.getPtrID(n), this._runtimeCopyValues.push({
                obj: e,
                refID: n,
                ptrID: i
            })), v.syncBufferToRenderThread(e, n), i;
        }, e.clearRuntimeCopyArray = function() {
            var t = v.getFrameCount();
            if (this._frameCount != t) {
                this._frameCount = t;
                for (var e = 0, n = this._runtimeCopyValues.length; e < n; e++) this._runtimeCopyValues[e].obj.clearRefNum();
                this._runtimeCopyValues.length = 0;
            }
        }, t.setRuntimeValueMode = function(e) {
            t._SET_RUNTIME_VALUE_MODE_REFERENCE_ = e;
        }, t._SET_RUNTIME_VALUE_MODE_REFERENCE_ = !0, t;
    }(), ct = function() {
        function t() {
            this._boundingSphere = null, this._boundingBox = null, this._sizeOfY = null, this._currentLODLevel = 0, 
            this._lastDistanceToEye = NaN, this._originalBoundingSphere = null, this._originalBoundingBox = null, 
            this._originalBoundingBoxCorners = null, this._bUseStrip = !1, this._gridSize = NaN, 
            this._beginGridX = 0, this._beginGridZ = 0, this._LODError = null, t.__init__(), 
            this._currentLODLevel = 0;
        }
        r(t, "laya.d3.terrain.TerrainLeaf");
        var e = t.prototype;
        return e.calcVertextNorml = function(e, n, i, r, a, o) {
            var s = 0, l = 0;
            l = -1 * t.getHeightFromTerrainHeightData(e - 1, n - 1, i, r, a), l += -1 * t.getHeightFromTerrainHeightData(e - 1, n, i, r, a), 
            l += -1 * t.getHeightFromTerrainHeightData(e - 1, n + 1, i, r, a), l += 1 * t.getHeightFromTerrainHeightData(e + 1, n - 1, i, r, a), 
            l += 1 * t.getHeightFromTerrainHeightData(e + 1, n, i, r, a), l += 1 * t.getHeightFromTerrainHeightData(e + 1, n + 1, i, r, a), 
            s = -1 * t.getHeightFromTerrainHeightData(e - 1, n - 1, i, r, a), s += -1 * t.getHeightFromTerrainHeightData(e, n - 1, i, r, a), 
            s += -1 * t.getHeightFromTerrainHeightData(e + 1, n - 1, i, r, a), s += 1 * t.getHeightFromTerrainHeightData(e - 1, n + 1, i, r, a), 
            s += 1 * t.getHeightFromTerrainHeightData(e, n + 1, i, r, a), s += 1 * t.getHeightFromTerrainHeightData(e + 1, n + 1, i, r, a), 
            o.x = -l, o.y = 6, o.z = -s, Tt.normalize(o, o);
        }, e.calcVertextNormlUV = function(t, e, n, i, r) {
            r.x = t / n, r.y = e / i, r.z = e / i;
        }, e.calcVertextBuffer = function(e, n, i, r, a, o, s, l, h, u, c, _) {
            if (1 == _ && !t.__ADAPT_MATRIX__) {
                t.__ADAPT_MATRIX__ = new He();
                var d = new He();
                He.createRotationY(Math.PI, t.__ADAPT_MATRIX__), He.createTranslate(new Tt(0, 0, (c - 1) * a), d), 
                He.multiply(d, t.__ADAPT_MATRIX__, t.__ADAPT_MATRIX__), t.__ADAPT_MATRIX_INV__ = new He(), 
                t.__ADAPT_MATRIX__.invert(t.__ADAPT_MATRIX_INV__);
            }
            this._gridSize = a, this._beginGridX = e * t.CHUNK_GRID_NUM + i, this._beginGridZ = n * t.CHUNK_GRID_NUM + r;
            for (var f = s * l, m = 2147483647, p = -2147483648, T = new Tt(), E = 0, v = t.LEAF_GRID_NUM + 1; E < v; E++) for (var g = 0, S = t.LEAF_GRID_NUM + 1; g < S; g++) t.__VECTOR3__.x = (this._beginGridX + g) * this._gridSize, 
            t.__VECTOR3__.z = (this._beginGridZ + E) * this._gridSize, t.__VECTOR3__.y = h[(this._beginGridZ + E) * u + (this._beginGridX + g)], 
            m = t.__VECTOR3__.y < m ? t.__VECTOR3__.y : m, p = t.__VECTOR3__.y > p ? t.__VECTOR3__.y : p, 
            t.__ADAPT_MATRIX__ && Tt.transformV3ToV3(t.__VECTOR3__, t.__ADAPT_MATRIX__, t.__VECTOR3__), 
            o[f] = t.__VECTOR3__.x, o[++f] = t.__VECTOR3__.y, o[++f] = t.__VECTOR3__.z, f++, 
            this.calcVertextNormlUV(this._beginGridX + g, this._beginGridZ + E, u, c, T), o[f] = T.x, 
            o[++f] = T.y, o[++f] = T.z, o[++f] = (i + g) / t.CHUNK_GRID_NUM, o[++f] = (r + E) / t.CHUNK_GRID_NUM, 
            o[++f] = this._beginGridX + g, o[++f] = this._beginGridZ + E, f++;
            this._sizeOfY = new Et(m - 1, p + 1), this.calcLODErrors(h, u, c), this.calcOriginalBoudingBoxAndSphere();
        }, e.calcSkirtVertextBuffer = function(e, n, i, r, a, o, s, l, h, u, c) {
            this._gridSize = a, this._beginGridX = e * t.CHUNK_GRID_NUM + i, this._beginGridZ = n * t.CHUNK_GRID_NUM + r;
            var _ = s * l, d = 0, f = 0, m = t.LEAF_GRID_NUM + 1, p = new Tt(), T = 0, E = 0;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) t.__VECTOR3__.x = (this._beginGridX + f) * this._gridSize, 
            t.__VECTOR3__.y = 1 == d ? h[this._beginGridZ * u + (this._beginGridX + f)] : -this._gridSize, 
            t.__VECTOR3__.z = (this._beginGridZ + 0) * this._gridSize, t.__ADAPT_MATRIX__ && Tt.transformV3ToV3(t.__VECTOR3__, t.__ADAPT_MATRIX__, t.__VECTOR3__), 
            o[_] = t.__VECTOR3__.x, o[++_] = t.__VECTOR3__.y, o[++_] = t.__VECTOR3__.z, _++, 
            T = 0 == d ? this._beginGridZ - 1 : this._beginGridZ, this.calcVertextNormlUV(this._beginGridX + f, T, u, c, p), 
            o[_] = p.x, o[++_] = p.y, o[++_] = p.z, o[++_] = (i + f) / t.CHUNK_GRID_NUM, o[++_] = (r + 0) / t.CHUNK_GRID_NUM, 
            o[++_] = this._beginGridX + f, o[++_] = T, _++;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) t.__VECTOR3__.x = (this._beginGridX + f) * this._gridSize, 
            t.__VECTOR3__.y = 0 == d ? h[(this._beginGridZ + t.LEAF_GRID_NUM) * u + (this._beginGridX + f)] : -this._gridSize, 
            t.__VECTOR3__.z = (this._beginGridZ + t.LEAF_GRID_NUM) * this._gridSize, t.__ADAPT_MATRIX__ && Tt.transformV3ToV3(t.__VECTOR3__, t.__ADAPT_MATRIX__, t.__VECTOR3__), 
            o[_] = t.__VECTOR3__.x, o[++_] = t.__VECTOR3__.y, o[++_] = t.__VECTOR3__.z, _++, 
            T = 0 == d ? this._beginGridZ + t.LEAF_GRID_NUM : this._beginGridZ + t.LEAF_GRID_NUM + 1, 
            this.calcVertextNormlUV(this._beginGridX + f, T, u, c, p), o[_] = p.x, o[++_] = p.y, 
            o[++_] = p.z, o[++_] = (i + f) / t.CHUNK_GRID_NUM, o[++_] = (r + t.LEAF_GRID_NUM) / t.CHUNK_GRID_NUM, 
            o[++_] = this._beginGridX + f, o[++_] = T, _++;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) t.__VECTOR3__.x = (this._beginGridX + 0) * this._gridSize, 
            t.__VECTOR3__.y = 0 == d ? h[(this._beginGridZ + f) * u + (this._beginGridX + 0)] : -this._gridSize, 
            t.__VECTOR3__.z = (this._beginGridZ + f) * this._gridSize, t.__ADAPT_MATRIX__ && Tt.transformV3ToV3(t.__VECTOR3__, t.__ADAPT_MATRIX__, t.__VECTOR3__), 
            o[_] = t.__VECTOR3__.x, o[++_] = t.__VECTOR3__.y, o[++_] = t.__VECTOR3__.z, _++, 
            E = 0 == d ? this._beginGridX : this._beginGridX - 1, this.calcVertextNormlUV(E, this._beginGridZ + f, u, c, p), 
            o[_] = p.x, o[++_] = p.y, o[++_] = p.z, o[++_] = (i + 0) / t.CHUNK_GRID_NUM, o[++_] = (r + f) / t.CHUNK_GRID_NUM, 
            o[++_] = E, o[++_] = this._beginGridZ + f, _++;
            for (d = 0; d < 2; d++) for (f = 0; f < m; f++) t.__VECTOR3__.x = (this._beginGridX + t.LEAF_GRID_NUM) * this._gridSize, 
            t.__VECTOR3__.y = 1 == d ? h[(this._beginGridZ + f) * u + (this._beginGridX + t.LEAF_GRID_NUM)] : -this._gridSize, 
            t.__VECTOR3__.z = (this._beginGridZ + f) * this._gridSize, t.__ADAPT_MATRIX__ && Tt.transformV3ToV3(t.__VECTOR3__, t.__ADAPT_MATRIX__, t.__VECTOR3__), 
            o[_] = t.__VECTOR3__.x, o[++_] = t.__VECTOR3__.y, o[++_] = t.__VECTOR3__.z, _++, 
            E = 0 == d ? this._beginGridX + t.LEAF_GRID_NUM + 1 : this._beginGridX + t.LEAF_GRID_NUM, 
            this.calcVertextNormlUV(E, this._beginGridZ + f, u, c, p), o[_] = p.x, o[++_] = p.y, 
            o[++_] = p.z, o[++_] = (i + t.LEAF_GRID_NUM) / t.CHUNK_GRID_NUM, o[++_] = (r + f) / t.CHUNK_GRID_NUM, 
            o[++_] = E, o[++_] = this._beginGridZ + f, _++;
        }, e.calcOriginalBoudingBoxAndSphere = function() {
            var e = new Tt(this._beginGridX * this._gridSize, this._sizeOfY.x, this._beginGridZ * this._gridSize), n = new Tt((this._beginGridX + t.LEAF_GRID_NUM) * this._gridSize, this._sizeOfY.y, (this._beginGridZ + t.LEAF_GRID_NUM) * this._gridSize);
            t.__ADAPT_MATRIX__ && (Tt.transformV3ToV3(e, t.__ADAPT_MATRIX__, e), Tt.transformV3ToV3(n, t.__ADAPT_MATRIX__, n)), 
            this._originalBoundingBox = new ze(e, n);
            var i = new Tt();
            Tt.subtract(n, e, i), Tt.scale(i, .5, i);
            var r = new Tt();
            Tt.add(e, i, r), this._originalBoundingSphere = new Mt(r, Tt.scalarLength(i)), this._originalBoundingBoxCorners = o(8, null), 
            this._originalBoundingBox.getCorners(this._originalBoundingBoxCorners), this._boundingBox = new ze(new Tt(-.5, -.5, -.5), new Tt(.5, .5, .5)), 
            this._boundingSphere = new Mt(new Tt(0, 0, 0), 1);
        }, e.calcLeafBoudingBox = function(t) {
            for (var e = 0; e < 8; e++) Tt.transformCoordinate(this._originalBoundingBoxCorners[e], t, We._tempBoundBoxCorners[e]);
            ze.createfromPoints(We._tempBoundBoxCorners, this._boundingBox);
        }, e.calcLeafBoudingSphere = function(t, e) {
            Tt.transformCoordinate(this._originalBoundingSphere.center, t, this._boundingSphere.center), 
            this._boundingSphere.radius = this._originalBoundingSphere.radius * e;
        }, e.calcLODErrors = function(e, n, i) {
            this._LODError = new Float32Array(t._maxLODLevel + 1);
            for (var r = 1, a = 0, o = t._maxLODLevel + 1; a < o; a++) {
                for (var s = 0, l = 0, h = t.LEAF_GRID_NUM; l < h; l += r) for (var u = 0, c = t.LEAF_GRID_NUM; u < c; u += r) for (var _ = e[(this._beginGridZ + l) * n + (this._beginGridX + u)], d = e[(this._beginGridZ + l) * n + (this._beginGridX + u) + r], f = e[(this._beginGridZ + l + r) * n + (this._beginGridX + u)], m = e[(this._beginGridZ + l + r) * n + (this._beginGridX + u) + r], p = 0; p < r; p++) for (var T = p / r, E = 0; E < r; E++) {
                    var v = E / r, g = e[(this._beginGridZ + l + p) * n + (this._beginGridX + u) + E], S = v + T <= 1 ? _ + (d - _) * v + (f - _) * T : m + (f - m) * (1 - v) + (d - m) * (1 - T), y = Math.abs(S - g);
                    s = Math.max(s, y);
                }
                r *= 2, this._LODError[a] = s;
            }
        }, e.determineLod = function(e, n, i, r) {
            var a = Tt.distance(e, this._boundingSphere.center), o = t._maxLODLevel;
            if (!r) {
                if (this._lastDistanceToEye == a) return this._currentLODLevel;
                this._lastDistanceToEye > a && (o = this._currentLODLevel);
            }
            for (var s = o; s >= 1; s--) if (ei.LOD_DISTANCE_FACTOR * this._LODError[s] / a * n < i) {
                this._currentLODLevel = s;
                break;
            }
            return this._lastDistanceToEye = a, this._currentLODLevel;
        }, t.__init__ = function() {
            if (!t._bInit) {
                var e = t.CHUNK_GRID_NUM / t.LEAF_GRID_NUM * (t.CHUNK_GRID_NUM / t.LEAF_GRID_NUM);
                t._planeLODIndex = o(e);
                var n = 0, i = 0, r = 0, a = 0, s = 0, l = 0, h = null, u = null;
                for (n = 0; n < e; n++) t._planeLODIndex[n] = new Array(t._maxLODLevel + 1);
                for (n = 0, a = t._maxLODLevel + 1; n < a; n++) t._planeLODIndex[0][n] = t.calcPlaneLODIndex(n);
                for (n = 1; n < e; n++) for (l = n * t.LEAF_PLANE_VERTEXT_COUNT, i = 0, s = t._maxLODLevel + 1; i < s; i++) {
                    for (h = t._planeLODIndex[0][i], u = new Uint16Array(h.length), r = 0; r < h.length; r++) u[r] = h[r] + l;
                    t._planeLODIndex[n][i] = u;
                }
                for (t._skirtLODIndex = o(e), n = 0; n < e; n++) t._skirtLODIndex[n] = new Array(t._maxLODLevel + 1);
                for (n = 0, a = t._maxLODLevel + 1; n < a; n++) t._skirtLODIndex[0][n] = t.calcSkirtLODIndex(n);
                for (n = 1; n < e; n++) for (l = n * t.LEAF_SKIRT_VERTEXT_COUNT, i = 0, s = t._maxLODLevel + 1; i < s; i++) {
                    for (h = t._skirtLODIndex[0][i], u = new Uint16Array(h.length), r = 0; r < h.length; r++) u[r] = h[r] + l;
                    t._skirtLODIndex[n][i] = u;
                }
                t._bInit = !0;
            }
        }, t.getPlaneLODIndex = function(e, n) {
            return t._planeLODIndex[e][n];
        }, t.getSkirtLODIndex = function(e, n) {
            return t._skirtLODIndex[e][n];
        }, t.calcPlaneLODIndex = function(e) {
            e > t._maxLODLevel && (e = t._maxLODLevel);
            var n = t.LEAF_GRID_NUM + 1, i = 0, r = null, a = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / Math.pow(2, e);
            r = new Uint16Array(a * a * 6);
            for (var o = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / a, s = 0; s < t.LEAF_GRID_NUM; s += o) for (var l = 0; l < t.LEAF_GRID_NUM; l += o) r[i] = (s + o) * n + l, 
            r[++i] = s * n + l, r[++i] = s * n + l + o, r[++i] = s * n + l + o, r[++i] = (s + o) * n + l + o, 
            r[++i] = (s + o) * n + l, i++;
            return r;
        }, t.calcSkirtLODIndex = function(e) {
            e > t._maxLODLevel && (e = t._maxLODLevel);
            var n = t.CHUNK_GRID_NUM / t.LEAF_GRID_NUM * (t.CHUNK_GRID_NUM / t.LEAF_GRID_NUM) * t.LEAF_PLANE_VERTEXT_COUNT, i = t.LEAF_GRID_NUM + 1, r = 0, a = null, o = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / Math.pow(2, e);
            a = new Uint16Array(4 * o * 6);
            for (var s = laya.d3.terrain.TerrainLeaf.LEAF_GRID_NUM / o, l = 0; l < 4; l++) {
                for (var h = 0; h < t.LEAF_GRID_NUM; h += s) a[r] = n + i + h, a[++r] = n + h, a[++r] = n + h + s, 
                a[++r] = n + h + s, a[++r] = n + i + h + s, a[++r] = n + i + h, r++;
                n += 2 * i;
            }
            return a;
        }, t.getHeightFromTerrainHeightData = function(t, e, n, i, r) {
            return t = t < 0 ? 0 : t, t = t >= i ? i - 1 : t, e = e < 0 ? 0 : e, e = e >= r ? r - 1 : e, 
            n[e * i + t];
        }, t.CHUNK_GRID_NUM = 64, t.LEAF_GRID_NUM = 32, t.__ADAPT_MATRIX__ = null, t.__ADAPT_MATRIX_INV__ = null, 
        t._planeLODIndex = null, t._skirtLODIndex = null, t._bInit = !1, i(t, [ "LEAF_PLANE_VERTEXT_COUNT", function() {
            return this.LEAF_PLANE_VERTEXT_COUNT = (t.LEAF_GRID_NUM + 1) * (t.LEAF_GRID_NUM + 1);
        }, "LEAF_SKIRT_VERTEXT_COUNT", function() {
            return this.LEAF_SKIRT_VERTEXT_COUNT = 2 * (t.LEAF_GRID_NUM + 1) * 4;
        }, "LEAF_VERTEXT_COUNT", function() {
            return this.LEAF_VERTEXT_COUNT = t.LEAF_PLANE_VERTEXT_COUNT + t.LEAF_SKIRT_VERTEXT_COUNT;
        }, "LEAF_PLANE_MAX_INDEX_COUNT", function() {
            return this.LEAF_PLANE_MAX_INDEX_COUNT = t.LEAF_GRID_NUM * t.LEAF_GRID_NUM * 6;
        }, "LEAF_SKIRT_MAX_INDEX_COUNT", function() {
            return this.LEAF_SKIRT_MAX_INDEX_COUNT = 4 * t.LEAF_GRID_NUM * 6;
        }, "LEAF_MAX_INDEX_COUNT", function() {
            return this.LEAF_MAX_INDEX_COUNT = t.LEAF_PLANE_MAX_INDEX_COUNT + t.LEAF_SKIRT_MAX_INDEX_COUNT;
        }, "__VECTOR3__", function() {
            return this.__VECTOR3__ = new Tt();
        }, "_maxLODLevel", function() {
            return this._maxLODLevel = Math.log2(t.LEAF_GRID_NUM);
        } ]), t;
    }(), _t = function() {
        function t() {}
        return r(t, "laya.d3.graphics.Vertex.VertexShuriKenParticle"), t.PARTICLE_CORNERTEXTURECOORDINATE0 = 0, 
        t.PARTICLE_POSITION0 = 1, t.PARTICLE_COLOR0 = 2, t.PARTICLE_TEXTURECOORDINATE0 = 3, 
        t.PARTICLE_SHAPEPOSITIONSTARTLIFETIME = 4, t.PARTICLE_DIRECTIONTIME = 5, t.PARTICLE_STARTCOLOR0 = 6, 
        t.PARTICLE_ENDCOLOR0 = 7, t.PARTICLE_STARTSIZE = 8, t.PARTICLE_STARTROTATION = 9, 
        t.PARTICLE_STARTSPEED = 10, t.PARTICLE_RANDOM0 = 11, t.PARTICLE_RANDOM1 = 12, t.PARTICLE_SIMULATIONWORLDPOSTION = 13, 
        t.PARTICLE_SIMULATIONWORLDROTATION = 14, t;
    }(), dt = function() {
        function t(t) {
            this._size = null, this.enbale = !1, this._size = t;
        }
        r(t, "laya.d3.core.particleShuriKen.module.SizeOverLifetime");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            this._size.cloneTo(e._size), e.enbale = this.enbale;
        }, e.clone = function() {
            var t;
            switch (this._size.type) {
              case 0:
                t = this._size.separateAxes ? Ee.createByGradientSeparate(this._size.gradientX.clone(), this._size.gradientY.clone(), this._size.gradientZ.clone()) : Ee.createByGradient(this._size.gradient.clone());
                break;

              case 1:
                t = this._size.separateAxes ? Ee.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(), this._size.constantMaxSeparate.clone()) : Ee.createByRandomTwoConstant(this._size.constantMin, this._size.constantMax);
                break;

              case 2:
                t = this._size.separateAxes ? Ee.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(), this._size.gradientYMin.clone(), this._size.gradientZMin.clone(), this._size.gradientXMax.clone(), this._size.gradientYMax.clone(), this._size.gradientZMax.clone()) : Ee.createByRandomTwoGradient(this._size.gradientMin.clone(), this._size.gradientMax.clone());
            }
            var e = new this.constructor(t);
            return e.enbale = this.enbale, e;
        }, a(0, e, "size", function() {
            return this._size;
        }), t;
    }(), ft = function() {
        function t() {
            this.time = NaN;
        }
        r(t, "laya.d3.core.Keyframe");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            t.time = this.time;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, t;
    }(), mt = function() {
        function t(t, e, n, i) {
            this.x = NaN, this.y = NaN, this.z = NaN, this.w = NaN, void 0 === t && (t = 0), 
            void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), this.x = t, 
            this.y = e, this.z = n, this.w = i;
        }
        r(t, "laya.d3.math.Vector4");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.setValue = function(t, e, n, i) {
            this.x = t, this.y = e, this.z = n, this.w = i;
        }, e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.x = t[e + 0], this.y = t[e + 1], this.z = t[e + 2], 
            this.w = t[e + 3];
        }, e.cloneTo = function(t) {
            var e = t;
            e.x = this.x, e.y = this.y, e.z = this.z, e.w = this.w;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.length = function() {
            return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        }, e.lengthSquared = function() {
            return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        }, e.forNativeElement = function(t) {
            t ? (this.elements = t, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z, 
            this.elements[3] = this.w) : this.elements = new Float32Array([ this.x, this.y, this.z, this.w ]), 
            Et.rewriteNumProperty(this, "x", 0), Et.rewriteNumProperty(this, "y", 1), Et.rewriteNumProperty(this, "z", 2), 
            Et.rewriteNumProperty(this, "w", 3);
        }, t.lerp = function(t, e, n, i) {
            var r = t.x, a = t.y, o = t.z, s = t.w;
            i.x = r + n * (e.x - r), i.y = a + n * (e.y - a), i.z = o + n * (e.z - o), i.w = s + n * (e.w - s);
        }, t.transformByM4x4 = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = t.w, s = e.elements;
            n.x = i * s[0] + r * s[4] + a * s[8] + o * s[12], n.y = i * s[1] + r * s[5] + a * s[9] + o * s[13], 
            n.z = i * s[2] + r * s[6] + a * s[10] + o * s[14], n.w = i * s[3] + r * s[7] + a * s[11] + o * s[15];
        }, t.equals = function(t, e) {
            return it.nearEqual(Math.abs(t.x), Math.abs(e.x)) && it.nearEqual(Math.abs(t.y), Math.abs(e.y)) && it.nearEqual(Math.abs(t.z), Math.abs(e.z)) && it.nearEqual(Math.abs(t.w), Math.abs(e.w));
        }, t.normalize = function(t, e) {
            var n = t.length();
            n > 0 && (e.x = t.x * n, e.y = t.y * n, e.z = t.z * n, e.w = t.w * n);
        }, t.add = function(t, e, n) {
            n.x = t.x + e.x, n.y = t.y + e.y, n.z = t.z + e.z, n.w = t.w + e.w;
        }, t.subtract = function(t, e, n) {
            n.x = t.x - e.x, n.y = t.y - e.y, n.z = t.z - e.z, n.w = t.w - e.w;
        }, t.multiply = function(t, e, n) {
            n.x = t.x * e.x, n.y = t.y * e.y, n.z = t.z * e.z, n.w = t.w * e.w;
        }, t.scale = function(t, e, n) {
            n.x = t.x * e, n.y = t.y * e, n.z = t.z * e, n.w = t.w * e;
        }, t.Clamp = function(t, e, n, i) {
            var r = t.x, a = t.y, o = t.z, s = t.w, l = e.x, h = e.y, u = e.z, c = e.w, _ = n.x, d = n.y, f = n.z, m = n.w;
            r = (r = r > _ ? _ : r) < l ? l : r, a = (a = a > d ? d : a) < h ? h : a, o = (o = o > f ? f : o) < u ? u : o, 
            s = (s = s > m ? m : s) < c ? c : s, i.x = r, i.y = a, i.z = o, i.w = s;
        }, t.distanceSquared = function(t, e) {
            var n = t.x - e.x, i = t.y - e.y, r = t.z - e.z, a = t.w - e.w;
            return n * n + i * i + r * r + a * a;
        }, t.distance = function(t, e) {
            var n = t.x - e.x, i = t.y - e.y, r = t.z - e.z, a = t.w - e.w;
            return Math.sqrt(n * n + i * i + r * r + a * a);
        }, t.dot = function(t, e) {
            return t.x * e.x + t.y * e.y + t.z * e.z + t.w * e.w;
        }, t.min = function(t, e, n) {
            n.x = Math.min(t.x, e.x), n.y = Math.min(t.y, e.y), n.z = Math.min(t.z, e.z), n.w = Math.min(t.w, e.w);
        }, t.max = function(t, e, n) {
            n.x = Math.max(t.x, e.x), n.y = Math.max(t.y, e.y), n.z = Math.max(t.z, e.z), n.w = Math.max(t.w, e.w);
        }, i(t, [ "ZERO", function() {
            return this.ZERO = new t();
        }, "ONE", function() {
            return this.ONE = new t(1, 1, 1, 1);
        }, "UnitX", function() {
            return this.UnitX = new t(1, 0, 0, 0);
        }, "UnitY", function() {
            return this.UnitY = new t(0, 1, 0, 0);
        }, "UnitZ", function() {
            return this.UnitZ = new t(0, 0, 1, 0);
        }, "UnitW", function() {
            return this.UnitW = new t(0, 0, 0, 1);
        } ]), t;
    }(), pt = function() {
        function t(t) {
            if (this._counter = 0, this.defines = {}, t) {
                this._counter = t._counter;
                for (var e in t.defines) this.defines[e] = t.defines[e];
            }
        }
        return r(t, "laya.d3.shader.ShaderDefines"), t.prototype.registerDefine = function(t) {
            var e = Math.pow(2, this._counter++);
            return this.defines[e] = t, e;
        }, t;
    }(), Tt = function() {
        function t(t, e, n, i) {
            this.x = NaN, this.y = NaN, this.z = NaN, void 0 === t && (t = 0), void 0 === e && (e = 0), 
            void 0 === n && (n = 0), this.x = t, this.y = e, this.z = n;
        }
        r(t, "laya.d3.math.Vector3");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.setValue = function(t, e, n) {
            this.x = t, this.y = e, this.z = n;
        }, e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.x = t[e + 0], this.y = t[e + 1], this.z = t[e + 2];
        }, e.cloneTo = function(t) {
            var e = t;
            e.x = this.x, e.y = this.y, e.z = this.z;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.toDefault = function() {
            this.x = 0, this.y = 0, this.z = 0;
        }, e.forNativeElement = function(t) {
            t ? (this.elements = t, this.elements[0] = this.x, this.elements[1] = this.y, this.elements[2] = this.z) : this.elements = new Float32Array([ this.x, this.y, this.z ]), 
            Et.rewriteNumProperty(this, "x", 0), Et.rewriteNumProperty(this, "y", 1), Et.rewriteNumProperty(this, "z", 2);
        }, t.distanceSquared = function(t, e) {
            var n = t.x - e.x, i = t.y - e.y, r = t.z - e.z;
            return n * n + i * i + r * r;
        }, t.distance = function(t, e) {
            var n = t.x - e.x, i = t.y - e.y, r = t.z - e.z;
            return Math.sqrt(n * n + i * i + r * r);
        }, t.min = function(t, e, n) {
            n.x = Math.min(t.x, e.x), n.y = Math.min(t.y, e.y), n.z = Math.min(t.z, e.z);
        }, t.max = function(t, e, n) {
            n.x = Math.max(t.x, e.x), n.y = Math.max(t.y, e.y), n.z = Math.max(t.z, e.z);
        }, t.transformQuat = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.x, s = e.y, l = e.z, h = e.w, u = h * i + s * a - l * r, c = h * r + l * i - o * a, _ = h * a + o * r - s * i, d = -o * i - s * r - l * a;
            n.x = u * h + d * -o + c * -l - _ * -s, n.y = c * h + d * -s + _ * -o - u * -l, 
            n.z = _ * h + d * -l + u * -s - c * -o;
        }, t.scalarLength = function(t) {
            var e = t.x, n = t.y, i = t.z;
            return Math.sqrt(e * e + n * n + i * i);
        }, t.scalarLengthSquared = function(t) {
            var e = t.x, n = t.y, i = t.z;
            return e * e + n * n + i * i;
        }, t.normalize = function(t, e) {
            var n = t.x, i = t.y, r = t.z, a = n * n + i * i + r * r;
            a > 0 && (a = 1 / Math.sqrt(a), e.x = t.x * a, e.y = t.y * a, e.z = t.z * a);
        }, t.multiply = function(t, e, n) {
            n.x = t.x * e.x, n.y = t.y * e.y, n.z = t.z * e.z;
        }, t.scale = function(t, e, n) {
            n.x = t.x * e, n.y = t.y * e, n.z = t.z * e;
        }, t.lerp = function(t, e, n, i) {
            var r = t.x, a = t.y, o = t.z;
            i.x = r + n * (e.x - r), i.y = a + n * (e.y - a), i.z = o + n * (e.z - o);
        }, t.transformV3ToV3 = function(e, n, i) {
            var r = t._tempVector4;
            t.transformV3ToV4(e, n, r), i.x = r.x, i.y = r.y, i.z = r.z;
        }, t.transformV3ToV4 = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.elements;
            n.x = i * o[0] + r * o[4] + a * o[8] + o[12], n.y = i * o[1] + r * o[5] + a * o[9] + o[13], 
            n.z = i * o[2] + r * o[6] + a * o[10] + o[14], n.w = i * o[3] + r * o[7] + a * o[11] + o[15];
        }, t.TransformNormal = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.elements;
            n.x = i * o[0] + r * o[4] + a * o[8], n.y = i * o[1] + r * o[5] + a * o[9], n.z = i * o[2] + r * o[6] + a * o[10];
        }, t.transformCoordinate = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.elements, s = i * o[3] + r * o[7] + a * o[11] + o[15];
            n.x = i * o[0] + r * o[4] + a * o[8] + o[12] / s, n.y = i * o[1] + r * o[5] + a * o[9] + o[13] / s, 
            n.z = i * o[2] + r * o[6] + a * o[10] + o[14] / s;
        }, t.Clamp = function(t, e, n, i) {
            var r = t.x, a = t.y, o = t.z, s = e.x, l = e.y, h = e.z, u = n.x, c = n.y, _ = n.z;
            r = (r = r > u ? u : r) < s ? s : r, a = (a = a > c ? c : a) < l ? l : a, o = (o = o > _ ? _ : o) < h ? h : o, 
            i.x = r, i.y = a, i.z = o;
        }, t.add = function(t, e, n) {
            n.x = t.x + e.x, n.y = t.y + e.y, n.z = t.z + e.z;
        }, t.subtract = function(t, e, n) {
            n.x = t.x - e.x, n.y = t.y - e.y, n.z = t.z - e.z;
        }, t.cross = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.x, s = e.y, l = e.z;
            n.x = r * l - a * s, n.y = a * o - i * l, n.z = i * s - r * o;
        }, t.dot = function(t, e) {
            return t.x * e.x + t.y * e.y + t.z * e.z;
        }, t.equals = function(t, e) {
            return it.nearEqual(t.x, e.x) && it.nearEqual(t.y, e.y) && it.nearEqual(t.z, e.z);
        }, t._ZERO = new t(0, 0, 0), t._ONE = new t(1, 1, 1), t._NegativeUnitX = new t(-1, 0, 0), 
        t._UnitX = new t(1, 0, 0), t._UnitY = new t(0, 1, 0), t._UnitZ = new t(0, 0, 1), 
        t._ForwardRH = new t(0, 0, -1), t._ForwardLH = new t(0, 0, 1), t._Up = new t(0, 1, 0), 
        i(t, [ "_tempVector4", function() {
            return this._tempVector4 = new mt();
        } ]), t;
    }(), Et = function() {
        function t(t, e) {
            this.x = NaN, this.y = NaN, void 0 === t && (t = 0), void 0 === e && (e = 0), this.x = t, 
            this.y = e;
        }
        r(t, "laya.d3.math.Vector2");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.setValue = function(t, e) {
            this.x = t, this.y = e;
        }, e.fromArray = function(t, e) {
            void 0 === e && (e = 0), this.x = t[e + 0], this.y = t[e + 1];
        }, e.cloneTo = function(t) {
            var e = t;
            e.x = this.x, e.y = this.y;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.forNativeElement = function(e) {
            e ? (this.elements = e, this.elements[0] = this.x, this.elements[1] = this.y) : this.elements = new Float32Array([ this.x, this.y ]), 
            t.rewriteNumProperty(this, "x", 0), t.rewriteNumProperty(this, "y", 1);
        }, t.scale = function(t, e, n) {
            n.x = t.x * e, n.y = t.y * e;
        }, t.dot = function(t, e) {
            return t.x * e.x + t.y * e.y;
        }, t.normalize = function(t, e) {
            var n = t.x, i = t.y, r = n * n + i * i;
            r > 0 && (r = 1 / Math.sqrt(r), e.x = n * r, e.y = i * r);
        }, t.scalarLength = function(t) {
            var e = t.x, n = t.y;
            return Math.sqrt(e * e + n * n);
        }, t.rewriteNumProperty = function(t, e, n) {
            Object.defineProperty(t, e, {
                get: function() {
                    return this.elements[n];
                },
                set: function(t) {
                    this.elements[n] = t;
                }
            });
        }, i(t, [ "ZERO", function() {
            return this.ZERO = new t(0, 0);
        }, "ONE", function() {
            return this.ONE = new t(1, 1);
        } ]), t;
    }(), vt = function() {
        function t() {}
        r(t, "laya.d3.component.AnimatorPlayState");
        var e = t.prototype;
        return e._resetPlayState = function(t) {
            this._finish = !1, this._startPlayTime = t, this._elapsedTime = t, this._playEventIndex = 0, 
            this._lastIsFront = !0;
        }, e._cloneTo = function(t) {
            t._finish = this._finish, t._startPlayTime = this._startPlayTime, t._elapsedTime = this._elapsedTime, 
            t._playEventIndex = this._playEventIndex, t._lastIsFront = this._lastIsFront;
        }, a(0, e, "normalizedTime", function() {
            return this._normalizedTime;
        }), a(0, e, "duration", function() {
            return this._duration;
        }), t;
    }(), gt = function() {
        function t(t) {
            this._velocity = null, this.enbale = !1, this.space = 0, this._velocity = t;
        }
        r(t, "laya.d3.core.particleShuriKen.module.VelocityOverLifetime");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            this._velocity.cloneTo(e._velocity), e.enbale = this.enbale, e.space = this.space;
        }, e.clone = function() {
            var t;
            switch (this._velocity.type) {
              case 0:
                t = ye.createByConstant(this._velocity.constant.clone());
                break;

              case 1:
                t = ye.createByGradient(this._velocity.gradientX.clone(), this._velocity.gradientY.clone(), this._velocity.gradientZ.clone());
                break;

              case 2:
                t = ye.createByRandomTwoConstant(this._velocity.constantMin.clone(), this._velocity.constantMax.clone());
                break;

              case 3:
                t = ye.createByRandomTwoGradient(this._velocity.gradientXMin.clone(), this._velocity.gradientYMin.clone(), this._velocity.gradientZMin.clone(), this._velocity.gradientXMax.clone(), this._velocity.gradientYMax.clone(), this._velocity.gradientZMax.clone());
            }
            var e = new this.constructor(t);
            return e.enbale = this.enbale, e.space = this.space, e;
        }, a(0, e, "velocity", function() {
            return this._velocity;
        }), t;
    }(), St = function() {
        function t() {}
        return r(t, "laya.d3.loaders.MeshReader"), t.read = function(t, e, n) {
            var i = new c(t);
            i.pos = 0;
            var r = i.readUTFString();
            switch (r) {
              case "LAYAMODEL:0301":
              case "LAYAMODEL:0400":
              case "LAYAMODEL:0401":
                Dt.parse(i, r, e, n);
                break;

              case "LAYAMODEL:05":
              case "LAYAMODEL:COMPRESSION_05":
                yt.parse(i, r, e, n);
                break;

              default:
                throw new Error("MeshReader: unknown mesh version.");
            }
            e._setSubMeshes(n);
        }, t;
    }(), yt = (function() {
        r(function() {}, "laya.d3.core.scene.SceneManager");
    }(), function() {
        function t() {}
        r(t, "laya.d3.math.ContainmentType"), t.Disjoint = 0, t.Contains = 1, t.Intersects = 2;
    }(), function() {
        function t() {}
        return r(t, "laya.d3.loaders.LoadModelV05"), t.parse = function(e, n, i, r) {
            t._mesh = i, t._subMeshes = r, t._version = n, t._readData = e, t.READ_DATA(), t.READ_BLOCK(), 
            t.READ_STRINGS();
            for (var a = 0, o = t._BLOCK.count; a < o; a++) {
                t._readData.pos = t._BLOCK.blockStarts[a];
                var s = t._readData.getUint16(), l = t._strings[s], h = t["READ_" + l];
                if (null == h) throw new Error("model file err,no this function:" + s + " " + l);
                h.call(null);
            }
            t._mesh._bindPoseIndices = new Uint16Array(t._bindPoseIndices), t._bindPoseIndices.length = 0, 
            t._strings.length = 0, t._readData = null, t._version = null, t._mesh = null, t._subMeshes = null;
        }, t._readString = function() {
            return t._strings[t._readData.getUint16()];
        }, t.READ_DATA = function() {
            t._DATA.offset = t._readData.getUint32(), t._DATA.size = t._readData.getUint32();
        }, t.READ_BLOCK = function() {
            for (var e = t._BLOCK.count = t._readData.getUint16(), n = t._BLOCK.blockStarts = [], i = t._BLOCK.blockLengths = [], r = 0; r < e; r++) n.push(t._readData.getUint32()), 
            i.push(t._readData.getUint32());
        }, t.READ_STRINGS = function() {
            var e = t._readData.getUint32(), n = t._readData.getUint16(), i = t._readData.pos;
            t._readData.pos = e + t._DATA.offset;
            for (var r = 0; r < n; r++) t._strings[r] = t._readData.readUTFString();
            t._readData.pos = i;
        }, t.READ_MESH = function() {
            var e = 0, n = 0, i = (t._readString(), t._readData.__getBuffer()), r = t._readData.getInt16(), a = t._DATA.offset;
            for (e = 0; e < r; e++) {
                var s = a + t._readData.getUint32(), l = t._readData.getUint32(), h = t._readString(), u = It.getVertexDeclaration(h, !1), c = u.vertexStride, _ = new ArrayBuffer(c * l), d = new Float32Array(_), f = h.split(","), m = f.length;
                switch (t._version) {
                  case "LAYAMODEL:05":
                    d = new Float32Array(i.slice(s, s + l * c));
                    break;

                  case "LAYAMODEL:COMPRESSION_05":
                    var p = t._readData.pos;
                    d = new Float32Array(_);
                    var T = new Uint8Array(_);
                    t._readData.pos = s;
                    for (var E = 0; E < l; E++) for (var v = 0, g = E * c, S = 0; S < m; S++) switch (f[S]) {
                      case "POSITION":
                        d[v = g / 4] = Ct.convertToNumber(t._readData.getUint16()), d[v + 1] = Ct.convertToNumber(t._readData.getUint16()), 
                        d[v + 2] = Ct.convertToNumber(t._readData.getUint16()), g += 12;
                        break;

                      case "NORMAL":
                        d[v = g / 4] = t._readData.getUint8() / 127.5 - 1, d[v + 1] = t._readData.getUint8() / 127.5 - 1, 
                        d[v + 2] = t._readData.getUint8() / 127.5 - 1, g += 12;
                        break;

                      case "COLOR":
                        d[v = g / 4] = t._readData.getUint8() / 255, d[v + 1] = t._readData.getUint8() / 255, 
                        d[v + 2] = t._readData.getUint8() / 255, d[v + 3] = t._readData.getUint8() / 255, 
                        g += 16;
                        break;

                      case "UV":
                      case "UV1":
                        d[v = g / 4] = Ct.convertToNumber(t._readData.getUint16()), d[v + 1] = Ct.convertToNumber(t._readData.getUint16()), 
                        g += 8;
                        break;

                      case "BLENDWEIGHT":
                        d[v = g / 4] = t._readData.getUint8() / 255, d[v + 1] = t._readData.getUint8() / 255, 
                        d[v + 2] = t._readData.getUint8() / 255, d[v + 3] = t._readData.getUint8() / 255, 
                        g += 16;
                        break;

                      case "BLENDINDICES":
                        T[g] = t._readData.getUint8(), T[g + 1] = t._readData.getUint8(), T[g + 2] = t._readData.getUint8(), 
                        T[g + 3] = t._readData.getUint8(), g += 4;
                        break;

                      case "TANGENT":
                        d[v = g / 4] = t._readData.getUint8() / 127.5 - 1, d[v + 1] = t._readData.getUint8() / 127.5 - 1, 
                        d[v + 2] = t._readData.getUint8() / 127.5 - 1, d[v + 3] = t._readData.getUint8() / 127.5 - 1, 
                        g += 16;
                    }
                    t._readData.pos = p;
                }
                var y = new Ke(_.byteLength, 35044, !0);
                y.vertexDeclaration = u, y.setData(d), t._mesh._vertexBuffers.push(y), t._mesh._vertexCount += y.vertexCount, 
                n += 4 * d.length;
            }
            var x = a + t._readData.getUint32(), D = t._readData.getUint32(), I = new Uint16Array(i.slice(x, x + D)), R = new qe("ushort", D / 2, 35044, !0);
            R.setData(I), t._mesh._indexBuffer = R, t._mesh._setBuffer(t._mesh._vertexBuffers, R), 
            n += 2 * R.indexCount, t._mesh._setCPUMemory(n), t._mesh._setGPUMemory(n);
            var M = t._mesh._boneNames = [], A = t._readData.getUint16();
            for (M.length = A, e = 0; e < A; e++) M[e] = t._strings[t._readData.getUint16()];
            var C = t._readData.getUint32(), L = t._readData.getUint32(), O = new Float32Array(i.slice(a + C, a + C + L)), N = O.length, V = N / 16, w = t._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * N);
            for (t._mesh._inverseBindPoses = o(V), e = 0; e < N; e += 16) {
                var P = new He(O[e + 0], O[e + 1], O[e + 2], O[e + 3], O[e + 4], O[e + 5], O[e + 6], O[e + 7], O[e + 8], O[e + 9], O[e + 10], O[e + 11], O[e + 12], O[e + 13], O[e + 14], O[e + 15], new Float32Array(w, 4 * e, 16));
                t._mesh._inverseBindPoses[e / 16] = P;
            }
            return !0;
        }, t.READ_SUBMESH = function() {
            var e = t._readData.__getBuffer(), n = new on(t._mesh), i = t._readData.getInt16(), r = t._readData.getUint32(), a = t._readData.getUint32(), o = t._mesh._indexBuffer;
            n._indexBuffer = o, n._indexStart = r, n._indexCount = a, n._indices = new Uint16Array(o.getData().buffer, 2 * r, a);
            var s = t._mesh._vertexBuffers[i];
            n._vertexBuffer = s;
            var l = t._DATA.offset, h = n._subIndexBufferStart, u = n._subIndexBufferCount, c = n._boneIndicesList, _ = t._readData.getUint16();
            h.length = _, u.length = _, c.length = _;
            for (var d = t._mesh._skinDataPathMarks, f = t._bindPoseIndices, m = t._subMeshes.length, p = 0; p < _; p++) {
                h[p] = t._readData.getUint32(), u[p] = t._readData.getUint32();
                for (var T = t._readData.getUint32(), E = t._readData.getUint32(), v = c[p] = new Uint16Array(e.slice(l + T, l + T + E)), g = 0, S = v.length; g < S; g++) {
                    var y = v[g], x = f.indexOf(y);
                    -1 === x ? (v[g] = f.length, f.push(y), d.push([ m, p, g ])) : v[g] = x;
                }
            }
            return t._subMeshes.push(n), !0;
        }, t._strings = [], t._readData = null, t._version = null, t._mesh = null, t._subMeshes = null, 
        t._bindPoseIndices = [], i(t, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), t;
    }()), xt = function() {
        function t(t, e, n, i) {
            this.r = NaN, this.g = NaN, this.b = NaN, this.a = NaN, void 0 === t && (t = 1), 
            void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === i && (i = 1), this.r = t, 
            this.g = e, this.b = n, this.a = i;
        }
        r(t, "laya.d3.math.Color");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.toLinear = function(t) {
            t.r = kt.gammaToLinearSpace(this.r), t.g = kt.gammaToLinearSpace(this.g), t.b = kt.gammaToLinearSpace(this.b);
        }, e.toGamma = function(t) {
            t.r = kt.linearToGammaSpace(this.r), t.g = kt.linearToGammaSpace(this.g), t.b = kt.linearToGammaSpace(this.b);
        }, e.cloneTo = function(t) {
            var e = t;
            e.r = this.r, e.g = this.g, e.b = this.b, e.a = this.a;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.forNativeElement = function(t) {
            t ? (this.elements = t, this.elements[0] = this.r, this.elements[1] = this.g, this.elements[2] = this.b, 
            this.elements[3] = this.a) : this.elements = new Float32Array([ this.r, this.g, this.b, this.a ]), 
            Et.rewriteNumProperty(this, "r", 0), Et.rewriteNumProperty(this, "g", 1), Et.rewriteNumProperty(this, "b", 2), 
            Et.rewriteNumProperty(this, "a", 3);
        }, i(t, [ "RED", function() {
            return this.RED = new t(1, 0, 0, 1);
        }, "GREEN", function() {
            return this.GREEN = new t(0, 1, 0, 1);
        }, "BLUE", function() {
            return this.BLUE = new t(0, 0, 1, 1);
        }, "CYAN", function() {
            return this.CYAN = new t(0, 1, 1, 1);
        }, "YELLOW", function() {
            return this.YELLOW = new t(1, .92, .016, 1);
        }, "MAGENTA", function() {
            return this.MAGENTA = new t(1, 0, 1, 1);
        }, "GRAY", function() {
            return this.GRAY = new t(.5, .5, .5, 1);
        }, "WHITE", function() {
            return this.WHITE = new t(1, 1, 1, 1);
        }, "BLACK", function() {
            return this.BLACK = new t(0, 0, 0, 1);
        } ]), t;
    }(), Dt = function() {
        function t() {}
        return r(t, "laya.d3.loaders.LoadModelV04"), t.parse = function(e, n, i, r) {
            t._mesh = i, t._subMeshes = r, t._version = n, t._readData = e, t.READ_DATA(), t.READ_BLOCK(), 
            t.READ_STRINGS();
            for (var a = 0, o = t._BLOCK.count; a < o; a++) {
                t._readData.pos = t._BLOCK.blockStarts[a];
                var s = t._readData.getUint16(), l = t._strings[s], h = t["READ_" + l];
                if (null == h) throw new Error("model file err,no this function:" + s + " " + l);
                h.call(null);
            }
            t._mesh._bindPoseIndices = new Uint16Array(t._bindPoseIndices), t._bindPoseIndices.length = 0, 
            t._strings.length = 0, t._readData = null, t._version = null, t._mesh = null, t._subMeshes = null;
        }, t._readString = function() {
            return t._strings[t._readData.getUint16()];
        }, t.READ_DATA = function() {
            t._DATA.offset = t._readData.getUint32(), t._DATA.size = t._readData.getUint32();
        }, t.READ_BLOCK = function() {
            for (var e = t._BLOCK.count = t._readData.getUint16(), n = t._BLOCK.blockStarts = [], i = t._BLOCK.blockLengths = [], r = 0; r < e; r++) n.push(t._readData.getUint32()), 
            i.push(t._readData.getUint32());
        }, t.READ_STRINGS = function() {
            var e = t._readData.getUint32(), n = t._readData.getUint16(), i = t._readData.pos;
            t._readData.pos = e + t._DATA.offset;
            for (var r = 0; r < n; r++) t._strings[r] = t._readData.readUTFString();
            t._readData.pos = i;
        }, t.READ_MESH = function() {
            t._readString();
            var e = t._readData.__getBuffer(), n = 0, i = 0, r = t._readData.getInt16(), a = t._DATA.offset;
            for (n = 0; n < r; n++) {
                var s, l = a + t._readData.getUint32(), h = t._readData.getUint32(), u = new Float32Array(e.slice(l, l + h)), c = t._readString();
                switch (t._version) {
                  case "LAYAMODEL:0301":
                  case "LAYAMODEL:0400":
                    s = It.getVertexDeclaration(c);
                    break;

                  case "LAYAMODEL:0401":
                    s = It.getVertexDeclaration(c, !1);
                    break;

                  default:
                    throw new Error("LoadModelV03: unknown version.");
                }
                if (!s) throw new Error("LoadModelV03: unknown vertexDeclaration.");
                var _ = new Ke(4 * u.length, 35044, !0);
                _.vertexDeclaration = s, _.setData(u), t._mesh._vertexBuffers.push(_), t._mesh._vertexCount += _.vertexCount, 
                i += 4 * u.length;
            }
            var d = a + t._readData.getUint32(), f = t._readData.getUint32(), m = new Uint16Array(e.slice(d, d + f)), p = new qe("ushort", f / 2, 35044, !0);
            p.setData(m), t._mesh._indexBuffer = p, i += 2 * p.indexCount, t._mesh._setBuffer(t._mesh._vertexBuffers, p), 
            t._mesh._setCPUMemory(i), t._mesh._setGPUMemory(i);
            var T = t._mesh._boneNames = [], E = t._readData.getUint16();
            for (T.length = E, n = 0; n < E; n++) T[n] = t._strings[t._readData.getUint16()];
            t._readData.pos += 8;
            var v = t._readData.getUint32(), g = t._readData.getUint32(), S = new Float32Array(e.slice(a + v, a + v + g)), y = S.length, x = y / 16, D = t._mesh._inverseBindPosesBuffer = new ArrayBuffer(4 * y);
            for (t._mesh._inverseBindPoses = o(x), n = 0; n < y; n += 16) {
                var I = new He(S[n + 0], S[n + 1], S[n + 2], S[n + 3], S[n + 4], S[n + 5], S[n + 6], S[n + 7], S[n + 8], S[n + 9], S[n + 10], S[n + 11], S[n + 12], S[n + 13], S[n + 14], S[n + 15], new Float32Array(D, 4 * n, 16));
                t._mesh._inverseBindPoses[n / 16] = I;
            }
            return !0;
        }, t.READ_SUBMESH = function() {
            var e = t._readData.__getBuffer(), n = new on(t._mesh), i = t._readData.getInt16();
            t._readData.getUint32(), t._readData.getUint32();
            var r = t._readData.getUint32(), a = t._readData.getUint32(), o = t._mesh._indexBuffer;
            n._indexBuffer = o, n._indexStart = r, n._indexCount = a, n._indices = new Uint16Array(o.getData().buffer, 2 * r, a);
            var s = t._mesh._vertexBuffers[i];
            n._vertexBuffer = s;
            var l = t._DATA.offset, h = n._subIndexBufferStart, u = n._subIndexBufferCount, c = n._boneIndicesList, _ = t._readData.getUint16();
            h.length = _, u.length = _, c.length = _;
            for (var d = t._mesh._skinDataPathMarks, f = t._bindPoseIndices, m = t._subMeshes.length, p = 0; p < _; p++) {
                h[p] = t._readData.getUint32(), u[p] = t._readData.getUint32();
                for (var T = t._readData.getUint32(), E = t._readData.getUint32(), v = c[p] = new Uint16Array(e.slice(l + T, l + T + E)), g = 0, S = v.length; g < S; g++) {
                    var y = v[g], x = f.indexOf(y);
                    -1 === x ? (v[g] = f.length, f.push(y), d.push([ m, p, g ])) : v[g] = x;
                }
            }
            return t._subMeshes.push(n), !0;
        }, t._strings = [], t._readData = null, t._version = null, t._mesh = null, t._subMeshes = null, 
        t._bindPoseIndices = [], i(t, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), t;
    }(), It = function() {
        function t() {}
        return r(t, "laya.d3.graphics.Vertex.VertexMesh"), t.getVertexDeclaration = function(e, n) {
            void 0 === n && (n = !0);
            var i = t._vertexDeclarationMap[e + (n ? "_0" : "_1")];
            if (!i) {
                for (var r = e.split(","), a = 0, o = [], s = 0, l = r.length; s < l; s++) {
                    var h;
                    switch (r[s]) {
                      case "POSITION":
                        h = new zt(a, "vector3", 0), a += 12;
                        break;

                      case "NORMAL":
                        h = new zt(a, "vector3", 3), a += 12;
                        break;

                      case "COLOR":
                        h = new zt(a, "vector4", 1), a += 16;
                        break;

                      case "UV":
                        h = new zt(a, "vector2", 2), a += 8;
                        break;

                      case "UV1":
                        h = new zt(a, "vector2", 7), a += 8;
                        break;

                      case "BLENDWEIGHT":
                        h = new zt(a, "vector4", 6), a += 16;
                        break;

                      case "BLENDINDICES":
                        n ? (h = new zt(a, "vector4", 5), a += 16) : (h = new zt(a, "byte4", 5), a += 4);
                        break;

                      case "TANGENT":
                        h = new zt(a, "vector4", 4), a += 16;
                        break;

                      default:
                        throw "VertexMesh: unknown vertex flag.";
                    }
                    o.push(h);
                }
                i = new fe(a, o), t._vertexDeclarationMap[e + (n ? "_0" : "_1")] = i;
            }
            return i;
        }, t.MESH_POSITION0 = 0, t.MESH_COLOR0 = 1, t.MESH_TEXTURECOORDINATE0 = 2, t.MESH_NORMAL0 = 3, 
        t.MESH_TANGENT0 = 4, t.MESH_BLENDINDICES0 = 5, t.MESH_BLENDWEIGHT0 = 6, t.MESH_TEXTURECOORDINATE1 = 7, 
        t.MESH_WORLDMATRIX_ROW0 = 8, t.MESH_WORLDMATRIX_ROW1 = 9, t.MESH_WORLDMATRIX_ROW2 = 10, 
        t.MESH_WORLDMATRIX_ROW3 = 11, t.MESH_MVPMATRIX_ROW0 = 12, t.MESH_MVPMATRIX_ROW1 = 13, 
        t.MESH_MVPMATRIX_ROW2 = 14, t.MESH_MVPMATRIX_ROW3 = 15, t._vertexDeclarationMap = {}, 
        i(t, [ "instanceWorldMatrixDeclaration", function() {
            return this.instanceWorldMatrixDeclaration = new fe(64, [ new zt(0, "vector4", 8), new zt(16, "vector4", 9), new zt(32, "vector4", 10), new zt(48, "vector4", 11) ]);
        }, "instanceMVPMatrixDeclaration", function() {
            return this.instanceMVPMatrixDeclaration = new fe(64, [ new zt(0, "vector4", 12), new zt(16, "vector4", 13), new zt(32, "vector4", 14), new zt(48, "vector4", 15) ]);
        } ]), t;
    }(), Rt = function() {
        function t() {
            this._destroyed = !1, this._emissionRate = 0, this._bursts = null, this.enbale = !1, 
            this._destroyed = !1, this.emissionRate = 10, this._bursts = [];
        }
        r(t, "laya.d3.core.particleShuriKen.module.Emission");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0,
            "laya.resource.IDestroy": !0
        }), e.destroy = function() {
            this._bursts = null, this._destroyed = !0;
        }, e.getBurstsCount = function() {
            return this._bursts.length;
        }, e.getBurstByIndex = function(t) {
            return this._bursts[t];
        }, e.addBurst = function(t) {
            var e = this._bursts.length;
            if (e > 0) for (var n = 0; n < e; n++) this._bursts[n].time > t.time && this._bursts.splice(n, 0, t);
            this._bursts.push(t);
        }, e.removeBurst = function(t) {
            var e = this._bursts.indexOf(t);
            -1 !== e && this._bursts.splice(e, 1);
        }, e.removeBurstByIndex = function(t) {
            this._bursts.splice(t, 1);
        }, e.clearBurst = function() {
            this._bursts.length = 0;
        }, e.cloneTo = function(t) {
            var e = t, n = e._bursts;
            n.length = this._bursts.length;
            for (var i = 0, r = this._bursts.length; i < r; i++) {
                var a = n[i];
                a ? this._bursts[i].cloneTo(a) : n[i] = this._bursts[i].clone();
            }
            e._emissionRate = this._emissionRate, e.enbale = this.enbale;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "destroyed", function() {
            return this._destroyed;
        }), a(0, e, "emissionRate", function() {
            return this._emissionRate;
        }, function(t) {
            if (t < 0) throw new Error("ParticleBaseShape:emissionRate value must large or equal than 0.");
            this._emissionRate = t;
        }), t;
    }(), Mt = function() {
        function t(t, e) {
            this.center = null, this.radius = NaN, this.center = t, this.radius = e;
        }
        r(t, "laya.d3.math.BoundSphere");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.toDefault = function() {
            this.center.toDefault(), this.radius = 0;
        }, e.intersectsRayDistance = function(t) {
            return Fe.intersectsRayAndSphereRD(t, this);
        }, e.intersectsRayPoint = function(t, e) {
            return Fe.intersectsRayAndSphereRP(t, this, e);
        }, e.cloneTo = function(t) {
            var e = t;
            this.center.cloneTo(e.center), e.radius = this.radius;
        }, e.clone = function() {
            var t = new this.constructor(new Tt(), new Tt());
            return this.cloneTo(t), t;
        }, t.createFromSubPoints = function(e, n, i, r) {
            if (null == e) throw new Error("points");
            if (n < 0 || n >= e.length) throw new Error("start" + n + "Must be in the range [0, " + (e.length - 1) + "]");
            if (i < 0 || n + i > e.length) throw new Error("count" + i + "Must be in the range <= " + e.length + "}");
            var a = n + i, o = t._tempVector3;
            o.x = 0, o.y = 0, o.z = 0;
            for (var s = n; s < a; ++s) Tt.add(e[s], o, o);
            var l = r.center;
            Tt.scale(o, 1 / i, l);
            var h = 0;
            for (s = n; s < a; ++s) {
                var u = Tt.distanceSquared(l, e[s]);
                u > h && (h = u);
            }
            r.radius = Math.sqrt(h);
        }, t.createfromPoints = function(e, n) {
            if (null == e) throw new Error("points");
            t.createFromSubPoints(e, 0, e.length, n);
        }, i(t, [ "_tempVector3", function() {
            return this._tempVector3 = new Tt();
        } ]), t;
    }(), At = function() {
        function t() {
            this.renderType = 0;
        }
        r(t, "laya.d3.core.render.RenderElement");
        var e = t.prototype;
        return e.setTransform = function(t) {
            this._transform = t;
        }, e.setGeometry = function(t) {
            this._geometry = t;
        }, e.addToOpaqueRenderQueue = function(t, e) {
            e.elements.push(this);
        }, e.addToTransparentRenderQueue = function(t, e) {
            e.elements.push(this), e.lastTransparentBatched = !1, e.lastTransparentRenderElement = this;
        }, e._render = function(t, e, n, i) {
            var r, a, o, s = Mi._updateMark, l = t.scene, h = t.camera, u = this._transform, c = this._geometry;
            t.renderElement = this;
            var _ = s !== this.render._updateMark || this.renderType !== this.render._updateRenderType;
            if (_ && (this.render._renderUpdate(t, u), this.render._renderUpdateWithCamera(t, u), 
            this.render._updateMark = s, this.render._updateRenderType = this.renderType), c._prepareRender(t)) {
                var d, f = this.material._shader.getSubShaderAt(0);
                if (n) if (i) {
                    var m = f.getFlag(i);
                    if (!m) return;
                    for (var p = n._subShaders, T = 0, E = p.length; T < E; T++) {
                        var v = p[T];
                        if (m === v.getFlag(i)) {
                            d = v._passes;
                            break;
                        }
                    }
                    if (!d) return;
                } else d = n.getSubShaderAt(0)._passes; else d = f._passes;
                for (var g = 0, S = d.length; g < S; g++) {
                    var y = t.shader = d[g].withCompile(l._defineDatas.value & ~this.material._disablePublicDefineDatas.value, this.render._defineDatas.value, this.material._defineDatas.value), x = y.bind(), D = s !== y._uploadMark, I = y._uploadScene !== l || D;
                    (I || x) && (y.uploadUniforms(y._sceneUniformParamsMap, l._shaderValues, I), y._uploadScene = l);
                    var R = y._uploadRender !== this.render || y._uploadRenderType !== this.renderType || D;
                    (R || x) && (y.uploadUniforms(y._spriteUniformParamsMap, this.render._shaderValues, R), 
                    y._uploadRender = this.render, y._uploadRenderType = this.renderType);
                    var M = y._uploadCamera !== h || D;
                    (M || x) && (y.uploadUniforms(y._cameraUniformParamsMap, h._shaderValues, M), y._uploadCamera = h);
                    var A = y._uploadMaterial !== this.material || D;
                    (A || x) && (y.uploadUniforms(y._materialUniformParamsMap, this.material._shaderValues, A), 
                    y._uploadMaterial = this.material);
                    var C = this.material._shaderValues;
                    r !== this.material || a !== y ? (y.uploadRenderStateBlendDepth(C), y.uploadRenderStateFrontFace(C, e, u), 
                    r = this.material, a = y, o = this.render) : o !== this.render && (y.uploadRenderStateFrontFace(C, e, u), 
                    o = this.render), c._render(t), y._uploadMark = s;
                }
            }
            _ && 0 !== this.renderType && this.render._revertBatchRenderUpdate(t), Mi._updateMark++;
        }, e.destroy = function() {
            this._transform = null, this._geometry = null, this.material = null, this.render = null;
        }, t.RENDERTYPE_NORMAL = 0, t.RENDERTYPE_STATICBATCH = 1, t.RENDERTYPE_INSTANCEBATCH = 2, 
        t.RENDERTYPE_VERTEXBATCH = 3, t;
    }(), Ct = function() {
        function t() {}
        return r(t, "laya.d3.math.HalfFloatUtils"), t.__init__ = function() {
            for (var e = 0; e < 256; ++e) {
                var n = e - 127;
                n < -27 ? (t._baseTable[0 | e] = 0, t._baseTable[256 | e] = 32768, t._shiftTable[0 | e] = 24, 
                t._shiftTable[256 | e] = 24) : n < -14 ? (t._baseTable[0 | e] = 1024 >> -n - 14, 
                t._baseTable[256 | e] = 1024 >> -n - 14 | 32768, t._shiftTable[0 | e] = -n - 1, 
                t._shiftTable[256 | e] = -n - 1) : n <= 15 ? (t._baseTable[0 | e] = n + 15 << 10, 
                t._baseTable[256 | e] = n + 15 << 10 | 32768, t._shiftTable[0 | e] = 13, t._shiftTable[256 | e] = 13) : n < 128 ? (t._baseTable[0 | e] = 31744, 
                t._baseTable[256 | e] = 64512, t._shiftTable[0 | e] = 24, t._shiftTable[256 | e] = 24) : (t._baseTable[0 | e] = 31744, 
                t._baseTable[256 | e] = 64512, t._shiftTable[0 | e] = 13, t._shiftTable[256 | e] = 13);
            }
            for (t._mantissaTable[0] = 0, e = 1; e < 1024; ++e) {
                var i = e << 13;
                for (n = 0; 0 == (8388608 & i); ) n -= 8388608, i <<= 1;
                i &= -8388609, n += 947912704, t._mantissaTable[e] = i | n;
            }
            for (e = 1024; e < 2048; ++e) t._mantissaTable[e] = 939524096 + (e - 1024 << 13);
            for (t._exponentTable[0] = 0, e = 1; e < 31; ++e) t._exponentTable[e] = e << 23;
            for (t._exponentTable[31] = 1199570944, t._exponentTable[32] = 2147483648, e = 33; e < 63; ++e) t._exponentTable[e] = 2147483648 + (e - 32 << 23);
            for (t._exponentTable[63] = 3347054592, t._offsetTable[0] = 0, e = 1; e < 64; ++e) t._offsetTable[e] = 32 === e ? 0 : 1024;
        }, t.roundToFloat16Bits = function(e) {
            t._floatView[0] = e;
            var n = t._uint32View[0], i = n >> 23 & 511;
            return t._baseTable[i] + ((8388607 & n) >> t._shiftTable[i]);
        }, t.convertToNumber = function(e) {
            var n = e >> 10;
            return t._uint32View[0] = t._mantissaTable[t._offsetTable[n] + (1023 & e)] + t._exponentTable[n], 
            t._floatView[0];
        }, i(t, [ "_buffer", function() {
            return this._buffer = new ArrayBuffer(4);
        }, "_floatView", function() {
            return this._floatView = new Float32Array(t._buffer);
        }, "_uint32View", function() {
            return this._uint32View = new Uint32Array(t._buffer);
        }, "_baseTable", function() {
            return this._baseTable = new Uint32Array(512);
        }, "_shiftTable", function() {
            return this._shiftTable = new Uint32Array(512);
        }, "_mantissaTable", function() {
            return this._mantissaTable = new Uint32Array(2048);
        }, "_exponentTable", function() {
            return this._exponentTable = new Uint32Array(64);
        }, "_offsetTable", function() {
            return this._offsetTable = new Uint32Array(64);
        } ]), t;
    }(), Lt = function() {
        function t() {
            this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = null;
        }
        return r(t, "laya.d3.resource.models.SkyMesh"), t.prototype._render = function(t) {}, 
        t;
    }(), Ot = function() {
        function t(t, e) {
            this._frame = null, this._startFrame = null, this.tiles = null, this.type = 0, this.randomRow = !1, 
            this.rowIndex = 0, this.cycles = 0, this.enableUVChannels = 0, this.enable = !1, 
            this.tiles = new Et(1, 1), this.type = 0, this.randomRow = !0, this.rowIndex = 0, 
            this.cycles = 1, this.enableUVChannels = 1, this._frame = t, this._startFrame = e;
        }
        r(t, "laya.d3.core.particleShuriKen.module.TextureSheetAnimation");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            this.tiles.cloneTo(e.tiles), e.type = this.type, e.randomRow = this.randomRow, this._frame.cloneTo(e._frame), 
            this._startFrame.cloneTo(e._startFrame), e.cycles = this.cycles, e.enableUVChannels = this.enableUVChannels, 
            e.enable = this.enable;
        }, e.clone = function() {
            var t;
            switch (this._frame.type) {
              case 0:
                t = Y.createByConstant(this._frame.constant);
                break;

              case 1:
                t = Y.createByOverTime(this._frame.frameOverTimeData.clone());
                break;

              case 2:
                t = Y.createByRandomTwoConstant(this._frame.constantMin, this._frame.constantMax);
                break;

              case 3:
                t = Y.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(), this._frame.frameOverTimeDataMax.clone());
            }
            var e;
            switch (this._startFrame.type) {
              case 0:
                e = De.createByConstant(this._startFrame.constant);
                break;

              case 1:
                e = De.createByRandomTwoConstant(this._startFrame.constantMin, this._startFrame.constantMax);
            }
            var n = new this.constructor(t, e);
            return this.tiles.cloneTo(n.tiles), n.type = this.type, n.randomRow = this.randomRow, 
            n.cycles = this.cycles, n.enableUVChannels = this.enableUVChannels, n.enable = this.enable, 
            n;
        }, a(0, e, "frame", function() {
            return this._frame;
        }), a(0, e, "startFrame", function() {
            return this._startFrame;
        }), t;
    }(), Nt = function() {
        function t() {}
        return r(t, "laya.d3.resource.TextureGenerator"), t.lightAttenTexture = function(t, e, n, i, r, a) {
            var o = t / n, s = 1 / (1 + 25 * o);
            o >= .64 && (o > 1 ? s = 0 : s *= 1 - (o - .64) / .36), a[r] = Math.floor(255 * s + .5);
        }, t.haloTexture = function(t, e, n, i, r, a) {
            var o = (t - (n >>= 1)) / n, s = (e - (i >>= 1)) / i, l = o * o + s * s;
            l > 1 && (l = 1), a[r] = Math.floor(255 * (1 - l) + .5);
        }, t._generateTexture2D = function(t, e, n, i) {
            var r = 0, a = 0;
            switch (t.format) {
              case 0:
                a = 3;
                break;

              case 1:
                a = 4;
                break;

              case 2:
                a = 1;
                break;

              default:
                throw "GeneratedTexture._generateTexture: unkonw texture format.";
            }
            for (var o = new Uint8Array(e * n * a), s = 0; s < n; s++) for (var l = 0; l < e; l++) i(l, s, e, n, r, o), 
            r += a;
            t.setPixels(o);
        }, t;
    }(), Vt = function() {
        function t(t, e, n, i) {
            this._attributeMap = null, this._uniformMap = null, this._enableInstancing = !1, 
            this._subShaders = [], this._name = t, this._attributeMap = e, this._uniformMap = n, 
            this._enableInstancing = i;
        }
        r(t, "laya.d3.shader.Shader3D");
        var e = t.prototype;
        return e.addSubShader = function(t) {
            this._subShaders.push(t), t._owner = this;
        }, e.getSubShaderAt = function(t) {
            return this._subShaders[t];
        }, t.propertyNameToID = function(e) {
            if (null != t._propertyNameMap[e]) return t._propertyNameMap[e];
            var n = t._propertyNameCounter++;
            return t._propertyNameMap[e] = n, n;
        }, t.addInclude = function(t, e) {
            C.addInclude(t, e);
        }, t.registerPublicDefine = function(e) {
            var n = Math.pow(2, t._publicCounter++);
            return t._globleDefines[n] = e, n;
        }, t.compileShader = function(t, e, n, i, r, a) {
            var o = laya.d3.shader.Shader3D.find(t);
            if (o) {
                var s = o.getSubShaderAt(e);
                if (s) {
                    var l = s._passes[n];
                    l ? F.shaderHighPrecision ? l.withCompile(i, r, a) : l.withCompile(i - laya.d3.shader.Shader3D.SHADERDEFINE_HIGHPRECISION, r, a) : console.warn("Shader3D: unknown passIndex.");
                } else console.warn("Shader3D: unknown subShaderIndex.");
            } else console.warn("Shader3D: unknown shader name.");
        }, t.add = function(e, n, i, r) {
            return void 0 === r && (r = !1), laya.d3.shader.Shader3D._preCompileShader[e] = new t(e, n, i, r);
        }, t.find = function(t) {
            return laya.d3.shader.Shader3D._preCompileShader[t];
        }, t.RENDER_STATE_CULL = 0, t.RENDER_STATE_BLEND = 1, t.RENDER_STATE_BLEND_SRC = 2, 
        t.RENDER_STATE_BLEND_DST = 3, t.RENDER_STATE_BLEND_SRC_RGB = 4, t.RENDER_STATE_BLEND_DST_RGB = 5, 
        t.RENDER_STATE_BLEND_SRC_ALPHA = 6, t.RENDER_STATE_BLEND_DST_ALPHA = 7, t.RENDER_STATE_BLEND_CONST_COLOR = 8, 
        t.RENDER_STATE_BLEND_EQUATION = 9, t.RENDER_STATE_BLEND_EQUATION_RGB = 10, t.RENDER_STATE_BLEND_EQUATION_ALPHA = 11, 
        t.RENDER_STATE_DEPTH_TEST = 12, t.RENDER_STATE_DEPTH_WRITE = 13, t.PERIOD_CUSTOM = 0, 
        t.PERIOD_MATERIAL = 1, t.PERIOD_SPRITE = 2, t.PERIOD_CAMERA = 3, t.PERIOD_SCENE = 4, 
        t.SHADERDEFINE_HIGHPRECISION = 0, t._propertyNameCounter = 0, t._propertyNameMap = {}, 
        t._publicCounter = 0, t._globleDefines = [], t._preCompileShader = {}, t.debugMode = !1, 
        t;
    }(), wt = function() {
        function t(t) {
            this._temp = new Uint32Array(1), this.seeds = new Uint32Array(4), this.seeds[0] = t, 
            this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1, 
            this.seeds[3] = 1812433253 * this.seeds[2] + 1;
        }
        r(t, "laya.d3.math.Rand");
        var e = t.prototype;
        return e.getUint = function() {
            return this._temp[0] = this.seeds[0] ^ this.seeds[0] << 11, this.seeds[0] = this.seeds[1], 
            this.seeds[1] = this.seeds[2], this.seeds[2] = this.seeds[3], this.seeds[3] = this.seeds[3] ^ this.seeds[3] >>> 19 ^ this._temp[0] ^ this._temp[0] >>> 8, 
            this.seeds[3];
        }, e.getFloat = function() {
            return this.getUint(), (8388607 & this.seeds[3]) * (1 / 8388607);
        }, e.getSignedFloat = function() {
            return 2 * this.getFloat() - 1;
        }, a(0, e, "seed", function() {
            return this.seeds[0];
        }, function(t) {
            this.seeds[0] = t, this.seeds[1] = 1812433253 * this.seeds[0] + 1, this.seeds[2] = 1812433253 * this.seeds[1] + 1, 
            this.seeds[3] = 1812433253 * this.seeds[2] + 1;
        }), t.getFloatFromInt = function(t) {
            return 1 / 8388607 * (8388607 & t);
        }, t.getByteFromInt = function(t) {
            return (8388607 & t) >>> 15;
        }, t;
    }(), Pt = function() {
        function t() {
            this._currentPSSM = -1, this._shadowMapCount = 3, this._maxDistance = 200, this._ratioOfDistance = 1 / this._shadowMapCount, 
            this._statesDirty = !0, this._shadowMapTextureSize = 1024, this._scene = null, this._PCFType = 0, 
            this._shaderValueLightVP = null, this._spiltDistance = new Array(4), this._globalParallelLightDir = new Tt(0, -1, 0), 
            this._boundingSphere = new Array(4), this._boundingBox = new Array(4), this._frustumPos = new Array(16), 
            this._uniformDistance = new Array(4), this._logDistance = new Array(4), this._dimension = new Array(4), 
            this._tempLookAt3 = new Tt(), this._tempLookAt4 = new mt(), this._tempValue = new mt(), 
            this._tempPos = new Tt(), this._tempLightUp = new Tt(), this._tempMin = new mt(), 
            this._tempMax = new mt(), this._tempMatrix44 = new He(), this._splitFrustumCulling = new Ve(He.DEFAULT), 
            this._tempScaleMatrix44 = new He(), this._shadowPCFOffset = new Et(1 / 1024, 1 / 1024), 
            this._shaderValueDistance = new mt(), this.cameras = [], this._shaderValueVPs = [];
            var t = 0;
            for (t = 0; t < this._spiltDistance.length; t++) this._spiltDistance[t] = 0;
            for (t = 0; t < this._dimension.length; t++) this._dimension[t] = new Et();
            for (t = 0; t < this._frustumPos.length; t++) this._frustumPos[t] = new Tt();
            for (t = 0; t < this._boundingBox.length; t++) this._boundingBox[t] = new ze(new Tt(), new Tt());
            for (t = 0; t < this._boundingSphere.length; t++) this._boundingSphere[t] = new Mt(new Tt(), 0);
            He.createScaling(new Tt(.5, .5, 1), this._tempScaleMatrix44), this._tempScaleMatrix44.elements[12] = .5, 
            this._tempScaleMatrix44.elements[13] = .5;
        }
        r(t, "laya.d3.shadowMap.ParallelSplitShadowMap");
        var e = t.prototype;
        return e.setInfo = function(t, e, n, i, r, a) {
            r > 3 && (this._shadowMapCount = 3), this._scene = t, this._maxDistance = e, this.shadowMapCount = r, 
            this._globalParallelLightDir = n, this._ratioOfDistance = 1 / this._shadowMapCount;
            for (var o = 0; o < this._spiltDistance.length; o++) this._spiltDistance[o] = 0;
            this._shadowMapTextureSize = i, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize, 
            this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this.setPCFType(a), this._statesDirty = !0;
        }, e.setPCFType = function(t) {
            this._PCFType = t;
            var e = this._scene._defineDatas;
            switch (this._PCFType) {
              case 0:
                e.add(Qn.SHADERDEFINE_SHADOW_PCF_NO), e.remove(Qn.SHADERDEFINE_SHADOW_PCF1), e.remove(Qn.SHADERDEFINE_SHADOW_PCF2), 
                e.remove(Qn.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 1:
                e.add(Qn.SHADERDEFINE_SHADOW_PCF1), e.remove(Qn.SHADERDEFINE_SHADOW_PCF_NO), e.remove(Qn.SHADERDEFINE_SHADOW_PCF2), 
                e.remove(Qn.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 2:
                e.add(Qn.SHADERDEFINE_SHADOW_PCF2), e.remove(Qn.SHADERDEFINE_SHADOW_PCF_NO), e.remove(Qn.SHADERDEFINE_SHADOW_PCF1), 
                e.remove(Qn.SHADERDEFINE_SHADOW_PCF3);
                break;

              case 3:
                e.add(Qn.SHADERDEFINE_SHADOW_PCF3), e.remove(Qn.SHADERDEFINE_SHADOW_PCF_NO), e.remove(Qn.SHADERDEFINE_SHADOW_PCF1), 
                e.remove(Qn.SHADERDEFINE_SHADOW_PCF2);
            }
        }, e.getPCFType = function() {
            return this._PCFType;
        }, e.setFarDistance = function(t) {
            this._maxDistance != t && (this._maxDistance = t, this._statesDirty = !0);
        }, e.getFarDistance = function() {
            return this._maxDistance;
        }, e._beginSampler = function(t, e) {
            if (t < 0 || t > this._shadowMapCount) throw new Error("ParallelSplitShadowMap: beginSample invalid index");
            this._currentPSSM = t, this._update(e);
        }, e.endSampler = function(t) {
            this._currentPSSM = -1;
        }, e._calcAllLightCameraInfo = function(t) {
            if (1 === this._shadowMapCount) this._beginSampler(0, t), this.endSampler(t); else for (var e = 0, n = this._shadowMapCount + 1; e < n; e++) this._beginSampler(e, t), 
            this.endSampler(t);
        }, e._recalculate = function(t, e, n) {
            this._calcSplitDistance(t), this._calcBoundingBox(e, n), this._rebuildRenderInfo();
        }, e._update = function(t) {
            var e = t.nearPlane, n = t.fieldOfView, i = t.aspectRatio;
            (this._statesDirty || this.lastNearPlane !== e || this.lastFieldOfView !== n || this.lastAspectRatio !== i) && (this._recalculate(e, n, i), 
            this._uploadShaderValue(), this._statesDirty = !1, this.lastNearPlane = e, this.lastFieldOfView = n, 
            this.lastAspectRatio = i), this._calcLightViewProject(t);
        }, e._uploadShaderValue = function() {
            var t = this._scene._defineDatas;
            switch (this._shadowMapCount) {
              case 1:
                t.add(Qn.SHADERDEFINE_SHADOW_PSSM1), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM2), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM3);
                break;

              case 2:
                t.add(Qn.SHADERDEFINE_SHADOW_PSSM2), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM1), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM3);
                break;

              case 3:
                t.add(Qn.SHADERDEFINE_SHADOW_PSSM3), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM1), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM2);
            }
            var e = this._scene._shaderValues;
            switch (e.setVector(Qn.SHADOWDISTANCE, this._shaderValueDistance), e.setBuffer(Qn.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP), 
            e.setVector2(Qn.SHADOWMAPPCFOFFSET, this._shadowPCFOffset), this._shadowMapCount) {
              case 3:
                e.setTexture(Qn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), e.setTexture(Qn.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget), 
                e.setTexture(Qn.SHADOWMAPTEXTURE3, this.cameras[3].renderTarget);
                break;

              case 2:
                e.setTexture(Qn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget), e.setTexture(Qn.SHADOWMAPTEXTURE2, this.cameras[2].renderTarget);
                break;

              case 1:
                e.setTexture(Qn.SHADOWMAPTEXTURE1, this.cameras[1].renderTarget);
            }
        }, e._calcSplitDistance = function(t) {
            var e = this._maxDistance, n = 1 / this._shadowMapCount, i = 0;
            for (i = 0; i <= this._shadowMapCount; i++) this._uniformDistance[i] = t + (e - t) * i * n;
            var r = e / t;
            for (i = 0; i <= this._shadowMapCount; i++) {
                var a = Math.pow(r, i * n);
                this._logDistance[i] = t * a;
            }
            for (i = 0; i <= this._shadowMapCount; i++) this._spiltDistance[i] = this._uniformDistance[i] * this._ratioOfDistance + this._logDistance[i] * (1 - this._ratioOfDistance);
            this._shaderValueDistance.x = this._spiltDistance[1], this._shaderValueDistance.y = this._spiltDistance[2], 
            this._shaderValueDistance.z = this._spiltDistance[3], this._shaderValueDistance.w = 0;
        }, e._calcBoundingBox = function(t, e) {
            var n = 3.1415926 * t / 180, i = Math.tan(n / 2), r = NaN, a = NaN, o = NaN, s = 0;
            for (s = 0; s <= this._shadowMapCount; s++) {
                a = (r = (o = this._spiltDistance[s]) * i) * e;
                var l = this._frustumPos[4 * s + 0];
                l.x = -a, l.y = -r, l.z = -o, (l = this._frustumPos[4 * s + 1]).x = a, l.y = -r, 
                l.z = -o, (l = this._frustumPos[4 * s + 2]).x = -a, l.y = r, l.z = -o, (l = this._frustumPos[4 * s + 3]).x = a, 
                l.y = r, l.z = -o, (l = this._dimension[s]).x = a, l.y = r;
            }
            var h, u, c, _;
            for (s = 1; s <= this._shadowMapCount; s++) h = this._dimension[s], (u = this._boundingBox[s].min).x = -h.x, 
            u.y = -h.y, u.z = -this._spiltDistance[s], (c = this._boundingBox[s].max).x = h.x, 
            c.y = h.y, c.z = -this._spiltDistance[s - 1], (_ = this._boundingSphere[s].center).x = .5 * (u.x + c.x), 
            _.y = .5 * (u.y + c.y), _.z = .5 * (u.z + c.z), this._boundingSphere[s].radius = .5 * Math.sqrt(Math.pow(c.x - u.x, 2) + Math.pow(c.y - u.y, 2) + Math.pow(c.z - u.z, 2));
            u = this._boundingBox[0].min, h = this._dimension[this._shadowMapCount], u.x = -h.x, 
            u.y = -h.y, u.z = -this._spiltDistance[this._shadowMapCount], (c = this._boundingBox[0].max).x = h.x, 
            c.y = h.y, c.z = -this._spiltDistance[0], (_ = this._boundingSphere[0].center).x = .5 * (u.x + c.x), 
            _.y = .5 * (u.y + c.y), _.z = .5 * (u.z + c.z), this._boundingSphere[0].radius = .5 * Math.sqrt(Math.pow(c.x - u.x, 2) + Math.pow(c.y - u.y, 2) + Math.pow(c.z - u.z, 2));
        }, e.calcSplitFrustum = function(t) {
            this._currentPSSM > 0 ? He.createPerspective(3.1416 * t.fieldOfView / 180, t.aspectRatio, this._spiltDistance[this._currentPSSM - 1], this._spiltDistance[this._currentPSSM], this._tempMatrix44) : He.createPerspective(3.1416 * t.fieldOfView / 180, t.aspectRatio, this._spiltDistance[0], this._spiltDistance[this._shadowMapCount], this._tempMatrix44), 
            He.multiply(this._tempMatrix44, t.viewMatrix, this._tempMatrix44), this._splitFrustumCulling.matrix = this._tempMatrix44;
        }, e._rebuildRenderInfo = function() {
            var t = this._shadowMapCount + 1, e = 0;
            for (this.cameras.length = t, e = 0; e < t; e++) {
                if (!this.cameras[e]) {
                    var n = new Mi();
                    n.name = "lightCamera" + e, n.clearColor = new mt(1, 1, 1, 1), this.cameras[e] = n;
                }
                var i = this.cameras[e].renderTarget;
                null != i && i.width == this._shadowMapTextureSize && i.height == this._shadowMapTextureSize || (i && i.destroy(), 
                (i = new pi(this._shadowMapTextureSize, this._shadowMapTextureSize, 1, 0)).filterMode = 0, 
                this.cameras[e].renderTarget = i);
            }
        }, e._calcLightViewProject = function(e) {
            var n = this._boundingSphere[this._currentPSSM], i = e.transform.worldMatrix;
            n.radius, n.center.cloneTo(this._tempLookAt3), Tt.transformV3ToV4(this._tempLookAt3, i, this._tempLookAt4);
            var r = this._tempLookAt3, a = this._tempLookAt4;
            r.x = a.x, r.y = a.y, r.z = a.z;
            var o = this._tempLightUp;
            e.transform.worldMatrix.getForward(t._tempVector30);
            var s = t._tempVector30;
            o.x = s.x, o.y = 1, o.z = s.z, Tt.normalize(this._tempLightUp, this._tempLightUp), 
            Tt.scale(this._globalParallelLightDir, 4 * n.radius, this._tempPos), Tt.subtract(this._tempLookAt3, this._tempPos, this._tempPos);
            var l = this.cameras[this._currentPSSM];
            l.transform.position = this._tempPos, l.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1);
            var h = this._tempMax, u = this._tempMin;
            h.x = h.y = h.z = -1e5, h.w = 1, u.x = u.y = u.z = 1e5, u.w = 1, He.multiply(l.viewMatrix, i, this._tempMatrix44);
            var c = this._tempValue, _ = [];
            _.length = 8, this._boundingBox[this._currentPSSM].getCorners(_);
            for (var d = 0; d < 8; d++) {
                var f = _[d];
                c.x = f.x, c.y = f.y, c.z = f.z, c.w = 1, mt.transformByM4x4(this._tempValue, this._tempMatrix44, this._tempValue), 
                u.x = c.x < u.x ? c.x : u.x, u.y = c.y < u.y ? c.y : u.y, u.z = c.z < u.z ? c.z : u.z, 
                h.x = c.x > h.x ? c.x : h.x, h.y = c.y > h.y ? c.y : h.y, h.z = c.z > h.z ? c.z : h.z;
            }
            mt.add(this._tempMax, this._tempMin, this._tempValue), c.x *= .5, c.y *= .5, c.z *= .5, 
            c.w = 1, mt.transformByM4x4(this._tempValue, l.transform.worldMatrix, this._tempValue);
            var m = Math.abs(-this._tempMax.z), p = m > this._maxDistance ? m : this._maxDistance;
            Tt.scale(this._globalParallelLightDir, p, this._tempPos);
            var T = this._tempPos;
            T.x = c.x - T.x, T.y = c.y - T.y, T.z = c.z - T.z, l.transform.position = this._tempPos, 
            l.transform.lookAt(this._tempLookAt3, this._tempLightUp, !1), He.createOrthoOffCenter(u.x, h.x, u.y, h.y, 1, p + .5 * (h.z - u.z), l.projectionMatrix);
            var E = l.projectionViewMatrix;
            t.multiplyMatrixOutFloat32Array(this._tempScaleMatrix44, E, this._shaderValueVPs[this._currentPSSM]), 
            this._scene._shaderValues.setBuffer(Qn.SHADOWLIGHTVIEWPROJECT, this._shaderValueLightVP);
        }, e.setShadowMapTextureSize = function(t) {
            t !== this._shadowMapTextureSize && (this._shadowMapTextureSize = t, this._shadowPCFOffset.x = 1 / this._shadowMapTextureSize, 
            this._shadowPCFOffset.y = 1 / this._shadowMapTextureSize, this._statesDirty = !0);
        }, e.disposeAllRenderTarget = function() {
            for (var t = 0, e = this._shadowMapCount + 1; t < e; t++) this.cameras[t].renderTarget && (this.cameras[t].renderTarget.destroy(), 
            this.cameras[t].renderTarget = null);
        }, a(0, e, "shadowMapCount", function() {
            return this._shadowMapCount;
        }, function(t) {
            if (t = t > 0 ? t : 1, t = t <= 3 ? t : 3, this._shadowMapCount != t) {
                this._shadowMapCount = t, this._ratioOfDistance = 1 / this._shadowMapCount, this._statesDirty = !0, 
                this._shaderValueLightVP = new Float32Array(16 * t), this._shaderValueVPs.length = t;
                for (var e = 0; e < t; e++) this._shaderValueVPs[e] = new Float32Array(this._shaderValueLightVP.buffer, 64 * e);
            }
        }), t.multiplyMatrixOutFloat32Array = function(t, e, n) {
            var i, r, a, o, s, l, h;
            for (r = t.elements, a = e.elements, i = 0; i < 4; i++) o = r[i], s = r[i + 4], 
            l = r[i + 8], h = r[i + 12], n[i] = o * a[0] + s * a[1] + l * a[2] + h * a[3], n[i + 4] = o * a[4] + s * a[5] + l * a[6] + h * a[7], 
            n[i + 8] = o * a[8] + s * a[9] + l * a[10] + h * a[11], n[i + 12] = o * a[12] + s * a[13] + l * a[14] + h * a[15];
        }, t.MAX_PSSM_COUNT = 3, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        } ]), t;
    }(), bt = (function() {
        function t() {}
        r(t, "laya.d3.resource.models.PrimitiveMesh"), t._createMesh = function(t, e, n) {
            var i = new Gn(), r = new on(i), a = new Ke(4 * e.length, 35044, !0);
            a.vertexDeclaration = t, a.setData(e), i._vertexBuffers.push(a), i._vertexCount += a.vertexCount;
            var s = new qe("ushort", n.length, 35044, !0);
            s.setData(n), i._indexBuffer = s;
            var l = o(1, null);
            l[0] = a, i._setBuffer(l, s), r._vertexBuffer = a, r._indexBuffer = s, r._indexStart = 0, 
            r._indexCount = s.indexCount;
            var h = r._subIndexBufferStart, u = r._subIndexBufferCount, c = r._boneIndicesList;
            h.length = 1, u.length = 1, c.length = 1, h[0] = 0, u[0] = s.indexCount;
            var _ = [];
            _.push(r), i._setSubMeshes(_);
            var d = a._byteLength + s._byteLength;
            return i._setCPUMemory(d), i._setGPUMemory(d), i;
        }, t.createBox = function(e, n, i) {
            void 0 === e && (e = 1), void 0 === n && (n = 1), void 0 === i && (i = 1);
            var r = It.getVertexDeclaration("POSITION,NORMAL,UV"), a = e / 2, o = n / 2, s = i / 2, l = new Float32Array([ -a, o, -s, 0, 1, 0, 0, 0, a, o, -s, 0, 1, 0, 1, 0, a, o, s, 0, 1, 0, 1, 1, -a, o, s, 0, 1, 0, 0, 1, -a, -o, -s, 0, -1, 0, 0, 1, a, -o, -s, 0, -1, 0, 1, 1, a, -o, s, 0, -1, 0, 1, 0, -a, -o, s, 0, -1, 0, 0, 0, -a, o, -s, -1, 0, 0, 0, 0, -a, o, s, -1, 0, 0, 1, 0, -a, -o, s, -1, 0, 0, 1, 1, -a, -o, -s, -1, 0, 0, 0, 1, a, o, -s, 1, 0, 0, 1, 0, a, o, s, 1, 0, 0, 0, 0, a, -o, s, 1, 0, 0, 0, 1, a, -o, -s, 1, 0, 0, 1, 1, -a, o, s, 0, 0, 1, 0, 0, a, o, s, 0, 0, 1, 1, 0, a, -o, s, 0, 0, 1, 1, 1, -a, -o, s, 0, 0, 1, 0, 1, -a, o, -s, 0, 0, -1, 1, 0, a, o, -s, 0, 0, -1, 0, 0, a, -o, -s, 0, 0, -1, 0, 1, -a, -o, -s, 0, 0, -1, 1, 1 ]), h = new Uint16Array([ 0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 8, 9, 10, 10, 11, 8, 12, 15, 14, 14, 13, 12, 16, 17, 18, 18, 19, 16, 20, 23, 22, 22, 21, 20 ]);
            return t._createMesh(r, l, h);
        }, t.createCapsule = function(e, n, i, r) {
            void 0 === e && (e = .5), void 0 === n && (n = 2), void 0 === i && (i = 16), void 0 === r && (r = 32);
            var a = (i + 1) * (r + 1) * 2 + 2 * (r + 1), o = 3 * i * (r + 1) * 2 * 2 + 2 * r * 3, s = It.getVertexDeclaration("POSITION,NORMAL,UV"), l = s.vertexStride / 4, h = new Float32Array(a * l), u = new Uint16Array(o), c = Math.PI / 2 / i, _ = 2 * Math.PI / r, d = n / 2 - e, f = 0, m = 0, p = 0, T = 0, E = 0, v = 0, g = 0, S = 0;
            for (g = 0; g <= i; g++) for (S = 0; S <= r; S++) f = e * Math.cos(g * c) * Math.cos(S * _ + Math.PI), 
            m = e * Math.sin(g * c), p = e * Math.cos(g * c) * Math.sin(S * _ + Math.PI), h[T++] = f, 
            h[T++] = m + d, h[T++] = p, h[T++] = f, h[T++] = m, h[T++] = p, h[T++] = 1 - S / r, 
            h[T++] = (1 - g / i) * (Math.PI * e / 2 / (n + Math.PI * e)), g < i && (u[E++] = g * (r + 1) + S + (r + 1), 
            u[E++] = g * (r + 1) + S, u[E++] = g * (r + 1) + S + 1, u[E++] = g * (r + 1) + S + r, 
            u[E++] = g * (r + 1) + S, u[E++] = g * (r + 1) + S + (r + 1));
            for (v += (i + 1) * (r + 1), g = 0; g <= i; g++) for (S = 0; S <= r; S++) f = e * Math.cos(g * c) * Math.cos(S * _ + Math.PI), 
            m = e * Math.sin(-g * c), p = e * Math.cos(g * c) * Math.sin(S * _ + Math.PI), h[T++] = f, 
            h[T++] = m - d, h[T++] = p, h[T++] = f, h[T++] = m, h[T++] = p, h[T++] = 1 - S / r, 
            h[T++] = (g / i * (Math.PI * e / 2) + (n + Math.PI * e / 2)) / (n + Math.PI * e), 
            g < i && (u[E++] = v + g * (r + 1) + S, u[E++] = v + g * (r + 1) + S + (r + 1), 
            u[E++] = v + g * (r + 1) + S + 1, u[E++] = v + g * (r + 1) + S, u[E++] = v + g * (r + 1) + S + r, 
            u[E++] = v + g * (r + 1) + S + (r + 1));
            for (v += (i + 1) * (r + 1), S = 0; S <= r; S++) f = e * Math.cos(S * _ + Math.PI), 
            m = d, p = e * Math.sin(S * _ + Math.PI), h[T++] = f, h[T + 8 * (r + 1) - 1] = f, 
            h[T++] = m, h[T + 8 * (r + 1) - 1] = -m, h[T++] = p, h[T + 8 * (r + 1) - 1] = p, 
            h[T++] = f, h[T + 8 * (r + 1) - 1] = f, h[T++] = 0, h[T + 8 * (r + 1) - 1] = 0, 
            h[T++] = p, h[T + 8 * (r + 1) - 1] = p, h[T++] = 1 - 1 * S / r, h[T + 8 * (r + 1) - 1] = 1 - 1 * S / r, 
            h[T++] = Math.PI * e / 2 / (n + Math.PI * e), h[T + 8 * (r + 1) - 1] = (Math.PI * e / 2 + n) / (n + Math.PI * e);
            for (S = 0; S < r; S++) u[E++] = S + v + (r + 1), u[E++] = S + v + 1, u[E++] = S + v, 
            u[E++] = S + v + (r + 1), u[E++] = S + v + (r + 1) + 1, u[E++] = S + v + 1;
            return v += 2 * (r + 1), t._createMesh(s, h, u);
        }, t.createCone = function(e, n, i) {
            void 0 === e && (e = .5), void 0 === n && (n = 1), void 0 === i && (i = 32);
            for (var r = i + 1 + 1 + 2 * (i + 1), a = 6 * i + 3 * i, o = It.getVertexDeclaration("POSITION,NORMAL,UV"), s = o.vertexStride / 4, l = new Float32Array(r * s), h = new Uint16Array(a), u = 2 * Math.PI / i, c = n / 2, _ = 0, d = 0, f = 0, m = 0, p = 0, T = new Tt(), E = new Tt(0, -1, 0), v = new Tt(0, c, 0), g = new Tt(), S = new Tt(), y = new ht(), x = new Tt(), D = NaN, I = 0, R = 0, M = 0; M <= i; M++) _ = M * u, 
            f = Math.cos(_ + Math.PI) * e, m = c, p = Math.sin(_ + Math.PI) * e, l[I++] = 0, 
            l[I + 8 * (i + 1) - 1] = f, l[I++] = m, l[I + 8 * (i + 1) - 1] = -m, l[I++] = 0, 
            l[I + 8 * (i + 1) - 1] = p, T.x = f, T.y = 0, T.z = p, g.x = f, g.y = -m, g.z = p, 
            Tt.subtract(g, v, S), Tt.normalize(S, S), D = Math.acos(Tt.dot(E, S)), Tt.cross(E, S, x), 
            Tt.normalize(x, x), ht.createFromAxisAngle(x, D, y), Tt.normalize(T, T), Tt.transformQuat(T, y, T), 
            Tt.normalize(T, T), l[I++] = T.x, l[I + 8 * (i + 1) - 1] = T.x, l[I++] = T.y, l[I + 8 * (i + 1) - 1] = T.y, 
            l[I++] = T.z, l[I + 8 * (i + 1) - 1] = T.z, l[I++] = 1 - 1 * M / i, l[I + 8 * (i + 1) - 1] = 1 - 1 * M / i, 
            l[I++] = 0, l[I + 8 * (i + 1) - 1] = 1;
            I += 8 * (i + 1);
            for (var A = 0; A < i; A++) h[R++] = A + d + (i + 1), h[R++] = A + d + 1, h[R++] = A + d, 
            h[R++] = A + d + (i + 1), h[R++] = A + d + (i + 1) + 1, h[R++] = A + d + 1;
            d += 2 * (i + 1);
            for (var C = 0; C <= i; C++) 0 === C && (l[I++] = 0, l[I++] = -c, l[I++] = 0, l[I++] = 0, 
            l[I++] = -1, l[I++] = 0, l[I++] = .5, l[I++] = .5), _ = C * u, f = Math.cos(_ + Math.PI) * e, 
            m = -c, p = Math.sin(_ + Math.PI) * e, l[I++] = f, l[I++] = m, l[I++] = p, l[I++] = 0, 
            l[I++] = -1, l[I++] = 0, l[I++] = .5 + .5 * Math.cos(_), l[I++] = .5 + .5 * Math.sin(_);
            for (var L = 0; L < i; L++) h[R++] = 0 + d, h[R++] = L + 2 + d, h[R++] = L + 1 + d;
            return d += i + 1 + 1, t._createMesh(o, l, h);
        }, t.createCylinder = function(e, n, i) {
            void 0 === e && (e = .5), void 0 === n && (n = 2), void 0 === i && (i = 32);
            for (var r = i + 1 + 1 + 2 * (i + 1) + (i + 1 + 1), a = 3 * i + 6 * i + 3 * i, o = It.getVertexDeclaration("POSITION,NORMAL,UV"), s = o.vertexStride / 4, l = new Float32Array(r * s), h = new Uint16Array(a), u = 2 * Math.PI / i, c = n / 2, _ = 0, d = 0, f = 0, m = 0, p = 0, T = 0, E = 0, v = 0; v <= i; v++) 0 === v && (l[T++] = 0, 
            l[T++] = c, l[T++] = 0, l[T++] = 0, l[T++] = 1, l[T++] = 0, l[T++] = .5, l[T++] = .5), 
            _ = v * u, f = Math.cos(_) * e, m = c, p = Math.sin(_) * e, l[T++] = f, l[T++] = m, 
            l[T++] = p, l[T++] = 0, l[T++] = 1, l[T++] = 0, l[T++] = .5 + .5 * Math.cos(_), 
            l[T++] = .5 + .5 * Math.sin(_);
            for (var g = 0; g < i; g++) h[E++] = 0, h[E++] = g + 1, h[E++] = g + 2;
            d += i + 1 + 1;
            for (var S = 0; S <= i; S++) _ = S * u, f = Math.cos(_ + Math.PI) * e, m = c, p = Math.sin(_ + Math.PI) * e, 
            l[T++] = f, l[T + 8 * (i + 1) - 1] = f, l[T++] = m, l[T + 8 * (i + 1) - 1] = -m, 
            l[T++] = p, l[T + 8 * (i + 1) - 1] = p, l[T++] = f, l[T + 8 * (i + 1) - 1] = f, 
            l[T++] = 0, l[T + 8 * (i + 1) - 1] = 0, l[T++] = p, l[T + 8 * (i + 1) - 1] = p, 
            l[T++] = 1 - 1 * S / i, l[T + 8 * (i + 1) - 1] = 1 - 1 * S / i, l[T++] = 0, l[T + 8 * (i + 1) - 1] = 1;
            T += 8 * (i + 1);
            for (var y = 0; y < i; y++) h[E++] = y + d + (i + 1), h[E++] = y + d + 1, h[E++] = y + d, 
            h[E++] = y + d + (i + 1), h[E++] = y + d + (i + 1) + 1, h[E++] = y + d + 1;
            d += 2 * (i + 1);
            for (var x = 0; x <= i; x++) 0 === x && (l[T++] = 0, l[T++] = -c, l[T++] = 0, l[T++] = 0, 
            l[T++] = -1, l[T++] = 0, l[T++] = .5, l[T++] = .5), _ = x * u, f = Math.cos(_ + Math.PI) * e, 
            m = -c, p = Math.sin(_ + Math.PI) * e, l[T++] = f, l[T++] = m, l[T++] = p, l[T++] = 0, 
            l[T++] = -1, l[T++] = 0, l[T++] = .5 + .5 * Math.cos(_), l[T++] = .5 + .5 * Math.sin(_);
            for (var D = 0; D < i; D++) h[E++] = 0 + d, h[E++] = D + 2 + d, h[E++] = D + 1 + d;
            return d += i + 1 + 1, t._createMesh(o, l, h);
        }, t.createPlane = function(e, n, i, r) {
            void 0 === e && (e = 10), void 0 === n && (n = 10), void 0 === i && (i = 10), void 0 === r && (r = 10);
            for (var a = (i + 1) * (r + 1), o = i * r * 2 * 3, s = new Uint16Array(o), l = It.getVertexDeclaration("POSITION,NORMAL,UV"), h = l.vertexStride / 4, u = new Float32Array(a * h), c = e / 2, _ = n / 2, d = e / i, f = n / r, m = 0, p = 0; p <= r; p++) for (var T = 0; T <= i; T++) u[m++] = T * d - c, 
            u[m++] = 0, u[m++] = p * f - _, u[m++] = 0, u[m++] = 1, u[m++] = 0, u[m++] = 1 * T / i, 
            u[m++] = 1 * p / r;
            var E = 0;
            for (p = 0; p < r; p++) for (T = 0; T < i; T++) s[E++] = (p + 1) * (i + 1) + T, 
            s[E++] = p * (i + 1) + T, s[E++] = (p + 1) * (i + 1) + T + 1, s[E++] = p * (i + 1) + T, 
            s[E++] = p * (i + 1) + T + 1, s[E++] = (p + 1) * (i + 1) + T + 1;
            return t._createMesh(l, u, s);
        }, t.createQuad = function(e, n) {
            void 0 === e && (e = 1), void 0 === n && (n = 1);
            var i = It.getVertexDeclaration("POSITION,NORMAL,UV"), r = (i.vertexStride, e / 2), a = n / 2, o = new Float32Array([ -r, a, 0, 0, 0, 1, 0, 0, r, a, 0, 0, 0, 1, 1, 0, -r, -a, 0, 0, 0, 1, 0, 1, r, -a, 0, 0, 0, 1, 1, 1 ]), s = new Uint16Array([ 0, 1, 2, 3, 2, 1 ]);
            return t._createMesh(i, o, s);
        }, t.createSphere = function(e, n, i) {
            void 0 === e && (e = .5), void 0 === n && (n = 32), void 0 === i && (i = 32);
            var r = (n + 1) * (i + 1), a = 3 * n * (i + 1) * 2, o = new Uint16Array(a), s = It.getVertexDeclaration("POSITION,NORMAL,UV"), l = s.vertexStride / 4, h = new Float32Array(r * l), u = Math.PI / n, c = 2 * Math.PI / i, _ = 0;
            r = 0, a = 0;
            for (var d = 0; d < n + 1; d++) for (var f = Math.sin(d * u), m = Math.cos(d * u), p = 0; p < i + 1; p++) {
                var T = f * Math.sin(p * c + 1 * Math.PI / 2), E = f * Math.cos(p * c + 1 * Math.PI / 2);
                h[r + 0] = T * e, h[r + 1] = m * e, h[r + 2] = E * e, h[r + 3] = T, h[r + 4] = m, 
                h[r + 5] = E, h[r + 6] = p / i, h[r + 7] = d / n, r += l, d != n - 1 && (o[a++] = _ + (i + 1), 
                o[a++] = _, o[a++] = _ + 1, o[a++] = _ + i, o[a++] = _, o[a++] = _ + (i + 1), _++);
            }
            return t._createMesh(s, h, o);
        };
    }(), function() {
        function t() {}
        return r(t, "laya.d3.core.render.PostProcessEffect"), t.prototype.render = function(t) {}, 
        t;
    }()), Ft = function() {
        function t() {}
        return r(t, "laya.d3.animation.AnimationClipParser04"), t.READ_DATA = function() {
            t._DATA.offset = t._reader.getUint32(), t._DATA.size = t._reader.getUint32();
        }, t.READ_BLOCK = function() {
            for (var e = t._BLOCK.count = t._reader.getUint16(), n = t._BLOCK.blockStarts = [], i = t._BLOCK.blockLengths = [], r = 0; r < e; r++) n.push(t._reader.getUint32()), 
            i.push(t._reader.getUint32());
        }, t.READ_STRINGS = function() {
            var e = t._reader.getUint32(), n = t._reader.getUint16(), i = t._reader.pos;
            t._reader.pos = e + t._DATA.offset;
            for (var r = 0; r < n; r++) t._strings[r] = t._reader.readUTFString();
            t._reader.pos = i;
        }, t.parse = function(e, n, i) {
            t._animationClip = e, t._reader = n, t._version = i, t.READ_DATA(), t.READ_BLOCK(), 
            t.READ_STRINGS();
            for (var r = 0, a = t._BLOCK.count; r < a; r++) {
                var o = n.getUint16(), s = t._strings[o], l = t["READ_" + s];
                if (null == l) throw new Error("model file err,no this function:" + o + " " + s);
                l.call(null);
            }
            t._version = null, t._reader = null, t._animationClip = null;
        }, t.READ_ANIMATIONS = function() {
            var e, n = 0, i = 0, r = t._reader, a = (r.__getBuffer(), []), o = r.getUint16();
            for (a.length = o, n = 0; n < o; n++) a[n] = r.getFloat32();
            var s = t._animationClip;
            s.name = t._strings[r.getUint16()];
            var l = s._duration = r.getFloat32();
            s.islooping = !!r.getByte(), s._frameRate = r.getInt16();
            var h = r.getInt16(), u = s._nodes;
            u.count = h;
            var c = s._nodesMap = {}, _ = s._nodesDic = {};
            for (n = 0; n < h; n++) {
                e = new Se(), u.setNodeByIndex(n, e), e._indexInList = n;
                var d = e.type = r.getUint8(), f = r.getUint16();
                for (e._setOwnerPathCount(f), i = 0; i < f; i++) e._setOwnerPathByIndex(i, t._strings[r.getUint16()]);
                var m = e._joinOwnerPath("/"), p = c[m];
                p || (c[m] = p = []), p.push(e), e.propertyOwner = t._strings[r.getUint16()];
                var T = r.getUint16();
                for (e._setPropertyCount(T), i = 0; i < T; i++) e._setPropertyByIndex(i, t._strings[r.getUint16()]);
                var E = m + "." + e.propertyOwner + "." + e._joinProperty(".");
                _[E] = e, e.fullPath = E;
                var v = r.getUint16();
                switch (e._setKeyframeCount(v), d) {
                  case 0:
                    break;

                  case 1:
                  case 3:
                  case 4:
                    e.data = R.supportWebGLPlusAnimation ? new G() : new Tt();
                    break;

                  case 2:
                    e.data = R.supportWebGLPlusAnimation ? new U() : new ht();
                    break;

                  default:
                    throw "AnimationClipParser04:unknown type.";
                }
                switch (t._version) {
                  case "LAYAANIMATION:04":
                    for (i = 0; i < v; i++) switch (d) {
                      case 0:
                        var g = new Tn();
                        e._setKeyframeByIndex(i, g), g.time = a[r.getUint16()], g.inTangent = r.getFloat32(), 
                        g.outTangent = r.getFloat32(), g.value = r.getFloat32();
                        break;

                      case 1:
                      case 3:
                      case 4:
                        var S = new Cn();
                        if (e._setKeyframeByIndex(i, S), S.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                            for (var y = S.data = new Float32Array(9), x = 0; x < 3; x++) y[x] = r.getFloat32();
                            for (x = 0; x < 3; x++) y[3 + x] = r.getFloat32();
                            for (x = 0; x < 3; x++) y[6 + x] = r.getFloat32();
                        } else {
                            var D = S.inTangent, I = S.outTangent, M = S.value;
                            D.x = r.getFloat32(), D.y = r.getFloat32(), D.z = r.getFloat32(), I.x = r.getFloat32(), 
                            I.y = r.getFloat32(), I.z = r.getFloat32(), M.x = r.getFloat32(), M.y = r.getFloat32(), 
                            M.z = r.getFloat32();
                        }
                        break;

                      case 2:
                        var A = new Vn();
                        if (e._setKeyframeByIndex(i, A), A.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                            for (y = A.data = new Float32Array(12), x = 0; x < 4; x++) y[x] = r.getFloat32();
                            for (x = 0; x < 4; x++) y[4 + x] = r.getFloat32();
                            for (x = 0; x < 4; x++) y[8 + x] = r.getFloat32();
                        } else {
                            var C = A.inTangent, L = A.outTangent, O = A.value;
                            C.x = r.getFloat32(), C.y = r.getFloat32(), C.z = r.getFloat32(), C.w = r.getFloat32(), 
                            L.x = r.getFloat32(), L.y = r.getFloat32(), L.z = r.getFloat32(), L.w = r.getFloat32(), 
                            O.x = r.getFloat32(), O.y = r.getFloat32(), O.z = r.getFloat32(), O.w = r.getFloat32();
                        }
                        break;

                      default:
                        throw "AnimationClipParser04:unknown type.";
                    }
                    break;

                  case "LAYAANIMATION:COMPRESSION_04":
                    for (i = 0; i < v; i++) switch (d) {
                      case 0:
                        g = new Tn(), e._setKeyframeByIndex(i, g), g.time = a[r.getUint16()], g.inTangent = Ct.convertToNumber(r.getUint16()), 
                        g.outTangent = Ct.convertToNumber(r.getUint16()), g.value = Ct.convertToNumber(r.getUint16());
                        break;

                      case 1:
                      case 3:
                      case 4:
                        if (S = new Cn(), e._setKeyframeByIndex(i, S), S.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                            for (y = S.data = new Float32Array(9), x = 0; x < 3; x++) y[x] = Ct.convertToNumber(r.getUint16());
                            for (x = 0; x < 3; x++) y[3 + x] = Ct.convertToNumber(r.getUint16());
                            for (x = 0; x < 3; x++) y[6 + x] = Ct.convertToNumber(r.getUint16());
                        } else D = S.inTangent, I = S.outTangent, M = S.value, D.x = Ct.convertToNumber(r.getUint16()), 
                        D.y = Ct.convertToNumber(r.getUint16()), D.z = Ct.convertToNumber(r.getUint16()), 
                        I.x = Ct.convertToNumber(r.getUint16()), I.y = Ct.convertToNumber(r.getUint16()), 
                        I.z = Ct.convertToNumber(r.getUint16()), M.x = Ct.convertToNumber(r.getUint16()), 
                        M.y = Ct.convertToNumber(r.getUint16()), M.z = Ct.convertToNumber(r.getUint16());
                        break;

                      case 2:
                        if (A = new Vn(), e._setKeyframeByIndex(i, A), A.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                            for (y = A.data = new Float32Array(12), x = 0; x < 4; x++) y[x] = Ct.convertToNumber(r.getUint16());
                            for (x = 0; x < 4; x++) y[4 + x] = Ct.convertToNumber(r.getUint16());
                            for (x = 0; x < 4; x++) y[8 + x] = Ct.convertToNumber(r.getUint16());
                        } else C = A.inTangent, L = A.outTangent, O = A.value, C.x = Ct.convertToNumber(r.getUint16()), 
                        C.y = Ct.convertToNumber(r.getUint16()), C.z = Ct.convertToNumber(r.getUint16()), 
                        C.w = Ct.convertToNumber(r.getUint16()), L.x = Ct.convertToNumber(r.getUint16()), 
                        L.y = Ct.convertToNumber(r.getUint16()), L.z = Ct.convertToNumber(r.getUint16()), 
                        L.w = Ct.convertToNumber(r.getUint16()), O.x = Ct.convertToNumber(r.getUint16()), 
                        O.y = Ct.convertToNumber(r.getUint16()), O.z = Ct.convertToNumber(r.getUint16()), 
                        O.w = Ct.convertToNumber(r.getUint16());
                        break;

                      default:
                        throw "AnimationClipParser04:unknown type.";
                    }
                }
            }
            var N = r.getUint16();
            for (n = 0; n < N; n++) {
                var V = new ie();
                V.time = Math.min(l, r.getFloat32()), V.eventName = t._strings[r.getUint16()];
                var w, P = r.getUint16();
                for (P > 0 && (V.params = w = []), i = 0; i < P; i++) switch (r.getByte()) {
                  case 0:
                    w.push(!!r.getByte());
                    break;

                  case 1:
                    w.push(r.getInt32());
                    break;

                  case 2:
                    w.push(r.getFloat32());
                    break;

                  case 3:
                    w.push(t._strings[r.getUint16()]);
                    break;

                  default:
                    throw new Error("unknown type.");
                }
                s.addEvent(V);
            }
        }, t._animationClip = null, t._reader = null, t._strings = [], t._version = null, 
        i(t, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), t;
    }(), Bt = function() {
        function t() {}
        return r(t, "laya.d3.animation.AnimationClipParser03"), t.READ_DATA = function() {
            t._DATA.offset = t._reader.getUint32(), t._DATA.size = t._reader.getUint32();
        }, t.READ_BLOCK = function() {
            for (var e = t._BLOCK.count = t._reader.getUint16(), n = t._BLOCK.blockStarts = [], i = t._BLOCK.blockLengths = [], r = 0; r < e; r++) n.push(t._reader.getUint32()), 
            i.push(t._reader.getUint32());
        }, t.READ_STRINGS = function() {
            var e = t._reader.getUint32(), n = t._reader.getUint16(), i = t._reader.pos;
            t._reader.pos = e + t._DATA.offset;
            for (var r = 0; r < n; r++) t._strings[r] = t._reader.readUTFString();
            t._reader.pos = i;
        }, t.parse = function(e, n) {
            t._animationClip = e, t._reader = n, n.__getBuffer(), t.READ_DATA(), t.READ_BLOCK(), 
            t.READ_STRINGS();
            for (var i = 0, r = t._BLOCK.count; i < r; i++) {
                var a = n.getUint16(), o = t._strings[a], s = t["READ_" + o];
                if (null == s) throw new Error("model file err,no this function:" + a + " " + o);
                s.call(null);
            }
        }, t.READ_ANIMATIONS = function() {
            var e, n = 0, i = 0, r = t._reader, a = (r.__getBuffer(), []), o = r.getUint16();
            for (a.length = o, n = 0; n < o; n++) a[n] = r.getFloat32();
            var s = t._animationClip;
            s.name = t._strings[r.getUint16()];
            var l = s._duration = r.getFloat32();
            s.islooping = !!r.getByte(), s._frameRate = r.getInt16();
            var h = r.getInt16(), u = s._nodes;
            u.count = h;
            var c = s._nodesMap = {}, _ = s._nodesDic = {};
            for (n = 0; n < h; n++) {
                e = new Se(), u.setNodeByIndex(n, e), e._indexInList = n;
                var d = e.type = r.getUint8(), f = r.getUint16();
                for (e._setOwnerPathCount(f), i = 0; i < f; i++) e._setOwnerPathByIndex(i, t._strings[r.getUint16()]);
                var m = e._joinOwnerPath("/"), p = c[m];
                p || (c[m] = p = []), p.push(e), e.propertyOwner = t._strings[r.getUint16()];
                var T = r.getUint16();
                for (e._setPropertyCount(T), i = 0; i < T; i++) e._setPropertyByIndex(i, t._strings[r.getUint16()]);
                var E = m + "." + e.propertyOwner + "." + e._joinProperty(".");
                _[E] = e, e.fullPath = E;
                var v = r.getUint16();
                switch (e._setKeyframeCount(v), d) {
                  case 0:
                    break;

                  case 1:
                  case 3:
                  case 4:
                    e.data = R.supportWebGLPlusAnimation ? new G() : new Tt();
                    break;

                  case 2:
                    e.data = R.supportWebGLPlusAnimation ? new U() : new ht();
                    break;

                  default:
                    throw "AnimationClipParser03:unknown type.";
                }
                for (i = 0; i < v; i++) switch (d) {
                  case 0:
                    var g = new Tn();
                    e._setKeyframeByIndex(i, g), g.time = a[r.getUint16()], g.inTangent = r.getFloat32(), 
                    g.outTangent = r.getFloat32(), g.value = r.getFloat32();
                    break;

                  case 1:
                  case 3:
                  case 4:
                    var S = new Cn();
                    if (e._setKeyframeByIndex(i, S), S.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                        for (var y = S.data = new Float32Array(9), x = 0; x < 3; x++) y[x] = r.getFloat32();
                        for (x = 0; x < 3; x++) y[3 + x] = r.getFloat32();
                        for (x = 0; x < 3; x++) y[6 + x] = r.getFloat32();
                    } else {
                        var D = S.inTangent, I = S.outTangent, M = S.value;
                        D.x = r.getFloat32(), D.y = r.getFloat32(), D.z = r.getFloat32(), I.x = r.getFloat32(), 
                        I.y = r.getFloat32(), I.z = r.getFloat32(), M.x = r.getFloat32(), M.y = r.getFloat32(), 
                        M.z = r.getFloat32();
                    }
                    break;

                  case 2:
                    var A = new Vn();
                    if (e._setKeyframeByIndex(i, A), A.time = a[r.getUint16()], R.supportWebGLPlusAnimation) {
                        for (y = A.data = new Float32Array(12), x = 0; x < 4; x++) y[x] = r.getFloat32();
                        for (x = 0; x < 4; x++) y[4 + x] = r.getFloat32();
                        for (x = 0; x < 4; x++) y[8 + x] = r.getFloat32();
                    } else {
                        var C = A.inTangent, L = A.outTangent, O = A.value;
                        C.x = r.getFloat32(), C.y = r.getFloat32(), C.z = r.getFloat32(), C.w = r.getFloat32(), 
                        L.x = r.getFloat32(), L.y = r.getFloat32(), L.z = r.getFloat32(), L.w = r.getFloat32(), 
                        O.x = r.getFloat32(), O.y = r.getFloat32(), O.z = r.getFloat32(), O.w = r.getFloat32();
                    }
                    break;

                  default:
                    throw "AnimationClipParser03:unknown type.";
                }
            }
            var N = r.getUint16();
            for (n = 0; n < N; n++) {
                var V = new ie();
                V.time = Math.min(l, r.getFloat32()), V.eventName = t._strings[r.getUint16()];
                var w, P = r.getUint16();
                for (P > 0 && (V.params = w = []), i = 0; i < P; i++) switch (r.getByte()) {
                  case 0:
                    w.push(!!r.getByte());
                    break;

                  case 1:
                    w.push(r.getInt32());
                    break;

                  case 2:
                    w.push(r.getFloat32());
                    break;

                  case 3:
                    w.push(t._strings[r.getUint16()]);
                    break;

                  default:
                    throw new Error("unknown type.");
                }
                s.addEvent(V);
            }
        }, t._animationClip = null, t._reader = null, t._strings = [], i(t, [ "_BLOCK", function() {
            return this._BLOCK = {
                count: 0
            };
        }, "_DATA", function() {
            return this._DATA = {
                offset: 0,
                size: 0
            };
        } ]), t;
    }(), Ut = function() {
        function t() {
            this.value = 0;
        }
        r(t, "laya.d3.shader.DefineDatas");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.add = function(t) {
            this.value |= t;
        }, e.remove = function(t) {
            this.value &= ~t;
        }, e.has = function(t) {
            return (this.value & t) > 0;
        }, e.cloneTo = function(t) {
            t.value = this.value;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, t;
    }(), zt = function() {
        function t(t, e, n) {
            this.offset = 0, this.elementFormat = null, this.elementUsage = 0, this.offset = t, 
            this.elementFormat = e, this.elementUsage = n;
        }
        return r(t, "laya.d3.graphics.VertexElement"), t;
    }(), Gt = function() {
        function t(t, e, n, i) {
            this._datas = null, this._w = 0, this._h = 0, this._minHeight = NaN, this._maxHeight = NaN, 
            this._datas = [], this._w = t, this._h = e, this._minHeight = n, this._maxHeight = i;
        }
        r(t, "laya.d3.core.HeightMap");
        var e = t.prototype;
        return e._inBounds = function(t, e) {
            return t >= 0 && t < this._h && e >= 0 && e < this._w;
        }, e.getHeight = function(t, e) {
            return this._inBounds(t, e) ? this._datas[t][e] : NaN;
        }, a(0, e, "width", function() {
            return this._w;
        }), a(0, e, "height", function() {
            return this._h;
        }), a(0, e, "maxHeight", function() {
            return this._maxHeight;
        }), a(0, e, "minHeight", function() {
            return this._minHeight;
        }), t.creatFromMesh = function(e, n, i, r) {
            for (var a = [], o = [], s = e.subMeshCount, l = 0; l < s; l++) {
                for (var h = e._getSubMesh(l), u = h._vertexBuffer, c = u.getData(), _ = [], d = 0; d < c.length; d += u.vertexDeclaration.vertexStride / 4) {
                    var f = new Tt(c[d + 0], c[d + 1], c[d + 2]);
                    _.push(f);
                }
                a.push(_);
                var m = h._indexBuffer;
                o.push(m.getData());
            }
            var p = e.bounds, T = p.getMin().x, E = p.getMin().z, v = p.getMax().x, g = p.getMax().z, S = p.getMin().y, y = p.getMax().y, x = v - T, D = g - E, I = r.x = x / (n - 1), R = r.y = D / (i - 1), M = new t(n, i, S, y), A = t._tempRay, C = A.direction;
            C.x = 0, C.y = -1, C.z = 0;
            var L = y + .1;
            A.origin.y = L;
            for (var O = 0; O < i; O++) {
                var N = E + O * R;
                M._datas[O] = [];
                for (var V = 0; V < n; V++) {
                    var w = T + V * I, P = A.origin;
                    P.x = w, P.z = N;
                    var b = t._getPosition(A, a, o);
                    M._datas[O][V] = b === Number.MAX_VALUE ? NaN : L - b;
                }
            }
            return M;
        }, t.createFromImage = function(e, n, i) {
            for (var r = e.width, a = e.height, o = new t(r, a, n, i), s = (i - n) / 254, l = e.getPixels(), h = 0, u = 0; u < a; u++) for (var c = o._datas[u] = [], _ = 0; _ < r; _++) {
                var d = l[h++], f = l[h++], m = l[h++], p = l[h++];
                c[_] = 255 == d && 255 == f && 255 == m && 255 == p ? NaN : (d + f + m) / 3 * s + n;
            }
            return o;
        }, t._getPosition = function(t, e, n) {
            for (var i = Number.MAX_VALUE, r = 0; r < e.length; r++) for (var a = e[r], o = n[r], s = 0; s < o.length; s += 3) {
                var l = a[o[s + 0]], h = a[o[s + 1]], u = a[o[s + 2]], c = ce.rayIntersectsTriangle(t, l, h, u);
                !isNaN(c) && c < i && (i = c);
            }
            return i;
        }, i(t, [ "_tempRay", function() {
            return this._tempRay = new j(new Tt(), new Tt());
        } ]), t;
    }(), Ht = function() {
        function t() {}
        return r(t, "laya.d3.shader.ShaderInit3D"), t.__init__ = function() {
            (t._rangeAttenTex = kt._buildTexture2D(1024, 1, 2, Nt.lightAttenTexture)).wrapModeU = 1, 
            t._rangeAttenTex.wrapModeV = 1, t._rangeAttenTex.lock = !0, Vt.SHADERDEFINE_HIGHPRECISION = Vt.registerPublicDefine("HIGHPRECISION"), 
            Qn.SHADERDEFINE_FOG = Vt.registerPublicDefine("FOG"), Qn.SHADERDEFINE_DIRECTIONLIGHT = Vt.registerPublicDefine("DIRECTIONLIGHT"), 
            Qn.SHADERDEFINE_POINTLIGHT = Vt.registerPublicDefine("POINTLIGHT"), Qn.SHADERDEFINE_SPOTLIGHT = Vt.registerPublicDefine("SPOTLIGHT"), 
            Qn.SHADERDEFINE_CAST_SHADOW = Vt.registerPublicDefine("CASTSHADOW"), Qn.SHADERDEFINE_SHADOW_PSSM1 = Vt.registerPublicDefine("SHADOWMAP_PSSM1"), 
            Qn.SHADERDEFINE_SHADOW_PSSM2 = Vt.registerPublicDefine("SHADOWMAP_PSSM2"), Qn.SHADERDEFINE_SHADOW_PSSM3 = Vt.registerPublicDefine("SHADOWMAP_PSSM3"), 
            Qn.SHADERDEFINE_SHADOW_PCF_NO = Vt.registerPublicDefine("SHADOWMAP_PCF_NO"), Qn.SHADERDEFINE_SHADOW_PCF1 = Vt.registerPublicDefine("SHADOWMAP_PCF1"), 
            Qn.SHADERDEFINE_SHADOW_PCF2 = Vt.registerPublicDefine("SHADOWMAP_PCF2"), Qn.SHADERDEFINE_SHADOW_PCF3 = Vt.registerPublicDefine("SHADOWMAP_PCF3"), 
            Qn.SHADERDEFINE_REFLECTMAP = Vt.registerPublicDefine("REFLECTMAP"), Vt.addInclude("Lighting.glsl", "\nstruct DirectionLight {\n\tvec3 Color;\n\tvec3 Direction;\n};\n\nstruct PointLight {\n\tvec3 Color;\n\tvec3 Position;\n\tfloat Range;\n};\n\nstruct SpotLight {\n\tvec3 Color;\n\tvec3 Position;\n\tvec3 Direction;\n\tfloat Spot;\n\tfloat Range;\n};\n\n// Laya中使用衰减纹理\nfloat LayaAttenuation(in vec3 L,in float invLightRadius) {\n\tfloat fRatio = clamp(length(L) * invLightRadius,0.0,1.0);\n\tfRatio *= fRatio;\n\treturn 1.0 / (1.0 + 25.0 * fRatio)* clamp(4.0*(1.0 - fRatio),0.0,1.0); //fade to black as if 4 pixel texture\n}\n\n// Same as Just Cause 2 and Crysis 2 (you can read GPU Pro 1 book for more information)\nfloat BasicAttenuation(in vec3 L,in float invLightRadius) {\n\tvec3 distance = L * invLightRadius;\n\tfloat attenuation = clamp(1.0 - dot(distance, distance),0.0,1.0); // Equals float attenuation = saturate(1.0f - dot(L, L) / (lightRadius *  lightRadius));\n\treturn attenuation * attenuation;\n}\n\n// Inspired on http://fools.slindev.com/viewtopic.php?f=11&t=21&view=unread#unread\nfloat NaturalAttenuation(in vec3 L,in float invLightRadius) {\n\tfloat attenuationFactor = 30.0;\n\tvec3 distance = L * invLightRadius;\n\tfloat attenuation = dot(distance, distance); // Equals float attenuation = dot(L, L) / (lightRadius *  lightRadius);\n\tattenuation = 1.0 / (attenuation * attenuationFactor + 1.0);\n\t// Second we move down the function therewith it reaches zero at abscissa 1:\n\tattenuationFactor = 1.0 / (attenuationFactor + 1.0); //attenuationFactor contains now the value we have to subtract\n\tattenuation = max(attenuation - attenuationFactor, 0.0); // The max fixes a bug.\n\t// Finally we expand the equation along the y-axis so that it starts with a function value of 1 again.\n\tattenuation /= 1.0 - attenuationFactor;\n\treturn attenuation;\n}\n\nvoid LayaAirBlinnPhongLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir,in vec3 lightColor, in vec3 lightVec,out vec3 diffuseColor,out vec3 specularColor) {\n\tmediump vec3 h = normalize(viewDir-lightVec);\n\tlowp float ln = max (0.0, dot (-lightVec,normal));\n\tfloat nh = max (0.0, dot (h,normal));\n\tdiffuseColor=lightColor * ln;\n\tspecularColor=lightColor *specColor*pow (nh, specColorIntensity*128.0) * gloss;\n}\n\nvoid LayaAirBlinnPhongDiectionLight (in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in DirectionLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec=normalize(light.Direction);\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,lightVec,diffuseColor,specularColor);\n}\n\nvoid LayaAirBlinnPhongPointLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in PointLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec =  pos-light.Position;\n\t//if( length(lightVec) > light.Range )\n\t//\treturn;\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,lightVec/length(lightVec),diffuseColor,specularColor);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range);\n\tdiffuseColor *= attenuate;\n\tspecularColor*= attenuate;\n}\n\nvoid LayaAirBlinnPhongSpotLight (in vec3 pos,in vec3 specColor,in float specColorIntensity,in vec3 normal,in vec3 gloss, in vec3 viewDir, in SpotLight light,out vec3 diffuseColor,out vec3 specularColor) {\n\tvec3 lightVec =  pos-light.Position;\n\t//if( length(lightVec) > light.Range)\n\t//\treturn;\n\n\tvec3 normalLightVec=lightVec/length(lightVec);\n\tLayaAirBlinnPhongLight(specColor,specColorIntensity,normal,gloss,viewDir,light.Color,normalLightVec,diffuseColor,specularColor);\n\tvec2 cosAngles=cos(vec2(light.Spot,light.Spot*0.5)*0.5);//ConeAttenuation\n\tfloat dl=dot(normalize(light.Direction),normalLightVec);\n\tdl*=smoothstep(cosAngles[0],cosAngles[1],dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range)*dl;\n\tdiffuseColor *=attenuate;\n\tspecularColor *=attenuate;\n}\n\nvec3 NormalSampleToWorldSpace(vec3 normalMapSample, vec3 unitNormal, vec3 tangent,vec3 binormal) {\n\tvec3 normalT =vec3(2.0*normalMapSample.x - 1.0,1.0-2.0*normalMapSample.y,2.0*normalMapSample.z - 1.0);\n\n\t// Build orthonormal basis.\n\tvec3 N = normalize(unitNormal);\n\tvec3 T = normalize(tangent);\n\tvec3 B = normalize(binormal);\n\tmat3 TBN = mat3(T, B, N);\n\n\t// Transform from tangent space to world space.\n\tvec3 bumpedNormal = TBN*normalT;\n\n\treturn bumpedNormal;\n}\n\nvec3 NormalSampleToWorldSpace1(vec4 normalMapSample, vec3 tangent, vec3 binormal, vec3 unitNormal) {\n\tvec3 normalT;\n\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\n\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\n\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\n\n\tvec3 T = normalize(tangent);\n\tvec3 B = normalize(binormal);\n\tvec3 N = normalize(unitNormal);\n\tmat3 TBN = mat3(T, B, N);\n\n\t// Transform from tangent space to world space.\n\tvec3 bumpedNormal = TBN * normalize(normalT);\n\n\treturn bumpedNormal;\n}\n\nvec3 DecodeLightmap(vec4 color) {\n\treturn color.rgb*color.a*5.0;\n}\n\nvec2 TransformUV(vec2 texcoord,vec4 tilingOffset) {\n\tvec2 transTexcoord=vec2(texcoord.x,texcoord.y-1.0)*tilingOffset.xy+vec2(tilingOffset.z,-tilingOffset.w);\n\ttransTexcoord.y+=1.0;\n\treturn transTexcoord;\n}\n\nvec4 remapGLPositionZ(vec4 position) {\n\tposition.z=position.z * 2.0 - position.w;\n\treturn position;\n}\n\nmat3 inverse(mat3 m) {\n  float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n  float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n  float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n  float b01 = a22 * a11 - a12 * a21;\n  float b11 = -a22 * a10 + a12 * a20;\n  float b21 = a21 * a10 - a11 * a20;\n\n  float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11),\n              b11, (a22 * a00 - a02 * a20), (-a12 * a00 + a02 * a10),\n              b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10)) / det;\n}\n\n"), 
            Vt.addInclude("ShadowHelper.glsl", "uniform sampler2D u_shadowMap1;\nuniform sampler2D u_shadowMap2;\nuniform sampler2D u_shadowMap3;\nuniform vec2\t  u_shadowPCFoffset;\nuniform vec4     u_shadowPSSMDistance;\nvec4 packDepth(const in float depth)\n{\n\tconst vec4 bitShift = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);\n\tconst vec4 bitMask\t= vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);\n\tvec4 res = mod(depth*bitShift*vec4(255), vec4(256))/vec4(255);\n\tres -= res.xxyz * bitMask;\n\treturn res;\n}\nfloat unpackDepth(const in vec4 rgbaDepth)\n{\n\tconst vec4 bitShift = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);\n\tfloat depth = dot(rgbaDepth, bitShift);\n\treturn depth;\n}\nfloat tex2DPCF( sampler2D shadowMap,vec2 texcoord,vec2 invsize,float zRef )\n{\n\tvec2 texelpos =texcoord / invsize;\n\tvec2 lerps = fract( texelpos );\n\tfloat sourcevals[4];\n\tsourcevals[0] = float( unpackDepth(texture2D(shadowMap,texcoord)) > zRef );\n\tsourcevals[1] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x,0))) > zRef );\n\tsourcevals[2] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(0,invsize.y))) > zRef );\n\tsourcevals[3] = float( unpackDepth(texture2D(shadowMap,texcoord + vec2(invsize.x, invsize.y) )) > zRef );\n\treturn mix( mix(sourcevals[0],sourcevals[2],lerps.y),mix(sourcevals[1],sourcevals[3],lerps.y),lerps.x );\n}\nfloat getShadowPSSM3( sampler2D shadowMap1,sampler2D shadowMap2,sampler2D shadowMap3,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tint nPSNum = int(posViewZ>pssmDistance.x);\n\tnPSNum += int(posViewZ>pssmDistance.y);\n\tnPSNum += int(posViewZ>pssmDistance.z);\n\t//真SB,webgl不支持在PS中直接访问数组\n\tmat4 lightVP;\n\tif( nPSNum == 0 )\n\t{\n\t\tlightVP = lightShadowVP[1];\n\t}\n\telse if( nPSNum == 1 )\n\t{\n\t\tlightVP = lightShadowVP[2];\n\t}\n\telse if( nPSNum == 2 )\n\t{\n\t\tlightVP = lightShadowVP[3];\n\t}\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\n\t//为了效率，在CPU计算/2.0 + 0.5\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\n\tfloat fMyZ = vText.z - zBias;\n\t/*\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\tbool bInFrustum = all( bInFrustumVec );\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\tbool bFrustumTest = all( bFrustumTestVec );\n\tif ( bFrustumTest ) \n\t*/\n\tif( fMyZ <= 1.0 )\n\t{\n\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue = value/4.0;\n\t\t} \n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF2\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap3,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF_NO\n\t\tvec4 color;\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 2 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap3,vText.xy );\n\t\t}\n\t\tzdepth = unpackDepth(color);\n\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t}\n\treturn value;\n}\nfloat getShadowPSSM2( sampler2D shadowMap1,sampler2D shadowMap2,mat4 lightShadowVP[4],vec4 pssmDistance,vec2 shadowPCFOffset,vec3 worldPos,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tint nPSNum = int(posViewZ>pssmDistance.x);\n\tnPSNum += int(posViewZ>pssmDistance.y);\n\t//真SB,webgl不支持在PS中直接访问数组\n\tmat4 lightVP;\n\tif( nPSNum == 0 )\n\t{\n\t\tlightVP = lightShadowVP[1];\n\t}\n\telse if( nPSNum == 1 )\n\t{\n\t\tlightVP = lightShadowVP[2];\n\t}\n\tvec4 vLightMVPPos = lightVP * vec4(worldPos,1.0);\n\t//为了效率，在CPU计算/2.0 + 0.5\n\t//vec3 vText = (vLightMVPPos.xyz / vLightMVPPos.w)/2.0 + 0.5;\n\tvec3 vText = vLightMVPPos.xyz / vLightMVPPos.w;\n\tfloat fMyZ = vText.z - zBias;\n\t/*\n\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\tbool bInFrustum = all( bInFrustumVec );\n\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\tbool bFrustumTest = all( bFrustumTestVec );\n\tif ( bFrustumTest ) \n\t*/\n\tif( fMyZ <= 1.0 )\n\t{\n\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,\tfMyZ );\n\t\t\tvalue = value/4.0;\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF2\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap2,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tvec4 color = texture2D( shadowMap2,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n\t\t}\n#endif\n#ifdef SHADOWMAP_PCF_NO\n\t\tvec4 color;\n\t\tif ( nPSNum == 0 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap1,vText.xy );\n\t\t}\n\t\telse if( nPSNum == 1 )\n\t\t{\n\t\t\tcolor = texture2D( shadowMap2,vText.xy );\n\t\t}\n\t\tzdepth = unpackDepth(color);\n\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t}\n\treturn value;\n}\nfloat getShadowPSSM1( sampler2D shadowMap1,vec4 lightMVPPos,vec4 pssmDistance,vec2 shadowPCFOffset,float posViewZ,float zBias )\n{\n\tfloat value = 1.0;\n\tif( posViewZ < pssmDistance.x )\n\t{\n\t\tvec3 vText = lightMVPPos.xyz / lightMVPPos.w;\n\t\tfloat fMyZ = vText.z - zBias;\n\t\t/*\n\t\tbvec4 bInFrustumVec = bvec4 ( vText.x >= 0.0, vText.x <= 1.0, vText.y >= 0.0, vText.y <= 1.0 );\n\t\tbool bInFrustum = all( bInFrustumVec );\n\t\tbvec2 bFrustumTestVec = bvec2( bInFrustum, fMyZ <= 1.0 );\n\t\tbool bFrustumTest = all( bFrustumTestVec );\n\t\t*/\n\t\tif ( fMyZ <= 1.0 ) \n\t\t{\n\t\t\tfloat zdepth=0.0;\n#ifdef SHADOWMAP_PCF3\n\t\t\tvalue =  tex2DPCF( shadowMap1, vText.xy,shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.xy),shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(shadowPCFOffset.x,0),shadowPCFOffset,fMyZ );\n\t\t\tvalue += tex2DPCF( shadowMap1, vText.xy+vec2(0,shadowPCFOffset.y),shadowPCFOffset,fMyZ );\n\t\t\tvalue = value/4.0;\n#endif\n#ifdef SHADOWMAP_PCF2\t\t\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n#endif\n#ifdef SHADOWMAP_PCF1\n\t\t\tvalue = tex2DPCF( shadowMap1,vText.xy,shadowPCFOffset,fMyZ);\n#endif\n#ifdef SHADOWMAP_PCF_NO\t\t\n\t\t\tvec4 color = texture2D( shadowMap1,vText.xy );\n\t\t\tzdepth = unpackDepth(color);\n\t\t\tvalue = float(fMyZ < zdepth);\n#endif\n\t\t}\n\t}\n\treturn value;\n}"), 
            Vt.addInclude("BRDF.glsl", "struct LayaGI\n{\n\tvec3 diffuse;\n\tvec3 specular;\n};\n\nvec4 LayaAirBRDF(in vec3 diffuseColor, in vec3 specularColor, in float oneMinusReflectivity, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat perceptualRoughness = SmoothnessToPerceptualRoughness(smoothness);\n\tvec3 halfDir = SafeNormalize(viewDir - lightDir);\n\t\n\tfloat nv = abs(dot(normal, viewDir));\n\t\n\tfloat nl = clamp(dot(normal,   -lightDir),  0.0, 1.0);\n\tfloat nh = clamp(dot(normal,     halfDir),  0.0, 1.0);\n\tfloat lv = clamp(dot(lightDir,   viewDir),  0.0, 1.0);\n\tfloat lh = clamp(dot(lightDir,  -halfDir),  0.0, 1.0);\n\t\n\tfloat diffuseTerm = DisneyDiffuse(nv, nl, lh, perceptualRoughness) * nl;\n\t\n\tfloat roughness = PerceptualRoughnessToRoughness(perceptualRoughness);\n\t\n\t//#if UNITY_BRDF_GGX\n\tfloat V = SmithJointGGXVisibilityTerm(nl, nv, roughness);\n\tfloat D = GGXTerm(nh, roughness);\n\t\n\tfloat specularTerm = V * D * PI;\n\t\n\tspecularTerm = sqrt(max(0.0001, specularTerm));\n\tspecularTerm = max(0.0, specularTerm * nl);\n\t\n\tfloat surfaceReduction = 1.0 - 0.28 * roughness * perceptualRoughness;\n\tfloat grazingTerm = clamp(smoothness + (1.0 - oneMinusReflectivity), 0.0, 1.0);\n\t\n\tvec4 color;\n\tcolor.rgb = diffuseColor * (gi.diffuse + lightColor * diffuseTerm) \n\t\t\t  + specularTerm * lightColor * FresnelTerm (specularColor, lh)\n\t\t\t  + surfaceReduction * gi.specular * FresnelLerp(specularColor, vec3(grazingTerm), nv);\n\t\n\treturn color;\n}"), 
            Vt.addInclude("PBRUtils.glsl", "struct DirectionLight\n{\n\tvec3 Color;\n\tvec3 Direction;\n};\n\nstruct PointLight\n{\n\tvec3 Color;\n\tvec3 Position;\n\tfloat Range;\n};\n\nstruct SpotLight\n{\n\tvec3 Color;\n\tvec3 Position;\n\tvec3 Direction;\n\tfloat SpotAngle;\n\tfloat Range;\n};\n\nvec3 UnpackScaleNormal(in vec2 uv0)\n{\n\t#ifdef NORMALTEXTURE\n\t\tvec3 normalT;\n\t\tvec4 normalMapSample = texture2D(u_NormalTexture, uv0);\n\t\tnormalT.x = 2.0 * normalMapSample.x - 1.0;\n\t\tnormalT.y = 1.0 - 2.0 * normalMapSample.y;\n\t\tnormalT.xy *= u_normalScale;\n\t\tnormalT.z = sqrt(1.0 - clamp(dot(normalT.xy, normalT.xy), 0.0, 1.0));\n\t\t\n\t\tvec3 T = normalize(v_Tangent);\n\t\tvec3 B = normalize(v_Binormal);\n\t\tvec3 N = normalize(v_Normal);\n\t\tmat3 TBN = mat3(T, B, N);\n\t\t\n\t\tvec3 bumpedNormal = TBN * normalize(normalT);\n\t\treturn bumpedNormal;\n\t#else\n\t\treturn normalize(v_Normal);\n\t#endif\n}\n\nvec4 DielectricSpecularColor = vec4(0.220916301, 0.220916301, 0.220916301, 1.0 - 0.220916301);\n\nfloat PI = 3.14159265359;\n\nvec3 FresnelTerm (in vec3 F0, in float cosA)\n{\n\treturn F0 + (vec3(1.0) - F0) * pow(1.0 - cosA, 5.0);\n}\n\nvec3 FresnelLerp (in vec3 F0, in vec3 F90, float cosA)\n{\n    float t = pow(1.0 - cosA, 5.0);\n    return mix(F0, F90, t);\n}\n\nfloat PerceptualRoughnessToRoughness(in float perceptualRoughness)\n{\n\treturn perceptualRoughness * perceptualRoughness;\n}\n\nfloat PerceptualRoughnessToSpecularPower(in float perceptualRoughness)\n{\n\tfloat m = PerceptualRoughnessToRoughness(perceptualRoughness);\n\tfloat sq = max(0.0001, m * m);\n\tfloat n = (2.0 / sq) - 2.0;\n\tn = max(n, 0.0001);\n\treturn n;\n}\n\nfloat RoughnessToPerceptualRoughness(in float roughness)\n{\n\treturn sqrt(roughness);\n}\n\nfloat SmoothnessToRoughness(in float smoothness)\n{\n\treturn (1.0 - smoothness) * (1.0 - smoothness);\n}\n\nfloat SmoothnessToPerceptualRoughness(in float smoothness)\n{\n\treturn (1.0 - smoothness);\n}\n\nvec3 SafeNormalize(in vec3 inVec)\n{\n\tfloat dp3 = max(0.001,dot(inVec,inVec));\n\treturn inVec * (1.0 / sqrt(dp3));\n}\n\nfloat DisneyDiffuse(in float NdotV, in float NdotL, in float LdotH, in float perceptualRoughness)\n{\n\tfloat fd90 = 0.5 + 2.0 * LdotH * LdotH * perceptualRoughness;\n\tfloat lightScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotL,5.0));\n\tfloat viewScatter\t= (1.0 + (fd90 - 1.0) * pow(1.0 - NdotV,5.0));\n\n\treturn lightScatter * viewScatter;\n}\n\nfloat SmithJointGGXVisibilityTerm (float NdotL, float NdotV, float roughness)\n{\n\tfloat a = roughness;\n\tfloat lambdaV = NdotL * (NdotV * (1.0 - a) + a);\n\tfloat lambdaL = NdotV * (NdotL * (1.0 - a) + a);\n\n\treturn 0.5 / (lambdaV + lambdaL + 0.00001);\n}\n\nfloat GGXTerm (float NdotH, float roughness)\n{\n\tfloat a2 = roughness * roughness;\n\tfloat d = (NdotH * a2 - NdotH) * NdotH + 1.0;\n\treturn 0.31830988618 * a2 / (d * d + 0.0000001);\n}\n\nfloat OneMinusReflectivityFromMetallic(in float metallic)\n{\n\tfloat oneMinusDielectricSpec = DielectricSpecularColor.a;\n\treturn oneMinusDielectricSpec - metallic * oneMinusDielectricSpec;\n}\n\nfloat SpecularStrength(vec3 specular)\n{\n    //(SHADER_TARGET < 30)return specular.r; \n    return max (max (specular.r, specular.g), specular.b);\n}\n\nvec3 DiffuseAndSpecularFromMetallic(in vec3 diffuseColor, in float metallic, out vec3 specularColor, out float oneMinusReflectivity)\n{\n\tspecularColor = mix(DielectricSpecularColor.rgb, diffuseColor, metallic);\n\toneMinusReflectivity = OneMinusReflectivityFromMetallic(metallic);\n\treturn diffuseColor * oneMinusReflectivity;\n}\n\nvec3 EnergyConservationBetweenDiffuseAndSpecular(in vec3 diffuseColor, in vec3 specularColor, out float oneMinusReflectivity)\n{\n\toneMinusReflectivity = 1.0 - SpecularStrength(specularColor);\n\treturn diffuseColor * oneMinusReflectivity;\n}\n\nvec4 Occlusion(in vec2 uv0){\n\t#ifdef OCCLUSIONTEXTURE\n\t\tvec4 occlusionTextureColor = texture2D(u_OcclusionTexture, uv0);\n\t\tfloat occ = occlusionTextureColor.g;\n\t\tfloat oneMinusT = 1.0 - u_occlusionStrength;\n\t\tfloat lerpOneTo = oneMinusT + occ * u_occlusionStrength;\n\t\treturn occlusionTextureColor * lerpOneTo;\n\t#else\n\t\treturn vec4(1.0);\n\t#endif\n}\n\nvec2 ParallaxOffset(in vec3 viewDir){\n\t#ifdef PARALLAXTEXTURE\n\t\tfloat h = texture2D(u_ParallaxTexture, v_Texcoord0).g;\n\t\th = h * u_parallaxScale - u_parallaxScale / 2.0;\n\t\tvec3 v = viewDir;\n\t\tv.z += 0.42;\n\t\tvec2 offset = h * (v.xy / v.z);\n\t\treturn v_Texcoord0 + offset;\n\t#else\n\t\treturn v_Texcoord0;\n\t#endif\n}\n\nvec3 ReflectCubeMap(in vec3 viewDir, in vec3 normal){\n\t#ifdef REFLECTMAP\n\t\tvec3 incident = -viewDir;\n\t\tvec3 reflectionVector = reflect(incident, normal);\n\t\tvec3 reflectionColor = textureCube(u_ReflectTexture, vec3(-reflectionVector.x, reflectionVector.yz)).rgb;\n\t\treturn reflectionColor * u_ReflectIntensity;\n\t#else\n\t\treturn vec3(0.0);\n\t#endif\n}\n\nfloat LayaAttenuation(in vec3 L, in float invLightRadius)\n{\n\tfloat fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\n\tfRatio *= fRatio;\n\treturn 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0*(1.0 - fRatio), 0.0, 1.0); //fade to black as if 4 pixel texture\n}\n\nvec3 LayaPreMultiplyAlpha(vec3 diffColor, float alpha, float oneMinusReflectivity, out float outModifiedAlpha)\n{\n\t#ifdef ALPHAPREMULTIPLY\n\t\tdiffColor *= alpha;\n\t\toutModifiedAlpha = 1.0 - oneMinusReflectivity + alpha * oneMinusReflectivity;\n\t#else\n\t\toutModifiedAlpha = alpha;\n\t#endif\n\treturn diffColor;\n}\n\n"), 
            Vt.addInclude("PBRStandardLighting.glsl", '#include "PBRUtils.glsl"\n#include "BRDF.glsl"\n\nvec4 PBRStandardLight(in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat oneMinusReflectivity;\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat alpha;\n\t\n\tdiffuseColor = DiffuseAndSpecularFromMetallic (albedoColor.rgb, metallic, specularColor, oneMinusReflectivity);\n\t\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\n\t\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\n\tcolor.a = alpha;\n\treturn color;\n}\n\nvec4 PBRStandardDiectionLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi)\n{\n\tvec3 lightVec = normalize(light.Direction);\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi);\n}\n\nvec4 PBRStandardPointLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightCoord = (u_PointLightMatrix * vec4(pos, 1.0)).xyz;\n\tfloat distance = dot(lightCoord, lightCoord);\n\tfloat attenuate = texture2D(u_RangeTexture, vec2(distance)).w;\n\tvec3 lightVec = normalize(pos - light.Position);\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\nvec4 PBRStandardSpotLight (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightVec =  pos - light.Position;\n\tvec3 normalLightVec = normalize(lightVec);\n\tvec2 cosAngles = cos(vec2(light.SpotAngle, light.SpotAngle*0.5) * 0.5);//ConeAttenuation\n\tfloat dl = dot(normalize(light.Direction), normalLightVec);\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range) * dl;\n\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n//{\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\n//\t\n//\tfloat distance = dot(lightCoord, lightCoord);\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\n//\tvec3 lightVec = normalize(pos - light.Position);\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n//}\n\nvec2 MetallicGloss(in float albedoTextureAlpha, in vec2 uv0)\n{\n\tvec2 mg;\n\t\n\t#ifdef METALLICGLOSSTEXTURE\n\t\tvec4 metallicGlossTextureColor = texture2D(u_MetallicGlossTexture, uv0);\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tmg.r = metallicGlossTextureColor.r;\n\t\t\tmg.g = albedoTextureAlpha;\n\t\t#else\n\t\t    mg = metallicGlossTextureColor.ra;\n\t\t#endif\n\t\tmg.g *= u_smoothnessScale;\n\t#else\n\t\tmg.r = u_metallic;\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tmg.g = albedoTextureAlpha * u_smoothnessScale;\n\t\t#else\n\t\t\tmg.g = u_smoothness;\n\t\t#endif\n\t#endif\n\t\n\treturn mg;\n}\n\n'), 
            Vt.addInclude("PBRSpecularLighting.glsl", '#include "PBRUtils.glsl"\n#include "BRDF.glsl"\n\nvec4 PBRSpecularLight(in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in vec3 lightDir, in vec3 lightColor, in LayaGI gi)\n{\n\tfloat oneMinusReflectivity;\n\tvec3 diffuseColor;\n\tfloat alpha;\n\t\n\tdiffuseColor = EnergyConservationBetweenDiffuseAndSpecular (albedoColor.rgb, specularColor, oneMinusReflectivity);\n\t\n\tdiffuseColor = LayaPreMultiplyAlpha(diffuseColor, albedoColor.a, oneMinusReflectivity, alpha);\n\t\n\tvec4 color = LayaAirBRDF(diffuseColor, specularColor, oneMinusReflectivity, smoothness, normal, viewDir, lightDir, lightColor, gi);\n\tcolor.a = alpha;\n\treturn color;\n}\n\nvec4 PBRSpecularDiectionLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in DirectionLight light, in LayaGI gi)\n{\n\tvec3 lightVec = normalize(light.Direction);\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi);\n}\n\nvec4 PBRSpecularPointLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in PointLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightCoord = (u_PointLightMatrix * vec4(pos, 1.0)).xyz;\n\tfloat distance = dot(lightCoord, lightCoord);\n\tfloat attenuate = texture2D(u_RangeTexture, vec2(distance)).w;\n\tvec3 lightVec = normalize(pos - light.Position);\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\nvec4 PBRSpecularSpotLight (in vec4 albedoColor, in vec3 specularColor, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n{\n\tvec3 lightVec =  pos - light.Position;\n\tvec3 normalLightVec = normalize(lightVec);\n\tvec2 cosAngles = cos(vec2(light.SpotAngle, light.SpotAngle*0.5) * 0.5);//ConeAttenuation\n\tfloat dl = dot(normalize(light.Direction), normalLightVec);\n\tdl *= smoothstep(cosAngles[0], cosAngles[1], dl);\n\tfloat attenuate = LayaAttenuation(lightVec, 1.0/light.Range) * dl;\n\treturn PBRSpecularLight(albedoColor, specularColor, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n}\n\n//vec4 PBRStandardSpotLight1 (in vec4 albedoColor, in float metallic, in float smoothness, in vec3 normal, in vec3 viewDir, in SpotLight light, in vec3 pos, in LayaGI gi)\n//{\n//\tvec4 lightCoord = u_SpotLightMatrix * vec4(pos, 1.0);\n//\t\n//\tfloat distance = dot(lightCoord, lightCoord);\n//\tfloat attenuate = (lightCoord.z < 0.0) ? texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//float attenuate = (lightCoord.z < 0.0) ? texture2D(u_AngleTexture, vec2(lightCoord.x / lightCoord.w + 0.5, lightCoord.y / lightCoord.w + 0.5)).r * texture2D(u_RangeTexture, vec2(distance)).w : 0.0;\n//\t//vec2 _uv = vec2(pos.x * 180.0/(2.0 * pos.z) + 0.5, pos.y * 180.0/(2.0 * pos.z) + 0.5);\n//\tvec3 lightVec = normalize(pos - light.Position);\n//\treturn PBRStandardLight(albedoColor, metallic, smoothness, normal, viewDir, lightVec, light.Color, gi) * attenuate;\n//}\n\nvec4 SpecularGloss(float albedoTextureAlpha, in vec2 uv0)\n{\n    vec4 sg;\n\t\n\t#ifdef SPECULARTEXTURE\n\t\tvec4 specularTextureColor = texture2D(u_SpecularTexture, uv0);\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tsg.rgb = specularTextureColor.rgb;\n\t\t\tsg.a = albedoTextureAlpha;\n\t\t#else\n\t\t\tsg = specularTextureColor;\n\t\t#endif\n\t\tsg.a *= u_smoothnessScale;\n\t#else\n\t\tsg.rgb = u_SpecularColor.rgb;\n\t\t#ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t\t\tsg.a = albedoTextureAlpha * u_smoothnessScale;\n\t\t#else\n\t\t\tsg.a = u_smoothness;\n\t\t#endif\n\t#endif\n\t\n    return sg;\n}\n\n'), 
            Vt.addInclude("Colors.glsl", '#include "StdLib.glsl";\n\n#define EPSILON 1.0e-4\n\n// Quadratic color thresholding\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\n\t// Pixel brightness\n\tmediump float br = max3(color.r, color.g, color.b);\n\n\t// Under-threshold part: quadratic curve\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\n\trq = curve.z * rq * rq;\n\n\t// Combine and apply the brightness response curve.\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\n\n\treturn color;\n}\n\n//\n// sRGB transfer functions\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\n//\nmediump vec3 SRGBToLinear(mediump vec3 c) {\n\t#ifdef USE_VERY_FAST_SRGB\n\t\treturn c * c;\n\t#elif defined(USE_FAST_SRGB)\n\t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\n\t#else\n\t\tmediump vec3 linearRGBLo = c / 12.92;\n\t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\n\t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\n\t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\n\t\treturn linearRGB;\n\t#endif\n}\n\nmediump vec3 LinearToSRGB(mediump vec3 c) {\n\t#ifdef USE_VERY_FAST_SRGB\n\t\treturn sqrt(c);\n\t#elif defined(USE_FAST_SRGB)\n\t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\n\t#else\n\t\tmediump vec3 sRGBLo = c * 12.92;\n\t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\n\t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\n\t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\n\t\treturn sRGB;\n\t#endif\n}'), 
            Vt.addInclude("Sampling.glsl", "// Better, temporally stable box filtering\n// [Jimenez14] http://goo.gl/eomGso\n// . . . . . . .\n// . A . B . C .\n// . . D . E . .\n// . F . G . H .\n// . . I . J . .\n// . K . L . M .\n// . . . . . . .\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    mediump vec4 A = texture2D(tex, uv + texelSize * vec2(-1.0, -1.0));\n    mediump vec4 B = texture2D(tex, uv + texelSize * vec2( 0.0, -1.0));\n    mediump vec4 C = texture2D(tex, uv + texelSize * vec2( 1.0, -1.0));\n    mediump vec4 D = texture2D(tex, uv + texelSize * vec2(-0.5, -0.5));\n    mediump vec4 E = texture2D(tex, uv + texelSize * vec2( 0.5, -0.5));\n    mediump vec4 F = texture2D(tex, uv + texelSize * vec2(-1.0,  0.0));\n    mediump vec4 G = texture2D(tex, uv);\n    mediump vec4 H = texture2D(tex, uv + texelSize * vec2( 1.0,  0.0));\n    mediump vec4 I = texture2D(tex, uv + texelSize * vec2(-0.5,  0.5));\n    mediump vec4 J = texture2D(tex, uv + texelSize * vec2( 0.5,  0.5));\n    mediump vec4 K = texture2D(tex, uv + texelSize * vec2(-1.0,  1.0));\n    mediump vec4 L = texture2D(tex, uv + texelSize * vec2( 0.0,  1.0));\n    mediump vec4 M = texture2D(tex, uv + texelSize * vec2( 1.0,  1.0));\n\n\tmediump vec2 scale= vec2(0.5, 0.125);\n    mediump vec2 div = (1.0 / 4.0) * scale;\n\n    mediump vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n\n    return o;\n}\n\n// Standard box filtering\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}\n\n// 9-tap bilinear upsampler (tent filter)\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\n// . 2 . 4 . 2 .\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\n\n    mediump vec4 s =  texture2D(tex, uv - d.xy);\n    s += texture2D(tex, uv - d.wy) * 2.0;\n    s += texture2D(tex, uv - d.zy);\n\n    s += texture2D(tex, uv + d.zw) * 2.0;\n    s += texture2D(tex, uv) * 4.0;\n    s += texture2D(tex,\tuv + d.xw) * 2.0;\n\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.wy) * 2.0;\n    s += texture2D(tex, uv + d.xy);\n\n    return s * (1.0 / 16.0);\n}\n\n// Standard box filtering\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * (sampleScale * 0.5);\n\n    mediump vec4 s =  texture2D(tex, uv + d.xy);\n    s += texture2D(tex, uv + d.zy);\n    s += texture2D(tex, uv + d.xw);\n    s += texture2D(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}"), 
            Vt.addInclude("StdLib.glsl", "#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\n\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nmediump vec4 safeHDR(mediump vec4 c)\n{\n    return min(c, HALF_MAX);\n}\n\nfloat max3(float a, float b, float c)\n{\n    return max(max(a, b), c);\n}\n\nvec3 positivePow(vec3 base, vec3 power)\n{\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\n}");
            var e, n, i = {
                a_Position: 0,
                a_Color: 1,
                a_Normal: 3,
                a_Texcoord0: 2,
                a_Texcoord1: 7,
                a_BoneWeights: 6,
                a_BoneIndices: 5,
                a_Tangent0: 4,
                a_MvpMatrix: 12,
                a_WorldMat: 8
            }, r = {
                u_Bones: 0,
                u_DiffuseTexture: 1,
                u_SpecularTexture: 1,
                u_NormalTexture: 1,
                u_AlphaTestValue: 1,
                u_DiffuseColor: 1,
                u_MaterialSpecular: 1,
                u_Shininess: 1,
                u_TilingOffset: 1,
                u_WorldMat: 2,
                u_MvpMatrix: 2,
                u_LightmapScaleOffset: 2,
                u_LightMap: 2,
                u_CameraPos: 3,
                u_ReflectTexture: 4,
                u_ReflectIntensity: 4,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4,
                "u_DirectionLight.Color": 4,
                "u_DirectionLight.Direction": 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.Spot": 4,
                "u_SpotLight.Color": 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            };
            e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\n\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))||(defined(LIGHTMAP)&&defined(UV))\n\tattribute vec2 a_Texcoord0;\n\tvarying vec2 v_Texcoord0;\n#endif\n\n#if defined(LIGHTMAP)&&defined(UV1)\n\tattribute vec2 a_Texcoord1;\n#endif\n\n#ifdef LIGHTMAP\n\tuniform vec4 u_LightmapScaleOffset;\n\tvarying vec2 v_LightMapUV;\n#endif\n\n#ifdef COLOR\n\tattribute vec4 a_Color;\n\tvarying vec4 v_Color;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tattribute vec3 a_Normal;\n\tvarying vec3 v_Normal; \n\tuniform vec3 u_CameraPos;\n\tvarying vec3 v_ViewDir; \n#endif\n\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\tattribute vec4 a_Tangent0;\n\tvarying vec3 v_Tangent;\n\tvarying vec3 v_Binormal;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t#ifdef GPU_INSTANCE\n\t\tattribute mat4 a_WorldMat;\n\t#else\n\t\tuniform mat4 u_WorldMat;\n\t#endif\n\tvarying vec3 v_PositionWorld;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n  varying vec4 v_lightMVPPos;\n  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvoid main_castShadow()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tmat4 worldMat;\n\t\t#ifdef GPU_INSTANCE\n\t\t\tworldMat = a_WorldMat;\n\t\t#else\n\t\t\tworldMat = u_WorldMat;\n\t\t#endif\n\t#endif\n\t\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(worldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tv_PositionWorld=(worldMat*position).xyz;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n\t\t#ifdef TILINGOFFSET\n\t\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t\t#else\n\t\t\tv_Texcoord0=a_Texcoord0;\n\t\t#endif\n\t#endif\n\n\t#ifdef LIGHTMAP\n\t\t#ifdef SCALEOFFSETLIGHTINGMAPUV\n\t\t\t#ifdef UV1\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord1.x,1.0-a_Texcoord1.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t#else\n\t\t\t\tv_LightMapUV=vec2(a_Texcoord0.x,1.0-a_Texcoord0.y)*u_LightmapScaleOffset.xy+u_LightmapScaleOffset.zw;\n\t\t\t#endif \n\t\t\tv_LightMapUV.y=1.0-v_LightMapUV.y;\n\t\t#else\n\t\t\t#ifdef UV1\n\t\t\t\tv_LightMapUV=a_Texcoord1;\n\t\t\t#else\n\t\t\t\tv_LightMapUV=a_Texcoord0;\n\t\t\t#endif \n\t\t#endif \n\t#endif\n\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tv_Color=a_Color;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}', 
            n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\nuniform vec4 u_DiffuseColor;\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\tvarying vec4 v_Color;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tvarying vec3 v_ViewDir; \n#endif\n\n#ifdef ALPHATEST\n\tuniform float u_AlphaTestValue;\n#endif\n\n#ifdef DIFFUSEMAP\n\tuniform sampler2D u_DiffuseTexture;\n#endif\n\n\n\n#if defined(DIFFUSEMAP)||((defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&(defined(SPECULARMAP)||defined(NORMALMAP)))\n\tvarying vec2 v_Texcoord0;\n#endif\n\n#ifdef LIGHTMAP\n\tvarying vec2 v_LightMapUV;\n\tuniform sampler2D u_LightMap;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tuniform vec3 u_MaterialSpecular;\n\tuniform float u_Shininess;\n\t#ifdef SPECULARMAP \n\t\tuniform sampler2D u_SpecularTexture;\n\t#endif\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\tvarying vec3 v_Normal;\n#endif\n\n#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\tuniform sampler2D u_NormalTexture;\n\tvarying vec3 v_Tangent;\n\tvarying vec3 v_Binormal;\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\nuniform vec3 u_AmbientColor;\n\n\n#if defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#include "ShadowHelper.glsl"\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\nvoid main_castShadow()\n{\n\t//gl_FragColor=vec4(v_posViewZ,0.0,0.0,1.0);\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_DiffuseTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\nvoid main_normal()\n{\n\tvec3 globalDiffuse=u_AmbientColor;\n\t#ifdef LIGHTMAP\t\n\t\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tvec3 normal;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))&&defined(NORMALMAP)\n\t\t\tvec3 normalMapSample = texture2D(u_NormalTexture, v_Texcoord0).rgb;\n\t\t\tnormal = normalize(NormalSampleToWorldSpace(normalMapSample, v_Normal, v_Tangent,v_Binormal));\n\t\t#else\n\t\t\tnormal = normalize(v_Normal);\n\t\t#endif\n\t\tvec3 viewDir= normalize(v_ViewDir);\n\t#endif\n\t\n\tvec4 mainColor=u_DiffuseColor;\n\t#ifdef DIFFUSEMAP\n\t\tvec4 difTexColor=texture2D(u_DiffuseTexture, v_Texcoord0);\n\t\tmainColor=mainColor*difTexColor;\n\t#endif \n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tmainColor=mainColor*v_Color;\n\t#endif \n    \n\t#ifdef ALPHATEST\n\t\tif(mainColor.a<u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n  \n\t\n\tvec3 diffuse = vec3(0.0);\n\tvec3 specular= vec3(0.0);\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tvec3 dif,spe;\n\t\t#ifdef SPECULARMAP\n\t\t\tvec3 gloss=texture2D(u_SpecularTexture, v_Texcoord0).rgb;\n\t\t#else\n\t\t\t#ifdef DIFFUSEMAP\n\t\t\t\tvec3 gloss=vec3(difTexColor.a);\n\t\t\t#else\n\t\t\t\tvec3 gloss=vec3(1.0);\n\t\t\t#endif\n\t\t#endif\n\t#endif\n\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tLayaAirBlinnPhongDiectionLight(u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_DirectionLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tLayaAirBlinnPhongPointLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_PointLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n\n\t#ifdef SPOTLIGHT\n\t\tLayaAirBlinnPhongSpotLight(v_PositionWorld,u_MaterialSpecular,u_Shininess,normal,gloss,viewDir,u_SpotLight,dif,spe);\n\t\tdiffuse+=dif;\n\t\tspecular+=spe;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3(u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2(u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1(u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse*shadowValue),mainColor.a);\n\t#else\n\t\tgl_FragColor =vec4(mainColor.rgb*(globalDiffuse + diffuse),mainColor.a);\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\t#ifdef RECEIVESHADOW\n\t\t\tgl_FragColor.rgb+=specular*shadowValue;\n\t\t#else\n\t\t\tgl_FragColor.rgb+=specular;\n\t\t#endif\n\t#endif\n\t  \n\t#ifdef FOG\n\t\tfloat lerpFact=clamp((1.0/gl_FragCoord.w-u_FogStart)/u_FogRange,0.0,1.0);\n\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}\n\n';
            var o = Vt.add("BLINNPHONG", !0), s = new oe(i, r, Di.shaderDefines, ci.shaderDefines);
            o.addSubShader(s), s.addShaderPass(e, n, a), i = {
                a_Position: 0,
                a_Color: 1
            }, r = {
                u_MvpMatrix: 2,
                u_Color: 1
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\nuniform vec4 u_Color;\nattribute vec4 a_Color;\nvarying vec4 v_Color;\n\n\nvoid main()\n{\n\tgl_Position = u_MvpMatrix * a_Position;\n\tv_Color=a_Color*u_Color;\n\tgl_Position=remapGLPositionZ(gl_Position);\n}', 
            n = "#ifdef HIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec4 v_Color;\nuniform vec4 u_Color;\n\nvoid main()\n{\n  gl_FragColor = v_Color * u_Color; \n}\n\n", 
            o = Vt.add("LineShader"), s = new oe(i, r), o.addSubShader(s), s.addShaderPass(e, n, a), 
            i = {
                a_Position: 0,
                a_Normal: 3,
                a_Tangent0: 4,
                a_Texcoord0: 2,
                a_BoneWeights: 6,
                a_BoneIndices: 5,
                a_MvpMatrix: 12,
                a_WorldMat: 8
            }, r = {
                u_Bones: 0,
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_AlphaTestValue: 1,
                u_AlbedoColor: 1,
                u_EmissionColor: 1,
                u_AlbedoTexture: 1,
                u_NormalTexture: 1,
                u_ParallaxTexture: 1,
                u_MetallicGlossTexture: 1,
                u_OcclusionTexture: 1,
                u_EmissionTexture: 1,
                u_metallic: 1,
                u_smoothness: 1,
                u_smoothnessScale: 1,
                u_occlusionStrength: 1,
                u_normalScale: 1,
                u_parallaxScale: 1,
                u_TilingOffset: 1,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4,
                u_PointLightMatrix: 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.SpotAngle": 4,
                "u_SpotLight.Color": 4,
                u_RangeTexture: 4,
                u_ReflectTexture: 4,
                u_ReflectIntensity: 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_WorldMat;\n#else\n\tuniform mat4 u_WorldMat;\n#endif\n\nuniform vec3 u_CameraPos;\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n\t  varying vec4 v_lightMVPPos;\n\t  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main_castShadow()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0 = a_Texcoord0;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tmat4 worldMat;\n\t\t#ifdef GPU_INSTANCE\n\t\t\tworldMat = a_WorldMat;\n\t\t#else\n\t\t\tworldMat = u_WorldMat;\n\t\t#endif\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(worldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\t\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tv_PositionWorld=(worldMat*position).xyz;\n\t#endif\n\t\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n  \n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}', 
            n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\nuniform vec3 u_AmbientColor;\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n#ifdef METALLICGLOSSTEXTURE\n\tuniform sampler2D u_MetallicGlossTexture;\n#endif\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n\tuniform float u_normalScale;\n#endif\n#ifdef PARALLAXTEXTURE\n\tuniform sampler2D u_ParallaxTexture;\n\tuniform float u_parallaxScale;\n#endif\n#ifdef OCCLUSIONTEXTURE\n\tuniform sampler2D u_OcclusionTexture;\n\tuniform float u_occlusionStrength;\n#endif\n#ifdef EMISSION\n\t#ifdef EMISSIONTEXTURE\n\t\tuniform sampler2D u_EmissionTexture;\n\t#endif\n\tuniform vec4 u_EmissionColor;\n#endif\n#ifdef REFLECTMAP\n\tuniform samplerCube u_ReflectTexture;\n\tuniform float u_ReflectIntensity;\n#endif\n\nuniform float u_AlphaTestValue;\nuniform float u_metallic;\nuniform float u_smoothness;\nuniform float u_smoothnessScale;\n\nuniform sampler2D u_RangeTexture;\n//uniform sampler2D u_AngleTexture;\nuniform mat4 u_PointLightMatrix;\n//uniform mat4 u_SpotLightMatrix;\n\n#include "PBRStandardLighting.glsl"\n#include "ShadowHelper.glsl"\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\nvoid main_castShadow()\n{\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\n\nvoid main_normal()\n{\t\n\tvec3 viewDir = normalize(v_ViewDir);\n\t\n\tvec2 uv0 = ParallaxOffset(viewDir);\n\t\n\tvec2 mg;\n\tvec4 albedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tvec4 abledoTextureColor = texture2D(u_AlbedoTexture, uv0);\n\t\talbedoColor = abledoTextureColor * u_AlbedoColor;\n\t\tmg = MetallicGloss(abledoTextureColor.a, uv0);\n\t#else\n\t\talbedoColor = u_AlbedoColor;\n\t\tmg = MetallicGloss(1.0, uv0);\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(albedoColor.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n\t\n\tvec3 normal = UnpackScaleNormal(uv0);\n  \n\tLayaGI gi;\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\n\tgi.specular = ReflectCubeMap(viewDir, normal);\n  \n\tvec4 color = vec4(0.0);\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tcolor += PBRStandardDiectionLight(albedoColor, mg.r, mg.g, normal, viewDir, u_DirectionLight, gi);\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRStandardPointLight(albedoColor, mg.r, mg.g, normal, viewDir, u_PointLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef SPOTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRStandardSpotLight(albedoColor, mg.r, mg.g, normal, viewDir, u_SpotLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef EMISSION\n\t\tvec4 emissionColor = u_EmissionColor;\n\t\t#ifdef EMISSIONTEXTURE\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\n\t\t#endif\n\t\tcolor.rgb += emissionColor.rgb;\n\t#endif\n\t\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor = vec4(color.rgb * shadowValue, color.a);\n\t#else\n\t\tgl_FragColor = color;\n\t#endif\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}', 
            o = Vt.add("PBRStandard", !0), s = new oe(i, r, Di.shaderDefines, oi.shaderDefines), 
            o.addSubShader(s), s.addShaderPass(e, n, a), i = {
                a_Position: 0,
                a_Normal: 3,
                a_Tangent0: 4,
                a_Texcoord0: 2,
                a_BoneWeights: 6,
                a_BoneIndices: 5,
                a_MvpMatrix: 12,
                a_WorldMat: 8
            }, r = {
                u_Bones: 0,
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_AlphaTestValue: 1,
                u_AlbedoColor: 1,
                u_SpecularColor: 1,
                u_EmissionColor: 1,
                u_AlbedoTexture: 1,
                u_NormalTexture: 1,
                u_ParallaxTexture: 1,
                u_SpecularTexture: 1,
                u_OcclusionTexture: 1,
                u_EmissionTexture: 1,
                u_smoothness: 1,
                u_smoothnessScale: 1,
                u_occlusionStrength: 1,
                u_normalScale: 1,
                u_parallaxScale: 1,
                u_TilingOffset: 1,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4,
                u_PointLightMatrix: 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.SpotAngle": 4,
                "u_SpotLight.Color": 4,
                u_RangeTexture: 4,
                u_ReflectTexture: 4,
                u_ReflectIntensity: 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_WorldMat;\n#else\n\tuniform mat4 u_WorldMat;\n#endif\nuniform vec3 u_CameraPos;\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n  #ifdef SHADOWMAP_PSSM1 \n\t  varying vec4 v_lightMVPPos;\n\t  uniform mat4 u_lightShadowVP[4];\n  #endif\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main_castShadow()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t \n\t//TODO没考虑UV动画呢\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tv_Texcoord0 = a_Texcoord0;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n\tv_posViewZ = gl_Position.z;\n}\n\nvoid main_normal()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tmat4 worldMat;\n\t\t#ifdef GPU_INSTANCE\n\t\t\tworldMat = a_WorldMat;\n\t\t#else\n\t\t\tworldMat = u_WorldMat;\n\t\t#endif\n\t#endif\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tmat3 worldInvMat;\n\t\t#ifdef BONE\n\t\t\tworldInvMat=inverse(mat3(worldMat*skinTransform));\n\t\t#else\n\t\t\tworldInvMat=inverse(mat3(worldMat));\n\t\t#endif  \n\t\tv_Normal=a_Normal*worldInvMat;\n\t\t#if (defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT))\n\t\t\tv_Tangent=a_Tangent0.xyz*worldInvMat;\n\t\t\tv_Binormal=cross(v_Normal,v_Tangent)*a_Tangent0.w;\n\t\t#endif\n\t#endif\n\t\n\t\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(RECEIVESHADOW)\n\t\tv_PositionWorld=(worldMat*position).xyz;\n\t#endif\n\t\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_ViewDir=u_CameraPos-v_PositionWorld;\n\t#endif\n\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n  \n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1 \n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif\n}', 
            n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nvarying vec2 v_Texcoord0;\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec3 v_PositionWorld;\n\nuniform vec3 u_AmbientColor;\nuniform vec4 u_AlbedoColor;\nuniform vec4 u_SpecularColor;\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n#ifdef SPECULARTEXTURE\n\tuniform sampler2D u_SpecularTexture;\n#endif\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n\tuniform float u_normalScale;\n#endif\n#ifdef PARALLAXTEXTURE\n\tuniform sampler2D u_ParallaxTexture;\n\tuniform float u_parallaxScale;\n#endif\n#ifdef OCCLUSIONTEXTURE\n\tuniform sampler2D u_OcclusionTexture;\n\tuniform float u_occlusionStrength;\n#endif\n#ifdef EMISSION\n\t#ifdef EMISSIONTEXTURE\n\t\tuniform sampler2D u_EmissionTexture;\n\t#endif\n\tuniform vec4 u_EmissionColor;\n#endif\n#ifdef REFLECTMAP\n\tuniform samplerCube u_ReflectTexture;\n\tuniform float u_ReflectIntensity;\n#endif\n\nuniform float u_AlphaTestValue;\nuniform float u_metallic;\nuniform float u_smoothness;\nuniform float u_smoothnessScale;\n\nuniform sampler2D u_RangeTexture;\n//uniform sampler2D u_AngleTexture;\nuniform mat4 u_PointLightMatrix;\n//uniform mat4 u_SpotLightMatrix;\n\n#include "PBRSpecularLighting.glsl"\n#include "ShadowHelper.glsl"\n\nvarying float v_posViewZ;\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\nvoid main_castShadow()\n{\n\tgl_FragColor=packDepth(v_posViewZ);\n\t#if defined(DIFFUSEMAP)&&defined(ALPHATEST)\n\t\tfloat alpha = texture2D(u_AlbedoTexture,v_Texcoord0).w;\n\t\tif( alpha < u_AlphaTestValue )\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t#endif\n}\n\nvoid main_normal()\n{\t\n\tvec3 viewDir = normalize(v_ViewDir);\n\t\n\tvec2 uv0 = ParallaxOffset(viewDir);\n\t\n\tvec4 sg;\n\tvec4 albedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tvec4 albedoTextureColor = texture2D(u_AlbedoTexture, uv0);\n\t\talbedoColor = albedoTextureColor * u_AlbedoColor;\n\t\tsg = SpecularGloss(albedoTextureColor.a, uv0);\n\t#else\n\t\talbedoColor = u_AlbedoColor;\n\t\tsg = SpecularGloss(1.0, uv0);\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(albedoColor.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n  \n\tvec3 normal = UnpackScaleNormal(uv0);\n\t\n\tLayaGI gi;\n\tgi.diffuse = u_AmbientColor * Occlusion(uv0).rgb;\n\tgi.specular = ReflectCubeMap(viewDir, normal);\n\t\n\t//float a = (sg.r+sg.g+sg.b) / 3.0;\n  \n\tvec4 color = vec4(0.0);\n\t\n\t#ifdef DIRECTIONLIGHT\n\t\tcolor += PBRSpecularDiectionLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_DirectionLight, gi);\n\t#endif\n \n\t#ifdef POINTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRSpecularPointLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_PointLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef SPOTLIGHT\n\t\tcolor.a = 0.0;\n\t\tcolor += PBRSpecularSpotLight(albedoColor, sg.rgb, sg.a, normal, viewDir, u_SpotLight, v_PositionWorld, gi);\n\t#endif\n\t\n\t#ifdef EMISSION\n\t\tvec4 emissionColor = u_EmissionColor;\n\t\t#ifdef EMISSIONTEXTURE\n\t\t\temissionColor *=  texture2D(u_EmissionTexture, uv0);\n\t\t#endif\n\t\tcolor.rgb += emissionColor.rgb;\n\t#endif\n\t\n\t#ifdef RECEIVESHADOW\n\t\tfloat shadowValue = 1.0;\n\t\t#ifdef SHADOWMAP_PSSM3\n\t\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif\n\t\t#ifdef SHADOWMAP_PSSM2\n\t\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t\t#endif \n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t\t#endif\n\t\tgl_FragColor = vec4(color.rgb * shadowValue, color.a);\n\t#else\n\t\tgl_FragColor = color;\n\t#endif\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t#endif\n}\n\nvoid main()\n{\n\t#ifdef CASTSHADOW\t\t\n\t\tmain_castShadow();\n\t#else\n\t\tmain_normal();\n\t#endif  \n}\n\n', 
            o = Vt.add("PBRSpecular", !0), s = new oe(i, r, Di.shaderDefines, fi.shaderDefines), 
            o.addSubShader(s), s.addShaderPass(e, n, a), i = {
                a_Position: 0,
                a_Color: 1,
                a_Texcoord0: 2,
                a_BoneWeights: 6,
                a_BoneIndices: 5,
                a_MvpMatrix: 12
            }, r = {
                u_Bones: 0,
                u_AlbedoTexture: 1,
                u_AlbedoColor: 1,
                u_TilingOffset: 1,
                u_AlphaTestValue: 1,
                u_MvpMatrix: 2,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\n\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\nattribute vec4 a_Color;\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main() {\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tv_Color = a_Color;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}', 
            n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\tvarying vec4 v_Color;\n#endif\n\n#ifdef ALBEDOTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n\tvarying vec2 v_Texcoord0;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef ALPHATEST\n\tuniform float u_AlphaTestValue;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\nvoid main()\n{\n\tvec4 color =  u_AlbedoColor;\n\t#ifdef ALBEDOTEXTURE\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\n\t#endif\n\t#if defined(COLOR)&&defined(ENABLEVERTEXCOLOR)\n\t\tcolor *= v_Color;\n\t#endif\n\t\n\t#ifdef ALPHATEST\n\t\tif(color.a < u_AlphaTestValue)\n\t\t\tdiscard;\n\t#endif\n\t\n\tgl_FragColor = color;\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t\t#endif\n\t#endif\n\t\n}\n\n", 
            o = Vt.add("Unlit", !0), s = new oe(i, r, Di.shaderDefines, $n.shaderDefines), o.addSubShader(s), 
            s.addShaderPass(e, n, a), i = {
                a_Position: 0,
                a_Texcoord0: 2,
                a_BoneWeights: 6,
                a_BoneIndices: 5,
                a_MvpMatrix: 12
            }, r = {
                u_Bones: 0,
                u_AlbedoTexture: 1,
                u_AlbedoColor: 1,
                u_TilingOffset: 1,
                u_AlphaTestValue: 1,
                u_MvpMatrix: 2,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec4 a_Color;\nattribute vec2 a_Texcoord0;\n\n#ifdef GPU_INSTANCE\n\tattribute mat4 a_MvpMatrix;\n#else\n\tuniform mat4 u_MvpMatrix;\n#endif\n\nvarying vec4 v_Color;\nvarying vec2 v_Texcoord0;\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\n#ifdef BONE\n\tconst int c_MaxBoneCount = 24;\n\tattribute vec4 a_BoneIndices;\n\tattribute vec4 a_BoneWeights;\n\tuniform mat4 u_Bones[c_MaxBoneCount];\n#endif\n\nvoid main()\n{\n\tvec4 position;\n\t#ifdef BONE\n\t\tmat4 skinTransform = u_Bones[int(a_BoneIndices.x)] * a_BoneWeights.x;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.y)] * a_BoneWeights.y;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.z)] * a_BoneWeights.z;\n\t\tskinTransform += u_Bones[int(a_BoneIndices.w)] * a_BoneWeights.w;\n\t\tposition=skinTransform*a_Position;\n\t#else\n\t\tposition=a_Position;\n\t#endif\n\t#ifdef GPU_INSTANCE\n\t\tgl_Position = a_MvpMatrix * position;\n\t#else\n\t\tgl_Position = u_MvpMatrix * position;\n\t#endif\n\t\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0=TransformUV(a_Texcoord0,u_TilingOffset);\n\t#else\n\t\tv_Texcoord0=a_Texcoord0;\n\t#endif\n\t\t\n\tv_Color = a_Color;\n\tgl_Position=remapGLPositionZ(gl_Position);\n}', 
            n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#ifdef COLOR\n\tvarying vec4 v_Color;\n#endif\nvarying vec2 v_Texcoord0;\n\n#ifdef MAINTEXTURE\n\tuniform sampler2D u_AlbedoTexture;\n#endif\n\nuniform vec4 u_AlbedoColor;\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\nvoid main()\n{\n\tvec4 color =  2.0 * u_AlbedoColor;\n\t#ifdef COLOR\n\t\tcolor *= v_Color;\n\t#endif\n\t#ifdef MAINTEXTURE\n\t\tcolor *= texture2D(u_AlbedoTexture, v_Texcoord0);\n\t#endif\n\t\n\tgl_FragColor = color;\n\t\n\t#ifdef FOG\n\t\tfloat lerpFact = clamp((1.0 / gl_FragCoord.w - u_FogStart) / u_FogRange, 0.0, 1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(0.0), lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb, u_FogColor, lerpFact);\n\t\t#endif\n\t#endif\n}\n\n", 
            o = Vt.add("Effect", !0), s = new oe(i, r, Di.shaderDefines, li.shaderDefines), 
            o.addSubShader(s), s.addShaderPass(e, n, a), i = {
                a_CornerTextureCoordinate: 0,
                a_MeshPosition: 1,
                a_MeshColor: 2,
                a_MeshTextureCoordinate: 3,
                a_ShapePositionStartLifeTime: 4,
                a_DirectionTime: 5,
                a_StartColor: 6,
                a_EndColor: 7,
                a_StartSize: 8,
                a_StartRotation0: 9,
                a_StartSpeed: 10,
                a_Random0: 11,
                a_Random1: 12,
                a_SimulationWorldPostion: 13,
                a_SimulationWorldRotation: 14
            }, r = {
                u_Tintcolor: 1,
                u_TilingOffset: 1,
                u_texture: 1,
                u_WorldPosition: 2,
                u_WorldRotation: 2,
                u_PositionScale: 2,
                u_SizeScale: 2,
                u_ScalingMode: 2,
                u_Gravity: 2,
                u_ThreeDStartRotation: 2,
                u_StretchedBillboardLengthScale: 2,
                u_StretchedBillboardSpeedScale: 2,
                u_SimulationSpace: 2,
                u_CurrentTime: 2,
                u_ColorOverLifeGradientAlphas: 2,
                u_ColorOverLifeGradientColors: 2,
                u_MaxColorOverLifeGradientAlphas: 2,
                u_MaxColorOverLifeGradientColors: 2,
                u_VOLVelocityConst: 2,
                u_VOLVelocityGradientX: 2,
                u_VOLVelocityGradientY: 2,
                u_VOLVelocityGradientZ: 2,
                u_VOLVelocityConstMax: 2,
                u_VOLVelocityGradientMaxX: 2,
                u_VOLVelocityGradientMaxY: 2,
                u_VOLVelocityGradientMaxZ: 2,
                u_VOLSpaceType: 2,
                u_SOLSizeGradient: 2,
                u_SOLSizeGradientX: 2,
                u_SOLSizeGradientY: 2,
                u_SOLSizeGradientZ: 2,
                u_SOLSizeGradientMax: 2,
                u_SOLSizeGradientMaxX: 2,
                u_SOLSizeGradientMaxY: 2,
                u_SOLSizeGradientMaxZ: 2,
                u_ROLAngularVelocityConst: 2,
                u_ROLAngularVelocityConstSeprarate: 2,
                u_ROLAngularVelocityGradient: 2,
                u_ROLAngularVelocityGradientX: 2,
                u_ROLAngularVelocityGradientY: 2,
                u_ROLAngularVelocityGradientZ: 2,
                u_ROLAngularVelocityConstMax: 2,
                u_ROLAngularVelocityConstMaxSeprarate: 2,
                u_ROLAngularVelocityGradientMax: 2,
                u_ROLAngularVelocityGradientMaxX: 2,
                u_ROLAngularVelocityGradientMaxY: 2,
                u_ROLAngularVelocityGradientMaxZ: 2,
                u_ROLAngularVelocityGradientMaxW: 2,
                u_TSACycles: 2,
                u_TSASubUVLength: 2,
                u_TSAGradientUVs: 2,
                u_TSAMaxGradientUVs: 2,
                u_CameraPos: 3,
                u_CameraDirection: 3,
                u_CameraUp: 3,
                u_View: 3,
                u_Projection: 3,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\n#ifdef HIGHPRECISION\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\n#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\tattribute vec4 a_CornerTextureCoordinate;\n#endif\n#ifdef RENDERMODE_MESH\n\tattribute vec3 a_MeshPosition;\n\tattribute vec4 a_MeshColor;\n\tattribute vec2 a_MeshTextureCoordinate;\n\tvarying vec4 v_MeshColor;\n#endif\n\nattribute vec4 a_ShapePositionStartLifeTime;\nattribute vec4 a_DirectionTime;\nattribute vec4 a_StartColor;\nattribute vec3 a_StartSize;\nattribute vec3 a_StartRotation0;\nattribute float a_StartSpeed;\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n  attribute vec4 a_Random0;\n#endif\n#if defined(TEXTURESHEETANIMATIONRANDOMCURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  attribute vec4 a_Random1;\n#endif\nattribute vec3 a_SimulationWorldPostion;\nattribute vec4 a_SimulationWorldRotation;\n\nvarying float v_Discard;\nvarying vec4 v_Color;\n#ifdef DIFFUSEMAP\n\tvarying vec2 v_TextureCoordinate;\n#endif\n\nuniform float u_CurrentTime;\nuniform vec3 u_Gravity;\n\nuniform vec3 u_WorldPosition;\nuniform vec4 u_WorldRotation;\nuniform bool u_ThreeDStartRotation;\nuniform int u_ScalingMode;\nuniform vec3 u_PositionScale;\nuniform vec3 u_SizeScale;\nuniform mat4 u_View;\nuniform mat4 u_Projection;\n\n#ifdef STRETCHEDBILLBOARD\n\tuniform vec3 u_CameraPos;\n#endif\nuniform vec3 u_CameraDirection;//TODO:只有几种广告牌模式需要用\nuniform vec3 u_CameraUp;\n\nuniform  float u_StretchedBillboardLengthScale;\nuniform  float u_StretchedBillboardSpeedScale;\nuniform int u_SimulationSpace;\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  uniform  int  u_VOLSpaceType;\n#endif\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)\n  uniform  vec3 u_VOLVelocityConst;\n#endif\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n  uniform  vec2 u_VOLVelocityGradientX[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientY[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientZ[4];//x为key,y为速度\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n  uniform  vec3 u_VOLVelocityConstMax;\n#endif\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n  uniform  vec2 u_VOLVelocityGradientMaxX[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientMaxY[4];//x为key,y为速度\n  uniform  vec2 u_VOLVelocityGradientMaxZ[4];//x为key,y为速度\n#endif\n\n#ifdef COLOROVERLIFETIME\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n#endif\n#ifdef RANDOMCOLOROVERLIFETIME\n  uniform  vec4 u_ColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_ColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n  uniform  vec4 u_MaxColorOverLifeGradientColors[4];//x为key,yzw为Color\n  uniform  vec2 u_MaxColorOverLifeGradientAlphas[4];//x为key,y为Alpha\n#endif\n\n\n#if defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMERANDOMCURVES)\n  uniform  vec2 u_SOLSizeGradient[4];//x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\n  uniform  vec2 u_SOLSizeGradientMax[4];//x为key,y为尺寸\n#endif\n#if defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\n  uniform  vec2 u_SOLSizeGradientX[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientY[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientZ[4];//x为key,y为尺寸\n#endif\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n  uniform  vec2 u_SOLSizeGradientMaxX[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientMaxY[4];//x为key,y为尺寸\n  uniform  vec2 u_SOLSizeGradientMaxZ[4];//x为key,y为尺寸\n#endif\n\n\n#ifdef ROTATIONOVERLIFETIME\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\n    uniform  float u_ROLAngularVelocityConst;\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    uniform  float u_ROLAngularVelocityConstMax;\n  #endif\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n    uniform  vec2 u_ROLAngularVelocityGradient[4];//x为key,y为旋转\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    uniform  vec2 u_ROLAngularVelocityGradientMax[4];//x为key,y为旋转\n  #endif\n#endif\n#ifdef ROTATIONOVERLIFETIMESEPERATE\n  #if defined(ROTATIONOVERLIFETIMECONSTANT)||defined(ROTATIONOVERLIFETIMERANDOMCONSTANTS)\n    uniform  vec3 u_ROLAngularVelocityConstSeprarate;\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n    uniform  vec3 u_ROLAngularVelocityConstMaxSeprarate;\n  #endif\n  #if defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\n    uniform  vec2 u_ROLAngularVelocityGradientX[4];\n    uniform  vec2 u_ROLAngularVelocityGradientY[4];\n    uniform  vec2 u_ROLAngularVelocityGradientZ[4];\n  #endif\n  #ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n    uniform  vec2 u_ROLAngularVelocityGradientMaxX[4];\n    uniform  vec2 u_ROLAngularVelocityGradientMaxY[4];\n    uniform  vec2 u_ROLAngularVelocityGradientMaxZ[4];\n\tuniform  vec2 u_ROLAngularVelocityGradientMaxW[4];\n  #endif\n#endif\n\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\n  uniform  float u_TSACycles;\n  uniform  vec2 u_TSASubUVLength;\n  uniform  vec2 u_TSAGradientUVs[4];//x为key,y为frame\n#endif\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n  uniform  vec2 u_TSAMaxGradientUVs[4];//x为key,y为frame\n#endif\n\n#ifdef FOG\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef TILINGOFFSET\n\tuniform vec4 u_TilingOffset;\n#endif\n\nvec3 rotationByEuler(in vec3 vector,in vec3 rot)\n{\n\tfloat halfRoll = rot.z * 0.5;\n    float halfPitch = rot.x * 0.5;\n\tfloat halfYaw = rot.y * 0.5;\n\n\tfloat sinRoll = sin(halfRoll);\n\tfloat cosRoll = cos(halfRoll);\n\tfloat sinPitch = sin(halfPitch);\n\tfloat cosPitch = cos(halfPitch);\n\tfloat sinYaw = sin(halfYaw);\n\tfloat cosYaw = cos(halfYaw);\n\n\tfloat quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\n\tfloat quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\n\tfloat quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\n\tfloat quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\n\t\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\t\n\tfloat x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n\tfloat xx = quaX * x;\n    float xy = quaX * y;\n\tfloat xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n\t\n}\n\n//假定axis已经归一化\nvec3 rotationByAxis(in vec3 vector,in vec3 axis, in float angle)\n{\n\tfloat halfAngle = angle * 0.5;\n\tfloat sin = sin(halfAngle);\n\t\n\tfloat quaX = axis.x * sin;\n\tfloat quaY = axis.y * sin;\n\tfloat quaZ = axis.z * sin;\n\tfloat quaW = cos(halfAngle);\n\t\n\t//vec4 q=vec4(quaX,quaY,quaZ,quaW);\n\t//vec3 temp = cross(q.xyz, vector) + q.w * vector;\n\t//return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\t\n\tfloat x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n\tfloat xx = quaX * x;\n    float xy = quaX * y;\n\tfloat xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n                ((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n                ((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n\t\n}\n\nvec3 rotationByQuaternions(in vec3 v,in vec4 q) \n{\n\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\n \n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(SIZEOVERLIFETIMECURVE)||defined(SIZEOVERLIFETIMECURVESEPERATE)||defined(SIZEOVERLIFETIMERANDOMCURVES)||defined(SIZEOVERLIFETIMERANDOMCURVESSEPERATE)\nfloat getCurValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\n{\n\tfloat curValue;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientNumber=gradientNumbers[i];\n\t\tfloat key=gradientNumber.x;\n\t\tif(key>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\n\t\t\tfloat lastKey=lastGradientNumber.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\tcurValue=mix(lastGradientNumber.y,gradientNumber.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn curValue;\n}\n#endif\n\n#if defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)||defined(ROTATIONOVERLIFETIMECURVE)||defined(ROTATIONOVERLIFETIMERANDOMCURVES)\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],in float normalizedAge)\n{\n\tfloat totalValue=0.0;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientNumber=gradientNumbers[i];\n\t\tfloat key=gradientNumber.x;\n\t\tvec2 lastGradientNumber=gradientNumbers[i-1];\n\t\tfloat lastValue=lastGradientNumber.y;\n\t\t\n\t\tif(key>=normalizedAge){\n\t\t\tfloat lastKey=lastGradientNumber.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\ttotalValue+=(lastValue+mix(lastValue,gradientNumber.y,age))/2.0*a_ShapePositionStartLifeTime.w*(normalizedAge-lastKey);\n\t\t\tbreak;\n\t\t}\n\t\telse{\n\t\t\ttotalValue+=(lastValue+gradientNumber.y)/2.0*a_ShapePositionStartLifeTime.w*(key-lastGradientNumber.x);\n\t\t}\n\t}\n\treturn totalValue;\n}\n#endif\n\n#if defined(COLOROVERLIFETIME)||defined(RANDOMCOLOROVERLIFETIME)\nvec4 getColorFromGradient(in vec2 gradientAlphas[4],in vec4 gradientColors[4],in float normalizedAge)\n{\n\tvec4 overTimeColor;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientAlpha=gradientAlphas[i];\n\t\tfloat alphaKey=gradientAlpha.x;\n\t\tif(alphaKey>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientAlpha=gradientAlphas[i-1];\n\t\t\tfloat lastAlphaKey=lastGradientAlpha.x;\n\t\t\tfloat age=(normalizedAge-lastAlphaKey)/(alphaKey-lastAlphaKey);\n\t\t\toverTimeColor.a=mix(lastGradientAlpha.y,gradientAlpha.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec4 gradientColor=gradientColors[i];\n\t\tfloat colorKey=gradientColor.x;\n\t\tif(colorKey>=normalizedAge)\n\t\t{\n\t\t\tvec4 lastGradientColor=gradientColors[i-1];\n\t\t\tfloat lastColorKey=lastGradientColor.x;\n\t\t\tfloat age=(normalizedAge-lastColorKey)/(colorKey-lastColorKey);\n\t\t\toverTimeColor.rgb=mix(gradientColors[i-1].yzw,gradientColor.yzw,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn overTimeColor;\n}\n#endif\n\n\n#if defined(TEXTURESHEETANIMATIONCURVE)||defined(TEXTURESHEETANIMATIONRANDOMCURVE)\nfloat getFrameFromGradient(in vec2 gradientFrames[4],in float normalizedAge)\n{\n\tfloat overTimeFrame;\n\tfor(int i=1;i<4;i++)\n\t{\n\t\tvec2 gradientFrame=gradientFrames[i];\n\t\tfloat key=gradientFrame.x;\n\t\tif(key>=normalizedAge)\n\t\t{\n\t\t\tvec2 lastGradientFrame=gradientFrames[i-1];\n\t\t\tfloat lastKey=lastGradientFrame.x;\n\t\t\tfloat age=(normalizedAge-lastKey)/(key-lastKey);\n\t\t\toverTimeFrame=mix(lastGradientFrame.y,gradientFrame.y,age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn floor(overTimeFrame);\n}\n#endif\n\n#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\nvec3 computeParticleLifeVelocity(in float normalizedAge)\n{\n  vec3 outLifeVelocity;\n  #ifdef VELOCITYOVERLIFETIMECONSTANT\n\t outLifeVelocity=u_VOLVelocityConst; \n  #endif\n  #ifdef VELOCITYOVERLIFETIMECURVE\n     outLifeVelocity= vec3(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\n  #endif\n  #ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n\t outLifeVelocity=mix(u_VOLVelocityConst,u_VOLVelocityConstMax,vec3(a_Random1.y,a_Random1.z,a_Random1.w)); \n  #endif\n  #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n     outLifeVelocity=vec3(mix(getCurValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y),\n\t                 mix(getCurValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z),\n\t\t\t\t\t mix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\n  #endif\n\t\t\t\t\t\n  return outLifeVelocity;\n} \n#endif\n\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity,in float age,in float normalizedAge,vec3 gravityVelocity,vec4 worldRotation)\n{\n   vec3 startPosition;\n   vec3 lifePosition;\n   #if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t#ifdef VELOCITYOVERLIFETIMECONSTANT\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=lifeVelocity*age;\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMECURVE\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=vec3(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge));\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCONSTANT\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=lifeVelocity*age;\n\t#endif\n\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n\t\t  startPosition=startVelocity*age;\n\t\t  lifePosition=vec3(mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX,normalizedAge),a_Random1.y)\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY,normalizedAge),a_Random1.z)\n\t      ,mix(getTotalValueFromGradientFloat(u_VOLVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ,normalizedAge),a_Random1.w));\n\t#endif\n\t\n\tvec3 finalPosition;\n\tif(u_VOLSpaceType==0){\n\t  if(u_ScalingMode!=2)\n\t   finalPosition =rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition),worldRotation);\n\t  else\n\t   finalPosition =rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition+lifePosition,worldRotation);\n\t}\n\telse{\n\t  if(u_ScalingMode!=2)\n\t    finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation)+lifePosition;\n\t  else\n\t    finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation)+lifePosition;\n\t}\n  #else\n\t startPosition=startVelocity*age;\n\t vec3 finalPosition;\n\t if(u_ScalingMode!=2)\n\t   finalPosition = rotationByQuaternions(u_PositionScale*(a_ShapePositionStartLifeTime.xyz+startPosition),worldRotation);\n\t else\n\t   finalPosition = rotationByQuaternions(u_PositionScale*a_ShapePositionStartLifeTime.xyz+startPosition,worldRotation);\n  #endif\n  \n  if(u_SimulationSpace==0)\n    finalPosition=finalPosition+a_SimulationWorldPostion;\n  else if(u_SimulationSpace==1) \n    finalPosition=finalPosition+u_WorldPosition;\n  \n  finalPosition+=0.5*gravityVelocity*age;\n \n  return  finalPosition;\n}\n\n\nvec4 computeParticleColor(in vec4 color,in float normalizedAge)\n{\n\t#ifdef COLOROVERLIFETIME\n\t  color*=getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge);\n\t#endif\n\t\n\t#ifdef RANDOMCOLOROVERLIFETIME\n\t  color*=mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,u_ColorOverLifeGradientColors,normalizedAge),getColorFromGradient(u_MaxColorOverLifeGradientAlphas,u_MaxColorOverLifeGradientColors,normalizedAge),a_Random0.y);\n\t#endif\n\n    return color;\n}\n\nvec2 computeParticleSizeBillbard(in vec2 size,in float normalizedAge)\n{\n\t#ifdef SIZEOVERLIFETIMECURVE\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \n\t#endif\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\n\t\tsize*=vec2(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge));\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n\t    size*=vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z));\n\t#endif\n\treturn size;\n}\n\n#ifdef RENDERMODE_MESH\nvec3 computeParticleSizeMesh(in vec3 size,in float normalizedAge)\n{\n\t#ifdef SIZEOVERLIFETIMECURVE\n\t\tsize*=getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge);\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVES\n\t    size*=mix(getCurValueFromGradientFloat(u_SOLSizeGradient,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMax,normalizedAge),a_Random0.z); \n\t#endif\n\t#ifdef SIZEOVERLIFETIMECURVESEPERATE\n\t\tsize*=vec3(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge));\n\t#endif\n\t#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n\t    size*=vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxX,normalizedAge),a_Random0.z)\n\t    ,mix(getCurValueFromGradientFloat(u_SOLSizeGradientY,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxY,normalizedAge),a_Random0.z)\n\t\t,mix(getCurValueFromGradientFloat(u_SOLSizeGradientZ,normalizedAge),getCurValueFromGradientFloat(u_SOLSizeGradientMaxZ,normalizedAge),a_Random0.z));\n\t#endif\n\treturn size;\n}\n#endif\n\nfloat computeParticleRotationFloat(in float rotation,in float age,in float normalizedAge)\n{ \n\t#ifdef ROTATIONOVERLIFETIME\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\n\t\t#endif\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConstSeprarate.z*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConstSeprarate.z,u_ROLAngularVelocityConstMaxSeprarate.z,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\n\t\t#endif\n\t#endif\n\treturn rotation;\n}\n\n#if defined(RENDERMODE_MESH)&&(defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE))\nvec3 computeParticleRotationVec3(in vec3 rotation,in float age,in float normalizedAge)\n{ \n\t#ifdef ROTATIONOVERLIFETIME\n\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tfloat ageRot=u_ROLAngularVelocityConst*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge);\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tfloat ageRot=mix(u_ROLAngularVelocityConst,u_ROLAngularVelocityConstMax,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradient,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),a_Random0.w);\n\t\t#endif\n\t#endif\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t#ifdef ROTATIONOVERLIFETIMECONSTANT\n\t\t\tvec3 ageRot=u_ROLAngularVelocityConstSeprarate*age;\n\t        rotation+=ageRot;\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMECURVE\n\t\t\trotation+=vec3(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge));\n\t\t#endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCONSTANTS\n\t\t\tvec3 ageRot=mix(u_ROLAngularVelocityConstSeprarate,u_ROLAngularVelocityConstMaxSeprarate,a_Random0.w)*age;\n\t        rotation+=ageRot;\n\t    #endif\n\t\t#ifdef ROTATIONOVERLIFETIMERANDOMCURVES\n\t\t\trotation+=vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,normalizedAge),a_Random0.w)\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,normalizedAge),a_Random0.w)\n\t        ,mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,normalizedAge),getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,normalizedAge),a_Random0.w));\n\t\t#endif\n\t#endif\n\treturn rotation;\n}\n#endif\n\nvec2 computeParticleUV(in vec2 uv,in float normalizedAge)\n{ \n\t#ifdef TEXTURESHEETANIMATIONCURVE\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\n\t\tfloat frame=getFrameFromGradient(u_TSAGradientUVs,cycleNormalizedAge-floor(cycleNormalizedAge));\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\n\t\tfloat floorTotalULength=floor(totalULength);\n\t    uv.x+=totalULength-floorTotalULength;\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\n    #endif\n\t#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n\t\tfloat cycleNormalizedAge=normalizedAge*u_TSACycles;\n\t\tfloat uvNormalizedAge=cycleNormalizedAge-floor(cycleNormalizedAge);\n\t    float frame=floor(mix(getFrameFromGradient(u_TSAGradientUVs,uvNormalizedAge),getFrameFromGradient(u_TSAMaxGradientUVs,uvNormalizedAge),a_Random1.x));\n\t\tfloat totalULength=frame*u_TSASubUVLength.x;\n\t\tfloat floorTotalULength=floor(totalULength);\n\t    uv.x+=totalULength-floorTotalULength;\n\t\tuv.y+=floorTotalULength*u_TSASubUVLength.y;\n    #endif\n\treturn uv;\n}\n\nvoid main()\n{\n\tfloat age = u_CurrentTime - a_DirectionTime.w;\n\tfloat normalizedAge = age/a_ShapePositionStartLifeTime.w;\n\tvec3 lifeVelocity;\n\tif(normalizedAge<1.0){ \n\tvec3 startVelocity=a_DirectionTime.xyz*a_StartSpeed;\n\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t\tlifeVelocity= computeParticleLifeVelocity(normalizedAge);//计算粒子生命周期速度\n\t#endif \n\tvec3 gravityVelocity=u_Gravity*age;\n\t\n\tvec4 worldRotation;\n\tif(u_SimulationSpace==0)\n\t\tworldRotation=a_SimulationWorldRotation;\n\telse\n\t\tworldRotation=u_WorldRotation;\n\t\n\tvec3 center=computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge,gravityVelocity,worldRotation);//计算粒子位置\n   \n   \n   #ifdef SPHERHBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        vec3 cameraUpVector =normalize(u_CameraUp);//TODO:是否外面归一化\n        vec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\n        vec3 upVector = normalize(cross(sideVector,u_CameraDirection));\n\t    corner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z,age,normalizedAge));\n\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,rotation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n\t\t\t\tfloat c = cos(rot);\n\t\t\t\tfloat s = sin(rot);\n\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\n\t\t\t\tcorner=rotation*corner;\n\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\n\t\t\t}\n\t\t#else\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tcenter += u_SizeScale.xzy*rotationByEuler(corner.x*sideVector+corner.y*upVector,a_StartRotation0);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfloat c = cos(a_StartRotation0.x);\n\t\t\t\tfloat s = sin(a_StartRotation0.x);\n\t\t\t\tmat2 rotation= mat2(c, -s, s, c);\n\t\t\t\tcorner=rotation*corner;\n\t\t\t\tcenter += u_SizeScale.xzy*(corner.x*sideVector+corner.y*upVector);\n\t\t\t}\n\t\t#endif\n   #endif\n   \n   #ifdef STRETCHEDBILLBOARD\n\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n\tvec3 velocity;\n\t#if defined(VELOCITYOVERLIFETIMECONSTANT)||defined(VELOCITYOVERLIFETIMECURVE)||defined(VELOCITYOVERLIFETIMERANDOMCONSTANT)||defined(VELOCITYOVERLIFETIMERANDOMCURVE)\n\t    if(u_VOLSpaceType==0)\n\t\t  velocity=rotationByQuaternions(u_SizeScale*(startVelocity+lifeVelocity),worldRotation)+gravityVelocity;\n\t    else\n\t\t  velocity=rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+lifeVelocity+gravityVelocity;\n    #else\n\t    velocity= rotationByQuaternions(u_SizeScale*startVelocity,worldRotation)+gravityVelocity;\n    #endif\t\n\t\tvec3 cameraUpVector = normalize(velocity);\n\t\tvec3 direction = normalize(center-u_CameraPos);\n        vec3 sideVector = normalize(cross(direction,normalize(velocity)));\n\t\t\n\t\tsideVector=u_SizeScale.xzy*sideVector;\n\t\tcameraUpVector=length(vec3(u_SizeScale.x,0.0,0.0))*cameraUpVector;\n\t\t\n\t    vec2 size=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n\t\t\n\t    const mat2 rotaionZHalfPI=mat2(0.0, -1.0, 1.0, 0.0);\n\t    corner=rotaionZHalfPI*corner;\n\t    corner.y=corner.y-abs(corner.y);\n\t\t\n\t    float speed=length(velocity);//TODO:\n\t    center +=sign(u_SizeScale.x)*(sign(u_StretchedBillboardLengthScale)*size.x*corner.x*sideVector+(speed*u_StretchedBillboardSpeedScale+size.y*u_StretchedBillboardLengthScale)*corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef HORIZONTALBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        const vec3 cameraUpVector=vec3(0.0,0.0,1.0);\n\t    const vec3 sideVector = vec3(-1.0,0.0,0.0);\n\t\t\n\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n        float c = cos(rot);\n        float s = sin(rot);\n        mat2 rotation= mat2(c, -s, s, c);\n\t    corner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\n\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n        center +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef VERTICALBILLBOARD\n\t\tvec2 corner=a_CornerTextureCoordinate.xy;//Billboard模式z轴无效\n        const vec3 cameraUpVector =vec3(0.0,1.0,0.0);\n        vec3 sideVector = normalize(cross(u_CameraDirection,cameraUpVector));\n\t\t\n\t\tfloat rot = computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n        float c = cos(rot);\n        float s = sin(rot);\n        mat2 rotation= mat2(c, -s, s, c);\n\t    corner=rotation*corner*cos(0.78539816339744830961566084581988);//TODO:临时缩小cos45,不确定U3D原因\n\t\tcorner*=computeParticleSizeBillbard(a_StartSize.xy,normalizedAge);\n        center +=u_SizeScale.xzy*(corner.x*sideVector+ corner.y*cameraUpVector);\n   #endif\n   \n   #ifdef RENDERMODE_MESH\n\t    vec3 size=computeParticleSizeMesh(a_StartSize,normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME)||defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tvec3 rotation=vec3(a_StartRotation0.xy,computeParticleRotationFloat(a_StartRotation0.z, age,normalizedAge));\n\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,rotation),worldRotation);\n\t\t\t}\n\t\t\telse{\n\t\t\t\t#ifdef ROTATIONOVERLIFETIME\n\t\t\t\t\tfloat angle=computeParticleRotationFloat(a_StartRotation0.x, age,normalizedAge);\n\t\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),angle),worldRotation));//已验证\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t#ifdef SHAPE\n\t\t\t\t\t\t\tcenter+= u_SizeScale.xzy*(rotationByQuaternions(rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),angle),worldRotation));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\t\tcenter+=rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle);//已验证\n\t\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\t\tcenter+=rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),angle),worldRotation);//已验证\n\t\t\t\t\t\t#endif\n\t\t\t\t\t}\n\t\t\t\t#endif\n\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t\t\t\t//TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\n\t\t\t\t\tvec3 angle=computeParticleRotationVec3(vec3(0.0,0.0,-a_StartRotation0.x), age,normalizedAge);\n\t\t\t\t\tcenter+= (rotationByQuaternions(rotationByEuler(u_SizeScale*a_MeshPosition*size,vec3(angle.x,angle.y,angle.z)),worldRotation));//已验证\n\t\t\t\t#endif\t\t\n\t\t\t}\n\t\t#else\n\t\t\tif(u_ThreeDStartRotation){\n\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByEuler(a_MeshPosition*size,a_StartRotation0),worldRotation);//已验证\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a_ShapePositionStartLifeTime.x!=0.0||a_ShapePositionStartLifeTime.y!=0.0){\n\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x);\n\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\tcenter+= (rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,normalize(cross(vec3(0.0,0.0,1.0),vec3(a_ShapePositionStartLifeTime.xy,0.0))),a_StartRotation0.x),worldRotation));//已验证\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t#ifdef SHAPE\n\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\tcenter+= u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x);\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,-1.0,0.0),a_StartRotation0.x),worldRotation);\t\n\t\t\t\t\t#else\n\t\t\t\t\t\tif(u_SimulationSpace==0)\n\t\t\t\t\t\t\tcenter+= rotationByAxis(u_SizeScale*a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x);\n\t\t\t\t\t\telse if(u_SimulationSpace==1)\n\t\t\t\t\t\t\tcenter+= rotationByQuaternions(u_SizeScale*rotationByAxis(a_MeshPosition*size,vec3(0.0,0.0,-1.0),a_StartRotation0.x),worldRotation);//已验证\n\t\t\t\t\t#endif\n\t\t\t\t}\n\t\t\t}\n\t\t#endif\n\t\tv_MeshColor=a_MeshColor;\n   #endif\n   \n    gl_Position=u_Projection*u_View*vec4(center,1.0);\n    v_Color = computeParticleColor(a_StartColor, normalizedAge);\n\t#ifdef DIFFUSEMAP\n\t\t#if defined(SPHERHBILLBOARD)||defined(STRETCHEDBILLBOARD)||defined(HORIZONTALBILLBOARD)||defined(VERTICALBILLBOARD)\n\t\t\tv_TextureCoordinate =computeParticleUV(a_CornerTextureCoordinate.zw, normalizedAge);\n\t\t#endif\n\t\t#ifdef RENDERMODE_MESH\n\t\t\tv_TextureCoordinate =computeParticleUV(a_MeshTextureCoordinate, normalizedAge);\n\t\t#endif\n\t\t\n\t\t#ifdef TILINGOFFSET\n\t\t\tv_TextureCoordinate=vec2(v_TextureCoordinate.x,1.0-v_TextureCoordinate.y)*u_TilingOffset.xy+vec2(u_TilingOffset.z,-u_TilingOffset.w);//需要特殊处理\n\t\t\tv_TextureCoordinate=vec2(v_TextureCoordinate.x,1.0-v_TextureCoordinate.y);//需要特殊处理\n\t\t#endif\n\t#endif\n    v_Discard=0.0;\n\t  \n\t#ifdef FOG\n\t\tv_PositionWorld=center;\n\t#endif\n   }\n   else\n\t{\n\t\tv_Discard=1.0;\n\t}\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n\n', 
            n = "#ifdef HIGHPRECISION\n  precision highp float;\n#else\n  precision mediump float;\n#endif\n\nvarying float v_Discard;\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\nuniform sampler2D u_texture;\nuniform vec4 u_Tintcolor;\n\n#ifdef RENDERMODE_MESH\n\tvarying vec4 v_MeshColor;\n#endif\n\n#ifdef FOG\n\tvarying vec3 v_PositionWorld;\n\tuniform vec3 u_CameraPos;\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\t#ifdef ADDTIVEFOG\n\t#else\n\t\tuniform vec3 u_FogColor;\n\t#endif\n#endif\n\n\nvoid main()\n{\t\n\t#ifdef RENDERMODE_MESH\n\t\tgl_FragColor=v_MeshColor;\n\t#else\n\t\tgl_FragColor=vec4(1.0);\t\n\t#endif\n\t\t\n\t#ifdef DIFFUSEMAP\n\t\tif(v_Discard!=0.0)\n\t\t\tdiscard;\n\t\t#ifdef TINTCOLOR\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*u_Tintcolor*2.0*v_Color;\n\t\t#else\n\t\t\tgl_FragColor*=texture2D(u_texture,v_TextureCoordinate)*v_Color;\n\t\t#endif\n\t#else\n\t\t#ifdef TINTCOLOR\n\t\t\tgl_FragColor*=u_Tintcolor*2.0*v_Color;\n\t\t#else\n\t\t\tgl_FragColor*=v_Color;\n\t\t#endif\n\t#endif\n\t\n\t#ifdef FOG\n\t\tvec3 toEye=u_CameraPos-v_PositionWorld;\n\t\tfloat toEyeLength=length(toEye);\n\t\ttoEye/=toEyeLength;\n\t\t\n\t\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\n\t\t#ifdef ADDTIVEFOG\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,vec3(0.0,0.0,0.0),lerpFact);\n\t\t#else\n\t\t\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n\t\t#endif\n\t#endif\n}", 
            o = Vt.add("PARTICLESHURIKEN"), s = new oe(i, r, yi.shaderDefines, si.shaderDefines), 
            o.addSubShader(s), s.addShaderPass(e, n, a), i = {
                a_Position: 0
            }, r = {
                u_TintColor: 1,
                u_Exposure: 1,
                u_Rotation: 1,
                u_CubeTexture: 1,
                u_MvpMatrix: 3
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nuniform mat4 u_MvpMatrix;\nuniform float u_Rotation;\nvarying vec3 v_Texcoord;\n\n\nvec4 rotateAroundYInDegrees (vec4 vertex, float degrees)\n{\n\tfloat angle = degrees * 3.141593 / 180.0;\n\tfloat sina=sin(angle);\n\tfloat cosa=cos(angle);\n\tmat2 m = mat2(cosa, -sina, sina, cosa);\n\treturn vec4(m*vertex.xz, vertex.yw).xzyw;\n}\n\t\t\nvoid main()\n{\n\tvec4 position=rotateAroundYInDegrees(a_Position,u_Rotation);\n\tgl_Position = (u_MvpMatrix*position).xyww;\n\tv_Texcoord=vec3(-a_Position.x,a_Position.yz);//转换坐标系\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n', 
            n = "#ifdef HIGHPRECISION\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nvarying vec3 v_Texcoord;\n\nuniform samplerCube u_CubeTexture;\nuniform float u_Exposure;\nuniform vec4 u_TintColor;\n\n\nvoid main()\n{\t\n\tvec3 color=textureCube(u_CubeTexture, v_Texcoord).rgb*u_TintColor.rgb*u_Exposure*2.0;\n\tgl_FragColor=vec4(color,1.0);\n}\n\n", 
            o = Vt.add("SkyBox"), s = new oe(i, r), o.addSubShader(s), s.addShaderPass(e, n), 
            i = {
                a_Position: 0
            }, r = {
                u_SunSize: 1,
                u_SunSizeConvergence: 1,
                u_AtmosphereThickness: 1,
                u_SkyTint: 1,
                u_GroundTint: 1,
                u_Exposure: 1,
                u_MvpMatrix: 3,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4
            }, e = "#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include \"Lighting.glsl\";\n\n#define OUTER_RADIUS 1.025\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\n#define MIE 0.0010             // Mie constant 米氏散射\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\n\nconst float SKY_GROUND_THRESHOLD = 0.02;\nconst float outerRadius = OUTER_RADIUS;\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\nconst float innerRadius = 1.0;\nconst float innerRadius2 = 1.0;\nconst float cameraHeight = 0.0001;\n\nconst float HDSundiskIntensityFactor = 15.0;\nconst float simpleSundiskIntensityFactor = 27.0;\n\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\nconst float kmESun = MIE * SUN_BRIGHTNESS;\nconst float km4PI = MIE * 4.0 * 3.14159265;\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\nconst float scaleDepth = 0.25;\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\n\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\n\nattribute vec4 a_Position;\n\nuniform mat4 u_MvpMatrix;\nuniform vec3 u_SkyTint;\nuniform vec3 u_GroundTint;\nuniform float u_Exposure;\nuniform float u_AtmosphereThickness;\nuniform DirectionLight u_DirectionLight;\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Rayleigh phase function\nfloat getRayleighPhase(vec3 light, vec3 ray) \n{\n\tfloat eyeCos = dot(light, ray);\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\n}\n\nfloat scaleAngle(float inCos)\n{\n\tfloat x = 1.0 - inCos;\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\n\nvoid main () {\n\tgl_Position = (u_MvpMatrix*a_Position).xyww;\n\n\tvec3 skyTintInGammaSpace = u_SkyTint;//支持非GAMMA空间后要调整\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\n\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\n\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\n\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n\tvec3 eyeRay = normalize(a_Position.xyz);\n\n\tfloat far = 0.0;\n\tvec3 cIn, cOut;\n\tif (eyeRay.y >= 0.0) {// Sky\n\t\t// Calculate the length of the \"atmosphere\"\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat height = innerRadius + cameraHeight;\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\tvec3 frontColor = vec3(0.0);\n\t\t//unrolling this manually to avoid some platform for loop slow\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n\t\tcIn = frontColor * (invWavelength * krESun);\n\t\tcOut = frontColor * kmESun;\n\t} else {// Ground\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\n\t\tvec3 pos = cameraPos + far * eyeRay;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\n\t\tfloat lightAngle = dot(-u_DirectionLight.Direction, pos);\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\n\t\tfloat lightScale = scaleAngle(lightAngle);\n\t\tfloat cameraOffset = depth*cameraScale;\n\t\tfloat temp = lightScale + cameraScale;\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\t// Now loop through the sample rays\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\n\t\tvec3 attenuate;\n\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat scatter = depth*temp - cameraOffset;\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\n\t}\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tv_Vertex = -a_Position.xyz;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_RayDir = -eyeRay;\n\t#else\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\n\t#endif\n\n\t// if we want to calculate color in vprog:\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint*u_GroundTint * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_DirectionLight.Direction, -eyeRay));\n\n\t\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\n\tfloat lightColorIntensity = clamp(length(u_DirectionLight.Color), 0.25, 1.0);\n\n\t#ifdef SUN_HIGH_QUALITY \n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_DirectionLight.Color / lightColorIntensity;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_DirectionLight.Color / lightColorIntensity;\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n", 
            n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\nconst float MIE_G = -0.990;\nconst float MIE_G2 = 0.9801;\nconst float SKY_GROUND_THRESHOLD = 0.02;\n\nuniform float u_SunSize;\nuniform float u_SunSizeConvergence;\nuniform DirectionLight u_DirectionLight;\n\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Mie phase function\nfloat getMiePhase(float eyeCos, float eyeCos2) {\n\tfloat temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\n\ttemp = pow(temp, pow(u_SunSize,0.65) * 10.0);\n\ttemp = max(temp,1.0e-4); // prevent division by zero, esp. in half precision\n\ttemp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\n\treturn temp;\n}\n\n// Calculates the sun shape\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray) {\n\t#ifdef SUN_HIGH_QUALITY\n\t\tfloat focusedEyeCos = pow(clamp(dot(lightPos, ray),0.0,1.0), u_SunSizeConvergence);\n\t\treturn getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\n\t#else //SUN_SIMPLE\n\t\tvec3 delta = lightPos - ray;\n\t\tfloat dist = length(delta);\n\t\tfloat spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\n\t\treturn spot * spot;\n\t#endif\n}\n\nvoid main() {\n\t// if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\n\t// if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\n\t// if y < 0 [eyeRay.y > 0] - sky\n\tvec3 col = vec3(0.0, 0.0, 0.0);\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tvec3 ray = normalize(v_Vertex);\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\n\t#elif defined(SUN_SIMPLE) \n\t\tvec3 ray = v_RayDir;\n\t\tfloat y = ray.y / SKY_GROUND_THRESHOLD;\t\n\t#else\n\t\tfloat y = v_SkyGroundFactor;\n\t#endif\n\n\t// if we did precalculate color in vprog: just do lerp between them\n\tcol = mix(v_SkyColor, v_GroundColor, clamp(y,0.0,1.0));\n\n\t#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\t\tif (y < 0.0)\n\t\t\tcol += v_SunColor * calcSunAttenuation(-u_DirectionLight.Direction, -ray);\n\t#endif\n\n\tcol = sqrt(col);//linear space convert to gamma space\n\tgl_FragColor=vec4(col,1.0);\n}\n\n', 
            o = Vt.add("SkyBoxProcedural"), s = new oe(i, r, null, ii.shaderDefines), o.addSubShader(s), 
            s.addShaderPass(e, n), i = {
                a_Position: 0,
                a_Normal: 3,
                a_Texcoord0: 2
            }, r = {
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_LightmapScaleOffset: 2,
                u_LightMap: 2,
                u_SplatAlphaTexture: 1,
                u_DiffuseTexture1: 1,
                u_DiffuseTexture2: 1,
                u_DiffuseTexture3: 1,
                u_DiffuseTexture4: 1,
                u_DiffuseTexture5: 1,
                u_DiffuseScaleOffset1: 1,
                u_DiffuseScaleOffset2: 1,
                u_DiffuseScaleOffset3: 1,
                u_DiffuseScaleOffset4: 1,
                u_DiffuseScaleOffset5: 1,
                u_FogStart: 4,
                u_FogRange: 4,
                u_FogColor: 4,
                "u_DirectionLight.Direction": 4,
                "u_DirectionLight.Color": 4,
                "u_PointLight.Position": 4,
                "u_PointLight.Range": 4,
                "u_PointLight.Attenuation": 4,
                "u_PointLight.Color": 4,
                "u_SpotLight.Position": 4,
                "u_SpotLight.Direction": 4,
                "u_SpotLight.Range": 4,
                "u_SpotLight.Spot": 4,
                "u_SpotLight.Color": 4,
                u_AmbientColor: 4,
                u_shadowMap1: 4,
                u_shadowMap2: 4,
                u_shadowMap3: 4,
                u_shadowPSSMDistance: 4,
                u_lightShadowVP: 4,
                u_shadowPCFoffset: 4
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec2 a_Texcoord0;\n\nuniform mat4 u_MvpMatrix;\n\nvarying vec2 v_Texcoord0;\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(LIGHTMAP)\n\tattribute vec3 a_Normal;\n\tvarying vec3 v_Normal;\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\n\tuniform mat4 u_WorldMat;\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef LIGHTMAP\n\tvarying vec2 v_LightMapUV;\n\tuniform vec4 u_LightmapScaleOffset;\n#endif\n\n#ifdef RECEIVESHADOW\n\tvarying float v_posViewZ;\n\t#ifdef SHADOWMAP_PSSM1 \n\t\tvarying vec4 v_lightMVPPos;\n\t\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n#endif\n\nvoid main()\n{\n\tgl_Position = u_MvpMatrix * a_Position;\n  \n\tv_Texcoord0 = a_Texcoord0;\n  \n\t#ifdef LIGHTMAP\n\t\tv_LightMapUV = vec2(a_Texcoord0.x, 1.0 - a_Texcoord0.y) * u_LightmapScaleOffset.xy + u_LightmapScaleOffset.zw;\n\t\tv_LightMapUV.y = 1.0 - v_LightMapUV.y;\n\t#endif\n  \n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t\tv_Normal = a_Normal;\n\t#endif\n\n\t#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)||(defined(RECEIVESHADOW)&&defined(SHADOWMAP_PSSM1))\n\t\tv_PositionWorld=(u_WorldMat*a_Position).xyz;\n\t#endif\n\n\t#ifdef RECEIVESHADOW\n\t\tv_posViewZ = gl_Position.w;\n\t\t#ifdef SHADOWMAP_PSSM1\n\t\t\tv_lightMVPPos = u_lightShadowVP[0] * vec4(v_PositionWorld,1.0);\n\t\t#endif\n\t#endif\n\tgl_Position=remapGLPositionZ(gl_Position);\n}', 
            n = '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Lighting.glsl";\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\n\tuniform vec3 u_CameraPos;\n\tvarying vec3 v_Normal;\n\tvarying vec3 v_PositionWorld;\n#endif\n\n#ifdef FOG\n\tuniform float u_FogStart;\n\tuniform float u_FogRange;\n\tuniform vec3 u_FogColor;\n#endif\n\n\n#ifdef DIRECTIONLIGHT\n\tuniform DirectionLight u_DirectionLight;\n#endif\n\n#ifdef POINTLIGHT\n\tuniform PointLight u_PointLight;\n#endif\n\n#ifdef SPOTLIGHT\n\tuniform SpotLight u_SpotLight;\n#endif\n\n#include "ShadowHelper.glsl"\n#ifdef RECEIVESHADOW\n\t#if defined(SHADOWMAP_PSSM2)||defined(SHADOWMAP_PSSM3)\n\tuniform mat4 u_lightShadowVP[4];\n\t#endif\n\t#ifdef SHADOWMAP_PSSM1 \n\tvarying vec4 v_lightMVPPos;\n\t#endif\n#endif\nvarying float v_posViewZ;\n\nuniform vec3 u_AmbientColor;\n\nuniform sampler2D u_SplatAlphaTexture;\n\nuniform sampler2D u_DiffuseTexture1;\nuniform sampler2D u_DiffuseTexture2;\nuniform sampler2D u_DiffuseTexture3;\nuniform sampler2D u_DiffuseTexture4;\nuniform sampler2D u_DiffuseTexture5;\n\nuniform vec4 u_DiffuseScaleOffset1;\nuniform vec4 u_DiffuseScaleOffset2;\nuniform vec4 u_DiffuseScaleOffset3;\nuniform vec4 u_DiffuseScaleOffset4;\nuniform vec4 u_DiffuseScaleOffset5;\n\nvarying vec2 v_Texcoord0;\n\n#ifdef LIGHTMAP\n\tuniform sampler2D u_LightMap;\n\tvarying vec2 v_LightMapUV;\n#endif\n\nvoid main()\n{\n\tvec4 splatAlpha = vec4(1.0);\n\t#ifdef ExtendTerrain_DETAIL_NUM1\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r;\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM2\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r + color2.xyz * (1.0 - splatAlpha.r);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM3\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * (1.0 - splatAlpha.r - splatAlpha.g);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM4\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b);\n\t#endif\n\t#ifdef ExtendTerrain_DETAIL_NUM5\n\t\tsplatAlpha = texture2D(u_SplatAlphaTexture, v_Texcoord0);\n\t\tvec4 color1 = texture2D(u_DiffuseTexture1, v_Texcoord0 * u_DiffuseScaleOffset1.xy);\n\t\tvec4 color2 = texture2D(u_DiffuseTexture2, v_Texcoord0 * u_DiffuseScaleOffset2.xy);\n\t\tvec4 color3 = texture2D(u_DiffuseTexture3, v_Texcoord0 * u_DiffuseScaleOffset3.xy);\n\t\tvec4 color4 = texture2D(u_DiffuseTexture4, v_Texcoord0 * u_DiffuseScaleOffset4.xy);\n\t\tvec4 color5 = texture2D(u_DiffuseTexture5, v_Texcoord0 * u_DiffuseScaleOffset5.xy);\n\t\tgl_FragColor.xyz = color1.xyz * splatAlpha.r  + color2.xyz * splatAlpha.g + color3.xyz * splatAlpha.b + color4.xyz * splatAlpha.a + color5.xyz * (1.0 - splatAlpha.r - splatAlpha.g - splatAlpha.b - splatAlpha.a);\n\t#endif\n\t\tgl_FragColor.w = splatAlpha.a;\n\t\t\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n    vec3 normal = v_Normal;\n\tvec3 dif, spe;\n#endif\n\nvec3 diffuse = vec3(0.0);\nvec3 specular= vec3(0.0);\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)||defined(FOG)\n\tvec3 toEye;\n\t#ifdef FOG\n\t\ttoEye=u_CameraPos-v_PositionWorld;\n\t\tfloat toEyeLength=length(toEye);\n\t\ttoEye/=toEyeLength;\n\t#else\n\t\ttoEye=normalize(u_CameraPos-v_PositionWorld);\n\t#endif\n#endif\n\n#ifdef DIRECTIONLIGHT\n\tLayaAirBlinnPhongDiectionLight(vec3(0.0), 1.0, normal, vec3(1.0), toEye,u_DirectionLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n \n#ifdef POINTLIGHT\n\tLayaAirBlinnPhongPointLight(v_PositionWorld, vec3(0.0), 1.0, normal, vec3(1.0), toEye, u_PointLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n\n#ifdef SPOTLIGHT\n\tLayaAirBlinnPhongSpotLight(v_PositionWorld, vec3(0.0), 1.0, normal, vec3(1.0), toEye, u_SpotLight, dif, spe);\n\tdiffuse+=dif;\n\tspecular+=spe;\n#endif\n\nvec3 globalDiffuse = u_AmbientColor;\n#ifdef LIGHTMAP\n\tglobalDiffuse += DecodeLightmap(texture2D(u_LightMap, v_LightMapUV));\n#endif\n\n#ifdef RECEIVESHADOW\n\tfloat shadowValue = 1.0;\n\t#ifdef SHADOWMAP_PSSM3\n\t\tshadowValue = getShadowPSSM3( u_shadowMap1,u_shadowMap2,u_shadowMap3,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t#endif\n\t#ifdef SHADOWMAP_PSSM2\n\t\tshadowValue = getShadowPSSM2( u_shadowMap1,u_shadowMap2,u_lightShadowVP,u_shadowPSSMDistance,u_shadowPCFoffset,v_PositionWorld,v_posViewZ,0.001);\n\t#endif \n\t#ifdef SHADOWMAP_PSSM1\n\t\tshadowValue = getShadowPSSM1( u_shadowMap1,v_lightMVPPos,u_shadowPSSMDistance,u_shadowPCFoffset,v_posViewZ,0.001);\n\t#endif\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse) * shadowValue, gl_FragColor.a);\n#else\n\tgl_FragColor = vec4(gl_FragColor.rgb * (globalDiffuse + diffuse), gl_FragColor.a);\n#endif\n\n#if defined(DIRECTIONLIGHT)||defined(POINTLIGHT)||defined(SPOTLIGHT)\n\t#ifdef RECEIVESHADOW\n\t\tgl_FragColor.rgb += specular * shadowValue;\n\t#else\n\t\tgl_FragColor.rgb += specular;\n\t#endif\n#endif\n\n#ifdef FOG\n\tfloat lerpFact=clamp((toEyeLength-u_FogStart)/u_FogRange,0.0,1.0);\n\tgl_FragColor.rgb=mix(gl_FragColor.rgb,u_FogColor,lerpFact);\n#endif\n}\n\n\n\n\n\n', 
            o = Vt.add("ExtendTerrain"), s = new oe(i, r, Jn.shaderDefines, ui.shaderDefines), 
            o.addSubShader(s), s.addShaderPass(e, n, a), i = {
                a_Position: 0,
                a_OffsetVector: 1,
                a_Texcoord0X: 4,
                a_Texcoord0Y: 3,
                a_BirthTime: 2
            }, r = {
                u_MvpMatrix: 2,
                u_View: 3,
                u_Projection: 3,
                u_TilingOffset: 1,
                u_MainTexture: 1,
                u_MainColor: 1,
                u_CurTime: 2,
                u_LifeTime: 2,
                u_WidthCurve: 2,
                u_WidthCurveKeyLength: 2,
                u_GradientColorkey: 2,
                u_GradientAlphakey: 2
            }, a = {
                s_Cull: 0,
                s_Blend: 1,
                s_BlendSrc: 2,
                s_BlendDst: 3,
                s_DepthTest: 12,
                s_DepthWrite: 13
            }, e = '#include "Lighting.glsl";\n\nattribute vec3 a_Position;\nattribute vec3 a_OffsetVector;\nattribute vec4 a_Color;\nattribute float a_Texcoord0X;\nattribute float a_Texcoord0Y;\nattribute float a_BirthTime;\n\nuniform mat4 u_View;\nuniform mat4 u_Projection;\n\nuniform vec4 u_TilingOffset;\n\nuniform float u_CurTime;\nuniform float u_LifeTime;\nuniform vec4 u_WidthCurve[10];\nuniform int u_WidthCurveKeyLength;\n\nuniform vec4 u_GradientColorkey[10];\nuniform vec2 u_GradientAlphakey[10];\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\n{\n\tfloat t2 = t * t;\n\tfloat t3 = t2 * t;\n\tfloat a = 2.0 * t3 - 3.0 * t2 + 1.0;\n\tfloat b = t3 - 2.0 * t2 + t;\n\tfloat c = t3 - t2;\n\tfloat d = -2.0 * t3 + 3.0 * t2;\n\treturn a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\n}\n\nfloat getCurWidth(in float normalizeTime)\n{\n\tfloat width;\n\tif(normalizeTime == 0.0){\n\t\twidth=u_WidthCurve[0].w;\n\t}\n\telse if(normalizeTime >= 1.0){\n\t\twidth=u_WidthCurve[u_WidthCurveKeyLength - 1].w;\n\t}\n\telse{\n\t\tfor(int i = 0; i < 10; i ++ )\n\t\t{\n\t\t\tif(normalizeTime == u_WidthCurve[i].x){\n\t\t\t\twidth=u_WidthCurve[i].w;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tvec4 lastFrame = u_WidthCurve[i];\n\t\t\tvec4 nextFrame = u_WidthCurve[i + 1];\n\t\t\tif(normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\n\t\t\t{\n\t\t\t\tfloat duration = nextFrame.x - lastFrame.x;\n\t\t\t\tfloat t = (normalizeTime - lastFrame.x) / duration;\n\t\t\t\tfloat outTangent = lastFrame.z;\n\t\t\t\tfloat inTangent = nextFrame.y;\n\t\t\t\tfloat value1 = lastFrame.w;\n\t\t\t\tfloat value2 = nextFrame.w;\n\t\t\t\twidth=hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn width;\n}\t\n\nvec4 getColorFromGradientByBlend(in vec4 gradientColors[10], in vec2 gradientAlphas[10], in float normalizeTime)\n{\n\tvec4 color;\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec4 gradientColor = gradientColors[i];\n\t\tfloat colorKey = gradientColor.x;\n\t\tif(colorKey >= normalizeTime)\n\t\t{\n\t\t\tvec4 lastGradientColor = gradientColors[i-1];\n\t\t\tfloat lastColorKey = lastGradientColor.x;\n\t\t\tfloat age = (normalizeTime - lastColorKey) / (colorKey - lastColorKey);\n\t\t\tcolor.rgb = mix(gradientColors[i-1].yzw, gradientColor.yzw, age);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec2 gradientAlpha = gradientAlphas[i];\n\t\tfloat alphaKey = gradientAlpha.x;\n\t\tif(alphaKey >= normalizeTime)\n\t\t{\n\t\t\tvec2 lastGradientAlpha = gradientAlphas[i-1];\n\t\t\tfloat lastAlphaKey = lastGradientAlpha.x;\n\t\t\tfloat age = (normalizeTime - lastAlphaKey) / (alphaKey - lastAlphaKey);\n\t\t\tcolor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn color;\n}\n\nvec4 getColorFromGradientByFixed(in vec4 gradientColors[10], in vec2 gradientAlphas[10], in float normalizeTime)\n{\n\tvec4 color;\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec4 gradientColor = gradientColors[i];\n\t\tif(gradientColor.w >= normalizeTime)\n\t\t{\n\t\t\tcolor.rgb = gradientColor.xyz;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 1; i < 10; i++)\n\t{\n\t\tvec2 gradientAlpha = gradientAlphas[i];\n\t\tif(gradientAlpha.y >= normalizeTime)\n\t\t{\n\t\t\tcolor.a = gradientAlpha.x;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn color;\n}\n\nvoid main()\n{\n\tfloat normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\n\t\n\t#ifdef TILINGOFFSET\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\n\t#else\n\t\tv_Texcoord0 = vec2(a_Texcoord0X, a_Texcoord0Y);\n\t#endif\n\t\n\t#ifdef GRADIENTMODE_BLEND\n\t\tv_Color = getColorFromGradientByBlend(u_GradientColorkey, u_GradientAlphakey, normalizeTime);\n\t#else\n\t\tv_Color = getColorFromGradientByFixed(u_GradientColorkey, u_GradientAlphakey, normalizeTime);\n\t#endif\n\t\n\tgl_Position = u_Projection * u_View * vec4(a_Position + a_OffsetVector * getCurWidth(normalizeTime),1.0);\n\tgl_Position=remapGLPositionZ(gl_Position);\n}\n', 
            n = "#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nuniform sampler2D u_MainTexture;\nuniform vec4 u_MainColor;\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nvoid main()\n{\t\n\tvec4 color = 2.0 * u_MainColor * v_Color;\n\t#ifdef MAINTEXTURE\n\t\tvec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\n\t\tcolor *= mainTextureColor;\n\t#endif\n\tgl_FragColor = color;\n}\n\n", 
            o = Vt.add("Trail"), s = new oe(i, r, Si.shaderDefines, ni.shaderDefines), o.addSubShader(s), 
            s.addShaderPass(e, n, a), i = {
                a_Position: 0,
                a_Normal: 3,
                a_Tangent0: 4
            }, r = {
                u_MvpMatrix: 2,
                u_WorldMat: 2,
                u_CameraPos: 3,
                u_Time: 4,
                u_MainTexture: 1,
                u_NormalTexture: 1,
                u_HorizonColor: 1,
                u_WaveScale: 1,
                u_WaveSpeed: 1
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_Position;\nattribute vec3 a_Normal;\nattribute vec4 a_Tangent0;\n\nuniform mat4 u_MvpMatrix;\nuniform mat4 u_WorldMat;\nuniform vec3 u_CameraPos;\nuniform float u_WaveScale;\nuniform vec4 u_WaveSpeed;\nuniform float u_Time;\n\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec2 v_Texcoord0;\nvarying vec2 v_Texcoord1;\n\nvoid main()\n{\n\tvec4 positionWorld = u_WorldMat * a_Position;\n\tvec4 position = u_MvpMatrix * a_Position;\n\t\n\tvec4 temp = vec4(positionWorld.x, positionWorld.z, positionWorld.x, positionWorld.z) * u_WaveScale + u_WaveSpeed * u_WaveScale * u_Time;\n\t\n\tv_Texcoord0 = temp.xy * vec2(0.4, 0.45);\n\tv_Texcoord1 = temp.wz;\n\t\n\tmat3 worldMat = mat3(u_WorldMat);\n\tv_Normal = worldMat * a_Normal;\n\tv_Tangent = worldMat * a_Tangent0.xyz;\n\tv_Binormal = cross(v_Normal, v_Tangent) * a_Tangent0.w;\n\t\n\tv_ViewDir = u_CameraPos - positionWorld.xyz;\n\tgl_Position = position;\n\tgl_Position=remapGLPositionZ(gl_Position);\n}', 
            n = '#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#ifdef MAINTEXTURE\n\tuniform sampler2D u_MainTexture;\n#endif\n\n#ifdef NORMALTEXTURE\n\tuniform sampler2D u_NormalTexture;\n#endif\n\nuniform vec4 u_HorizonColor;\n\nvarying vec3 v_Normal;\nvarying vec3 v_Tangent;\nvarying vec3 v_Binormal;\nvarying vec3 v_ViewDir;\nvarying vec2 v_Texcoord0;\nvarying vec2 v_Texcoord1;\n\n#include "Lighting.glsl"\n\nvoid main()\n{\n\tvec4 bumpColor1 = texture2D(u_NormalTexture, v_Texcoord0);\n\tvec4 bumpColor2 = texture2D(u_NormalTexture, v_Texcoord1);\n\t\n\tvec3 normal1 = NormalSampleToWorldSpace1(bumpColor1, v_Tangent, v_Binormal, v_Normal);\n\tvec3 normal2 = NormalSampleToWorldSpace1(bumpColor2, v_Tangent, v_Binormal, v_Normal);\n\t\n\tvec3 normal = normalize((normal1 + normal2) * 0.5);\n\tvec3 viewDir = normalize(v_ViewDir);\n\tfloat fresnel = dot(viewDir, normal);\n\t\n\tvec4 waterColor = texture2D(u_MainTexture, vec2(fresnel, fresnel));\n\t\n\tvec4 color;\n\tcolor.rgb = mix(waterColor.rgb, u_HorizonColor.rgb, vec3(waterColor.a));\n\tcolor.a = u_HorizonColor.a;\n\t\n\tgl_FragColor = color;\n}\n\n', 
            o = Vt.add("WaterPrimary"), s = new oe(i, r, null, hi.shaderDefines), o.addSubShader(s), 
            s.addShaderPass(e, n), i = {
                a_PositionTexcoord: 0
            }, r = {
                u_ScreenTexture: 1
            }, e = '#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', 
            n = "#ifdef FSHIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\nuniform sampler2D u_ScreenTexture;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_ScreenTexture, v_Texcoord0);\n}\n\n", 
            o = Vt.add("ScreenQuad"), s = new oe(i, r, null, null), o.addSubShader(s);
            var l = s.addShaderPass(e, n), h = l.renderState;
            h.depthTest = 519, h.depthWrite = !1, h.cull = 0, h.blend = 0, i = {
                a_PositionTexcoord: 0
            }, r = {
                u_MainTex: 1,
                u_BloomTex: 1,
                u_AutoExposureTex: 1,
                u_MainTex_TexelSize: 1,
                u_SampleScale: 1,
                u_Threshold: 1,
                u_Params: 1
            }, o = Vt.add("PostProcessBloom", i, r), s = new oe(null, null, null, null), o.addSubShader(s), 
            (h = (l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_AutoExposureTex;\nuniform vec4 u_MainTex_TexelSize;\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\nuniform vec4 u_Params; // x: clamp, yzw: unused\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter13();\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0, s = new oe(null, null, null, null), 
            o.addSubShader(s), (h = (l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_AutoExposureTex;\nuniform vec4 u_MainTex_TexelSize;\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\nuniform vec4 u_Params; // x: clamp, yzw: unused\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter4() {\n\tmediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter4();\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0, s = new oe(null, null, null, null), 
            o.addSubShader(s), (h = (l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform vec4 u_MainTex_TexelSize;\n\nvoid fragDownsample13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = color;\n}\n\nvoid main() {\n\tfragDownsample13();\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0, s = new oe(null, null, null, null), 
            o.addSubShader(s), (h = (l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_BloomTex;\n\nuniform vec4 u_MainTex_TexelSize;\nuniform float u_SampleScale;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\n\treturn bloom + color;\n}\n\nvoid fragUpsampleTent() {\n\tmediump vec4 bloom = UpsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, u_SampleScale);\n\tgl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main() {\n\tfragUpsampleTent();\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0, s = new oe(null, null, null, null), 
            o.addSubShader(s), (h = (l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_BloomTex;\n\nuniform vec4 u_MainTex_TexelSize;\nuniform float u_SampleScale;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv) {\n\tmediump vec4 color = texture2D(u_BloomTex, uv);\n\treturn bloom + color;\n}\n\nvoid fragUpsampleBox() {\n\tmediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n\tgl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main() {\n\tfragUpsampleBox();\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0, s = new oe(null, null, null, null), 
            o.addSubShader(s), (h = (l = s.addShaderPass('#include "Lighting.glsl";\n\nattribute vec4 a_PositionTexcoord;\nvarying vec2 v_Texcoord0;\n\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapGLPositionZ(gl_Position);\n}', '#ifdef HIGHPRECISION\n\tprecision highp float;\n#else\n\tprecision mediump float;\n#endif\n\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_AutoExposureTex;\nuniform vec4 u_MainTex_TexelSize;\nuniform vec4 u_Threshold; // x: threshold value (linear), y: threshold - knee, z: knee * 2, w: 0.25 / knee\nuniform vec4 u_Params; // x: clamp, yzw: unused\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv) {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, uv).r;\n\tcolor *= autoExposure;\n\tcolor = min(vec4(u_Params.x), color); // clamp to max\n\tcolor = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n\treturn color;\n}\n\nvoid fragPrefilter13() {\n\tmediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n\tgl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main() {\n\tfragPrefilter13();\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0, i = {
                a_PositionTexcoord: 0
            }, r = {
                u_MainTex: 1,
                u_BloomTex: 1,
                u_AutoExposureTex: 1,
                u_Bloom_DirtTex: 1,
                u_BloomTex_TexelSize: 1,
                u_Bloom_Settings: 1,
                u_Bloom_Color: 1
            }, o = Vt.add("PostProcessComposite", i, r), s = new oe(null, null, null, Re.shaderDefines), 
            o.addSubShader(s), (h = (l = s.addShaderPass("attribute vec4 a_Position;\nvarying vec2 v_Texcoord0;\n\nvec2 TransformTriangleVertexToUV(vec2 vertex)\n{\n    vec2 uv = (vertex + 1.0) * 0.5;\n    return uv;\n}\n\nvoid main() {\n\tgl_Position =vec4(a_Position.xy, 0.0, 1.0);\n\tv_Texcoord0=TransformTriangleVertexToUV(a_Position.xy);\n\tgl_Position=remapGLPositionZ(gl_Position);\n}", '#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nuniform sampler2D u_MainTex;\nuniform sampler2D u_BloomTex;\n\nuniform sampler2D u_AutoExposureTex;\nuniform sampler2D u_Bloom_DirtTex;\nuniform vec4 u_BloomTex_TexelSize;\nuniform vec4 u_Bloom_DirtTileOffset; // xy: tiling, zw: offset\nuniform mediump vec3 u_Bloom_Settings;// x: sampleScale, y: intensity, z: dirt intensity\nuniform mediump vec3 u_Bloom_Color;\n\nvoid main() {\n\tmediump float autoExposure = texture2D(u_AutoExposureTex, v_Texcoord0).r;\n\tmediump vec4 color=vec4(0.0)\n\tcolor = texture2D(u_MainTex, v_Texcoord0);\n\t\n\tcolor = SRGBToLinear(color);\n\tcolor.rgb *= autoExposure;\n\t\n\t#if BLOOM || BLOOM_LOW\n\t{\n\t\t#if BLOOM\n\t\t\tmediump vec4 bloom = UpsampleTent(_BloomTex, uvDistorted, _BloomTex_TexelSize.xy, _Bloom_Settings.x);\n\t\t#else\n\t\t\tmediump vec4 bloom = UpsampleBox(_BloomTex, uvDistorted, _BloomTex_TexelSize.xy, _Bloom_Settings.x);\n\t\t#endif\n\n\t\t// UVs should be Distort(uv * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw)\n\t\t// but considering we use a cover-style scale on the dirt texture the difference\n\t\t// isn\'t massive so we chose to save a few ALUs here instead in case lens distortion\n\t\t// is active\n\t\tmediump vec4 dirt = mediump vec4(SAMPLE_TEXTURE2D(_Bloom_DirtTex, sampler_Bloom_DirtTex, uvDistorted * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw).rgb, 0.0);\n\n\t\t// Additive bloom (artist friendly)\n\t\tbloom *= _Bloom_Settings.y;\n\t\tdirt *= _Bloom_Settings.z;\n\t\tcolor += bloom * half4(_Bloom_Color, 1.0);\n\t\tcolor += dirt * bloom;\n\t}\n\t#endif\n\t\n\thalf4 output = color;\n\toutput = LinearToSRGB(output);\n\t//output.rgb = Dither(output.rgb, v_Texcoord0);//TODO:\n}')).renderState).depthTest = 519, 
            h.depthWrite = !1, h.cull = 0, h.blend = 0;
        }, t._rangeAttenTex = null, t;
    }(), kt = function() {
        function t() {}
        return r(t, "laya.d3.utils.Utils3D"), t._convertToLayaVec3 = function(t, e, n) {
            e.x = n ? -t.x() : t.x(), e.y = t.y(), e.z = t.z();
        }, t._convertToBulletVec3 = function(t, e, n) {
            e.setValue(n ? -t.x : t.x, t.y, t.z);
        }, t._rotationTransformScaleSkinAnimation = function(e, n, i, r, a, o, s, l, h, u, c, _) {
            var d = t._tempArray16_0, f = t._tempArray16_1, m = t._tempArray16_2, p = r + r, T = a + a, E = o + o, v = r * p, g = a * p, S = a * T, y = o * p, x = o * T, D = o * E, I = s * p, R = s * T, M = s * E;
            d[15] = 1, d[0] = 1 - S - D, d[1] = g + M, d[2] = y - R, d[4] = g - M, d[5] = 1 - v - D, 
            d[6] = x + I, d[8] = y + R, d[9] = x - I, d[10] = 1 - v - S, f[15] = 1, f[0] = l, 
            f[5] = h, f[10] = u;
            var A, C, L, O, N;
            for (A = 0; A < 4; A++) C = d[A], L = d[A + 4], O = d[A + 8], N = d[A + 12], m[A] = C, 
            m[A + 4] = L, m[A + 8] = O, m[A + 12] = C * e + L * n + O * i + N;
            for (A = 0; A < 4; A++) C = m[A], L = m[A + 4], O = m[A + 8], N = m[A + 12], c[A + _] = C * f[0] + L * f[1] + O * f[2] + N * f[3], 
            c[A + _ + 4] = C * f[4] + L * f[5] + O * f[6] + N * f[7], c[A + _ + 8] = C * f[8] + L * f[9] + O * f[10] + N * f[11], 
            c[A + _ + 12] = C * f[12] + L * f[13] + O * f[14] + N * f[15];
        }, t._createSceneByJsonForMaker = function(e, n, i) {
            var r = t._createNodeByJsonForMaker(e, n, i);
            return t._addComponentByJsonForMaker(e, n, i), r;
        }, t._createNodeByJsonForMaker = function(e, n, i) {
            var r;
            switch (e.type) {
              case "Scene3D":
                r = new Qn();
                break;

              case "Sprite3D":
                r = new Fn();
                break;

              case "MeshSprite3D":
                r = new Ei(), n && n.push(r);
                break;

              case "SkinnedMeshSprite3D":
                r = new Di();
                break;

              case "ShuriKenParticle3D":
                r = new yi();
                break;

              case "Terrain":
                r = new ei();
                break;

              case "Camera":
                r = new Mi();
                break;

              case "DirectionLight":
                r = new gi();
                break;

              case "PointLight":
                r = new Ii();
                break;

              case "SpotLight":
                r = new vi();
                break;

              case "TrailSprite3D":
                r = new Si();
                break;

              default:
                var a = _.getClass(e.props.runtime);
                r = new a();
            }
            var o = e.child;
            if (o) for (var s = 0, h = o.length; s < h; s++) {
                var u = t._createNodeByJsonForMaker(o[s], n, i);
                r.addChild(u);
            }
            var c = e.compId;
            r.compId = c, r._parse(e.props, null), i && (i._idMap[c] = r), t._compIdToNode[c] = r;
            var d = e.components;
            if (d) for (var f = 0, m = d.length; f < m; f++) {
                var p = d[f];
                if ((a = l.window.Laya[p.type]) || (a = l.window, p.type.split(".").forEach(function(t) {
                    a = a[t];
                })), "function" == typeof a) {
                    var T = new a();
                    i && (i._idMap[p.compId] = T, console.log(p.compId));
                } else console.warn("Utils3D:Unkown component type.");
            }
            return r;
        }, t._addComponentByJsonForMaker = function(e, n, i) {
            var r = e.compId, a = t._compIdToNode[r], o = e.child;
            if (o) for (var s = 0, h = o.length; s < h; s++) t._addComponentByJsonForMaker(o[s], n, i);
            var u = e.components;
            if (u) for (var c = 0, _ = u.length; c < _; c++) {
                var d = u[c];
                if (!(m = l.window.Laya[d.type])) {
                    var f = d.type.split("."), m = l.window;
                    f.forEach(function(t) {
                        m = m[t];
                    });
                }
                if ("function" == typeof m) {
                    var p = i._idMap[d.compId];
                    a.addComponentIntance(p), p._parse(d);
                } else console.warn("Utils3D:Unkown component type.");
            }
        }, t._createSprite3DInstance = function(e, n, i) {
            var r;
            switch (e.type) {
              case "Scene3D":
                r = new Qn();
                break;

              case "Sprite3D":
                r = new Fn();
                break;

              case "MeshSprite3D":
                r = new Ei(), i && i.push(r);
                break;

              case "SkinnedMeshSprite3D":
                r = new Di();
                break;

              case "ShuriKenParticle3D":
                r = new yi();
                break;

              case "Terrain":
                r = new ei();
                break;

              case "Camera":
                r = new Mi();
                break;

              case "DirectionLight":
                r = new gi();
                break;

              case "PointLight":
                r = new Ii();
                break;

              case "SpotLight":
                r = new vi();
                break;

              case "TrailSprite3D":
                r = new Si();
                break;

              default:
                throw new Error("Utils3D:unidentified class type in (.lh) file.");
            }
            var a = e.child;
            if (a) for (var o = 0, s = a.length; o < s; o++) {
                var l = t._createSprite3DInstance(a[o], n, i);
                r.addChild(l);
            }
            return n[e.instanceID] = r, r;
        }, t._createComponentInstance = function(e, n) {
            var i = n[e.instanceID];
            i._parse(e.props, n);
            var r = e.child;
            if (r) for (var a = 0, o = r.length; a < o; a++) t._createComponentInstance(r[a], n);
            var s = e.components;
            if (s) for (var h = 0, u = s.length; h < u; h++) {
                var c = s[h], _ = l.window.Laya[c.type];
                if (!_) {
                    var d = c.type.split(".");
                    _ = l.window, d.forEach(function(t) {
                        _ = _[t];
                    });
                }
                "function" == typeof _ ? i.addComponent(_)._parse(c) : console.warn("Unkown component type.");
            }
        }, t._createNodeByJson02 = function(e, n) {
            var i = {}, r = t._createSprite3DInstance(e, i, n);
            return t._createComponentInstance(e, i), r;
        }, t._computeBoneAndAnimationDatasByBindPoseMatrxix = function(t, e, n, i, r, a) {
            var o, s, l = 0, h = 0, u = t.length;
            for (o = 0; o < u; l += t[o].keyframeWidth, h += 16, o++) laya.d3.utils.Utils3D._rotationTransformScaleSkinAnimation(e[l + 0], e[l + 1], e[l + 2], e[l + 3], e[l + 4], e[l + 5], e[l + 6], e[l + 7], e[l + 8], e[l + 9], i, h), 
            0 != o && (s = 16 * t[o].parentIndex, laya.d3.utils.Utils3D.mulMatrixByArray(i, s, i, h, i, h));
            var c = n.length;
            for (o = 0; o < c; o++) laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(i, 16 * a[o], n[o], r, 16 * o);
        }, t._computeAnimationDatasByArrayAndMatrixFast = function(t, e, n, i) {
            for (var r = 0, a = t.length; r < a; r++) laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(e, 16 * i[r], t[r], n, 16 * r);
        }, t._computeBoneAndAnimationDatasByBindPoseMatrxixOld = function(t, e, n, i, r) {
            var a, o, s = 0, l = 0, h = t.length;
            for (a = 0; a < h; s += t[a].keyframeWidth, l += 16, a++) laya.d3.utils.Utils3D._rotationTransformScaleSkinAnimation(e[s + 7], e[s + 8], e[s + 9], e[s + 3], e[s + 4], e[s + 5], e[s + 6], e[s + 0], e[s + 1], e[s + 2], i, l), 
            0 != a && (o = 16 * t[a].parentIndex, laya.d3.utils.Utils3D.mulMatrixByArray(i, o, i, l, i, l));
            var u = n.length;
            for (a = 0; a < u; a++) {
                var c = 16 * a;
                laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(i, c, n[a], r, c);
            }
        }, t._computeAnimationDatasByArrayAndMatrixFastOld = function(t, e, n) {
            for (var i = t.length, r = 0; r < i; r++) {
                var a = 16 * r;
                laya.d3.utils.Utils3D.mulMatrixByArrayAndMatrixFast(e, a, t[r], n, a);
            }
        }, t._computeRootAnimationData = function(t, e, n) {
            for (var i = 0, r = 0, a = 0, o = t.length; i < o; r += t[i].keyframeWidth, a += 16, 
            i++) laya.d3.utils.Utils3D.createAffineTransformationArray(e[r + 0], e[r + 1], e[r + 2], e[r + 3], e[r + 4], e[r + 5], e[r + 6], e[r + 7], e[r + 8], e[r + 9], n, a);
        }, t.transformVector3ArrayByQuat = function(t, e, n, i, r) {
            var a = t[e], o = t[e + 1], s = t[e + 2], l = n.x, h = n.y, u = n.z, c = n.w, _ = c * a + h * s - u * o, d = c * o + u * a - l * s, f = c * s + l * o - h * a, m = -l * a - h * o - u * s;
            i[r] = _ * c + m * -l + d * -u - f * -h, i[r + 1] = d * c + m * -h + f * -l - _ * -u, 
            i[r + 2] = f * c + m * -u + _ * -h - d * -l;
        }, t.mulMatrixByArray = function(e, n, i, r, a, o) {
            var s, l, h, u, c;
            if (a === i) {
                for (i = t._tempArray16_3, s = 0; s < 16; ++s) i[s] = a[o + s];
                r = 0;
            }
            for (s = 0; s < 4; s++) l = e[n + s], h = e[n + s + 4], u = e[n + s + 8], c = e[n + s + 12], 
            a[o + s] = l * i[r + 0] + h * i[r + 1] + u * i[r + 2] + c * i[r + 3], a[o + s + 4] = l * i[r + 4] + h * i[r + 5] + u * i[r + 6] + c * i[r + 7], 
            a[o + s + 8] = l * i[r + 8] + h * i[r + 9] + u * i[r + 10] + c * i[r + 11], a[o + s + 12] = l * i[r + 12] + h * i[r + 13] + u * i[r + 14] + c * i[r + 15];
        }, t.mulMatrixByArrayFast = function(t, e, n, i, r, a) {
            var o, s, l, h, u;
            for (o = 0; o < 4; o++) s = t[e + o], l = t[e + o + 4], h = t[e + o + 8], u = t[e + o + 12], 
            r[a + o] = s * n[i + 0] + l * n[i + 1] + h * n[i + 2] + u * n[i + 3], r[a + o + 4] = s * n[i + 4] + l * n[i + 5] + h * n[i + 6] + u * n[i + 7], 
            r[a + o + 8] = s * n[i + 8] + l * n[i + 9] + h * n[i + 10] + u * n[i + 11], r[a + o + 12] = s * n[i + 12] + l * n[i + 13] + h * n[i + 14] + u * n[i + 15];
        }, t.mulMatrixByArrayAndMatrixFast = function(t, e, n, i, r) {
            var a, o, s, l, h, u = n.elements, c = u[0], _ = u[1], d = u[2], f = u[3], m = u[4], p = u[5], T = u[6], E = u[7], v = u[8], g = u[9], S = u[10], y = u[11], x = u[12], D = u[13], I = u[14], R = u[15], M = e, A = e + 4, C = e + 8, L = e + 12, O = r, N = r + 4, V = r + 8, w = r + 12;
            for (a = 0; a < 4; a++) o = t[M + a], s = t[A + a], l = t[C + a], h = t[L + a], 
            i[O + a] = o * c + s * _ + l * d + h * f, i[N + a] = o * m + s * p + l * T + h * E, 
            i[V + a] = o * v + s * g + l * S + h * y, i[w + a] = o * x + s * D + l * I + h * R;
        }, t.createAffineTransformationArray = function(t, e, n, i, r, a, o, s, l, h, u, c) {
            var _ = i + i, d = r + r, f = a + a, m = i * _, p = i * d, T = i * f, E = r * d, v = r * f, g = a * f, S = o * _, y = o * d, x = o * f;
            u[c + 0] = (1 - (E + g)) * s, u[c + 1] = (p + x) * s, u[c + 2] = (T - y) * s, u[c + 3] = 0, 
            u[c + 4] = (p - x) * l, u[c + 5] = (1 - (m + g)) * l, u[c + 6] = (v + S) * l, u[c + 7] = 0, 
            u[c + 8] = (T + y) * h, u[c + 9] = (v - S) * h, u[c + 10] = (1 - (m + E)) * h, u[c + 11] = 0, 
            u[c + 12] = t, u[c + 13] = e, u[c + 14] = n, u[c + 15] = 1;
        }, t.transformVector3ArrayToVector3ArrayCoordinate = function(t, e, n, i, r) {
            var a = t[e + 0], o = t[e + 1], s = t[e + 2], l = n.elements, h = a * l[3] + o * l[7] + s * l[11] + l[15];
            i[r] = a * l[0] + o * l[4] + s * l[8] + l[12] / h, i[r + 1] = a * l[1] + o * l[5] + s * l[9] + l[13] / h, 
            i[r + 2] = a * l[2] + o * l[6] + s * l[10] + l[14] / h;
        }, t.transformLightingMapTexcoordArray = function(t, e, n, i, r) {
            i[r + 0] = t[e + 0] * n.x + n.z, i[r + 1] = 1 - ((1 - t[e + 1]) * n.y + n.w);
        }, t.getURLVerion = function(t) {
            var e = t.indexOf("?");
            return e >= 0 ? t.substr(e) : null;
        }, t._createAffineTransformationArray = function(t, e, n, i) {
            var r = e.x, a = e.y, o = e.z, s = e.w, l = r + r, h = a + a, u = o + o, c = r * l, _ = r * h, d = r * u, f = a * h, m = a * u, p = o * u, T = s * l, E = s * h, v = s * u, g = n.x, S = n.y, y = n.z;
            i[0] = (1 - (f + p)) * g, i[1] = (_ + v) * g, i[2] = (d - E) * g, i[3] = 0, i[4] = (_ - v) * S, 
            i[5] = (1 - (c + p)) * S, i[6] = (m + T) * S, i[7] = 0, i[8] = (d + E) * y, i[9] = (m - T) * y, 
            i[10] = (1 - (c + f)) * y, i[11] = 0, i[12] = t.x, i[13] = t.y, i[14] = t.z, i[15] = 1;
        }, t._mulMatrixArray = function(t, e, n, i) {
            var r, a, o, s, l, h = e.elements, u = h[0], c = h[1], _ = h[2], d = h[3], f = h[4], m = h[5], p = h[6], T = h[7], E = h[8], v = h[9], g = h[10], S = h[11], y = h[12], x = h[13], D = h[14], I = h[15], R = i, M = i + 4, A = i + 8, C = i + 12;
            for (r = 0; r < 4; r++) a = t[r], o = t[r + 4], s = t[r + 8], l = t[r + 12], n[R + r] = a * u + o * c + s * _ + l * d, 
            n[M + r] = a * f + o * m + s * p + l * T, n[A + r] = a * E + o * v + s * g + l * S, 
            n[C + r] = a * y + o * x + s * D + l * I;
        }, t.arcTanAngle = function(t, e) {
            return 0 == t ? 1 == e ? Math.PI / 2 : -Math.PI / 2 : t > 0 ? Math.atan(e / t) : t < 0 ? e > 0 ? Math.atan(e / t) + Math.PI : Math.atan(e / t) - Math.PI : 0;
        }, t.angleTo = function(e, n, i) {
            Tt.subtract(n, e, ht.TEMPVector30), Tt.normalize(ht.TEMPVector30, ht.TEMPVector30), 
            i.x = Math.asin(ht.TEMPVector30.y), i.y = t.arcTanAngle(-ht.TEMPVector30.z, -ht.TEMPVector30.x);
        }, t.transformQuat = function(t, e, n) {
            var i = e, r = t.x, a = t.y, o = t.z, s = i[0], l = i[1], h = i[2], u = i[3], c = u * r + l * o - h * a, _ = u * a + h * r - s * o, d = u * o + s * a - l * r, f = -s * r - l * a - h * o;
            n.x = c * u + f * -s + _ * -h - d * -l, n.y = _ * u + f * -l + d * -s - c * -h, 
            n.z = d * u + f * -h + c * -l - _ * -s;
        }, t.quaternionWeight = function(t, e, n) {
            n.x = t.x * e, n.y = t.y * e, n.z = t.z * e, n.w = t.w;
        }, t.quaternionConjugate = function(t, e) {
            e.x = -t.x, e.y = -t.y, e.z = -t.z, e.w = t.w;
        }, t.scaleWeight = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z;
            n.x = i > 0 ? Math.pow(Math.abs(i), e) : -Math.pow(Math.abs(i), e), n.y = r > 0 ? Math.pow(Math.abs(r), e) : -Math.pow(Math.abs(r), e), 
            n.z = a > 0 ? Math.pow(Math.abs(a), e) : -Math.pow(Math.abs(a), e);
        }, t.scaleBlend = function(e, n, i, r) {
            var a = t._tempVector3_0, o = t._tempVector3_1;
            t.scaleWeight(e, 1 - i, a), t.scaleWeight(n, i, o);
            var s = i > .5 ? n : e;
            r.x = s.x > 0 ? Math.abs(a.x * o.x) : -Math.abs(a.x * o.x), r.y = s.y > 0 ? Math.abs(a.y * o.y) : -Math.abs(a.y * o.y), 
            r.z = s.z > 0 ? Math.abs(a.z * o.z) : -Math.abs(a.z * o.z);
        }, t.gammaToLinearSpace = function(t) {
            return t <= .04045 ? t / 12.92 : t < 1 ? Math.pow((t + .055) / 1.055, 2.4) : Math.pow(t, 2.4);
        }, t.linearToGammaSpace = function(t) {
            return t <= 0 ? 0 : t <= .0031308 ? 12.92 * t : t <= 1 ? 1.055 * Math.pow(t, .41666) - .055 : Math.pow(t, .41666);
        }, t.matrix4x4MultiplyFFF = function(t, e, n) {
            var i, r, a, o, s;
            if (n === e) for (e = new Float32Array(16), i = 0; i < 16; ++i) e[i] = n[i];
            var l = e[0], h = e[1], u = e[2], c = e[3], _ = e[4], d = e[5], f = e[6], m = e[7], p = e[8], T = e[9], E = e[10], v = e[11], g = e[12], S = e[13], y = e[14], x = e[15];
            for (i = 0; i < 4; i++) r = t[i], a = t[i + 4], o = t[i + 8], s = t[i + 12], n[i] = r * l + a * h + o * u + s * c, 
            n[i + 4] = r * _ + a * d + o * f + s * m, n[i + 8] = r * p + a * T + o * E + s * v, 
            n[i + 12] = r * g + a * S + o * y + s * x;
        }, t.matrix4x4MultiplyFFFForNative = function(t, e, n) {
            v.instance.matrix4x4Multiply(t, e, n);
        }, t.matrix4x4MultiplyMFM = function(e, n, i) {
            t.matrix4x4MultiplyFFF(e.elements, n, i.elements);
        }, t._buildTexture2D = function(t, e, n, i, r) {
            void 0 === r && (r = !1);
            var a = new P(t, e, n, r, !0);
            return a.anisoLevel = 1, a.filterMode = 0, Nt._generateTexture2D(a, t, e, i), a;
        }, t._drawBound = function(e, n, i) {
            e.lineCount + 12 > e.maxLineCount && (e.maxLineCount += 12);
            var r = t._tempVector3_0, a = t._tempVector3_1, o = n.min, s = n.max;
            r.setValue(o.x, o.y, o.z), a.setValue(s.x, o.y, o.z), e.addLine(r, a, i, i), r.setValue(o.x, o.y, o.z), 
            a.setValue(o.x, o.y, s.z), e.addLine(r, a, i, i), r.setValue(s.x, o.y, o.z), a.setValue(s.x, o.y, s.z), 
            e.addLine(r, a, i, i), r.setValue(o.x, o.y, s.z), a.setValue(s.x, o.y, s.z), e.addLine(r, a, i, i), 
            r.setValue(o.x, o.y, o.z), a.setValue(o.x, s.y, o.z), e.addLine(r, a, i, i), r.setValue(o.x, o.y, s.z), 
            a.setValue(o.x, s.y, s.z), e.addLine(r, a, i, i), r.setValue(s.x, o.y, o.z), a.setValue(s.x, s.y, o.z), 
            e.addLine(r, a, i, i), r.setValue(s.x, o.y, s.z), a.setValue(s.x, s.y, s.z), e.addLine(r, a, i, i), 
            r.setValue(o.x, s.y, o.z), a.setValue(s.x, s.y, o.z), e.addLine(r, a, i, i), r.setValue(o.x, s.y, o.z), 
            a.setValue(o.x, s.y, s.z), e.addLine(r, a, i, i), r.setValue(s.x, s.y, o.z), a.setValue(s.x, s.y, s.z), 
            e.addLine(r, a, i, i), r.setValue(o.x, s.y, s.z), a.setValue(s.x, s.y, s.z), e.addLine(r, a, i, i);
        }, t._getHierarchyPath = function(t, e, n) {
            n.length = 0;
            for (var i = e; i !== t; ) {
                var r = i._parent;
                if (!r) return null;
                n.push(r.getChildIndex(i)), i = r;
            }
            return n;
        }, t._getNodeByHierarchyPath = function(t, e) {
            for (var n = t, i = e.length - 1; i >= 0; i--) n = n.getChildAt(e[i]);
            return n;
        }, t._createNodeByJson = function(e, n) {
            var i;
            switch (e.type) {
              case "Scene3D":
                i = new Qn();
                break;

              case "Sprite3D":
                i = new Fn();
                break;

              case "MeshSprite3D":
                i = new Ei(), n && n.push(i);
                break;

              case "SkinnedMeshSprite3D":
                i = new Di();
                break;

              case "ShuriKenParticle3D":
                i = new yi();
                break;

              case "Terrain":
                i = new ei();
                break;

              case "Camera":
                i = new Mi();
                break;

              case "DirectionLight":
                i = new gi();
                break;

              case "PointLight":
                i = new Ii();
                break;

              case "SpotLight":
                i = new vi();
                break;

              case "TrailSprite3D":
                i = new Si();
                break;

              default:
                throw new Error("Utils3D:unidentified class type in (.lh) file.");
            }
            var r = e.child;
            if (r) for (var a = 0, o = r.length; a < o; a++) {
                var s = t._createNodeByJson(r[a], n);
                i.addChild(s);
            }
            var h = e.components;
            if (h) for (var u = 0, c = h.length; u < c; u++) {
                var _ = h[u];
                if (!(f = l.window.Laya[_.type])) {
                    var d = _.type.split("."), f = l.window;
                    d.forEach(function(t) {
                        f = f[t];
                    });
                }
                "function" == typeof f ? i.addComponent(f)._parse(_) : console.warn("Unkown component type.");
            }
            return i._parse(e.props, null), i;
        }, t._tempArray16_0 = new Float32Array(16), t._tempArray16_1 = new Float32Array(16), 
        t._tempArray16_2 = new Float32Array(16), t._tempArray16_3 = new Float32Array(16), 
        i(t, [ "_tempVector3_0", function() {
            return this._tempVector3_0 = new Tt();
        }, "_tempVector3_1", function() {
            return this._tempVector3_1 = new Tt();
        }, "_tempVector3_2", function() {
            return this._tempVector3_2 = new Tt();
        }, "_tempColor0", function() {
            return this._tempColor0 = new xt();
        }, "_compIdToNode", function() {
            return this._compIdToNode = new Object();
        } ]), t;
    }(), Xt = function() {
        function t() {
            this._currentLength = 0, this._elements = null, this._elements = new Float32Array(8);
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientDataNumber");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.add = function(t, e) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== t && (t = 1, console.log("GradientDataNumber warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = t, this._elements[this._currentLength++] = e) : console.log("GradientDataNumber warning:data count must lessEqual than 4");
        }, e.getKeyByIndex = function(t) {
            return this._elements[2 * t];
        }, e.getValueByIndex = function(t) {
            return this._elements[2 * t + 1];
        }, e.getAverageValue = function() {
            for (var t = 0, e = this._currentLength - 2; t < e; t += 2) this._elements[t + 1], 
            this._elements[t + 3], this._elements[t + 2], this._elements[t];
            return 0;
        }, e.cloneTo = function(t) {
            var e = t;
            e._currentLength = this._currentLength;
            var n = e._elements;
            n.length = this._elements.length;
            for (var i = 0, r = this._elements.length; i < r; i++) n[i] = this._elements[i];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradientCount", function() {
            return this._currentLength / 2;
        }), t;
    }(), Wt = function() {
        function t() {}
        return r(t, "laya.d3.core.pixelLine.PixelLineVertex"), a(0, t.prototype, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }), a(1, t, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }), i(t, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new fe(28, [ new zt(0, "vector3", 0), new zt(12, "vector4", 1) ]);
        } ]), t;
    }(), Yt = function() {
        function t() {
            this._hitResultsPoolIndex = 0, this._contactPonintsPoolIndex = 0, this._collisions = {}, 
            this._hitResultsPool = [], this._contactPointsPool = [], this._collisionsPool = [];
        }
        r(t, "laya.d3.physics.CollisionTool");
        var e = t.prototype;
        return e.getHitResult = function() {
            var t = this._hitResultsPool[this._hitResultsPoolIndex++];
            return t || (t = new Te(), this._hitResultsPool.push(t)), t;
        }, e.recoverAllHitResultsPool = function() {
            this._hitResultsPoolIndex = 0;
        }, e.getContactPoints = function() {
            var t = this._contactPointsPool[this._contactPonintsPoolIndex++];
            return t || (t = new K(), this._contactPointsPool.push(t)), t;
        }, e.recoverAllContactPointsPool = function() {
            this._contactPonintsPoolIndex = 0;
        }, e.getCollision = function(t, e) {
            var n, i = t.id, r = e.id, a = this._collisions[i];
            return a && (n = a[r]), n || (a || (a = {}, this._collisions[i] = a), (n = 0 === this._collisionsPool.length ? new de() : this._collisionsPool.pop())._colliderA = t, 
            n._colliderB = e, a[r] = n), n;
        }, e.recoverCollision = function(t) {
            var e = t._colliderA.id, n = t._colliderB.id;
            this._collisions[e][n] = null, this._collisionsPool.push(t);
        }, e.garbageCollection = function() {
            this._hitResultsPoolIndex = 0, this._hitResultsPool.length = 0, this._contactPonintsPoolIndex = 0, 
            this._contactPointsPool.length = 0, this._collisionsPool.length = 0;
            for (var t in this._collisionsPool) {
                var e = this._collisionsPool[t], n = !0;
                for (var i in e) e[i] ? n = !1 : delete e[i];
                n && delete this._collisionsPool[t];
            }
        }, t;
    }(), Zt = function() {
        function t() {
            this._scene = null, this._eventList = [], this._multiTouchEnabled = !0, this._mouseTouch = new re(), 
            this._touchPool = [], this._touches = new un();
        }
        r(t, "laya.d3.Input3D");
        var e = t.prototype;
        return e.__init__ = function(t, e) {
            this._scene = e;
            var n = this._eventList;
            t.oncontextmenu = function(t) {
                return !1;
            }, t.addEventListener("mousedown", function(t) {
                t.preventDefault(), n.push(t);
            }), t.addEventListener("mouseup", function(t) {
                t.preventDefault(), n.push(t);
            }, !0), t.addEventListener("mousemove", function(t) {
                t.preventDefault(), n.push(t);
            }, !0), t.addEventListener("touchstart", function(t) {
                t.preventDefault(), n.push(t);
            }), t.addEventListener("touchend", function(t) {
                t.preventDefault(), n.push(t);
            }, !0), t.addEventListener("touchmove", function(t) {
                t.preventDefault(), n.push(t);
            }, !0), t.addEventListener("touchcancel", function(t) {
                n.push(t);
            }, !0);
        }, e.touchCount = function() {
            return this._touches.length;
        }, e._getTouch = function(t) {
            var e = this._touchPool[t];
            return e || (e = new _e(), this._touchPool[t] = e, e._identifier = t), e;
        }, e._mouseTouchDown = function() {
            var t = this._mouseTouch, e = t.sprite;
            if (t._pressedSprite = e, t._pressedLoopCount = N.loopCount, e) {
                var n = e._scripts;
                if (n) for (var i = 0, r = n.length; i < r; i++) n[i].onMouseDown();
            }
        }, e._mouseTouchUp = function() {
            var t = 0, e = 0, n = this._mouseTouch, i = n._pressedSprite;
            n._pressedSprite = null, n._pressedLoopCount = -1;
            var r = n.sprite;
            if (r && r === i) {
                var a = r._scripts;
                if (a) for (t = 0, e = a.length; t < e; t++) a[t].onMouseClick();
            }
            if (i) {
                var o = i._scripts;
                if (o) for (t = 0, e = o.length; t < e; t++) o[t].onMouseUp();
            }
        }, e._mouseTouchRayCast = function(e) {
            var n = t._tempHitResult0, i = t._tempVector20, r = t._tempRay0;
            n.succeeded = !1;
            var a = this._mouseTouch.mousePositionX, o = this._mouseTouch.mousePositionY;
            i.x = a, i.y = o;
            for (var s = e.length - 1; s >= 0; s--) {
                var l = e[s], h = l.viewport;
                if (i.x >= h.x && i.y >= h.y && i.x <= h.width && i.y <= h.height && (l.viewportPointToRay(i, r), 
                this._scene._physicsSimulation.rayCast(r, n) || 0 === l.clearFlag || 1 === l.clearFlag)) break;
            }
            var u = this._mouseTouch, c = u.sprite;
            if (n.succeeded) {
                var _ = n.collider.owner;
                u.sprite = _;
                var d = _._scripts;
                if (c !== _ && d) for (var f = 0, m = d.length; f < m; f++) d[f].onMouseEnter();
            } else u.sprite = null;
            if (c && c !== _) {
                var p = c._scripts;
                if (p) for (f = 0, m = p.length; f < m; f++) p[f].onMouseOut();
            }
        }, e._changeTouches = function(e, i) {
            for (var r = 0, a = 0, o = this._touches.length, s = 0, l = e.length; s < l; s++) {
                var h = e[s], u = h.identifier;
                if (this._multiTouchEnabled || 0 === u) {
                    var c = this._getTouch(u), _ = c._position, d = t._tempPoint;
                    d.setTo(h.pageX, h.pageY), n.stage._canvasTransform.invertTransformPoint(d);
                    var f = d.x, m = d.y;
                    switch (i) {
                      case 0:
                        this._touches.add(c), r += f, a += m;
                        break;

                      case 1:
                        this._touches.remove(c), r -= f, a -= m;
                        break;

                      case 2:
                        r = f - _.x, a = m - _.y;
                    }
                    _.x = f, _.y = m;
                }
            }
            var p = this._touches.length;
            0 === p ? (this._mouseTouch.mousePositionX = 0, this._mouseTouch.mousePositionY = 0) : (this._mouseTouch.mousePositionX = (this._mouseTouch.mousePositionX * o + r) / p, 
            this._mouseTouch.mousePositionY = (this._mouseTouch.mousePositionY * o + a) / p);
        }, e._update = function() {
            var e = 0, i = 0, r = 0, a = 0;
            i = this._eventList.length;
            var o = this._scene._cameraPool;
            if (i > 0) {
                for (e = 0; e < i; e++) {
                    var s = this._eventList[e];
                    switch (s.type) {
                      case "mousedown":
                        this._mouseTouchDown();
                        break;

                      case "mouseup":
                        this._mouseTouchUp();
                        break;

                      case "mousemove":
                        var l = t._tempPoint;
                        l.setTo(s.pageX, s.pageY), n.stage._canvasTransform.invertTransformPoint(l), this._mouseTouch.mousePositionX = l.x, 
                        this._mouseTouch.mousePositionY = l.y, this._mouseTouchRayCast(o);
                        break;

                      case "touchstart":
                        var h = this._touches.length;
                        this._changeTouches(s.changedTouches, 0), this._mouseTouchRayCast(o), 0 === h && this._mouseTouchDown();
                        break;

                      case "touchend":
                      case "touchcancel":
                        this._changeTouches(s.changedTouches, 1), 0 === this._touches.length && this._mouseTouchUp();
                        break;

                      case "touchmove":
                        this._changeTouches(s.changedTouches, 2), this._mouseTouchRayCast(o);
                        break;

                      default:
                        throw "Input3D:unkonwn event type.";
                    }
                }
                this._eventList.length = 0;
            }
            var u = this._mouseTouch, c = u._pressedSprite;
            if (c && N.loopCount > u._pressedLoopCount) {
                var _ = c._scripts;
                if (_) for (r = 0, a = _.length; r < a; r++) _[r].onMouseDrag();
            }
            var d = u.sprite;
            if (d) {
                var f = d._scripts;
                if (f) for (r = 0, a = f.length; r < a; r++) f[r].onMouseOver();
            }
        }, e.getTouch = function(t) {
            return t < this._touches.length ? this._touches.elements[t] : null;
        }, a(0, e, "multiTouchEnabled", function() {
            return this._multiTouchEnabled;
        }, function(t) {
            this._multiTouchEnabled = t;
        }), i(t, [ "_tempPoint", function() {
            return this._tempPoint = new I();
        }, "_tempVector20", function() {
            return this._tempVector20 = new Et();
        }, "_tempRay0", function() {
            return this._tempRay0 = new j(new Tt(), new Tt());
        }, "_tempHitResult0", function() {
            return this._tempHitResult0 = new Te();
        } ]), t;
    }(), jt = function() {
        function t() {}
        return r(t, "laya.d3.core.particleShuriKen.ShurikenParticleData"), t._getStartLifetimeFromGradient = function(t, e) {
            for (var n = 1, i = t.gradientCount; n < i; n++) {
                var r = t.getKeyByIndex(n);
                if (r >= e) {
                    var a = t.getKeyByIndex(n - 1), o = (e - a) / (r - a);
                    return x.lerp(t.getValueByIndex(n - 1), t.getValueByIndex(n), o);
                }
            }
            throw new Error("ShurikenParticleData: can't get value foam startLifeTimeGradient.");
        }, t._randomInvertRoationArray = function(t, e, n, i, r) {
            var a = NaN;
            i ? (i.seed = r[6], a = i.getFloat(), r[6] = i.seed) : a = Math.random(), a < n ? (e.x = -t.x, 
            e.y = -t.y, e.z = -t.z) : (e.x = t.x, e.y = t.y, e.z = t.z);
        }, t._randomInvertRoation = function(t, e, n, i) {
            var r = NaN;
            return n ? (n.seed = i[6], r = n.getFloat(), i[6] = n.seed) : r = Math.random(), 
            r < e && (t = -t), t;
        }, t.create = function(e, n, i) {
            var r = e.autoRandomSeed, a = e._rand, o = e._randomSeeds;
            switch (e.startColorType) {
              case 0:
                var s = e.startColorConstant;
                t.startColor.x = s.x, t.startColor.y = s.y, t.startColor.z = s.z, t.startColor.w = s.w;
                break;

              case 2:
                r ? mt.lerp(e.startColorConstantMin, e.startColorConstantMax, Math.random(), t.startColor) : (a.seed = o[3], 
                mt.lerp(e.startColorConstantMin, e.startColorConstantMax, a.getFloat(), t.startColor), 
                o[3] = a.seed);
            }
            var l = e.colorOverLifetime;
            if (l && l.enbale) {
                var h = l.color;
                switch (h.type) {
                  case 0:
                    t.startColor.x = t.startColor.x * h.constant.x, t.startColor.y = t.startColor.y * h.constant.y, 
                    t.startColor.z = t.startColor.z * h.constant.z, t.startColor.w = t.startColor.w * h.constant.w;
                    break;

                  case 2:
                    var u = NaN;
                    r ? u = Math.random() : (a.seed = o[10], u = a.getFloat(), o[10] = a.seed);
                    var c = h.constantMin, _ = h.constantMax;
                    t.startColor.x = t.startColor.x * x.lerp(c.x, _.x, u), t.startColor.y = t.startColor.y * x.lerp(c.y, _.y, u), 
                    t.startColor.z = t.startColor.z * x.lerp(c.z, _.z, u), t.startColor.w = t.startColor.w * x.lerp(c.w, _.w, u);
                }
            }
            var d = t.startSize;
            switch (e.startSizeType) {
              case 0:
                if (e.threeDStartSize) {
                    var f = e.startSizeConstantSeparate;
                    d[0] = f.x, d[1] = f.y, d[2] = f.z;
                } else d[0] = d[1] = d[2] = e.startSizeConstant;
                break;

              case 2:
                if (e.threeDStartSize) {
                    var m = e.startSizeConstantMinSeparate, p = e.startSizeConstantMaxSeparate;
                    r ? (d[0] = x.lerp(m.x, p.x, Math.random()), d[1] = x.lerp(m.y, p.y, Math.random()), 
                    d[2] = x.lerp(m.z, p.z, Math.random())) : (a.seed = o[4], d[0] = x.lerp(m.x, p.x, a.getFloat()), 
                    d[1] = x.lerp(m.y, p.y, a.getFloat()), d[2] = x.lerp(m.z, p.z, a.getFloat()), o[4] = a.seed);
                } else r ? d[0] = d[1] = d[2] = x.lerp(e.startSizeConstantMin, e.startSizeConstantMax, Math.random()) : (a.seed = o[4], 
                d[0] = d[1] = d[2] = x.lerp(e.startSizeConstantMin, e.startSizeConstantMax, a.getFloat()), 
                o[4] = a.seed);
            }
            var T = e.sizeOverLifetime;
            if (T && T.enbale && 1 === T.size.type) {
                var E = T.size;
                if (E.separateAxes) r ? (d[0] = d[0] * x.lerp(E.constantMinSeparate.x, E.constantMaxSeparate.x, Math.random()), 
                d[1] = d[1] * x.lerp(E.constantMinSeparate.y, E.constantMaxSeparate.y, Math.random()), 
                d[2] = d[2] * x.lerp(E.constantMinSeparate.z, E.constantMaxSeparate.z, Math.random())) : (a.seed = o[11], 
                d[0] = d[0] * x.lerp(E.constantMinSeparate.x, E.constantMaxSeparate.x, a.getFloat()), 
                d[1] = d[1] * x.lerp(E.constantMinSeparate.y, E.constantMaxSeparate.y, a.getFloat()), 
                d[2] = d[2] * x.lerp(E.constantMinSeparate.z, E.constantMaxSeparate.z, a.getFloat()), 
                o[11] = a.seed); else {
                    var v = NaN;
                    r ? v = x.lerp(E.constantMin, E.constantMax, Math.random()) : (a.seed = o[11], v = x.lerp(E.constantMin, E.constantMax, a.getFloat()), 
                    o[11] = a.seed), d[0] = d[0] * v, d[1] = d[1] * v, d[2] = d[2] * v;
                }
            }
            var g = n.renderMode;
            if (1 !== g) switch (e.startRotationType) {
              case 0:
                if (e.threeDStartRotation) {
                    var S = e.startRotationConstantSeparate, y = t._tempVector30;
                    t._randomInvertRoationArray(S, y, e.randomizeRotationDirection, r ? null : a, o), 
                    t.startRotation[0] = y.x, t.startRotation[1] = y.y, t.startRotation[2] = 4 !== g ? -y.z : y.z;
                } else t.startRotation[0] = t._randomInvertRoation(e.startRotationConstant, e.randomizeRotationDirection, r ? null : a, o), 
                t.startRotation[1] = 0, t.startRotation[2] = 0;
                break;

              case 2:
                if (e.threeDStartRotation) {
                    var D = e.startRotationConstantMinSeparate, I = e.startRotationConstantMaxSeparate, R = t._tempVector30;
                    r ? (R.x = x.lerp(D.x, I.x, Math.random()), R.y = x.lerp(D.y, I.y, Math.random()), 
                    R.z = x.lerp(D.z, I.z, Math.random())) : (a.seed = o[5], R.x = x.lerp(D.x, I.x, a.getFloat()), 
                    R.y = x.lerp(D.y, I.y, a.getFloat()), R.z = x.lerp(D.z, I.z, a.getFloat()), o[5] = a.seed), 
                    t._randomInvertRoationArray(R, R, e.randomizeRotationDirection, r ? null : a, o), 
                    t.startRotation[0] = R.x, t.startRotation[1] = R.y, t.startRotation[2] = 4 !== g ? -R.z : R.z;
                } else r ? t.startRotation[0] = t._randomInvertRoation(x.lerp(e.startRotationConstantMin, e.startRotationConstantMax, Math.random()), e.randomizeRotationDirection, r ? null : a, o) : (a.seed = o[5], 
                t.startRotation[0] = t._randomInvertRoation(x.lerp(e.startRotationConstantMin, e.startRotationConstantMax, a.getFloat()), e.randomizeRotationDirection, r ? null : a, o), 
                o[5] = a.seed);
            }
            switch (e.startLifetimeType) {
              case 0:
                t.startLifeTime = e.startLifetimeConstant;
                break;

              case 1:
                t.startLifeTime = t._getStartLifetimeFromGradient(e.startLifeTimeGradient, e.emissionTime);
                break;

              case 2:
                r ? t.startLifeTime = x.lerp(e.startLifetimeConstantMin, e.startLifetimeConstantMax, Math.random()) : (a.seed = o[7], 
                t.startLifeTime = x.lerp(e.startLifetimeConstantMin, e.startLifetimeConstantMax, a.getFloat()), 
                o[7] = a.seed);
                break;

              case 3:
                var M = e.emissionTime;
                r ? t.startLifeTime = x.lerp(t._getStartLifetimeFromGradient(e.startLifeTimeGradientMin, M), t._getStartLifetimeFromGradient(e.startLifeTimeGradientMax, M), Math.random()) : (a.seed = o[7], 
                t.startLifeTime = x.lerp(t._getStartLifetimeFromGradient(e.startLifeTimeGradientMin, M), t._getStartLifetimeFromGradient(e.startLifeTimeGradientMax, M), a.getFloat()), 
                o[7] = a.seed);
            }
            switch (e.startSpeedType) {
              case 0:
                t.startSpeed = e.startSpeedConstant;
                break;

              case 2:
                r ? t.startSpeed = x.lerp(e.startSpeedConstantMin, e.startSpeedConstantMax, Math.random()) : (a.seed = o[8], 
                t.startSpeed = x.lerp(e.startSpeedConstantMin, e.startSpeedConstantMax, a.getFloat()), 
                o[8] = a.seed);
            }
            var A = e.textureSheetAnimation;
            if (A && A.enable) {
                var C = A.tiles, L = C.x, O = C.y, N = 1 / L, V = 1 / O, w = 0, P = A.startFrame;
                switch (P.type) {
                  case 0:
                    w = P.constant;
                    break;

                  case 1:
                    r ? w = x.lerp(P.constantMin, P.constantMax, Math.random()) : (a.seed = o[14], w = x.lerp(P.constantMin, P.constantMax, a.getFloat()), 
                    o[14] = a.seed);
                }
                var b = A.frame;
                switch (b.type) {
                  case 0:
                    w += b.constant;
                    break;

                  case 2:
                    r ? w += x.lerp(b.constantMin, b.constantMax, Math.random()) : (a.seed = o[15], 
                    w += x.lerp(b.constantMin, b.constantMax, a.getFloat()), o[15] = a.seed);
                }
                var F = 0;
                switch (A.type) {
                  case 0:
                    F = Math.floor(w / L);
                    break;

                  case 1:
                    A.randomRow ? r ? F = Math.floor(Math.random() * O) : (a.seed = o[13], F = Math.floor(a.getFloat() * O), 
                    o[13] = a.seed) : F = A.rowIndex;
                }
                var B = Math.floor(w % L);
                (t.startUVInfo = t.startUVInfo)[0] = N, t.startUVInfo[1] = V, t.startUVInfo[2] = B * N, 
                t.startUVInfo[3] = F * V;
            } else (t.startUVInfo = t.startUVInfo)[0] = 1, t.startUVInfo[1] = 1, t.startUVInfo[2] = 0, 
            t.startUVInfo[3] = 0;
            switch (e.simulationSpace) {
              case 0:
                var U = i.position;
                t.simulationWorldPostion[0] = U.x, t.simulationWorldPostion[1] = U.y, t.simulationWorldPostion[2] = U.z;
                var z = i.rotation;
                t.simulationWorldRotation[0] = z.x, t.simulationWorldRotation[1] = z.y, t.simulationWorldRotation[2] = z.z, 
                t.simulationWorldRotation[3] = z.w;
                break;

              case 1:
                break;

              default:
                throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
            }
        }, t.startLifeTime = NaN, t.startSpeed = NaN, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempQuaternion", function() {
            return this._tempQuaternion = new ht();
        }, "startColor", function() {
            return this.startColor = new mt();
        }, "startSize", function() {
            return this.startSize = new Float32Array(3);
        }, "startRotation", function() {
            return this.startRotation = new Float32Array(3);
        }, "startUVInfo", function() {
            return this.startUVInfo = new Float32Array(4);
        }, "simulationWorldPostion", function() {
            return this.simulationWorldPostion = new Float32Array(3);
        }, "simulationWorldRotation", function() {
            return this.simulationWorldRotation = new Float32Array(4);
        } ]), t;
    }(), Kt = function() {
        function t(t, e, n, i) {
            this._octree = null, this._parent = null, this._children = null, this._isContaion = !1, 
            this.baseLength = 0, this._bounds = new ze(new Tt(), new Tt()), this._objects = [], 
            this.center = new Tt(), this._setValues(t, e, n, i);
        }
        r(t, "laya.d3.core.scene.BoundsOctreeNode");
        var e = t.prototype;
        return e._setValues = function(t, e, n, i) {
            this._octree = t, this._parent = e, this.baseLength = n, i.cloneTo(this.center);
            var r = this._bounds.min, a = this._bounds.max, o = t._looseness * n / 2;
            r.setValue(i.x - o, i.y - o, i.z - o), a.setValue(i.x + o, i.y + o, i.z + o);
        }, e._getChildBound = function(e) {
            if (null != this._children && this._children[e]) return this._children[e]._bounds;
            var n = this.baseLength / 4, i = this.baseLength / 2 * this._octree._looseness / 2, r = t._tempBoundBox, a = r.min, o = r.max;
            switch (e) {
              case 0:
                a.x = this.center.x - n - i, a.y = this.center.y + n - i, a.z = this.center.z - n - i, 
                o.x = this.center.x - n + i, o.y = this.center.y + n + i, o.z = this.center.z - n + i;
                break;

              case 1:
                a.x = this.center.x + n - i, a.y = this.center.y + n - i, a.z = this.center.z - n - i, 
                o.x = this.center.x + n + i, o.y = this.center.y + n + i, o.z = this.center.z - n + i;
                break;

              case 2:
                a.x = this.center.x - n - i, a.y = this.center.y + n - i, a.z = this.center.z + n - i, 
                o.x = this.center.x - n + i, o.y = this.center.y + n + i, o.z = this.center.z + n + i;
                break;

              case 3:
                a.x = this.center.x + n - i, a.y = this.center.y + n - i, a.z = this.center.z + n - i, 
                o.x = this.center.x + n + i, o.y = this.center.y + n + i, o.z = this.center.z + n + i;
                break;

              case 4:
                a.x = this.center.x - n - i, a.y = this.center.y - n - i, a.z = this.center.z - n - i, 
                o.x = this.center.x - n + i, o.y = this.center.y - n + i, o.z = this.center.z - n + i;
                break;

              case 5:
                a.x = this.center.x + n - i, a.y = this.center.y - n - i, a.z = this.center.z - n - i, 
                o.x = this.center.x + n + i, o.y = this.center.y - n + i, o.z = this.center.z - n + i;
                break;

              case 6:
                a.x = this.center.x - n - i, a.y = this.center.y - n - i, a.z = this.center.z + n - i, 
                o.x = this.center.x - n + i, o.y = this.center.y - n + i, o.z = this.center.z + n + i;
                break;

              case 7:
                a.x = this.center.x + n - i, a.y = this.center.y - n - i, a.z = this.center.z + n - i, 
                o.x = this.center.x + n + i, o.y = this.center.y - n + i, o.z = this.center.z + n + i;
            }
            return r;
        }, e._getChildCenter = function(e) {
            if (null != this._children) return this._children[e].center;
            var n = this.baseLength / 4, i = t._tempVector30;
            switch (e) {
              case 0:
                i.x = this.center.x - n, i.y = this.center.y + n, i.z = this.center.z - n;
                break;

              case 1:
                i.x = this.center.x + n, i.y = this.center.y + n, i.z = this.center.z - n;
                break;

              case 2:
                i.x = this.center.x - n, i.y = this.center.y + n, i.z = this.center.z + n;
                break;

              case 3:
                i.x = this.center.x + n, i.y = this.center.y + n, i.z = this.center.z + n;
                break;

              case 4:
                i.x = this.center.x - n, i.y = this.center.y - n, i.z = this.center.z - n;
                break;

              case 5:
                i.x = this.center.x + n, i.y = this.center.y - n, i.z = this.center.z - n;
                break;

              case 6:
                i.x = this.center.x - n, i.y = this.center.y - n, i.z = this.center.z + n;
                break;

              case 7:
                i.x = this.center.x + n, i.y = this.center.y - n, i.z = this.center.z + n;
            }
            return i;
        }, e._getChild = function(e) {
            var n = this.baseLength / 4;
            switch (this._children || (this._children = o(8, null)), e) {
              case 0:
                return this._children[0] || (this._children[0] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x + -n, this.center.y + n, this.center.z - n)));

              case 1:
                return this._children[1] || (this._children[1] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x + n, this.center.y + n, this.center.z - n)));

              case 2:
                return this._children[2] || (this._children[2] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x - n, this.center.y + n, this.center.z + n)));

              case 3:
                return this._children[3] || (this._children[3] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x + n, this.center.y + n, this.center.z + n)));

              case 4:
                return this._children[4] || (this._children[4] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x - n, this.center.y - n, this.center.z - n)));

              case 5:
                return this._children[5] || (this._children[5] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x + n, this.center.y - n, this.center.z - n)));

              case 6:
                return this._children[6] || (this._children[6] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x - n, this.center.y - n, this.center.z + n)));

              case 7:
                return this._children[7] || (this._children[7] = new t(this._octree, this, this.baseLength / 2, new Tt(this.center.x + n, this.center.y - n, this.center.z + n)));

              default:
                throw "BoundsOctreeNode: unknown index.";
            }
        }, e._shouldMerge = function() {
            for (var t = this._objects.length, e = 0; e < 8; e++) {
                var n = this._children[e];
                if (n) {
                    if (null != n._children) return !1;
                    t += n._objects.length;
                }
            }
            return t <= 8;
        }, e._mergeChildren = function() {
            for (var t = 0; t < 8; t++) {
                var e = this._children[t];
                if (e) {
                    e._parent = null;
                    for (var n = e._objects, i = n.length - 1; i >= 0; i--) {
                        var r = n[i];
                        this._objects.push(r), r._setOctreeNode(this);
                    }
                }
            }
            this._children = null;
        }, e._merge = function() {
            if (null === this._children) {
                var t = this._parent;
                t && t._shouldMerge() && (t._mergeChildren(), t._merge());
            }
        }, e._checkAddNode = function(e) {
            if (null == this._children) {
                if (this._objects.length < 8 || this.baseLength / 2 < this._octree._minSize) return this;
                for (var n = this._objects.length - 1; n >= 0; n--) {
                    var i = this._objects[n], r = this._bestFitChild(i.bounds.getCenter());
                    t._encapsulates(this._getChildBound(r), i.bounds._getBoundBox()) && (this._objects.splice(this._objects.indexOf(i), 1), 
                    this._getChild(r)._add(i));
                }
            }
            var a = this._bestFitChild(e.bounds.getCenter());
            return t._encapsulates(this._getChildBound(a), e.bounds._getBoundBox()) ? this._getChild(a)._checkAddNode(e) : this;
        }, e._add = function(t) {
            var e = this._checkAddNode(t);
            e._objects.push(t), t._setOctreeNode(e);
        }, e._remove = function(t) {
            var e = this._objects.indexOf(t);
            this._objects.splice(e, 1), t._setOctreeNode(null), this._merge();
        }, e._addUp = function(t) {
            return 1 === Fe.boxContainsBox(this._bounds, t.bounds._getBoundBox()) ? (this._add(t), 
            !0) : !!this._parent && this._parent._addUp(t);
        }, e._getCollidingWithFrustum = function(t, e, n, i) {
            if (n) {
                var r = e.containsBoundBox(this._bounds);
                if (N.octreeNodeCulling++, 0 === r) return;
                n = 2 === r;
            }
            this._isContaion = !n;
            for (var a = t.camera, o = t.scene, s = 0, l = this._objects.length; s < l; s++) {
                var h = this._objects[s];
                if (a._isLayerVisible(h._owner.layer) && h._enable) {
                    if (n && (N.frustumCulling++, !h._needRender(e))) continue;
                    h._distanceForSort = Tt.distance(h.bounds.getCenter(), i);
                    for (var u = h._renderElements, c = 0, _ = u.length; c < _; c++) {
                        var d = u[c], f = o._getRenderQueue(d.material.renderQueue);
                        f.isTransparent ? d.addToTransparentRenderQueue(t, f) : d.addToOpaqueRenderQueue(t, f);
                    }
                }
            }
            if (null != this._children) for (s = 0; s < 8; s++) {
                var m = this._children[s];
                m && m._getCollidingWithFrustum(t, e, n, i);
            }
        }, e._getCollidingWithBoundBox = function(t, e, n) {
            if (e) {
                var i = Fe.boxContainsBox(this._bounds, t);
                if (0 === i) return;
                e = 2 === i;
            }
            if (e) for (var r = 0, a = this._objects.length; r < a; r++) {
                var o = this._objects[r];
                Fe.intersectsBoxAndBox(o.bounds._getBoundBox(), t) && n.push(o);
            }
            if (null != this._children) for (r = 0; r < 8; r++) this._children[r]._getCollidingWithBoundBox(t, e, n);
        }, e._bestFitChild = function(t) {
            return (t.x <= this.center.x ? 0 : 1) + (t.y >= this.center.y ? 0 : 4) + (t.z <= this.center.z ? 0 : 2);
        }, e._update = function(t) {
            if (1 === Fe.boxContainsBox(this._bounds, t.bounds._getBoundBox())) {
                var e = this._checkAddNode(t);
                if (e !== t._getOctreeNode()) {
                    e._objects.push(t), t._setOctreeNode(e);
                    var n = this._objects.indexOf(t);
                    this._objects.splice(n, 1), this._merge();
                }
                return !0;
            }
            if (this._parent) {
                var i = this._parent._addUp(t);
                return i && (n = this._objects.indexOf(t), this._objects.splice(n, 1), this._merge()), 
                i;
            }
            return !1;
        }, e.add = function(e) {
            return !!t._encapsulates(this._bounds, e.bounds._getBoundBox()) && (this._add(e), 
            !0);
        }, e.remove = function(t) {
            return t._getOctreeNode() === this && (this._remove(t), !0);
        }, e.update = function(t) {
            return t._getOctreeNode() === this && this._update(t);
        }, e.shrinkIfPossible = function(e) {
            if (this.baseLength < 2 * e) return this;
            for (var n = -1, i = 0, r = this._objects.length; i < r; i++) {
                var a = this._objects[i], o = this._bestFitChild(a.bounds.getCenter());
                if (0 != i && o != n) return this;
                var s = this._getChildBound(o);
                if (!t._encapsulates(s, a.bounds._getBoundBox())) return this;
                0 == i && (n = o);
            }
            if (null == this._children) {
                if (-1 != n) {
                    var l = this._getChildCenter(n);
                    this._setValues(this._octree, null, this.baseLength / 2, l);
                }
                return this;
            }
            var h = !1;
            for (i = 0, r = this._children.length; i < r; i++) {
                var u = this._children[i];
                if (u && u.hasAnyObjects()) {
                    if (h) return this;
                    if (n >= 0 && n != i) return this;
                    h = !0, n = i;
                }
            }
            if (-1 != n) {
                var c = this._children[n];
                return c._parent = null, c;
            }
            return this;
        }, e.hasAnyObjects = function() {
            if (this._objects.length > 0) return !0;
            if (null != this._children) for (var t = 0; t < 8; t++) {
                var e = this._children[t];
                if (e && e.hasAnyObjects()) return !0;
            }
            return !1;
        }, e.getCollidingWithBoundBox = function(t, e) {
            this._getCollidingWithBoundBox(t, !0, e);
        }, e.getCollidingWithRay = function(t, e, n) {
            void 0 === n && (n = Number.MAX_VALUE);
            var i = Fe.intersectsRayAndBoxRD(t, this._bounds);
            if (!(-1 == i || i > n)) {
                for (var r = 0, a = this._objects.length; r < a; r++) {
                    var o = this._objects[r];
                    -1 !== (i = Fe.intersectsRayAndBoxRD(t, o.bounds._getBoundBox())) && i <= n && e.push(o);
                }
                if (null != this._children) for (r = 0; r < 8; r++) this._children[r].getCollidingWithRay(t, e, n);
            }
        }, e.getCollidingWithFrustum = function(t) {
            var e = t.camera.transform.position, n = t.camera.boundFrustum;
            this._getCollidingWithFrustum(t, n, !0, e);
        }, e.isCollidingWithBoundBox = function(t) {
            if (!Fe.intersectsBoxAndBox(this._bounds, t)) return !1;
            for (var e = 0, n = this._objects.length; e < n; e++) {
                var i = this._objects[e];
                if (Fe.intersectsBoxAndBox(i.bounds._getBoundBox(), t)) return !0;
            }
            if (null != this._children) for (e = 0; e < 8; e++) if (this._children[e].isCollidingWithBoundBox(t)) return !0;
            return !1;
        }, e.isCollidingWithRay = function(t, e) {
            void 0 === e && (e = Number.MAX_VALUE);
            var n = Fe.intersectsRayAndBoxRD(t, this._bounds);
            if (-1 == n || n > e) return !1;
            for (var i = 0, r = this._objects.length; i < r; i++) {
                var a = this._objects[i];
                if (-1 !== (n = Fe.intersectsRayAndBoxRD(t, a.bounds._getBoundBox())) && n <= e) return !0;
            }
            if (null != this._children) for (i = 0; i < 8; i++) if (this._children[i].isCollidingWithRay(t, e)) return !0;
            return !1;
        }, e.getBound = function() {
            return this._bounds;
        }, e.drawAllBounds = function(e, n, i) {
            if (null !== this._children || 0 != this._objects.length) {
                n++;
                var r = t._tempColor0;
                if (this._isContaion) r.r = 0, r.g = 0, r.b = 1; else {
                    var a = i ? n / i : 0;
                    r.r = 1 - a, r.g = a, r.b = 0;
                }
                if (r.a = .3, kt._drawBound(e, this._bounds, r), null != this._children) for (var o = 0; o < 8; o++) {
                    var s = this._children[o];
                    s && s.drawAllBounds(e, n, i);
                }
            }
        }, e.drawAllObjects = function(e, n, i) {
            n++;
            var r = t._tempColor0;
            if (this._isContaion) r.r = 0, r.g = 0, r.b = 1; else {
                var a = i ? n / i : 0;
                r.r = 1 - a, r.g = a, r.b = 0;
            }
            r.a = 1;
            for (var o = 0, s = this._objects.length; o < s; o++) kt._drawBound(e, this._objects[o].bounds._getBoundBox(), r);
            if (null != this._children) for (o = 0; o < 8; o++) {
                var l = this._children[o];
                l && l.drawAllObjects(e, n, i);
            }
        }, t._encapsulates = function(t, e) {
            return 1 == Fe.boxContainsBox(t, e);
        }, t._NUM_OBJECTS_ALLOWED = 8, i(t, [ "_tempVector3", function() {
            return this._tempVector3 = new Tt();
        }, "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempColor0", function() {
            return this._tempColor0 = new xt();
        }, "_tempBoundBox", function() {
            return this._tempBoundBox = new ze(new Tt(), new Tt());
        } ]), t;
    }(), qt = (function() {
        function t() {
            this._currentLength = 0, this._elements = null, this._elements = new Float32Array(12);
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientDataVector2");
        var e = t.prototype;
        n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.add = function(t, e) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== t && (t = 1, console.log("GradientDataVector2 warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = t, this._elements[this._currentLength++] = e.x, 
            this._elements[this._currentLength++] = e.y) : console.log("GradientDataVector2 warning:data count must lessEqual than 4");
        }, e.cloneTo = function(t) {
            var e = t;
            e._currentLength = this._currentLength;
            var n = e._elements;
            n.length = this._elements.length;
            for (var i = 0, r = this._elements.length; i < r; i++) n[i] = this._elements[i];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradientCount", function() {
            return this._currentLength / 3;
        });
    }(), function() {
        function t(t, e, n, i) {
            this._position = null, this._normal = null, this._textureCoord0 = null, this._textureCoord1 = null, 
            this._position = t, this._normal = e, this._textureCoord0 = n, this._textureCoord1 = i;
        }
        r(t, "laya.d3.graphics.Vertex.VertexPositionTerrain");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.graphics.IVertex": !0
        }), a(0, e, "normal", function() {
            return this._normal;
        }), a(0, e, "position", function() {
            return this._position;
        }), a(0, e, "textureCoord0", function() {
            return this._textureCoord0;
        }), a(0, e, "textureCoord1", function() {
            return this._textureCoord1;
        }), a(0, e, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }), a(1, t, "vertexDeclaration", function() {
            return t._vertexDeclaration;
        }), t.TERRAIN_POSITION0 = 0, t.TERRAIN_NORMAL0 = 1, t.TERRAIN_TEXTURECOORDINATE0 = 2, 
        t.TERRAIN_TEXTURECOORDINATE1 = 3, i(t, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new fe(40, [ new zt(0, "vector3", 0), new zt(12, "vector3", 1), new zt(24, "vector2", 2), new zt(32, "vector2", 3) ]);
        } ]), t;
    }()), Qt = function() {
        function t() {
            this._nodes = [];
        }
        r(t, "laya.d3.animation.KeyframeNodeList");
        var e = t.prototype;
        return e.getNodeByIndex = function(t) {
            return this._nodes[t];
        }, e.setNodeByIndex = function(t, e) {
            this._nodes[t] = e;
        }, a(0, e, "count", function() {
            return this._nodes.length;
        }, function(t) {
            this._nodes.length = t;
        }), t;
    }(), Jt = function() {
        function t(t, e, n, i) {
            this._initialSize = NaN, this._rootNode = null, this._looseness = NaN, this._minSize = NaN, 
            this.count = 0, this._motionObjects = new vn(), n > t && (console.warn("Minimum node size must be at least as big as the initial world size. Was: " + n + " Adjusted to: " + t), 
            n = t), this._initialSize = t, this._minSize = n, this._looseness = Math.min(Math.max(i, 1), 2), 
            this._rootNode = new Kt(this, null, t, e);
        }
        r(t, "laya.d3.core.scene.BoundsOctree");
        var e = t.prototype;
        return e._getMaxDepth = function(t, e) {
            e++;
            var n = t._children;
            if (null != n) for (var i = e, r = 0, a = n.length; r < a; r++) {
                var o = n[r];
                o && (e = Math.max(this._getMaxDepth(o, i), e));
            }
            return e;
        }, e._grow = function(t) {
            var e = t.x >= 0 ? 1 : -1, n = t.y >= 0 ? 1 : -1, i = t.z >= 0 ? 1 : -1, r = this._rootNode, a = this._rootNode.baseLength / 2, s = 2 * this._rootNode.baseLength, l = this._rootNode.center, h = new Tt(l.x + e * a, l.y + n * a, l.z + i * a);
            if (this._rootNode = new Kt(this, null, s, h), r.hasAnyObjects()) {
                for (var u = this._rootNode._bestFitChild(r.center), c = o(8, null), _ = 0; _ < 8; _++) _ == u && (r._parent = this._rootNode, 
                c[_] = r);
                this._rootNode._children = c;
            }
        }, e.add = function(e) {
            for (var n = 0; !this._rootNode.add(e); ) {
                var i = t._tempVector30;
                if (Tt.subtract(e.bounds.getCenter(), this._rootNode.center, i), this._grow(i), 
                ++n > 20) throw "Aborted Add operation as it seemed to be going on forever (" + (n - 1) + ") attempts at growing the octree.";
            }
            this.count++;
        }, e.remove = function(t) {
            var e = t._getOctreeNode().remove(t);
            return e && this.count--, e;
        }, e.update = function(t) {
            var e = 0, n = t._getOctreeNode();
            if (n) {
                for (;!n._update(t); ) if (this._grow(t.bounds.getCenter()), ++e > 20) throw "Aborted Add operation as it seemed to be going on forever (" + (e - 1) + ") attempts at growing the octree.";
                return !0;
            }
            return !1;
        }, e.shrinkRootIfPossible = function() {
            this._rootNode = this._rootNode.shrinkIfPossible(this._initialSize);
        }, e.addMotionObject = function(t) {
            this._motionObjects.add(t);
        }, e.removeMotionObject = function(t) {
            this._motionObjects.remove(t);
        }, e.updateMotionObjects = function() {
            for (var t = this._motionObjects.elements, e = 0, n = this._motionObjects.length; e < n; e++) {
                var i = t[e];
                this.update(i), i._setIndexInMotionList(-1);
            }
            this._motionObjects.length = 0;
        }, e.isCollidingWithBoundBox = function(t) {
            return this._rootNode.isCollidingWithBoundBox(t);
        }, e.isCollidingWithRay = function(t, e) {
            return void 0 === e && (e = Number.MAX_VALUE), this._rootNode.isCollidingWithRay(t, e);
        }, e.getCollidingWithBoundBox = function(t, e) {
            this._rootNode.getCollidingWithBoundBox(t, e);
        }, e.getCollidingWithRay = function(t, e, n) {
            void 0 === n && (n = Number.MAX_VALUE), this._rootNode.getCollidingWithRay(t, e, n);
        }, e.getCollidingWithFrustum = function(t) {
            this._rootNode.getCollidingWithFrustum(t);
        }, e.getMaxBounds = function() {
            return this._rootNode.getBound();
        }, e.drawAllBounds = function(t) {
            var e = this._getMaxDepth(this._rootNode, -1);
            this._rootNode.drawAllBounds(t, -1, e);
        }, e.drawAllObjects = function(t) {
            var e = this._getMaxDepth(this._rootNode, -1);
            this._rootNode.drawAllObjects(t, -1, e);
        }, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        } ]), t;
    }(), $t = function() {
        function t(t) {
            this._owner = null, this._sharedMesh = null, this._owner = t;
        }
        r(t, "laya.d3.core.MeshFilter");
        var e = t.prototype;
        return e._getMeshDefine = function(t) {
            for (var e = 0, n = 0, i = t._subMeshCount; n < i; n++) for (var r = t._getSubMesh(n)._vertexBuffer._vertexDeclaration.vertexElements, a = 0, o = r.length; a < o; a++) switch (r[a].elementUsage) {
              case 1:
                e |= Ei.SHADERDEFINE_COLOR;
                break;

              case 2:
                e |= Ei.SHADERDEFINE_UV0;
                break;

              case 7:
                e |= Ei.SHADERDEFINE_UV1;
            }
            return e;
        }, e.destroy = function() {
            this._owner = null, this._sharedMesh && (this._sharedMesh._removeReference(), this._sharedMesh = null);
        }, a(0, e, "sharedMesh", function() {
            return this._sharedMesh;
        }, function(t) {
            if (this._sharedMesh !== t) {
                var e = this._owner._render._defineDatas, n = this._sharedMesh;
                n && (n._removeReference(), e.remove(this._getMeshDefine(n))), t._addReference(), 
                this._sharedMesh = t, e.add(this._getMeshDefine(t)), this._owner._render._changeRenderObjectsByMesh(t);
            }
            this._owner._render._onMeshChange(t);
        }), t;
    }(), te = function() {
        function t(t) {
            this._minVertexDistance = NaN, this._widthMultiplier = NaN, this._time = NaN, this._widthCurve = null, 
            this._colorGradient = null, this._textureMode = 0, this._trialGeometry = null, this._totalLength = 0, 
            this._owner = null, this._curtime = 0, this._trailRenderElementIndex = 0, this._lastPosition = new Tt(), 
            this.alignment = 0, this._owner = t, this._initDefaultData(), this.addRenderElement();
        }
        r(t, "laya.d3.core.trail.TrailFilter");
        var e = t.prototype;
        return e.addRenderElement = function() {
            var t = this._owner._render, e = t._renderElements, n = t.sharedMaterials[0];
            n || (n = ni.defaultMaterial);
            var i = new At();
            i.setTransform(this._owner._transform), i.render = t, i.material = n, this._trialGeometry = new dn(this), 
            i.setGeometry(this._trialGeometry), e.push(i);
        }, e._update = function(t) {
            var e = this._owner._render;
            this._curtime += t.scene.timer._delta / 1e3, e._shaderValues.setNumber(Si.CURTIME, this._curtime);
            var n = this._owner.transform.position, i = e._renderElements[0]._geometry;
            i._updateDisappear(), i._updateTrail(t.camera, this._lastPosition, n), i._updateVertexBufferUV(), 
            n.cloneTo(this._lastPosition);
        }, e._initDefaultData = function() {
            this.time = 5, this.minVertexDistance = .1, this.widthMultiplier = 1, this.textureMode = 0;
            var t = [], e = new Tn();
            e.time = 0, e.inTangent = 0, e.outTangent = 0, e.value = 1, t.push(e);
            var n = new Tn();
            n.time = 1, n.inTangent = 0, n.outTangent = 0, n.value = 1, t.push(n), this.widthCurve = t;
            var i = new lt(2, 2);
            i.mode = 0, i.addColorRGB(0, xt.WHITE), i.addColorRGB(1, xt.WHITE), i.addColorAlpha(0, 1), 
            i.addColorAlpha(1, 1), this.colorGradient = i;
        }, e.destroy = function() {
            this._trialGeometry.destroy(), this._trialGeometry = null, this._widthCurve = null, 
            this._colorGradient = null;
        }, a(0, e, "widthMultiplier", function() {
            return this._widthMultiplier;
        }, function(t) {
            this._widthMultiplier = t;
        }), a(0, e, "time", function() {
            return this._time;
        }, function(t) {
            this._time = t, this._owner._render._shaderValues.setNumber(Si.LIFETIME, t);
        }), a(0, e, "widthCurve", function() {
            return this._widthCurve;
        }, function(t) {
            this._widthCurve = t;
            var e = new Float32Array(4 * t.length), n = 0, i = 0, r = 0;
            for (n = 0, i = t.length; n < i; n++) e[r++] = t[n].time, e[r++] = t[n].inTangent, 
            e[r++] = t[n].outTangent, e[r++] = t[n].value;
            this._owner._render._shaderValues.setBuffer(Si.WIDTHCURVE, e), this._owner._render._shaderValues.setInt(Si.WIDTHCURVEKEYLENGTH, t.length);
        }), a(0, e, "minVertexDistance", function() {
            return this._minVertexDistance;
        }, function(t) {
            this._minVertexDistance = t;
        }), a(0, e, "colorGradient", function() {
            return this._colorGradient;
        }, function(t) {
            this._colorGradient = t, this._owner._render._shaderValues.setBuffer(Si.GRADIENTCOLORKEY, t._rgbElements), 
            this._owner._render._shaderValues.setBuffer(Si.GRADIENTALPHAKEY, t._alphaElements), 
            0 == t.mode ? this._owner._render._defineDatas.add(Si.SHADERDEFINE_GRADIENTMODE_BLEND) : this._owner._render._defineDatas.remove(Si.SHADERDEFINE_GRADIENTMODE_BLEND);
        }), a(0, e, "textureMode", function() {
            return this._textureMode;
        }, function(t) {
            this._textureMode = t;
        }), t.ALIGNMENT_VIEW = 0, t.ALIGNMENT_TRANSFORM_Z = 1, t;
    }(), ee = function() {
        function t() {}
        r(t, "laya.d3.core.trail.VertexTrail");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.graphics.IVertex": !0
        }), a(0, e, "vertexDeclaration", function() {
            return t._vertexDeclaration1;
        }), a(1, t, "vertexDeclaration1", function() {
            return t._vertexDeclaration1;
        }), a(1, t, "vertexDeclaration2", function() {
            return t._vertexDeclaration2;
        }), t.TRAIL_POSITION0 = 0, t.TRAIL_OFFSETVECTOR = 1, t.TRAIL_TIME0 = 2, t.TRAIL_TEXTURECOORDINATE0Y = 3, 
        t.TRAIL_TEXTURECOORDINATE0X = 4, i(t, [ "_vertexDeclaration1", function() {
            return this._vertexDeclaration1 = new fe(32, [ new zt(0, "vector3", 0), new zt(12, "vector3", 1), new zt(24, "single", 2), new zt(28, "single", 3) ]);
        }, "_vertexDeclaration2", function() {
            return this._vertexDeclaration2 = new fe(4, [ new zt(0, "single", 4) ]);
        } ]), t;
    }(), ne = function() {
        function t(t, e, n) {
            this._time = NaN, this._minCount = 0, this._maxCount = 0, this._time = t, this._minCount = e, 
            this._maxCount = n;
        }
        r(t, "laya.d3.core.particleShuriKen.module.Burst");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._time = this._time, e._minCount = this._minCount, e._maxCount = this._maxCount;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "time", function() {
            return this._time;
        }), a(0, e, "minCount", function() {
            return this._minCount;
        }), a(0, e, "maxCount", function() {
            return this._maxCount;
        }), t;
    }(), ie = function() {
        function t() {
            this.time = NaN, this.eventName = null, this.params = null;
        }
        return r(t, "laya.d3.animation.AnimationEvent"), t;
    }(), re = (function() {
        r(function() {
            this._nativeConstraint = null, this._simulation = null, this.rigidbodyA = null, 
            this.rigidbodyB = null;
        }, "laya.d3.physics.Constraint3D");
    }(), function() {
        function t() {
            this._pressedSprite = null, this._pressedLoopCount = -1, this.sprite = null, this.mousePositionX = 0, 
            this.mousePositionY = 0;
        }
        return r(t, "laya.d3.MouseTouch"), t;
    }()), ae = function() {
        function t() {
            this._currentLength = 0, this._elements = null, this._elements = new Float32Array(8);
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientDataInt");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.add = function(t, e) {
            this._currentLength < 8 ? (6 === this._currentLength && 1 !== t && (t = 1, console.log("Warning:the forth key is  be force set to 1.")), 
            this._elements[this._currentLength++] = t, this._elements[this._currentLength++] = e) : console.log("Warning:data count must lessEqual than 4");
        }, e.cloneTo = function(t) {
            var e = t;
            e._currentLength = this._currentLength;
            var n = e._elements;
            n.length = this._elements.length;
            for (var i = 0, r = this._elements.length; i < r; i++) n[i] = this._elements[i];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradientCount", function() {
            return this._currentLength / 2;
        }), t;
    }(), oe = function() {
        function t(t, e, n, i) {
            this._attributeMap = null, this._uniformMap = null, this._publicDefines = null, 
            this._publicDefinesMap = null, this._spriteDefines = null, this._spriteDefinesMap = null, 
            this._materialDefines = null, this._materialDefinesMap = null, this._owner = null, 
            this._flags = {}, this._passes = [], this._publicDefines = [], this._publicDefinesMap = {}, 
            this._spriteDefines = [], this._spriteDefinesMap = {}, this._materialDefines = [], 
            this._materialDefinesMap = {}, this._addDefines(this._publicDefines, this._publicDefinesMap, Vt._globleDefines), 
            n && this._addDefines(this._spriteDefines, this._spriteDefinesMap, n.defines), i && this._addDefines(this._materialDefines, this._materialDefinesMap, i.defines), 
            this._attributeMap = t, this._uniformMap = e;
        }
        r(t, "laya.d3.shader.SubShader");
        var e = t.prototype;
        return e._addDefines = function(t, e, n) {
            for (var i in n) {
                var r = n[i], a = parseInt(i);
                t[a] = r, e[r] = a;
            }
        }, e.getMaterialDefineByName = function(t) {
            return this._materialDefinesMap[t];
        }, e.setFlag = function(t, e) {
            e ? this._flags[t] = e : delete this._flags[t];
        }, e.getFlag = function(t) {
            return this._flags[t];
        }, e.addShaderPass = function(t, e, n) {
            var i = new Qe(this, t, e, n);
            return this._passes.push(i), i;
        }, t;
    }(), se = function() {
        function t() {
            this.source = null, this.destination = null, this.camera = null, this.compositeShaderData = null, 
            this.compositeDefineData = null, this.command = null, this.tempRenderTextures = [];
        }
        return r(t, "laya.d3.core.render.PostProcessRenderContext"), t;
    }(), le = function() {
        function t() {
            this._commands = [];
        }
        r(t, "laya.d3.core.render.command.CommandBuffer");
        var e = t.prototype;
        return e._apply = function() {
            for (var t = 0, e = this._commands.length; t < e; t++) this._commands[t].run();
        }, e.setShaderDataTexture = function(t, e, n) {
            this._commands.push(Mn.create(t, e, n));
        }, e.blit = function(t, e, n, i, r) {
            void 0 === r && (r = 0), this._commands.push(nn.create(t, e, n, i, r));
        }, e.setRenderTarget = function(t) {
            this._commands.push(gn.create(t));
        }, e.clear = function() {
            for (var t = 0, e = this._commands.length; t < e; t++) this._commands[t].recover();
            this._commands.length = 0;
        }, t.SCREENTEXTURE_NAME = "u_ScreenTexture", i(t, [ "screenShader", function() {
            return this.screenShader = Vt.find("ScreenQuad");
        }, "SCREENTEXTURE_ID", function() {
            return this.SCREENTEXTURE_ID = Vt.propertyNameToID("u_ScreenTexture");
        } ]), t;
    }(), he = function() {
        function t() {
            this._type = 0, this._separateAxes = !1, this._constant = NaN, this._constantSeparate = null, 
            this._gradient = null, this._gradientX = null, this._gradientY = null, this._gradientZ = null, 
            this._gradientW = null, this._constantMin = NaN, this._constantMax = NaN, this._constantMinSeparate = null, 
            this._constantMaxSeparate = null, this._gradientMin = null, this._gradientMax = null, 
            this._gradientXMin = null, this._gradientXMax = null, this._gradientYMin = null, 
            this._gradientYMax = null, this._gradientZMin = null, this._gradientZMax = null, 
            this._gradientWMin = null, this._gradientWMax = null;
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientAngularVelocity");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._type = this._type, e._separateAxes = this._separateAxes, e._constant = this._constant, 
            this._constantSeparate.cloneTo(e._constantSeparate), this._gradient.cloneTo(e._gradient), 
            this._gradientX.cloneTo(e._gradientX), this._gradientY.cloneTo(e._gradientY), this._gradientZ.cloneTo(e._gradientZ), 
            e._constantMin = this._constantMin, e._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(e._constantMinSeparate), 
            this._constantMaxSeparate.cloneTo(e._constantMaxSeparate), this._gradientMin.cloneTo(e._gradientMin), 
            this._gradientMax.cloneTo(e._gradientMax), this._gradientXMin.cloneTo(e._gradientXMin), 
            this._gradientXMax.cloneTo(e._gradientXMax), this._gradientYMin.cloneTo(e._gradientYMin), 
            this._gradientYMax.cloneTo(e._gradientYMax), this._gradientZMin.cloneTo(e._gradientZMin), 
            this._gradientZMax.cloneTo(e._gradientZMax);
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradientZ", function() {
            return this._gradientZ;
        }), a(0, e, "constant", function() {
            return this._constant;
        }), a(0, e, "gradient", function() {
            return this._gradient;
        }), a(0, e, "separateAxes", function() {
            return this._separateAxes;
        }), a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "constantSeparate", function() {
            return this._constantSeparate;
        }), a(0, e, "gradientX", function() {
            return this._gradientX;
        }), a(0, e, "gradientY", function() {
            return this._gradientY;
        }), a(0, e, "gradientW", function() {
            return this._gradientW;
        }), a(0, e, "gradientMin", function() {
            return this._gradientMin;
        }), a(0, e, "constantMin", function() {
            return this._constantMin;
        }), a(0, e, "gradientMax", function() {
            return this._gradientMax;
        }), a(0, e, "constantMax", function() {
            return this._constantMax;
        }), a(0, e, "gradientWMin", function() {
            return this._gradientWMin;
        }), a(0, e, "constantMinSeparate", function() {
            return this._constantMinSeparate;
        }), a(0, e, "constantMaxSeparate", function() {
            return this._constantMaxSeparate;
        }), a(0, e, "gradientXMin", function() {
            return this._gradientXMin;
        }), a(0, e, "gradientXMax", function() {
            return this._gradientXMax;
        }), a(0, e, "gradientWMax", function() {
            return this._gradientWMax;
        }), a(0, e, "gradientYMin", function() {
            return this._gradientYMin;
        }), a(0, e, "gradientYMax", function() {
            return this._gradientYMax;
        }), a(0, e, "gradientZMin", function() {
            return this._gradientZMin;
        }), a(0, e, "gradientZMax", function() {
            return this._gradientZMax;
        }), t.createByConstant = function(e) {
            var n = new t();
            return n._type = 0, n._separateAxes = !1, n._constant = e, n;
        }, t.createByConstantSeparate = function(e) {
            var n = new t();
            return n._type = 0, n._separateAxes = !0, n._constantSeparate = e, n;
        }, t.createByGradient = function(e) {
            var n = new t();
            return n._type = 1, n._separateAxes = !1, n._gradient = e, n;
        }, t.createByGradientSeparate = function(e, n, i) {
            var r = new t();
            return r._type = 1, r._separateAxes = !0, r._gradientX = e, r._gradientY = n, r._gradientZ = i, 
            r;
        }, t.createByRandomTwoConstant = function(e, n) {
            var i = new t();
            return i._type = 2, i._separateAxes = !1, i._constantMin = e, i._constantMax = n, 
            i;
        }, t.createByRandomTwoConstantSeparate = function(e, n) {
            var i = new t();
            return i._type = 2, i._separateAxes = !0, i._constantMinSeparate = e, i._constantMaxSeparate = n, 
            i;
        }, t.createByRandomTwoGradient = function(e, n) {
            var i = new t();
            return i._type = 3, i._separateAxes = !1, i._gradientMin = e, i._gradientMax = n, 
            i;
        }, t.createByRandomTwoGradientSeparate = function(e, n, i, r, a, o, s, l) {
            var h = new t();
            return h._type = 3, h._separateAxes = !0, h._gradientXMin = e, h._gradientXMax = n, 
            h._gradientYMin = i, h._gradientYMax = r, h._gradientZMin = a, h._gradientZMax = o, 
            h._gradientWMin = s, h._gradientWMax = l, h;
        }, t;
    }(), ue = function() {
        function t() {
            this._defaultPhysicsMemory = 16, this._editerEnvironment = !1, this.isAntialias = !1, 
            this.isAlpha = !1, this.premultipliedAlpha = !0, this.isStencil = !0, this.octreeCulling = !1, 
            this.octreeInitialSize = 64, this.octreeMinNodeSize = 2, this.octreeLooseness = 1.25, 
            this.debugFrustumCulling = !1, this.octreeInitialCenter = new Tt(0, 0, 0);
        }
        r(t, "Config3D");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._defaultPhysicsMemory = this._defaultPhysicsMemory, e._editerEnvironment = this._editerEnvironment, 
            e.isAntialias = this.isAntialias, e.isAlpha = this.isAlpha, e.premultipliedAlpha = this.premultipliedAlpha, 
            e.isStencil = this.isStencil, e.octreeCulling = this.octreeCulling, this.octreeInitialCenter.cloneTo(e.octreeInitialCenter), 
            e.octreeMinNodeSize = this.octreeMinNodeSize, e.octreeLooseness = this.octreeLooseness, 
            e.debugFrustumCulling = this.debugFrustumCulling;
        }, e.clone = function() {
            var e = new t();
            return this.cloneTo(e), e;
        }, a(0, e, "defaultPhysicsMemory", function() {
            return this._defaultPhysicsMemory;
        }, function(t) {
            if (t < 16) throw "defaultPhysicsMemory must large than 16M";
            this._defaultPhysicsMemory = t;
        }), i(t, [ "_default", function() {
            return this._default = new t();
        } ]), t;
    }(), ce = (function() {
        function t(t) {
            if (this._state0U = NaN, this._state0L = NaN, this._state1U = NaN, this._state1L = NaN, 
            !(t instanceof Array) || 4 !== t.length) throw new Error("Rand:Seed must be an array with 4 numbers");
            this._state0U = 0 | t[0], this._state0L = 0 | t[1], this._state1U = 0 | t[2], this._state1L = 0 | t[3];
        }
        r(t, "laya.d3.math.RandX");
        var e = t.prototype;
        e.randomint = function() {
            var t = this._state0U, e = this._state0L, n = this._state1U, i = this._state1L, r = (i >>> 0) + (e >>> 0), a = n + t + (r / 2 >>> 31) >>> 0, o = r >>> 0;
            this._state0U = n, this._state0L = i;
            var s = 0, l = 0, h = 0, u = 0;
            return s = (t ^= s = t << 23 | (-512 & e) >>> 9) ^ n, l = (e ^= l = e << 23) ^ i, 
            s ^= h = t >>> 18, l ^= u = e >>> 18 | (262143 & t) << 14, h = n >>> 5, u = i >>> 5 | (31 & n) << 27, 
            s ^= h, l ^= u, this._state1U = s, this._state1L = l, [ a, o ];
        }, e.random = function() {
            var e = this.randomint(), n = e[0], i = 1023 << 20 | n >>> 12, r = e[1] >>> 12 | (4095 & n) << 20 | 0;
            return t._CONVERTION_BUFFER.setUint32(0, i, !1), t._CONVERTION_BUFFER.setUint32(4, r, !1), 
            wt._CONVERTION_BUFFER.getFloat64(0, !1) - 1;
        }, i(t, [ "_CONVERTION_BUFFER", function() {
            return this._CONVERTION_BUFFER = new DataView(new ArrayBuffer(8));
        }, "defaultRand", function() {
            return this.defaultRand = new wt([ 0, Date.now() / 65536, 0, Date.now() % 65536 ]);
        } ]);
    }(), function() {
        function t() {}
        return r(t, "laya.d3.utils.Picker"), t.calculateCursorRay = function(e, n, i, r, a, o) {
            var s = e.x, l = e.y, h = t._tempVector30, u = h;
            u.x = s, u.y = l, u.z = n.minDepth;
            var c = t._tempVector31, _ = c;
            _.x = s, _.y = l, _.z = n.maxDepth;
            var d = o.origin, f = t._tempVector32;
            n.unprojectFromWVP(h, i, r, a, d), n.unprojectFromWVP(c, i, r, a, f);
            var m = o.direction;
            m.x = f.x - d.x, m.y = f.y - d.y, m.z = f.z - d.z, Tt.normalize(o.direction, o.direction);
        }, t.rayIntersectsTriangle = function(e, n, i, r) {
            var a = t._tempVector30, o = t._tempVector31;
            Tt.subtract(i, n, a), Tt.subtract(r, n, o);
            var s = t._tempVector32;
            Tt.cross(e.direction, o, s);
            var l;
            if ((l = Tt.dot(a, s)) > -Number.MIN_VALUE && l < Number.MIN_VALUE) return Number.NaN;
            var h = 1 / l, u = t._tempVector33;
            Tt.subtract(e.origin, n, u);
            var c;
            if (c = Tt.dot(u, s), (c *= h) < 0 || c > 1) return Number.NaN;
            var _ = t._tempVector34;
            Tt.cross(u, a, _);
            var d;
            if (d = Tt.dot(e.direction, _), (d *= h) < 0 || c + d > 1) return Number.NaN;
            var f;
            return f = Tt.dot(o, _), (f *= h) < 0 ? Number.NaN : f;
        }, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempVector32", function() {
            return this._tempVector32 = new Tt();
        }, "_tempVector33", function() {
            return this._tempVector33 = new Tt();
        }, "_tempVector34", function() {
            return this._tempVector34 = new Tt();
        } ]), t;
    }()), _e = function() {
        function t() {
            this._indexInList = -1, this._identifier = -1, this._position = new Et();
        }
        r(t, "laya.d3.Touch");
        var e = t.prototype;
        return n.imps(e, {
            "laya.resource.ISingletonElement": !0
        }), e._getIndexInList = function() {
            return this._indexInList;
        }, e._setIndexInList = function(t) {
            this._indexInList = t;
        }, a(0, e, "identifier", function() {
            return this._identifier;
        }), a(0, e, "position", function() {
            return this._position;
        }), t;
    }(), de = (function() {
        function t() {
            this.startPosition = new Tt(), this.endPosition = new Tt(), this.startColor = new xt(), 
            this.endColor = new xt();
        }
        r(t, "laya.d3.core.pixelLine.PixelLineData"), t.prototype.cloneTo = function(t) {
            this.startPosition.cloneTo(t.startPosition), this.endPosition.cloneTo(t.endPosition), 
            this.startColor.cloneTo(t.startColor), this.endColor.cloneTo(t.endColor);
        };
    }(), function() {
        function t() {
            this._lastUpdateFrame = -2147483648, this._updateFrame = -2147483648, this._isTrigger = !1, 
            this.contacts = [];
        }
        return r(t, "laya.d3.physics.Collision"), t.prototype._setUpdateFrame = function(t) {
            this._lastUpdateFrame = this._updateFrame, this._updateFrame = t;
        }, t;
    }()), fe = function() {
        function t(e, n) {
            this._id = 0, this._vertexStride = 0, this._vertexElementsDic = null, this._shaderValues = null, 
            this._defineDatas = null, this.vertexElements = null, this._id = ++t._uniqueIDCounter, 
            this._defineDatas = new Ut(), this._vertexElementsDic = {}, this._vertexStride = e, 
            this.vertexElements = n;
            var i = n.length;
            this._shaderValues = new ut(null);
            for (var r = 0; r < i; r++) {
                var a = n[r], o = a.elementUsage;
                this._vertexElementsDic[o] = a;
                var s = new Int32Array(5), l = Oe.getElementInfos(a.elementFormat);
                s[0] = l[0], s[1] = l[1], s[2] = l[2], s[3] = this._vertexStride, s[4] = a.offset, 
                this._shaderValues.setAttribute(o, s);
            }
        }
        r(t, "laya.d3.graphics.VertexDeclaration");
        var e = t.prototype;
        return e.getVertexElementByUsage = function(t) {
            return this._vertexElementsDic[t];
        }, e.unBinding = function() {}, a(0, e, "id", function() {
            return this._id;
        }), a(0, e, "vertexStride", function() {
            return this._vertexStride;
        }), t._uniqueIDCounter = 1, t;
    }(), me = function() {
        function t() {
            this._material = null, this._mesh = xn.instance;
        }
        r(t, "laya.d3.resource.models.SkyRenderer");
        var e = t.prototype;
        return e._isAvailable = function() {
            return this._material && this._mesh;
        }, e._render = function(t) {
            if (this._material && this._mesh) {
                var e = v.instance, n = t.scene, i = t.camera;
                B.setCullFace(e, !1), B.setDepthFunc(e, 515), B.setDepthMask(e, !1);
                var r = t.shader = this._material._shader.getSubShaderAt(0)._passes[0].withCompile(0, 0, this._material._defineDatas.value), a = r.bind(), o = N.loopCount !== r._uploadMark, s = r._uploadScene !== n || o;
                (s || a) && (r.uploadUniforms(r._sceneUniformParamsMap, n._shaderValues, s), r._uploadScene = n);
                var l = r._uploadCamera !== i || o;
                (l || a) && (r.uploadUniforms(r._cameraUniformParamsMap, i._shaderValues, l), r._uploadCamera = i);
                var h = r._uploadMaterial !== this._material || o;
                (h || a) && (r.uploadUniforms(r._materialUniformParamsMap, this._material._shaderValues, h), 
                r._uploadMaterial = this._material), this._mesh._bufferState.bind(), this._mesh._render(t), 
                B.setDepthFunc(e, 513), B.setDepthMask(e, !0);
            }
        }, e.destroy = function() {
            this._material && (this._material._removeReference(), this._material = null);
        }, a(0, e, "material", function() {
            return this._material;
        }, function(t) {
            this._material !== t && (this._material && this._material._removeReference(), t && t._addReference(), 
            this._material = t);
        }), a(0, e, "mesh", function() {
            return this._mesh;
        }, function(t) {
            this._mesh !== t && (this._mesh = t);
        }), t;
    }(), pe = (function() {
        function t() {}
        r(t, "laya.d3.animation.AnimatorStateScript");
        var e = t.prototype;
        e.onStateEnter = function() {}, e.onStateUpdate = function() {}, e.onStateExit = function() {};
    }(), function() {
        function t() {
            this.updateMark = -1, this.indexInList = -1, this.batched = !1;
        }
        return r(t, "laya.d3.core.render.BatchMark"), t;
    }()), Te = function() {
        function t() {
            this.succeeded = !1, this.collider = null, this.hitFraction = 0, this.point = new Tt(), 
            this.normal = new Tt();
        }
        return r(t, "laya.d3.physics.HitResult"), t;
    }(), Ee = function() {
        function t() {
            this._type = 0, this._separateAxes = !1, this._gradient = null, this._gradientX = null, 
            this._gradientY = null, this._gradientZ = null, this._constantMin = NaN, this._constantMax = NaN, 
            this._constantMinSeparate = null, this._constantMaxSeparate = null, this._gradientMin = null, 
            this._gradientMax = null, this._gradientXMin = null, this._gradientXMax = null, 
            this._gradientYMin = null, this._gradientYMax = null, this._gradientZMin = null, 
            this._gradientZMax = null;
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientSize");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.getMaxSizeInGradient = function() {
            var t = 0, e = 0, n = -Number.MAX_VALUE;
            switch (this._type) {
              case 0:
                if (this._separateAxes) {
                    for (t = 0, e = this._gradientX.gradientCount; t < e; t++) n = Math.max(n, this._gradientX.getValueByIndex(t));
                    for (t = 0, e = this._gradientY.gradientCount; t < e; t++) n = Math.max(n, this._gradientY.getValueByIndex(t));
                } else for (t = 0, e = this._gradient.gradientCount; t < e; t++) n = Math.max(n, this._gradient.getValueByIndex(t));
                break;

              case 1:
                this._separateAxes ? (n = Math.max(this._constantMinSeparate.x, this._constantMaxSeparate.x), 
                n = Math.max(n, this._constantMinSeparate.y), n = Math.max(n, this._constantMaxSeparate.y)) : n = Math.max(this._constantMin, this._constantMax);
                break;

              case 2:
                if (this._separateAxes) {
                    for (t = 0, e = this._gradientXMin.gradientCount; t < e; t++) n = Math.max(n, this._gradientXMin.getValueByIndex(t));
                    for (t = 0, e = this._gradientXMax.gradientCount; t < e; t++) n = Math.max(n, this._gradientXMax.getValueByIndex(t));
                    for (t = 0, e = this._gradientYMin.gradientCount; t < e; t++) n = Math.max(n, this._gradientYMin.getValueByIndex(t));
                    for (t = 0, e = this._gradientZMax.gradientCount; t < e; t++) n = Math.max(n, this._gradientZMax.getValueByIndex(t));
                } else {
                    for (t = 0, e = this._gradientMin.gradientCount; t < e; t++) n = Math.max(n, this._gradientMin.getValueByIndex(t));
                    for (t = 0, e = this._gradientMax.gradientCount; t < e; t++) n = Math.max(n, this._gradientMax.getValueByIndex(t));
                }
            }
            return n;
        }, e.cloneTo = function(t) {
            var e = t;
            e._type = this._type, e._separateAxes = this._separateAxes, this._gradient.cloneTo(e._gradient), 
            this._gradientX.cloneTo(e._gradientX), this._gradientY.cloneTo(e._gradientY), this._gradientZ.cloneTo(e._gradientZ), 
            e._constantMin = this._constantMin, e._constantMax = this._constantMax, this._constantMinSeparate.cloneTo(e._constantMinSeparate), 
            this._constantMaxSeparate.cloneTo(e._constantMaxSeparate), this._gradientMin.cloneTo(e._gradientMin), 
            this._gradientMax.cloneTo(e._gradientMax), this._gradientXMin.cloneTo(e._gradientXMin), 
            this._gradientXMax.cloneTo(e._gradientXMax), this._gradientYMin.cloneTo(e._gradientYMin), 
            this._gradientYMax.cloneTo(e._gradientYMax), this._gradientZMin.cloneTo(e._gradientZMin), 
            this._gradientZMax.cloneTo(e._gradientZMax);
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradientZ", function() {
            return this._gradientZ;
        }), a(0, e, "gradient", function() {
            return this._gradient;
        }), a(0, e, "separateAxes", function() {
            return this._separateAxes;
        }), a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "gradientMin", function() {
            return this._gradientMin;
        }), a(0, e, "constantMin", function() {
            return this._constantMin;
        }), a(0, e, "gradientX", function() {
            return this._gradientX;
        }), a(0, e, "gradientY", function() {
            return this._gradientY;
        }), a(0, e, "gradientMax", function() {
            return this._gradientMax;
        }), a(0, e, "constantMax", function() {
            return this._constantMax;
        }), a(0, e, "constantMinSeparate", function() {
            return this._constantMinSeparate;
        }), a(0, e, "constantMaxSeparate", function() {
            return this._constantMaxSeparate;
        }), a(0, e, "gradientXMin", function() {
            return this._gradientXMin;
        }), a(0, e, "gradientXMax", function() {
            return this._gradientXMax;
        }), a(0, e, "gradientYMin", function() {
            return this._gradientYMin;
        }), a(0, e, "gradientYMax", function() {
            return this._gradientYMax;
        }), a(0, e, "gradientZMin", function() {
            return this._gradientZMin;
        }), a(0, e, "gradientZMax", function() {
            return this._gradientZMax;
        }), t.createByGradient = function(e) {
            var n = new t();
            return n._type = 0, n._separateAxes = !1, n._gradient = e, n;
        }, t.createByGradientSeparate = function(e, n, i) {
            var r = new t();
            return r._type = 0, r._separateAxes = !0, r._gradientX = e, r._gradientY = n, r._gradientZ = i, 
            r;
        }, t.createByRandomTwoConstant = function(e, n) {
            var i = new t();
            return i._type = 1, i._separateAxes = !1, i._constantMin = e, i._constantMax = n, 
            i;
        }, t.createByRandomTwoConstantSeparate = function(e, n) {
            var i = new t();
            return i._type = 1, i._separateAxes = !0, i._constantMinSeparate = e, i._constantMaxSeparate = n, 
            i;
        }, t.createByRandomTwoGradient = function(e, n) {
            var i = new t();
            return i._type = 2, i._separateAxes = !1, i._gradientMin = e, i._gradientMax = n, 
            i;
        }, t.createByRandomTwoGradientSeparate = function(e, n, i, r, a, o) {
            var s = new t();
            return s._type = 2, s._separateAxes = !0, s._gradientXMin = e, s._gradientXMax = n, 
            s._gradientYMin = i, s._gradientYMax = r, s._gradientZMin = a, s._gradientZMax = o, 
            s;
        }, t;
    }(), ve = function() {
        function t() {
            this.alphaMap = null, this.detailID = null, this.normalMap = null;
        }
        return r(t, "laya.d3.terrain.unit.ChunkInfo"), t;
    }(), ge = function() {
        function t() {
            this.textureID = -1;
        }
        return r(t, "laya.d3.shader.ShaderVariable"), t;
    }(), Se = function() {
        function t() {
            this._indexInList = 0, this.type = 0, this.fullPath = null, this.propertyOwner = null, 
            this.data = null, this._ownerPath = [], this._propertys = [], this._keyFrames = [];
        }
        r(t, "laya.d3.animation.KeyframeNode");
        var e = t.prototype;
        return e._setOwnerPathCount = function(t) {
            this._ownerPath.length = t;
        }, e._setOwnerPathByIndex = function(t, e) {
            this._ownerPath[t] = e;
        }, e._joinOwnerPath = function(t) {
            return this._ownerPath.join(t);
        }, e._setPropertyCount = function(t) {
            this._propertys.length = t;
        }, e._setPropertyByIndex = function(t, e) {
            this._propertys[t] = e;
        }, e._joinProperty = function(t) {
            return this._propertys.join(t);
        }, e._setKeyframeCount = function(t) {
            this._keyFrames.length = t;
        }, e._setKeyframeByIndex = function(t, e) {
            this._keyFrames[t] = e;
        }, e.getOwnerPathByIndex = function(t) {
            return this._ownerPath[t];
        }, e.getPropertyByIndex = function(t) {
            return this._propertys[t];
        }, e.getKeyframeByIndex = function(t) {
            return this._keyFrames[t];
        }, a(0, e, "ownerPathCount", function() {
            return this._ownerPath.length;
        }), a(0, e, "propertyCount", function() {
            return this._propertys.length;
        }), a(0, e, "keyFramesCount", function() {
            return this._keyFrames.length;
        }), t;
    }(), ye = function() {
        function t() {
            this._type = 0, this._constant = null, this._gradientX = null, this._gradientY = null, 
            this._gradientZ = null, this._constantMin = null, this._constantMax = null, this._gradientXMin = null, 
            this._gradientXMax = null, this._gradientYMin = null, this._gradientYMax = null, 
            this._gradientZMin = null, this._gradientZMax = null;
        }
        r(t, "laya.d3.core.particleShuriKen.module.GradientVelocity");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._type = this._type, this._constant.cloneTo(e._constant), this._gradientX.cloneTo(e._gradientX), 
            this._gradientY.cloneTo(e._gradientY), this._gradientZ.cloneTo(e._gradientZ), this._constantMin.cloneTo(e._constantMin), 
            this._constantMax.cloneTo(e._constantMax), this._gradientXMin.cloneTo(e._gradientXMin), 
            this._gradientXMax.cloneTo(e._gradientXMax), this._gradientYMin.cloneTo(e._gradientYMin), 
            this._gradientYMax.cloneTo(e._gradientYMax), this._gradientZMin.cloneTo(e._gradientZMin), 
            this._gradientZMax.cloneTo(e._gradientZMax);
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "gradientZ", function() {
            return this._gradientZ;
        }), a(0, e, "constant", function() {
            return this._constant;
        }), a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "gradientXMax", function() {
            return this._gradientXMax;
        }), a(0, e, "constantMin", function() {
            return this._constantMin;
        }), a(0, e, "gradientX", function() {
            return this._gradientX;
        }), a(0, e, "gradientY", function() {
            return this._gradientY;
        }), a(0, e, "gradientXMin", function() {
            return this._gradientXMin;
        }), a(0, e, "constantMax", function() {
            return this._constantMax;
        }), a(0, e, "gradientYMin", function() {
            return this._gradientYMin;
        }), a(0, e, "gradientYMax", function() {
            return this._gradientYMax;
        }), a(0, e, "gradientZMin", function() {
            return this._gradientZMin;
        }), a(0, e, "gradientZMax", function() {
            return this._gradientZMax;
        }), t.createByConstant = function(e) {
            var n = new t();
            return n._type = 0, n._constant = e, n;
        }, t.createByGradient = function(e, n, i) {
            var r = new t();
            return r._type = 1, r._gradientX = e, r._gradientY = n, r._gradientZ = i, r;
        }, t.createByRandomTwoConstant = function(e, n) {
            var i = new t();
            return i._type = 2, i._constantMin = e, i._constantMax = n, i;
        }, t.createByRandomTwoGradient = function(e, n, i, r, a, o) {
            var s = new t();
            return s._type = 3, s._gradientXMin = e, s._gradientXMax = n, s._gradientYMin = i, 
            s._gradientYMax = r, s._gradientZMin = a, s._gradientZMax = o, s;
        }, t;
    }(), xe = function() {
        function t(t, e) {
            this._updateFlag = 0, this._center = new Tt(), this._extent = new Tt(), this._boundBox = new ze(new Tt(), new Tt()), 
            t.cloneTo(this._boundBox.min), e.cloneTo(this._boundBox.max), this._setUpdateFlag(12, !0);
        }
        r(t, "laya.d3.core.Bounds");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.setMin = function(t) {
            var e = this._boundBox.min;
            t !== e && t.cloneTo(e), this._setUpdateFlag(12, !0), this._setUpdateFlag(1, !1);
        }, e.getMin = function() {
            var t = this._boundBox.min;
            return this._getUpdateFlag(1) && (this._getMin(this.getCenter(), this.getExtent(), t), 
            this._setUpdateFlag(1, !1)), t;
        }, e.setMax = function(t) {
            var e = this._boundBox.max;
            t !== e && t.cloneTo(e), this._setUpdateFlag(12, !0), this._setUpdateFlag(2, !1);
        }, e.getMax = function() {
            var t = this._boundBox.max;
            return this._getUpdateFlag(2) && (this._getMax(this.getCenter(), this.getExtent(), t), 
            this._setUpdateFlag(2, !1)), t;
        }, e.setCenter = function(t) {
            t !== this._center && t.cloneTo(this._center), this._setUpdateFlag(3, !0), this._setUpdateFlag(4, !1);
        }, e.getCenter = function() {
            return this._getUpdateFlag(4) && (this._getCenter(this.getMin(), this.getMax(), this._center), 
            this._setUpdateFlag(4, !1)), this._center;
        }, e.setExtent = function(t) {
            t !== this._extent && t.cloneTo(this._extent), this._setUpdateFlag(3, !0), this._setUpdateFlag(8, !1);
        }, e.getExtent = function() {
            return this._getUpdateFlag(8) && (this._getExtent(this.getMin(), this.getMax(), this._extent), 
            this._setUpdateFlag(8, !1)), this._extent;
        }, e._getUpdateFlag = function(t) {
            return 0 != (this._updateFlag & t);
        }, e._setUpdateFlag = function(t, e) {
            e ? this._updateFlag |= t : this._updateFlag &= ~t;
        }, e._getCenter = function(t, e, n) {
            Tt.add(t, e, n), Tt.scale(n, .5, n);
        }, e._getExtent = function(t, e, n) {
            Tt.subtract(e, t, n), Tt.scale(n, .5, n);
        }, e._getMin = function(t, e, n) {
            Tt.subtract(t, e, n);
        }, e._getMax = function(t, e, n) {
            Tt.add(t, e, n);
        }, e._rotateExtents = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.elements;
            n.x = Math.abs(o[0] * i) + Math.abs(o[4] * r) + Math.abs(o[8] * a), n.y = Math.abs(o[1] * i) + Math.abs(o[5] * r) + Math.abs(o[9] * a), 
            n.z = Math.abs(o[2] * i) + Math.abs(o[6] * r) + Math.abs(o[10] * a);
        }, e._tranform = function(t, e) {
            var n = e._center, i = e._extent;
            Tt.transformCoordinate(this.getCenter(), t, n), this._rotateExtents(this.getExtent(), t, i), 
            e._boundBox.setCenterAndExtent(n, i), e._updateFlag = 0;
        }, e._getBoundBox = function() {
            var t = this._boundBox.min;
            this._getUpdateFlag(1) && (this._getMin(this.getCenter(), this.getExtent(), t), 
            this._setUpdateFlag(1, !1));
            var e = this._boundBox.max;
            return this._getUpdateFlag(2) && (this._getMax(this.getCenter(), this.getExtent(), e), 
            this._setUpdateFlag(2, !1)), this._boundBox;
        }, e.cloneTo = function(t) {
            var e = t;
            this.getMin().cloneTo(e._boundBox.min), this.getMax().cloneTo(e._boundBox.max), 
            this.getCenter().cloneTo(e._center), this.getExtent().cloneTo(e._extent), e._updateFlag = 0;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, t._UPDATE_MIN = 1, t._UPDATE_MAX = 2, t._UPDATE_CENTER = 4, t._UPDATE_EXTENT = 8, 
        t;
    }(), De = function() {
        function t() {
            this._type = 0, this._constant = NaN, this._constantMin = NaN, this._constantMax = NaN;
        }
        r(t, "laya.d3.core.particleShuriKen.module.StartFrame");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            e._type = this._type, e._constant = this._constant, e._constantMin = this._constantMin, 
            e._constantMax = this._constantMax;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "constant", function() {
            return this._constant;
        }), a(0, e, "type", function() {
            return this._type;
        }), a(0, e, "constantMin", function() {
            return this._constantMin;
        }), a(0, e, "constantMax", function() {
            return this._constantMax;
        }), t.createByConstant = function(e) {
            var n = new t();
            return n._type = 0, n._constant = e, n;
        }, t.createByRandomTwoConstant = function(e, n) {
            var i = new t();
            return i._type = 1, i._constantMin = e, i._constantMax = n, i;
        }, t;
    }(), Ie = function() {
        function t(t, e, n, i) {
            this._children = [], this.transform = new je(this, t, e, n, i);
        }
        r(t, "laya.d3.animation.AnimationNode");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.addChild = function(t) {
            t._parent = this, t.transform.setParent(this.transform), this._children.push(t);
        }, e.removeChild = function(t) {
            var e = this._children.indexOf(t);
            -1 !== e && this._children.splice(e, 1);
        }, e.getChildByName = function(t) {
            for (var e = 0, n = this._children.length; e < n; e++) {
                var i = this._children[e];
                if (i.name === t) return i;
            }
            return null;
        }, e.getChildByIndex = function(t) {
            return this._children[t];
        }, e.getChildCount = function() {
            return this._children.length;
        }, e.cloneTo = function(t) {
            var e = t;
            e.name = this.name;
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n], a = r.clone();
                e.addChild(a);
                var o = r.transform, s = a.transform, l = s.localPosition, h = s.localRotation, u = s.localScale;
                o.localPosition.cloneTo(l), o.localRotation.cloneTo(h), o.localScale.cloneTo(u), 
                s.localPosition = l, s.localRotation = h, s.localScale = u;
            }
        }, e.clone = function() {
            var e = new t();
            return this.cloneTo(e), e;
        }, e._cloneNative = function(e, n, i, r, a, o, s) {
            var l = s._nativeCurCloneCount;
            a[l] = o;
            var h = new t(new Float32Array(e.buffer, 3 * l * 4, 3), new Float32Array(n.buffer, 4 * l * 4, 4), new Float32Array(i.buffer, 3 * l * 4, 3), new Float32Array(r.buffer, 16 * l * 4, 16));
            return h._worldMatrixIndex = l, this._cloneToNative(h, e, n, i, r, a, l, s), h;
        }, e._cloneToNative = function(t, e, n, i, r, a, o, s) {
            var l = t;
            l.name = this.name;
            for (var h = 0, u = this._children.length; h < u; h++) {
                var c = this._children[h];
                s._nativeCurCloneCount++;
                var _ = c._cloneNative(e, n, i, r, a, o, s);
                l.addChild(_);
                var d = c.transform, f = _.transform, m = f.localPosition, p = f.localRotation, T = f.localScale;
                d.localPosition.cloneTo(m), d.localRotation.cloneTo(p), d.localScale.cloneTo(T), 
                f.localPosition = m, f.localRotation = p, f.localScale = T;
            }
        }, t;
    }(), Re = function() {
        function t() {
            this._context = null, this._compositeShader = Vt.find("PostProcessComposite"), this._compositeShaderData = new ut(), 
            this._compositeDefineData = new Ut(), this._effects = [], this._context = new se(), 
            this._context.compositeShaderData = this._compositeShaderData, this._context.compositeDefineData = this._compositeDefineData;
        }
        r(t, "laya.d3.component.PostProcess");
        var e = t.prototype;
        return e._init = function(t, e) {
            this._context.camera = t, this._context.command = e;
        }, e._render = function() {
            var t = pi.getTemporary(J.clientWidth, J.clientHeight, 0, 3), e = this._context.camera.getRenderTexture();
            this._context.command.clear(), this._context.source = t, this._context.destination = e;
            for (var n = 0, i = this._effects.length; n < i; n++) this._effects[n].render(this._context);
            pi.setReleaseTemporary(t);
            var r = this._context.tempRenderTextures;
            for (n = 0, i = r.length; n < i; n++) pi.setReleaseTemporary(r[n]);
        }, e.addEffect = function(t) {
            this._effects.push(t);
        }, e.removeEffect = function(t) {
            var e = this._effects.indexOf(t);
            -1 !== e && this._effects.splice(e, 1);
        }, t.__init__ = function() {
            t.SHADERDEFINE_BLOOM_LOW = t.shaderDefines.registerDefine("BLOOM_LOW"), t.SHADERDEFINE_BLOOM = t.shaderDefines.registerDefine("BLOOM");
        }, t.SHADERDEFINE_BLOOM_LOW = 0, t.SHADERDEFINE_BLOOM = 0, i(t, [ "SHADERVALUE_MAINTEX", function() {
            return this.SHADERVALUE_MAINTEX = Vt.propertyNameToID("u_MainTex");
        }, "SHADERVALUE_BLOOMTEX", function() {
            return this.SHADERVALUE_BLOOMTEX = Vt.propertyNameToID("u_BloomTex");
        }, "SHADERVALUE_AUTOEXPOSURETEX", function() {
            return this.SHADERVALUE_AUTOEXPOSURETEX = Vt.propertyNameToID("u_AutoExposureTex");
        }, "SHADERVALUE_BLOOM_DIRTTEX", function() {
            return this.SHADERVALUE_BLOOM_DIRTTEX = Vt.propertyNameToID("u_Bloom_DirtTex");
        }, "SHADERVALUE_BLOOMTEX_TEXELSIZE", function() {
            return this.SHADERVALUE_BLOOMTEX_TEXELSIZE = Vt.propertyNameToID("u_BloomTex_TexelSize");
        }, "SHADERVALUE_BLOOM_DIRTTILEOFFSET", function() {
            return this.SHADERVALUE_BLOOM_DIRTTILEOFFSET = Vt.propertyNameToID("u_Bloom_DirtTileOffset");
        }, "SHADERVALUE_BLOOM_SETTINGS", function() {
            return this.SHADERVALUE_BLOOM_SETTINGS = Vt.propertyNameToID("u_Bloom_Settings");
        }, "SHADERVALUE_BLOOM_COLOR", function() {
            return this.SHADERVALUE_BLOOM_COLOR = Vt.propertyNameToID("u_Bloom_Color");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt();
        } ]), t;
    }(), Me = function() {
        function t(t, e, n, i) {
            this.minDepth = 0, this.maxDepth = 1, this.x = t, this.y = e, this.width = n, this.height = i;
        }
        r(t, "laya.d3.math.Viewport");
        var e = t.prototype;
        return e.project = function(t, e, n) {
            Tt.transformV3ToV3(t, e, n);
            var i = e.elements, r = t.x * i[3] + t.y * i[7] + t.z * i[11] + i[15];
            1 !== r && (n.x = n.x / r, n.y = n.y / r, n.z = n.z / r), n.x = .5 * (n.x + 1) * this.width + this.x, 
            n.y = .5 * (1 - n.y) * this.height + this.y, n.z = n.z * (this.maxDepth - this.minDepth) + this.minDepth;
        }, e.project1 = function(t, e, n) {
            var i = Tt._tempVector4;
            Tt.transformV3ToV4(t, e, i);
            var r = i.w;
            r < .1 && r > -1e-6 && (r = 1e-6), i.x /= r, i.y /= r, i.z /= r, n.x = (i.x + 1) * this.width / 2 + this.x, 
            n.y = (1 - i.y) * this.height / 2 + this.y, n.z = i.w;
        }, e.unprojectFromMat = function(t, e, n) {
            var i = e.elements;
            n.x = (t.x - this.x) / this.width * 2 - 1, n.y = -((t.y - this.y) / this.height * 2 - 1);
            var r = (this.maxDepth - this.minDepth) / 2;
            n.z = (t.z - this.minDepth - r) / r;
            var a = n.x * i[3] + n.y * i[7] + n.z * i[11] + i[15];
            Tt.transformV3ToV3(n, e, n), 1 !== a && (n.x = n.x / a, n.y = n.y / a, n.z = n.z / a);
        }, e.unprojectFromWVP = function(e, n, i, r, a) {
            He.multiply(n, i, t._tempMatrix4x4), r && He.multiply(t._tempMatrix4x4, r, t._tempMatrix4x4), 
            t._tempMatrix4x4.invert(t._tempMatrix4x4), this.unprojectFromMat(e, t._tempMatrix4x4, a);
        }, e.cloneTo = function(t) {
            t.x = this.x, t.y = this.y, t.width = this.width, t.height = this.height, t.minDepth = this.minDepth, 
            t.maxDepth = this.maxDepth;
        }, i(t, [ "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new He();
        } ]), t;
    }(), Ae = function() {
        function t() {
            this.diffuseTexture = null, this.normalTexture = null, this.scale = null, this.offset = null;
        }
        return r(t, "laya.d3.terrain.unit.DetailTextureInfo"), t;
    }(), Ce = (function() {
        function t(t, e) {
            this.extents = null, this.transformation = null, this.extents = t, this.transformation = e;
        }
        r(t, "laya.d3.math.OrientedBoundBox");
        var e = t.prototype;
        e.getCorners = function(e) {
            t._tempV30.x = this.extents.x, t._tempV30.y = t._tempV30.z = 0, t._tempV31.y = this.extents.y, 
            t._tempV31.x = t._tempV31.z = 0, t._tempV32.z = this.extents.z, t._tempV32.x = t._tempV32.y = 0, 
            Tt.TransformNormal(t._tempV30, this.transformation, t._tempV30), Tt.TransformNormal(t._tempV31, this.transformation, t._tempV31), 
            Tt.TransformNormal(t._tempV32, this.transformation, t._tempV32);
            var n = t._tempV33;
            this.transformation.getTranslationVector(n), e.length = 8, Tt.add(n, t._tempV30, t._tempV34), 
            Tt.add(t._tempV34, t._tempV31, t._tempV34), Tt.add(t._tempV34, t._tempV32, e[0]), 
            Tt.add(n, t._tempV30, t._tempV34), Tt.add(t._tempV34, t._tempV31, t._tempV34), Tt.subtract(t._tempV34, t._tempV32, e[1]), 
            Tt.subtract(n, t._tempV30, t._tempV34), Tt.add(t._tempV34, t._tempV31, t._tempV34), 
            Tt.subtract(t._tempV34, t._tempV32, e[2]), Tt.subtract(n, t._tempV30, t._tempV34), 
            Tt.add(t._tempV34, t._tempV31, t._tempV34), Tt.add(t._tempV34, t._tempV32, e[3]), 
            Tt.add(n, t._tempV30, t._tempV34), Tt.subtract(t._tempV34, t._tempV31, t._tempV34), 
            Tt.add(t._tempV34, t._tempV32, e[4]), Tt.add(n, t._tempV30, t._tempV34), Tt.subtract(t._tempV34, t._tempV31, t._tempV34), 
            Tt.subtract(t._tempV34, t._tempV32, e[5]), Tt.subtract(n, t._tempV30, t._tempV34), 
            Tt.subtract(t._tempV34, t._tempV31, t._tempV34), Tt.subtract(t._tempV34, t._tempV32, e[6]), 
            Tt.subtract(n, t._tempV30, t._tempV34), Tt.subtract(t._tempV34, t._tempV31, t._tempV34), 
            Tt.add(t._tempV34, t._tempV32, e[7]);
        }, e.transform = function(t) {
            He.multiply(this.transformation, t, this.transformation);
        }, e.scale = function(t) {
            Tt.multiply(this.extents, t, this.extents);
        }, e.translate = function(e) {
            this.transformation.getTranslationVector(t._tempV30), Tt.add(t._tempV30, e, t._tempV31), 
            this.transformation.setTranslationVector(t._tempV31);
        }, e.Size = function(t) {
            Tt.scale(this.extents, 2, t);
        }, e.getSize = function(e) {
            t._tempV30.x = this.extents.x, t._tempV31.y = this.extents.y, t._tempV32.z = this.extents.z, 
            Tt.TransformNormal(t._tempV30, this.transformation, t._tempV30), Tt.TransformNormal(t._tempV31, this.transformation, t._tempV31), 
            Tt.TransformNormal(t._tempV31, this.transformation, t._tempV32), e.x = Tt.scalarLength(t._tempV30), 
            e.y = Tt.scalarLength(t._tempV31), e.z = Tt.scalarLength(t._tempV32);
        }, e.getSizeSquared = function(e) {
            t._tempV30.x = this.extents.x, t._tempV31.y = this.extents.y, t._tempV32.z = this.extents.z, 
            Tt.TransformNormal(t._tempV30, this.transformation, t._tempV30), Tt.TransformNormal(t._tempV31, this.transformation, t._tempV31), 
            Tt.TransformNormal(t._tempV31, this.transformation, t._tempV32), e.x = Tt.scalarLengthSquared(t._tempV30), 
            e.y = Tt.scalarLengthSquared(t._tempV31), e.z = Tt.scalarLengthSquared(t._tempV32);
        }, e.getCenter = function(t) {
            this.transformation.getTranslationVector(t);
        }, e.containsPoint = function(e) {
            var n = this.extents.x, i = this.extents.y, r = this.extents.z;
            this.transformation.invert(t._tempM0), Tt.transformCoordinate(e, t._tempM0, t._tempV30);
            var a = Math.abs(t._tempV30.x), o = Math.abs(t._tempV30.y), s = Math.abs(t._tempV30.z);
            return it.nearEqual(a, n) && it.nearEqual(o, i) && it.nearEqual(s, r) ? 2 : a < n && o < i && s < r ? 1 : 0;
        }, e.containsPoints = function(e) {
            var n = this.extents.x, i = this.extents.y, r = this.extents.z;
            this.transformation.invert(t._tempM0);
            for (var a = !0, o = !1, s = 0; s < e.length; s++) {
                Tt.transformCoordinate(e[s], t._tempM0, t._tempV30);
                var l = Math.abs(t._tempV30.x), h = Math.abs(t._tempV30.y), u = Math.abs(t._tempV30.z);
                it.nearEqual(l, n) && it.nearEqual(h, i) && it.nearEqual(u, r) && (o = !0), l < n && h < i && u < r ? o = !0 : a = !1;
            }
            return a ? 1 : o ? 2 : 0;
        }, e.containsSphere = function(e, n) {
            void 0 === n && (n = !1);
            var i = this.extents.x, r = this.extents.y, a = this.extents.z, o = e.radius;
            this.transformation.invert(t._tempM0), Tt.transformCoordinate(e.center, t._tempM0, t._tempV30);
            var s = NaN;
            if (n ? s = o : (Tt.scale(Tt._UnitX, o, t._tempV31), Tt.TransformNormal(t._tempV31, t._tempM0, t._tempV31), 
            s = Tt.scalarLength(t._tempV31)), Tt.scale(this.extents, -1, t._tempV32), Tt.Clamp(t._tempV30, t._tempV32, this.extents, t._tempV33), 
            Tt.distanceSquared(t._tempV30, t._tempV33) > s * s) return 0;
            var l = t._tempV30.x, h = t._tempV30.y, u = t._tempV30.z, c = t._tempV32.x, _ = t._tempV32.y, d = t._tempV32.z;
            return c + s <= l && l <= i - s && i - c > s && _ + s <= h && h <= r - s && r - _ > s && d + s <= u && u <= a - s && a - d > s ? 1 : 2;
        }, e.containsOrientedBoundBox = function(e) {
            var n = 0, i = 0;
            e.getCorners(t._corners);
            var r = this.containsPoints(t._corners);
            if (0 != r) return r;
            t._sizeAe[0] = this.extents.x, t._sizeAe[1] = this.extents.y, t._sizeAe[2] = this.extents.z, 
            e.extents.cloneTo(t._tempV35), t._sizeBe[0] = t._tempV35.x, t._sizeBe[1] = t._tempV35.y, 
            t._sizeBe[2] = t._tempV35.z, t._getRows(this.transformation, t._rows1), t._getRows(e.transformation, t._rows2);
            var a = NaN, o = NaN, s = NaN;
            for (n = 0; n < 4; n++) for (i = 0; i < 4; i++) 3 == n || 3 == i ? (t._tempM0.setElementByRowColumn(n, i, 0), 
            t._tempM1.setElementByRowColumn(n, i, 0)) : (s = Tt.dot(t._rows1[n], t._rows2[i]), 
            t._tempM0.setElementByRowColumn(n, i, s), t._tempM1.setElementByRowColumn(n, i, Math.abs(s)));
            for (e.getCenter(t._tempV34), this.getCenter(t._tempV36), Tt.subtract(t._tempV34, t._tempV36, t._tempV30), 
            t._tempV31.x = Tt.dot(t._tempV30, t._rows1[0]), t._tempV31.y = Tt.dot(t._tempV30, t._rows1[1]), 
            t._tempV31.z = Tt.dot(t._tempV30, t._rows1[2]), t._vsepAe[0] = t._tempV31.x, t._vsepAe[1] = t._tempV31.y, 
            t._vsepAe[2] = t._tempV31.z, n = 0; n < 3; n++) if (t._tempV32.x = t._tempM1.getElementByRowColumn(n, 0), 
            t._tempV32.y = t._tempM1.getElementByRowColumn(n, 1), t._tempV32.z = t._tempM1.getElementByRowColumn(n, 2), 
            a = t._sizeAe[n], o = Tt.dot(t._tempV35, t._tempV32), Math.abs(t._vsepAe[n]) > a + o) return 0;
            for (i = 0; i < 3; i++) if (t._tempV32.x = t._tempM1.getElementByRowColumn(0, i), 
            t._tempV32.y = t._tempM1.getElementByRowColumn(1, i), t._tempV32.z = t._tempM1.getElementByRowColumn(2, i), 
            t._tempV33.x = t._tempM0.getElementByRowColumn(0, i), t._tempV33.y = t._tempM0.getElementByRowColumn(1, i), 
            t._tempV33.z = t._tempM0.getElementByRowColumn(2, i), a = Tt.dot(this.extents, t._tempV32), 
            o = t._sizeBe[i], Math.abs(Tt.dot(t._tempV31, t._tempV33)) > a + o) return 0;
            for (n = 0; n < 3; n++) for (i = 0; i < 3; i++) {
                var l = (n + 1) % 3, h = (n + 2) % 3, u = (i + 1) % 3, c = (i + 2) % 3;
                if (a = t._sizeAe[l] * t._tempM1.getElementByRowColumn(h, i) + t._sizeAe[h] * t._tempM1.getElementByRowColumn(l, i), 
                o = t._sizeBe[u] * t._tempM1.getElementByRowColumn(n, c) + t._sizeBe[c] * t._tempM1.getElementByRowColumn(n, u), 
                Math.abs(t._vsepAe[h] * t._tempM0.getElementByRowColumn(l, i) - t._vsepAe[l] * t._tempM0.getElementByRowColumn(h, i)) > a + o) return 0;
            }
            return 2;
        }, e.containsLine = function(e, n) {
            t._corners[0] = e, t._corners[1] = n;
            var i = this.containsPoints(t._corners);
            if (0 != i) return i;
            var r = this.extents.x, a = this.extents.y, o = this.extents.z;
            this.transformation.invert(t._tempM0), Tt.transformCoordinate(e, t._tempM0, t._tempV30), 
            Tt.transformCoordinate(n, t._tempM0, t._tempV31), Tt.add(t._tempV30, t._tempV31, t._tempV32), 
            Tt.scale(t._tempV32, .5, t._tempV32), Tt.subtract(t._tempV30, t._tempV32, t._tempV33);
            var s = t._tempV33.x, l = t._tempV33.y, h = t._tempV33.z, u = t._tempV34.x = Math.abs(t._tempV33.x), c = t._tempV34.y = Math.abs(t._tempV33.y), _ = t._tempV34.z = Math.abs(t._tempV33.z), d = t._tempV32.x, f = t._tempV32.y, m = t._tempV32.z;
            return Math.abs(d) > r + u ? 0 : Math.abs(f) > a + c ? 0 : Math.abs(m) > o + _ ? 0 : Math.abs(f * h - m * l) > a * _ + o * c ? 0 : Math.abs(d * h - m * s) > r * _ + o * u ? 0 : Math.abs(d * l - f * s) > r * c + a * u ? 0 : 2;
        }, e.containsBoundBox = function(e) {
            var n = 0, i = 0, r = e.min, a = e.max;
            e.getCorners(t._corners);
            var o = this.containsPoints(t._corners);
            if (0 != o) return o;
            Tt.subtract(a, r, t._tempV30), Tt.scale(t._tempV30, .5, t._tempV30), Tt.add(r, t._tempV30, t._tempV30), 
            Tt.subtract(a, t._tempV30, t._tempV31), t._sizeAe[0] = this.extents.x, t._sizeAe[1] = this.extents.y, 
            t._sizeAe[2] = this.extents.z, t._sizeBe[0] = t._tempV31.x, t._sizeBe[1] = t._tempV31.y, 
            t._sizeBe[2] = t._tempV31.z, t._getRows(this.transformation, t._rows1), this.transformation.invert(t._tempM0);
            var s = NaN, l = NaN;
            for (n = 0; n < 3; n++) for (i = 0; i < 3; i++) t._tempM1.setElementByRowColumn(n, i, Math.abs(t._tempM0.getElementByRowColumn(n, i)));
            for (this.getCenter(t._tempV35), Tt.subtract(t._tempV30, t._tempV35, t._tempV32), 
            t._tempV31.x = Tt.dot(t._tempV32, t._rows1[0]), t._tempV31.y = Tt.dot(t._tempV32, t._rows1[1]), 
            t._tempV31.z = Tt.dot(t._tempV32, t._rows1[2]), t._vsepAe[0] = t._tempV31.x, t._vsepAe[1] = t._tempV31.y, 
            t._vsepAe[2] = t._tempV31.z, n = 0; n < 3; n++) if (t._tempV33.x = t._tempM1.getElementByRowColumn(n, 0), 
            t._tempV33.y = t._tempM1.getElementByRowColumn(n, 1), t._tempV33.z = t._tempM1.getElementByRowColumn(n, 2), 
            s = t._sizeAe[n], l = Tt.dot(t._tempV31, t._tempV33), Math.abs(t._vsepAe[n]) > s + l) return 0;
            for (i = 0; i < 3; i++) if (t._tempV33.x = t._tempM1.getElementByRowColumn(0, i), 
            t._tempV33.y = t._tempM1.getElementByRowColumn(1, i), t._tempV33.z = t._tempM1.getElementByRowColumn(2, i), 
            t._tempV34.x = t._tempM0.getElementByRowColumn(0, i), t._tempV34.y = t._tempM0.getElementByRowColumn(1, i), 
            t._tempV34.z = t._tempM0.getElementByRowColumn(2, i), s = Tt.dot(this.extents, t._tempV33), 
            l = t._sizeBe[i], Math.abs(Tt.dot(t._tempV31, t._tempV34)) > s + l) return 0;
            for (n = 0; n < 3; n++) for (i = 0; i < 3; i++) {
                var h = (n + 1) % 3, u = (n + 2) % 3, c = (i + 1) % 3, _ = (i + 2) % 3;
                if (s = t._sizeAe[h] * t._tempM1.getElementByRowColumn(u, i) + t._sizeAe[u] * t._tempM1.getElementByRowColumn(h, i), 
                l = t._sizeBe[c] * t._tempM1.getElementByRowColumn(n, _) + t._sizeBe[_] * t._tempM1.getElementByRowColumn(n, c), 
                Math.abs(t._vsepAe[u] * t._tempM0.getElementByRowColumn(h, i) - t._vsepAe[h] * t._tempM0.getElementByRowColumn(u, i)) > s + l) return 0;
            }
            return 2;
        }, e.intersectsRay = function(e, n) {
            Tt.scale(this.extents, -1, t._tempV30), this.transformation.invert(t._tempM0), Tt.TransformNormal(e.direction, t._tempM0, t._ray.direction), 
            Tt.transformCoordinate(e.origin, t._tempM0, t._ray.origin), t._boxBound1.min = t._tempV30, 
            t._boxBound1.max = this.extents;
            var i = Fe.intersectsRayAndBoxRP(t._ray, t._boxBound1, n);
            return -1 !== i && Tt.transformCoordinate(n, this.transformation, n), i;
        }, e._getLocalCorners = function(e) {
            e.length = 8, t._tempV30.x = this.extents.x, t._tempV31.y = this.extents.y, t._tempV32.z = this.extents.z, 
            Tt.add(t._tempV30, t._tempV31, t._tempV33), Tt.add(t._tempV33, t._tempV32, e[0]), 
            Tt.add(t._tempV30, t._tempV31, t._tempV33), Tt.subtract(t._tempV33, t._tempV32, e[1]), 
            Tt.subtract(t._tempV31, t._tempV30, t._tempV33), Tt.subtract(t._tempV33, t._tempV30, e[2]), 
            Tt.subtract(t._tempV31, t._tempV30, t._tempV33), Tt.add(t._tempV33, t._tempV32, e[3]), 
            Tt.subtract(t._tempV30, t._tempV31, t._tempV33), Tt.add(t._tempV33, t._tempV32, e[4]), 
            Tt.subtract(t._tempV30, t._tempV31, t._tempV33), Tt.subtract(t._tempV33, t._tempV32, e[5]), 
            Tt.scale(e[0], -1, e[6]), Tt.subtract(t._tempV32, t._tempV30, t._tempV33), Tt.subtract(t._tempV33, t._tempV31, e[7]);
        }, e.equals = function(t) {
            return this.extents == t.extents && this.transformation == t.transformation;
        }, e.cloneTo = function(t) {
            var e = t;
            this.extents.cloneTo(e.extents), this.transformation.cloneTo(e.transformation);
        }, t.createByBoundBox = function(e, n) {
            var i = e.min, r = e.max;
            Tt.subtract(r, i, t._tempV30), Tt.scale(t._tempV30, .5, t._tempV30), Tt.add(i, t._tempV30, t._tempV31), 
            Tt.subtract(r, t._tempV31, t._tempV32), He.translation(t._tempV31, t._tempM0);
            var a = t._tempV32.clone(), o = t._tempM0.clone();
            n.extents = a, n.transformation = o;
        }, t.createByMinAndMaxVertex = function(e, n) {
            return Tt.subtract(n, e, t._tempV30), Tt.scale(t._tempV30, .5, t._tempV30), Tt.add(e, t._tempV30, t._tempV31), 
            Tt.subtract(n, t._tempV31, t._tempV32), He.translation(t._tempV31, t._tempM0), new t(t._tempV32, t._tempM0);
        }, t._getRows = function(t, e) {
            e.length = 3;
            var n = t.elements;
            e[0].x = n[0], e[0].y = n[1], e[0].z = n[2], e[1].x = n[4], e[1].y = n[5], e[1].z = n[6], 
            e[2].x = n[8], e[2].y = n[9], e[2].z = n[10];
        }, t.getObbtoObbMatrix4x4 = function(e, n, i, r) {
            var a = e.transformation, o = n.transformation;
            if (i) {
                t._getRows(a, t._rows1), t._getRows(o, t._rows2);
                for (var s = 0; s < 3; s++) for (var l = 0; l < 3; l++) r.setElementByRowColumn(s, l, Tt.dot(t._rows2[s], t._rows1[l]));
                n.getCenter(t._tempV30), e.getCenter(t._tempV31), Tt.subtract(t._tempV30, t._tempV31, t._tempV32);
                var h = r.elements;
                h[12] = Tt.dot(t._tempV32, t._rows1[0]), h[13] = Tt.dot(t._tempV32, t._rows1[1]), 
                h[14] = Tt.dot(t._tempV32, t._rows1[2]), h[15] = 1;
            } else a.invert(t._tempM0), He.multiply(o, t._tempM0, r);
        }, t.merge = function(e, n, i) {
            var r = e.extents, a = e.transformation;
            t.getObbtoObbMatrix4x4(e, n, i, t._tempM0), n._getLocalCorners(t._corners), Tt.transformCoordinate(t._corners[0], t._tempM0, t._corners[0]), 
            Tt.transformCoordinate(t._corners[1], t._tempM0, t._corners[1]), Tt.transformCoordinate(t._corners[2], t._tempM0, t._corners[2]), 
            Tt.transformCoordinate(t._corners[3], t._tempM0, t._corners[3]), Tt.transformCoordinate(t._corners[4], t._tempM0, t._corners[4]), 
            Tt.transformCoordinate(t._corners[5], t._tempM0, t._corners[5]), Tt.transformCoordinate(t._corners[6], t._tempM0, t._corners[6]), 
            Tt.transformCoordinate(t._corners[7], t._tempM0, t._corners[7]), Tt.scale(r, -1, t._boxBound1.min), 
            r.cloneTo(t._boxBound1.max), ze.createfromPoints(t._corners, t._boxBound2), ze.merge(t._boxBound2, t._boxBound1, t._boxBound3);
            var o = t._boxBound3.min, s = t._boxBound3.max;
            Tt.subtract(s, o, t._tempV30), Tt.scale(t._tempV30, .5, t._tempV30), Tt.add(o, t._tempV30, t._tempV32), 
            Tt.subtract(s, t._tempV32, r), Tt.transformCoordinate(t._tempV32, a, t._tempV33);
        }, i(t, [ "_tempV30", function() {
            return this._tempV30 = new Tt();
        }, "_tempV31", function() {
            return this._tempV31 = new Tt();
        }, "_tempV32", function() {
            return this._tempV32 = new Tt();
        }, "_tempV33", function() {
            return this._tempV33 = new Tt();
        }, "_tempV34", function() {
            return this._tempV34 = new Tt();
        }, "_tempV35", function() {
            return this._tempV35 = new Tt();
        }, "_tempV36", function() {
            return this._tempV36 = new Tt();
        }, "_tempM0", function() {
            return this._tempM0 = new He();
        }, "_tempM1", function() {
            return this._tempM1 = new He();
        }, "_corners", function() {
            return this._corners = [ new Tt(), new Tt(), new Tt(), new Tt(), new Tt(), new Tt(), new Tt(), new Tt() ];
        }, "_rows1", function() {
            return this._rows1 = [ new Tt(), new Tt(), new Tt() ];
        }, "_rows2", function() {
            return this._rows2 = [ new Tt(), new Tt(), new Tt() ];
        }, "_ray", function() {
            return this._ray = new j(new Tt(), new Tt());
        }, "_boxBound1", function() {
            return this._boxBound1 = new ze(new Tt(), new Tt());
        }, "_boxBound2", function() {
            return this._boxBound2 = new ze(new Tt(), new Tt());
        }, "_boxBound3", function() {
            return this._boxBound3 = new ze(new Tt(), new Tt());
        }, "_vsepAe", function() {
            return this._vsepAe = new Float32Array();
        }, "_sizeBe", function() {
            return this._sizeBe = new Float32Array();
        }, "_sizeAe", function() {
            return this._sizeAe = new Float32Array();
        } ]);
    }(), function() {
        function t(t) {
            void 0 === t && (t = !1), this.isTransparent = t, this.elements = [];
        }
        r(t, "laya.d3.core.render.RenderQueue");
        var e = t.prototype;
        return e._compare = function(t, e) {
            var n = t.material.renderQueue - e.material.renderQueue;
            return 0 === n ? (this.isTransparent ? e.render._distanceForSort - t.render._distanceForSort : t.render._distanceForSort - e.render._distanceForSort) + e.render.sortingFudge - t.render.sortingFudge : n;
        }, e._partitionRenderObject = function(t, e) {
            for (var n = this.elements[Math.floor((e + t) / 2)]; t <= e; ) {
                for (;this._compare(this.elements[t], n) < 0; ) t++;
                for (;this._compare(this.elements[e], n) > 0; ) e--;
                if (t < e) {
                    var i = this.elements[t];
                    this.elements[t] = this.elements[e], this.elements[e] = i, t++, e--;
                } else if (t === e) {
                    t++;
                    break;
                }
            }
            return t;
        }, e._quickSort = function(t, e) {
            if (this.elements.length > 1) {
                var n = this._partitionRenderObject(t, e), i = n - 1;
                t < i && this._quickSort(t, i), n < e && this._quickSort(n, e);
            }
        }, e._render = function(t, e, n, i) {
            for (var r = 0, a = this.elements.length; r < a; r++) this.elements[r]._render(t, e, n, i);
        }, e.clear = function() {
            this.elements.length = 0, this.lastTransparentRenderElement = null, this.lastTransparentBatched = !1;
        }, t;
    }()), Le = (function() {
        function t() {}
        r(t, "laya.d3.core.TextureMode"), t.Stretch = 0, t.Tile = 1;
    }(), function() {
        r(function() {}, "laya.d3.physics.shape.HeightfieldColliderShape");
    }(), function() {
        function t() {}
        return r(t, "laya.d3.core.particleShuriKen.module.shape.ShapeUtils"), t._randomPointUnitArcCircle = function(t, e, n) {
            var i = NaN;
            i = n ? n.getFloat() * t : Math.random() * t, e.x = Math.cos(i), e.y = Math.sin(i);
        }, t._randomPointInsideUnitArcCircle = function(e, n, i) {
            t._randomPointUnitArcCircle(e, n, i);
            var r = NaN;
            r = i ? Math.pow(i.getFloat(), .5) : Math.pow(Math.random(), .5), n.x = n.x * r, 
            n.y = n.y * r;
        }, t._randomPointUnitCircle = function(t, e) {
            var n = NaN;
            n = e ? e.getFloat() * Math.PI * 2 : Math.random() * Math.PI * 2, t.x = Math.cos(n), 
            t.y = Math.sin(n);
        }, t._randomPointInsideUnitCircle = function(e, n) {
            t._randomPointUnitCircle(e);
            var i = NaN;
            i = n ? Math.pow(n.getFloat(), .5) : Math.pow(Math.random(), .5), e.x = e.x * i, 
            e.y = e.y * i;
        }, t._randomPointUnitSphere = function(t, e) {
            var n = NaN, i = NaN;
            e ? (n = t.z = 2 * e.getFloat() - 1, i = e.getFloat() * Math.PI * 2) : (n = t.z = 2 * Math.random() - 1, 
            i = Math.random() * Math.PI * 2);
            var r = Math.sqrt(1 - n * n);
            t.x = r * Math.cos(i), t.y = r * Math.sin(i);
        }, t._randomPointInsideUnitSphere = function(e, n) {
            t._randomPointUnitSphere(e);
            var i = NaN;
            i = n ? Math.pow(n.getFloat(), 1 / 3) : Math.pow(Math.random(), 1 / 3), e.x = e.x * i, 
            e.y = e.y * i, e.z = e.z * i;
        }, t._randomPointInsideHalfUnitBox = function(t, e) {
            e ? (t.x = e.getFloat() - .5, t.y = e.getFloat() - .5, t.z = e.getFloat() - .5) : (t.x = Math.random() - .5, 
            t.y = Math.random() - .5, t.z = Math.random() - .5);
        }, t;
    }()), Oe = function() {
        function t() {}
        return r(t, "laya.d3.graphics.VertexElementFormat"), t.getElementInfos = function(e) {
            var n = t._elementInfos[e];
            if (n) return n;
            throw "VertexElementFormat: this vertexElementFormat is not implement.";
        }, t.Single = "single", t.Vector2 = "vector2", t.Vector3 = "vector3", t.Vector4 = "vector4", 
        t.Color = "color", t.Byte4 = "byte4", t.Short2 = "short2", t.Short4 = "short4", 
        t.NormalizedShort2 = "normalizedshort2", t.NormalizedShort4 = "normalizedshort4", 
        t.HalfVector2 = "halfvector2", t.HalfVector4 = "halfvector4", i(t, [ "_elementInfos", function() {
            return this._elementInfos = {
                single: [ 1, 5126, 0 ],
                vector2: [ 2, 5126, 0 ],
                vector3: [ 3, 5126, 0 ],
                vector4: [ 4, 5126, 0 ],
                color: [ 4, 5126, 0 ],
                byte4: [ 4, 5121, 0 ],
                short2: [ 2, 5126, 0 ],
                short4: [ 4, 5126, 0 ],
                normalizedshort2: [ 2, 5126, 0 ],
                normalizedshort4: [ 4, 5126, 0 ],
                halfvector2: [ 2, 5126, 0 ],
                halfvector4: [ 4, 5126, 0 ]
            };
        } ]), t;
    }(), Ne = function() {
        function t(t) {
            this._angularVelocity = null, this.enbale = !1, this._angularVelocity = t;
        }
        r(t, "laya.d3.core.particleShuriKen.module.RotationOverLifetime");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.cloneTo = function(t) {
            var e = t;
            this._angularVelocity.cloneTo(e._angularVelocity), e.enbale = this.enbale;
        }, e.clone = function() {
            var t;
            switch (this._angularVelocity.type) {
              case 0:
                t = this._angularVelocity.separateAxes ? he.createByConstantSeparate(this._angularVelocity.constantSeparate.clone()) : he.createByConstant(this._angularVelocity.constant);
                break;

              case 1:
                t = this._angularVelocity.separateAxes ? he.createByGradientSeparate(this._angularVelocity.gradientX.clone(), this._angularVelocity.gradientY.clone(), this._angularVelocity.gradientZ.clone()) : he.createByGradient(this._angularVelocity.gradient.clone());
                break;

              case 2:
                t = this._angularVelocity.separateAxes ? he.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(), this._angularVelocity.constantMaxSeparate.clone()) : he.createByRandomTwoConstant(this._angularVelocity.constantMin, this._angularVelocity.constantMax);
                break;

              case 3:
                t = this._angularVelocity.separateAxes ? he.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(), this._angularVelocity.gradientYMin.clone(), this._angularVelocity.gradientZMin.clone(), this._angularVelocity.gradientWMin.clone(), this._angularVelocity.gradientXMax.clone(), this._angularVelocity.gradientYMax.clone(), this._angularVelocity.gradientZMax.clone(), this._angularVelocity.gradientWMax.clone()) : he.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(), this._angularVelocity.gradientMax.clone());
            }
            var e = new this.constructor(t);
            return e.enbale = this.enbale, e;
        }, a(0, e, "angularVelocity", function() {
            return this._angularVelocity;
        }), t;
    }(), Ve = function() {
        function t(e) {
            this._matrix = null, this._near = null, this._far = null, this._left = null, this._right = null, 
            this._top = null, this._bottom = null, this._matrix = e, this._near = new ot(new Tt()), 
            this._far = new ot(new Tt()), this._left = new ot(new Tt()), this._right = new ot(new Tt()), 
            this._top = new ot(new Tt()), this._bottom = new ot(new Tt()), t._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
        }
        r(t, "laya.d3.math.BoundFrustum");
        var e = t.prototype;
        return e.equalsBoundFrustum = function(t) {
            return this._matrix.equalsOtherMatrix(t.matrix);
        }, e.equalsObj = function(t) {
            if (t instanceof laya.d3.math.BoundFrustum) {
                var e = t;
                return this.equalsBoundFrustum(e);
            }
            return !1;
        }, e.getPlane = function(t) {
            switch (t) {
              case 0:
                return this._near;

              case 1:
                return this._far;

              case 2:
                return this._left;

              case 3:
                return this._right;

              case 4:
                return this._top;

              case 5:
                return this._bottom;

              default:
                return null;
            }
        }, e.getCorners = function(e) {
            t._get3PlaneInterPoint(this._near, this._bottom, this._right).cloneTo(e[0]), t._get3PlaneInterPoint(this._near, this._top, this._right).cloneTo(e[1]), 
            t._get3PlaneInterPoint(this._near, this._top, this._left).cloneTo(e[2]), t._get3PlaneInterPoint(this._near, this._bottom, this._left).cloneTo(e[3]), 
            t._get3PlaneInterPoint(this._far, this._bottom, this._right).cloneTo(e[4]), t._get3PlaneInterPoint(this._far, this._top, this._right).cloneTo(e[5]), 
            t._get3PlaneInterPoint(this._far, this._top, this._left).cloneTo(e[6]), t._get3PlaneInterPoint(this._far, this._bottom, this._left).cloneTo(e[7]);
        }, e.containsPoint = function(t) {
            for (var e = ot.PlaneIntersectionType_Front, n = ot.PlaneIntersectionType_Front, i = 0; i < 6; i++) {
                switch (i) {
                  case 0:
                    n = Fe.intersectsPlaneAndPoint(this._near, t);
                    break;

                  case 1:
                    n = Fe.intersectsPlaneAndPoint(this._far, t);
                    break;

                  case 2:
                    n = Fe.intersectsPlaneAndPoint(this._left, t);
                    break;

                  case 3:
                    n = Fe.intersectsPlaneAndPoint(this._right, t);
                    break;

                  case 4:
                    n = Fe.intersectsPlaneAndPoint(this._top, t);
                    break;

                  case 5:
                    n = Fe.intersectsPlaneAndPoint(this._bottom, t);
                }
                switch (n) {
                  case ot.PlaneIntersectionType_Back:
                    return 0;

                  case ot.PlaneIntersectionType_Intersecting:
                    e = ot.PlaneIntersectionType_Intersecting;
                }
            }
            switch (e) {
              case ot.PlaneIntersectionType_Intersecting:
                return 2;

              default:
                return 1;
            }
        }, e.containsBoundBox = function(e) {
            for (var n = t._tempV30, i = t._tempV31, r = e.min, a = e.max, o = 1, s = 0; s < 6; s++) {
                var l = this.getPlane(s), h = l.normal;
                if (h.x >= 0 ? (n.x = a.x, i.x = r.x) : (n.x = r.x, i.x = a.x), h.y >= 0 ? (n.y = a.y, 
                i.y = r.y) : (n.y = r.y, i.y = a.y), h.z >= 0 ? (n.z = a.z, i.z = r.z) : (n.z = r.z, 
                i.z = a.z), Fe.intersectsPlaneAndPoint(l, n) === ot.PlaneIntersectionType_Back) return 0;
                Fe.intersectsPlaneAndPoint(l, i) === ot.PlaneIntersectionType_Back && (o = 2);
            }
            return o;
        }, e.containsBoundSphere = function(t) {
            for (var e = ot.PlaneIntersectionType_Front, n = ot.PlaneIntersectionType_Front, i = 0; i < 6; i++) {
                switch (i) {
                  case 0:
                    n = Fe.intersectsPlaneAndSphere(this._near, t);
                    break;

                  case 1:
                    n = Fe.intersectsPlaneAndSphere(this._far, t);
                    break;

                  case 2:
                    n = Fe.intersectsPlaneAndSphere(this._left, t);
                    break;

                  case 3:
                    n = Fe.intersectsPlaneAndSphere(this._right, t);
                    break;

                  case 4:
                    n = Fe.intersectsPlaneAndSphere(this._top, t);
                    break;

                  case 5:
                    n = Fe.intersectsPlaneAndSphere(this._bottom, t);
                }
                switch (n) {
                  case ot.PlaneIntersectionType_Back:
                    return 0;

                  case ot.PlaneIntersectionType_Intersecting:
                    e = ot.PlaneIntersectionType_Intersecting;
                }
            }
            switch (e) {
              case ot.PlaneIntersectionType_Intersecting:
                return 2;

              default:
                return 1;
            }
        }, a(0, e, "top", function() {
            return this._top;
        }), a(0, e, "matrix", function() {
            return this._matrix;
        }, function(e) {
            this._matrix = e, t._getPlanesFromMatrix(this._matrix, this._near, this._far, this._left, this._right, this._top, this._bottom);
        }), a(0, e, "near", function() {
            return this._near;
        }), a(0, e, "far", function() {
            return this._far;
        }), a(0, e, "left", function() {
            return this._left;
        }), a(0, e, "right", function() {
            return this._right;
        }), a(0, e, "bottom", function() {
            return this._bottom;
        }), t._getPlanesFromMatrix = function(t, e, n, i, r, a, o) {
            var s = t.elements, l = s[0], h = s[1], u = s[2], c = s[3], _ = s[4], d = s[5], f = s[6], m = s[7], p = s[8], T = s[9], E = s[10], v = s[11], g = s[12], S = s[13], y = s[14], x = s[15], D = e.normal;
            D.x = c + u, D.y = m + f, D.z = v + E, e.distance = x + y, e.normalize();
            var I = n.normal;
            I.x = c - u, I.y = m - f, I.z = v - E, n.distance = x - y, n.normalize();
            var R = i.normal;
            R.x = c + l, R.y = m + _, R.z = v + p, i.distance = x + g, i.normalize();
            var M = r.normal;
            M.x = c - l, M.y = m - _, M.z = v - p, r.distance = x - g, r.normalize();
            var A = a.normal;
            A.x = c - h, A.y = m - d, A.z = v - T, a.distance = x - S, a.normalize();
            var C = o.normal;
            C.x = c + h, C.y = m + d, C.z = v + T, o.distance = x + S, o.normalize();
        }, t._get3PlaneInterPoint = function(e, n, i) {
            var r = e.normal, a = n.normal, o = i.normal;
            Tt.cross(a, o, t._tempV30), Tt.cross(o, r, t._tempV31), Tt.cross(r, a, t._tempV32);
            var s = Tt.dot(r, t._tempV30), l = Tt.dot(a, t._tempV31), h = Tt.dot(o, t._tempV32);
            return Tt.scale(t._tempV30, -e.distance / s, t._tempV33), Tt.scale(t._tempV31, -n.distance / l, t._tempV34), 
            Tt.scale(t._tempV32, -i.distance / h, t._tempV35), Tt.add(t._tempV33, t._tempV34, t._tempV36), 
            Tt.add(t._tempV35, t._tempV36, t._tempV37), t._tempV37;
        }, i(t, [ "_tempV30", function() {
            return this._tempV30 = new Tt();
        }, "_tempV31", function() {
            return this._tempV31 = new Tt();
        }, "_tempV32", function() {
            return this._tempV32 = new Tt();
        }, "_tempV33", function() {
            return this._tempV33 = new Tt();
        }, "_tempV34", function() {
            return this._tempV34 = new Tt();
        }, "_tempV35", function() {
            return this._tempV35 = new Tt();
        }, "_tempV36", function() {
            return this._tempV36 = new Tt();
        }, "_tempV37", function() {
            return this._tempV37 = new Tt();
        } ]), t;
    }(), we = function() {
        function t() {
            this.indexInList = -1, this.referenceCount = 0, this.updateMark = -1, this.type = -1, 
            this.fullPath = null, this.propertyOwner = null, this.property = null, this.defaultValue = null, 
            this.crossFixedValue = null;
        }
        return r(t, "laya.d3.component.KeyframeNodeOwner"), t.prototype.saveCrossFixedValue = function() {
            var t = this.propertyOwner;
            if (t) switch (this.type) {
              case 0:
                for (var e = this.property, n = e.length - 1, i = 0; i < n && (t = t[e[i]]); i++) ;
                this.crossFixedValue = t[e[n]];
                break;

              case 1:
                var r = t.localPosition;
                this.crossFixedValue || (this.crossFixedValue = new Tt()), this.crossFixedValue.x = r.x, 
                this.crossFixedValue.y = r.y, this.crossFixedValue.z = r.z;
                break;

              case 2:
                var a = t.localRotation;
                this.crossFixedValue || (this.crossFixedValue = new ht()), this.crossFixedValue.x = a.x, 
                this.crossFixedValue.y = a.y, this.crossFixedValue.z = a.z, this.crossFixedValue.w = a.w;
                break;

              case 3:
                var o = t.localScale;
                this.crossFixedValue || (this.crossFixedValue = new Tt()), this.crossFixedValue.x = o.x, 
                this.crossFixedValue.y = o.y, this.crossFixedValue.z = o.z;
                break;

              case 4:
                var s = t.localRotationEuler;
                this.crossFixedValue || (this.crossFixedValue = new Tt()), this.crossFixedValue.x = s.x, 
                this.crossFixedValue.y = s.y, this.crossFixedValue.z = s.z;
                break;

              default:
                throw "Animator:unknown type.";
            }
        }, t;
    }(), Pe = function() {
        function t() {}
        return r(t, "laya.d3.graphics.FrustumCulling"), t.__init__ = function() {
            R.supportWebGLPlusCulling && (t._cullingBufferLength = 0, t._cullingBuffer = new Float32Array(4096));
        }, t._drawTraversalCullingBound = function(e, n) {
            e.length;
            for (var i = e.elements, r = 0, a = e.length; r < a; r++) {
                var o = t._tempColor0;
                o.r = 0, o.g = 1, o.b = 0, o.a = 1, kt._drawBound(n, i[r].bounds._getBoundBox(), o);
            }
        }, t._traversalCulling = function(t, e, n, i) {
            for (var r = i.length, a = i.elements, o = t.boundFrustum, s = t._transform.position, l = 0; l < r; l++) {
                var h = a[l];
                if (t._isLayerVisible(h._owner._layer) && h._enable) if (N.frustumCulling++, !t.useOcclusionCulling || h._needRender(o)) {
                    h._visible = !0;
                    var u = h.bounds;
                    h._distanceForSort = Tt.distance(u.getCenter(), s);
                    for (var c = h._renderElements, _ = 0, d = c.length; _ < d; _++) {
                        var f = c[_], m = e._getRenderQueue(f.material.renderQueue);
                        m.isTransparent ? f.addToTransparentRenderQueue(n, m) : f.addToOpaqueRenderQueue(n, m);
                    }
                } else h._visible = !1; else h._visible = !1;
            }
        }, t.renderObjectCulling = function(e, n, i, r) {
            var a = 0, o = 0, s = n._opaqueQueue, l = n._transparentQueue;
            s.clear(), l.clear();
            var h = q._managers;
            for (a = 0, o = h.length; a < o; a++) h[a]._clear();
            var u = tt._managers;
            for (a = 0, o = u.length; a < o; a++) u[a]._clear();
            var c = n._octree;
            if (c ? (c.updateMotionObjects(), c.shrinkRootIfPossible(), c.getCollidingWithFrustum(i)) : t._traversalCulling(e, n, i, r), 
            W._config.debugFrustumCulling) {
                var _ = n._debugTool;
                _.clear(), c ? (c.drawAllBounds(_), c.drawAllObjects(_)) : t._drawTraversalCullingBound(r, _);
            }
            var d = s.elements.length;
            d > 0 && s._quickSort(0, d - 1), (d = l.elements.length) > 0 && l._quickSort(0, d - 1);
        }, t.renderObjectCullingNative = function(e, n, i, r) {
            var a = 0, o = 0, s = 0, l = 0, h = n._opaqueQueue, u = n._transparentQueue;
            h.clear(), u.clear();
            var c = q._managers;
            for (a = 0, o = c.length; a < o; a++) c[a]._clear();
            var _ = tt._managers;
            for (a = 0, o = _.length; a < o; a++) _[a]._clear();
            var d = r.length, f = r.elements;
            for (a = 0; a < d; a++) f[a].bounds;
            e.boundFrustum, t.cullingNative(e._boundFrustumBuffer, t._cullingBuffer, n._cullingBufferIndices, d, n._cullingBufferResult);
            var m = i.camera._transform.position;
            for (a = 0; a < d; a++) {
                var p = f[a];
                if (e._isLayerVisible(p._owner._layer) && p._enable && n._cullingBufferResult[a]) {
                    p._visible = !0, p._distanceForSort = Tt.distance(p.bounds.getCenter(), m);
                    var T = p._renderElements;
                    for (s = 0, l = T.length; s < l; s++) {
                        var E = T[s], v = n._getRenderQueue(E.material.renderQueue);
                        v.isTransparent ? E.addToTransparentRenderQueue(i, v) : E.addToOpaqueRenderQueue(i, v);
                    }
                } else p._visible = !1;
            }
            var g = h.elements.length;
            g > 0 && h._quickSort(0, g - 1), (g = u.elements.length) > 0 && u._quickSort(0, g - 1);
        }, t.cullingNative = function(t, e, n, i, r) {
            return v.instance.culling(t, e, n, i, r);
        }, t._cullingBufferLength = 0, t._cullingBuffer = null, i(t, [ "_tempVector3", function() {
            return this._tempVector3 = new Tt();
        }, "_tempColor0", function() {
            return this._tempColor0 = new xt();
        } ]), t;
    }(), be = function() {
        function t(t) {
            this._defaultState = null, this._statesMap = {}, this.playOnWake = !0, this._playType = -1, 
            this._crossMark = 0, this._crossDuration = -1, this._crossNodesOwnersIndicesMap = {}, 
            this._crossNodesOwnersCount = 0, this._crossNodesOwners = [], this._currentPlayState = null, 
            this._states = [], this._playStateInfo = new vt(), this._crossPlayStateInfo = new vt(), 
            this._srcCrossClipNodeIndices = [], this._destCrossClipNodeIndices = [], this.name = t, 
            this.defaultWeight = 1, this.blendingMode = laya.d3.component.AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;
        }
        r(t, "laya.d3.component.AnimatorControllerLayer");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.getAnimatorState = function(t) {
            return this._statesMap[t] || null;
        }, e.destroy = function() {
            this._statesMap = null, this._states = null, this._playStateInfo = null, this._crossPlayStateInfo = null, 
            this._defaultState = null;
        }, e.cloneTo = function(t) {
            var e = t;
            e.name = this.name, e.blendingMode = this.blendingMode, e.defaultWeight = this.defaultWeight, 
            e.playOnWake = this.playOnWake;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "defaultState", function() {
            return this._defaultState;
        }, function(t) {
            this._defaultState = t, this._statesMap[t.name] = t;
        }), t.BLENDINGMODE_OVERRIDE = 0, t.BLENDINGMODE_ADDTIVE = 1, t;
    }(), Fe = function() {
        function t() {}
        return r(t, "laya.d3.math.CollisionUtils"), t.distancePlaneToPoint = function(t, e) {
            return Tt.dot(t.normal, e) - t.distance;
        }, t.distanceBoxToPoint = function(t, e) {
            var n = t.min, i = n.x, r = n.y, a = n.z, o = t.max, s = o.x, l = o.y, h = o.z, u = e.x, c = e.y, _ = e.z, d = 0;
            return u < i && (d += (i - u) * (i - u)), u > s && (d += (s - u) * (s - u)), c < r && (d += (r - c) * (r - c)), 
            c > l && (d += (l - c) * (l - c)), _ < a && (d += (a - _) * (a - _)), _ > h && (d += (h - _) * (h - _)), 
            Math.sqrt(d);
        }, t.distanceBoxToBox = function(t, e) {
            var n = t.min, i = n.x, r = n.y, a = n.z, o = t.max, s = o.x, l = o.y, h = o.z, u = e.min, c = u.x, _ = u.y, d = u.z, f = e.max, m = f.x, p = f.y, T = f.z, E = 0, v = NaN;
            return i > m ? E += (v = i - m) * v : c > s && (E += (v = c - s) * v), r > p ? E += (v = r - p) * v : _ > l && (E += (v = _ - l) * v), 
            a > T ? E += (v = a - T) * v : d > h && (E += (v = d - h) * v), Math.sqrt(E);
        }, t.distanceSphereToPoint = function(t, e) {
            var n = Math.sqrt(Tt.distanceSquared(t.center, e));
            return n -= t.radius, Math.max(n, 0);
        }, t.distanceSphereToSphere = function(t, e) {
            var n = Math.sqrt(Tt.distanceSquared(t.center, e.center));
            return n -= t.radius + e.radius, Math.max(n, 0);
        }, t.intersectsRayAndTriangleRD = function(e, n, i, r, a) {
            var o = e.origin, s = o.x, l = o.y, h = o.z, u = e.direction, c = u.x, _ = u.y, d = u.z, f = n.x, m = n.y, p = n.z, T = i.x, E = i.y, v = i.z, g = r.x, S = r.y, y = r.z, x = t._tempV30.x, D = t._tempV30.y, I = t._tempV30.z;
            x = T - f, D = E - m, I = v - p;
            var R = t._tempV31.x, M = t._tempV31.y, A = t._tempV31.z;
            R = g - f, M = S - m, A = y - p;
            var C = t._tempV32.x, L = t._tempV32.y, O = t._tempV32.z, N = x * (C = _ * A - d * M) + D * (L = d * R - c * A) + I * (O = c * M - _ * R);
            if (it.isZero(N)) return !1;
            var V = 1 / N, w = t._tempV33.x, P = t._tempV33.y, b = t._tempV33.z, F = (w = s - f) * C + (P = l - m) * L + (b = h - p) * O;
            if ((F *= V) < 0 || F > 1) return !1;
            var B = t._tempV34.x, U = t._tempV34.y, z = t._tempV34.z, G = c * (B = P * I - b * D) + _ * (U = b * x - w * I) + d * (z = w * D - P * x);
            if ((G *= V) < 0 || F + G > 1) return !1;
            var H = R * B + M * U + A * z;
            return !((H *= V) < 0);
        }, t.intersectsRayAndTriangleRP = function(e, n, i, r, a) {
            return t.intersectsRayAndTriangleRD(e, n, i, r, NaN) ? (Tt.scale(e.direction, NaN, t._tempV30), 
            Tt.add(e.origin, t._tempV30, a), !0) : (a = Tt._ZERO, !1);
        }, t.intersectsRayAndPoint = function(e, n) {
            Tt.subtract(e.origin, n, t._tempV30);
            var i = Tt.dot(t._tempV30, e.direction), r = Tt.dot(t._tempV30, t._tempV30) - it.zeroTolerance;
            return !(r > 0 && i > 0) && !(i * i - r < 0);
        }, t.intersectsRayAndRay = function(e, n, i) {
            var r = e.origin, a = r.x, o = r.y, s = r.z, l = e.direction, h = l.x, u = l.y, c = l.z, _ = n.origin, d = _.x, f = _.y, m = _.z, p = n.direction, T = p.x, E = p.y, v = p.z;
            Tt.cross(l, p, t._tempV30);
            var g = t._tempV30, S = Tt.scalarLength(t._tempV30);
            if (it.isZero(S) && it.nearEqual(d, a) && it.nearEqual(f, o) && it.nearEqual(m, s)) return Tt._ZERO, 
            !0;
            S *= S;
            var y = d - a, x = f - o, D = m - s, I = T, R = E, M = v, A = g.x, C = g.y, L = g.z, O = (y * R * L + x * M * A + D * I * C - y * M * C - x * I * L - D * R * A) / S;
            R = u, M = c, I = h, Tt.scale(l, O, t._tempV30), Tt.scale(p, O, t._tempV31), Tt.add(r, t._tempV30, t._tempV32), 
            Tt.add(_, t._tempV31, t._tempV33);
            var N = t._tempV32, V = t._tempV33;
            return !!(it.nearEqual(V.x, N.x) && it.nearEqual(V.y, N.y) && it.nearEqual(V.z, N.z)) || (Tt._ZERO, 
            !1);
        }, t.intersectsPlaneAndTriangle = function(e, n, i, r) {
            var a = t.intersectsPlaneAndPoint(e, n), o = t.intersectsPlaneAndPoint(e, i), s = t.intersectsPlaneAndPoint(e, r);
            return a == ot.PlaneIntersectionType_Front && o == ot.PlaneIntersectionType_Front && s == ot.PlaneIntersectionType_Front ? ot.PlaneIntersectionType_Front : a == ot.PlaneIntersectionType_Back && o == ot.PlaneIntersectionType_Back && s == ot.PlaneIntersectionType_Back ? ot.PlaneIntersectionType_Back : ot.PlaneIntersectionType_Intersecting;
        }, t.intersectsRayAndPlaneRD = function(t, e, n) {
            var i = e.normal, r = Tt.dot(i, t.direction);
            if (it.isZero(r)) return !1;
            var a = Tt.dot(i, t.origin);
            return !((-e.distance - a) / r < 0);
        }, t.intersectsRayAndPlaneRP = function(e, n, i) {
            return t.intersectsRayAndPlaneRD(e, n, NaN) ? (Tt.scale(e.direction, NaN, t._tempV30), 
            Tt.add(e.origin, t._tempV30, t._tempV31), !0) : (Tt._ZERO, !1);
        }, t.intersectsRayAndBoxRD = function(t, e) {
            var n = t.origin, i = n.x, r = n.y, a = n.z, o = t.direction, s = o.x, l = o.y, h = o.z, u = e.min, c = u.x, _ = u.y, d = u.z, f = e.max, m = f.x, p = f.y, T = f.z, E = 0, v = it.MaxValue;
            if (it.isZero(s)) {
                if (i < c || i > m) return -1;
            } else {
                var g = 1 / s, S = (c - i) * g, y = (m - i) * g;
                if (S > y) {
                    var x = S;
                    S = y, y = x;
                }
                if (E = Math.max(S, E), v = Math.min(y, v), E > v) return -1;
            }
            if (it.isZero(l)) {
                if (r < _ || r > p) return -1;
            } else {
                var D = 1 / l, I = (_ - r) * D, R = (p - r) * D;
                if (I > R) {
                    var M = I;
                    I = R, R = M;
                }
                if (E = Math.max(I, E), v = Math.min(R, v), E > v) return -1;
            }
            if (it.isZero(h)) {
                if (a < d || a > T) return -1;
            } else {
                var A = 1 / h, C = (d - a) * A, L = (T - a) * A;
                if (C > L) {
                    var O = C;
                    C = L, L = O;
                }
                if (E = Math.max(C, E), v = Math.min(L, v), E > v) return -1;
            }
            return E;
        }, t.intersectsRayAndBoxRP = function(e, n, i) {
            var r = t.intersectsRayAndBoxRD(e, n);
            return -1 === r ? (Tt._ZERO.cloneTo(i), r) : (Tt.scale(e.direction, r, t._tempV30), 
            Tt.add(e.origin, t._tempV30, t._tempV31), t._tempV31.cloneTo(i), r);
        }, t.intersectsRayAndSphereRD = function(e, n) {
            var i = n.radius;
            Tt.subtract(e.origin, n.center, t._tempV30);
            var r = Tt.dot(t._tempV30, e.direction), a = Tt.dot(t._tempV30, t._tempV30) - i * i;
            if (a > 0 && r > 0) return -1;
            var o = r * r - a;
            if (o < 0) return -1;
            var s = -r - Math.sqrt(o);
            return s < 0 && (s = 0), s;
        }, t.intersectsRayAndSphereRP = function(e, n, i) {
            var r = t.intersectsRayAndSphereRD(e, n);
            return -1 === r ? (Tt._ZERO.cloneTo(i), r) : (Tt.scale(e.direction, r, t._tempV30), 
            Tt.add(e.origin, t._tempV30, t._tempV31), t._tempV31.cloneTo(i), r);
        }, t.intersectsSphereAndTriangle = function(e, n, i, r) {
            var a = e.center, o = e.radius;
            return t.closestPointPointTriangle(a, n, i, r, t._tempV30), Tt.subtract(t._tempV30, a, t._tempV31), 
            Tt.dot(t._tempV31, t._tempV31) <= o * o;
        }, t.intersectsPlaneAndPoint = function(t, e) {
            var n = Tt.dot(t.normal, e) + t.distance;
            return n > 0 ? ot.PlaneIntersectionType_Front : n < 0 ? ot.PlaneIntersectionType_Back : ot.PlaneIntersectionType_Intersecting;
        }, t.intersectsPlaneAndPlane = function(e, n) {
            Tt.cross(e.normal, n.normal, t._tempV30);
            var i = Tt.dot(t._tempV30, t._tempV30);
            return !it.isZero(i);
        }, t.intersectsPlaneAndPlaneRL = function(e, n, i) {
            var r = e.normal, a = n.normal;
            Tt.cross(r, a, t._tempV34);
            var o = Tt.dot(t._tempV34, t._tempV34);
            return !it.isZero(o) && (Tt.scale(a, e.distance, t._tempV30), Tt.scale(r, n.distance, t._tempV31), 
            Tt.subtract(t._tempV30, t._tempV31, t._tempV32), Tt.cross(t._tempV32, t._tempV34, t._tempV33), 
            Tt.normalize(t._tempV34, t._tempV34), new j(t._tempV33, t._tempV34), !0);
        }, t.intersectsPlaneAndBox = function(e, n) {
            var i = e.distance, r = e.normal, a = r.x, o = r.y, s = r.z, l = n.min, h = l.x, u = l.y, c = l.z, _ = n.max, d = _.x, f = _.y, m = _.z;
            t._tempV30.x = a > 0 ? h : d, t._tempV30.y = o > 0 ? u : f, t._tempV30.z = s > 0 ? c : m, 
            t._tempV31.x = a > 0 ? d : h, t._tempV31.y = o > 0 ? f : u, t._tempV31.z = s > 0 ? m : c;
            var p = Tt.dot(r, t._tempV30);
            return p + i > 0 ? ot.PlaneIntersectionType_Front : (p = Tt.dot(r, t._tempV31)) + i < 0 ? ot.PlaneIntersectionType_Back : ot.PlaneIntersectionType_Intersecting;
        }, t.intersectsPlaneAndSphere = function(t, e) {
            var n = e.radius, i = Tt.dot(t.normal, e.center) + t.distance;
            return i > n ? ot.PlaneIntersectionType_Front : i < -n ? ot.PlaneIntersectionType_Back : ot.PlaneIntersectionType_Intersecting;
        }, t.intersectsBoxAndBox = function(t, e) {
            var n = t.min, i = t.max, r = e.min, a = e.max;
            return !(n.x > a.x || r.x > i.x || n.y > a.y || r.y > i.y || n.z > a.z || r.z > i.z);
        }, t.intersectsBoxAndSphere = function(e, n) {
            var i = n.center, r = n.radius;
            return Tt.Clamp(i, e.min, e.max, t._tempV30), Tt.distanceSquared(i, t._tempV30) <= r * r;
        }, t.intersectsSphereAndSphere = function(t, e) {
            var n = t.radius + e.radius;
            return Tt.distanceSquared(t.center, e.center) <= n * n;
        }, t.boxContainsPoint = function(t, e) {
            var n = t.min, i = t.max;
            return n.x <= e.x && i.x >= e.x && n.y <= e.y && i.y >= e.y && n.z <= e.z && i.z >= e.z ? 1 : 0;
        }, t.boxContainsBox = function(t, e) {
            var n = t.min, i = n.x, r = n.y, a = n.z, o = t.max, s = o.x, l = o.y, h = o.z, u = e.min, c = u.x, _ = u.y, d = u.z, f = e.max, m = f.x, p = f.y, T = f.z;
            return s < c || i > m ? 0 : l < _ || r > p ? 0 : h < d || a > T ? 0 : i <= c && m <= s && r <= _ && p <= l && a <= d && T <= h ? 1 : 2;
        }, t.boxContainsSphere = function(e, n) {
            var i = e.min, r = i.x, a = i.y, o = i.z, s = e.max, l = s.x, h = s.y, u = s.z, c = n.center, _ = c.x, d = c.y, f = c.z, m = n.radius;
            return Tt.Clamp(c, i, s, t._tempV30), Tt.distanceSquared(c, t._tempV30) > m * m ? 0 : r + m <= _ && _ <= l - m && l - r > m && a + m <= d && d <= h - m && h - a > m && o + m <= f && f <= u - m && u - o > m ? 1 : 2;
        }, t.sphereContainsPoint = function(t, e) {
            return Tt.distanceSquared(e, t.center) <= t.radius * t.radius ? 1 : 0;
        }, t.sphereContainsTriangle = function(e, n, i, r) {
            var a = t.sphereContainsPoint(e, n), o = t.sphereContainsPoint(e, i), s = t.sphereContainsPoint(e, r);
            return 1 == a && 1 == o && 1 == s ? 1 : t.intersectsSphereAndTriangle(e, n, i, r) ? 2 : 0;
        }, t.sphereContainsBox = function(e, n) {
            var i = e.center, r = (i.x, i.y, i.z, e.radius), a = n.min, o = (a.x, a.y, a.z, 
            n.max), s = (o.x, o.y, o.z, t._tempV30);
            if (s.x, s.y, s.z, !t.intersectsBoxAndSphere(n, e)) return 0;
            var l = r * r;
            return Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : Tt.scalarLengthSquared(t._tempV30) > l ? 2 : 1;
        }, t.sphereContainsSphere = function(t, e) {
            var n = t.radius, i = e.radius, r = Tt.distance(t.center, e.center);
            return n + i < r ? 0 : n - i < r ? 2 : 1;
        }, t.closestPointPointTriangle = function(e, n, i, r, a) {
            Tt.subtract(i, n, t._tempV30), Tt.subtract(r, n, t._tempV31), Tt.subtract(e, n, t._tempV32), 
            Tt.subtract(e, i, t._tempV33), Tt.subtract(e, r, t._tempV34);
            var o = Tt.dot(t._tempV30, t._tempV32), s = Tt.dot(t._tempV31, t._tempV32), l = Tt.dot(t._tempV30, t._tempV33), h = Tt.dot(t._tempV31, t._tempV33), u = Tt.dot(t._tempV30, t._tempV34), c = Tt.dot(t._tempV31, t._tempV34);
            if (o <= 0 && s <= 0) n.cloneTo(a); else if (l >= 0 && h <= l) i.cloneTo(a); else {
                var _ = o * h - l * s;
                if (_ <= 0 && o >= 0 && l <= 0) {
                    var d = o / (o - l);
                    return Tt.scale(t._tempV30, d, a), void Tt.add(n, a, a);
                }
                if (c >= 0 && u <= c) r.cloneTo(a); else {
                    var f = u * s - o * c;
                    if (f <= 0 && s >= 0 && c <= 0) {
                        var m = s / (s - c);
                        return Tt.scale(t._tempV31, m, a), void Tt.add(n, a, a);
                    }
                    var p = l * c - u * h;
                    if (p <= 0 && h - l >= 0 && u - c >= 0) {
                        var T = (h - l) / (h - l + (u - c));
                        return Tt.subtract(r, i, a), Tt.scale(a, T, a), void Tt.add(i, a, a);
                    }
                    var E = 1 / (p + f + _), v = f * E, g = _ * E;
                    Tt.scale(t._tempV30, v, t._tempV35), Tt.scale(t._tempV31, g, t._tempV36), Tt.add(t._tempV35, t._tempV36, a), 
                    Tt.add(n, a, a);
                }
            }
        }, t.closestPointPlanePoint = function(e, n, i) {
            var r = e.normal, a = Tt.dot(r, n) - e.distance;
            Tt.scale(r, a, t._tempV30), Tt.subtract(n, t._tempV30, i);
        }, t.closestPointBoxPoint = function(e, n, i) {
            Tt.max(n, e.min, t._tempV30), Tt.min(t._tempV30, e.max, i);
        }, t.closestPointSpherePoint = function(t, e, n) {
            var i = t.center;
            Tt.subtract(e, i, n), Tt.normalize(n, n), Tt.scale(n, t.radius, n), Tt.add(n, i, n);
        }, t.closestPointSphereSphere = function(t, e, n) {
            var i = t.center;
            Tt.subtract(e.center, i, n), Tt.normalize(n, n), Tt.scale(n, t.radius, n), Tt.add(n, i, n);
        }, i(t, [ "_tempV30", function() {
            return this._tempV30 = new Tt();
        }, "_tempV31", function() {
            return this._tempV31 = new Tt();
        }, "_tempV32", function() {
            return this._tempV32 = new Tt();
        }, "_tempV33", function() {
            return this._tempV33 = new Tt();
        }, "_tempV34", function() {
            return this._tempV34 = new Tt();
        }, "_tempV35", function() {
            return this._tempV35 = new Tt();
        }, "_tempV36", function() {
            return this._tempV36 = new Tt();
        } ]), t;
    }(), Be = function() {
        function t() {
            var t = this.elements = new Float32Array(9);
            t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 1, t[5] = 0, t[6] = 0, t[7] = 0, 
            t[8] = 1;
        }
        r(t, "laya.d3.math.Matrix3x3");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.determinant = function() {
            var t = this.elements, e = t[0], n = t[1], i = t[2], r = t[3], a = t[4], o = t[5], s = t[6], l = t[7], h = t[8];
            return e * (h * a - o * l) + n * (-h * r + o * s) + i * (l * r - a * s);
        }, e.translate = function(t, e) {
            var n = e.elements, i = this.elements, r = i[0], a = i[1], o = i[2], s = i[3], l = i[4], h = i[5], u = i[6], c = i[7], _ = i[8], d = t.x, f = t.y;
            n[0] = r, n[1] = a, n[2] = o, n[3] = s, n[4] = l, n[5] = h, n[6] = d * r + f * s + u, 
            n[7] = d * a + f * l + c, n[8] = d * o + f * h + _;
        }, e.rotate = function(t, e) {
            var n = e.elements, i = this.elements, r = i[0], a = i[1], o = i[2], s = i[3], l = i[4], h = i[5], u = i[6], c = i[7], _ = i[8], d = Math.sin(t), f = Math.cos(t);
            n[0] = f * r + d * s, n[1] = f * a + d * l, n[2] = f * o + d * h, n[3] = f * s - d * r, 
            n[4] = f * l - d * a, n[5] = f * h - d * o, n[6] = u, n[7] = c, n[8] = _;
        }, e.scale = function(t, e) {
            var n = e.elements, i = this.elements, r = t.x, a = t.y;
            n[0] = r * i[0], n[1] = r * i[1], n[2] = r * i[2], n[3] = a * i[3], n[4] = a * i[4], 
            n[5] = a * i[5], n[6] = i[6], n[7] = i[7], n[8] = i[8];
        }, e.invert = function(t) {
            var e = t.elements, n = this.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = n[4], l = n[5], h = n[6], u = n[7], c = n[8], _ = c * s - l * u, d = -c * o + l * h, f = u * o - s * h, m = i * _ + r * d + a * f;
            m || (t = null), m = 1 / m, e[0] = _ * m, e[1] = (-c * r + a * u) * m, e[2] = (l * r - a * s) * m, 
            e[3] = d * m, e[4] = (c * i - a * h) * m, e[5] = (-l * i + a * o) * m, e[6] = f * m, 
            e[7] = (-u * i + r * h) * m, e[8] = (s * i - r * o) * m;
        }, e.transpose = function(t) {
            var e = t.elements, n = this.elements;
            if (t === this) {
                var i = n[1], r = n[2], a = n[5];
                e[1] = n[3], e[2] = n[6], e[3] = i, e[5] = n[7], e[6] = r, e[7] = a;
            } else e[0] = n[0], e[1] = n[3], e[2] = n[6], e[3] = n[1], e[4] = n[4], e[5] = n[7], 
            e[6] = n[2], e[7] = n[5], e[8] = n[8];
        }, e.identity = function() {
            var t = this.elements;
            t[0] = 1, t[1] = 0, t[2] = 0, t[3] = 0, t[4] = 1, t[5] = 0, t[6] = 0, t[7] = 0, 
            t[8] = 1;
        }, e.cloneTo = function(t) {
            var e, n, i;
            if (n = this.elements, i = t.elements, n !== i) for (e = 0; e < 9; ++e) i[e] = n[e];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, t.createFromTranslation = function(t, e) {
            e.elements, e[0] = 1, e[1] = 0, e[2] = 0, e[3] = 0, e[4] = 1, e[5] = 0, e[6] = t.x, 
            e[7] = t.y, e[8] = 1;
        }, t.createFromRotation = function(t, e) {
            var n = e.elements, i = Math.sin(t), r = Math.cos(t);
            n[0] = r, n[1] = i, n[2] = 0, n[3] = -i, n[4] = r, n[5] = 0, n[6] = 0, n[7] = 0, 
            n[8] = 1;
        }, t.createFromScaling = function(t, e) {
            var n = e.elements;
            n[0] = t.x, n[1] = 0, n[2] = 0, n[3] = 0, n[4] = t.y, n[5] = 0, n[6] = 0, n[7] = 0, 
            n[8] = 1;
        }, t.createFromMatrix4x4 = function(t, e) {
            e[0] = t[0], e[1] = t[1], e[2] = t[2], e[3] = t[4], e[4] = t[5], e[5] = t[6], e[6] = t[8], 
            e[7] = t[9], e[8] = t[10];
        }, t.multiply = function(t, e, n) {
            var i = n.elements, r = t.elements, a = e.elements, o = r[0], s = r[1], l = r[2], h = r[3], u = r[4], c = r[5], _ = r[6], d = r[7], f = r[8], m = a[0], p = a[1], T = a[2], E = a[3], v = a[4], g = a[5], S = a[6], y = a[7], x = a[8];
            i[0] = m * o + p * h + T * _, i[1] = m * s + p * u + T * d, i[2] = m * l + p * c + T * f, 
            i[3] = E * o + v * h + g * _, i[4] = E * s + v * u + g * d, i[5] = E * l + v * c + g * f, 
            i[6] = S * o + y * h + x * _, i[7] = S * s + y * u + x * d, i[8] = S * l + y * c + x * f;
        }, t.lookAt = function(e, n, i, r) {
            Tt.subtract(e, n, t._tempV30), Tt.normalize(t._tempV30, t._tempV30), Tt.cross(i, t._tempV30, t._tempV31), 
            Tt.normalize(t._tempV31, t._tempV31), Tt.cross(t._tempV30, t._tempV31, t._tempV32);
            var a = t._tempV30, o = t._tempV31, s = t._tempV32, l = r.elements;
            l[0] = o.x, l[3] = o.y, l[6] = o.z, l[1] = s.x, l[4] = s.y, l[7] = s.z, l[2] = a.x, 
            l[5] = a.y, l[8] = a.z;
        }, t.DEFAULT = new t(), i(t, [ "_tempV30", function() {
            return this._tempV30 = new Tt();
        }, "_tempV31", function() {
            return this._tempV31 = new Tt();
        }, "_tempV32", function() {
            return this._tempV32 = new Tt();
        } ]), t;
    }(), Ue = function() {
        function t() {}
        return r(t, "laya.d3.utils.Physics3DUtils"), t.setColliderCollision = function(t, e, n) {}, 
        t.getIColliderCollision = function(t, e) {
            return !1;
        }, t.COLLISIONFILTERGROUP_DEFAULTFILTER = 1, t.COLLISIONFILTERGROUP_STATICFILTER = 2, 
        t.COLLISIONFILTERGROUP_KINEMATICFILTER = 4, t.COLLISIONFILTERGROUP_DEBRISFILTER = 8, 
        t.COLLISIONFILTERGROUP_SENSORTRIGGER = 16, t.COLLISIONFILTERGROUP_CHARACTERFILTER = 32, 
        t.COLLISIONFILTERGROUP_CUSTOMFILTER1 = 64, t.COLLISIONFILTERGROUP_CUSTOMFILTER2 = 128, 
        t.COLLISIONFILTERGROUP_CUSTOMFILTER3 = 256, t.COLLISIONFILTERGROUP_CUSTOMFILTER4 = 512, 
        t.COLLISIONFILTERGROUP_CUSTOMFILTER5 = 1024, t.COLLISIONFILTERGROUP_CUSTOMFILTER6 = 2048, 
        t.COLLISIONFILTERGROUP_CUSTOMFILTER7 = 4096, t.COLLISIONFILTERGROUP_CUSTOMFILTER8 = 8192, 
        t.COLLISIONFILTERGROUP_CUSTOMFILTER9 = 16384, t.COLLISIONFILTERGROUP_CUSTOMFILTER10 = 32768, 
        t.COLLISIONFILTERGROUP_ALLFILTER = -1, i(t, [ "gravity", function() {
            return this.gravity = new Tt(0, -9.81, 0);
        } ]), t;
    }(), ze = function() {
        function t(t, e) {
            this.min = null, this.max = null, this.min = t, this.max = e;
        }
        r(t, "laya.d3.math.BoundBox");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e._rotateExtents = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = e.elements;
            n.x = Math.abs(o[0] * i) + Math.abs(o[4] * r) + Math.abs(o[8] * a), n.y = Math.abs(o[1] * i) + Math.abs(o[5] * r) + Math.abs(o[9] * a), 
            n.z = Math.abs(o[2] * i) + Math.abs(o[6] * r) + Math.abs(o[10] * a);
        }, e.getCorners = function(t) {
            t.length = 8;
            var e = this.min.x, n = this.min.y, i = this.min.z, r = this.max.x, a = this.max.y, o = this.max.z;
            t[0] = new Tt(e, a, o), t[1] = new Tt(r, a, o), t[2] = new Tt(r, n, o), t[3] = new Tt(e, n, o), 
            t[4] = new Tt(e, a, i), t[5] = new Tt(r, a, i), t[6] = new Tt(r, n, i), t[7] = new Tt(e, n, i);
        }, e.getCenter = function(t) {
            Tt.add(this.min, this.max, t), Tt.scale(t, .5, t);
        }, e.getExtent = function(t) {
            Tt.subtract(this.max, this.min, t), Tt.scale(t, .5, t);
        }, e.setCenterAndExtent = function(t, e) {
            Tt.subtract(t, e, this.min), Tt.add(t, e, this.max);
        }, e.tranform = function(e, n) {
            var i = t._tempVector30, r = t._tempVector31;
            this.getCenter(i), this.getExtent(r), Tt.transformCoordinate(i, e, i), this._rotateExtents(r, e, r), 
            n.setCenterAndExtent(i, r);
        }, e.toDefault = function() {
            this.min.toDefault(), this.max.toDefault();
        }, e.cloneTo = function(t) {
            var e = t;
            this.min.cloneTo(e.min), this.max.cloneTo(e.max);
        }, e.clone = function() {
            var t = new this.constructor(new Tt(), new Tt());
            return this.cloneTo(t), t;
        }, t.createfromPoints = function(t, e) {
            if (null == t) throw new Error("points");
            var n = e.min, i = e.max;
            n.x = Number.MAX_VALUE, n.y = Number.MAX_VALUE, n.z = Number.MAX_VALUE, i.x = -Number.MAX_VALUE, 
            i.y = -Number.MAX_VALUE, i.z = -Number.MAX_VALUE;
            for (var r = 0, a = t.length; r < a; ++r) Tt.min(n, t[r], n), Tt.max(i, t[r], i);
        }, t.merge = function(t, e, n) {
            Tt.min(t.min, e.min, n.min), Tt.max(t.max, e.max, n.max);
        }, i(t, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        } ]), t;
    }(), Ge = function() {
        function t() {
            this.speed = 1, this.clipStart = 0, this.clipEnd = 1, this._nodeOwners = [];
        }
        r(t, "laya.d3.component.AnimatorState");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e._resetFrameIndices = function() {
            for (var t = 0, e = this._currentFrameIndices.length; t < e; t++) this._currentFrameIndices[t] = -1;
        }, e.addScript = function(t) {
            var e = new t();
            return this._scripts = this._scripts || [], this._scripts.push(e), e;
        }, e.getScript = function(t) {
            if (this._scripts) for (var e = 0, i = this._scripts.length; e < i; e++) {
                var r = this._scripts[e];
                if (n.__typeof(r, t)) return r;
            }
            return null;
        }, e.getScripts = function(t) {
            var e;
            if (this._scripts) for (var i = 0, r = this._scripts.length; i < r; i++) {
                var a = this._scripts[i];
                n.__typeof(a, t) && (e = e || []).push(a);
            }
            return e;
        }, e.cloneTo = function(t) {
            var e = t;
            e.name = this.name, e.speed = this.speed, e.clipStart = this.clipStart, e.clipEnd = this.clipEnd, 
            e.clip = this._clip;
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, e, "clip", function() {
            return this._clip;
        }, function(t) {
            this._clip = t, this._currentFrameIndices = new Int16Array(t._nodes.count), this._resetFrameIndices();
        }), t;
    }(), He = (function() {
        function t() {
            this._vertices = null, this._vertexBuffer = null, this._text = null, this._fontSize = 0, 
            this._color = null;
        }
        r(t, "laya.d3.text.TextMesh");
        var e = t.prototype;
        e._createVertexBuffer = function(t) {}, e._resizeVertexBuffer = function(t) {}, 
        e._addChar = function() {}, a(0, e, "text", function() {
            return this._text;
        }, function(t) {
            this._text = t;
        }), a(0, e, "fontSize", function() {
            return this._fontSize;
        }, function(t) {
            this._fontSize = t;
        }), a(0, e, "color", function() {
            return this._color;
        }, function(t) {
            this._color = t;
        }), t._indexBuffer = null;
    }(), function() {
        function t(t, e, n, i, r, a, o, s, l, h, u, c, _, d, f, m, p) {
            void 0 === t && (t = 1), void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 0), 
            void 0 === r && (r = 0), void 0 === a && (a = 1), void 0 === o && (o = 0), void 0 === s && (s = 0), 
            void 0 === l && (l = 0), void 0 === h && (h = 0), void 0 === u && (u = 1), void 0 === c && (c = 0), 
            void 0 === _ && (_ = 0), void 0 === d && (d = 0), void 0 === f && (f = 0), void 0 === m && (m = 1);
            var T = this.elements = p || new Float32Array(16);
            T[0] = t, T[1] = e, T[2] = n, T[3] = i, T[4] = r, T[5] = a, T[6] = o, T[7] = s, 
            T[8] = l, T[9] = h, T[10] = u, T[11] = c, T[12] = _, T[13] = d, T[14] = f, T[15] = m;
        }
        r(t, "laya.d3.math.Matrix4x4");
        var e = t.prototype;
        return n.imps(e, {
            "laya.d3.core.IClone": !0
        }), e.setRotation = function(t) {
            var e = t.x, n = t.y, i = t.z, r = t.w, a = e * e, o = n * n, s = i * i, l = e * n, h = i * r, u = i * e, c = n * r, _ = n * i, d = e * r, f = this.elements;
            f[0] = 1 - 2 * (o + s), f[1] = 2 * (l + h), f[2] = 2 * (u - c), f[4] = 2 * (l - h), 
            f[5] = 1 - 2 * (s + a), f[6] = 2 * (_ + d), f[8] = 2 * (u + c), f[9] = 2 * (_ - d), 
            f[10] = 1 - 2 * (o + a);
        }, e.setPosition = function(t) {
            var e = this.elements;
            e[12] = t.x, e[13] = t.y, e[14] = t.z;
        }, e.getElementByRowColumn = function(t, e) {
            if (t < 0 || t > 3) throw new Error("row", "Rows and columns for matrices run from 0 to 3, inclusive.");
            if (e < 0 || e > 3) throw new Error("column", "Rows and columns for matrices run from 0 to 3, inclusive.");
            return this.elements[4 * t + e];
        }, e.setElementByRowColumn = function(t, e, n) {
            if (t < 0 || t > 3) throw new Error("row", "Rows and columns for matrices run from 0 to 3, inclusive.");
            if (e < 0 || e > 3) throw new Error("column", "Rows and columns for matrices run from 0 to 3, inclusive.");
            this.elements[4 * t + e] = n;
        }, e.equalsOtherMatrix = function(t) {
            var e = this.elements, n = t.elements;
            return it.nearEqual(e[0], n[0]) && it.nearEqual(e[1], n[1]) && it.nearEqual(e[2], n[2]) && it.nearEqual(e[3], n[3]) && it.nearEqual(e[4], n[4]) && it.nearEqual(e[5], n[5]) && it.nearEqual(e[6], n[6]) && it.nearEqual(e[7], n[7]) && it.nearEqual(e[8], n[8]) && it.nearEqual(e[9], n[9]) && it.nearEqual(e[10], n[10]) && it.nearEqual(e[11], n[11]) && it.nearEqual(e[12], n[12]) && it.nearEqual(e[13], n[13]) && it.nearEqual(e[14], n[14]) && it.nearEqual(e[15], n[15]);
        }, e.decomposeTransRotScale = function(e, n, i) {
            var r = t._tempMatrix4x4;
            return this.decomposeTransRotMatScale(e, r, i) ? (ht.createFromMatrix4x4(r, n), 
            !0) : (n.identity(), !1);
        }, e.decomposeTransRotMatScale = function(e, n, i) {
            var r = this.elements, a = e, o = n.elements, s = i;
            a.x = r[12], a.y = r[13], a.z = r[14];
            var l = r[0], h = r[1], u = r[2], c = r[4], _ = r[5], d = r[6], f = r[8], m = r[9], p = r[10], T = s.x = Math.sqrt(l * l + h * h + u * u), E = s.y = Math.sqrt(c * c + _ * _ + d * d), v = s.z = Math.sqrt(f * f + m * m + p * p);
            if (it.isZero(T) || it.isZero(E) || it.isZero(v)) return o[1] = o[2] = o[3] = o[4] = o[6] = o[7] = o[8] = o[9] = o[11] = o[12] = o[13] = o[14] = 0, 
            o[0] = o[5] = o[10] = o[15] = 1, !1;
            var g = t._tempVector0;
            g.x = f / v, g.y = m / v, g.z = p / v;
            var S = t._tempVector1;
            S.x = l / T, S.y = h / T, S.z = u / T;
            var y = t._tempVector2;
            Tt.cross(g, S, y);
            var x = t._tempVector1;
            return Tt.cross(y, g, x), o[3] = o[7] = o[11] = o[12] = o[13] = o[14] = 0, o[15] = 1, 
            o[0] = x.x, o[1] = x.y, o[2] = x.z, o[4] = y.x, o[5] = y.y, o[6] = y.z, o[8] = g.x, 
            o[9] = g.y, o[10] = g.z, o[0] * l + o[1] * h + o[2] * u < 0 && (s[0] = -T), o[4] * c + o[5] * _ + o[6] * d < 0 && (s[1] = -E), 
            o[8] * f + o[9] * m + o[10] * p < 0 && (s[2] = -v), !0;
        }, e.decomposeYawPitchRoll = function(t) {
            var e = Math.asin(-this.elements[9]);
            t.y = e, Math.cos(e) > it.zeroTolerance ? (t.z = Math.atan2(this.elements[1], this.elements[5]), 
            t.x = Math.atan2(this.elements[8], this.elements[10])) : (t.z = Math.atan2(-this.elements[4], this.elements[0]), 
            t.x = 0);
        }, e.normalize = function() {
            var t = this.elements, e = t[0], n = t[1], i = t[2], r = Math.sqrt(e * e + n * n + i * i);
            if (!r) return t[0] = 0, t[1] = 0, void (t[2] = 0);
            1 != r && (r = 1 / r, t[0] = e * r, t[1] = n * r, t[2] = i * r);
        }, e.transpose = function() {
            var t, e;
            return t = this.elements, e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], 
            t[8] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[7], 
            t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this;
        }, e.invert = function(t) {
            var e = this.elements, n = t.elements, i = e[0], r = e[1], a = e[2], o = e[3], s = e[4], l = e[5], h = e[6], u = e[7], c = e[8], _ = e[9], d = e[10], f = e[11], m = e[12], p = e[13], T = e[14], E = e[15], v = i * l - r * s, g = i * h - a * s, S = i * u - o * s, y = r * h - a * l, x = r * u - o * l, D = a * u - o * h, I = c * p - _ * m, R = c * T - d * m, M = c * E - f * m, A = _ * T - d * p, C = _ * E - f * p, L = d * E - f * T, O = v * L - g * C + S * A + y * M - x * R + D * I;
            0 !== Math.abs(O) && (O = 1 / O, n[0] = (l * L - h * C + u * A) * O, n[1] = (a * C - r * L - o * A) * O, 
            n[2] = (p * D - T * x + E * y) * O, n[3] = (d * x - _ * D - f * y) * O, n[4] = (h * M - s * L - u * R) * O, 
            n[5] = (i * L - a * M + o * R) * O, n[6] = (T * S - m * D - E * g) * O, n[7] = (c * D - d * S + f * g) * O, 
            n[8] = (s * C - l * M + u * I) * O, n[9] = (r * M - i * C - o * I) * O, n[10] = (m * x - p * S + E * v) * O, 
            n[11] = (_ * S - c * x - f * v) * O, n[12] = (l * R - s * A - h * I) * O, n[13] = (i * A - r * R + a * I) * O, 
            n[14] = (p * g - m * y - T * v) * O, n[15] = (c * y - _ * g + d * v) * O);
        }, e.identity = function() {
            var t = this.elements;
            t[1] = t[2] = t[3] = t[4] = t[6] = t[7] = t[8] = t[9] = t[11] = t[12] = t[13] = t[14] = 0, 
            t[0] = t[5] = t[10] = t[15] = 1;
        }, e.cloneTo = function(t) {
            var e, n, i;
            if (n = this.elements, i = t.elements, n !== i) for (e = 0; e < 16; ++e) i[e] = n[e];
        }, e.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, e.getTranslationVector = function(t) {
            var e = this.elements;
            t.x = e[12], t.y = e[13], t.z = e[14];
        }, e.setTranslationVector = function(t) {
            var e = this.elements, n = t;
            e[12] = n.x, e[13] = n.y, e[14] = n.z;
        }, e.getForward = function(t) {
            var e = this.elements;
            t.x = -e[8], t.y = -e[9], t.z = -e[10];
        }, e.setForward = function(t) {
            var e = this.elements;
            e[8] = -t.x, e[9] = -t.y, e[10] = -t.z;
        }, t.createRotationX = function(t, e) {
            var n = e.elements, i = Math.sin(t), r = Math.cos(t);
            n[1] = n[2] = n[3] = n[4] = n[7] = n[8] = n[11] = n[12] = n[13] = n[14] = 0, n[0] = n[15] = 1, 
            n[5] = n[10] = r, n[6] = i, n[9] = -i;
        }, t.createRotationY = function(t, e) {
            var n = e.elements, i = Math.sin(t), r = Math.cos(t);
            n[1] = n[3] = n[4] = n[6] = n[7] = n[9] = n[11] = n[12] = n[13] = n[14] = 0, n[5] = n[15] = 1, 
            n[0] = n[10] = r, n[2] = -i, n[8] = i;
        }, t.createRotationZ = function(t, e) {
            var n = e.elements, i = Math.sin(t), r = Math.cos(t);
            n[2] = n[3] = n[6] = n[7] = n[8] = n[9] = n[11] = n[12] = n[13] = n[14] = 0, n[10] = n[15] = 1, 
            n[0] = n[5] = r, n[1] = i, n[4] = -i;
        }, t.createRotationYawPitchRoll = function(e, n, i, r) {
            ht.createFromYawPitchRoll(e, n, i, t._tempQuaternion), t.createRotationQuaternion(t._tempQuaternion, r);
        }, t.createRotationAxis = function(t, e, n) {
            var i = t.x, r = t.y, a = t.z, o = Math.cos(e), s = Math.sin(e), l = i * i, h = r * r, u = a * a, c = i * r, _ = i * a, d = r * a, f = n.elements;
            f[3] = f[7] = f[11] = f[12] = f[13] = f[14] = 0, f[15] = 1, f[0] = l + o * (1 - l), 
            f[1] = c - o * c + s * a, f[2] = _ - o * _ - s * r, f[4] = c - o * c - s * a, f[5] = h + o * (1 - h), 
            f[6] = d - o * d + s * i, f[8] = _ - o * _ + s * r, f[9] = d - o * d - s * i, f[10] = u + o * (1 - u);
        }, t.createRotationQuaternion = function(t, e) {
            var n = e.elements, i = t.x, r = t.y, a = t.z, o = t.w, s = i * i, l = r * r, h = a * a, u = i * r, c = a * o, _ = a * i, d = r * o, f = r * a, m = i * o;
            n[3] = n[7] = n[11] = n[12] = n[13] = n[14] = 0, n[15] = 1, n[0] = 1 - 2 * (l + h), 
            n[1] = 2 * (u + c), n[2] = 2 * (_ - d), n[4] = 2 * (u - c), n[5] = 1 - 2 * (h + s), 
            n[6] = 2 * (f + m), n[8] = 2 * (_ + d), n[9] = 2 * (f - m), n[10] = 1 - 2 * (l + s);
        }, t.createTranslate = function(t, e) {
            var n = e.elements;
            n[4] = n[8] = n[1] = n[9] = n[2] = n[6] = n[3] = n[7] = n[11] = 0, n[0] = n[5] = n[10] = n[15] = 1, 
            n[12] = t.x, n[13] = t.y, n[14] = t.z;
        }, t.createScaling = function(t, e) {
            var n = e.elements;
            n[0] = t.x, n[5] = t.y, n[10] = t.z, n[1] = n[4] = n[8] = n[12] = n[9] = n[13] = n[2] = n[6] = n[14] = n[3] = n[7] = n[11] = 0, 
            n[15] = 1;
        }, t.multiply = function(t, e, n) {
            var i, r, a, o, s, l, h, u;
            if (r = n.elements, a = t.elements, o = e.elements, r === o) for (o = new Float32Array(16), 
            i = 0; i < 16; ++i) o[i] = r[i];
            var c = o[0], _ = o[1], d = o[2], f = o[3], m = o[4], p = o[5], T = o[6], E = o[7], v = o[8], g = o[9], S = o[10], y = o[11], x = o[12], D = o[13], I = o[14], R = o[15];
            for (i = 0; i < 4; i++) s = a[i], l = a[i + 4], h = a[i + 8], u = a[i + 12], r[i] = s * c + l * _ + h * d + u * f, 
            r[i + 4] = s * m + l * p + h * T + u * E, r[i + 8] = s * v + l * g + h * S + u * y, 
            r[i + 12] = s * x + l * D + h * I + u * R;
        }, t.multiplyForNative = function(t, e, n) {
            v.instance.matrix4x4Multiply(t.elements, e.elements, n.elements);
        }, t.createFromQuaternion = function(t, e) {
            var n = e.elements, i = t.x, r = t.y, a = t.z, o = t.w, s = i + i, l = r + r, h = a + a, u = i * s, c = r * s, _ = r * l, d = a * s, f = a * l, m = a * h, p = o * s, T = o * l, E = o * h;
            n[0] = 1 - _ - m, n[1] = c + E, n[2] = d - T, n[3] = 0, n[4] = c - E, n[5] = 1 - u - m, 
            n[6] = f + p, n[7] = 0, n[8] = d + T, n[9] = f - p, n[10] = 1 - u - _, n[11] = 0, 
            n[12] = 0, n[13] = 0, n[14] = 0, n[15] = 1;
        }, t.createAffineTransformation = function(t, e, n, i) {
            var r = i.elements, a = e.x, o = e.y, s = e.z, l = e.w, h = a + a, u = o + o, c = s + s, _ = a * h, d = a * u, f = a * c, m = o * u, p = o * c, T = s * c, E = l * h, v = l * u, g = l * c, S = n.x, y = n.y, x = n.z;
            r[0] = (1 - (m + T)) * S, r[1] = (d + g) * S, r[2] = (f - v) * S, r[3] = 0, r[4] = (d - g) * y, 
            r[5] = (1 - (_ + T)) * y, r[6] = (p + E) * y, r[7] = 0, r[8] = (f + v) * x, r[9] = (p - E) * x, 
            r[10] = (1 - (_ + m)) * x, r[11] = 0, r[12] = t.x, r[13] = t.y, r[14] = t.z, r[15] = 1;
        }, t.createLookAt = function(e, n, i, r) {
            var a = r.elements, o = t._tempVector0, s = t._tempVector1, l = t._tempVector2;
            Tt.subtract(e, n, l), Tt.normalize(l, l), Tt.cross(i, l, o), Tt.normalize(o, o), 
            Tt.cross(l, o, s), r.identity(), a[0] = o.x, a[4] = o.y, a[8] = o.z, a[1] = s.x, 
            a[5] = s.y, a[9] = s.z, a[2] = l.x, a[6] = l.y, a[10] = l.z, a[12] = -Tt.dot(o, e), 
            a[13] = -Tt.dot(s, e), a[14] = -Tt.dot(l, e);
        }, t.createPerspective = function(e, n, i, r, a) {
            var o = 1 / Math.tan(.5 * e), s = i / (o / n), l = i / o;
            t.createPerspectiveOffCenter(-s, s, -l, l, i, r, a);
        }, t.createPerspectiveOffCenter = function(t, e, n, i, r, a, o) {
            var s = o.elements, l = a / (a - r);
            s[1] = s[2] = s[3] = s[4] = s[6] = s[7] = s[12] = s[13] = s[15] = 0, s[0] = 2 * r / (e - t), 
            s[5] = 2 * r / (i - n), s[8] = (t + e) / (e - t), s[9] = (i + n) / (i - n), s[10] = -l, 
            s[11] = -1, s[14] = -r * l;
        }, t.createOrthoOffCenter = function(t, e, n, i, r, a, o) {
            var s = o.elements, l = 1 / (a - r);
            s[1] = s[2] = s[3] = s[4] = s[6] = s[8] = s[7] = s[9] = s[11] = 0, s[15] = 1, s[0] = 2 / (e - t), 
            s[5] = 2 / (i - n), s[10] = -l, s[12] = (t + e) / (t - e), s[13] = (i + n) / (n - i), 
            s[14] = -r * l;
        }, t.billboard = function(e, n, i, r, a, o) {
            Tt.subtract(e, n, t._tempVector0);
            var s = Tt.scalarLengthSquared(t._tempVector0);
            it.isZero(s) ? (Tt.scale(a, -1, t._tempVector1), t._tempVector1.cloneTo(t._tempVector0)) : Tt.scale(t._tempVector0, 1 / Math.sqrt(s), t._tempVector0), 
            Tt.cross(r, t._tempVector0, t._tempVector2), Tt.normalize(t._tempVector2, t._tempVector2), 
            Tt.cross(t._tempVector0, t._tempVector2, t._tempVector3);
            var l = t._tempVector2, h = t._tempVector3, u = t._tempVector0, c = e, _ = o.elements;
            _[0] = l.x, _[1] = l.y, _[2] = l.z, _[3] = 0, _[4] = h.x, _[5] = h.y, _[6] = h.z, 
            _[7] = 0, _[8] = u.x, _[9] = u.y, _[10] = u.z, _[11] = 0, _[12] = c.x, _[13] = c.y, 
            _[14] = c.z, _[15] = 1;
        }, t.translation = function(t, e) {
            var n = e.elements;
            n[0] = n[5] = n[10] = n[15] = 1, n[12] = t.x, n[13] = t.y, n[14] = t.z;
        }, i(t, [ "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new t();
        }, "_tempVector0", function() {
            return this._tempVector0 = new Tt();
        }, "_tempVector1", function() {
            return this._tempVector1 = new Tt();
        }, "_tempVector2", function() {
            return this._tempVector2 = new Tt();
        }, "_tempVector3", function() {
            return this._tempVector3 = new Tt();
        }, "_tempQuaternion", function() {
            return this._tempQuaternion = new ht();
        }, "DEFAULT", function() {
            return this.DEFAULT = new t();
        }, "ZERO", function() {
            return this.ZERO = new t(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        } ]), t;
    }()), ke = function() {
        function t(t, e) {
            this._nativeDiscreteDynamicsWorld = null, this._nativeCollisionWorld = null, this._nativeDispatcher = null, 
            this._nativeCollisionConfiguration = null, this._nativeBroadphase = null, this._nativeSolverInfo = null, 
            this._nativeDispatchInfo = null, this._nativeClosestRayResultCallback = null, this._nativeAllHitsRayResultCallback = null, 
            this._nativeClosestConvexResultCallback = null, this._nativeAllConvexResultCallback = null, 
            this._updatedRigidbodies = 0, this.maxSubSteps = 1, this.fixedTimeStep = 1 / 60, 
            this._gravity = new Tt(0, -10, 0), this._nativeVector3Zero = new W._physics3D.btVector3(0, 0, 0), 
            this._nativeDefaultQuaternion = new W._physics3D.btQuaternion(0, 0, 0, -1), this._collisionsUtils = new Yt(), 
            this._previousFrameCollisions = [], this._currentFrameCollisions = [], this._physicsUpdateList = new cn(), 
            this._characters = [], void 0 === e && (e = 0), this.maxSubSteps = t.maxSubSteps, 
            this.fixedTimeStep = t.fixedTimeStep;
            var n = W._physics3D;
            this._nativeCollisionConfiguration = new n.btDefaultCollisionConfiguration(), this._nativeDispatcher = new n.btCollisionDispatcher(this._nativeCollisionConfiguration), 
            this._nativeBroadphase = new n.btDbvtBroadphase(), this._nativeBroadphase.getOverlappingPairCache().setInternalGhostPairCallback(new n.btGhostPairCallback());
            var i = t.flags;
            if (1 & i) this._nativeCollisionWorld = new n.btCollisionWorld(this._nativeDispatcher, this._nativeBroadphase, this._nativeCollisionConfiguration); else {
                if (2 & i) throw "PhysicsSimulation:SoftBody processing is not yet available";
                var r = new n.btSequentialImpulseConstraintSolver();
                this._nativeDiscreteDynamicsWorld = new n.btDiscreteDynamicsWorld(this._nativeDispatcher, this._nativeBroadphase, r, this._nativeCollisionConfiguration), 
                this._nativeCollisionWorld = this._nativeDiscreteDynamicsWorld;
            }
            this._nativeDiscreteDynamicsWorld && (this._nativeSolverInfo = this._nativeDiscreteDynamicsWorld.getSolverInfo(), 
            this._nativeDispatchInfo = this._nativeDiscreteDynamicsWorld.getDispatchInfo()), 
            this._nativeClosestRayResultCallback = new n.ClosestRayResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            this._nativeAllHitsRayResultCallback = new n.AllHitsRayResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            this._nativeClosestConvexResultCallback = new n.ClosestConvexResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            this._nativeAllConvexResultCallback = new n.AllConvexResultCallback(this._nativeVector3Zero, this._nativeVector3Zero), 
            n._btGImpactCollisionAlgorithm_RegisterAlgorithm(this._nativeDispatcher.a);
        }
        r(t, "laya.d3.physics.PhysicsSimulation");
        var e = t.prototype;
        return e._simulate = function(t) {
            this._updatedRigidbodies = 0, this._nativeDiscreteDynamicsWorld ? this._nativeDiscreteDynamicsWorld.stepSimulation(t, this.maxSubSteps, this.fixedTimeStep) : this._nativeCollisionWorld.PerformDiscreteCollisionDetection();
        }, e._destroy = function() {
            var t = W._physics3D;
            this._nativeDiscreteDynamicsWorld ? (t.destroy(this._nativeDiscreteDynamicsWorld), 
            this._nativeDiscreteDynamicsWorld = null) : (t.destroy(this._nativeCollisionWorld), 
            this._nativeCollisionWorld = null), t.destroy(this._nativeBroadphase), this._nativeBroadphase = null, 
            t.destroy(this._nativeDispatcher), this._nativeDispatcher = null, t.destroy(this._nativeCollisionConfiguration), 
            this._nativeCollisionConfiguration = null;
        }, e._addPhysicsCollider = function(t, e, n) {
            this._nativeCollisionWorld.addCollisionObject(t._nativeColliderObject, e, n);
        }, e._removePhysicsCollider = function(t) {
            this._nativeCollisionWorld.removeCollisionObject(t._nativeColliderObject);
        }, e._addRigidBody = function(t, e, n) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.addRigidBody(t._nativeColliderObject, e, n);
        }, e._removeRigidBody = function(t) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.removeRigidBody(t._nativeColliderObject);
        }, e._addCharacter = function(t, e, n) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.addCollisionObject(t._nativeColliderObject, e, n), this._nativeCollisionWorld.addAction(t._nativeKinematicCharacter);
        }, e._removeCharacter = function(t) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeCollisionWorld.removeCollisionObject(t._nativeColliderObject), this._nativeCollisionWorld.removeAction(t._nativeKinematicCharacter);
        }, e.raycastFromTo = function(e, n, i, r, a) {
            void 0 === r && (r = Ue.COLLISIONFILTERGROUP_ALLFILTER), void 0 === a && (a = Ue.COLLISIONFILTERGROUP_ALLFILTER);
            var o = this._nativeClosestRayResultCallback, s = t._nativeTempVector30, l = t._nativeTempVector31;
            if (s.setValue(-e.x, e.y, e.z), l.setValue(-n.x, n.y, n.z), o.set_m_rayFromWorld(s), 
            o.set_m_rayToWorld(l), o.set_m_collisionFilterGroup(r), o.set_m_collisionFilterMask(a), 
            o.set_m_collisionObject(null), o.set_m_closestHitFraction(1), this._nativeCollisionWorld.rayTest(s, l, o), 
            o.hasHit()) {
                if (i) {
                    i.succeeded = !0, i.collider = Xe._physicObjectsMap[o.get_m_collisionObject().getUserIndex()], 
                    i.hitFraction = o.get_m_closestHitFraction();
                    var h = o.get_m_hitPointWorld(), u = i.point;
                    u.x = -h.x(), u.y = h.y(), u.z = h.z();
                    var c = o.get_m_hitNormalWorld(), _ = i.normal;
                    _.x = -c.x(), _.y = c.y(), _.z = c.z();
                }
                return !0;
            }
            return i && (i.succeeded = !1), !1;
        }, e.raycastAllFromTo = function(e, n, i, r, a) {
            void 0 === r && (r = Ue.COLLISIONFILTERGROUP_ALLFILTER), void 0 === a && (a = Ue.COLLISIONFILTERGROUP_ALLFILTER);
            var o = this._nativeAllHitsRayResultCallback, s = t._nativeTempVector30, l = t._nativeTempVector31;
            i.length = 0, s.setValue(-e.x, e.y, e.z), l.setValue(-n.x, n.y, n.z), o.set_m_rayFromWorld(s), 
            o.set_m_rayToWorld(l), o.set_m_collisionFilterGroup(r), o.set_m_collisionFilterMask(a);
            var h = o.get_m_collisionObjects(), u = o.get_m_hitPointWorld(), c = o.get_m_hitNormalWorld(), _ = o.get_m_hitFractions();
            h.clear(), u.clear(), c.clear(), _.clear(), this._nativeCollisionWorld.rayTest(s, l, o);
            var d = h.size();
            if (d > 0) {
                this._collisionsUtils.recoverAllHitResultsPool();
                for (var f = 0; f < d; f++) {
                    var m = this._collisionsUtils.getHitResult();
                    i.push(m), m.succeeded = !0, m.collider = Xe._physicObjectsMap[h.at(f).getUserIndex()], 
                    m.hitFraction = _.at(f);
                    var p = u.at(f), T = m.point;
                    T.x = -p.x(), T.y = p.y(), T.z = p.z();
                    var E = c.at(f), v = m.normal;
                    v.x = -E.x(), v.y = E.y(), v.z = E.z();
                }
                return !0;
            }
            return !1;
        }, e.rayCast = function(e, n, i, r, a) {
            void 0 === i && (i = 2147483647), void 0 === r && (r = Ue.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === a && (a = Ue.COLLISIONFILTERGROUP_ALLFILTER);
            var o = e.origin, s = t._tempVector30;
            return Tt.normalize(e.direction, s), Tt.scale(s, i, s), Tt.add(o, s, s), this.raycastFromTo(o, s, n, r, a);
        }, e.rayCastAll = function(e, n, i, r, a) {
            void 0 === i && (i = 2147483647), void 0 === r && (r = Ue.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === a && (a = Ue.COLLISIONFILTERGROUP_ALLFILTER);
            var o = e.origin, s = t._tempVector30;
            return Tt.normalize(e.direction, s), Tt.scale(s, i, s), Tt.add(o, s, s), this.raycastAllFromTo(o, s, n, r, a);
        }, e.shapeCast = function(e, n, i, r, a, o, s, l, h) {
            void 0 === s && (s = Ue.COLLISIONFILTERGROUP_ALLFILTER), void 0 === l && (l = Ue.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === h && (h = 0);
            var u = this._nativeClosestConvexResultCallback, c = t._nativeTempVector30, _ = t._nativeTempVector31, d = t._nativeTempQuaternion0, f = t._nativeTempQuaternion1, m = t._nativeTempTransform0, p = t._nativeTempTransform1, T = e._nativeShape;
            if (c.setValue(-n.x, n.y, n.z), _.setValue(-i.x, i.y, i.z), u.set_m_collisionFilterGroup(s), 
            u.set_m_collisionFilterMask(l), m.setOrigin(c), p.setOrigin(_), a ? (d.setValue(-a.x, a.y, a.z, -a.w), 
            m.setRotation(d)) : m.setRotation(this._nativeDefaultQuaternion), o ? (f.setValue(-o.x, o.y, o.z, -o.w), 
            p.setRotation(f)) : p.setRotation(this._nativeDefaultQuaternion), u.set_m_hitCollisionObject(null), 
            u.set_m_closestHitFraction(1), this._nativeCollisionWorld.convexSweepTest(T, m, p, u, h), 
            u.hasHit()) {
                if (r) {
                    r.succeeded = !0, r.collider = Xe._physicObjectsMap[u.get_m_hitCollisionObject().getUserIndex()], 
                    r.hitFraction = u.get_m_closestHitFraction();
                    var E = u.get_m_hitPointWorld(), v = u.get_m_hitNormalWorld(), g = r.point, S = r.normal;
                    g.x = -E.x(), g.y = E.y(), g.z = E.z(), S.x = -v.x(), S.y = v.y(), S.z = v.z();
                }
                return !0;
            }
            return r && (r.succeeded = !1), !1;
        }, e.shapeCastAll = function(e, n, i, r, a, o, s, l, h) {
            void 0 === s && (s = Ue.COLLISIONFILTERGROUP_ALLFILTER), void 0 === l && (l = Ue.COLLISIONFILTERGROUP_ALLFILTER), 
            void 0 === h && (h = 0);
            var u = this._nativeAllConvexResultCallback, c = t._nativeTempVector30, _ = t._nativeTempVector31, d = t._nativeTempQuaternion0, f = t._nativeTempQuaternion1, m = t._nativeTempTransform0, p = t._nativeTempTransform1, T = e._nativeShape;
            r.length = 0, c.setValue(-n.x, n.y, n.z), _.setValue(-i.x, i.y, i.z), u.set_m_collisionFilterGroup(s), 
            u.set_m_collisionFilterMask(l), m.setOrigin(c), p.setOrigin(_), a ? (d.setValue(-a.x, a.y, a.z, -a.w), 
            m.setRotation(d)) : m.setRotation(this._nativeDefaultQuaternion), o ? (f.setValue(-o.x, o.y, o.z, -o.w), 
            p.setRotation(f)) : p.setRotation(this._nativeDefaultQuaternion);
            var E = u.get_m_collisionObjects();
            E.clear(), this._nativeCollisionWorld.convexSweepTest(T, m, p, u, h);
            var v = E.size();
            if (v > 0) {
                for (var g = u.get_m_hitPointWorld(), S = u.get_m_hitNormalWorld(), y = u.get_m_hitFractions(), x = 0; x < v; x++) {
                    var D = this._collisionsUtils.getHitResult();
                    r.push(D), D.succeeded = !0, D.collider = Xe._physicObjectsMap[E.at(x).getUserIndex()], 
                    D.hitFraction = y.at(x);
                    var I = g.at(x), R = D.point;
                    R.x = -I.x(), R.y = I.y(), R.z = I.z();
                    var M = S.at(x), A = D.normal;
                    A.x = -M.x(), A.y = M.y(), A.z = M.z();
                }
                return !0;
            }
            return !1;
        }, e.addConstraint = function(t, e) {
            if (void 0 === e && (e = !1), !this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.addConstraint(t._nativeConstraint, e), t._simulation = this;
        }, e.removeConstraint = function(t) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.removeConstraint(t._nativeConstraint);
        }, e._updatePhysicsTransformFromRender = function() {
            for (var t = this._physicsUpdateList.elements, e = 0, n = this._physicsUpdateList.length; e < n; e++) {
                var i = t[e];
                i._derivePhysicsTransformation(!1), i._inPhysicUpdateListIndex = -1;
            }
            this._physicsUpdateList.length = 0;
        }, e._updateCharacters = function() {
            for (var t = 0, e = this._characters.length; t < e; t++) {
                var n = this._characters[t];
                n._updateTransformComponent(n._nativeColliderObject.getWorldTransform());
            }
        }, e._updateCollisions = function() {
            this._collisionsUtils.recoverAllContactPointsPool();
            var t = this._currentFrameCollisions;
            this._currentFrameCollisions = this._previousFrameCollisions, this._currentFrameCollisions.length = 0, 
            this._previousFrameCollisions = t;
            for (var e = N.loopCount, n = this._nativeDispatcher.getNumManifolds(), i = 0; i < n; i++) {
                var r = this._nativeDispatcher.getManifoldByIndexInternal(i), a = Xe._physicObjectsMap[r.getBody0().getUserIndex()], o = Xe._physicObjectsMap[r.getBody1().getUserIndex()], s = null, l = !1, h = null;
                if ((a.isTrigger || o.isTrigger) && (a.owner._needProcessTriggers || o.owner._needProcessTriggers)) for (var u = r.getNumContacts(), c = 0; c < u; c++) {
                    var _ = r.getContactPoint(c), d = _.getDistance();
                    if (d <= 0) {
                        h = (s = this._collisionsUtils.getCollision(a, o)).contacts, (l = s._updateFrame !== e) && (s._isTrigger = !0, 
                        h.length = 0);
                        break;
                    }
                } else if ((a.owner._needProcessCollisions || o.owner._needProcessCollisions) && (a._enableProcessCollisions || o._enableProcessCollisions)) for (u = r.getNumContacts(), 
                c = 0; c < u; c++) if (_ = r.getContactPoint(c), (d = _.getDistance()) <= 0) {
                    var f = this._collisionsUtils.getContactPoints();
                    f.colliderA = a, f.colliderB = o, f.distance = d;
                    var m = _.get_m_normalWorldOnB(), p = f.normal;
                    p.x = -m.x(), p.y = m.y(), p.z = m.z();
                    var T = _.get_m_positionWorldOnA(), E = f.positionOnA;
                    E.x = -T.x(), E.y = T.y(), E.z = T.z();
                    var v = _.get_m_positionWorldOnB(), g = f.positionOnB;
                    g.x = -v.x(), g.y = v.y(), g.z = v.z(), s || (h = (s = this._collisionsUtils.getCollision(a, o)).contacts, 
                    (l = s._updateFrame !== e) && (s._isTrigger = !1, h.length = 0)), h.push(f);
                }
                s && l && (this._currentFrameCollisions.push(s), s._setUpdateFrame(e));
            }
        }, e._eventScripts = function() {
            for (var t = N.loopCount, e = 0, n = this._currentFrameCollisions.length; e < n; e++) {
                var i = this._currentFrameCollisions[e], r = i._colliderA, a = i._colliderB;
                if (!r.destroyed && !a.destroyed) if (t - i._lastUpdateFrame == 1) {
                    var o = r.owner, s = o._scripts;
                    if (s) if (i._isTrigger) {
                        if (o._needProcessTriggers) for (var l = 0, h = s.length; l < h; l++) s[l].onTriggerStay(a);
                    } else if (o._needProcessCollisions) for (l = 0, h = s.length; l < h; l++) i.other = a, 
                    s[l].onCollisionStay(i);
                    var u = a.owner, c = u._scripts;
                    if (c) if (i._isTrigger) {
                        if (u._needProcessTriggers) for (l = 0, h = c.length; l < h; l++) c[l].onTriggerStay(r);
                    } else if (u._needProcessCollisions) for (l = 0, h = c.length; l < h; l++) i.other = r, 
                    c[l].onCollisionStay(i);
                } else {
                    if (o = r.owner, s = o._scripts) if (i._isTrigger) {
                        if (o._needProcessTriggers) for (l = 0, h = s.length; l < h; l++) s[l].onTriggerEnter(a);
                    } else if (o._needProcessCollisions) for (l = 0, h = s.length; l < h; l++) i.other = a, 
                    s[l].onCollisionEnter(i);
                    if (u = a.owner, c = u._scripts) if (i._isTrigger) {
                        if (u._needProcessTriggers) for (l = 0, h = c.length; l < h; l++) c[l].onTriggerEnter(r);
                    } else if (u._needProcessCollisions) for (l = 0, h = c.length; l < h; l++) i.other = r, 
                    c[l].onCollisionEnter(i);
                }
            }
            for (e = 0, n = this._previousFrameCollisions.length; e < n; e++) {
                var _ = this._previousFrameCollisions[e], d = _._colliderA, f = _._colliderB;
                if (!d.destroyed && !f.destroyed && t - _._updateFrame == 1) {
                    if (this._collisionsUtils.recoverCollision(_), o = d.owner, s = o._scripts) if (_._isTrigger) {
                        if (o._needProcessTriggers) for (l = 0, h = s.length; l < h; l++) s[l].onTriggerExit(f);
                    } else if (o._needProcessCollisions) for (l = 0, h = s.length; l < h; l++) _.other = f, 
                    s[l].onCollisionExit(_);
                    if (u = f.owner, c = u._scripts) if (_._isTrigger) {
                        if (u._needProcessTriggers) for (l = 0, h = c.length; l < h; l++) c[l].onTriggerExit(d);
                    } else if (u._needProcessCollisions) for (l = 0, h = c.length; l < h; l++) _.other = d, 
                    c[l].onCollisionExit(_);
                }
            }
        }, e.clearForces = function() {
            if (!this._nativeDiscreteDynamicsWorld) throw "Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.clearForces();
        }, a(0, e, "gravity", function() {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            return this._gravity;
        }, function(e) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._gravity = e;
            var n = t._nativeTempVector30;
            n.setValue(-e.x, e.y, e.z), this._nativeDiscreteDynamicsWorld.setGravity(n);
        }), a(0, e, "continuousCollisionDetection", function() {
            return this._nativeDispatchInfo.get_m_useContinuous();
        }, function(t) {
            this._nativeDispatchInfo.set_m_useContinuous(t);
        }), a(0, e, "speculativeContactRestitution", function() {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
            return this._nativeDiscreteDynamicsWorld.getApplySpeculativeContactRestitution();
        }, function(t) {
            if (!this._nativeDiscreteDynamicsWorld) throw "Simulation:Cannot Cannot perform this action when the physics engine is set to CollisionsOnly";
            this._nativeDiscreteDynamicsWorld.setApplySpeculativeContactRestitution(t);
        }), t.createConstraint = function() {}, t.PHYSICSENGINEFLAGS_NONE = 0, t.PHYSICSENGINEFLAGS_COLLISIONSONLY = 1, 
        t.PHYSICSENGINEFLAGS_SOFTBODYSUPPORT = 2, t.PHYSICSENGINEFLAGS_MULTITHREADED = 4, 
        t.PHYSICSENGINEFLAGS_USEHARDWAREWHENPOSSIBLE = 8, t.SOLVERMODE_RANDMIZE_ORDER = 1, 
        t.SOLVERMODE_FRICTION_SEPARATE = 2, t.SOLVERMODE_USE_WARMSTARTING = 4, t.SOLVERMODE_USE_2_FRICTION_DIRECTIONS = 16, 
        t.SOLVERMODE_ENABLE_FRICTION_DIRECTION_CACHING = 32, t.SOLVERMODE_DISABLE_VELOCITY_DEPENDENT_FRICTION_DIRECTION = 64, 
        t.SOLVERMODE_CACHE_FRIENDLY = 128, t.SOLVERMODE_SIMD = 256, t.SOLVERMODE_INTERLEAVE_CONTACT_AND_FRICTION_CONSTRAINTS = 512, 
        t.SOLVERMODE_ALLOW_ZERO_LENGTH_FRICTION_DIRECTIONS = 1024, t.disableSimulation = !1, 
        i(t, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector31", function() {
            return this._nativeTempVector31 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempQuaternion0", function() {
            return this._nativeTempQuaternion0 = new W._physics3D.btQuaternion(0, 0, 0, 1);
        }, "_nativeTempQuaternion1", function() {
            return this._nativeTempQuaternion1 = new W._physics3D.btQuaternion(0, 0, 0, 1);
        }, "_nativeTempTransform0", function() {
            return this._nativeTempTransform0 = new W._physics3D.btTransform();
        }, "_nativeTempTransform1", function() {
            return this._nativeTempTransform1 = new W._physics3D.btTransform();
        }, "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        } ]), t;
    }(), Xe = function(t) {
        function e(t, n) {
            this._restitution = 0, this._friction = .5, this._rollingFriction = 0, this._ccdMotionThreshold = 0, 
            this._ccdSweptSphereRadius = 0, this._colliderShape = null, this._transformFlag = 2147483647, 
            this._enableProcessCollisions = !0, this._inPhysicUpdateListIndex = -1, this.canScaleShape = !0, 
            e.__super.call(this), this._collisionGroup = 1, this._canCollideWith = Ue.COLLISIONFILTERGROUP_ALLFILTER, 
            this._collisionGroup = t, this._canCollideWith = n, e._physicObjectsMap[this.id] = this;
        }
        r(e, "laya.d3.physics.PhysicsComponent", t);
        var o = e.prototype;
        return o._isValid = function() {
            return this._simulation && this._colliderShape && this._enabled;
        }, o._parse = function(t) {
            null != t.collisionGroup && (this.collisionGroup = t.collisionGroup), null != t.canCollideWith && (this.canCollideWith = t.canCollideWith), 
            null != t.ccdMotionThreshold && (this.ccdMotionThreshold = t.ccdMotionThreshold), 
            null != t.ccdSweptSphereRadius && (this.ccdSweptSphereRadius = t.ccdSweptSphereRadius);
        }, o._parseShape = function(t) {
            var e = t.length;
            if (1 === e) {
                var n = X._creatShape(t[0]);
                this.colliderShape = n;
            } else {
                for (var i = new fn(), r = 0; r < e; r++) n = X._creatShape(t[r]), i.addChildShape(n);
                this.colliderShape = i;
            }
        }, o._onScaleChange = function(t) {
            this._colliderShape._setScale(t);
        }, o._setTransformFlag = function(t, e) {
            e ? this._transformFlag |= t : this._transformFlag &= ~t;
        }, o._getTransformFlag = function(t) {
            return 0 != (this._transformFlag & t);
        }, o._addToSimulation = function() {}, o._removeFromSimulation = function() {}, 
        o._derivePhysicsTransformation = function(t) {
            this._innerDerivePhysicsTransformation(this._nativeColliderObject.getWorldTransform(), t);
        }, o._innerDerivePhysicsTransformation = function(t, n) {
            var i = this.owner._transform, r = i.rotation;
            if (n || this._getTransformFlag(8)) {
                var a = this._colliderShape.localOffset, o = i.position, s = e._nativeVector30;
                if (0 !== a.x || 0 !== a.y || 0 !== a.z) {
                    var l = e._tempVector30;
                    e.physicVector3TransformQuat(a, r.x, r.y, r.z, r.w, l), Tt.add(o, l, l), s.setValue(-l.x, l.y, l.z);
                } else s.setValue(-o.x, o.y, o.z);
                t.setOrigin(s), this._setTransformFlag(8, !1);
            }
            if (n || this._getTransformFlag(16)) {
                var h = this._colliderShape.localRotation, u = e._nativeQuaternion0;
                if (0 !== h.x || 0 !== h.y || 0 !== h.z || 1 !== h.w) {
                    var c = e._tempQuaternion0;
                    e.physicQuaternionMultiply(r.x, r.y, r.z, r.w, h, c), u.setValue(-c.x, c.y, c.z, -c.w);
                } else u.setValue(-r.x, r.y, r.z, -r.w);
                t.setRotation(u), this._setTransformFlag(16, !1);
            }
            (n || this._getTransformFlag(32)) && (this._onScaleChange(i.scale), this._setTransformFlag(32, !1));
        }, o._updateTransformComponent = function(t) {
            var n = this._colliderShape.localOffset, i = this._colliderShape.localRotation, r = this.owner._transform, a = r.position, o = r.rotation, s = t.getOrigin(), l = t.getRotation(), h = -l.x(), u = l.y(), c = l.z(), _ = -l.w();
            if (0 !== n.x || 0 !== n.y || 0 !== n.z) {
                var d = e._tempVector30;
                e.physicVector3TransformQuat(n, h, u, c, _, d), a.x = -s.x() - d.x, a.y = s.y() - d.y, 
                a.z = s.z() - d.z;
            } else a.x = -s.x(), a.y = s.y(), a.z = s.z();
            if (r.position = a, 0 !== i.x || 0 !== i.y || 0 !== i.z || 1 !== i.w) {
                var f = e._tempQuaternion0;
                i.invert(f), e.physicQuaternionMultiply(h, u, c, _, f, o);
            } else o.x = h, o.y = u, o.z = c, o.w = _;
            r.rotation = o;
        }, o._onEnable = function() {
            this._simulation = this.owner._scene.physicsSimulation, this._nativeColliderObject.setContactProcessingThreshold(1e30), 
            this._colliderShape && this._enabled && (this._derivePhysicsTransformation(!0), 
            this._addToSimulation());
        }, o._onDisable = function() {
            this._colliderShape && this._enabled && (this._removeFromSimulation(), -1 !== this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.remove(this)), 
            this._simulation = null;
        }, o._onShapeChange = function(t) {
            var e = this._nativeColliderObject, n = e.getCollisionFlags();
            t.needsCustomCollisionCallback ? 0 == (8 & n) && e.setCollisionFlags(8 | n) : (8 & n) > 0 && e.setCollisionFlags(8 ^ n);
        }, o._onAdded = function() {
            this.enabled = this._enabled, this.restitution = this._restitution, this.friction = this._friction, 
            this.rollingFriction = this._rollingFriction, this.ccdMotionThreshold = this._ccdMotionThreshold, 
            this.ccdSweptSphereRadius = this._ccdSweptSphereRadius, this.owner.transform.on("transformchanged", this, this._onTransformChanged);
        }, o._onDestroy = function() {
            var n = W._physics3D;
            delete e._physicObjectsMap[this.id], n.destroy(this._nativeColliderObject), this._colliderShape.destroy(), 
            t.prototype._onDestroy.call(this), this._nativeColliderObject = null, this._colliderShape = null, 
            this._simulation = null, this.owner.transform.off("transformchanged", this, this._onTransformChanged);
        }, o._onTransformChanged = function(t) {
            e._addUpdateList && (t &= 56) && (this._transformFlag |= t, this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
        }, o._cloneTo = function(t) {
            var e = t;
            e.restitution = this._restitution, e.friction = this._friction, e.rollingFriction = this._rollingFriction, 
            e.ccdMotionThreshold = this._ccdMotionThreshold, e.ccdSweptSphereRadius = this._ccdSweptSphereRadius, 
            e.collisionGroup = this._collisionGroup, e.canCollideWith = this._canCollideWith, 
            e.canScaleShape = this.canScaleShape, this._colliderShape && (e.colliderShape = this._colliderShape.clone());
        }, a(0, o, "isActive", function() {
            return !!this._nativeColliderObject && this._nativeColliderObject.isActive();
        }), a(0, o, "restitution", function() {
            return this._restitution;
        }, function(t) {
            this._restitution = t, this._nativeColliderObject && this._nativeColliderObject.setRestitution(t);
        }), a(0, o, "friction", function() {
            return this._friction;
        }, function(t) {
            this._friction = t, this._nativeColliderObject && this._nativeColliderObject.setFriction(t);
        }), a(0, o, "rollingFriction", function() {
            return this._nativeColliderObject.getRollingFriction();
        }, function(t) {
            this._rollingFriction = t, this._nativeColliderObject && this._nativeColliderObject.setRollingFriction(t);
        }), a(0, o, "ccdMotionThreshold", function() {
            return this._ccdMotionThreshold;
        }, function(t) {
            this._ccdMotionThreshold = t, this._nativeColliderObject && this._nativeColliderObject.setCcdMotionThreshold(t);
        }), a(0, o, "ccdSweptSphereRadius", function() {
            return this._ccdSweptSphereRadius;
        }, function(t) {
            this._ccdSweptSphereRadius = t, this._nativeColliderObject && this._nativeColliderObject.setCcdSweptSphereRadius(t);
        }), a(0, o, "collisionGroup", function() {
            return this._collisionGroup;
        }, function(t) {
            this._collisionGroup !== t && (this._collisionGroup = t, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
            this._addToSimulation()));
        }), a(0, o, "simulation", function() {
            return this._simulation;
        }), a(0, o, "colliderShape", function() {
            return this._colliderShape;
        }, function(t) {
            var e = this._colliderShape;
            if (e && (e._attatched = !1, e._attatchedCollisionObject = null), this._colliderShape = t, 
            t) {
                if (t._attatched) throw "PhysicsComponent: this shape has attatched to other entity.";
                if (t._attatched = !0, t._attatchedCollisionObject = this, this._nativeColliderObject) {
                    this._nativeColliderObject.setCollisionShape(t._nativeShape);
                    var n = this._simulation && this._enabled;
                    n && e && this._removeFromSimulation(), this._onShapeChange(t), n && (this._derivePhysicsTransformation(!0), 
                    this._addToSimulation());
                }
            } else this._simulation && this._enabled && e && this._removeFromSimulation();
        }), a(0, o, "enabled", t.prototype._$get_enabled, function(t) {
            this._simulation && this._colliderShape && (t ? (this._derivePhysicsTransformation(!0), 
            this._addToSimulation()) : this._removeFromSimulation()), n.superSet(f, this, "enabled", t);
        }), a(0, o, "canCollideWith", function() {
            return this._canCollideWith;
        }, function(t) {
            this._canCollideWith !== t && (this._canCollideWith = t, this._simulation && this._colliderShape && this._enabled && (this._removeFromSimulation(), 
            this._addToSimulation()));
        }), e._createAffineTransformationArray = function(t, e, n, i, r, a, o, s, l) {
            var h = i + i, u = r + r, c = a + a, _ = i * h, d = i * u, f = i * c, m = r * u, p = r * c, T = a * c, E = o * h, v = o * u, g = o * c, S = s[0], y = s[1], x = s[2];
            l[0] = (1 - (m + T)) * S, l[1] = (d + g) * S, l[2] = (f - v) * S, l[3] = 0, l[4] = (d - g) * y, 
            l[5] = (1 - (_ + T)) * y, l[6] = (p + E) * y, l[7] = 0, l[8] = (f + v) * x, l[9] = (p - E) * x, 
            l[10] = (1 - (_ + m)) * x, l[11] = 0, l[12] = t, l[13] = e, l[14] = n, l[15] = 1;
        }, e.physicVector3TransformQuat = function(t, e, n, i, r, a) {
            var o = t.x, s = t.y, l = t.z, h = r * o + n * l - i * s, u = r * s + i * o - e * l, c = r * l + e * s - n * o, _ = -e * o - n * s - i * l;
            a.x = h * r + _ * -e + u * -i - c * -n, a.y = u * r + _ * -n + c * -e - h * -i, 
            a.z = c * r + _ * -i + h * -n - u * -e;
        }, e.physicQuaternionMultiply = function(t, e, n, i, r, a) {
            var o = r.x, s = r.y, l = r.z, h = r.w, u = e * l - n * s, c = n * o - t * l, _ = t * s - e * o, d = t * o + e * s + n * l;
            a.x = t * h + o * i + u, a.y = e * h + s * i + c, a.z = n * h + l * i + _, a.w = i * h - d;
        }, e.ACTIVATIONSTATE_ACTIVE_TAG = 1, e.ACTIVATIONSTATE_ISLAND_SLEEPING = 2, e.ACTIVATIONSTATE_WANTS_DEACTIVATION = 3, 
        e.ACTIVATIONSTATE_DISABLE_DEACTIVATION = 4, e.ACTIVATIONSTATE_DISABLE_SIMULATION = 5, 
        e.COLLISIONFLAGS_STATIC_OBJECT = 1, e.COLLISIONFLAGS_KINEMATIC_OBJECT = 2, e.COLLISIONFLAGS_NO_CONTACT_RESPONSE = 4, 
        e.COLLISIONFLAGS_CUSTOM_MATERIAL_CALLBACK = 8, e.COLLISIONFLAGS_CHARACTER_OBJECT = 16, 
        e.COLLISIONFLAGS_DISABLE_VISUALIZE_OBJECT = 32, e.COLLISIONFLAGS_DISABLE_SPU_COLLISION_PROCESSING = 64, 
        e._physicObjectsMap = {}, e._addUpdateList = !0, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new ht();
        }, "_tempQuaternion1", function() {
            return this._tempQuaternion1 = new ht();
        }, "_tempMatrix4x40", function() {
            return this._tempMatrix4x40 = new He();
        }, "_nativeVector30", function() {
            return this._nativeVector30 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeQuaternion0", function() {
            return this._nativeQuaternion0 = new W._physics3D.btQuaternion(0, 0, 0, 1);
        } ]), e;
    }(f), We = function(t) {
        function e(t) {
            if (this._indexInList = -1, this._indexInCastShadowList = -1, this._boundsChange = !0, 
            this._visible = !0, this._indexInOctreeMotionList = -1, this._updateMark = -1, this._updateRenderType = -1, 
            this._isPartOfStaticBatch = !1, this._staticBatch = null, e.__super.call(this), 
            this._sharedMaterials = [], this._id = ++e._uniqueIDCounter, this._indexInCastShadowList = -1, 
            this._bounds = new xe(Tt._ZERO, Tt._ZERO), R.supportWebGLPlusCulling) {
                var n = Pe._cullingBufferLength;
                this._cullingBufferIndex = n;
                var i = Pe._cullingBuffer, r = n + 7;
                if (r >= i.length) {
                    var a = i;
                    (i = Pe._cullingBuffer = new Float32Array(i.length + 4096)).set(a, 0);
                }
                i[n] = 2, Pe._cullingBufferLength = r;
            }
            this._renderElements = [], this._owner = t, this._enable = !0, this._materialsInstance = [], 
            this._shaderValues = new ut(null), this._defineDatas = new Ut(), this.lightmapIndex = -1, 
            this._castShadow = !1, this.receiveShadow = !1, this.sortingFudge = 0, t && this._owner.transform.on("transformchanged", this, this._onWorldMatNeedChange);
        }
        r(e, "laya.d3.core.render.BaseRender", T);
        var o = e.prototype;
        return n.imps(o, {
            "laya.resource.ISingletonElement": !0,
            "laya.d3.core.scene.IOctreeObject": !0
        }), o._getOctreeNode = function() {
            return this._octreeNode;
        }, o._setOctreeNode = function(t) {
            this._octreeNode = t;
        }, o._getIndexInMotionList = function() {
            return this._indexInOctreeMotionList;
        }, o._setIndexInMotionList = function(t) {
            this._indexInOctreeMotionList = t;
        }, o._changeMaterialReference = function(t, e) {
            t && t._removeReference(), e._addReference();
        }, o._getInstanceMaterial = function(t, e) {
            var n = new t.constructor();
            return t.cloneTo(n), n.name = n.name + "(Instance)", this._materialsInstance[e] = !0, 
            this._changeMaterialReference(this._sharedMaterials[e], n), this._sharedMaterials[e] = n, 
            n;
        }, o._applyLightMapParams = function() {
            if (this._scene && this._lightmapIndex >= 0) {
                var t = this._scene.getlightmaps();
                this._lightmapIndex < t.length ? (this._defineDatas.add(Jn.SAHDERDEFINE_LIGHTMAP), 
                this._shaderValues.setTexture(Jn.LIGHTMAP, t[this._lightmapIndex])) : this._defineDatas.remove(Jn.SAHDERDEFINE_LIGHTMAP);
            } else this._defineDatas.remove(Jn.SAHDERDEFINE_LIGHTMAP);
        }, o._onWorldMatNeedChange = function(t) {
            this._boundsChange = !0, this._octreeNode && (t &= 56) && -1 === this._indexInOctreeMotionList && this._octreeNode._octree.addMotionObject(this);
        }, o._calculateBoundingBox = function() {
            throw "BaseRender: must override it.";
        }, o._getIndexInList = function() {
            return this._indexInList;
        }, o._setIndexInList = function(t) {
            this._indexInList = t;
        }, o._setBelongScene = function(t) {
            this._scene !== t && (this._scene = t, this._applyLightMapParams());
        }, o._needRender = function(t) {
            return !0;
        }, o._renderUpdate = function(t, e) {}, o._renderUpdateWithCamera = function(t, e) {}, 
        o._revertBatchRenderUpdate = function(t) {}, o._destroy = function() {
            -1 !== this._indexInOctreeMotionList && this._octreeNode._octree.removeMotionObject(this), 
            this.offAll();
            var t = 0, e = 0;
            for (t = 0, e = this._renderElements.length; t < e; t++) this._renderElements[t].destroy();
            for (t = 0, e = this._sharedMaterials.length; t < e; t++) this._sharedMaterials[t].destroyed || this._sharedMaterials[t]._removeReference();
            this._renderElements = null, this._owner = null, this._sharedMaterials = null, this._bounds = null, 
            this._lightmapScaleOffset = null;
        }, a(0, o, "bounds", function() {
            return this._boundsChange && (this._calculateBoundingBox(), this._boundsChange = !1), 
            this._bounds;
        }), a(0, o, "id", function() {
            return this._id;
        }), a(0, o, "material", function() {
            var t = this._sharedMaterials[0];
            if (t && !this._materialsInstance[0]) {
                var e = this._getInstanceMaterial(t, 0), n = this._renderElements[0];
                n && (n.material = e);
            }
            return this._sharedMaterials[0];
        }, function(t) {
            this.sharedMaterial = t;
        }), a(0, o, "isPartOfStaticBatch", function() {
            return this._isPartOfStaticBatch;
        }), a(0, o, "sharedMaterial", function() {
            return this._sharedMaterials[0];
        }, function(t) {
            var e = this._sharedMaterials[0];
            if (e !== t) {
                this._sharedMaterials[0] = t, this._materialsInstance[0] = !1, this._changeMaterialReference(e, t);
                var n = this._renderElements[0];
                n && (n.material = t);
            }
        }), a(0, o, "lightmapIndex", function() {
            return this._lightmapIndex;
        }, function(t) {
            this._lightmapIndex !== t && (this._lightmapIndex = t, this._applyLightMapParams());
        }), a(0, o, "lightmapScaleOffset", function() {
            return this._lightmapScaleOffset;
        }, function(t) {
            this._lightmapScaleOffset = t, this._shaderValues.setVector(Jn.LIGHTMAPSCALEOFFSET, t), 
            this._defineDatas.add(Jn.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
        }), a(0, o, "castShadow", function() {
            return this._castShadow;
        }, function(t) {
            this._castShadow !== t && (this._owner.activeInHierarchy && (t ? this._scene._addShadowCastRenderObject(this) : this._scene._removeShadowCastRenderObject(this)), 
            this._castShadow = t);
        }), a(0, o, "enable", function() {
            return this._enable;
        }, function(t) {
            this._enable = !!t;
        }), a(0, o, "materials", function() {
            for (var t = 0, e = this._sharedMaterials.length; t < e; t++) if (!this._materialsInstance[t]) {
                var n = this._getInstanceMaterial(this._sharedMaterials[t], t), i = this._renderElements[t];
                i && (i.material = n);
            }
            return this._sharedMaterials.slice();
        }, function(t) {
            this.sharedMaterials = t;
        }), a(0, o, "sharedMaterials", function() {
            return this._sharedMaterials.slice();
        }, function(t) {
            for (var e = this._sharedMaterials, n = 0, i = e.length; n < i; n++) e[n]._removeReference();
            if (!t) throw new Error("BaseRender: shadredMaterials value can't be null.");
            var r = t.length;
            for (this._materialsInstance.length = r, e.length = r, n = 0; n < r; n++) {
                var a = e[n], o = t[n];
                if (a !== o) {
                    this._materialsInstance[n] = !1;
                    var s = this._renderElements[n];
                    s && (s.material = o);
                }
                o._addReference(), e[n] = o;
            }
        }), a(0, o, "receiveShadow", function() {
            return this._receiveShadow;
        }, function(t) {
            this._receiveShadow !== t && (this._receiveShadow = t, t ? this._defineDatas.add(Jn.SHADERDEFINE_RECEIVE_SHADOW) : this._defineDatas.remove(Jn.SHADERDEFINE_RECEIVE_SHADOW));
        }), e._uniqueIDCounter = 0, i(e, [ "_tempBoundBoxCorners", function() {
            return this._tempBoundBoxCorners = [ new Tt(), new Tt(), new Tt(), new Tt(), new Tt(), new Tt(), new Tt(), new Tt() ];
        } ]), e;
    }(), Ye = (function(t) {
        function e() {
            e.__super.call(this);
        }
        r(e, "laya.d3.component.Script3D", f);
        var i = e.prototype;
        i._checkProcessTriggers = function() {
            var t = laya.d3.component.Script3D.prototype;
            return this.onTriggerEnter !== t.onTriggerEnter || this.onTriggerStay !== t.onTriggerStay || this.onTriggerExit !== t.onTriggerExit;
        }, i._checkProcessCollisions = function() {
            var t = laya.d3.component.Script3D.prototype;
            return this.onCollisionEnter !== t.onCollisionEnter || this.onCollisionStay !== t.onCollisionStay || this.onCollisionExit !== t.onCollisionExit;
        }, i._onAwake = function() {
            this.onAwake(), this.onStart !== laya.d3.component.Script3D.prototype.onStart && n.startTimer.callLater(this, this.onStart);
        }, i._onEnable = function() {
            this.owner._scene._scriptPool.add(this);
            var t = laya.d3.component.Script3D.prototype;
            this.onKeyDown !== t.onKeyDown && n.stage.on("keydown", this, this.onKeyDown), this.onKeyPress !== t.onKeyPress && n.stage.on("keypress", this, this.onKeyUp), 
            this.onKeyUp !== t.onKeyUp && n.stage.on("keyup", this, this.onKeyUp);
        }, i._onDisable = function() {
            this.owner._scene._scriptPool.remove(this), this.owner.offAllCaller(this), n.stage.offAllCaller(this);
        }, i._isScript = function() {
            return !0;
        }, i._onAdded = function() {
            var t = this.owner, e = t._scripts;
            e || (t._scripts = e = []), e.push(this), t._needProcessCollisions || (t._needProcessCollisions = this._checkProcessCollisions()), 
            t._needProcessTriggers || (t._needProcessTriggers = this._checkProcessTriggers());
        }, i._onDestroy = function() {
            var t = this.owner._scripts;
            t.splice(t.indexOf(this), 1);
            var e = this.owner;
            e._needProcessTriggers = !1;
            for (var n = 0, i = t.length; n < i; n++) if (t[n]._checkProcessTriggers()) {
                e._needProcessTriggers = !0;
                break;
            }
            for (e._needProcessCollisions = !1, n = 0, i = t.length; n < i; n++) if (t[n]._checkProcessCollisions()) {
                e._needProcessCollisions = !0;
                break;
            }
            this.onDestroy();
        }, i.onAwake = function() {}, i.onEnable = function() {}, i.onStart = function() {}, 
        i.onTriggerEnter = function(t) {}, i.onTriggerStay = function(t) {}, i.onTriggerExit = function(t) {}, 
        i.onCollisionEnter = function(t) {}, i.onCollisionStay = function(t) {}, i.onCollisionExit = function(t) {}, 
        i.onMouseDown = function() {}, i.onMouseDrag = function() {}, i.onMouseClick = function() {}, 
        i.onMouseUp = function() {}, i.onMouseEnter = function() {}, i.onMouseOver = function() {}, 
        i.onMouseOut = function() {}, i.onKeyDown = function(t) {}, i.onKeyPress = function(t) {}, 
        i.onKeyUp = function(t) {}, i.onUpdate = function() {}, i.onLateUpdate = function() {}, 
        i.onPreRender = function() {}, i.onPostRender = function() {}, i.onDisable = function() {}, 
        i.onDestroy = function() {}, a(0, i, "isSingleton", function() {
            return !1;
        });
    }(), function(t) {
        function e(t) {
            this._owner = null, this._children = null, this._parent = null, this._dummy = null, 
            this._transformFlag = 0, e.__super.call(this), this._localPosition = new Tt(0, 0, 0), 
            this._localRotation = new ht(0, 0, 0, 1), this._localScale = new Tt(1, 1, 1), this._localRotationEuler = new Tt(0, 0, 0), 
            this._localMatrix = new He(), this._position = new Tt(0, 0, 0), this._rotation = new ht(0, 0, 0, 1), 
            this._scale = new Tt(1, 1, 1), this._rotationEuler = new Tt(0, 0, 0), this._worldMatrix = new He(), 
            this._owner = t, this._children = [], this._setTransformFlag(7, !1), this._setTransformFlag(248, !0);
        }
        r(e, "laya.d3.core.Transform3D", T);
        var n = e.prototype;
        return n._setTransformFlag = function(t, e) {
            e ? this._transformFlag |= t : this._transformFlag &= ~t;
        }, n._getTransformFlag = function(t) {
            return 0 != (this._transformFlag & t);
        }, n._setParent = function(t) {
            if (this._parent !== t) {
                if (this._parent) {
                    var e = this._parent._children, n = e.indexOf(this);
                    e.splice(n, 1);
                }
                t && (t._children.push(this), t && this._onWorldTransform()), this._parent = t;
            }
        }, n._updateLocalMatrix = function() {
            He.createAffineTransformation(this._localPosition, this.localRotation, this._localScale, this._localMatrix);
        }, n._onWorldPositionRotationTransform = function() {
            if (!(this._getTransformFlag(64) && this._getTransformFlag(8) && this._getTransformFlag(16) && this._getTransformFlag(128))) {
                this._setTransformFlag(216, !0), this.event("transformchanged", this._transformFlag);
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldPositionRotationTransform();
            }
        }, n._onWorldPositionScaleTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(8) || !this._getTransformFlag(32)) {
                this._setTransformFlag(104, !0), this.event("transformchanged", this._transformFlag);
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldPositionScaleTransform();
            }
        }, n._onWorldPositionTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(8)) {
                this._setTransformFlag(72, !0), this.event("transformchanged", this._transformFlag);
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldPositionTransform();
            }
        }, n._onWorldRotationTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(16) || !this._getTransformFlag(128)) {
                this._setTransformFlag(208, !0), this.event("transformchanged", this._transformFlag);
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldPositionRotationTransform();
            }
        }, n._onWorldScaleTransform = function() {
            if (!this._getTransformFlag(64) || !this._getTransformFlag(32)) {
                this._setTransformFlag(96, !0), this.event("transformchanged", this._transformFlag);
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldPositionScaleTransform();
            }
        }, n._onWorldTransform = function() {
            if (!(this._getTransformFlag(64) && this._getTransformFlag(8) && this._getTransformFlag(16) && this._getTransformFlag(128) && this._getTransformFlag(32))) {
                this._setTransformFlag(248, !0), this.event("transformchanged", this._transformFlag);
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldTransform();
            }
        }, n.translate = function(t, n) {
            void 0 === n && (n = !0), n ? (He.createFromQuaternion(this.localRotation, e._tempMatrix0), 
            Tt.transformCoordinate(t, e._tempMatrix0, e._tempVector30), Tt.add(this.localPosition, e._tempVector30, this._localPosition), 
            this.localPosition = this._localPosition) : (Tt.add(this.position, t, this._position), 
            this.position = this._position);
        }, n.rotate = function(t, n, i) {
            void 0 === n && (n = !0), void 0 === i && (i = !0);
            var r;
            i ? r = t : (Tt.scale(t, Math.PI / 180, e._tempVector30), r = e._tempVector30), 
            ht.createFromYawPitchRoll(r.y, r.x, r.z, e._tempQuaternion0), n ? (ht.multiply(this._localRotation, e._tempQuaternion0, this._localRotation), 
            this.localRotation = this._localRotation) : (ht.multiply(e._tempQuaternion0, this.rotation, this._rotation), 
            this.rotation = this._rotation);
        }, n.getForward = function(t) {
            var e = this.worldMatrix.elements;
            t.x = -e[8], t.y = -e[9], t.z = -e[10];
        }, n.getUp = function(t) {
            var e = this.worldMatrix.elements;
            t.x = e[4], t.y = e[5], t.z = e[6];
        }, n.getRight = function(t) {
            var e = this.worldMatrix.elements;
            t.x = e[0], t.y = e[1], t.z = e[2];
        }, n.lookAt = function(t, e, n) {
            void 0 === n && (n = !1);
            var i;
            if (n) {
                if (i = this._localPosition, Math.abs(i.x - t.x) < it.zeroTolerance && Math.abs(i.y - t.y) < it.zeroTolerance && Math.abs(i.z - t.z) < it.zeroTolerance) return;
                ht.lookAt(this._localPosition, t, e, this._localRotation), this._localRotation.invert(this._localRotation), 
                this.localRotation = this._localRotation;
            } else {
                var r = this.position;
                if (i = r, Math.abs(i.x - t.x) < it.zeroTolerance && Math.abs(i.y - t.y) < it.zeroTolerance && Math.abs(i.z - t.z) < it.zeroTolerance) return;
                ht.lookAt(r, t, e, this._rotation), this._rotation.invert(this._rotation), this.rotation = this._rotation;
            }
        }, a(0, n, "_isFrontFaceInvert", function() {
            var t = this.scale, e = t.x < 0;
            return t.y < 0 && (e = !e), t.z < 0 && (e = !e), e;
        }), a(0, n, "owner", function() {
            return this._owner;
        }), a(0, n, "localPositionY", function() {
            return this._localPosition.y;
        }, function(t) {
            this._localPosition.y = t, this.localPosition = this._localPosition;
        }), a(0, n, "localScaleX", function() {
            return this._localScale.x;
        }, function(t) {
            this._localScale.x = t, this.localScale = this._localScale;
        }), a(0, n, "worldNeedUpdate", function() {
            return this._getTransformFlag(64);
        }), a(0, n, "localPositionX", function() {
            return this._localPosition.x;
        }, function(t) {
            this._localPosition.x = t, this.localPosition = this._localPosition;
        }), a(0, n, "localPosition", function() {
            return this._localPosition;
        }, function(t) {
            this._localPosition !== t && t.cloneTo(this._localPosition), this._setTransformFlag(4, !0), 
            this._onWorldPositionTransform();
        }), a(0, n, "localPositionZ", function() {
            return this._localPosition.z;
        }, function(t) {
            this._localPosition.z = t, this.localPosition = this._localPosition;
        }), a(0, n, "localRotationX", function() {
            return this.localRotation.x;
        }, function(t) {
            this._localRotation.x = t, this.localRotation = this._localRotation;
        }), a(0, n, "localRotationY", function() {
            return this.localRotation.y;
        }, function(t) {
            this._localRotation.y = t, this.localRotation = this._localRotation;
        }), a(0, n, "localRotationZ", function() {
            return this.localRotation.z;
        }, function(t) {
            this._localRotation.z = t, this.localRotation = this._localRotation;
        }), a(0, n, "localRotationW", function() {
            return this.localRotation.w;
        }, function(t) {
            this._localRotation.w = t, this.localRotation = this._localRotation;
        }), a(0, n, "localRotation", function() {
            if (this._getTransformFlag(1)) {
                var t = this._localRotationEuler;
                ht.createFromYawPitchRoll(t.y / e._angleToRandin, t.x / e._angleToRandin, t.z / e._angleToRandin, this._localRotation), 
                this._setTransformFlag(1, !1);
            }
            return this._localRotation;
        }, function(t) {
            this._localRotation !== t && t.cloneTo(this._localRotation), this._localRotation.normalize(this._localRotation), 
            this._setTransformFlag(6, !0), this._setTransformFlag(1, !1), this._onWorldRotationTransform();
        }), a(0, n, "localScaleY", function() {
            return this._localScale.y;
        }, function(t) {
            this._localScale.y = t, this.localScale = this._localScale;
        }), a(0, n, "localScaleZ", function() {
            return this._localScale.z;
        }, function(t) {
            this._localScale.z = t, this.localScale = this._localScale;
        }), a(0, n, "position", function() {
            if (this._getTransformFlag(8)) {
                if (null != this._parent) {
                    var t = this._parent.position;
                    Tt.multiply(this._localPosition, this._parent.scale, e._tempVector30), Tt.transformQuat(e._tempVector30, this._parent.rotation, e._tempVector30), 
                    Tt.add(t, e._tempVector30, this._position);
                } else this._localPosition.cloneTo(this._position);
                this._setTransformFlag(8, !1);
            }
            return this._position;
        }, function(t) {
            if (null != this._parent) {
                Tt.subtract(t, this._parent.position, this._localPosition);
                var n = this._parent.scale, i = n.x, r = n.y, a = n.z;
                if (1 !== i || 1 !== r || 1 !== a) {
                    var o = e._tempVector30;
                    o.x = 1 / i, o.y = 1 / r, o.z = 1 / a, Tt.multiply(this._localPosition, o, this._localPosition);
                }
                this._parent.rotation.invert(e._tempQuaternion0), Tt.transformQuat(this._localPosition, e._tempQuaternion0, this._localPosition);
            } else t.cloneTo(this._localPosition);
            this.localPosition = this._localPosition, this._position !== t && t.cloneTo(this._position), 
            this._setTransformFlag(8, !1);
        }), a(0, n, "localRotationEulerY", function() {
            return this.localRotationEuler.y;
        }, function(t) {
            this._localRotationEuler.y = t, this.localRotationEuler = this._localRotationEuler;
        }), a(0, n, "localScale", function() {
            return this._localScale;
        }, function(t) {
            this._localScale !== t && t.cloneTo(this._localScale), this._setTransformFlag(4, !0), 
            this._onWorldScaleTransform();
        }), a(0, n, "localRotationEulerX", function() {
            return this.localRotationEuler.x;
        }, function(t) {
            this._localRotationEuler.x = t, this.localRotationEuler = this._localRotationEuler;
        }), a(0, n, "localRotationEulerZ", function() {
            return this.localRotationEuler.z;
        }, function(t) {
            this._localRotationEuler.z = t, this.localRotationEuler = this._localRotationEuler;
        }), a(0, n, "localRotationEuler", function() {
            if (this._getTransformFlag(2)) {
                this._localRotation.getYawPitchRoll(e._tempVector30);
                var t = e._tempVector30, n = this._localRotationEuler;
                n.x = t.y * e._angleToRandin, n.y = t.x * e._angleToRandin, n.z = t.z * e._angleToRandin, 
                this._setTransformFlag(2, !1);
            }
            return this._localRotationEuler;
        }, function(t) {
            this._localRotationEuler !== t && t.cloneTo(this._localRotationEuler), this._setTransformFlag(2, !1), 
            this._setTransformFlag(5, !0), this._onWorldRotationTransform();
        }), a(0, n, "localMatrix", function() {
            return this._getTransformFlag(4) && (this._updateLocalMatrix(), this._setTransformFlag(4, !1)), 
            this._localMatrix;
        }, function(t) {
            this._localMatrix !== t && t.cloneTo(this._localMatrix), this._localMatrix.decomposeTransRotScale(this._localPosition, this._localRotation, this._localScale), 
            this._setTransformFlag(4, !1), this._onWorldTransform();
        }), a(0, n, "rotation", function() {
            return this._getTransformFlag(16) && (null != this._parent ? ht.multiply(this._parent.rotation, this.localRotation, this._rotation) : this.localRotation.cloneTo(this._rotation), 
            this._setTransformFlag(16, !1)), this._rotation;
        }, function(t) {
            null != this._parent ? (this._parent.rotation.invert(e._tempQuaternion0), ht.multiply(e._tempQuaternion0, t, this._localRotation)) : t.cloneTo(this._localRotation), 
            this.localRotation = this._localRotation, t !== this._rotation && t.cloneTo(this._rotation), 
            this._setTransformFlag(16, !1);
        }), a(0, n, "scale", function() {
            return this._getTransformFlag(32) ? (null !== this._parent ? Tt.multiply(this._parent.scale, this._localScale, this._scale) : this._localScale.cloneTo(this._scale), 
            this._setTransformFlag(32, !1), this._scale) : this._scale;
        }, function(t) {
            if (null !== this._parent) {
                var n = this._parent.scale, i = e._tempVector30;
                i.x = 1 / n.x, i.y = 1 / n.y, i.z = 1 / n.z, Tt.multiply(t, e._tempVector30, this._localScale);
            } else t.cloneTo(this._localScale);
            this.localScale = this._localScale, this._scale !== t && t.cloneTo(this._scale), 
            this._setTransformFlag(32, !1);
        }), a(0, n, "rotationEuler", function() {
            if (this._getTransformFlag(128)) {
                this.rotation.getYawPitchRoll(e._tempVector30);
                var t = e._tempVector30, n = this._rotationEuler;
                n.x = t.y * e._angleToRandin, n.y = t.x * e._angleToRandin, n.z = t.z * e._angleToRandin, 
                this._setTransformFlag(128, !1);
            }
            return this._rotationEuler;
        }, function(t) {
            ht.createFromYawPitchRoll(t.y / e._angleToRandin, t.x / e._angleToRandin, t.z / e._angleToRandin, this._rotation), 
            this.rotation = this._rotation, this._rotationEuler !== t && t.cloneTo(this._rotationEuler), 
            this._setTransformFlag(128, !1);
        }), a(0, n, "worldMatrix", function() {
            return this._getTransformFlag(64) && (null != this._parent ? He.multiply(this._parent.worldMatrix, this.localMatrix, this._worldMatrix) : this.localMatrix.cloneTo(this._worldMatrix), 
            this._setTransformFlag(64, !1)), this._worldMatrix;
        }, function(t) {
            null === this._parent ? t.cloneTo(this._localMatrix) : (this._parent.worldMatrix.invert(this._localMatrix), 
            He.multiply(this._localMatrix, t, this._localMatrix)), this.localMatrix = this._localMatrix, 
            this._worldMatrix !== t && t.cloneTo(this._worldMatrix), this._setTransformFlag(64, !1);
        }), e.TRANSFORM_LOCALQUATERNION = 1, e.TRANSFORM_LOCALEULER = 2, e.TRANSFORM_LOCALMATRIX = 4, 
        e.TRANSFORM_WORLDPOSITION = 8, e.TRANSFORM_WORLDQUATERNION = 16, e.TRANSFORM_WORLDSCALE = 32, 
        e.TRANSFORM_WORLDMATRIX = 64, e.TRANSFORM_WORLDEULER = 128, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempVector32", function() {
            return this._tempVector32 = new Tt();
        }, "_tempVector33", function() {
            return this._tempVector33 = new Tt();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new ht();
        }, "_tempMatrix0", function() {
            return this._tempMatrix0 = new He();
        }, "_angleToRandin", function() {
            return this._angleToRandin = 180 / Math.PI;
        } ]), e;
    }()), Ze = function(t) {
        function e() {
            this._linkAvatarSpritesData = {}, this._keyframeNodeOwners = [], this._linkAvatarSprites = [], 
            this._renderableSprites = [], this.cullingMode = 2, e.__super.call(this), this._controllerLayers = [], 
            this._linkSprites = {}, this._speed = 1, this._keyframeNodeOwnerMap = {}, this._updateMark = 0;
        }
        r(e, "laya.d3.component.Animator", f);
        var n = e.prototype;
        return n._linkToSprites = function(t) {
            for (var e in t) {
                for (var n = this.owner, i = t[e], r = 0, a = i.length; r < a; r++) {
                    var o = i[r];
                    if ("" === o) break;
                    if (!(n = n.getChildByName(o))) break;
                }
                n && this.linkSprite3DToAvatarNode(e, n);
            }
        }, n._addKeyframeNodeOwner = function(t, e, n) {
            var i = e._indexInList, r = e.fullPath, a = this._keyframeNodeOwnerMap[r];
            if (a) a.referenceCount++, t[i] = a; else {
                for (var s = n, l = 0, h = e.propertyCount; l < h && (s = s[e.getPropertyByIndex(l)]); l++) ;
                (a = this._keyframeNodeOwnerMap[r] = new we()).fullPath = r, a.indexInList = this._keyframeNodeOwners.length, 
                a.referenceCount = 1, a.propertyOwner = n;
                var u = e.propertyCount, c = o(u);
                for (l = 0; l < u; l++) c[l] = e.getPropertyByIndex(l);
                if (a.property = c, a.type = e.type, s) if (0 === e.type) a.defaultValue = s; else {
                    var _ = new s.constructor();
                    s.cloneTo(_), a.defaultValue = _;
                }
                this._keyframeNodeOwners.push(a), t[i] = a;
            }
        }, n._removeKeyframeNodeOwner = function(t, e) {
            var n = e.fullPath, i = this._keyframeNodeOwnerMap[n];
            i && (i.referenceCount--, 0 === i.referenceCount && (delete this._keyframeNodeOwnerMap[n], 
            this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(i), 1)), t[e._indexInList] = null);
        }, n._getOwnersByClip = function(t) {
            var e = t._clip._nodes, n = e.count, i = t._nodeOwners;
            i.length = n;
            for (var r = 0; r < n; r++) {
                for (var a = e.getNodeByIndex(r), o = this._avatar ? this._avatarNodeMap[this._avatar._rootNode.name] : this.owner, s = 0, l = a.ownerPathCount; s < l; s++) {
                    var h = a.getOwnerPathByIndex(s);
                    if ("" === h) break;
                    if (!(o = o.getChildByName(h))) break;
                }
                if (o) {
                    var u = a.propertyOwner;
                    u && (o = o[u]), o && this._addKeyframeNodeOwner(i, a, o);
                }
            }
        }, n._updatePlayer = function(t, e, n, i) {
            var r = t._clip._duration * (t.clipEnd - t.clipStart), a = e._elapsedTime, o = a + n;
            e._lastElapsedTime = a, e._elapsedTime = o;
            var s = o / r;
            e._normalizedTime = s;
            var l = s % 1;
            e._normalizedPlayTime = l < 0 ? l + 1 : l, e._duration = r;
            var h = t._scripts;
            if (!i && o >= r) {
                if (e._finish = !0, e._elapsedTime = r, e._normalizedPlayTime = 1, h) for (var u = 0, c = h.length; u < c; u++) h[u].onStateExit();
            } else if (h) for (u = 0, c = h.length; u < c; u++) h[u].onStateUpdate();
        }, n._eventScript = function(t, e, n, i, r) {
            if (r) for (var a = e.length; n < a; n++) {
                var o = e[n];
                if (!(o.time <= i)) break;
                for (var s = 0, l = t.length; s < l; s++) {
                    var h = t[s], u = h[o.eventName];
                    u && u.apply(h, o.params);
                }
            } else for (;n >= 0 && (o = e[n]).time >= i; n--) for (s = 0, l = t.length; s < l; s++) (u = (h = t[s])[o.eventName]) && u.apply(h, o.params);
            return n;
        }, n._updateEventScript = function(t, e) {
            var n = this.owner._scripts;
            if (n) {
                var i = t._clip, r = i._events, a = i._duration, o = e._elapsedTime, s = o % a, l = Math.abs(Math.floor(o / a) - Math.floor(e._lastElapsedTime / a)), h = e._elapsedTime >= e._lastElapsedTime;
                if (e._lastIsFront !== h && (h ? e._playEventIndex++ : e._playEventIndex--, e._lastIsFront = h), 
                0 == l) e._playEventIndex = this._eventScript(n, r, e._playEventIndex, s, h); else if (h) {
                    this._eventScript(n, r, e._playEventIndex, a, !0);
                    for (var u = 0, c = l - 1; u < c; u++) this._eventScript(n, r, 0, a, !0);
                    e._playEventIndex = this._eventScript(n, r, 0, s, !0);
                } else {
                    this._eventScript(n, r, e._playEventIndex, 0, !1);
                    var _ = r.length - 1;
                    for (u = 0, c = l - 1; u < c; u++) this._eventScript(n, r, _, 0, !1);
                    e._playEventIndex = this._eventScript(n, r, _, s, !1);
                }
            }
        }, n._updateClipDatas = function(t, e, n, i) {
            var r = t._clip, a = r._duration, o = t.clipStart * a + n._normalizedPlayTime * n._duration, s = t._currentFrameIndices, l = n._elapsedTime > n._lastElapsedTime;
            r._evaluateClipDatasRealTime(r._nodes, o, s, e, l);
        }, n._applyFloat = function(t, e, n, i, r, a, o) {
            if (n.updateMark === this._updateMark) if (i) t[e] += r * o; else {
                var s = t[e];
                t[e] = s + r * (o - s);
            } else if (a) t[e] = i ? n.defaultValue + o : o; else if (i) t[e] = n.defaultValue + r * o; else {
                var l = n.defaultValue;
                t[e] = l + r * (o - l);
            }
        }, n._applyPositionAndRotationEuler = function(t, e, n, i, r, a) {
            if (t.updateMark === this._updateMark) if (e) a.x += n * r.x, a.y += n * r.y, a.z += n * r.z; else {
                var o = a.x, s = a.y, l = a.z;
                a.x = o + n * (r.x - o), a.y = s + n * (r.y - s), a.z = l + n * (r.z - l);
            } else if (i) if (e) {
                var h = t.defaultValue;
                a.x = h.x + r.x, a.y = h.y + r.y, a.z = h.z + r.z;
            } else a.x = r.x, a.y = r.y, a.z = r.z; else if (h = t.defaultValue, e) a.x = h.x + n * r.x, 
            a.y = h.y + n * r.y, a.z = h.z + n * r.z; else {
                var u = h.x, c = h.y, _ = h.z;
                a.x = u + n * (r.x - u), a.y = c + n * (r.y - c), a.z = _ + n * (r.z - _);
            }
        }, n._applyRotation = function(t, n, i, r, a, o) {
            if (t.updateMark === this._updateMark) if (n) {
                var s = e._tempQuaternion1;
                kt.quaternionWeight(a, i, s), s.normalize(s), ht.multiply(o, s, o);
            } else ht.lerp(o, a, i, o); else if (r) if (n) {
                var l = t.defaultValue;
                ht.multiply(l, a, o);
            } else o.x = a.x, o.y = a.y, o.z = a.z, o.w = a.w; else l = t.defaultValue, n ? (s = e._tempQuaternion1, 
            kt.quaternionWeight(a, i, s), s.normalize(s), ht.multiply(l, s, o)) : ht.lerp(l, a, i, o);
        }, n._applyScale = function(t, n, i, r, a, o) {
            if (t.updateMark === this._updateMark) if (n) {
                var s = e._tempVector31;
                kt.scaleWeight(a, i, s), o.x = o.x * s.x, o.y = o.y * s.y, o.z = o.z * s.z;
            } else kt.scaleBlend(o, a, i, o); else if (r) if (n) {
                var l = t.defaultValue;
                o.x = l.x * a.x, o.y = l.y * a.y, o.z = l.z * a.z;
            } else o.x = a.x, o.y = a.y, o.z = a.z; else l = t.defaultValue, n ? (s = e._tempVector31, 
            kt.scaleWeight(a, i, s), o.x = l.x * s.x, o.y = l.y * s.y, o.z = l.z * s.z) : kt.scaleBlend(l, a, i, o);
        }, n._applyCrossData = function(t, n, i, r, a, o, s) {
            var l = t.propertyOwner;
            if (l) {
                switch (t.type) {
                  case 0:
                    for (var h = t.property, u = h.length - 1, c = 0; c < u && (l = l[h[c]]); c++) ;
                    var _ = a + s * (o - a);
                    this._applyFloat(l, h[u], t, n, i, r, _);
                    break;

                  case 1:
                    var d = l.localPosition, f = e._tempVector30, m = a.x, p = a.y, T = a.z;
                    f.x = m + s * (o.x - m), f.y = p + s * (o.y - p), f.z = T + s * (o.z - T), this._applyPositionAndRotationEuler(t, n, i, r, f, d), 
                    l.localPosition = d;
                    break;

                  case 2:
                    var E = l.localRotation, v = e._tempQuaternion0;
                    ht.lerp(a, o, s, v), this._applyRotation(t, n, i, r, v, E), l.localRotation = E;
                    break;

                  case 3:
                    var g = l.localScale, S = e._tempVector30;
                    kt.scaleBlend(a, o, s, S), this._applyScale(t, n, i, r, S, g), l.localScale = g;
                    break;

                  case 4:
                    var y = l.localRotationEuler, x = e._tempVector30;
                    m = a.x, p = a.y, T = a.z, x.x = m + s * (o.x - m), x.y = p + s * (o.y - p), x.z = T + s * (o.z - T), 
                    this._applyPositionAndRotationEuler(t, n, i, r, x, y), l.localRotationEuler = y;
                }
                t.updateMark = this._updateMark;
            }
        }, n._setClipDatasToNode = function(t, e, n, i) {
            for (var r = t._clip._nodes, a = t._nodeOwners, o = 0, s = r.count; o < s; o++) {
                var l = a[o];
                if (l) {
                    var h = l.propertyOwner;
                    if (h) {
                        switch (l.type) {
                          case 0:
                            for (var u = l.property, c = u.length - 1, _ = 0; _ < c && (h = h[u[_]]); _++) ;
                            this._applyFloat(h, u[c], l, e, n, i, r.getNodeByIndex(o).data);
                            break;

                          case 1:
                            var d = h.localPosition;
                            this._applyPositionAndRotationEuler(l, e, n, i, r.getNodeByIndex(o).data, d), h.localPosition = d;
                            break;

                          case 2:
                            var f = h.localRotation;
                            this._applyRotation(l, e, n, i, r.getNodeByIndex(o).data, f), h.localRotation = f;
                            break;

                          case 3:
                            var m = h.localScale;
                            this._applyScale(l, e, n, i, r.getNodeByIndex(o).data, m), h.localScale = m;
                            break;

                          case 4:
                            var p = h.localRotationEuler;
                            this._applyPositionAndRotationEuler(l, e, n, i, r.getNodeByIndex(o).data, p), h.localRotationEuler = p;
                        }
                        l.updateMark = this._updateMark;
                    }
                }
            }
        }, n._setCrossClipDatasToNode = function(t, e, n, i, r) {
            for (var a = t._crossNodesOwners, o = t._crossNodesOwnersCount, s = t.blendingMode !== be.BLENDINGMODE_OVERRIDE, l = t.defaultWeight, h = t._destCrossClipNodeIndices, u = n._clip._nodes, c = n._nodeOwners, _ = t._srcCrossClipNodeIndices, d = e._nodeOwners, f = e._clip._nodes, m = 0; m < o; m++) {
                var p = a[m];
                if (p) {
                    var T = _[m], E = h[m], v = -1 !== T ? f.getNodeByIndex(T).data : c[E].defaultValue, g = -1 !== E ? u.getNodeByIndex(E).data : d[T].defaultValue;
                    this._applyCrossData(p, s, l, r, v, g, i);
                }
            }
        }, n._setFixedCrossClipDatasToNode = function(t, e, n, i) {
            for (var r = t._crossNodesOwners, a = t._crossNodesOwnersCount, o = t.blendingMode !== be.BLENDINGMODE_OVERRIDE, s = t.defaultWeight, l = t._destCrossClipNodeIndices, h = e._clip._nodes, u = 0; u < a; u++) {
                var c = r[u];
                if (c) {
                    var _ = l[u], d = c.crossFixedValue, f = -1 !== _ ? h.getNodeByIndex(_).data : c.defaultValue;
                    this._applyCrossData(c, o, s, i, d, f, n);
                }
            }
        }, n._revertDefaultKeyframeNodes = function(t) {
            for (var e = t._nodeOwners, n = 0, i = e.length; n < i; n++) {
                var r = e[n];
                if (r) {
                    var a = r.propertyOwner;
                    if (a) switch (r.type) {
                      case 0:
                        for (var o = r.property, s = o.length - 1, l = 0; l < s && (a = a[o[l]]); l++) ;
                        a[o[s]] = r.defaultValue;
                        break;

                      case 1:
                        var h = a.localPosition, u = r.defaultValue;
                        h.x = u.x, h.y = u.y, h.z = u.z, a.localPosition = h;
                        break;

                      case 2:
                        var c = a.localRotation, _ = r.defaultValue;
                        c.x = _.x, c.y = _.y, c.z = _.z, c.w = _.w, a.localRotation = c;
                        break;

                      case 3:
                        var d = a.localScale;
                        u = r.defaultValue, d.x = u.x, d.y = u.y, d.z = u.z, a.localScale = d;
                        break;

                      case 4:
                        var f = a.localRotationEuler;
                        u = r.defaultValue, f.x = u.x, f.y = u.y, f.z = u.z, a.localRotationEuler = f;
                        break;

                      default:
                        throw "Animator:unknown type.";
                    }
                }
            }
        }, n._removeClip = function(t, e, n, i) {
            var r = i._clip;
            r._removeReference(), t.splice(n, 1), delete e[i.name];
            for (var a = t[n], o = r._nodes, s = a._nodeOwners, l = 0, h = o.count; l < h; l++) this._removeKeyframeNodeOwner(s, o.getNodeByIndex(l));
        }, n._onAdded = function() {
            var t = this.owner._parent;
            this.owner._setHierarchyAnimator(this, t ? t._hierarchyAnimator : null), this.owner._changeAnimatorToLinkSprite3DNoAvatar(this, !0, []);
        }, n._onDestroy = function() {
            for (var t = 0, e = this._controllerLayers.length; t < e; t++) for (var n = this._controllerLayers[t]._states, i = 0, r = n.length; i < r; i++) n[i]._clip._removeReference();
            var a = this.owner._parent;
            this.owner._clearHierarchyAnimator(this, a ? a._hierarchyAnimator : null);
        }, n._onEnableInScene = function() {
            this.owner._scene._animatorPool.add(this);
        }, n._onDisableInScene = function() {
            this.owner._scene._animatorPool.remove(this);
        }, n._onEnable = function() {
            for (var t = 0, e = this._controllerLayers.length; t < e; t++) this._controllerLayers[t].playOnWake && this.getDefaultState(t) && this.play(null, t, 0);
        }, n._handleSpriteOwnersBySprite = function(t, e, n) {
            for (var i = 0, r = this._controllerLayers.length; i < r; i++) for (var a = this._controllerLayers[i]._states, o = 0, s = a.length; o < s; o++) {
                var l = a[o], h = l._clip, u = e.join("/"), c = h._nodesMap[u];
                if (c) for (var _ = l._nodeOwners, d = 0, f = c.length; d < f; d++) t ? this._addKeyframeNodeOwner(_, c[d], n) : this._removeKeyframeNodeOwner(_, c[d]);
            }
        }, n._parse = function(t) {
            var e = t.avatar;
            if (e) {
                this.avatar = S.getRes(e.path);
                var n = e.linkSprites;
                this._linkSprites = n, this._linkToSprites(n);
            }
            t.clipPaths;
            for (var i = t.playOnWake, r = t.layers, a = 0; a < r.length; a++) {
                var o = r[a], s = new be(o.name);
                s.defaultWeight = 0 === a ? 1 : o.weight;
                var l = o.blendingMode;
                l && (s.blendingMode = l), this.addControllerLayer(s);
                for (var h = o.states, u = 0, c = h.length; u < c; u++) {
                    var _ = h[u], d = _.clipPath;
                    if (d) {
                        var f, m = _.name;
                        if (f = S.getRes(d)) {
                            var p = new Ge();
                            p.name = m, p.clip = f, this.addState(p, a), 0 === u && (this.getControllerLayer(a).defaultState = p);
                        }
                    }
                }
                void 0 !== i && (s.playOnWake = i);
            }
            var T = t.cullingMode;
            void 0 !== T && (this.cullingMode = T);
        }, n._update = function() {
            if (0 !== this._speed) {
                var t = !1;
                if (2 === this.cullingMode) {
                    t = !1;
                    for (var e = 0, n = this._renderableSprites.length; e < n; e++) if (this._renderableSprites[e]._render._visible) {
                        t = !0;
                        break;
                    }
                } else t = !0;
                this._updateMark++;
                var i = this.owner._scene.timer, r = i._delta / 1e3, a = i.scale;
                for (e = 0, n = this._controllerLayers.length; e < n; e++) {
                    var o = this._controllerLayers[e], s = o._playStateInfo, l = o._crossPlayStateInfo;
                    switch (d = o.blendingMode !== be.BLENDINGMODE_OVERRIDE, o._playType) {
                      case 0:
                        var h = o._currentPlayState, u = h._clip, c = this._speed * h.speed, _ = s._finish;
                        if (_ || this._updatePlayer(h, s, r * c, u.islooping), t) {
                            var d = o.blendingMode !== be.BLENDINGMODE_OVERRIDE;
                            this._updateClipDatas(h, d, s, a * c), this._setClipDatasToNode(h, d, o.defaultWeight, 0 === e), 
                            _ || this._updateEventScript(h, s);
                        }
                        break;

                      case 1:
                        u = (h = o._currentPlayState)._clip;
                        var f = o._crossPlayState, m = f._clip, p = o._crossDuration, T = l._startPlayTime, E = m._duration - T, v = p > E ? E / p : 1, g = this._speed * f.speed;
                        this._updatePlayer(f, l, r * v * g, m.islooping);
                        var S = (l._elapsedTime - T) / v / p;
                        S >= 1 ? t && (this._updateClipDatas(f, d, l, a * g), this._setClipDatasToNode(f, d, o.defaultWeight, 0 === e), 
                        o._playType = 0, o._currentPlayState = f, l._cloneTo(s)) : (s._finish || (c = this._speed * h.speed, 
                        this._updatePlayer(h, s, r * c, u.islooping), t && this._updateClipDatas(h, d, s, a * c)), 
                        t && (this._updateClipDatas(f, d, l, a * v * g), this._setCrossClipDatasToNode(o, h, f, S, 0 === e))), 
                        t && (this._updateEventScript(h, s), this._updateEventScript(f, l));
                        break;

                      case 2:
                        m = (f = o._crossPlayState)._clip, p = o._crossDuration, T = l._startPlayTime, v = p > (E = m._duration - T) ? E / p : 1, 
                        g = this._speed * f.speed, this._updatePlayer(f, l, r * v * g, m.islooping), t && ((S = (l._elapsedTime - T) / v / p) >= 1 ? (this._updateClipDatas(f, d, l, a * g), 
                        this._setClipDatasToNode(f, d, 1, 0 === e), o._playType = 0, o._currentPlayState = f, 
                        l._cloneTo(s)) : (this._updateClipDatas(f, d, l, a * v * g), this._setFixedCrossClipDatasToNode(o, f, S, 0 === e)), 
                        this._updateEventScript(f, l));
                    }
                }
                t && this._avatar && (R.supportWebGLPlusAnimation && this._updateAnimationNodeWorldMatix(this._animationNodeLocalPositions, this._animationNodeLocalRotations, this._animationNodeLocalScales, this._animationNodeWorldMatrixs, this._animationNodeParentIndices), 
                this._updateAvatarNodesToSprite());
            }
        }, n._cloneTo = function(t) {
            var e = t;
            e.avatar = this.avatar;
            for (var n = 0, i = this._controllerLayers.length; n < i; n++) {
                var r = this._controllerLayers[n];
                e.addControllerLayer(r.clone());
                for (var a = r._states, o = 0, s = a.length; o < s; o++) {
                    var l = a[o].clone();
                    e.addState(l, n), 0 == o && (e.getControllerLayer(n).defaultState = l);
                }
            }
            e._linkSprites = this._linkSprites, e._linkToSprites(this._linkSprites);
        }, n.getDefaultState = function(t) {
            return void 0 === t && (t = 0), this._controllerLayers[t].defaultState;
        }, n.addState = function(t, e) {
            void 0 === e && (e = 0);
            var n = t.name, i = this._controllerLayers[e], r = i._statesMap, a = i._states;
            if (r[n]) throw "Animator:this stat's name has exist.";
            r[n] = t, a.push(t), t._clip._addReference(), this._getOwnersByClip(t);
        }, n.removeState = function(t, e) {
            void 0 === e && (e = 0);
            for (var n = this._controllerLayers[e], i = n._states, r = n._statesMap, a = -1, o = 0, s = i.length; o < s; o++) if (i[o] === t) {
                a = o;
                break;
            }
            -1 !== a && this._removeClip(i, r, a, t);
        }, n.addControllerLayer = function(t) {
            this._controllerLayers.push(t);
        }, n.getControllerLayer = function(t) {
            return void 0 === t && (t = 0), this._controllerLayers[t];
        }, n.getCurrentAnimatorPlayState = function(t) {
            return void 0 === t && (t = 0), this._controllerLayers[t]._playStateInfo;
        }, n.play = function(t, e, n) {
            void 0 === e && (e = 0), void 0 === n && (n = Number.NEGATIVE_INFINITY);
            var i = this._controllerLayers[e], r = i.defaultState;
            if (!t && !r) throw new Error("Animator:must have  default clip value,please set clip property.");
            var a = i._currentPlayState, o = i._playStateInfo, s = t ? i._statesMap[t] : r, l = s._clip._duration;
            a !== s ? (n !== Number.NEGATIVE_INFINITY ? o._resetPlayState(l * n) : o._resetPlayState(0), 
            null !== a && a !== s && this._revertDefaultKeyframeNodes(a), i._playType = 0, i._currentPlayState = s) : n !== Number.NEGATIVE_INFINITY && (o._resetPlayState(l * n), 
            i._playType = 0);
            var h = s._scripts;
            if (h) for (var u = 0, c = h.length; u < c; u++) h[u].onStateEnter();
        }, n.crossFade = function(t, e, n, i) {
            void 0 === n && (n = 0), void 0 === i && (i = Number.NEGATIVE_INFINITY);
            var r = this._controllerLayers[n], a = r._statesMap[t];
            if (a) {
                var o = r._playType;
                if (-1 === o) return void this.play(t, n, i);
                var s = r._crossPlayStateInfo, l = r._crossNodesOwners, h = r._crossNodesOwnersIndicesMap, u = r._currentPlayState, c = a._nodeOwners, _ = r._destCrossClipNodeIndices, d = a._clip, f = d._nodes, m = d._nodesDic;
                switch (o) {
                  case 0:
                    var p = u._nodeOwners, T = r._srcCrossClipNodeIndices, E = u._clip, v = E._nodes, g = E._nodesDic;
                    r._playType = 1;
                    for (var S = ++r._crossMark, y = r._crossNodesOwnersCount = 0, x = 0, D = v.count; x < D; x++) {
                        var I = v.getNodeByIndex(x), R = I._indexInList, M = p[R];
                        if (M) {
                            var A = I.fullPath;
                            T[y] = R;
                            var C = m[A];
                            _[y] = C ? C._indexInList : -1, h[A] = S, l[y] = M, y++;
                        }
                    }
                    for (x = 0, D = f.count; x < D; x++) {
                        var L = (C = f.getNodeByIndex(x))._indexInList, O = c[L];
                        if (O) {
                            var N = C.fullPath;
                            g[N] || (T[y] = -1, _[y] = L, h[N] = S, l[y] = O, y++);
                        }
                    }
                    break;

                  case 1:
                  case 2:
                    for (r._playType = 2, x = 0, D = l.length; x < D; x++) {
                        var V = l[x];
                        V.saveCrossFixedValue(), C = m[V.fullPath], _[x] = C ? C._indexInList : -1;
                    }
                    for (y = r._crossNodesOwnersCount, S = r._crossMark, x = 0, D = f.count; x < D; x++) (O = c[L = (C = f.getNodeByIndex(x))._indexInList]) && h[N = C.fullPath] !== S && (_[y] = L, 
                    h[N] = S, V = c[L], l[y] = V, V.saveCrossFixedValue(), y++);
                }
                r._crossNodesOwnersCount = y, r._crossPlayState = a, r._crossDuration = u._clip._duration * e, 
                i !== Number.NEGATIVE_INFINITY ? s._resetPlayState(d._duration * i) : s._resetPlayState(0);
            }
            var w = a._scripts;
            if (w) for (x = 0, D = w.length; x < D; x++) w[x].onStateEnter();
        }, n._getAvatarOwnersAndInitDatasAsync = function() {
            for (var t = 0, e = this._controllerLayers.length; t < e; t++) for (var n = this._controllerLayers[t]._states, i = 0, r = n.length; i < r; i++) this._getOwnersByClip(n[i]);
            this._avatar._cloneDatasToAnimator(this);
            for (var a in this._linkAvatarSpritesData) {
                var o = this._linkAvatarSpritesData[a];
                if (o) for (var s = 0, l = o.length; s < l; s++) this._isLinkSpriteToAnimationNode(o[s], a, !0);
            }
        }, n._isLinkSpriteToAnimationNode = function(t, e, n) {
            if (this._avatar) {
                var i = this._avatarNodeMap[e];
                if (i) if (n) {
                    t._transform._dummy = i.transform, this._linkAvatarSprites.push(t);
                    var r = i.transform, a = t.transform;
                    if (!a.owner.isStatic && r) {
                        var o = a.worldMatrix, s = this.owner._transform._parent;
                        if (s) kt.matrix4x4MultiplyMFM(s.worldMatrix, r.getWorldMatrix(), o); else for (var l = o.elements, h = r.getWorldMatrix(), u = 0; u < 16; u++) l[u] = h[u];
                        a.worldMatrix = o;
                    }
                } else t._transform._dummy = null, this._linkAvatarSprites.splice(this._linkAvatarSprites.indexOf(t), 1);
            }
        }, n._isLinkSpriteToAnimationNodeData = function(t, e, n) {
            var i = this._linkAvatarSpritesData[e];
            n ? (i || (this._linkAvatarSpritesData[e] = i = []), i.push(t)) : i.splice(t, 1);
        }, n._updateAvatarNodesToSprite = function() {
            for (var t = 0, e = this._linkAvatarSprites.length; t < e; t++) {
                var n = this._linkAvatarSprites[t], i = n.transform._dummy, r = n.transform;
                if (!r.owner.isStatic && i) {
                    var a = r.worldMatrix, o = this.owner._transform;
                    kt.matrix4x4MultiplyMFM(o.worldMatrix, i.getWorldMatrix(), a), r.worldMatrix = a;
                }
            }
        }, n.linkSprite3DToAvatarNode = function(t, e) {
            return this._isLinkSpriteToAnimationNodeData(e, t, !0), this._isLinkSpriteToAnimationNode(e, t, !0), 
            !0;
        }, n.unLinkSprite3DToAvatarNode = function(t) {
            if (t._hierarchyAnimator === this) {
                var e = t.transform._dummy;
                if (e) {
                    var n = e._owner.name;
                    return this._isLinkSpriteToAnimationNodeData(t, n, !1), this._isLinkSpriteToAnimationNode(t, n, !1), 
                    !0;
                }
                return !1;
            }
            throw "Animator:sprite3D must belong to this Animator";
        }, n._updateAnimationNodeWorldMatix = function(t, e, n, i, r) {
            v.instance.updateAnimationNodeWorldMatix(t, e, n, r, i);
        }, a(0, n, "speed", function() {
            return this._speed;
        }, function(t) {
            this._speed = t;
        }), a(0, n, "avatar", function() {
            return this._avatar;
        }, function(t) {
            if (this._avatar !== t) if (this._avatar = t, t) this._getAvatarOwnersAndInitDatasAsync(), 
            this.owner._changeHierarchyAnimatorAvatar(this, t); else {
                var e = this.owner._parent;
                this.owner._changeHierarchyAnimatorAvatar(this, e ? e._hierarchyAnimator._avatar : null);
            }
        }), e._update = function(t) {
            for (var e = t._animatorPool, n = e.elements, i = 0, r = e.length; i < r; i++) {
                var a = n[i];
                a && a.enabled && a._update();
            }
        }, e._tempVector3Array0 = new Float32Array(3), e._tempVector3Array1 = new Float32Array(3), 
        e._tempQuaternionArray0 = new Float32Array(4), e._tempQuaternionArray1 = new Float32Array(4), 
        e.CULLINGMODE_ALWAYSANIMATE = 0, e.CULLINGMODE_CULLCOMPLETELY = 2, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new ht();
        }, "_tempQuaternion1", function() {
            return this._tempQuaternion1 = new ht();
        } ]), e;
    }(), je = function(t) {
        function e(t, n, i, r, a) {
            e.__super.call(this), this._owner = t, this._children = [], this._localMatrix = new Float32Array(16), 
            R.supportWebGLPlusAnimation ? (this._localPosition = new G(0, 0, 0, n), this._localRotation = new U(0, 0, 0, 1, i), 
            this._localScale = new G(0, 0, 0, r), this._worldMatrix = a) : (this._localPosition = new Tt(), 
            this._localRotation = new ht(), this._localScale = new Tt(), this._worldMatrix = new Float32Array(16)), 
            this._localQuaternionUpdate = !1, this._locaEulerlUpdate = !1, this._localUpdate = !1, 
            this._worldUpdate = !0;
        }
        r(e, "laya.d3.animation.AnimationTransform3D", T);
        var n = e.prototype;
        return n._getlocalMatrix = function() {
            return this._localUpdate && (kt._createAffineTransformationArray(this._localPosition, this._localRotation, this._localScale, this._localMatrix), 
            this._localUpdate = !1), this._localMatrix;
        }, n._onWorldTransform = function() {
            if (!this._worldUpdate) {
                this._worldUpdate = !0, this.event("transformchanged");
                for (var t = 0, e = this._children.length; t < e; t++) this._children[t]._onWorldTransform();
            }
        }, n.getWorldMatrix = function() {
            if (!R.supportWebGLPlusAnimation && this._worldUpdate) {
                if (null != this._parent) kt.matrix4x4MultiplyFFF(this._parent.getWorldMatrix(), this._getlocalMatrix(), this._worldMatrix); else {
                    var t = this._worldMatrix;
                    t[1] = t[2] = t[3] = t[4] = t[6] = t[7] = t[8] = t[9] = t[11] = t[12] = t[13] = t[14] = 0, 
                    t[0] = t[5] = t[10] = t[15] = 1;
                }
                this._worldUpdate = !1;
            }
            return R.supportWebGLPlusAnimation && this._worldUpdate && (this._worldUpdate = !1), 
            this._worldMatrix;
        }, n.setParent = function(t) {
            if (this._parent !== t) {
                if (this._parent) {
                    var e = this._parent._children, n = e.indexOf(this);
                    e.splice(n, 1);
                }
                t && (t._children.push(this), t && this._onWorldTransform()), this._parent = t;
            }
        }, a(0, n, "localPosition", function() {
            return this._localPosition;
        }, function(t) {
            this._localPosition = t, this._localUpdate = !0, this._onWorldTransform();
        }), a(0, n, "localRotation", function() {
            if (this._localQuaternionUpdate) {
                var t = this._localRotationEuler;
                ht.createFromYawPitchRoll(t.y / e._angleToRandin, t.x / e._angleToRandin, t.z / e._angleToRandin, this._localRotation), 
                this._localQuaternionUpdate = !1;
            }
            return this._localRotation;
        }, function(t) {
            this._localRotation = t, this._locaEulerlUpdate = !0, this._localQuaternionUpdate = !1, 
            this._localUpdate = !0, this._onWorldTransform();
        }), a(0, n, "localScale", function() {
            return this._localScale;
        }, function(t) {
            this._localScale = t, this._localUpdate = !0, this._onWorldTransform();
        }), a(0, n, "localRotationEuler", function() {
            if (this._locaEulerlUpdate) {
                this._localRotation.getYawPitchRoll(e._tempVector3);
                var t = e._tempVector3, n = this._localRotationEuler;
                n.x = t.y * e._angleToRandin, n.y = t.x * e._angleToRandin, n.z = t.z * e._angleToRandin, 
                this._locaEulerlUpdate = !1;
            }
            return this._localRotationEuler;
        }, function(t) {
            this._localRotationEuler = t, this._locaEulerlUpdate = !1, this._localQuaternionUpdate = !0, 
            this._localUpdate = !0, this._onWorldTransform();
        }), i(e, [ "_tempVector3", function() {
            return this._tempVector3 = new Tt();
        }, "_angleToRandin", function() {
            return this._angleToRandin = 180 / Math.PI;
        } ]), e;
    }(), Ke = function(t) {
        function e(t, n, i, r) {
            if (this._vertexCount = 0, this._canRead = !1, this._dataType = 0, this._vertexDeclaration = null, 
            void 0 === i && (i = !1), void 0 === r && (r = 0), e.__super.call(this), this._vertexCount = -1, 
            this._bufferUsage = n, this._bufferType = 34962, this._canRead = i, this._dataType = r, 
            this._byteLength = t, this.bind(), v.instance.bufferData(this._bufferType, this._byteLength, this._bufferUsage), 
            i) switch (r) {
              case 0:
                this._buffer = new Float32Array(t / 4);
                break;

              case 1:
                this._buffer = new Uint8Array(t);
            }
        }
        r(e, "laya.d3.graphics.VertexBuffer3D", t);
        var n = e.prototype;
        return n.bind = function() {
            return h._bindedVertexBuffer !== this._glBuffer && (v.instance.bindBuffer(34962, this._glBuffer), 
            h._bindedVertexBuffer = this._glBuffer, !0);
        }, n.setData = function(t, e, n, i) {
            if (void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 4294967295), 
            this.bind(), 0 !== n || 4294967295 !== i) switch (this._dataType) {
              case 0:
                t = new Float32Array(t.buffer, 4 * n, i);
                break;

              case 1:
                t = new Uint8Array(t.buffer, n, i);
            }
            switch (this._dataType) {
              case 0:
                v.instance.bufferSubData(this._bufferType, 4 * e, t);
                break;

              case 1:
                v.instance.bufferSubData(this._bufferType, e, t);
            }
            this._canRead && this._buffer.set(t, e);
        }, n.getData = function() {
            if (this._canRead) return this._buffer;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }, n.destroy = function() {
            t.prototype.destroy.call(this), this._buffer = null, this._vertexDeclaration = null;
        }, a(0, n, "vertexDeclaration", function() {
            return this._vertexDeclaration;
        }, function(t) {
            this._vertexDeclaration !== t && (this._vertexDeclaration = t, this._vertexCount = t ? this._byteLength / t.vertexStride : -1);
        }), a(0, n, "vertexCount", function() {
            return this._vertexCount;
        }), a(0, n, "canRead", function() {
            return this._canRead;
        }), e.DATATYPE_FLOAT32ARRAY = 0, e.DATATYPE_UINT8ARRAY = 1, e;
    }(h), qe = (function(t) {
        function e() {
            this._nativeConstraint = null, this._breakingImpulseThreshold = NaN, this._connectedBody = null, 
            this._feedbackEnabled = !1, e.__super.call(this);
        }
        r(e, "laya.d3.physics.constraints.ConstraintComponent", f);
        var i = e.prototype;
        i._onDestroy = function() {
            W._physics3D.destroy(this._nativeConstraint), this._nativeConstraint = null;
        }, a(0, i, "breakingImpulseThreshold", function() {
            return this._breakingImpulseThreshold;
        }, function(t) {
            this._nativeConstraint.BreakingImpulseThreshold = t, this._breakingImpulseThreshold = t;
        }), a(0, i, "enabled", function() {
            return n.superGet(f, this, "enabled");
        }, function(t) {
            this._nativeConstraint.IsEnabled = t, n.superSet(f, this, "enabled", t);
        }), a(0, i, "appliedImpulse", function() {
            return this._feedbackEnabled || (this._nativeConstraint.EnableFeedback(!0), this._feedbackEnabled = !0), 
            this._nativeConstraint.AppliedImpulse;
        }), a(0, i, "connectedBody", function() {
            return this._connectedBody;
        }, function(t) {
            this._connectedBody = t;
        });
    }(), function(t) {
        function e(t, n, i, r) {
            this._indexType = null, this._indexTypeByteCount = 0, this._indexCount = 0, this._canRead = !1, 
            void 0 === i && (i = 35044), void 0 === r && (r = !1), e.__super.call(this), this._indexType = t, 
            this._indexCount = n, this._bufferUsage = i, this._bufferType = 34963, this._canRead = r;
            var a = 0;
            if ("ushort" == t) this._indexTypeByteCount = 2; else {
                if ("ubyte" != t) throw new Error("unidentification index type.");
                this._indexTypeByteCount = 1;
            }
            a = this._indexTypeByteCount * n, this._byteLength = a;
            var o = u._curBindedBufferState;
            o ? o._bindedIndexBuffer === this ? v.instance.bufferData(this._bufferType, a, this._bufferUsage) : (o.unBind(), 
            this.bind(), v.instance.bufferData(this._bufferType, a, this._bufferUsage), o.bind()) : (this.bind(), 
            v.instance.bufferData(this._bufferType, a, this._bufferUsage)), r && ("ushort" == t ? this._buffer = new Uint16Array(n) : "ubyte" == t && (this._buffer = new Uint8Array(n)));
        }
        r(e, "laya.d3.graphics.IndexBuffer3D", t);
        var n = e.prototype;
        return n._bindForVAO = function() {
            if (!u._curBindedBufferState) throw "IndexBuffer3D: must bind current BufferState.";
            v.instance.bindBuffer(34963, this._glBuffer);
        }, n.bind = function() {
            if (u._curBindedBufferState) throw "IndexBuffer3D: must unbind current BufferState.";
            return h._bindedIndexBuffer !== this._glBuffer && (v.instance.bindBuffer(34963, this._glBuffer), 
            h._bindedIndexBuffer = this._glBuffer, !0);
        }, n.setData = function(t, e, n, i) {
            void 0 === e && (e = 0), void 0 === n && (n = 0), void 0 === i && (i = 4294967295);
            var r = 0;
            "ushort" == this._indexType ? (r = 2, 0 === n && 4294967295 === i || (t = new Uint16Array(t.buffer, n * r, i))) : "ubyte" == this._indexType && (r = 1, 
            0 === n && 4294967295 === i || (t = new Uint8Array(t.buffer, n * r, i)));
            var a = u._curBindedBufferState;
            if (a ? a._bindedIndexBuffer === this ? v.instance.bufferSubData(this._bufferType, e * r, t) : (a.unBind(), 
            this.bind(), v.instance.bufferSubData(this._bufferType, e * r, t), a.bind()) : (this.bind(), 
            v.instance.bufferSubData(this._bufferType, e * r, t)), this._canRead) if (0 !== e || 0 !== n || 4294967295 !== i) {
                var o = this._buffer.length - e;
                i > o && (i = o);
                for (var s = 0; s < i; s++) this._buffer[e + s] = t[s];
            } else this._buffer = t;
        }, n.getData = function() {
            if (this._canRead) return this._buffer;
            throw new Error("Can't read data from VertexBuffer with only write flag!");
        }, n.destroy = function() {
            t.prototype.destroy.call(this), this._buffer = null;
        }, a(0, n, "indexType", function() {
            return this._indexType;
        }), a(0, n, "indexTypeByteCount", function() {
            return this._indexTypeByteCount;
        }), a(0, n, "indexCount", function() {
            return this._indexCount;
        }), a(0, n, "canRead", function() {
            return this._canRead;
        }), e.INDEXTYPE_UBYTE = "ubyte", e.INDEXTYPE_USHORT = "ushort", e;
    }(h)), Qe = function(t) {
        function e(t, n, i, r) {
            this._renderState = new Z(), this._owner = t, this._cacheSharders = [], this._publicValidDefine = 0, 
            this._spriteValidDefine = 0, this._materialValidDefine = 0, this._validDefineMap = {}, 
            e.__super.call(this, n, i, null, this._validDefineMap);
            var a = this._owner._publicDefinesMap, o = this._owner._spriteDefinesMap, s = this._owner._materialDefinesMap;
            for (var l in this._validDefineMap) null != a[l] ? this._publicValidDefine |= a[l] : null != o[l] ? this._spriteValidDefine |= o[l] : null != s[l] && (this._materialValidDefine |= s[l]);
            this._stateMap = r;
        }
        r(e, "laya.d3.shader.ShaderPass", C);
        var n = e.prototype;
        return n._definesToNameDic = function(t, e) {
            for (var n = {}, i = 1, r = 0; r < 32 && !((i = 1 << r) > t); r++) t & i && (n[e[i]] = "");
            return n;
        }, n._compileToTree = function(t, e, n, i, r) {
            var a, o, s, l, h, u, c, _ = 0, d = 0, f = 0, m = 0;
            for (d = n; d < e.length; d++) if (!((s = e[d]).length < 1) && 0 !== (_ = s.indexOf("//"))) {
                if (_ >= 0 && (s = s.substr(0, _)), a = c || new L(i), c = null, a.text = s, (_ = s.indexOf("#")) >= 0) {
                    for (l = "#", m = _ + 1, f = s.length; m < f; m++) {
                        var p = s.charAt(m);
                        if (" " === p || "\t" === p || "?" === p) break;
                        l += p;
                    }
                    switch (a.name = l, l) {
                      case "#ifdef":
                      case "#ifndef":
                        if (a.setParent(t), t = a, r) for (u = s.substr(m).split(C._splitToWordExps3), m = 0; m < u.length; m++) (s = u[m]).length && (r[s] = !0);
                        continue;

                      case "#if":
                      case "#elif":
                        if (a.setParent(t), t = a, r) for (u = s.substr(m).split(C._splitToWordExps3), m = 0; m < u.length; m++) (s = u[m]).length && "defined" != s && (r[s] = !0);
                        continue;

                      case "#else":
                        o = (t = t.parent).childs[t.childs.length - 1], a.setParent(t), t = a;
                        continue;

                      case "#endif":
                        o = (t = t.parent).childs[t.childs.length - 1], a.setParent(t);
                        continue;

                      case "#include":
                        u = C.splitToWords(s, null);
                        var T = C.includes[u[1]];
                        if (!T) throw "ShaderCompile error no this include file:" + u[1];
                        if ((_ = u[0].indexOf("?")) < 0) {
                            a.setParent(t), s = T.getWith("with" == u[2] ? u[3] : null), this._compileToTree(a, s.split("\n"), 0, i, r), 
                            a.text = "";
                            continue;
                        }
                        a.setCondition(u[0].substr(_ + 1), 1), a.text = T.getWith("with" == u[2] ? u[3] : null);
                        break;

                      case "#import":
                        h = (u = C.splitToWords(s, null))[1], i.push({
                            node: a,
                            file: C.includes[h],
                            ofs: a.text.length
                        });
                        continue;
                    }
                } else {
                    if ((o = t.childs[t.childs.length - 1]) && !o.name) {
                        i.length > 0 && C.splitToWords(s, o), c = a, o.text += "\n" + s;
                        continue;
                    }
                    i.length > 0 && C.splitToWords(s, a);
                }
                a.setParent(t);
            }
        }, n.withCompile = function(t, e, n) {
            t &= this._publicValidDefine, e &= this._spriteValidDefine, n &= this._materialValidDefine;
            var i, r, a;
            if (r = this._cacheSharders[t]) if (a = r[e]) {
                if (i = a[n]) return i;
            } else a = r[e] = []; else a = (r = this._cacheSharders[t] = [])[e] = [];
            var o, s = this._definesToNameDic(t, this._owner._publicDefines), l = this._definesToNameDic(e, this._owner._spriteDefines), h = this._definesToNameDic(n, this._owner._materialDefines);
            if (Vt.debugMode) {
                var u = "";
                for (o in s) u += o + " ";
                var c = "";
                for (o in l) c += o + " ";
                var _ = "";
                for (o in h) _ += o + " ";
                F.shaderHighPrecision || (t += Vt.SHADERDEFINE_HIGHPRECISION), console.log("%cShader3DDebugMode---(Name:" + this._owner._owner._name + " PassIndex:" + this._owner._passes.indexOf(this) + " PublicDefine:" + t + " SpriteDefine:" + e + " MaterialDefine:" + n + " PublicDefineGroup:" + u + " SpriteDefineGroup:" + c + "MaterialDefineGroup: " + _ + ")---ShaderCompile3DDebugMode", "color:green");
            }
            var d = {}, f = "";
            if (s) for (o in s) f += "#define " + o + "\n", d[o] = !0;
            if (l) for (o in l) f += "#define " + o + "\n", d[o] = !0;
            if (h) for (o in h) f += "#define " + o + "\n", d[o] = !0;
            var m = this._VS.toscript(d, []), p = "";
            0 == m[0].indexOf("#version") && (p = m[0] + "\n", m.shift());
            var T = this._PS.toscript(d, []), E = "";
            return 0 == T[0].indexOf("#version") && (E = T[0] + "\n", T.shift()), i = new Xn(p + f + m.join("\n"), E + f + T.join("\n"), this._owner._attributeMap || this._owner._owner._attributeMap, this._owner._uniformMap || this._owner._owner._uniformMap, this), 
            a[n] = i, i;
        }, a(0, n, "renderState", function() {
            return this._renderState;
        }), e;
    }(), Je = function(t) {
        function e() {
            e.__super.call(this);
        }
        r(e, "laya.d3.core.BufferState", u);
        var n = e.prototype;
        return n.applyVertexBuffer = function(t) {
            if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            var e = v.instance, n = t.vertexDeclaration, i = null;
            i = R.supportWebGLPlusRendering ? n._shaderValues._nativeArray : n._shaderValues.getData(), 
            t.bind();
            for (var r in i) {
                var a = parseInt(r), o = i[r];
                e.enableVertexAttribArray(a), e.vertexAttribPointer(a, o[0], o[1], !!o[2], o[3], o[4]);
            }
        }, n.applyVertexBuffers = function(t) {
            if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            for (var e = v.instance, n = 0, i = t.length; n < i; n++) {
                var r = t[n], a = r.vertexDeclaration, o = null;
                o = R.supportWebGLPlusRendering ? a._shaderValues._nativeArray : a._shaderValues.getData(), 
                r.bind();
                for (var s in o) {
                    var l = parseInt(s), h = o[s];
                    e.enableVertexAttribArray(l), e.vertexAttribPointer(l, h[0], h[1], !!h[2], h[3], h[4]);
                }
            }
        }, n.applyInstanceVertexBuffer = function(t) {
            if (B._angleInstancedArrays) {
                if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
                var e = v.instance, n = t.vertexDeclaration, i = null;
                i = R.supportWebGLPlusRendering ? n._shaderValues._nativeArray : n._shaderValues.getData(), 
                t.bind();
                for (var r in i) {
                    var a = parseInt(r), o = i[r];
                    e.enableVertexAttribArray(a), e.vertexAttribPointer(a, o[0], o[1], !!o[2], o[3], o[4]), 
                    B._angleInstancedArrays.vertexAttribDivisorANGLE(a, 1);
                }
            }
        }, n.applyIndexBuffer = function(t) {
            if (u._curBindedBufferState !== this) throw "BufferState: must call bind() function first.";
            this._bindedIndexBuffer !== t && (t._bindForVAO(), this._bindedIndexBuffer = t);
        }, e;
    }(), $e = function(t) {
        function e() {
            this.angle = NaN, this.radius = NaN, this.length = NaN, this.emitType = 0, e.__super.call(this), 
            this.angle = 25 / 180 * Math.PI, this.radius = 1, this.length = 5, this.emitType = 0, 
            this.randomDirection = !1;
        }
        r(e, "laya.d3.core.particleShuriKen.module.shape.ConeShape", t);
        var n = e.prototype;
        return n._getShapeBoundBox = function(t) {
            var e = this.radius + this.length * Math.sin(this.angle), n = this.length * Math.cos(this.angle), i = t.min;
            i.x = i.y = -e, i.z = 0;
            var r = t.max;
            r.x = r.y = e, r.z = n;
        }, n._getSpeedBoundBox = function(t) {
            var e = Math.sin(this.angle), n = t.min;
            n.x = n.y = -e, n.z = 0;
            var i = t.max;
            i.x = i.y = e, i.z = 1;
        }, n.generatePositionAndDirection = function(t, n, i, r) {
            var a, o = e._tempPositionPoint, s = NaN, l = NaN, h = Math.cos(this.angle), u = Math.sin(this.angle);
            switch (this.emitType) {
              case 0:
                i ? (i.seed = r[16], Le._randomPointInsideUnitCircle(e._tempPositionPoint, i), r[16] = i.seed) : Le._randomPointInsideUnitCircle(e._tempPositionPoint), 
                s = o.x, l = o.y, t.x = s * this.radius, t.y = l * this.radius, t.z = 0, this.randomDirection ? (i ? (i.seed = r[17], 
                Le._randomPointInsideUnitCircle(e._tempDirectionPoint, i), r[17] = i.seed) : Le._randomPointInsideUnitCircle(e._tempDirectionPoint), 
                a = e._tempDirectionPoint, n.x = a.x * u, n.y = a.y * u) : (n.x = s * u, n.y = l * u), 
                n.z = h;
                break;

              case 1:
                i ? (i.seed = r[16], Le._randomPointUnitCircle(e._tempPositionPoint, i), r[16] = i.seed) : Le._randomPointUnitCircle(e._tempPositionPoint), 
                s = o.x, l = o.y, t.x = s * this.radius, t.y = l * this.radius, t.z = 0, this.randomDirection ? (i ? (i.seed = r[17], 
                Le._randomPointInsideUnitCircle(e._tempDirectionPoint, i), r[17] = i.seed) : Le._randomPointInsideUnitCircle(e._tempDirectionPoint), 
                a = e._tempDirectionPoint, n.x = a.x * u, n.y = a.y * u) : (n.x = s * u, n.y = l * u), 
                n.z = h;
                break;

              case 2:
                i ? (i.seed = r[16], Le._randomPointInsideUnitCircle(e._tempPositionPoint, i)) : Le._randomPointInsideUnitCircle(e._tempPositionPoint), 
                s = o.x, l = o.y, t.x = s * this.radius, t.y = l * this.radius, t.z = 0, n.x = s * u, 
                n.y = l * u, n.z = h, Tt.normalize(n, n), i ? (Tt.scale(n, this.length * i.getFloat(), n), 
                r[16] = i.seed) : Tt.scale(n, this.length * Math.random(), n), Tt.add(t, n, t), 
                this.randomDirection && (i ? (i.seed = r[17], Le._randomPointUnitSphere(n, i), r[17] = i.seed) : Le._randomPointUnitSphere(n));
                break;

              case 3:
                i ? (i.seed = r[16], Le._randomPointUnitCircle(e._tempPositionPoint, i)) : Le._randomPointUnitCircle(e._tempPositionPoint), 
                s = o.x, l = o.y, t.x = s * this.radius, t.y = l * this.radius, t.z = 0, n.x = s * u, 
                n.y = l * u, n.z = h, Tt.normalize(n, n), i ? (Tt.scale(n, this.length * i.getFloat(), n), 
                r[16] = i.seed) : Tt.scale(n, this.length * Math.random(), n), Tt.add(t, n, t), 
                this.randomDirection && (i ? (i.seed = r[17], Le._randomPointUnitSphere(n, i), r[17] = i.seed) : Le._randomPointUnitSphere(n));
                break;

              default:
                throw new Error("ConeShape:emitType is invalid.");
            }
        }, n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n.angle = this.angle, n.radius = this.radius, n.length = this.length, n.emitType = this.emitType, 
            n.randomDirection = this.randomDirection;
        }, i(e, [ "_tempPositionPoint", function() {
            return this._tempPositionPoint = new Et();
        }, "_tempDirectionPoint", function() {
            return this._tempDirectionPoint = new Et();
        } ]), e;
    }(k), tn = function(t) {
        function e(t) {
            e.__super.call(this), void 0 === t && (t = .5), this._radius = t, this._type = 1, 
            this._nativeShape = new W._physics3D.btSphereShape(t);
        }
        r(e, "laya.d3.physics.shape.SphereColliderShape", X);
        var n = e.prototype;
        return n.clone = function() {
            var t = new e(this._radius);
            return this.cloneTo(t), t;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), e;
    }(), en = function(t) {
        function e() {
            this.radius = NaN, this.arc = NaN, this.emitFromEdge = !1, e.__super.call(this), 
            this.radius = 1, this.arc = 2 * Math.PI, this.emitFromEdge = !1, this.randomDirection = !1;
        }
        r(e, "laya.d3.core.particleShuriKen.module.shape.CircleShape", t);
        var n = e.prototype;
        return n._getShapeBoundBox = function(t) {
            var e = t.min;
            e.x = e.z = -this.radius, e.y = 0;
            var n = t.max;
            n.x = n.z = this.radius, n.y = 0;
        }, n._getSpeedBoundBox = function(t) {
            var e = t.min;
            e.x = e.y = -1, e.z = 0;
            var n = t.max;
            n.x = n.y = 1, n.z = 0;
        }, n.generatePositionAndDirection = function(t, n, i, r) {
            var a = e._tempPositionPoint;
            i ? (i.seed = r[16], this.emitFromEdge ? Le._randomPointUnitArcCircle(this.arc, e._tempPositionPoint, i) : Le._randomPointInsideUnitArcCircle(this.arc, e._tempPositionPoint, i), 
            r[16] = i.seed) : this.emitFromEdge ? Le._randomPointUnitArcCircle(this.arc, e._tempPositionPoint) : Le._randomPointInsideUnitArcCircle(this.arc, e._tempPositionPoint), 
            t.x = -a.x, t.y = a.y, t.z = 0, Tt.scale(t, this.radius, t), this.randomDirection ? i ? (i.seed = r[17], 
            Le._randomPointUnitSphere(n, i), r[17] = i.seed) : Le._randomPointUnitSphere(n) : t.cloneTo(n);
        }, n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n.radius = this.radius, n.arc = this.arc, n.emitFromEdge = this.emitFromEdge, n.randomDirection = this.randomDirection;
        }, i(e, [ "_tempPositionPoint", function() {
            return this._tempPositionPoint = new Et();
        } ]), e;
    }(k), nn = function(t) {
        function e() {
            this._source = null, this._dest = null, this._shader = null, this._shaderData = null, 
            this._subShader = 0, e.__super.call(this);
        }
        r(e, "laya.d3.core.render.command.BlitCMD", Q);
        var n = e.prototype;
        return n.run = function() {
            this._shaderData.setTexture(le.SCREENTEXTURE_ID, this._source);
            var t = this._dest;
            t && t._start();
            for (var e = this._shader.getSubShaderAt(this._subShader)._passes, n = 0, i = e.length; n < i; n++) {
                var r = e[n].withCompile(0, 0, 0);
                r.bind(), this._shaderData && r.uploadUniforms(r._materialUniformParamsMap, this._shaderData, !0), 
                r.uploadRenderStateBlendDepth(this._shaderData), r.uploadRenderStateFrontFace(this._shaderData, !0, null), 
                Un.instance.render();
            }
            t && t._end();
        }, n.recover = function() {
            e._pool.push(this), this._dest = null, this._shader = null, this._shaderData = null;
        }, e.create = function(t, n, i, r, a) {
            void 0 === a && (a = 0);
            var o;
            return o = e._pool.length > 0 ? e._pool.pop() : new e(), o._source = t, o._dest = n, 
            o._shader = i, o._shaderData = r, o._subShader = a, o;
        }, e._pool = [], e;
    }(), rn = function(t) {
        function e() {
            e.__super.call(this);
        }
        r(e, "laya.d3.CastShadowList", $);
        var n = e.prototype;
        return n.add = function(t) {
            if (-1 !== t._indexInCastShadowList) throw "CastShadowList:element has  in  CastShadowList.";
            this._add(t), t._indexInCastShadowList = this.length++;
        }, n.remove = function(t) {
            var e = t._indexInCastShadowList;
            if (this.length--, e !== this.length) {
                var n = this.elements[this.length];
                this.elements[e] = n, n._indexInCastShadowList = e;
            }
            t._indexInCastShadowList = -1;
        }, e;
    }(), an = function(t) {
        function e(t, n, i) {
            switch (e.__super.call(this), void 0 === t && (t = .5), void 0 === n && (n = 1.25), 
            void 0 === i && (i = 1), this._radius = t, this._length = n, this._orientation = i, 
            this._type = 3, i) {
              case 0:
                this._nativeShape = new W._physics3D.btCapsuleShapeX(t, n - 2 * t);
                break;

              case 1:
                this._nativeShape = new W._physics3D.btCapsuleShape(t, n - 2 * t);
                break;

              case 2:
                this._nativeShape = new W._physics3D.btCapsuleShapeZ(t, n - 2 * t);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
        }
        r(e, "laya.d3.physics.shape.CapsuleColliderShape", t);
        var n = e.prototype;
        return n._setScale = function(n) {
            var i = e._tempVector30;
            switch (this.orientation) {
              case 0:
                i.x = n.x, i.y = i.z = Math.max(n.y, n.z);
                break;

              case 1:
                i.y = n.y, i.x = i.z = Math.max(n.x, n.z);
                break;

              case 2:
                i.z = n.z, i.x = i.y = Math.max(n.x, n.y);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
            t.prototype._setScale.call(this, i);
        }, n.clone = function() {
            var t = new e(this._radius, this._length, this._orientation);
            return this.cloneTo(t), t;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), a(0, n, "length", function() {
            return this._length;
        }), a(0, n, "orientation", function() {
            return this._orientation;
        }), i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        } ]), e;
    }(X), on = function(t) {
        function e(t) {
            this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null, 
            this._subIndexBufferCount = null, this._skinAnimationDatas = null, this._indexInMesh = 0, 
            this._vertexStart = 0, this._indexStart = 0, this._indexCount = 0, this._indices = null, 
            this._vertexBuffer = null, this._indexBuffer = null, this._id = 0, e.__super.call(this), 
            this._id = ++e._uniqueIDCounter, this._mesh = t, this._boneIndicesList = [], this._subIndexBufferStart = [], 
            this._subIndexBufferCount = [];
        }
        r(e, "laya.d3.resource.models.SubMesh", t);
        var n = e.prototype;
        return n._getType = function() {
            return e._type;
        }, n._render = function(t) {
            this._mesh._bufferState.bind();
            var e = t.renderElement.render._skinnedData;
            if (e) for (var n = e[this._indexInMesh], i = this._boneIndicesList.length, r = 0; r < i; r++) t.shader.uploadCustomUniform(Di.BONES, n[r]), 
            v.instance.drawElements(4, this._subIndexBufferCount[r], 5123, 2 * this._subIndexBufferStart[r]); else v.instance.drawElements(4, this._indexCount, 5123, 2 * this._indexStart);
            N.trianglesFaces += this._indexCount / 3, N.renderBatches++;
        }, n.getIndices = function() {
            return this._indices;
        }, n.destroy = function() {
            this._destroyed || (t.prototype.destroy.call(this), this._indexBuffer.destroy(), 
            this._indexBuffer = null, this._mesh = null, this._boneIndicesList = null, this._subIndexBufferStart = null, 
            this._subIndexBufferCount = null, this._skinAnimationDatas = null);
        }, e._uniqueIDCounter = 0, i(e, [ "_type", function() {
            return this._type = et._typeCounter++;
        } ]), e;
    }(et), sn = function(t) {
        function e(t) {
            e.__super.call(this), this._tempRotationMatrix = new He(), this._uvLength = new Et(), 
            this._bufferState = new Je(), this._firstActiveElement = 0, this._firstNewElement = 0, 
            this._firstFreeElement = 0, this._firstRetiredElement = 0, this._owner = t, this._ownerRender = t.particleRenderer, 
            this._boundingBoxCorners = o(8, null), this._boundingSphere = new Mt(new Tt(), Number.MAX_VALUE), 
            this._boundingBox = new ze(new Tt(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE), new Tt(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE)), 
            this._currentTime = 0, this._isEmitting = !1, this._isPlaying = !1, this._isPaused = !1, 
            this._burstsIndex = 0, this._frameRateTime = 0, this._emissionTime = 0, this._totalDelayTime = 0, 
            this._simulateUpdate = !1, this._bufferMaxParticles = 1, this.duration = 5, this.looping = !0, 
            this.prewarm = !1, this.startDelayType = 0, this.startDelay = 0, this.startDelayMin = 0, 
            this.startDelayMax = 0, this._startLifetimeType = 0, this._startLifetimeConstant = 5, 
            this._startLifeTimeGradient = new Xt(), this._startLifetimeConstantMin = 0, this._startLifetimeConstantMax = 5, 
            this._startLifeTimeGradientMin = new Xt(), this._startLifeTimeGradientMax = new Xt(), 
            this._maxStartLifetime = 5, this.startSpeedType = 0, this.startSpeedConstant = 5, 
            this.startSpeedConstantMin = 0, this.startSpeedConstantMax = 5, this.threeDStartSize = !1, 
            this.startSizeType = 0, this.startSizeConstant = 1, this.startSizeConstantSeparate = new Tt(1, 1, 1), 
            this.startSizeConstantMin = 0, this.startSizeConstantMax = 1, this.startSizeConstantMinSeparate = new Tt(0, 0, 0), 
            this.startSizeConstantMaxSeparate = new Tt(1, 1, 1), this.threeDStartRotation = !1, 
            this.startRotationType = 0, this.startRotationConstant = 0, this.startRotationConstantSeparate = new Tt(0, 0, 0), 
            this.startRotationConstantMin = 0, this.startRotationConstantMax = 0, this.startRotationConstantMinSeparate = new Tt(0, 0, 0), 
            this.startRotationConstantMaxSeparate = new Tt(0, 0, 0), this.randomizeRotationDirection = 0, 
            this.startColorType = 0, this.startColorConstant = new mt(1, 1, 1, 1), this.startColorConstantMin = new mt(1, 1, 1, 1), 
            this.startColorConstantMax = new mt(1, 1, 1, 1), this.gravityModifier = 0, this.simulationSpace = 1, 
            this.scaleMode = 0, this.playOnAwake = !0, this._rand = new wt(0), this.autoRandomSeed = !0, 
            this.randomSeed = new Uint32Array(1), this._randomSeeds = new Uint32Array(e._RANDOMOFFSET.length), 
            this.isPerformanceMode = !0, this._emission = new Rt(), this._emission.enbale = !0;
        }
        r(e, "laya.d3.core.particleShuriKen.ShurikenParticleSystem", t);
        var s = e.prototype;
        return n.imps(s, {
            "laya.d3.core.IClone": !0
        }), s._getVertexBuffer = function(t) {
            return void 0 === t && (t = 0), 0 === t ? this._vertexBuffer : null;
        }, s._getIndexBuffer = function() {
            return this._indexBuffer;
        }, s._generateBoundingSphere = function() {
            var t = this._boundingSphere.center;
            t.x = 0, t.y = 0, t.z = 0, this._boundingSphere.radius = Number.MAX_VALUE;
        }, s._generateBoundingBox = function() {
            var t = this._owner.particleRenderer, n = this._boundingBox.min, i = this._boundingBox.max, r = 0, a = 0, o = NaN;
            switch (this.startLifetimeType) {
              case 0:
                o = this.startLifetimeConstant;
                break;

              case 1:
                o = -Number.MAX_VALUE;
                var s = s;
                for (r = 0, a = s.gradientCount; r < a; r++) o = Math.max(o, s.getValueByIndex(r));
                break;

              case 2:
                o = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                break;

              case 3:
                o = -Number.MAX_VALUE;
                var l = l;
                for (r = 0, a = l.gradientCount; r < a; r++) o = Math.max(o, l.getValueByIndex(r));
                var h = h;
                for (r = 0, a = h.gradientCount; r < a; r++) o = Math.max(o, h.getValueByIndex(r));
            }
            var u = NaN, c = NaN;
            switch (this.startSpeedType) {
              case 0:
                u = c = this.startSpeedConstant;
                break;

              case 1:
                break;

              case 2:
                u = this.startLifetimeConstantMin, c = this.startLifetimeConstantMax;
            }
            var _, d, f, m;
            this._shape && this._shape.enable || (_ = d = Tt._ZERO, f = Tt._ZERO, m = Tt._UnitZ);
            var p = new Tt(f.x * u, f.y * u, f.z * u), T = new Tt(m.x * c, m.y * c, m.z * c);
            if (this._velocityOverLifetime && this._velocityOverLifetime.enbale) {
                var E = this._velocityOverLifetime.velocity;
                switch (E.type) {
                  case 0:
                    E.constant;
                    break;

                  case 1:
                    new Tt(E.gradientX.getAverageValue(), E.gradientY.getAverageValue(), E.gradientZ.getAverageValue());
                    break;

                  case 2:
                    E.constantMin, E.constantMax;
                    break;

                  case 3:
                    new Tt(E.gradientXMin.getAverageValue(), E.gradientYMin.getAverageValue(), E.gradientZMin.getAverageValue()), 
                    new Tt(E.gradientXMax.getAverageValue(), E.gradientYMax.getAverageValue(), E.gradientZMax.getAverageValue());
                }
            }
            var v, g, S = this._owner.transform, y = S.position, x = e._tempVector39, D = t.renderMode;
            switch (this.scaleMode) {
              case 0:
                var I = S.scale;
                v = I, x.x = I.x, x.y = I.z, x.z = I.y, 1 === D && (g = I);
                break;

              case 1:
                var R = S.localScale;
                v = R, x.x = R.x, x.y = R.z, x.z = R.y, 1 === D && (g = R);
                break;

              case 2:
                v = S.scale, x.x = x.y = x.z = 1, 1 === D && (g = Tt._ONE);
            }
            var M, A;
            switch (this._velocityOverLifetime && this._velocityOverLifetime.enbale || (M = new Tt(p.x * o, p.y * o, p.z * o), 
            A = new Tt(T.x * o, T.y * o, T.z * o), 2 != this.scaleMode ? (Tt.add(_, M, n), Tt.multiply(v, n, n), 
            Tt.add(d, A, i), Tt.multiply(v, i, i)) : (Tt.multiply(v, _, n), Tt.add(n, M, n), 
            Tt.multiply(v, d, i), Tt.add(i, A, i))), this.simulationSpace) {
              case 0:
                break;

              case 1:
                Tt.add(n, y, n), Tt.add(i, y, i);
            }
            var C = NaN, L = NaN;
            switch (this.startSizeType) {
              case 0:
                if (this.threeDStartSize) {
                    var O = O;
                    C = Math.max(O.x, O.y), 1 === D && (L = O.y);
                } else C = this.startSizeConstant, 1 === D && (L = this.startSizeConstant);
                break;

              case 1:
                break;

              case 2:
                if (this.threeDStartSize) {
                    var N = N;
                    C = Math.max(N.x, N.y), 1 === D && (L = N.y);
                } else C = this.startSizeConstantMax, 1 === D && (L = this.startSizeConstantMax);
            }
            this._sizeOverLifetime && this._sizeOverLifetime.enbale && (this._sizeOverLifetime.size, 
            C *= this._sizeOverLifetime.size.getMaxSizeInGradient());
            var V = e._tempVector30, w = NaN, P = NaN;
            switch (D) {
              case 0:
                w = C * e.halfKSqrtOf2, Tt.scale(x, C, V), Tt.subtract(n, V, n), Tt.add(i, V, i);
                break;

              case 1:
                var b = e._tempVector31, F = e._tempVector32, B = e._tempVector33, U = e._tempVector34;
                this._velocityOverLifetime && this._velocityOverLifetime.enbale || (Tt.multiply(g, T, F), 
                Tt.multiply(g, p, B));
                var z = L * t.stretchedBillboardLengthScale, G = Tt.scalarLength(F) * t.stretchedBillboardSpeedScale + z, H = Tt.scalarLength(B) * t.stretchedBillboardSpeedScale + z, k = e._tempVector35, X = e._tempVector36;
                Tt.normalize(F, k), Tt.scale(k, G, U), Tt.subtract(A, U, U), Tt.normalize(B, X), 
                Tt.scale(X, H, b), Tt.add(M, b, b), w = C * e.halfKSqrtOf2, Tt.scale(x, w, V);
                var W = e._tempVector37, Y = e._tempVector38;
                Tt.scale(k, .5, W), Tt.scale(X, .5, Y), Tt.multiply(W, x, W), Tt.multiply(Y, x, Y), 
                Tt.add(n, Y, n), Tt.min(n, U, n), Tt.subtract(n, V, n), Tt.subtract(i, W, i), Tt.max(i, b, i), 
                Tt.add(i, V, i);
                break;

              case 2:
                P = .5 * (C *= Math.cos(.7853981633974483)), V.x = x.x * P, V.y = x.z * P, Tt.subtract(n, V, n), 
                Tt.add(i, V, i);
                break;

              case 3:
                P = .5 * (C *= Math.cos(.7853981633974483)), Tt.scale(x, P, V), Tt.subtract(n, V, n), 
                Tt.add(i, V, i);
            }
            this._boundingBox.getCorners(this._boundingBoxCorners);
        }, s._updateEmission = function() {
            if (this.isAlive) if (this._simulateUpdate) this._simulateUpdate = !1; else {
                var t = this._startUpdateLoopCount === N.loopCount || this._isPaused ? 0 : this._owner._scene.timer._delta / 1e3;
                t = Math.min(e._maxElapsedTime, t), this._updateParticles(t);
            }
        }, s._updateParticles = function(t) {
            (4 !== this._ownerRender.renderMode || this._ownerRender.mesh) && (this._currentTime += t, 
            this._retireActiveParticles(), this._freeRetiredParticles(), this._totalDelayTime += t, 
            this._totalDelayTime < this._playStartDelay || this._emission.enbale && this._isEmitting && !this._isPaused && this._advanceTime(t, this._currentTime));
        }, s._updateParticlesSimulationRestart = function(t) {
            this._firstActiveElement = 0, this._firstNewElement = 0, this._firstFreeElement = 0, 
            this._firstRetiredElement = 0, this._burstsIndex = 0, this._frameRateTime = t, this._emissionTime = 0, 
            this._totalDelayTime = 0, this._currentTime = t;
            var e = t;
            e < this._playStartDelay ? this._totalDelayTime = e : this._emission.enbale && this._advanceTime(t, t);
        }, s._retireActiveParticles = function() {
            for (;this._firstActiveElement != this._firstNewElement; ) {
                var t = this._firstActiveElement * this._floatCountPerVertex * this._vertexStride, e = t + this._timeIndex;
                if (this._currentTime - this._vertices[e] + 1e-4 < this._vertices[t + this._startLifeTimeIndex]) break;
                this._vertices[e] = this._drawCounter, this._firstActiveElement++, this._firstActiveElement >= this._bufferMaxParticles && (this._firstActiveElement = 0);
            }
        }, s._freeRetiredParticles = function() {
            for (;this._firstRetiredElement != this._firstActiveElement; ) {
                var t = this._drawCounter - this._vertices[this._firstRetiredElement * this._floatCountPerVertex * this._vertexStride + this._timeIndex];
                if (this.isPerformanceMode && t < 3) break;
                this._firstRetiredElement++, this._firstRetiredElement >= this._bufferMaxParticles && (this._firstRetiredElement = 0);
            }
        }, s._burst = function(t, e) {
            for (var n = 0, i = this._emission._bursts, r = i.length; this._burstsIndex < r; this._burstsIndex++) {
                var a = i[this._burstsIndex], o = a.time;
                if (!(t <= o && o < e)) break;
                var s = 0;
                this.autoRandomSeed ? s = x.lerp(a.minCount, a.maxCount, Math.random()) : (this._rand.seed = this._randomSeeds[0], 
                s = x.lerp(a.minCount, a.maxCount, this._rand.getFloat()), this._randomSeeds[0] = this._rand.seed), 
                n += s;
            }
            return n;
        }, s._advanceTime = function(t, e) {
            var n = 0, i = this._emissionTime;
            this._emissionTime += t;
            var r = 0;
            if (this._emissionTime > this.duration) {
                if (!this.looping) {
                    for (r = Math.min(this.maxParticles - this.aliveParticleCount, r), n = 0; n < r; n++) this.emit(e);
                    return this._isPlaying = !1, void this.stop();
                }
                r += this._burst(i, this._emissionTime), this._emissionTime -= this.duration, this._burstsIndex = 0, 
                r += this._burst(0, this._emissionTime);
            } else r += this._burst(i, this._emissionTime);
            for (r = Math.min(this.maxParticles - this.aliveParticleCount, r), n = 0; n < r; n++) this.emit(e);
            var a = this.emission.emissionRate;
            if (a > 0) {
                var o = 1 / a;
                for (this._frameRateTime += o, this._frameRateTime = this._currentTime - (this._currentTime - this._frameRateTime) % this._maxStartLifetime; this._frameRateTime <= e && this.emit(this._frameRateTime); ) this._frameRateTime += o;
                this._frameRateTime = Math.floor(e / o) * o;
            }
        }, s._initBufferDatas = function() {
            this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy());
            var t = this._ownerRender, e = t.renderMode;
            if (-1 !== e && this.maxParticles > 0) {
                var n, i, r = 0, a = 0, o = 0, s = 0, l = 0, h = 0, u = 0, c = t.mesh;
                if (4 === e) {
                    if (c) {
                        if (c._vertexBuffers.length > 1) throw new Error("ShurikenParticleSystem: submesh Count mesh be One or all subMeshes have the same vertexDeclaration.");
                        i = bn.vertexDeclaration, this._floatCountPerVertex = i.vertexStride / 4, this._startLifeTimeIndex = 12, 
                        this._timeIndex = 16, this._vertexStride = c._vertexBuffers[0].vertexCount;
                        var _ = this._bufferMaxParticles * this._vertexStride, d = _ % 65535;
                        if (Math.floor(_ / 65535) + 1 > 1) throw new Error("ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.");
                        h = i.vertexStride * d, this._vertexBuffer = new Ke(h, 35048), this._vertexBuffer.vertexDeclaration = i, 
                        this._vertices = new Float32Array(this._floatCountPerVertex * d), this._indexStride = c._indexBuffer.indexCount;
                        var f = c._indexBuffer.getData(), m = this._bufferMaxParticles * this._indexStride;
                        for (this._indexBuffer = new qe("ushort", m, 35044), n = new Uint16Array(m), u = h + 2 * m, 
                        s = 0, r = 0; r < this._bufferMaxParticles; r++) {
                            var p = r * this._vertexStride;
                            for (a = 0, o = f.length; a < o; a++) n[s++] = p + f[a];
                        }
                        this._indexBuffer.setData(n), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
                        this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
                    }
                } else {
                    for (i = wn.vertexDeclaration, this._floatCountPerVertex = i.vertexStride / 4, this._startLifeTimeIndex = 7, 
                    this._timeIndex = 11, this._vertexStride = 4, h = i.vertexStride * this._bufferMaxParticles * this._vertexStride, 
                    this._vertexBuffer = new Ke(h, 35048), this._vertexBuffer.vertexDeclaration = i, 
                    this._vertices = new Float32Array(this._floatCountPerVertex * this._bufferMaxParticles * this._vertexStride), 
                    r = 0; r < this._bufferMaxParticles; r++) l = r * this._floatCountPerVertex * this._vertexStride, 
                    this._vertices[l] = -.5, this._vertices[l + 1] = -.5, this._vertices[l + 2] = 0, 
                    this._vertices[l + 3] = 1, l += this._floatCountPerVertex, this._vertices[l] = .5, 
                    this._vertices[l + 1] = -.5, this._vertices[l + 2] = 1, this._vertices[l + 3] = 1, 
                    l += this._floatCountPerVertex, this._vertices[l] = .5, this._vertices[l + 1] = .5, 
                    this._vertices[l + 2] = 1, this._vertices[l + 3] = 0, l += this._floatCountPerVertex, 
                    this._vertices[l] = -.5, this._vertices[l + 1] = .5, this._vertices[l + 2] = 0, 
                    this._vertices[l + 3] = 0;
                    for (this._indexStride = 6, this._indexBuffer = new qe("ushort", 6 * this._bufferMaxParticles, 35044), 
                    n = new Uint16Array(6 * this._bufferMaxParticles), r = 0; r < this._bufferMaxParticles; r++) {
                        s = 6 * r;
                        var T = r * this._vertexStride, E = T + 2;
                        n[s++] = T, n[s++] = E, n[s++] = T + 1, n[s++] = T, n[s++] = T + 3, n[s++] = E;
                    }
                    this._indexBuffer.setData(n), u = h + 6 * this._bufferMaxParticles * 2, this._bufferState.bind(), 
                    this._bufferState.applyVertexBuffer(this._vertexBuffer), this._bufferState.applyIndexBuffer(this._indexBuffer), 
                    this._bufferState.unBind();
                }
                M._addMemory(u, u);
            }
        }, s.destroy = function() {
            t.prototype.destroy.call(this);
            var e = this._vertexBuffer._byteLength + 2 * this._indexBuffer.indexCount;
            M._addMemory(-e, -e), this._bufferState.destroy(), this._vertexBuffer.destroy(), 
            this._indexBuffer.destroy(), this._emission.destroy(), this._bufferState = null, 
            this._vertexBuffer = null, this._indexBuffer = null, this._owner = null, this._vertices = null, 
            this._indexBuffer = null, this._emission = null, this._shape = null, this.startLifeTimeGradient = null, 
            this.startLifeTimeGradientMin = null, this.startLifeTimeGradientMax = null, this.startSizeConstantSeparate = null, 
            this.startSizeConstantMinSeparate = null, this.startSizeConstantMaxSeparate = null, 
            this.startRotationConstantSeparate = null, this.startRotationConstantMinSeparate = null, 
            this.startRotationConstantMaxSeparate = null, this.startColorConstant = null, this.startColorConstantMin = null, 
            this.startColorConstantMax = null, this._velocityOverLifetime = null, this._colorOverLifetime = null, 
            this._sizeOverLifetime = null, this._rotationOverLifetime = null, this._textureSheetAnimation = null;
        }, s.emit = function(t) {
            var n = e._tempPosition, i = e._tempDirection;
            return this._shape && this._shape.enable ? this.autoRandomSeed ? this._shape.generatePositionAndDirection(n, i) : this._shape.generatePositionAndDirection(n, i, this._rand, this._randomSeeds) : (n.x = n.y = n.z = 0, 
            i.x = i.y = 0, i.z = 1), this.addParticle(n, i, t);
        }, s.addParticle = function(t, e, n) {
            Tt.normalize(e, e);
            var i = this._firstFreeElement + 1;
            if (i >= this._bufferMaxParticles && (i = 0), i === this._firstRetiredElement) return !1;
            if (jt.create(this, this._ownerRender, this._owner.transform), this._currentTime - n >= jt.startLifeTime) return !0;
            var r = NaN, a = NaN, o = NaN, s = NaN, l = NaN, h = NaN, u = NaN, c = this._velocityOverLifetime && this._velocityOverLifetime.enbale;
            if (c) {
                var _ = this._velocityOverLifetime.velocity.type;
                2 === _ || 3 === _ ? this.autoRandomSeed ? (r = Math.random(), a = Math.random(), 
                o = Math.random()) : (this._rand.seed = this._randomSeeds[9], r = this._rand.getFloat(), 
                a = this._rand.getFloat(), o = this._rand.getFloat(), this._randomSeeds[9] = this._rand.seed) : c = !1;
            } else c = !1;
            var d = this._colorOverLifetime && this._colorOverLifetime.enbale;
            d && 3 === this._colorOverLifetime.color.type ? this.autoRandomSeed ? s = Math.random() : (this._rand.seed = this._randomSeeds[10], 
            s = this._rand.getFloat(), this._randomSeeds[10] = this._rand.seed) : d = !1;
            var f = this._sizeOverLifetime && this._sizeOverLifetime.enbale;
            f && 3 === this._sizeOverLifetime.size.type ? this.autoRandomSeed ? l = Math.random() : (this._rand.seed = this._randomSeeds[11], 
            l = this._rand.getFloat(), this._randomSeeds[11] = this._rand.seed) : f = !1;
            var m = this._rotationOverLifetime && this._rotationOverLifetime.enbale;
            if (m) {
                var p = this._rotationOverLifetime.angularVelocity.type;
                2 === p || 3 === p ? this.autoRandomSeed ? h = Math.random() : (this._rand.seed = this._randomSeeds[12], 
                h = this._rand.getFloat(), this._randomSeeds[12] = this._rand.seed) : m = !1;
            } else m = !1;
            var T = this._textureSheetAnimation && this._textureSheetAnimation.enable;
            T && 3 === this._textureSheetAnimation.frame.type ? this.autoRandomSeed ? u = Math.random() : (this._rand.seed = this._randomSeeds[15], 
            u = this._rand.getFloat(), this._randomSeeds[15] = this._rand.seed) : T = !1;
            var E, v = this._firstFreeElement * this._floatCountPerVertex * this._vertexStride, g = jt.startUVInfo[0], S = jt.startUVInfo[1], y = jt.startUVInfo[2], x = jt.startUVInfo[3], D = 0, I = 0, R = 0, M = 0, A = 0, C = this._ownerRender;
            if (4 === C.renderMode) {
                var L = C.mesh._vertexBuffers[0];
                E = L.getData();
                var O = L.vertexDeclaration;
                I = O.getVertexElementByUsage(0).offset / 4;
                var N = O.getVertexElementByUsage(1);
                R = N ? N.offset / 4 : -1;
                var V = O.getVertexElementByUsage(2);
                M = V ? V.offset / 4 : -1, D = O.vertexStride / 4, A = 0;
            } else {
                this._vertices[v + 2] = y, this._vertices[v + 3] = x + S;
                var w = v + this._floatCountPerVertex;
                this._vertices[w + 2] = y + g, this._vertices[w + 3] = x + S;
                var P = w + this._floatCountPerVertex;
                this._vertices[P + 2] = y + g, this._vertices[P + 3] = x;
                var b = P + this._floatCountPerVertex;
                this._vertices[b + 2] = y, this._vertices[b + 3] = x;
            }
            for (var F = v, B = v + this._floatCountPerVertex * this._vertexStride; F < B; F += this._floatCountPerVertex) {
                var U = 0;
                if (4 === C.renderMode) {
                    U = F;
                    var z = D * A++, G = z + I;
                    this._vertices[U++] = E[G++], this._vertices[U++] = E[G++], this._vertices[U++] = E[G], 
                    -1 === R ? (this._vertices[U++] = 1, this._vertices[U++] = 1, this._vertices[U++] = 1, 
                    this._vertices[U++] = 1) : (G = z + R, this._vertices[U++] = E[G++], this._vertices[U++] = E[G++], 
                    this._vertices[U++] = E[G++], this._vertices[U++] = E[G]), -1 === M ? (this._vertices[U++] = 0, 
                    this._vertices[U++] = 0) : (G = z + M, this._vertices[U++] = y + E[G++] * g, this._vertices[U++] = x + E[G] * S);
                } else U = F + 4;
                switch (this._vertices[U++] = t.x, this._vertices[U++] = t.y, this._vertices[U++] = t.z, 
                this._vertices[U++] = jt.startLifeTime, this._vertices[U++] = e.x, this._vertices[U++] = e.y, 
                this._vertices[U++] = e.z, this._vertices[U++] = n, this._vertices[U++] = jt.startColor.x, 
                this._vertices[U++] = jt.startColor.y, this._vertices[U++] = jt.startColor.z, this._vertices[U++] = jt.startColor.w, 
                this._vertices[U++] = jt.startSize[0], this._vertices[U++] = jt.startSize[1], this._vertices[U++] = jt.startSize[2], 
                this._vertices[U++] = jt.startRotation[0], this._vertices[U++] = jt.startRotation[1], 
                this._vertices[U++] = jt.startRotation[2], this._vertices[U++] = jt.startSpeed, 
                d && (this._vertices[U + 1] = s), f && (this._vertices[U + 2] = l), m && (this._vertices[U + 3] = h), 
                T && (this._vertices[U + 4] = u), c && (this._vertices[U + 5] = r, this._vertices[U + 6] = a, 
                this._vertices[U + 7] = o), this.simulationSpace) {
                  case 0:
                    U += 8, this._vertices[U++] = jt.simulationWorldPostion[0], this._vertices[U++] = jt.simulationWorldPostion[1], 
                    this._vertices[U++] = jt.simulationWorldPostion[2], this._vertices[U++] = jt.simulationWorldRotation[0], 
                    this._vertices[U++] = jt.simulationWorldRotation[1], this._vertices[U++] = jt.simulationWorldRotation[2], 
                    this._vertices[U++] = jt.simulationWorldRotation[3];
                    break;

                  case 1:
                    break;

                  default:
                    throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
                }
            }
            return this._firstFreeElement = i, !0;
        }, s.addNewParticlesToVertexBuffer = function() {
            var t = 0;
            this._firstNewElement < this._firstFreeElement ? (t = this._firstNewElement * this._vertexStride * this._floatCountPerVertex, 
            this._vertexBuffer.setData(this._vertices, t, t, (this._firstFreeElement - this._firstNewElement) * this._vertexStride * this._floatCountPerVertex)) : (t = this._firstNewElement * this._vertexStride * this._floatCountPerVertex, 
            this._vertexBuffer.setData(this._vertices, t, t, (this._bufferMaxParticles - this._firstNewElement) * this._vertexStride * this._floatCountPerVertex), 
            this._firstFreeElement > 0 && this._vertexBuffer.setData(this._vertices, 0, 0, this._firstFreeElement * this._vertexStride * this._floatCountPerVertex)), 
            this._firstNewElement = this._firstFreeElement;
        }, s._getType = function() {
            return e._type;
        }, s._prepareRender = function(t) {
            return this._updateEmission(), this._firstNewElement != this._firstFreeElement && this.addNewParticlesToVertexBuffer(), 
            this._drawCounter++, this._firstActiveElement != this._firstFreeElement;
        }, s._render = function(t) {
            this._bufferState.bind();
            var e = 0, n = v.instance;
            this._firstActiveElement < this._firstFreeElement ? (e = (this._firstFreeElement - this._firstActiveElement) * this._indexStride, 
            n.drawElements(4, e, 5123, 2 * this._firstActiveElement * this._indexStride), N.trianglesFaces += e / 3, 
            N.renderBatches++) : (e = (this._bufferMaxParticles - this._firstActiveElement) * this._indexStride, 
            n.drawElements(4, e, 5123, 2 * this._firstActiveElement * this._indexStride), N.trianglesFaces += e / 3, 
            N.renderBatches++, this._firstFreeElement > 0 && (e = this._firstFreeElement * this._indexStride, 
            n.drawElements(4, e, 5123, 0), N.trianglesFaces += e / 3, N.renderBatches++));
        }, s.play = function() {
            if (this._burstsIndex = 0, this._isEmitting = !0, this._isPlaying = !0, this._isPaused = !1, 
            this._emissionTime = 0, this._totalDelayTime = 0, !this.autoRandomSeed) for (var t = 0, n = this._randomSeeds.length; t < n; t++) this._randomSeeds[t] = this.randomSeed[0] + e._RANDOMOFFSET[t];
            switch (this.startDelayType) {
              case 0:
                this._playStartDelay = this.startDelay;
                break;

              case 1:
                this.autoRandomSeed ? this._playStartDelay = x.lerp(this.startDelayMin, this.startDelayMax, Math.random()) : (this._rand.seed = this._randomSeeds[2], 
                this._playStartDelay = x.lerp(this.startDelayMin, this.startDelayMax, this._rand.getFloat()), 
                this._randomSeeds[2] = this._rand.seed);
                break;

              default:
                throw new Error("Utils3D: startDelayType is invalid.");
            }
            this._frameRateTime = this._currentTime + this._playStartDelay, this._startUpdateLoopCount = N.loopCount;
        }, s.pause = function() {
            this._isPaused = !0;
        }, s.simulate = function(t, e) {
            void 0 === e && (e = !0), this._simulateUpdate = !0, e ? this._updateParticlesSimulationRestart(t) : (this._isPaused = !1, 
            this._updateParticles(t)), this.pause();
        }, s.stop = function() {
            this._burstsIndex = 0, this._isEmitting = !1, this._emissionTime = 0;
        }, s.cloneTo = function(t) {
            var e = t;
            e.duration = this.duration, e.looping = this.looping, e.prewarm = this.prewarm, 
            e.startDelayType = this.startDelayType, e.startDelay = this.startDelay, e.startDelayMin = this.startDelayMin, 
            e.startDelayMax = this.startDelayMax, e._maxStartLifetime = this._maxStartLifetime, 
            e.startLifetimeType = this.startLifetimeType, e.startLifetimeConstant = this.startLifetimeConstant, 
            this.startLifeTimeGradient.cloneTo(e.startLifeTimeGradient), e.startLifetimeConstantMin = this.startLifetimeConstantMin, 
            e.startLifetimeConstantMax = this.startLifetimeConstantMax, this.startLifeTimeGradientMin.cloneTo(e.startLifeTimeGradientMin), 
            this.startLifeTimeGradientMax.cloneTo(e.startLifeTimeGradientMax), e.startSpeedType = this.startSpeedType, 
            e.startSpeedConstant = this.startSpeedConstant, e.startSpeedConstantMin = this.startSpeedConstantMin, 
            e.startSpeedConstantMax = this.startSpeedConstantMax, e.threeDStartSize = this.threeDStartSize, 
            e.startSizeType = this.startSizeType, e.startSizeConstant = this.startSizeConstant, 
            this.startSizeConstantSeparate.cloneTo(e.startSizeConstantSeparate), e.startSizeConstantMin = this.startSizeConstantMin, 
            e.startSizeConstantMax = this.startSizeConstantMax, this.startSizeConstantMinSeparate.cloneTo(e.startSizeConstantMinSeparate), 
            this.startSizeConstantMaxSeparate.cloneTo(e.startSizeConstantMaxSeparate), e.threeDStartRotation = this.threeDStartRotation, 
            e.startRotationType = this.startRotationType, e.startRotationConstant = this.startRotationConstant, 
            this.startRotationConstantSeparate.cloneTo(e.startRotationConstantSeparate), e.startRotationConstantMin = this.startRotationConstantMin, 
            e.startRotationConstantMax = this.startRotationConstantMax, this.startRotationConstantMinSeparate.cloneTo(e.startRotationConstantMinSeparate), 
            this.startRotationConstantMaxSeparate.cloneTo(e.startRotationConstantMaxSeparate), 
            e.randomizeRotationDirection = this.randomizeRotationDirection, e.startColorType = this.startColorType, 
            this.startColorConstant.cloneTo(e.startColorConstant), this.startColorConstantMin.cloneTo(e.startColorConstantMin), 
            this.startColorConstantMax.cloneTo(e.startColorConstantMax), e.gravityModifier = this.gravityModifier, 
            e.simulationSpace = this.simulationSpace, e.scaleMode = this.scaleMode, e.playOnAwake = this.playOnAwake, 
            e.maxParticles = this.maxParticles, this._emission && (e._emission = this._emission.clone()), 
            this.shape && (e.shape = this.shape.clone()), this.velocityOverLifetime && (e.velocityOverLifetime = this.velocityOverLifetime.clone()), 
            this.colorOverLifetime && (e.colorOverLifetime = this.colorOverLifetime.clone()), 
            this.sizeOverLifetime && (e.sizeOverLifetime = this.sizeOverLifetime.clone()), this.rotationOverLifetime && (e.rotationOverLifetime = this.rotationOverLifetime.clone()), 
            this.textureSheetAnimation && (e.textureSheetAnimation = this.textureSheetAnimation.clone()), 
            e.isPerformanceMode = this.isPerformanceMode, e._isEmitting = this._isEmitting, 
            e._isPlaying = this._isPlaying, e._isPaused = this._isPaused, e._playStartDelay = this._playStartDelay, 
            e._frameRateTime = this._frameRateTime, e._emissionTime = this._emissionTime, e._totalDelayTime = this._totalDelayTime, 
            e._burstsIndex = this._burstsIndex;
        }, s.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, s, "maxParticles", function() {
            return this._bufferMaxParticles - 1;
        }, function(t) {
            var e = t + 1;
            e !== this._bufferMaxParticles && (this._bufferMaxParticles = e, this._initBufferDatas());
        }), a(0, s, "isEmitting", function() {
            return this._isEmitting;
        }), a(0, s, "isAlive", function() {
            return !!(this._isPlaying || this.aliveParticleCount > 0);
        }), a(0, s, "shape", function() {
            return this._shape;
        }, function(t) {
            this._shape !== t && (t && t.enable ? this._owner._render._defineDatas.add(yi.SHADERDEFINE_SHAPE) : this._owner._render._defineDatas.remove(yi.SHADERDEFINE_SHAPE), 
            this._shape = t);
        }), a(0, s, "rotationOverLifetime", function() {
            return this._rotationOverLifetime;
        }, function(t) {
            var e = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (t) {
                var i = t.angularVelocity;
                if (!i) return;
                var r = i.separateAxes, a = i.type;
                if (t.enbale) switch (r ? e.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE) : e.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIME), 
                a) {
                  case 0:
                    e.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT);
                    break;

                  case 1:
                    e.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE);
                    break;

                  case 2:
                    e.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS);
                    break;

                  case 3:
                    e.add(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                } else e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIME), e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE), 
                e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE), 
                e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES);
                switch (a) {
                  case 0:
                    r ? n.setVector3(yi.ROLANGULARVELOCITYCONSTSEPRARATE, i.constantSeparate) : n.setNumber(yi.ROLANGULARVELOCITYCONST, i.constant);
                    break;

                  case 1:
                    r ? (n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTX, i.gradientX._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTY, i.gradientY._elements), 
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZ, i.gradientZ._elements)) : n.setBuffer(yi.ROLANGULARVELOCITYGRADIENT, i.gradient._elements);
                    break;

                  case 2:
                    r ? (n.setVector3(yi.ROLANGULARVELOCITYCONSTSEPRARATE, i.constantMinSeparate), n.setVector3(yi.ROLANGULARVELOCITYCONSTMAXSEPRARATE, i.constantMaxSeparate)) : (n.setNumber(yi.ROLANGULARVELOCITYCONST, i.constantMin), 
                    n.setNumber(yi.ROLANGULARVELOCITYCONSTMAX, i.constantMax));
                    break;

                  case 3:
                    r ? (n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTX, i.gradientXMin._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTXMAX, i.gradientXMax._elements), 
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTY, i.gradientYMin._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTYMAX, i.gradientYMax._elements), 
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZ, i.gradientZMin._elements), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZMAX, i.gradientZMax._elements)) : (n.setBuffer(yi.ROLANGULARVELOCITYGRADIENT, i.gradientMin._elements), 
                    n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTMAX, i.gradientMax._elements));
                }
            } else e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIME), e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE), 
            e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT), e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE), 
            e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS), e.remove(yi.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES), 
            n.setVector(yi.ROLANGULARVELOCITYCONSTSEPRARATE, null), n.setVector(yi.ROLANGULARVELOCITYCONSTMAXSEPRARATE, null), 
            n.setNumber(yi.ROLANGULARVELOCITYCONST, void 0), n.setNumber(yi.ROLANGULARVELOCITYCONSTMAX, void 0), 
            n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTX, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTXMAX, null), 
            n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTY, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTYMAX, null), 
            n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZ, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTZMAX, null), 
            n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTWMAX, null), n.setBuffer(yi.ROLANGULARVELOCITYGRADIENT, null), 
            n.setBuffer(yi.ROLANGULARVELOCITYGRADIENTMAX, null);
            this._rotationOverLifetime = t;
        }), a(0, s, "emission", function() {
            return this._emission;
        }), a(0, s, "emissionTime", function() {
            return this._emissionTime > this.duration ? this.duration : this._emissionTime;
        }), a(0, s, "aliveParticleCount", function() {
            return this._firstNewElement >= this._firstRetiredElement ? this._firstNewElement - this._firstRetiredElement : this._bufferMaxParticles - this._firstRetiredElement + this._firstNewElement;
        }), a(0, s, "isPlaying", function() {
            return this._isPlaying;
        }), a(0, s, "isPaused", function() {
            return this._isPaused;
        }), a(0, s, "startLifetimeType", function() {
            return this._startLifetimeType;
        }, function(t) {
            var e = 0, n = 0;
            switch (this.startLifetimeType) {
              case 0:
                this._maxStartLifetime = this.startLifetimeConstant;
                break;

              case 1:
                this._maxStartLifetime = -Number.MAX_VALUE;
                var i = i;
                for (e = 0, n = i.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, i.getValueByIndex(e));
                break;

              case 2:
                this._maxStartLifetime = Math.max(this.startLifetimeConstantMin, this.startLifetimeConstantMax);
                break;

              case 3:
                this._maxStartLifetime = -Number.MAX_VALUE;
                var r = r;
                for (e = 0, n = r.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, r.getValueByIndex(e));
                var a = a;
                for (e = 0, n = a.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, a.getValueByIndex(e));
            }
            this._startLifetimeType = t;
        }), a(0, s, "startLifetimeConstant", function() {
            return this._startLifetimeConstant;
        }, function(t) {
            0 === this._startLifetimeType && (this._maxStartLifetime = t), this._startLifetimeConstant = t;
        }), a(0, s, "startLifetimeConstantMin", function() {
            return this._startLifetimeConstantMin;
        }, function(t) {
            2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(t, this._startLifetimeConstantMax)), 
            this._startLifetimeConstantMin = t;
        }), a(0, s, "startLifeTimeGradient", function() {
            return this._startLifeTimeGradient;
        }, function(t) {
            if (1 === this._startLifetimeType) {
                this._maxStartLifetime = -Number.MAX_VALUE;
                for (var e = 0, n = t.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, t.getValueByIndex(e));
            }
            this._startLifeTimeGradient = t;
        }), a(0, s, "startLifetimeConstantMax", function() {
            return this._startLifetimeConstantMax;
        }, function(t) {
            2 === this._startLifetimeType && (this._maxStartLifetime = Math.max(this._startLifetimeConstantMin, t)), 
            this._startLifetimeConstantMax = t;
        }), a(0, s, "startLifeTimeGradientMin", function() {
            return this._startLifeTimeGradientMin;
        }, function(t) {
            if (3 === this._startLifetimeType) {
                var e = 0, n = 0;
                for (this._maxStartLifetime = -Number.MAX_VALUE, e = 0, n = t.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, t.getValueByIndex(e));
                for (e = 0, n = this._startLifeTimeGradientMax.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMax.getValueByIndex(e));
            }
            this._startLifeTimeGradientMin = t;
        }), a(0, s, "startLifeTimeGradientMax", function() {
            return this._startLifeTimeGradientMax;
        }, function(t) {
            if (3 === this._startLifetimeType) {
                var e = 0, n = 0;
                for (this._maxStartLifetime = -Number.MAX_VALUE, e = 0, n = this._startLifeTimeGradientMin.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, this._startLifeTimeGradientMin.getValueByIndex(e));
                for (e = 0, n = t.gradientCount; e < n; e++) this._maxStartLifetime = Math.max(this._maxStartLifetime, t.getValueByIndex(e));
            }
            this._startLifeTimeGradientMax = t;
        }), a(0, s, "velocityOverLifetime", function() {
            return this._velocityOverLifetime;
        }, function(t) {
            var e = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (t) {
                var i = t.velocity, r = i.type;
                if (t.enbale) switch (r) {
                  case 0:
                    e.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT);
                    break;

                  case 1:
                    e.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE);
                    break;

                  case 2:
                    e.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT);
                    break;

                  case 3:
                    e.add(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                } else e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE), 
                e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE);
                switch (r) {
                  case 0:
                    n.setVector3(yi.VOLVELOCITYCONST, i.constant);
                    break;

                  case 1:
                    n.setBuffer(yi.VOLVELOCITYGRADIENTX, i.gradientX._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTY, i.gradientY._elements), 
                    n.setBuffer(yi.VOLVELOCITYGRADIENTZ, i.gradientZ._elements);
                    break;

                  case 2:
                    n.setVector3(yi.VOLVELOCITYCONST, i.constantMin), n.setVector3(yi.VOLVELOCITYCONSTMAX, i.constantMax);
                    break;

                  case 3:
                    n.setBuffer(yi.VOLVELOCITYGRADIENTX, i.gradientXMin._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTXMAX, i.gradientXMax._elements), 
                    n.setBuffer(yi.VOLVELOCITYGRADIENTY, i.gradientYMin._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTYMAX, i.gradientYMax._elements), 
                    n.setBuffer(yi.VOLVELOCITYGRADIENTZ, i.gradientZMin._elements), n.setBuffer(yi.VOLVELOCITYGRADIENTZMAX, i.gradientZMax._elements);
                }
                n.setInt(yi.VOLSPACETYPE, t.space);
            } else e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT), e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE), 
            e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT), e.remove(yi.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE), 
            n.setVector(yi.VOLVELOCITYCONST, null), n.setBuffer(yi.VOLVELOCITYGRADIENTX, null), 
            n.setBuffer(yi.VOLVELOCITYGRADIENTY, null), n.setBuffer(yi.VOLVELOCITYGRADIENTZ, null), 
            n.setVector(yi.VOLVELOCITYCONST, null), n.setVector(yi.VOLVELOCITYCONSTMAX, null), 
            n.setBuffer(yi.VOLVELOCITYGRADIENTX, null), n.setBuffer(yi.VOLVELOCITYGRADIENTXMAX, null), 
            n.setBuffer(yi.VOLVELOCITYGRADIENTY, null), n.setBuffer(yi.VOLVELOCITYGRADIENTYMAX, null), 
            n.setBuffer(yi.VOLVELOCITYGRADIENTZ, null), n.setBuffer(yi.VOLVELOCITYGRADIENTZMAX, null), 
            n.setInt(yi.VOLSPACETYPE, void 0);
            this._velocityOverLifetime = t;
        }), a(0, s, "colorOverLifetime", function() {
            return this._colorOverLifetime;
        }, function(t) {
            var e = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (t) {
                var i = t.color;
                if (t.enbale) switch (i.type) {
                  case 1:
                    e.add(yi.SHADERDEFINE_COLOROVERLIFETIME);
                    break;

                  case 3:
                    e.add(yi.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                } else e.remove(yi.SHADERDEFINE_COLOROVERLIFETIME), e.remove(yi.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);
                switch (i.type) {
                  case 1:
                    var r = i.gradient;
                    n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, r._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, r._rgbElements);
                    break;

                  case 3:
                    var a = i.gradientMin, o = i.gradientMax;
                    n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements), 
                    n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTALPHAS, o._alphaElements), n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTCOLORS, o._rgbElements);
                }
            } else e.remove(yi.SHADERDEFINE_COLOROVERLIFETIME), e.remove(yi.SHADERDEFINE_RANDOMCOLOROVERLIFETIME), 
            n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, r._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, r._rgbElements), 
            n.setBuffer(yi.COLOROVERLIFEGRADIENTALPHAS, a._alphaElements), n.setBuffer(yi.COLOROVERLIFEGRADIENTCOLORS, a._rgbElements), 
            n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTALPHAS, o._alphaElements), n.setBuffer(yi.MAXCOLOROVERLIFEGRADIENTCOLORS, o._rgbElements);
            this._colorOverLifetime = t;
        }), a(0, s, "sizeOverLifetime", function() {
            return this._sizeOverLifetime;
        }, function(t) {
            var e = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (t) {
                var i = t.size, r = i.separateAxes, a = i.type;
                if (t.enbale) switch (a) {
                  case 0:
                    r ? e.add(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE) : e.add(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVE);
                    break;

                  case 2:
                    r ? e.add(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE) : e.add(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES);
                } else e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVE), e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE), 
                e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE);
                switch (a) {
                  case 0:
                    r ? (n.setBuffer(yi.SOLSIZEGRADIENTX, i.gradientX._elements), n.setBuffer(yi.SOLSIZEGRADIENTY, i.gradientY._elements), 
                    n.setBuffer(yi.SOLSizeGradientZ, i.gradientZ._elements)) : n.setBuffer(yi.SOLSIZEGRADIENT, i.gradient._elements);
                    break;

                  case 2:
                    r ? (n.setBuffer(yi.SOLSIZEGRADIENTX, i.gradientXMin._elements), n.setBuffer(yi.SOLSIZEGRADIENTXMAX, i.gradientXMax._elements), 
                    n.setBuffer(yi.SOLSIZEGRADIENTY, i.gradientYMin._elements), n.setBuffer(yi.SOLSIZEGRADIENTYMAX, i.gradientYMax._elements), 
                    n.setBuffer(yi.SOLSizeGradientZ, i.gradientZMin._elements), n.setBuffer(yi.SOLSizeGradientZMAX, i.gradientZMax._elements)) : (n.setBuffer(yi.SOLSIZEGRADIENT, i.gradientMin._elements), 
                    n.setBuffer(yi.SOLSizeGradientMax, i.gradientMax._elements));
                }
            } else e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVE), e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE), 
            e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES), e.remove(yi.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE), 
            n.setBuffer(yi.SOLSIZEGRADIENTX, null), n.setBuffer(yi.SOLSIZEGRADIENTXMAX, null), 
            n.setBuffer(yi.SOLSIZEGRADIENTY, null), n.setBuffer(yi.SOLSIZEGRADIENTYMAX, null), 
            n.setBuffer(yi.SOLSizeGradientZ, null), n.setBuffer(yi.SOLSizeGradientZMAX, null), 
            n.setBuffer(yi.SOLSIZEGRADIENT, null), n.setBuffer(yi.SOLSizeGradientMax, null);
            this._sizeOverLifetime = t;
        }), a(0, s, "textureSheetAnimation", function() {
            return this._textureSheetAnimation;
        }, function(t) {
            var e = this._owner._render._defineDatas, n = this._owner._render._shaderValues;
            if (t) {
                var i = t.frame, r = i.type;
                if (t.enable) switch (r) {
                  case 1:
                    e.add(yi.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE);
                    break;

                  case 3:
                    e.add(yi.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                } else e.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), e.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE);
                if (1 === r || 3 === r) {
                    n.setNumber(yi.TEXTURESHEETANIMATIONCYCLES, t.cycles);
                    var a = t.tiles, o = this._uvLength;
                    o.x = 1 / a.x, o.y = 1 / a.y, n.setVector2(yi.TEXTURESHEETANIMATIONSUBUVLENGTH, this._uvLength);
                }
                switch (r) {
                  case 1:
                    n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTUVS, i.frameOverTimeData._elements);
                    break;

                  case 3:
                    n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTUVS, i.frameOverTimeDataMin._elements), 
                    n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTMAXUVS, i.frameOverTimeDataMax._elements);
                }
            } else e.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE), e.remove(yi.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE), 
            n.setNumber(yi.TEXTURESHEETANIMATIONCYCLES, void 0), n.setVector(yi.TEXTURESHEETANIMATIONSUBUVLENGTH, null), 
            n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTUVS, null), n.setBuffer(yi.TEXTURESHEETANIMATIONGRADIENTMAXUVS, null);
            this._textureSheetAnimation = t;
        }), e.halfKSqrtOf2 = .71, i(e, [ "_RANDOMOFFSET", function() {
            return this._RANDOMOFFSET = new Uint32Array([ 592910910, 3276756734, 322376503, 306581307, 1793934638, 3737431713, 2527743459, 2368504881, 4085612399, 3774601268, 326370691, 1494990940, 1089181156, 3159510623, 2941263940, 2786374529, 271901988, 4233252447 ]);
        }, "_maxElapsedTime", function() {
            return this._maxElapsedTime = 1 / 3;
        }, "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempVector32", function() {
            return this._tempVector32 = new Tt();
        }, "_tempVector33", function() {
            return this._tempVector33 = new Tt();
        }, "_tempVector34", function() {
            return this._tempVector34 = new Tt();
        }, "_tempVector35", function() {
            return this._tempVector35 = new Tt();
        }, "_tempVector36", function() {
            return this._tempVector36 = new Tt();
        }, "_tempVector37", function() {
            return this._tempVector37 = new Tt();
        }, "_tempVector38", function() {
            return this._tempVector38 = new Tt();
        }, "_tempVector39", function() {
            return this._tempVector39 = new Tt();
        }, "_tempPosition", function() {
            return this._tempPosition = new Tt();
        }, "_tempDirection", function() {
            return this._tempDirection = new Tt();
        }, "_type", function() {
            return this._type = et._typeCounter++;
        } ]), e;
    }(et), ln = (function(t) {
        function e(t, n) {
            e.__super.call(this), this._normal = t, this._offset = n, this._type = 6, e._nativeNormal.setValue(-t.x, t.y, t.z), 
            this._nativeShape = new W._physics3D.btStaticPlaneShape(e._nativeNormal, n);
        }
        r(e, "laya.d3.physics.shape.StaticPlaneColliderShape", X), e.prototype.clone = function() {
            var t = new e(this._normal, this._offset);
            return this.cloneTo(t), t;
        }, i(e, [ "_nativeNormal", function() {
            return this._nativeNormal = new W._physics3D.btVector3(0, 0, 0);
        } ]);
    }(), function(t) {
        function e() {
            this._instanceBatchOpaqueMarks = [], this._vertexBatchOpaqueMarks = [], this._cacheBufferStates = [], 
            e.__super.call(this), yn.instance = new yn(), this._updateCountMark = 0;
        }
        r(e, "laya.d3.graphics.MeshRenderDynamicBatchManager", t);
        var n = e.prototype;
        return n.getInstanceBatchOpaquaMark = function(t, e, n, i) {
            var r = this._instanceBatchOpaqueMarks[t] || (this._instanceBatchOpaqueMarks[t] = []), a = r[e ? 0 : 1] || (r[e ? 0 : 1] = []), o = a[n] || (a[n] = []);
            return o[i] || (o[i] = new pe());
        }, n.getVertexBatchOpaquaMark = function(t, e, n, i) {
            var r = this._vertexBatchOpaqueMarks[t] || (this._vertexBatchOpaqueMarks[t] = []), a = r[e ? 0 : 1] || (r[e ? 0 : 1] = []), o = a[n] || (a[n] = []);
            return o[i] || (o[i] = new pe());
        }, n._getBufferState = function(t) {
            var e = this._cacheBufferStates[t.id];
            if (!e) {
                var n = yn.instance;
                (e = new Je()).bind();
                var i = n._vertexBuffer;
                i.vertexDeclaration = t, e.applyVertexBuffer(i), e.applyIndexBuffer(n._indexBuffer), 
                e.unBind(), this._cacheBufferStates[t.id] = e;
            }
            return e;
        }, n._getBatchRenderElementFromPool = function() {
            var t = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
            return t || (t = new Pn(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = t, 
            t.vertexBatchElementList = [], t.instanceBatchElementList = []), t;
        }, n._clear = function() {
            t.prototype._clear.call(this), this._updateCountMark++;
        }, i(e, [ "instance", function() {
            return this.instance = new e();
        } ]), e;
    }(tt)), hn = function(t) {
        function e(t, n, i) {
            e.__super.call(this), void 0 === t && (t = 1), void 0 === n && (n = 1), void 0 === i && (i = 1), 
            this._sizeX = t, this._sizeY = n, this._sizeZ = i, this._type = 0, e._nativeSize.setValue(t / 2, n / 2, i / 2), 
            this._nativeShape = new W._physics3D.btBoxShape(e._nativeSize);
        }
        r(e, "laya.d3.physics.shape.BoxColliderShape", X);
        var n = e.prototype;
        return n.clone = function() {
            var t = new e(this._sizeX, this._sizeY, this._sizeZ);
            return this.cloneTo(t), t;
        }, a(0, n, "sizeX", function() {
            return this._sizeX;
        }), a(0, n, "sizeY", function() {
            return this._sizeY;
        }), a(0, n, "sizeZ", function() {
            return this._sizeZ;
        }), i(e, [ "_nativeSize", function() {
            return this._nativeSize = new W._physics3D.btVector3(0, 0, 0);
        } ]), e;
    }(), un = function(t) {
        function e() {
            e.__super.call(this);
        }
        r(e, "laya.d3.component.SimpleSingletonList", $);
        var n = e.prototype;
        return n.add = function(t) {
            this._add(t), t._setIndexInList(this.length++);
        }, n.remove = function(t) {
            var e = t._getIndexInList();
            if (this.length--, e !== this.length) {
                var n = this.elements[this.length];
                this.elements[e] = n, n._setIndexInList(e);
            }
            t._setIndexInList(-1);
        }, e;
    }(), cn = function(t) {
        function e() {
            e.__super.call(this);
        }
        r(e, "laya.d3.physics.PhysicsUpdateList", $);
        var n = e.prototype;
        return n.add = function(t) {
            if (-1 !== t._inPhysicUpdateListIndex) throw "PhysicsUpdateList:element has  in  PhysicsUpdateList.";
            this._add(t), t._inPhysicUpdateListIndex = this.length++;
        }, n.remove = function(t) {
            var e = t._inPhysicUpdateListIndex;
            if (this.length--, e !== this.length) {
                var n = this.elements[this.length];
                this.elements[e] = n, n._inPhysicUpdateListIndex = e;
            }
            t._inPhysicUpdateListIndex = -1;
        }, e;
    }(), _n = function(t) {
        function e(t, n, i) {
            e.__super.call(this), this._bufferState = new Je(), this._batchID = e._batchIDCounter++, 
            this._batchElements = [], this._currentBatchVertexCount = 0, this._currentBatchIndexCount = 0, 
            this._vertexDeclaration = i, this.batchOwner = t, this.number = n;
        }
        r(e, "laya.d3.graphics.SubMeshStaticBatch", et);
        var a = e.prototype;
        return n.imps(a, {
            "laya.resource.IDispose": !0
        }), a._getStaticBatchBakedVertexs = function(t, n, i, r, a, o) {
            var s, l = o._vertexBuffers[0], h = l.vertexDeclaration, u = h.getVertexElementByUsage(0).offset / 4, c = h.getVertexElementByUsage(3), _ = c ? c.offset / 4 : -1, d = h.getVertexElementByUsage(1), f = d ? d.offset / 4 : -1, m = h.getVertexElementByUsage(2), p = m ? m.offset / 4 : -1, T = h.getVertexElementByUsage(7), E = T ? T.offset / 4 : -1, v = h.getVertexElementByUsage(4), g = v ? v.offset / 4 : -1, S = h.vertexStride / 4, y = l.getData();
            i ? (i.worldMatrix.invert(e._tempMatrix4x40), s = e._tempMatrix4x41, He.multiply(e._tempMatrix4x40, r.worldMatrix, s)) : s = r.worldMatrix;
            var x = e._tempQuaternion0;
            s.decomposeTransRotScale(e._tempVector30, x, e._tempVector31);
            for (var D = a.lightmapScaleOffset, I = o.vertexCount, R = 0; R < I; R++) {
                var M = R * S, A = 18 * (R + n);
                kt.transformVector3ArrayToVector3ArrayCoordinate(y, M + u, s, t, A + 0), -1 !== _ && kt.transformVector3ArrayByQuat(y, M + _, x, t, A + 3);
                var C = 0, L = 0, O = A + 6;
                if (-1 !== f) {
                    var N = M + f;
                    for (C = 0, L = 4; C < L; C++) t[O + C] = y[N + C];
                } else for (C = 0, L = 4; C < L; C++) t[O + C] = 1;
                if (-1 !== p) {
                    var V = M + p;
                    t[A + 10] = y[V], t[A + 11] = y[V + 1];
                }
                if (D && (-1 !== E ? kt.transformLightingMapTexcoordArray(y, M + E, D, t, A + 12) : kt.transformLightingMapTexcoordArray(y, M + p, D, t, A + 12)), 
                -1 !== g) {
                    var w = M + g;
                    t[A + 14] = y[w], t[A + 15] = y[w + 1], t[A + 16] = y[w + 2], t[A + 17] = y[w + 3];
                }
            }
            return I;
        }, a.addTest = function(t) {
            var e = t.meshFilter.sharedMesh.vertexCount;
            return !(this._currentBatchVertexCount + e > 65535);
        }, a.add = function(t) {
            var e = t._render._staticBatch;
            e && e.remove(t);
            var n = t.meshFilter.sharedMesh, i = n.vertexCount;
            this._batchElements.push(t);
            var r = t._render;
            r._isPartOfStaticBatch = !0, r._staticBatch = this;
            for (var a = r._renderElements, o = 0, s = a.length; o < s; o++) a[o].staticBatch = this;
            this._currentBatchIndexCount += n._indexBuffer.indexCount, this._currentBatchVertexCount += i;
        }, a.remove = function(t) {
            var e = t.meshFilter.sharedMesh, n = this._batchElements.indexOf(t);
            if (-1 !== n) {
                this._batchElements.splice(n, 1), t._render;
                for (var i = t._render._renderElements, r = 0, a = i.length; r < a; r++) i[r].staticBatch = null;
                var o = e.vertexCount;
                this._currentBatchIndexCount = this._currentBatchIndexCount - e._indexBuffer.indexCount, 
                this._currentBatchVertexCount = this._currentBatchVertexCount - o, t._render._isPartOfStaticBatch = !1;
            }
        }, a.finishInit = function() {
            this._vertexBuffer && (this._vertexBuffer.destroy(), this._indexBuffer.destroy(), 
            M._addGPUMemory(-(this._vertexBuffer._byteLength + this._indexBuffer._byteLength)));
            var t = 0, e = 0, n = this.batchOwner, i = this._vertexDeclaration.vertexStride / 4, r = new Float32Array(i * this._currentBatchVertexCount), a = new Uint16Array(this._currentBatchIndexCount);
            this._vertexBuffer = new Ke(this._vertexDeclaration.vertexStride * this._currentBatchVertexCount, 35044), 
            this._vertexBuffer.vertexDeclaration = this._vertexDeclaration, this._indexBuffer = new qe("ushort", this._currentBatchIndexCount, 35044);
            for (var o = 0, s = this._batchElements.length; o < s; o++) {
                for (var l = this._batchElements[o], h = l.meshFilter.sharedMesh, u = this._getStaticBatchBakedVertexs(r, t, n ? n._transform : null, l._transform, l._render, h), c = h._indexBuffer.getData(), _ = t, d = e + c.length, f = l._render._renderElements, m = 0, p = h.subMeshCount; m < p; m++) {
                    var T = h._subMeshes[m], E = e + T._indexStart, v = f[m];
                    v.staticBatchIndexStart = E, v.staticBatchIndexEnd = E + T._indexCount;
                }
                a.set(c, e);
                var g = 0;
                if (n ? l._transform._isFrontFaceInvert !== n.transform._isFrontFaceInvert : l._transform._isFrontFaceInvert) for (g = e; g < d; g += 3) {
                    a[g] = _ + a[g];
                    var S = a[g + 1], y = a[g + 2];
                    a[g + 1] = _ + y, a[g + 2] = _ + S;
                } else for (g = e; g < d; g += 3) a[g] = _ + a[g], a[g + 1] = _ + a[g + 1], a[g + 2] = _ + a[g + 2];
                e += c.length, t += u;
            }
            this._vertexBuffer.setData(r), this._indexBuffer.setData(a);
            var x = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            M._addGPUMemory(x), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
        }, a._render = function(t) {
            this._bufferState.bind();
            for (var e = t.renderElement.staticBatchElementList, n = 0, i = 0, r = e.length, a = 1; a < r; a++) if (e[a - 1].staticBatchIndexEnd !== e[a].staticBatchIndexStart) {
                var o = e[n].staticBatchIndexStart, s = e[i].staticBatchIndexEnd - o;
                v.instance.drawElements(4, s, 5123, 2 * o), n = ++i, N.trianglesFaces += s / 3;
            } else i++;
            o = e[n].staticBatchIndexStart, s = e[i].staticBatchIndexEnd - o, v.instance.drawElements(4, s, 5123, 2 * o), 
            N.renderBatches++, N.savedRenderBatches += r - 1, N.trianglesFaces += s / 3;
        }, a.dispose = function() {
            var t = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            M._addGPUMemory(-t), this._batchElements = null, this.batchOwner = null, this._vertexDeclaration = null, 
            this._bufferState.destroy(), this._vertexBuffer.destroy(), this._indexBuffer.destroy(), 
            this._vertexBuffer = null, this._indexBuffer = null, this._bufferState = null;
        }, e.maxBatchVertexCount = 65535, e._batchIDCounter = 0, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new ht();
        }, "_tempMatrix4x40", function() {
            return this._tempMatrix4x40 = new He();
        }, "_tempMatrix4x41", function() {
            return this._tempMatrix4x41 = new He();
        } ]), e;
    }(), dn = function(t) {
        function e(t) {
            this._floatCountPerVertices1 = 8, this._floatCountPerVertices2 = 1, this._increaseSegementCount = 128, 
            this._activeIndex = 0, this._endIndex = 0, this._needAddFirstVertex = !1, this._isTempEndVertex = !1, 
            this._subBirthTime = null, this._subDistance = null, this._segementCount = 0, this._vertices1 = null, 
            this._vertices2 = null, this._vertexBuffer1 = null, this._vertexBuffer2 = null, 
            this._owner = null, e.__super.call(this), this._lastFixedVertexPosition = new Tt(), 
            this._bufferState = new Je(), this._owner = t, this._resizeData(this._increaseSegementCount, this._bufferState);
        }
        r(e, "laya.d3.core.trail.TrailGeometry", t);
        var n = e.prototype;
        return n._resizeData = function(t, e) {
            this._segementCount = this._increaseSegementCount, this._subBirthTime = new Float32Array(t), 
            this._subDistance = new Float32Array(t);
            var n = 2 * t, i = ee.vertexDeclaration1, r = ee.vertexDeclaration2, a = [], o = n * i.vertexStride, s = n * r.vertexStride, l = o + s;
            this._vertices1 = new Float32Array(n * this._floatCountPerVertices1), this._vertexBuffer1 = new Ke(o, 35044, !1), 
            this._vertexBuffer1.vertexDeclaration = i, this._vertices2 = new Float32Array(n * this._floatCountPerVertices2), 
            this._vertexBuffer2 = new Ke(s, 35048, !1), this._vertexBuffer2.vertexDeclaration = r, 
            a.push(this._vertexBuffer1), a.push(this._vertexBuffer2), e.bind(), e.applyVertexBuffers(a), 
            e.unBind(), M._addMemory(l, l);
        }, n._resetData = function() {
            var t = this._endIndex - this._activeIndex;
            t == this._segementCount && (this._vertexBuffer1.destroy(), this._vertexBuffer2.destroy(), 
            this._segementCount += this._increaseSegementCount, this._resizeData(this._segementCount, this._bufferState)), 
            this._vertexBuffer1.setData(this._vertices1, 0, 2 * this._floatCountPerVertices1 * this._activeIndex, 2 * this._floatCountPerVertices1 * t), 
            this._vertexBuffer2.setData(this._vertices2, 0, 2 * this._floatCountPerVertices2 * this._activeIndex, 2 * this._floatCountPerVertices2 * t);
            var e = 4 * this._activeIndex, n = new Float32Array(this._subDistance.buffer, e, t), i = new Float32Array(this._subBirthTime.buffer, e, t);
            this._subDistance.set(n, 0), this._subBirthTime.set(i, 0), this._endIndex = t, this._activeIndex = 0;
        }, n._updateTrail = function(t, e, n) {
            Tt.equals(e, n) || (this._endIndex - this._activeIndex == 0 ? this._addTrailByFirstPosition(t, n) : this._addTrailByNextPosition(t, n));
        }, n._addTrailByFirstPosition = function(t, e) {
            this._endIndex === this._segementCount && this._resetData(), this._subDistance[this._endIndex] = 0, 
            this._subBirthTime[this._endIndex] = this._owner._curtime, this._endIndex++, e.cloneTo(this._lastFixedVertexPosition), 
            this._needAddFirstVertex = !0;
        }, n._addTrailByNextPosition = function(t, n) {
            var i = e._tempVector30, r = e._tempVector31;
            Tt.subtract(n, this._lastFixedVertexPosition, i);
            var a = e._tempVector32;
            switch (this._owner.alignment) {
              case 0:
                t.transform.getForward(a), Tt.cross(i, a, r);
                break;

              case 1:
                this._owner._owner.transform.getForward(a), Tt.cross(i, a, r);
            }
            Tt.normalize(r, r), Tt.scale(r, this._owner.widthMultiplier / 2, r);
            var o = Tt.scalarLength(i), s = 0, l = NaN;
            this._needAddFirstVertex && (this._updateVerticesByPositionData(n, r, this._endIndex - 1), 
            this._needAddFirstVertex = !1), o - this._owner.minVertexDistance >= it.zeroTolerance ? (this._isTempEndVertex ? (s = this._endIndex - 1, 
            l = o - this._subDistance[s], this._updateVerticesByPosition(n, r, o, s), this._owner._totalLength += l) : (this._endIndex === this._segementCount && this._resetData(), 
            this._updateVerticesByPosition(n, r, o, this._endIndex), this._owner._totalLength += o, 
            this._endIndex++), n.cloneTo(this._lastFixedVertexPosition), this._isTempEndVertex = !1) : (this._isTempEndVertex ? (s = this._endIndex - 1, 
            l = o - this._subDistance[s], this._updateVerticesByPosition(n, r, o, s), this._owner._totalLength += l) : (this._endIndex === this._segementCount && this._resetData(), 
            this._updateVerticesByPosition(n, r, o, this._endIndex), this._owner._totalLength += o, 
            this._endIndex++), this._isTempEndVertex = !0);
        }, n._updateVerticesByPositionData = function(t, e, n) {
            var i = 2 * this._floatCountPerVertices1 * n, r = this._owner._curtime;
            this._vertices1[i] = t.x, this._vertices1[i + 1] = t.y, this._vertices1[i + 2] = t.z, 
            this._vertices1[i + 3] = -e.x, this._vertices1[i + 4] = -e.y, this._vertices1[i + 5] = -e.z, 
            this._vertices1[i + 6] = r, this._vertices1[i + 7] = 1, this._vertices1[i + 8] = t.x, 
            this._vertices1[i + 9] = t.y, this._vertices1[i + 10] = t.z, this._vertices1[i + 11] = e.x, 
            this._vertices1[i + 12] = e.y, this._vertices1[i + 13] = e.z, this._vertices1[i + 14] = r, 
            this._vertices1[i + 15] = 0;
            var a = 2 * this._floatCountPerVertices1;
            this._vertexBuffer1.setData(this._vertices1, i, i, a);
        }, n._updateVerticesByPosition = function(t, e, n, i) {
            this._updateVerticesByPositionData(t, e, i), this._subDistance[i] = n, this._subBirthTime[i] = this._owner._curtime;
        }, n._updateVertexBufferUV = function() {
            for (var t = this._endIndex, e = 0, n = this._activeIndex, i = t; n < i; n++) {
                n !== this._activeIndex && (e += this._subDistance[n]);
                var r = NaN;
                r = 0 == this._owner.textureMode ? 1 - e / this._owner._totalLength : 1 - (this._owner._totalLength - e), 
                this._vertices2[2 * n] = r, this._vertices2[2 * n + 1] = r;
            }
            var a = 2 * this._activeIndex;
            this._vertexBuffer2.setData(this._vertices2, a, a, 2 * t - a);
        }, n._updateDisappear = function() {
            for (var t = this._endIndex, e = this._activeIndex; e < t && this._owner._curtime - this._subBirthTime[e] >= this._owner.time + it.zeroTolerance; e++) {
                var n = e + 1;
                if (n !== t && (this._owner._totalLength -= this._subDistance[n]), this._isTempEndVertex && n === t - 1) {
                    this._floatCountPerVertices1;
                    var i = this._lastFixedVertexPosition;
                    i.x = this._vertices1[0], i.y = this._vertices1[1], i.z = this._vertices1[2], this._isTempEndVertex = !1;
                }
                this._activeIndex++;
            }
        }, n._getType = function() {
            return e._type;
        }, n._prepareRender = function(t) {
            return this._endIndex - this._activeIndex > 1;
        }, n._render = function(t) {
            this._bufferState.bind();
            var e = 2 * this._activeIndex, n = 2 * this._endIndex - e;
            v.instance.drawArrays(5, e, n), N.renderBatches++, N.trianglesFaces += n - 2;
        }, n.destroy = function() {
            t.prototype.destroy.call(this);
            var e = this._vertexBuffer1._byteLength + this._vertexBuffer2._byteLength;
            M._addMemory(-e, -e), this._bufferState.destroy(), this._vertexBuffer1.destroy(), 
            this._vertexBuffer2.destroy(), this._bufferState = null, this._vertices1 = null, 
            this._vertexBuffer1 = null, this._vertices2 = null, this._vertexBuffer2 = null, 
            this._subBirthTime = null, this._subDistance = null, this._lastFixedVertexPosition = null;
        }, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        }, "_tempVector32", function() {
            return this._tempVector32 = new Tt();
        }, "_type", function() {
            return this._type = et._typeCounter++;
        } ]), e;
    }(et), fn = function(t) {
        function e() {
            e.__super.call(this), this._childColliderShapes = [], this._type = 5, this._nativeShape = new W._physics3D.btCompoundShape();
        }
        r(e, "laya.d3.physics.shape.CompoundColliderShape", t);
        var n = e.prototype;
        return n._clearChildShape = function(t) {
            t._attatched = !1, t._compoundParent = null, t._indexInCompound = -1;
        }, n._addReference = function() {}, n._removeReference = function() {}, n._updateChildTransform = function(t) {
            var e = t.localOffset, n = t.localRotation, i = X._nativeVector30, r = X._nativQuaternion0, a = X._nativeTransform0;
            i.setValue(-e.x, e.y, e.z), r.setValue(-n.x, n.y, n.z, -n.w), a.setOrigin(i), a.setRotation(r), 
            this._nativeShape.updateChildTransform(t._indexInCompound, a, !0);
        }, n.addChildShape = function(t) {
            if (t._attatched) throw "CompoundColliderShape: this shape has attatched to other entity.";
            t._attatched = !0, t._compoundParent = this, t._indexInCompound = this._childColliderShapes.length, 
            this._childColliderShapes.push(t);
            var n = t.localOffset, i = t.localRotation;
            e._nativeOffset.setValue(-n.x, n.y, n.z), e._nativRotation.setValue(-i.x, i.y, i.z, -i.w), 
            e._nativeTransform.setOrigin(e._nativeOffset), e._nativeTransform.setRotation(e._nativRotation);
            var r = this._nativeShape.getLocalScaling();
            this._nativeShape.setLocalScaling(e._nativeVector3One), this._nativeShape.addChildShape(e._nativeTransform, t._nativeShape), 
            this._nativeShape.setLocalScaling(r), this._attatchedCollisionObject && (this._attatchedCollisionObject.colliderShape = this);
        }, n.removeChildShape = function(t) {
            if (t._compoundParent === this) {
                var e = t._indexInCompound;
                this._clearChildShape(t);
                var n = this._childColliderShapes[this._childColliderShapes.length - 1];
                n._indexInCompound = e, this._childColliderShapes[e] = n, this._childColliderShapes.pop(), 
                this._nativeShape.removeChildShapeByIndex(e);
            }
        }, n.clearChildShape = function() {
            for (var t = 0, e = this._childColliderShapes.length; t < e; t++) this._clearChildShape(this._childColliderShapes[t]), 
            this._nativeShape.removeChildShapeByIndex(0);
            this._childColliderShapes.length = 0;
        }, n.getChildShapeCount = function() {
            return this._childColliderShapes.length;
        }, n.cloneTo = function(t) {
            var e = t;
            e.clearChildShape();
            for (var n = 0, i = this._childColliderShapes.length; n < i; n++) e.addChildShape(this._childColliderShapes[n].clone());
        }, n.clone = function() {
            var t = new e();
            return this.cloneTo(t), t;
        }, n.destroy = function() {
            t.prototype.destroy.call(this);
            for (var e = 0, n = this._childColliderShapes.length; e < n; e++) {
                var i = this._childColliderShapes[e];
                0 === i._referenceCount && i.destroy();
            }
        }, i(e, [ "_nativeVector3One", function() {
            return this._nativeVector3One = new W._physics3D.btVector3(1, 1, 1);
        }, "_nativeTransform", function() {
            return this._nativeTransform = new W._physics3D.btTransform();
        }, "_nativeOffset", function() {
            return this._nativeOffset = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativRotation", function() {
            return this._nativRotation = new W._physics3D.btQuaternion(0, 0, 0, 1);
        } ]), e;
    }(X), mn = function(t) {
        function e(t, n) {
            this._floatCountPerVertices = 7, this._owner = null, this._vertexBuffer = null, 
            this._vertices = null, this._maxLineCount = 0, this._lineCount = 0, e.__super.call(this), 
            this._minUpdate = Number.MAX_VALUE, this._maxUpdate = Number.MIN_VALUE, this._bufferState = new Je();
            var i = 2 * n;
            this._owner = t, this._maxLineCount = n, this._vertices = new Float32Array(i * this._floatCountPerVertices), 
            this._vertexBuffer = new Ke(Wt.vertexDeclaration.vertexStride * i, 35044, !1), this._vertexBuffer.vertexDeclaration = Wt.vertexDeclaration, 
            this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind();
        }
        r(e, "laya.d3.core.pixelLine.PixelLineFilter", t);
        var n = e.prototype;
        return n._getType = function() {
            return e._type;
        }, n._resizeLineData = function(t) {
            var e = 2 * t, n = this._vertices;
            this._vertexBuffer.destroy(), this._maxLineCount = t;
            var i = e * this._floatCountPerVertices;
            this._vertices = new Float32Array(i), this._vertexBuffer = new Ke(Wt.vertexDeclaration.vertexStride * e, 35044, !1), 
            this._vertexBuffer.vertexDeclaration = Wt.vertexDeclaration, i < n.length ? (this._vertices.set(new Float32Array(n.buffer, 0, i)), 
            this._vertexBuffer.setData(this._vertices, 0, 0, i)) : (this._vertices.set(n), this._vertexBuffer.setData(this._vertices, 0, 0, n.length)), 
            this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind();
        }, n._updateLineVertices = function(t, e, n, i, r) {
            e && (this._vertices[t + 0] = e.x, this._vertices[t + 1] = e.y, this._vertices[t + 2] = e.z), 
            i && (this._vertices[t + 3] = i.r, this._vertices[t + 4] = i.g, this._vertices[t + 5] = i.b, 
            this._vertices[t + 6] = i.a), n && (this._vertices[t + 7] = n.x, this._vertices[t + 8] = n.y, 
            this._vertices[t + 9] = n.z), r && (this._vertices[t + 10] = r.r, this._vertices[t + 11] = r.g, 
            this._vertices[t + 12] = r.b, this._vertices[t + 13] = r.a), this._minUpdate = Math.min(this._minUpdate, t), 
            this._maxUpdate = Math.max(this._maxUpdate, t + 2 * this._floatCountPerVertices);
        }, n._removeLineData = function(t) {
            var e = 2 * this._floatCountPerVertices, n = t + 1, i = t * e, r = new Float32Array(this._vertices.buffer, n * e * 4, (this._lineCount - n) * e);
            this._vertices.set(r, i), this._minUpdate = i, this._maxUpdate = i + 2 * this._floatCountPerVertices, 
            this._lineCount--;
        }, n._updateLineData = function(t, e, n, i, r) {
            var a = t * (2 * this._floatCountPerVertices);
            this._updateLineVertices(a, e, n, i, r);
        }, n._updateLineDatas = function(t, e) {
            for (var n = 2 * this._floatCountPerVertices, i = e.length, r = 0; r < i; r++) {
                var a = e[r];
                this._updateLineVertices((t + r) * n, a.startPosition, a.endPosition, a.startColor, a.endColor);
            }
        }, n._getLineData = function(t, e) {
            var n = e.startPosition, i = e.startColor, r = e.endPosition, a = e.endColor, o = this._vertices, s = t * this._floatCountPerVertices * 2;
            n.x = o[s + 0], n.y = o[s + 1], n.z = o[s + 2], i.r = o[s + 3], i.g = o[s + 4], 
            i.b = o[s + 5], i.a = o[s + 6], r.x = o[s + 7], r.y = o[s + 8], r.z = o[s + 9], 
            a.r = o[s + 10], a.g = o[s + 11], a.b = o[s + 12], a.a = o[s + 13];
        }, n._prepareRender = function(t) {
            return !0;
        }, n._render = function(t) {
            this._minUpdate !== Number.MAX_VALUE && this._maxUpdate !== Number.MIN_VALUE && (this._vertexBuffer.setData(this._vertices, this._minUpdate, this._minUpdate, this._maxUpdate - this._minUpdate), 
            this._minUpdate = Number.MAX_VALUE, this._maxUpdate = Number.MIN_VALUE), this._lineCount > 0 && (this._bufferState.bind(), 
            v.instance.drawArrays(1, 0, 2 * this._lineCount), N.renderBatches++);
        }, n.destroy = function() {
            this._destroyed || (t.prototype.destroy.call(this), this._bufferState.destroy(), 
            this._vertexBuffer.destroy(), this._bufferState = null, this._vertexBuffer = null, 
            this._vertices = null);
        }, i(e, [ "_type", function() {
            return this._type = et._typeCounter++;
        } ]), e;
    }(et), pn = function(t) {
        function e(t, n, i) {
            switch (this._radius = 1, this._height = .5, e.__super.call(this), void 0 === t && (t = .5), 
            void 0 === n && (n = 1), void 0 === i && (i = 1), this._radius = t, this._height = n, 
            this._orientation = i, this._type = 2, i) {
              case 0:
                e._nativeSize.setValue(n / 2, t, t), this._nativeShape = new W._physics3D.btCylinderShapeX(e._nativeSize);
                break;

              case 1:
                e._nativeSize.setValue(t, n / 2, t), this._nativeShape = new W._physics3D.btCylinderShape(e._nativeSize);
                break;

              case 2:
                e._nativeSize.setValue(t, t, n / 2), this._nativeShape = new W._physics3D.btCylinderShapeZ(e._nativeSize);
                break;

              default:
                throw "CapsuleColliderShape:unknown orientation.";
            }
        }
        r(e, "laya.d3.physics.shape.CylinderColliderShape", X);
        var n = e.prototype;
        return n.clone = function() {
            var t = new e(this._radius, this._height, this._orientation);
            return this.cloneTo(t), t;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), a(0, n, "height", function() {
            return this._height;
        }), a(0, n, "orientation", function() {
            return this._orientation;
        }), i(e, [ "_nativeSize", function() {
            return this._nativeSize = new W._physics3D.btVector3(0, 0, 0);
        } ]), e;
    }(), Tn = function(t) {
        function e() {
            e.__super.call(this);
        }
        return r(e, "laya.d3.core.FloatKeyframe", t), e.prototype.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n.inTangent = this.inTangent, n.outTangent = this.outTangent, n.value = this.value;
        }, e;
    }(ft), En = function(t) {
        function e() {
            this.maxInstanceCount = 1024, e.__super.call(this), this.instanceWorldMatrixData = new Float32Array(16 * this.maxInstanceCount), 
            this.instanceMVPMatrixData = new Float32Array(16 * this.maxInstanceCount), this.instanceWorldMatrixBuffer = new Ke(4 * this.instanceWorldMatrixData.length, 35048), 
            this.instanceMVPMatrixBuffer = new Ke(4 * this.instanceMVPMatrixData.length, 35048), 
            this.instanceWorldMatrixBuffer.vertexDeclaration = It.instanceWorldMatrixDeclaration, 
            this.instanceMVPMatrixBuffer.vertexDeclaration = It.instanceMVPMatrixDeclaration;
        }
        return r(e, "laya.d3.graphics.SubMeshInstanceBatch", et), e.prototype._render = function(t) {
            var e = t.renderElement, n = e.instanceSubMesh, i = e.instanceBatchElementList.length, r = n._indexCount;
            n._mesh._instanceBufferState.bind(), B._angleInstancedArrays.drawElementsInstancedANGLE(4, r, 5123, 2 * n._indexStart, i), 
            N.renderBatches++, N.savedRenderBatches += i - 1, N.trianglesFaces += r * i / 3;
        }, i(e, [ "instance", function() {
            return this.instance = new e();
        } ]), e;
    }(), vn = function(t) {
        function e() {
            e.__super.call(this);
        }
        r(e, "laya.d3.core.scene.OctreeMotionList", $);
        var n = e.prototype;
        return n.add = function(t) {
            if (-1 !== t._getIndexInMotionList()) throw "OctreeMotionList:element has  in  PhysicsUpdateList.";
            this._add(t), t._setIndexInMotionList(this.length++);
        }, n.remove = function(t) {
            var e = t._getIndexInMotionList();
            if (this.length--, e !== this.length) {
                var n = this.elements[this.length];
                this.elements[e] = n, n._inPhysicUpdateListIndex = e;
            }
            t._setIndexInMotionList(-1);
        }, e;
    }(), gn = function(t) {
        function e() {
            this._renderTexture = null, e.__super.call(this);
        }
        r(e, "laya.d3.core.render.command.SetRenderTargetCMD", Q);
        var n = e.prototype;
        return n.run = function() {
            this._renderTexture._start();
        }, n.recover = function() {
            e._pool.push(this), this._renderTexture = null;
        }, e.create = function(t) {
            var n;
            return n = e._pool.length > 0 ? e._pool.pop() : new e(), n._renderTexture = t, n;
        }, e._pool = [], e;
    }(), Sn = function(t) {
        function e() {
            this._opaqueBatchMarks = [], e.__super.call(this), this._updateCountMark = 0;
        }
        r(e, "laya.d3.graphics.MeshRenderStaticBatchManager", t);
        var n = e.prototype;
        return n._compare = function(t, e) {
            var n = t._render, i = e._render, r = t.meshFilter.sharedMesh, a = e.meshFilter.sharedMesh, o = n.lightmapIndex - i.lightmapIndex;
            if (0 === o) {
                var s = (n.receiveShadow ? 1 : 0) - (i.receiveShadow ? 1 : 0);
                if (0 === s) {
                    var l = n.sharedMaterial.id - i.sharedMaterial.id;
                    if (0 === l) {
                        var h = r._vertexBuffers[0].vertexDeclaration.id - a._vertexBuffers[0].vertexDeclaration.id;
                        return 0 === h ? a._indexBuffer.indexCount - r._indexBuffer.indexCount : h;
                    }
                    return l;
                }
                return s;
            }
            return o;
        }, n._getBatchRenderElementFromPool = function() {
            var t = this._batchRenderElementPool[this._batchRenderElementPoolIndex++];
            return t || (t = new Pn(), this._batchRenderElementPool[this._batchRenderElementPoolIndex - 1] = t, 
            t.staticBatchElementList = []), t;
        }, n._getStaticBatch = function(t, n) {
            var i = t ? t.id : 0, r = this._staticBatches[i];
            return r || (r = this._staticBatches[i] = []), r[n] || (r[n] = new _n(t, n, e._verDec));
        }, n._initStaticBatchs = function(t) {
            this._quickSort(this._initBatchSprites, 0, this._initBatchSprites.length - 1);
            for (var e, n = !1, i = 0, r = 0, a = this._initBatchSprites.length; r < a; r++) {
                var o = this._initBatchSprites[r];
                n ? e.addTest(o) ? e.add(o) : (n = !1, i++) : r !== a - 1 && ((e = this._getStaticBatch(t, i)).add(o), 
                n = !0);
            }
            for (var s in this._staticBatches) {
                var l = this._staticBatches[s];
                for (r = 0, a = l.length; r < a; r++) l[r].finishInit();
            }
            this._initBatchSprites.length = 0;
        }, n._destroyRenderSprite = function(t) {
            var e = t._render._staticBatch;
            if (e.remove(t), 0 === e._batchElements.length) {
                var n = e.batchOwner, i = n ? n.id : 0, r = this._staticBatches[i];
                r[e.number] = null, e.dispose();
                for (var a = !0, o = 0; o < r.length; o++) r[o] && (a = !1);
                a && delete this._staticBatches[i];
            }
        }, n._clear = function() {
            t.prototype._clear.call(this), this._updateCountMark++;
        }, n._garbageCollection = function() {
            for (var t in this._staticBatches) for (var e = this._staticBatches[t], n = 0, i = e.length; n < i; n++) {
                var r = e[n];
                0 === r._batchElements.length && (r.dispose(), e.splice(n, 1), n--, 0 == --i && delete this._staticBatches[t]);
            }
        }, n.getBatchOpaquaMark = function(t, e, n, i) {
            var r = this._opaqueBatchMarks[t] || (this._opaqueBatchMarks[t] = []), a = r[e] || (r[e] = []), o = a[n] || (a[n] = []);
            return o[i] || (o[i] = new pe());
        }, i(e, [ "_verDec", function() {
            return this._verDec = It.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT");
        }, "instance", function() {
            return this.instance = new e();
        } ]), e;
    }(q), yn = function(t) {
        function e() {
            this._vertices = null, this._indices = null, this._positionOffset = 0, this._normalOffset = 0, 
            this._colorOffset = 0, this._uv0Offset = 0, this._uv1Offset = 0, this._sTangentOffset = 0, 
            this._vertexBuffer = null, this._indexBuffer = null, e.__super.call(this), this._bufferState = new Je();
            var t = 32e3 * It.getVertexDeclaration("POSITION,NORMAL,COLOR,UV,UV1,TANGENT").vertexStride;
            this._vertices = new Float32Array(t / 4), this._vertexBuffer = new Ke(t, 35048), 
            this._indices = new Int16Array(32e3), this._indexBuffer = new qe("ushort", this._indices.length, 35048);
            var n = this._vertexBuffer._byteLength + this._indexBuffer._byteLength;
            M._addMemory(n, n);
        }
        r(e, "laya.d3.graphics.SubMeshDynamicBatch", et);
        var n = e.prototype;
        return n._getBatchVertices = function(t, e, n, i, r, a) {
            var o = t.vertexStride / 4, s = a._vertexBuffer.getData(), l = (r.render.lightmapScaleOffset, 
            r._dynamicMultiSubMesh), h = r._dynamicVertexCount;
            r._computeWorldPositionsAndNormals(this._positionOffset, this._normalOffset, l, h);
            for (var u = r._dynamicWorldPositions, c = r._dynamicWorldNormals, _ = a._indices, d = 0; d < h; d++) {
                var f = (l ? _[d] : d) * o, m = (d + n) * o, p = 3 * d, T = m + this._positionOffset;
                e[T] = u[p], e[T + 1] = u[p + 1], e[T + 2] = u[p + 2], -1 !== this._normalOffset && (e[T = m + this._normalOffset] = c[p], 
                e[T + 1] = c[p + 1], e[T + 2] = c[p + 2]), -1 !== this._colorOffset && (T = m + this._colorOffset, 
                p = f + this._colorOffset, e[T] = s[p], e[T + 1] = s[p + 1], e[T + 2] = s[p + 2], 
                e[T + 3] = s[p + 3]), -1 !== this._uv0Offset && (T = m + this._uv0Offset, p = f + this._uv0Offset, 
                e[T] = s[p], e[T + 1] = s[p + 1]), -1 !== this._sTangentOffset && (T = m + this._sTangentOffset, 
                p = f + this._sTangentOffset, e[T] = s[p], e[T + 1] = s[p + 1], e[T + 2] = s[p + 2], 
                e[T + 3] = s[p + 3], T = m + this._sTangentOffset, p = f + this._sTangentOffset, 
                e[T] = s[p], e[T + 1] = s[p + 1], e[T + 2] = s[p + 2], e[T + 3] = s[p + 3]);
            }
        }, n._getBatchIndices = function(t, e, n, i, r, a) {
            var o = r._indices, s = 0, l = 0, h = 0, u = i._isFrontFaceInvert;
            if (a) if (u) for (s = 0, l = o.length; s < l; s += 3) {
                var c = n + s;
                t[h = e + s] = c, t[h + 1] = c + 2, t[h + 2] = c + 1;
            } else for (s = l, l = o.length; s < l; s += 3) c = n + s, t[h = e + s] = c, t[h + 1] = c + 1, 
            t[h + 2] = c + 2; else if (u) for (s = 0, l = o.length; s < l; s += 3) t[h = e + s] = n + o[s], 
            t[h + 1] = n + o[s + 2], t[h + 2] = n + o[s + 1]; else for (s = l, l = o.length; s < l; s += 3) t[h = e + s] = n + o[s], 
            t[h + 1] = n + o[s + 1], t[h + 2] = n + o[s + 2];
        }, n._flush = function(t, e) {
            this._vertexBuffer.setData(this._vertices, 0, 0, t * (this._vertexBuffer.vertexDeclaration.vertexStride / 4)), 
            this._indexBuffer.setData(this._indices, 0, 0, e), v.instance.drawElements(4, e, 5123, 0);
        }, n._prepareRender = function(t) {
            var e = t.renderElement.vertexBatchVertexDeclaration;
            this._bufferState = ln.instance._getBufferState(e), this._positionOffset = e.getVertexElementByUsage(0).offset / 4;
            var n = e.getVertexElementByUsage(3);
            this._normalOffset = n ? n.offset / 4 : -1;
            var i = e.getVertexElementByUsage(1);
            this._colorOffset = i ? i.offset / 4 : -1;
            var r = e.getVertexElementByUsage(2);
            this._uv0Offset = r ? r.offset / 4 : -1;
            var a = e.getVertexElementByUsage(7);
            this._uv1Offset = a ? a.offset / 4 : -1;
            var o = e.getVertexElementByUsage(4);
            return this._sTangentOffset = o ? o.offset / 4 : -1, !0;
        }, n._render = function(t) {
            this._bufferState.bind();
            for (var e = t.renderElement, n = e.vertexBatchVertexDeclaration, i = e.vertexBatchElementList, r = 0, a = 0, o = (n.vertexStride, 
            0), s = i.length, l = 0; l < s; l++) {
                var h = i[l], u = h._geometry, c = u._indexCount;
                a + c > 32e3 && (this._flush(r, a), o++, N.trianglesFaces += a / 3, r = a = 0);
                var _ = h._transform;
                this._getBatchVertices(n, this._vertices, r, _, h, u), this._getBatchIndices(this._indices, a, r, _, u, h._dynamicMultiSubMesh), 
                r += h._dynamicVertexCount, a += c;
            }
            this._flush(r, a), o++, N.renderBatches += o, N.savedRenderBatches += s - o, N.trianglesFaces += a / 3;
        }, e.maxAllowVertexCount = 10, e.maxAllowAttribueCount = 900, e.maxIndicesCount = 32e3, 
        e.instance = null, e;
    }(), xn = function(t) {
        function e() {
            e.__super.call(this);
            var t = new Float32Array([ -.5, .5, -.5, .5, .5, -.5, .5, .5, .5, -.5, .5, .5, -.5, -.5, -.5, .5, -.5, -.5, .5, -.5, .5, -.5, -.5, .5 ]), n = new Uint8Array([ 0, 1, 2, 2, 3, 0, 4, 7, 6, 6, 5, 4, 0, 3, 7, 7, 4, 0, 1, 5, 6, 6, 2, 1, 3, 2, 6, 6, 7, 3, 0, 4, 5, 5, 1, 0 ]), i = It.getVertexDeclaration("POSITION");
            this._vertexBuffer = new Ke(8 * i.vertexStride, 35044, !1), this._vertexBuffer.vertexDeclaration = i, 
            this._indexBuffer = new qe("ubyte", 36, 35044, !1), this._vertexBuffer.setData(t), 
            this._indexBuffer.setData(n);
            var r = new Je();
            r.bind(), r.applyVertexBuffer(this._vertexBuffer), r.applyIndexBuffer(this._indexBuffer), 
            r.unBind(), this._bufferState = r;
        }
        return r(e, "laya.d3.resource.models.SkyBox", Lt), e.prototype._render = function(t) {
            v.instance.drawElements(4, 36, 5121, 0), N.trianglesFaces += 12, N.renderBatches++;
        }, e.__init__ = function() {
            e.instance = new e();
        }, e.instance = null, e;
    }(), Dn = function(t) {
        function e() {
            this._mesh = null, this._convex = !1, e.__super.call(this);
        }
        r(e, "laya.d3.physics.shape.MeshColliderShape", t);
        var n = e.prototype;
        return n._setScale = function(t) {
            this._compoundParent ? this.updateLocalTransformations() : (X._nativeScale.setValue(t.x, t.y, t.z), 
            this._nativeShape.setLocalScaling(X._nativeScale), this._nativeShape.updateBound());
        }, n.cloneTo = function(e) {
            var n = e;
            n.convex = this._convex, n.mesh = this._mesh, t.prototype.cloneTo.call(this, e);
        }, n.clone = function() {
            var t = new e();
            return this.cloneTo(t), t;
        }, n.destroy = function() {
            this._nativeShape && (W._physics3D.destroy(this._nativeShape), this._nativeShape = null);
        }, a(0, n, "mesh", function() {
            return this._mesh;
        }, function(t) {
            if (this._mesh !== t) {
                var e = W._physics3D;
                this._mesh && e.destroy(this._nativeShape), t && (this._nativeShape = new e.btGImpactMeshShape(t._getPhysicMesh()), 
                this._nativeShape.updateBound()), this._mesh = t;
            }
        }), a(0, n, "convex", function() {
            return this._convex;
        }, function(t) {
            this._convex = t;
        }), e;
    }(X), In = function(t) {
        function e() {
            this.radius = NaN, this.emitFromShell = !1, e.__super.call(this), this.radius = 1, 
            this.emitFromShell = !1, this.randomDirection = !1;
        }
        r(e, "laya.d3.core.particleShuriKen.module.shape.HemisphereShape", t);
        var n = e.prototype;
        return n._getShapeBoundBox = function(t) {
            var e = t.min;
            e.x = e.y = e.z = -this.radius;
            var n = t.max;
            n.x = n.y = this.radius, n.z = 0;
        }, n._getSpeedBoundBox = function(t) {
            var e = t.min;
            e.x = e.y = -1, e.z = 0;
            var n = t.max;
            n.x = n.y = n.z = 1;
        }, n.generatePositionAndDirection = function(t, e, n, i) {
            n ? (n.seed = i[16], this.emitFromShell ? Le._randomPointUnitSphere(t, n) : Le._randomPointInsideUnitSphere(t, n), 
            i[16] = n.seed) : this.emitFromShell ? Le._randomPointUnitSphere(t) : Le._randomPointInsideUnitSphere(t), 
            Tt.scale(t, this.radius, t);
            var r = t.z;
            r < 0 && (t.z = -1 * r), this.randomDirection ? n ? (n.seed = i[17], Le._randomPointUnitSphere(e, n), 
            i[17] = n.seed) : Le._randomPointUnitSphere(e) : t.cloneTo(e);
        }, n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n.radius = this.radius, n.emitFromShell = this.emitFromShell, n.randomDirection = this.randomDirection;
        }, e;
    }(k), Rn = function(t) {
        function e(t, n, i, r, a, s, l, h) {
            this._owner = null, this._gridSize = NaN, this.memorySize = 0, this._numberVertices = 0, 
            this._maxNumberIndices = 0, this._currentNumberIndices = 0, this._numberTriangle = 0, 
            this._vertexBuffer = null, this._indexBuffer = null, this._indexArrayBuffer = null, 
            this._boundingBoxCorners = null, this._leafs = null, this._leafNum = 0, this._terrainHeightData = null, 
            this._terrainHeightDataWidth = 0, this._terrainHeightDataHeight = 0, this._chunkOffsetX = 0, 
            this._chunkOffsetZ = 0, this._cameraCoordinateInverse = !1, this._cameraPos = null, 
            this._currentLOD = 0, this._perspectiveFactor = NaN, this._LODTolerance = 0, this._boundingSphere = null, 
            this._boundingBox = null, e.__super.call(this), this._bufferState = new Je(), this._owner = t, 
            this._cameraPos = new Tt(), this._chunkOffsetX = n, this._chunkOffsetZ = i, this._gridSize = r, 
            this._terrainHeightData = a, this._terrainHeightDataWidth = s, this._terrainHeightDataHeight = l, 
            this._leafNum = ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM * (ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM), 
            this._leafs = o(this._leafNum), this._cameraCoordinateInverse = h;
            for (var u = 0; u < this._leafNum; u++) this._leafs[u] = new ct();
            this.recreateResource();
        }
        r(e, "laya.d3.terrain.TerrainFilter", et);
        var n = e.prototype;
        return n.recreateResource = function() {
            this._currentNumberIndices = 0, this._numberTriangle = 0;
            var t = ct.LEAF_VERTEXT_COUNT, e = ct.LEAF_MAX_INDEX_COUNT;
            this._numberVertices = t * this._leafNum, this._maxNumberIndices = e * this._leafNum, 
            this._indexArrayBuffer = new Uint16Array(this._maxNumberIndices);
            var n = qt.vertexDeclaration, i = n.vertexStride / 4, r = new Float32Array(this._numberVertices * i), a = ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM, o = 0, s = 0, l = 0;
            for (o = 0; o < this._leafNum; o++) s = o % a, l = Math.floor(o / a), this._leafs[o].calcVertextBuffer(this._chunkOffsetX, this._chunkOffsetZ, s * ct.LEAF_GRID_NUM, l * ct.LEAF_GRID_NUM, this._gridSize, r, o * ct.LEAF_PLANE_VERTEXT_COUNT, i, this._terrainHeightData, this._terrainHeightDataWidth, this._terrainHeightDataHeight, this._cameraCoordinateInverse);
            for (o = 0; o < this._leafNum; o++) s = o % a, l = Math.floor(o / a), this._leafs[o].calcSkirtVertextBuffer(this._chunkOffsetX, this._chunkOffsetZ, s * ct.LEAF_GRID_NUM, l * ct.LEAF_GRID_NUM, this._gridSize, r, this._leafNum * ct.LEAF_PLANE_VERTEXT_COUNT + o * ct.LEAF_SKIRT_VERTEXT_COUNT, i, this._terrainHeightData, this._terrainHeightDataWidth, this._terrainHeightDataHeight);
            this.assembleIndexInit(), this._vertexBuffer = new Ke(n.vertexStride * this._numberVertices, 35044, !1), 
            this._vertexBuffer.vertexDeclaration = n, this._indexBuffer = new qe("ushort", this._maxNumberIndices, 35044, !1), 
            this._vertexBuffer.setData(r), this._indexBuffer.setData(this._indexArrayBuffer), 
            this.memorySize = 2 * (this._vertexBuffer._byteLength + this._indexBuffer._byteLength), 
            this.calcOriginalBoudingBoxAndSphere(), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.applyIndexBuffer(this._indexBuffer), this._bufferState.unBind();
        }, n.setLODLevel = function(t) {
            if (4 != t.length) return !0;
            var e = (t[0] + 1 << 24) + (t[1] + 1 << 16) + (t[2] + 1 << 8) + (t[3] + 1);
            return this._currentLOD != e && (this._currentLOD = e, !0);
        }, n.assembleIndexInit = function() {
            this._currentNumberIndices = 0, this._numberTriangle = 0;
            for (var t = 0, e = 0; e < this._leafNum; e++) {
                var n = ct.getPlaneLODIndex(e, 0);
                this._indexArrayBuffer.set(n, t), t += n.length;
                var i = ct.getSkirtLODIndex(e, 0);
                this._indexArrayBuffer.set(i, t), t += i.length, this._currentNumberIndices += n.length + i.length;
            }
            this._numberTriangle = this._currentNumberIndices / 3;
        }, n.isNeedAssemble = function(t, e) {
            var n = Math.min(t.viewport.width, t.viewport.height) / (2 * Math.tan(Math.PI * t.fieldOfView / 180));
            return this._perspectiveFactor != n ? (this._perspectiveFactor = n, 1) : this._LODTolerance != ei.LOD_TOLERANCE_VALUE ? (this._LODTolerance = ei.LOD_TOLERANCE_VALUE, 
            1) : 0 == Tt.equals(e, this._cameraPos) ? (this._cameraPos.x = e.x, this._cameraPos.y = e.y, 
            this._cameraPos.z = e.z, 2) : 0;
        }, n.assembleIndex = function(t, n) {
            var i = this.isNeedAssemble(t, n);
            if (i > 0) {
                for (var r = 0; r < this._leafNum; r++) e._TEMP_ARRAY_BUFFER[r] = this._leafs[r].determineLod(n, this._perspectiveFactor, ei.LOD_TOLERANCE_VALUE, 1 == i);
                if (this.setLODLevel(e._TEMP_ARRAY_BUFFER)) {
                    this._currentNumberIndices = 0, this._numberTriangle = 0;
                    var a = 0;
                    for (r = 0; r < this._leafNum; r++) {
                        var o = e._TEMP_ARRAY_BUFFER[r], s = ct.getPlaneLODIndex(r, o);
                        this._indexArrayBuffer.set(s, a), a += s.length;
                        var l = ct.getSkirtLODIndex(r, o);
                        this._indexArrayBuffer.set(l, a), a += l.length, this._currentNumberIndices += s.length + l.length;
                    }
                    return this._numberTriangle = this._currentNumberIndices / 3, !0;
                }
            }
            return !1;
        }, n.calcOriginalBoudingBoxAndSphere = function() {
            for (var t = new Et(2147483647, -2147483647), e = 0; e < this._leafNum; e++) t.x = this._leafs[e]._sizeOfY.x < t.x ? this._leafs[e]._sizeOfY.x : t.x, 
            t.y = this._leafs[e]._sizeOfY.y > t.y ? this._leafs[e]._sizeOfY.y : t.y;
            var n = new Tt(this._chunkOffsetX * ct.CHUNK_GRID_NUM * this._gridSize, t.x, this._chunkOffsetZ * ct.CHUNK_GRID_NUM * this._gridSize), i = new Tt((this._chunkOffsetX + 1) * ct.CHUNK_GRID_NUM * this._gridSize, t.y, (this._chunkOffsetZ + 1) * ct.CHUNK_GRID_NUM * this._gridSize);
            ct.__ADAPT_MATRIX__ && (Tt.transformV3ToV3(n, ct.__ADAPT_MATRIX__, n), Tt.transformV3ToV3(i, ct.__ADAPT_MATRIX__, i)), 
            this._boundingBox = new ze(n, i);
            var r = new Tt();
            Tt.subtract(i, n, r), Tt.scale(r, .5, r);
            var a = new Tt();
            Tt.add(n, r, a), this._boundingSphere = new Mt(a, Tt.scalarLength(r)), this._boundingBoxCorners = o(8, null), 
            this._boundingBox.getCorners(this._boundingBoxCorners);
        }, n.calcLeafBoudingBox = function(t) {
            for (var e = 0; e < this._leafNum; e++) this._leafs[e].calcLeafBoudingBox(t);
        }, n.calcLeafBoudingSphere = function(t, e) {
            for (var n = 0; n < this._leafNum; n++) this._leafs[n].calcLeafBoudingSphere(t, e);
        }, n._getVertexBuffer = function(t) {
            return void 0 === t && (t = 0), 0 == t ? this._vertexBuffer : null;
        }, n._getIndexBuffer = function() {
            return this._indexBuffer;
        }, n._getType = function() {
            return e._type;
        }, n._prepareRender = function(t) {
            return !0;
        }, n._render = function(t) {
            this._bufferState.bind(), v.instance.drawElements(ei.RENDER_LINE_MODEL ? 1 : 4, this._currentNumberIndices, 5123, 0), 
            N.trianglesFaces += this._numberTriangle, N.renderBatches++;
        }, n.destroy = function() {
            this._owner = null, this._bufferState.destroy(), this._vertexBuffer && this._vertexBuffer.destroy(), 
            this._indexBuffer && this._indexBuffer.destroy();
        }, i(e, [ "_TEMP_ARRAY_BUFFER", function() {
            return this._TEMP_ARRAY_BUFFER = new Uint32Array(ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM * ct.CHUNK_GRID_NUM / ct.LEAF_GRID_NUM);
        }, "_type", function() {
            return this._type = et._typeCounter++;
        } ]), e;
    }(), Mn = (function(t) {
        function e() {
            this._shader = null, this._pyramid = null, this._intensity = 0, this._threshold = 1, 
            this._softKnee = .5, this._diffusion = 7, this._anamorphicRatio = 0, this._dirtIntensity = 0, 
            this.clamp = 65472, this.fastMode = !1, this.dirtTexture = null, e.__super.call(this), 
            this._shaderData = new ut(), this._linearColor = new xt(), this._shaderThreshold = new mt(), 
            this._shaderParams = new mt(), this._shaderSetting = new mt(), this._dirtTileOffset = new mt(), 
            this.color = new xt(1, 1, 1, 1), this._shader = Vt.find("PostProcessBloom"), this._pyramid = new Array(32);
        }
        r(e, "laya.d3.core.render.BloomEffect", bt);
        var n = e.prototype;
        n.render = function(t) {
            var n = t.command, i = t.camera.viewport;
            this._shaderData.setTexture(e.SHADERVALUE_AUTOEXPOSURETEX, P.whiteTexture);
            var r = this._anamorphicRatio, a = r < 0 ? -r : 0, o = r > 0 ? r : 0, s = Math.floor(i.width / (2 - a)), l = Math.floor(i.height / (2 - o)), h = Math.max(s, l), u = NaN;
            u = Math.log2(h) + this._diffusion - 10;
            var c = Math.floor(u), _ = Math.min(Math.max(c, 1), 16), d = .5 + u - c;
            this._shaderData.setNumber(e.SHADERVALUE_SAMPLESCALE, d);
            var f = kt.gammaToLinearSpace(this.threshold), m = f * this._softKnee + 1e-5;
            this._shaderThreshold.setValue(f, f - m, 2 * m, .25 / m), this._shaderData.setVector(e.SHADERVALUE_THRESHOLD, this._shaderThreshold);
            var p = kt.gammaToLinearSpace(this.clamp);
            this._shaderParams.setValue(p, 0, 0, 0), this._shaderData.setVector(e.SHADERVALUE_PARAMS, this._shaderParams);
            for (var T = this.fastMode ? 1 : 0, E = t.source, v = 0; v < _; v++) {
                var g = 2 * v, S = g + 1, y = 0 == v ? 0 + T : 2 + T, x = pi.getTemporary(s, l, 0, 3, 1), D = pi.getTemporary(s, l, 0, 3, 1);
                this._pyramid[g] = x, this._pyramid[S] = D, n.blit(E, x, this._shader, this._shaderData, y), 
                E = x, s = Math.max(s / 2, 1), l = Math.max(l / 2, 1);
            }
            var I = this._pyramid[2 * _ - 3];
            for (v = _ - 2; v >= 0; v--) S = 1 + (g = 2 * v), x = this._pyramid[g], D = this._pyramid[S], 
            n.setShaderDataTexture(this._shaderData, e.SHADERVALUE_BLOOMTEX, x), n.blit(I, D, this._shader, this._shaderData, 4 + T), 
            I = D;
            var R = this._linearColor;
            this.color.toLinear(R);
            var M = Math.pow(2, this._intensity / 10) - 1, A = this._shaderSetting;
            this._shaderSetting.setValue(d, M, this._dirtIntensity, _);
            var C = C || P.blackTexture, L = C.width / C.height, O = i.width / i.height, N = this._dirtTileOffset;
            N.setValue(1, 1, 0, 0), L > O ? N.setValue(O / L, 1, .5 * (1 - N.x), 0) : L < O && N.setValue(1, L / O, 0, .5 * (1 - N.y));
            var V = t.compositeShaderData, w = t.compositeDefineData;
            for (this.fastMode ? w.add(Re.SHADERDEFINE_BLOOM_LOW) : w.add(Re.SHADERDEFINE_BLOOM), 
            V.setVector(Re.SHADERVALUE_BLOOM_DIRTTILEOFFSET, N), V.setVector(Re.SHADERVALUE_BLOOM_SETTINGS, A), 
            V.setVector(Re.SHADERVALUE_BLOOM_COLOR, new mt(R.r, R.g, R.b, R.a)), V.setTexture(Re.SHADERVALUE_BLOOM_DIRTTEX, C), 
            V.setTexture(Re.SHADERVALUE_BLOOMTEX, I), v = 0; v < _; v++) S = 1 + (g = 2 * v), 
            this._pyramid[g] != I && pi.setReleaseTemporary(this._pyramid[g]), this._pyramid[S] != I && pi.setReleaseTemporary(this._pyramid[S]);
            t.tempRenderTextures.push(I);
        }, a(0, n, "softKnee", function() {
            return this._softKnee;
        }, function(t) {
            this._softKnee = Math.min(Math.max(t, 0), 1);
        }), a(0, n, "intensity", function() {
            return this._intensity;
        }, function(t) {
            this._intensity = Math.max(t, 0);
        }), a(0, n, "threshold", function() {
            return this._threshold;
        }, function(t) {
            this._threshold = Math.max(t, 0);
        }), a(0, n, "anamorphicRatio", function() {
            return this._anamorphicRatio;
        }, function(t) {
            this._anamorphicRatio = Math.min(Math.max(t, -1), 1);
        }), a(0, n, "diffusion", function() {
            return this._diffusion;
        }, function(t) {
            this._diffusion = Math.min(Math.max(t, 1), 10);
        }), a(0, n, "dirtIntensity", function() {
            return this._dirtIntensity;
        }, function(t) {
            this._dirtIntensity = Math.max(t, 0);
        }), e.SUBSHADER_PREFILTER13 = 0, e.SUBSHADER_PREFILTER4 = 1, e.SUBSHADER_DOWNSAMPLE13 = 2, 
        e.SUBSHADER_DOWNSAMPLE4 = 3, e.SUBSHADER_UPSAMPLETENT = 4, e.SUBSHADER_UPSAMPLEBOX = 5, 
        e.MAXPYRAMIDSIZE = 16, i(e, [ "SHADERVALUE_MAINTEX", function() {
            return this.SHADERVALUE_MAINTEX = Vt.propertyNameToID("u_MainTex");
        }, "SHADERVALUE_AUTOEXPOSURETEX", function() {
            return this.SHADERVALUE_AUTOEXPOSURETEX = Vt.propertyNameToID("u_AutoExposureTex");
        }, "SHADERVALUE_SAMPLESCALE", function() {
            return this.SHADERVALUE_SAMPLESCALE = Vt.propertyNameToID("u_SampleScale");
        }, "SHADERVALUE_THRESHOLD", function() {
            return this.SHADERVALUE_THRESHOLD = Vt.propertyNameToID("u_Threshold");
        }, "SHADERVALUE_PARAMS", function() {
            return this.SHADERVALUE_PARAMS = Vt.propertyNameToID("u_Params");
        }, "SHADERVALUE_BLOOMTEX", function() {
            return this.SHADERVALUE_BLOOMTEX = Vt.propertyNameToID("u_BloomTex");
        } ]);
    }(), function(t) {
        function e() {
            this._shaderData = null, this._nameID = 0, this._texture = null, e.__super.call(this);
        }
        r(e, "laya.d3.core.render.command.SetShaderDataTextureCMD", Q);
        var n = e.prototype;
        return n.run = function() {
            this._shaderData.setTexture(this._nameID, this._texture);
        }, n.recover = function() {
            e._pool.push(this), this._shaderData = null, this._nameID = 0, this._texture = null;
        }, e.create = function(t, n, i) {
            var r;
            return r = e._pool.length > 0 ? e._pool.pop() : new e(), r._shaderData = t, r._nameID = n, 
            r._texture = i, r;
        }, e._pool = [], e;
    }()), An = function(t) {
        function e() {
            this.radius = NaN, this.emitFromShell = !1, e.__super.call(this), this.radius = 1, 
            this.emitFromShell = !1, this.randomDirection = !1;
        }
        r(e, "laya.d3.core.particleShuriKen.module.shape.SphereShape", t);
        var n = e.prototype;
        return n._getShapeBoundBox = function(t) {
            var e = t.min;
            e.x = e.y = e.z = -this.radius;
            var n = t.max;
            n.x = n.y = n.z = this.radius;
        }, n._getSpeedBoundBox = function(t) {
            var e = t.min;
            e.x = e.y = e.z = -1;
            var n = t.max;
            n.x = n.y = n.z = 1;
        }, n.generatePositionAndDirection = function(t, e, n, i) {
            n ? (n.seed = i[16], this.emitFromShell ? Le._randomPointUnitSphere(t, n) : Le._randomPointInsideUnitSphere(t, n), 
            i[16] = n.seed) : this.emitFromShell ? Le._randomPointUnitSphere(t) : Le._randomPointInsideUnitSphere(t), 
            Tt.scale(t, this.radius, t), this.randomDirection ? n ? (n.seed = i[17], Le._randomPointUnitSphere(e, n), 
            i[17] = n.seed) : Le._randomPointUnitSphere(e) : t.cloneTo(e);
        }, n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n.radius = this.radius, n.emitFromShell = this.emitFromShell, n.randomDirection = this.randomDirection;
        }, e;
    }(k), Cn = function(t) {
        function e() {
            e.__super.call(this), this.inTangent = new Tt(), this.outTangent = new Tt(), this.value = new Tt();
        }
        return r(e, "laya.d3.core.Vector3Keyframe", t), e.prototype.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            this.inTangent.cloneTo(n.inTangent), this.outTangent.cloneTo(n.outTangent), this.value.cloneTo(n.value);
        }, e;
    }(ft), Ln = function(t) {
        function e(t, n) {
            this._stacks = 0, this._slices = 0, e.__super.call(this), void 0 === t && (t = 48), 
            void 0 === n && (n = 48), this._stacks = t, this._slices = n;
            for (var i = nt.vertexDeclaration, r = i.vertexStride / 4, a = (this._stacks + 1) * (this._slices + 1), o = 3 * this._stacks * (this._slices + 1) * 2, s = new Float32Array(a * r), l = new Uint16Array(o), h = Math.PI / this._stacks, u = 2 * Math.PI / this._slices, c = 0, _ = 0, d = 0, f = 0; f < this._stacks + 1; f++) for (var m = Math.sin(f * h), p = Math.cos(f * h), T = 0; T < this._slices + 1; T++) {
                var E = m * Math.sin(T * u), v = m * Math.cos(T * u);
                s[_ + 0] = E * e._radius, s[_ + 1] = p * e._radius, s[_ + 2] = v * e._radius, s[_ + 3] = -T / this._slices + .75, 
                s[_ + 4] = f / this._stacks, _ += r, f != this._stacks - 1 && (l[d++] = c + 1, l[d++] = c, 
                l[d++] = c + (this._slices + 1), l[d++] = c + (this._slices + 1), l[d++] = c, l[d++] = c + this._slices, 
                c++);
            }
            this._vertexBuffer = new Ke(4 * s.length, 35044, !1), this._vertexBuffer.vertexDeclaration = i, 
            this._indexBuffer = new qe("ushort", l.length, 35044, !1), this._vertexBuffer.setData(s), 
            this._indexBuffer.setData(l);
            var g = new Je();
            g.bind(), g.applyVertexBuffer(this._vertexBuffer), g.applyIndexBuffer(this._indexBuffer), 
            g.unBind(), this._bufferState = g;
        }
        r(e, "laya.d3.resource.models.SkyDome", Lt);
        var n = e.prototype;
        return n._render = function(t) {
            var e = this._indexBuffer.indexCount;
            v.instance.drawElements(4, e, 5123, 0), N.trianglesFaces += e / 3, N.renderBatches++;
        }, a(0, n, "stacks", function() {
            return this._stacks;
        }), a(0, n, "slices", function() {
            return this._slices;
        }), e.__init__ = function() {
            e.instance = new e();
        }, e._radius = 1, e.instance = null, e;
    }(), On = function(t) {
        function e(t, n, i) {
            switch (this._radius = 1, this._height = .5, e.__super.call(this), void 0 === t && (t = .5), 
            void 0 === n && (n = 1), void 0 === i && (i = 1), this._radius = t, this._height = n, 
            this._orientation = i, this._type = 2, i) {
              case 0:
                this._nativeShape = new W._physics3D.btConeShapeX(t, n);
                break;

              case 1:
                this._nativeShape = new W._physics3D.btConeShape(t, n);
                break;

              case 2:
                this._nativeShape = new W._physics3D.btConeShapeZ(t, n);
                break;

              default:
                throw "ConeColliderShape:unknown orientation.";
            }
        }
        r(e, "laya.d3.physics.shape.ConeColliderShape", X);
        var n = e.prototype;
        return n.clone = function() {
            var t = new e(this._radius, this._height, this._orientation);
            return this.cloneTo(t), t;
        }, a(0, n, "radius", function() {
            return this._radius;
        }), a(0, n, "height", function() {
            return this._height;
        }), a(0, n, "orientation", function() {
            return this._orientation;
        }), e;
    }(), Nn = function(t) {
        function e() {
            this.x = NaN, this.y = NaN, this.z = NaN, e.__super.call(this), this.x = 1, this.y = 1, 
            this.z = 1, this.randomDirection = !1;
        }
        r(e, "laya.d3.core.particleShuriKen.module.shape.BoxShape", t);
        var n = e.prototype;
        return n._getShapeBoundBox = function(t) {
            var e = t.min;
            e.x = .5 * -this.x, e.y = .5 * -this.y, e.z = .5 * -this.z;
            var n = t.max;
            n.x = .5 * this.x, n.y = .5 * this.y, n.z = .5 * this.z;
        }, n._getSpeedBoundBox = function(t) {
            var e = t.min;
            e.x = 0, e.y = 0, e.z = 0;
            var n = t.max;
            n.x = 0, n.y = 1, n.z = 0;
        }, n.generatePositionAndDirection = function(t, e, n, i) {
            n ? (n.seed = i[16], Le._randomPointInsideHalfUnitBox(t, n), i[16] = n.seed) : Le._randomPointInsideHalfUnitBox(t), 
            t.x = this.x * t.x, t.y = this.y * t.y, t.z = this.z * t.z, this.randomDirection ? n ? (n.seed = i[17], 
            Le._randomPointUnitSphere(e, n), i[17] = n.seed) : Le._randomPointUnitSphere(e) : (e.x = 0, 
            e.y = 0, e.z = 1);
        }, n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n.x = this.x, n.y = this.y, n.z = this.z, n.randomDirection = this.randomDirection;
        }, e;
    }(k), Vn = function(t) {
        function e() {
            e.__super.call(this), this.inTangent = new mt(), this.outTangent = new mt(), this.value = new ht();
        }
        return r(e, "laya.d3.core.QuaternionKeyframe", t), e.prototype.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            this.inTangent.cloneTo(n.inTangent), this.outTangent.cloneTo(n.outTangent), this.value.cloneTo(n.value);
        }, e;
    }(ft), wn = function(t) {
        function e(t, n, i, r, a, o, s, l, h, u, c, _, d, f) {
            this._cornerTextureCoordinate = null, this._positionStartLifeTime = null, this._velocity = null, 
            this._startColor = null, this._startSize = null, this._startRotation0 = null, this._startRotation1 = null, 
            this._startRotation2 = null, this._startLifeTime = NaN, this._time = NaN, this._startSpeed = NaN, 
            this._randoms0 = null, this._randoms1 = null, this._simulationWorldPostion = null, 
            e.__super.call(this), this._cornerTextureCoordinate = t, this._positionStartLifeTime = n, 
            this._velocity = i, this._startColor = r, this._startSize = a, this._startRotation0 = o, 
            this._startRotation1 = s, this._startRotation2 = l, this._startLifeTime = h, this._time = u, 
            this._startSpeed = c, this._randoms0 = this.random0, this._randoms1 = this.random1, 
            this._simulationWorldPostion = f;
        }
        r(e, "laya.d3.graphics.Vertex.VertexShurikenParticleBillboard", _t);
        var n = e.prototype;
        return a(0, n, "cornerTextureCoordinate", function() {
            return this._cornerTextureCoordinate;
        }), a(0, n, "random1", function() {
            return this._randoms1;
        }), a(0, n, "startRotation2", function() {
            return this._startRotation2;
        }), a(0, n, "positionStartLifeTime", function() {
            return this._positionStartLifeTime;
        }), a(0, n, "velocity", function() {
            return this._velocity;
        }), a(0, n, "random0", function() {
            return this._randoms0;
        }), a(0, n, "startSize", function() {
            return this._startSize;
        }), a(0, n, "startColor", function() {
            return this._startColor;
        }), a(0, n, "startRotation0", function() {
            return this._startRotation0;
        }), a(0, n, "startRotation1", function() {
            return this._startRotation1;
        }), a(0, n, "startLifeTime", function() {
            return this._startLifeTime;
        }), a(0, n, "time", function() {
            return this._time;
        }), a(0, n, "startSpeed", function() {
            return this._startSpeed;
        }), a(0, n, "simulationWorldPostion", function() {
            return this._simulationWorldPostion;
        }), a(1, e, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }, laya.d3.graphics.Vertex.VertexShuriKenParticle._$SET_vertexDeclaration), i(e, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new fe(152, [ new zt(0, "vector4", 0), new zt(16, "vector4", 4), new zt(32, "vector4", 5), new zt(48, "vector4", 6), new zt(64, "vector3", 8), new zt(76, "vector3", 9), new zt(88, "single", 10), new zt(92, "vector4", 11), new zt(108, "vector4", 12), new zt(124, "vector3", 13), new zt(136, "vector4", 14) ]);
        } ]), e;
    }(), Pn = function(t) {
        function e() {
            e.__super.call(this), this._dynamicWorldPositionNormalNeedUpdate = !0;
        }
        r(e, "laya.d3.core.render.SubMeshRenderElement", t);
        var n = e.prototype;
        return n._onWorldMatrixChanged = function() {
            this._dynamicWorldPositionNormalNeedUpdate = !0;
        }, n._computeWorldPositionsAndNormals = function(t, e, n, i) {
            if (this._dynamicWorldPositionNormalNeedUpdate) {
                for (var r = this._geometry, a = r._vertexBuffer, o = a.vertexDeclaration.vertexStride / 4, s = a.getData(), l = this._transform.worldMatrix, h = this._transform.rotation, u = r._indices, c = 0; c < i; c++) {
                    var _ = (n ? u[c] : c) * o, d = 3 * c;
                    kt.transformVector3ArrayToVector3ArrayCoordinate(s, _ + t, l, this._dynamicWorldPositions, d), 
                    -1 !== e && kt.transformVector3ArrayByQuat(s, _ + e, h, this._dynamicWorldNormals, d);
                }
                this._dynamicWorldPositionNormalNeedUpdate = !1;
            }
        }, n.setTransform = function(t) {
            this._transform !== t && (this._transform && this._transform.off("transformchanged", this, this._onWorldMatrixChanged), 
            t && t.on("transformchanged", this, this._onWorldMatrixChanged), this._dynamicWorldPositionNormalNeedUpdate = !0, 
            this._transform = t);
        }, n.setGeometry = function(t) {
            if (this._geometry !== t) {
                var e = t, n = e._mesh;
                if (n) {
                    var i = n._subMeshCount > 1, r = i ? e._indexCount : n._vertexCount;
                    if (r <= 10) {
                        var a = 3 * r;
                        this._dynamicVertexBatch = !0, this._dynamicWorldPositions = new Float32Array(a), 
                        this._dynamicWorldNormals = new Float32Array(a), this._dynamicVertexCount = r, this._dynamicMultiSubMesh = i;
                    } else this._dynamicVertexBatch = !1;
                }
                this._geometry = t;
            }
        }, n.addToOpaqueRenderQueue = function(t, e) {
            var n = this.staticBatch, i = e.elements;
            if (n) {
                var r = Sn.instance, a = r.getBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, n._batchID);
                if (r._updateCountMark === a.updateMark) {
                    var o = a.indexInList;
                    if (a.batched) i[o].staticBatchElementList.push(this); else {
                        var s = i[o], l = s.render, h = r._getBatchRenderElementFromPool();
                        h.renderType = 1, h.setGeometry(n), h.material = s.material;
                        var u = n.batchOwner, c = u ? u._transform : null;
                        h.setTransform(c), h.render = l;
                        var _ = h.staticBatchElementList;
                        _.length = 0, _.push(s), _.push(this), i[o] = h, a.batched = !0;
                    }
                } else a.updateMark = r._updateCountMark, a.indexInList = i.length, a.batched = !1, 
                i.push(this);
            } else if (this.material._shader._enableInstancing && B._angleInstancedArrays) {
                var d = this._geometry, f = ln.instance, m = f.getInstanceBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, d._id);
                if (f._updateCountMark === m.updateMark) {
                    var p = m.indexInList;
                    if (m.batched) {
                        var T = i[p].instanceBatchElementList;
                        T.length === En.instance.maxInstanceCount ? (m.updateMark = f._updateCountMark, 
                        m.indexInList = i.length, m.batched = !1, i.push(this)) : T.push(this);
                    } else {
                        var E = i[p], v = E.render, g = f._getBatchRenderElementFromPool();
                        g.renderType = 2, g.setGeometry(En.instance), g.material = E.material, g.setTransform(null), 
                        g.render = v, g.instanceSubMesh = d;
                        var S = g.instanceBatchElementList;
                        S.length = 0, S.push(E), S.push(this), i[p] = g, m.batched = !0;
                    }
                } else m.updateMark = f._updateCountMark, m.indexInList = i.length, m.batched = !1, 
                i.push(this);
            } else if (this._dynamicVertexBatch) {
                var y = this._geometry._vertexBuffer.vertexDeclaration, x = ln.instance, D = x.getVertexBatchOpaquaMark(this.render.lightmapIndex + 1, this.render.receiveShadow, this.material.id, y.id);
                if (x._updateCountMark === D.updateMark) {
                    var I = D.indexInList;
                    if (D.batched) i[I].vertexBatchElementList.push(this); else {
                        var R = i[I], M = R.render, A = x._getBatchRenderElementFromPool();
                        A.renderType = 3, A.setGeometry(yn.instance), A.material = R.material, A.setTransform(null), 
                        A.render = M, A.vertexBatchVertexDeclaration = y;
                        var C = A.vertexBatchElementList;
                        C.length = 0, C.push(R), C.push(this), i[I] = A, D.batched = !0;
                    }
                } else D.updateMark = x._updateCountMark, D.indexInList = i.length, D.batched = !1, 
                i.push(this);
            } else i.push(this);
        }, n.addToTransparentRenderQueue = function(t, e) {
            var n = this.staticBatch, i = e.elements;
            if (n) {
                var r = Sn.instance, a = e.lastTransparentRenderElement;
                if (a) {
                    var o = a.render;
                    if (a._geometry._getType() !== this._geometry._getType() || a.staticBatch !== n || a.material !== this.material || o.receiveShadow !== this.render.receiveShadow || o.lightmapIndex !== this.render.lightmapIndex) i.push(this), 
                    e.lastTransparentBatched = !1; else {
                        if (e.lastTransparentBatched) i[i.length - 1].staticBatchElementList.push(this); else {
                            var s = r._getBatchRenderElementFromPool();
                            s.renderType = 1, s.setGeometry(n), s.material = a.material;
                            var l = n.batchOwner, h = l ? l._transform : null;
                            s.setTransform(h), s.render = this.render;
                            var u = s.staticBatchElementList;
                            u.length = 0, u.push(a), u.push(this), i[i.length - 1] = s;
                        }
                        e.lastTransparentBatched = !0;
                    }
                } else i.push(this), e.lastTransparentBatched = !1;
            } else if (this.material._shader._enableInstancing && B._angleInstancedArrays) {
                var c = this._geometry, _ = ln.instance, d = e.lastTransparentRenderElement;
                if (d) {
                    var f = d.render;
                    if (d._geometry._getType() !== this._geometry._getType() || d._geometry !== c || d.material !== this.material || f.receiveShadow !== this.render.receiveShadow || f.lightmapIndex !== this.render.lightmapIndex) i.push(this), 
                    e.lastTransparentBatched = !1; else {
                        if (e.lastTransparentBatched) i[i.length - 1].instanceBatchElementList.push(this); else {
                            var m = _._getBatchRenderElementFromPool();
                            m.renderType = 2, m.setGeometry(En.instance), m.material = d.material, m.setTransform(null), 
                            m.render = this.render, m.instanceSubMesh = c;
                            var p = m.instanceBatchElementList;
                            p.length = 0, p.push(d), p.push(this), i[i.length - 1] = m;
                        }
                        e.lastTransparentBatched = !0;
                    }
                } else i.push(this), e.lastTransparentBatched = !1;
            } else if (this._dynamicVertexBatch) {
                var T = this._geometry._vertexBuffer.vertexDeclaration, E = ln.instance, v = e.lastTransparentRenderElement;
                if (v) {
                    var g = v.render;
                    if (v._geometry._getType() !== this._geometry._getType() || v._geometry._vertexBuffer._vertexDeclaration !== T || v.material !== this.material || g.receiveShadow !== this.render.receiveShadow || g.lightmapIndex !== this.render.lightmapIndex) i.push(this), 
                    e.lastTransparentBatched = !1; else {
                        if (e.lastTransparentBatched) i[i.length - 1].vertexBatchElementList.push(this); else {
                            var S = E._getBatchRenderElementFromPool();
                            S.renderType = 3, S.setGeometry(yn.instance), S.material = v.material, S.setTransform(null), 
                            S.render = this.render, S.vertexBatchVertexDeclaration = T;
                            var y = S.vertexBatchElementList;
                            y.length = 0, y.push(v), y.push(this), i[i.length - 1] = S;
                        }
                        e.lastTransparentBatched = !0;
                    }
                } else i.push(this), e.lastTransparentBatched = !1;
            } else i.push(this);
            e.lastTransparentRenderElement = this;
        }, n.destroy = function() {
            t.prototype.destroy.call(this), this._dynamicWorldPositions = null, this._dynamicWorldNormals = null, 
            this.staticBatch = null, this.staticBatchElementList = null, this.vertexBatchElementList = null, 
            this.vertexBatchVertexDeclaration = null;
        }, e._maxInstanceCount = 1024, i(e, [ "_instanceMatrixData", function() {
            return this._instanceMatrixData = new Float32Array(16 * e._maxInstanceCount);
        }, "_instanceMatrixBuffer", function() {
            return this._instanceMatrixBuffer = new Ke(4 * e._instanceMatrixData.length, 35048);
        } ]), e;
    }(At), bn = function(t) {
        function e(t, n, i, r, a, o, s, l, h, u, c, _, d, f) {
            this._cornerTextureCoordinate = null, this._positionStartLifeTime = null, this._velocity = null, 
            this._startColor = null, this._startSize = null, this._startRotation0 = null, this._startRotation1 = null, 
            this._startRotation2 = null, this._startLifeTime = NaN, this._time = NaN, this._startSpeed = NaN, 
            this._randoms0 = null, this._randoms1 = null, this._simulationWorldPostion = null, 
            e.__super.call(this), this._cornerTextureCoordinate = t, this._positionStartLifeTime = n, 
            this._velocity = i, this._startColor = r, this._startSize = a, this._startRotation0 = o, 
            this._startRotation1 = s, this._startRotation2 = l, this._startLifeTime = h, this._time = u, 
            this._startSpeed = c, this._randoms0 = this.random0, this._randoms1 = this.random1, 
            this._simulationWorldPostion = f;
        }
        r(e, "laya.d3.graphics.Vertex.VertexShurikenParticleMesh", _t);
        var n = e.prototype;
        return a(0, n, "cornerTextureCoordinate", function() {
            return this._cornerTextureCoordinate;
        }), a(0, n, "velocity", function() {
            return this._velocity;
        }), a(0, n, "position", function() {
            return this._positionStartLifeTime;
        }), a(0, n, "random0", function() {
            return this._randoms0;
        }), a(0, n, "startSize", function() {
            return this._startSize;
        }), a(0, n, "startColor", function() {
            return this._startColor;
        }), a(0, n, "startRotation0", function() {
            return this._startRotation0;
        }), a(0, n, "startRotation1", function() {
            return this._startRotation1;
        }), a(0, n, "random1", function() {
            return this._randoms1;
        }), a(0, n, "startRotation2", function() {
            return this._startRotation2;
        }), a(0, n, "startLifeTime", function() {
            return this._startLifeTime;
        }), a(0, n, "time", function() {
            return this._time;
        }), a(0, n, "startSpeed", function() {
            return this._startSpeed;
        }), a(0, n, "simulationWorldPostion", function() {
            return this._simulationWorldPostion;
        }), a(1, e, "vertexDeclaration", function() {
            return e._vertexDeclaration;
        }, laya.d3.graphics.Vertex.VertexShuriKenParticle._$SET_vertexDeclaration), i(e, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new fe(172, [ new zt(0, "vector3", 1), new zt(12, "vector4", 2), new zt(28, "vector2", 3), new zt(36, "vector4", 4), new zt(52, "vector4", 5), new zt(68, "vector4", 6), new zt(84, "vector3", 8), new zt(96, "vector3", 9), new zt(108, "single", 10), new zt(112, "vector4", 11), new zt(128, "vector4", 12), new zt(144, "vector3", 13), new zt(156, "vector4", 14) ]);
        } ]), e;
    }(), Fn = function(t) {
        function e(t, n) {
            this._needProcessCollisions = !1, this._needProcessTriggers = !1, e.__super.call(this), 
            void 0 === n && (n = !1), this._id = ++e._uniqueIDCounter, this._transform = new Ye(this), 
            this._isStatic = n, this.layer = 0, this.name = t || "New Sprite3D";
        }
        r(e, "laya.d3.core.Sprite3D", t);
        var o = e.prototype;
        return n.imps(o, {
            "laya.resource.ICreateResource": !0
        }), o._setCreateURL = function(t) {
            this._url = b.formatURL(t);
        }, o._changeAnimatorsToLinkSprite3D = function(t, e, n) {
            var i = this.getComponent(Ze);
            if (i && (i.avatar || t._changeAnimatorToLinkSprite3DNoAvatar(i, e, n)), this._parent && this._parent instanceof laya.d3.core.Sprite3D) {
                n.unshift(this._parent.name);
                var r = this._parent;
                r._hierarchyAnimator && r._changeAnimatorsToLinkSprite3D(t, e, n);
            }
        }, o._setHierarchyAnimator = function(t, e) {
            this._changeHierarchyAnimator(t), this._changeAnimatorAvatar(t.avatar);
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n];
                r._hierarchyAnimator == e && r._setHierarchyAnimator(t, e);
            }
        }, o._clearHierarchyAnimator = function(t, e) {
            this._changeHierarchyAnimator(e), this._changeAnimatorAvatar(e ? e.avatar : null);
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n];
                r._hierarchyAnimator == t && r._clearHierarchyAnimator(t, e);
            }
        }, o._changeHierarchyAnimatorAvatar = function(t, e) {
            this._changeAnimatorAvatar(e);
            for (var n = 0, i = this._children.length; n < i; n++) {
                var r = this._children[n];
                r._hierarchyAnimator == t && r._changeHierarchyAnimatorAvatar(t, e);
            }
        }, o._changeAnimatorToLinkSprite3DNoAvatar = function(t, e, n) {
            t._handleSpriteOwnersBySprite(e, n, this);
            for (var i = 0, r = this._children.length; i < r; i++) {
                var a = this._children[i], o = n.length;
                n.push(a.name), a._changeAnimatorToLinkSprite3DNoAvatar(t, e, n), n.splice(o, 1);
            }
        }, o._changeHierarchyAnimator = function(t) {
            this._hierarchyAnimator = t;
        }, o._changeAnimatorAvatar = function(t) {}, o._onAdded = function() {
            if (this._parent instanceof laya.d3.core.Sprite3D) {
                var e = this._parent;
                this.transform._setParent(e.transform), e._hierarchyAnimator && (!this._hierarchyAnimator && this._setHierarchyAnimator(e._hierarchyAnimator, null), 
                e._changeAnimatorsToLinkSprite3D(this, !0, [ this.name ]));
            }
            t.prototype._onAdded.call(this);
        }, o._onRemoved = function() {
            if (t.prototype._onRemoved.call(this), this._parent instanceof laya.d3.core.Sprite3D) {
                var e = this._parent;
                this.transform._setParent(null), e._hierarchyAnimator && (this._hierarchyAnimator == e._hierarchyAnimator && this._clearHierarchyAnimator(e._hierarchyAnimator, null), 
                e._changeAnimatorsToLinkSprite3D(this, !1, [ this.name ]));
            }
        }, o._parse = function(t, e) {
            if (void 0 !== t.isStatic && (this._isStatic = t.isStatic), void 0 !== t.active && (this.active = t.active), 
            void 0 != t.name && (this.name = t.name), void 0 !== t.position) {
                var n = this.transform.localPosition;
                n.fromArray(t.position), this.transform.localPosition = n;
            }
            if (void 0 !== t.rotationEuler) {
                var i = this.transform.localRotationEuler;
                i.fromArray(t.rotationEuler), this.transform.localRotationEuler = i;
            }
            if (void 0 !== t.rotation) {
                var r = this.transform.localRotation;
                r.fromArray(t.rotation), this.transform.localRotation = r;
            }
            if (void 0 !== t.scale) {
                var a = this.transform.localScale;
                a.fromArray(t.scale), this.transform.localScale = a;
            }
            void 0 != t.layer && (this.layer = t.layer);
        }, o._cloneTo = function(e, n, i) {
            if (this.destroyed) throw new Error("Sprite3D: Can't be cloned if the Sprite3D has destroyed.");
            var r = e;
            r.name = this.name, r.destroyed = this.destroyed, r.active = this.active;
            var a = r.transform.localPosition;
            this.transform.localPosition.cloneTo(a), r.transform.localPosition = a;
            var o = r.transform.localRotation;
            this.transform.localRotation.cloneTo(o), r.transform.localRotation = o;
            var s = r.transform.localScale;
            this.transform.localScale.cloneTo(s), r.transform.localScale = s, r._isStatic = this._isStatic, 
            r.layer = this.layer, t.prototype._cloneTo.call(this, r, n, i);
        }, o.clone = function() {
            var t = e._createSprite3DInstance(this);
            return e._parseSprite3DInstance(this, t, this, t), t;
        }, o.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._transform = null, this._scripts = null, this._url && S.clearRes(this._url));
        }, a(0, o, "id", function() {
            return this._id;
        }), a(0, o, "url", function() {
            return this._url;
        }), a(0, o, "layer", function() {
            return this._layer;
        }, function(t) {
            if (this._layer !== t) {
                if (!(t >= 0 && t <= 30)) throw new Error("Layer value must be 0-30.");
                this._layer = t;
            }
        }), a(0, o, "transform", function() {
            return this._transform;
        }), a(0, o, "isStatic", function() {
            return this._isStatic;
        }), e._parse = function(t, e, n) {
            var i, r = t.data, a = [];
            switch (t.version) {
              case "LAYAHIERARCHY:02":
                i = kt._createNodeByJson02(r, a);
                break;

              default:
                i = kt._createNodeByJson(r, a);
            }
            return q.combine(i, a), i;
        }, e.__init__ = function() {}, e.instantiate = function(t, e, n, i, r) {
            void 0 === n && (n = !0);
            var a = t.clone();
            e && e.addChild(a);
            var o = a.transform;
            if (n) {
                var s = o.worldMatrix;
                t.transform.worldMatrix.cloneTo(s), o.worldMatrix = s;
            } else i && (o.position = i), r && (o.rotation = r);
            return a;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "HIERARCHY");
        }, e._createSprite3DInstance = function(t) {
            for (var n = new t.constructor(), i = t._children, r = 0, a = i.length; r < a; r++) {
                var o = e._createSprite3DInstance(i[r]);
                n.addChild(o);
            }
            return n;
        }, e._parseSprite3DInstance = function(t, n, i, r) {
            for (var a = i._children, o = r._children, s = 0, l = a.length; s < l; s++) e._parseSprite3DInstance(t, n, a[s], o[s]);
            i._cloneTo(r, t, n);
        }, e._uniqueIDCounter = 0, i(e, [ "WORLDMATRIX", function() {
            return this.WORLDMATRIX = Vt.propertyNameToID("u_WorldMat");
        }, "MVPMATRIX", function() {
            return this.MVPMATRIX = Vt.propertyNameToID("u_MvpMatrix");
        } ]), e;
    }(D), Bn = function(t) {
        function e() {
            this._shaderValues = null, e.__super.call(this), this._defineDatas = new Ut(), this._disablePublicDefineDatas = new Ut(), 
            this._shaderValues = new ut(this), this.renderQueue = 2e3, this._alphaTest = !1;
        }
        r(e, "laya.d3.core.material.BaseMaterial", t);
        var o = e.prototype;
        return n.imps(o, {
            "laya.d3.core.IClone": !0
        }), o._removeTetxureReference = function() {
            var t = this._shaderValues.getData();
            for (var e in t) {
                var n = t[e];
                n && n instanceof laya.resource.BaseTexture && n._removeReference();
            }
        }, o._addReference = function(e) {
            void 0 === e && (e = 1), t.prototype._addReference.call(this, e);
            var n = this._shaderValues.getData();
            for (var i in n) {
                var r = n[i];
                r && r instanceof laya.resource.BaseTexture && r._addReference();
            }
        }, o._removeReference = function(e) {
            void 0 === e && (e = 1), t.prototype._removeReference.call(this, e), this._removeTetxureReference();
        }, o._disposeResource = function() {
            this._referenceCount > 0 && this._removeTetxureReference(), this._shaderValues = null;
        }, o.setShaderName = function(t) {
            if (this._shader = Vt.find(t), !this._shader) throw new Error("BaseMaterial: unknown shader name.");
        }, o.cloneTo = function(t) {
            var e = t;
            e.name = this.name, e.renderQueue = this.renderQueue, this._disablePublicDefineDatas.cloneTo(e._disablePublicDefineDatas), 
            this._defineDatas.cloneTo(e._defineDatas), this._shaderValues.cloneTo(e._shaderValues);
        }, o.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, o, "alphaTestValue", function() {
            return this._shaderValues.getNumber(e.ALPHATESTVALUE);
        }, function(t) {
            this._shaderValues.setNumber(e.ALPHATESTVALUE, t);
        }), a(0, o, "alphaTest", function() {
            return this._alphaTest;
        }, function(t) {
            this._alphaTest = t, t ? this._defineDatas.add(laya.d3.core.material.BaseMaterial.SHADERDEFINE_ALPHATEST) : this._defineDatas.remove(laya.d3.core.material.BaseMaterial.SHADERDEFINE_ALPHATEST);
        }), e.load = function(t, e) {
            n.loader.create(t, e, null, "MATERIAL");
        }, e.__init__ = function() {
            e.SHADERDEFINE_ALPHATEST = e.shaderDefines.registerDefine("ALPHATEST");
        }, e._parse = function(t, e, n) {
            var i, r = t, a = r.props, o = a.type.split("."), s = l.window;
            if (o.forEach(function(t) {
                s = s[t];
            }), "function" != typeof s) throw "_getSprite3DHierarchyInnerUrls 错误: " + t.type + " 不是类";
            switch (i = new s(), r.version) {
              case "LAYAMATERIAL:01":
              case "LAYAMATERIAL:02":
                var h = 0, u = 0;
                for (var c in a) switch (c) {
                  case "vectors":
                    var _ = a[c];
                    for (h = 0, u = _.length; h < u; h++) {
                        var d = _[h], f = d.value;
                        switch (f.length) {
                          case 2:
                            i[d.name] = new Et(f[0], f[1]);
                            break;

                          case 3:
                            i[d.name] = new Tt(f[0], f[1], f[2]);
                            break;

                          case 4:
                            i[d.name] = new mt(f[0], f[1], f[2], f[3]);
                            break;

                          default:
                            throw new Error("BaseMaterial:unkonwn color length.");
                        }
                    }
                    break;

                  case "textures":
                    var m = a[c];
                    for (h = 0, u = m.length; h < u; h++) {
                        var p = m[h], T = p.path;
                        T && (i[p.name] = S.getRes(T));
                    }
                    break;

                  case "defines":
                    var E = a[c];
                    for (h = 0, u = E.length; h < u; h++) {
                        var v = i._shader.getSubShaderAt(0).getMaterialDefineByName(E[h]);
                        i._defineDatas.add(v);
                    }
                    break;

                  case "renderStates":
                    var g = a[c][0], y = i;
                    y.blend = g.blend, y.cull = g.cull, y.depthTest = g.depthTest, y.depthWrite = g.depthWrite, 
                    y.blendSrc = g.srcBlend, y.blendDst = g.dstBlend;
                    break;

                  case "cull":
                    i.cull = a[c];
                    break;

                  case "blend":
                    i.blend = a[c];
                    break;

                  case "depthWrite":
                    i.depthWrite = a[c];
                    break;

                  case "srcBlend":
                    i.blendSrc = a[c];
                    break;

                  case "dstBlend":
                    i.blendDst = a[c];
                    break;

                  default:
                    i[c] = a[c];
                }
                break;

              default:
                throw new Error("BaseMaterial:unkonwn version.");
            }
            return i;
        }, e.RENDERQUEUE_OPAQUE = 2e3, e.RENDERQUEUE_ALPHATEST = 2450, e.RENDERQUEUE_TRANSPARENT = 3e3, 
        e.SHADERDEFINE_ALPHATEST = 0, i(e, [ "ALPHATESTVALUE", function() {
            return this.ALPHATESTVALUE = Vt.propertyNameToID("u_AlphaTestValue");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt();
        } ]), e;
    }(M), Un = function(t) {
        function e() {
            this._vertexBuffer = null, e.__super.call(this), this._bufferState = new Je(), this._vertexBuffer = new Ke(64, 35044, !1), 
            this._vertexBuffer.vertexDeclaration = laya.d3.core.render.ScreenQuad._vertexDeclaration, 
            this._vertexBuffer.setData(e._vertices), this._bufferState.bind(), this._bufferState.applyVertexBuffer(this._vertexBuffer), 
            this._bufferState.unBind(), this._setGPUMemory(this._vertexBuffer._byteLength);
        }
        r(e, "laya.d3.core.render.ScreenQuad", t);
        var n = e.prototype;
        return n.render = function() {
            this._bufferState.bind(), v.instance.drawArrays(5, 0, 4), N.renderBatches++;
        }, n.destroy = function() {
            t.prototype.destroy.call(this), this._bufferState.destroy(), this._vertexBuffer.destroy(), 
            this._setGPUMemory(0);
        }, e.__init__ = function() {
            (e.instance = new e()).lock = !0;
        }, e.SCREENQUAD_POSITION_UV = 0, e.instance = null, i(e, [ "_vertexDeclaration", function() {
            return this._vertexDeclaration = new fe(16, [ new zt(0, "vector4", 0) ]);
        }, "_vertices", function() {
            return this._vertices = new Float32Array([ 1, 1, 1, 0, 1, -1, 1, 1, -1, 1, 0, 0, -1, -1, 0, 1 ]);
        } ]), e;
    }(M), zn = function(t) {
        function e() {
            this._rootNode = null, this._nativeNodeCount = 0, this._nativeCurCloneCount = 0, 
            e.__super.call(this);
        }
        r(e, "laya.d3.core.Avatar", M);
        var i = e.prototype;
        return n.imps(i, {
            "laya.d3.core.IClone": !0
        }), i._initCloneToAnimator = function(t, e) {
            e._avatarNodeMap[t.name] = t;
            for (var n = 0, i = t.getChildCount(); n < i; n++) this._initCloneToAnimator(t.getChildByIndex(n), e);
        }, i._parseNode = function(t, e) {
            var n = t.props.name;
            e.name = n;
            var i = t.props, r = e.transform, a = r.localPosition, o = r.localRotation, s = r.localScale;
            a.fromArray(i.translate), o.fromArray(i.rotation), s.fromArray(i.scale), r.localPosition = a, 
            r.localRotation = o, r.localScale = s;
            for (var l = t.child, h = 0, u = l.length; h < u; h++) {
                var c = l[h], _ = new Ie(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16));
                e.addChild(_), R.supportWebGLPlusAnimation && this._nativeNodeCount++, this._parseNode(c, _);
            }
        }, i._cloneDatasToAnimator = function(t) {
            var e;
            e = this._rootNode.clone();
            var n = this._rootNode.transform, i = e.transform, r = i.localPosition, a = i.localRotation, o = i.localScale;
            n.localPosition.cloneTo(r), n.localRotation.cloneTo(a), n.localScale.cloneTo(o), 
            i.localPosition = r, i.localRotation = a, i.localScale = o, t._avatarNodeMap = {}, 
            this._initCloneToAnimator(e, t);
        }, i.cloneTo = function(t) {
            var e = t, n = this._rootNode.clone();
            e._rootNode = n;
        }, i.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, i._cloneDatasToAnimatorNative = function(t) {
            var e = new Float32Array(3 * this._nativeNodeCount), n = new Float32Array(4 * this._nativeNodeCount), i = new Float32Array(3 * this._nativeNodeCount), r = new Float32Array(16 * this._nativeNodeCount), a = new Int16Array(this._nativeNodeCount);
            t._animationNodeLocalPositions = e, t._animationNodeLocalRotations = n, t._animationNodeLocalScales = i, 
            t._animationNodeWorldMatrixs = r, t._animationNodeParentIndices = a, this._nativeCurCloneCount = 0;
            var o = this._rootNode._cloneNative(e, n, i, r, a, -1, this), s = this._rootNode.transform, l = o.transform, h = l.localPosition, u = l.localRotation, c = l.localScale;
            s.localPosition.cloneTo(h), s.localRotation.cloneTo(u), s.localScale.cloneTo(c), 
            l.localPosition = h, l.localRotation = u, l.localScale = c, t._avatarNodeMap = {}, 
            this._initCloneToAnimator(o, t);
        }, e._parse = function(t, n, i) {
            var r = new e();
            if (r._rootNode = new Ie(new Float32Array(3), new Float32Array(4), new Float32Array(3), new Float32Array(16)), 
            R.supportWebGLPlusAnimation && r._nativeNodeCount++, t.version) {
                var a = t.rootNode;
                a && r._parseNode(a, r._rootNode);
            }
            return r;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "AVATAR");
        }, e;
    }(), Gn = function(t) {
        function e() {
            this._nativeTriangleMesh = null, this._bounds = null, this._subMeshCount = 0, this._subMeshes = null, 
            this._vertexBuffers = null, this._indexBuffer = null, this._boneNames = null, this._inverseBindPoses = null, 
            this._inverseBindPosesBuffer = null, this._bindPoseIndices = null, this._skinDataPathMarks = null, 
            this._vertexCount = 0, this._tempVector30 = new Tt(), this._tempVector31 = new Tt(), 
            this._tempVector32 = new Tt(), this._bufferState = new Je(), this._instanceBufferState = new Je(), 
            e.__super.call(this), this._subMeshes = [], this._vertexBuffers = [], this._skinDataPathMarks = [];
        }
        r(e, "laya.d3.resource.models.Mesh", M);
        var s = e.prototype;
        return n.imps(s, {
            "laya.d3.core.IClone": !0
        }), s._getPositionElement = function(t) {
            for (var e = t.vertexDeclaration.vertexElements, n = 0, i = e.length; n < i; n++) {
                var r = e[n];
                if ("vector3" === r.elementFormat && 0 === r.elementUsage) return r;
            }
            return null;
        }, s._generateBoundingObject = function() {
            var t = this._tempVector30, e = this._tempVector31;
            t.x = t.y = t.z = Number.MAX_VALUE, e.x = e.y = e.z = -Number.MAX_VALUE;
            for (var n = this._vertexBuffers.length, i = 0; i < n; i++) for (var r = this._vertexBuffers[i], a = this._getPositionElement(r), o = r.getData(), s = r.vertexDeclaration.vertexStride / 4, l = a.offset / 4, h = 0, u = o.length; h < u; h += s) {
                var c = h + l, _ = o[c], d = o[c + 1], f = o[c + 2];
                t.x = Math.min(t.x, _), t.y = Math.min(t.y, d), t.z = Math.min(t.z, f), e.x = Math.max(e.x, _), 
                e.y = Math.max(e.y, d), e.z = Math.max(e.z, f);
            }
            this._bounds = new xe(t, e);
        }, s._setSubMeshes = function(t) {
            this._subMeshes = t, this._subMeshCount = t.length;
            for (var e = 0; e < this._subMeshCount; e++) t[e]._indexInMesh = e;
            this._generateBoundingObject();
        }, s._getSubMesh = function(t) {
            return this._subMeshes[t];
        }, s._setBuffer = function(t, e) {
            var n = this._bufferState;
            n.bind(), n.applyVertexBuffers(t), n.applyIndexBuffer(e), n.unBind();
            var i = this._instanceBufferState;
            i.bind(), i.applyVertexBuffers(t), i.applyInstanceVertexBuffer(En.instance.instanceWorldMatrixBuffer), 
            i.applyInstanceVertexBuffer(En.instance.instanceMVPMatrixBuffer), i.applyIndexBuffer(e), 
            i.unBind();
        }, s._disposeResource = function() {
            for (var t = 0, e = this._subMeshes.length; t < e; t++) this._subMeshes[t].destroy();
            for (this._nativeTriangleMesh && W._physics3D.destroy(this._nativeTriangleMesh), 
            t = 0, e = this._vertexBuffers.length; t < e; t++) this._vertexBuffers[t].destroy();
            this._indexBuffer.destroy(), this._setCPUMemory(0), this._setGPUMemory(0), this._bufferState.destroy(), 
            this._instanceBufferState.destroy(), this._bufferState = null, this._instanceBufferState = null, 
            this._vertexBuffers = null, this._indexBuffer = null, this._subMeshes = null, this._nativeTriangleMesh = null, 
            this._vertexBuffers = null, this._indexBuffer = null, this._boneNames = null, this._inverseBindPoses = null;
        }, s._getPhysicMesh = function() {
            if (!this._nativeTriangleMesh) {
                for (var t = new W._physics3D.btTriangleMesh(), n = e._nativeTempVector30, i = e._nativeTempVector31, r = e._nativeTempVector32, a = this._tempVector30, o = this._tempVector31, s = this._tempVector32, l = this._vertexBuffers[0], h = this._getPositionElement(l), u = l.getData(), c = l.vertexDeclaration.vertexStride / 4, _ = h.offset / 4, d = this._indexBuffer.getData(), f = 0, m = d.length; f < m; f += 3) {
                    var p = d[f] * c + _, T = d[f + 1] * c + _, E = d[f + 2] * c + _;
                    a.setValue(u[p], u[p + 1], u[p + 2]), o.setValue(u[T], u[T + 1], u[T + 2]), s.setValue(u[E], u[E + 1], u[E + 2]), 
                    kt._convertToBulletVec3(a, n, !0), kt._convertToBulletVec3(o, i, !0), kt._convertToBulletVec3(s, r, !0), 
                    t.addTriangle(n, i, r, !0);
                }
                this._nativeTriangleMesh = t;
            }
            return this._nativeTriangleMesh;
        }, s.cloneTo = function(t) {
            for (var e = t, n = 0; n < this._vertexBuffers.length; n++) {
                var i = this._vertexBuffers[n], r = new Ke(i._byteLength, i.bufferUsage, i.canRead);
                r.vertexDeclaration = i.vertexDeclaration, r.setData(i.getData().slice()), e._vertexBuffers.push(r), 
                e._vertexCount += r.vertexCount;
            }
            var a = this._indexBuffer, s = new qe("ushort", a.indexCount, a.bufferUsage, a.canRead);
            s.setData(a.getData().slice()), e._indexBuffer = s, e._setBuffer(e._vertexBuffers, s), 
            e._setCPUMemory(this.cpuMemory), e._setGPUMemory(this.gpuMemory);
            var l = this._boneNames, h = e._boneNames = o(l.length);
            for (n = 0; n < l.length; n++) h[n] = l[n];
            var u = this._inverseBindPoses, c = e._inverseBindPoses = o(u.length);
            for (n = 0; n < u.length; n++) c[n] = u[n];
            for (e._bindPoseIndices = new Uint16Array(this._bindPoseIndices), n = 0; n < this._skinDataPathMarks.length; n++) e._skinDataPathMarks[n] = this._skinDataPathMarks[n].slice();
            for (n = 0; n < this.subMeshCount; n++) {
                var _ = this._subMeshes[n], d = _._subIndexBufferStart, f = _._subIndexBufferCount, m = _._boneIndicesList, p = new on(e);
                p._subIndexBufferStart.length = d.length, p._subIndexBufferCount.length = f.length, 
                p._boneIndicesList.length = m.length;
                for (var T = 0; T < d.length; T++) p._subIndexBufferStart[T] = d[T];
                for (T = 0; T < f.length; T++) p._subIndexBufferCount[T] = f[T];
                for (T = 0; T < m.length; T++) p._boneIndicesList[T] = new Uint16Array(m[T]);
                p._indexBuffer = s, p._indexStart = _._indexStart, p._indexCount = _._indexCount, 
                p._indices = new Uint16Array(s.getData().buffer, 2 * _._indexStart, _._indexCount);
                var E = e._vertexBuffers[0];
                p._vertexBuffer = E, e._subMeshes.push(p);
            }
            e._setSubMeshes(e._subMeshes);
        }, s.clone = function() {
            var t = new this.constructor();
            return this.cloneTo(t), t;
        }, a(0, s, "inverseAbsoluteBindPoses", function() {
            return this._inverseBindPoses;
        }), a(0, s, "vertexCount", function() {
            return this._vertexCount;
        }), a(0, s, "subMeshCount", function() {
            return this._subMeshCount;
        }), a(0, s, "bounds", function() {
            return this._bounds;
        }), e._parse = function(t, n, i) {
            var r = new e();
            return St.read(t, r, r._subMeshes), r;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "MESH");
        }, i(e, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector31", function() {
            return this._nativeTempVector31 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector32", function() {
            return this._nativeTempVector32 = new W._physics3D.btVector3(0, 0, 0);
        } ]), e;
    }(), Hn = function(t) {
        function e(t, n, i, r) {
            this._terrainHeightData = null, this._width = 0, this._height = 0, this._bitType = 0, 
            this._value = NaN, e.__super.call(this), this._width = t, this._height = n, this._bitType = i, 
            this._value = r;
        }
        return r(e, "laya.d3.terrain.TerrainHeightData", M), e._pharse = function(t, n, i) {
            var r, a = new e(i[0], i[1], i[2], i[3]), o = NaN;
            8 == a._bitType ? (r = new Uint8Array(t), o = 1 / 255) : 16 == a._bitType && (r = new Int16Array(t), 
            o = 1 / 32766), a._terrainHeightData = new Float32Array(a._height * a._width);
            for (var s = 0, l = a._height * a._width; s < l; s++) a._terrainHeightData[s] = r[s] * o * a._value / 2;
        }, e.load = function(t, e, i, r, a, o) {
            n.loader.create(t, e, null, "TERRAINHEIGHTDATA", [ i, r, a, o ], null, 1, !1);
        }, e;
    }(), kn = function(t) {
        function e() {
            e.__super.call(this), this._nodes = new Qt(), this._events = [];
        }
        r(e, "laya.d3.animation.AnimationClip", M);
        var a = e.prototype;
        return a.duration = function() {
            return this._duration;
        }, a._hermiteInterpolate = function(t, e, n, i) {
            var r = t.outTangent, a = e.inTangent;
            if (Number.isFinite(r) && Number.isFinite(a)) {
                var o = n * n, s = o * n, l = s - 2 * o + n, h = s - o, u = -2 * s + 3 * o;
                return (2 * s - 3 * o + 1) * t.value + l * r * i + h * a * i + u * e.value;
            }
            return t.value;
        }, a._hermiteInterpolateVector3 = function(t, e, n, i, r) {
            var a = t.value, o = t.outTangent, s = e.value, l = e.inTangent, h = n * n, u = h * n, c = 2 * u - 3 * h + 1, _ = u - 2 * h + n, d = u - h, f = -2 * u + 3 * h, m = o.x, p = l.x;
            Number.isFinite(m) && Number.isFinite(p) ? r.x = c * a.x + _ * m * i + d * p * i + f * s.x : r.x = a.x, 
            m = o.y, p = l.y, Number.isFinite(m) && Number.isFinite(p) ? r.y = c * a.y + _ * m * i + d * p * i + f * s.y : r.y = a.y, 
            m = o.z, p = l.z, Number.isFinite(m) && Number.isFinite(p) ? r.z = c * a.z + _ * m * i + d * p * i + f * s.z : r.z = a.z;
        }, a._hermiteInterpolateQuaternion = function(t, e, n, i, r) {
            var a = t.value, o = t.outTangent, s = e.value, l = e.inTangent, h = n * n, u = h * n, c = 2 * u - 3 * h + 1, _ = u - 2 * h + n, d = u - h, f = -2 * u + 3 * h, m = o.x, p = l.x;
            Number.isFinite(m) && Number.isFinite(p) ? r.x = c * a.x + _ * m * i + d * p * i + f * s.x : r.x = a.x, 
            m = o.y, p = l.y, Number.isFinite(m) && Number.isFinite(p) ? r.y = c * a.y + _ * m * i + d * p * i + f * s.y : r.y = a.y, 
            m = o.z, p = l.z, Number.isFinite(m) && Number.isFinite(p) ? r.z = c * a.z + _ * m * i + d * p * i + f * s.z : r.z = a.z, 
            m = o.w, p = l.w, Number.isFinite(m) && Number.isFinite(p) ? r.w = c * a.w + _ * m * i + d * p * i + f * s.w : r.w = a.w;
        }, a._evaluateClipDatasRealTime = function(t, n, i, r, a) {
            for (var o = 0, s = t.count; o < s; o++) {
                var l = t.getNodeByIndex(o), h = l.type, u = 0, c = l._keyFrames, _ = c.length, d = i[o];
                if (a) for (-1 !== d && n < c[d].time && (d = -1, i[o] = d), u = d + 1; u < _ && !(c[u].time > n); ) d++, 
                u++, i[o] = d; else for ((u = d + 1) !== _ && n > c[u].time && (d = _ - 1, i[o] = d), 
                u = d + 1; d > -1 && !(c[d].time < n); ) d--, u--, i[o] = d;
                var f = u === _;
                switch (h) {
                  case 0:
                    if (-1 !== d) {
                        var m = c[d];
                        if (f) l.data = m.value; else {
                            var p = c[u], T = p.time - m.time, E = NaN;
                            E = 0 !== T ? (n - m.time) / T : 0, l.data = this._hermiteInterpolate(m, p, E, T);
                        }
                    } else l.data = c[0].value;
                    r && (l.data -= c[0].value);
                    break;

                  case 1:
                  case 4:
                    var v = l.data;
                    if (this._evaluateFrameNodeVector3DatasRealTime(c, d, f, n, v), r) {
                        var g = c[0].value;
                        v.x -= g.x, v.y -= g.y, v.z -= g.z;
                    }
                    break;

                  case 2:
                    var S = l.data;
                    if (this._evaluateFrameNodeQuaternionDatasRealTime(c, d, f, n, S), r) {
                        var y = e._tempQuaternion0, x = c[0].value;
                        kt.quaternionConjugate(x, y), ht.multiply(y, S, S);
                    }
                    break;

                  case 3:
                    v = l.data, this._evaluateFrameNodeVector3DatasRealTime(c, d, f, n, v), r && (g = c[0].value, 
                    v.x /= g.x, v.y /= g.y, v.z /= g.z);
                    break;

                  default:
                    throw "AnimationClip:unknown node type.";
                }
            }
        }, a._evaluateClipDatasRealTimeForNative = function(t, e, n, i) {
            v.instance.evaluateClipDatasRealTime(t._nativeObj, e, n, i);
        }, a._evaluateFrameNodeVector3DatasRealTime = function(t, e, n, i, r) {
            if (-1 !== e) {
                var a = t[e];
                if (n) {
                    var o = a.value;
                    r.x = o.x, r.y = o.y, r.z = o.z;
                } else {
                    var s = t[e + 1], l = NaN, h = a.time, u = s.time - h;
                    l = 0 !== u ? (i - h) / u : 0, this._hermiteInterpolateVector3(a, s, l, u, r);
                }
            } else {
                var c = t[0].value;
                r.x = c.x, r.y = c.y, r.z = c.z;
            }
        }, a._evaluateFrameNodeQuaternionDatasRealTime = function(t, e, n, i, r) {
            if (-1 !== e) {
                var a = t[e];
                if (n) {
                    var o = a.value;
                    r.x = o.x, r.y = o.y, r.z = o.z, r.w = o.w;
                } else {
                    var s = t[e + 1], l = NaN, h = a.time, u = s.time - h;
                    l = 0 !== u ? (i - h) / u : 0, this._hermiteInterpolateQuaternion(a, s, l, u, r);
                }
            } else {
                var c = t[0].value;
                r.x = c.x, r.y = c.y, r.z = c.z, r.w = c.w;
            }
        }, a._binarySearchEventIndex = function(t) {
            for (var e = 0, n = this._events.length - 1, i = 0; e <= n; ) {
                i = Math.floor((e + n) / 2);
                var r = this._events[i].time;
                if (r == t) return i;
                r > t ? n = i - 1 : e = i + 1;
            }
            return e;
        }, a.addEvent = function(t) {
            var e = this._binarySearchEventIndex(t.time);
            this._events.splice(e, 0, t);
        }, a._disposeResource = function() {
            this._nodes = null, this._nodesMap = null;
        }, e._parse = function(t, n, i) {
            var r = new e(), a = new c(t), o = a.readUTFString();
            switch (o) {
              case "LAYAANIMATION:03":
                Bt.parse(r, a);
                break;

              case "LAYAANIMATION:04":
              case "LAYAANIMATION:COMPRESSION_04":
                Ft.parse(r, a, o);
                break;

              default:
                throw "unknown animationClip version.";
            }
            return r;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "ANIMATIONCLIP");
        }, i(e, [ "_tempQuaternion0", function() {
            return this._tempQuaternion0 = new ht();
        } ]), e;
    }(), Xn = function(t) {
        function e(t, n, i, r, a) {
            this._stateParamsMap = [], this._uploadMark = -1, this._uploadRenderType = -1, e.__super.call(this), 
            this._vs = t, this._ps = n, this._attributeMap = i, this._uniformMap = r, this._shaderPass = a, 
            this._create(), this.lock = !0;
        }
        r(e, "laya.d3.shader.ShaderInstance", M);
        var n = e.prototype;
        return n._create = function() {
            var t = v.instance;
            this._program = t.createProgram(), this._vshader = this._createShader(t, this._vs, 35633), 
            this._pshader = this._createShader(t, this._ps, 35632), t.attachShader(this._program, this._vshader), 
            t.attachShader(this._program, this._pshader);
            for (var e in this._attributeMap) t.bindAttribLocation(this._program, this._attributeMap[e], e);
            if (t.linkProgram(this._program), !R.isConchApp && Vt.debugMode && !t.getProgramParameter(this._program, 35714)) throw t.getProgramInfoLog(this._program);
            var n = [], i = [], r = [], a = [], o = [];
            this._customUniformParamsMap = [];
            var s = t.getProgramParameter(this._program, 35718);
            B.useProgram(t, this._program), this._curActTexIndex = 0;
            var l, h = 0, u = 0;
            for (h = 0; h < s; h++) {
                var c = t.getActiveUniform(this._program, h), _ = c.name;
                (l = new ge()).location = t.getUniformLocation(this._program, _), _.indexOf("[0]") > 0 ? (l.name = _ = _.substr(0, _.length - 3), 
                l.isArray = !0) : (l.name = _, l.isArray = !1), l.type = c.type, this._addShaderUnifiormFun(l);
                var d = this._uniformMap[_];
                if (null != d) switch (l.dataOffset = Vt.propertyNameToID(_), d) {
                  case 0:
                    o.push(l);
                    break;

                  case 1:
                    a.push(l);
                    break;

                  case 2:
                    r.push(l);
                    break;

                  case 3:
                    i.push(l);
                    break;

                  case 4:
                    n.push(l);
                    break;

                  default:
                    throw new Error("Shader3D: period is unkonw.");
                }
            }
            for (this._sceneUniformParamsMap = v.instance.createCommandEncoder(4 * n.length * 5 + 4, 64, !0), 
            h = 0, u = n.length; h < u; h++) this._sceneUniformParamsMap.addShaderUniform(n[h]);
            for (this._cameraUniformParamsMap = v.instance.createCommandEncoder(4 * i.length * 5 + 4, 64, !0), 
            h = 0, u = i.length; h < u; h++) this._cameraUniformParamsMap.addShaderUniform(i[h]);
            for (this._spriteUniformParamsMap = v.instance.createCommandEncoder(4 * r.length * 5 + 4, 64, !0), 
            h = 0, u = r.length; h < u; h++) this._spriteUniformParamsMap.addShaderUniform(r[h]);
            for (this._materialUniformParamsMap = v.instance.createCommandEncoder(4 * a.length * 5 + 4, 64, !0), 
            h = 0, u = a.length; h < u; h++) this._materialUniformParamsMap.addShaderUniform(a[h]);
            for (this._customUniformParamsMap.length = o.length, h = 0, u = o.length; h < u; h++) {
                var f = o[h];
                this._customUniformParamsMap[f.dataOffset] = f;
            }
            var m = this._shaderPass._stateMap;
            for (var p in m) this._stateParamsMap[m[p]] = Vt.propertyNameToID(p);
        }, n._getRenderState = function(t, e) {
            var n = this._stateParamsMap[e];
            return null == n ? null : t[n];
        }, n._disposeResource = function() {
            v.instance.deleteShader(this._vshader), v.instance.deleteShader(this._pshader), 
            v.instance.deleteProgram(this._program), this._vshader = this._pshader = this._program = null, 
            this._setGPUMemory(0), this._curActTexIndex = 0;
        }, n._addShaderUnifiormFun = function(t) {
            var e = v.instance;
            t.caller = this;
            var n = t.isArray;
            switch (t.type) {
              case 35670:
                t.fun = this._uniform1i, t.uploadedValue = new Array(1);
                break;

              case 5124:
                t.fun = n ? this._uniform1iv : this._uniform1i, t.uploadedValue = new Array(1);
                break;

              case 5126:
                t.fun = n ? this._uniform1fv : this._uniform1f, t.uploadedValue = new Array(1);
                break;

              case 35664:
                t.fun = n ? this._uniform_vec2v : this._uniform_vec2, t.uploadedValue = new Array(2);
                break;

              case 35665:
                t.fun = n ? this._uniform_vec3v : this._uniform_vec3, t.uploadedValue = new Array(3);
                break;

              case 35666:
                t.fun = n ? this._uniform_vec4v : this._uniform_vec4, t.uploadedValue = new Array(4);
                break;

              case 35674:
                t.fun = this._uniformMatrix2fv;
                break;

              case 35675:
                t.fun = this._uniformMatrix3fv;
                break;

              case 35676:
                t.fun = n ? this._uniformMatrix4fv : this._uniformMatrix4f;
                break;

              case 35678:
                e.uniform1i(t.location, this._curActTexIndex), t.textureID = B._glTextureIDs[this._curActTexIndex++], 
                t.fun = this._uniform_sampler2D;
                break;

              case 35679:
                e.uniform1i(t.location, this._curActTexIndex), t.textureID = B._glTextureIDs[this._curActTexIndex++], 
                t.fun = this._uniform_sampler3D;
                break;

              case 35680:
                e.uniform1i(t.location, this._curActTexIndex), t.textureID = B._glTextureIDs[this._curActTexIndex++], 
                t.fun = this._uniform_samplerCube;
                break;

              default:
                throw new Error("compile shader err!");
            }
        }, n._createShader = function(t, e, n) {
            var i = t.createShader(n);
            if (t.shaderSource(i, e), t.compileShader(i), Vt.debugMode && !t.getShaderParameter(i, 35713)) throw t.getShaderInfoLog(i);
            return i;
        }, n._uniform1f = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e ? (v.instance.uniform1f(t.location, n[0] = e), 1) : 0;
        }, n._uniform1fv = function(t, e) {
            if (e.length < 4) {
                var n = t.uploadedValue;
                return n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] ? (v.instance.uniform1fv(t.location, e), 
                n[0] = e[0], n[1] = e[1], n[2] = e[2], n[3] = e[3], 1) : 0;
            }
            return v.instance.uniform1fv(t.location, e), 1;
        }, n._uniform_vec2 = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e.x || n[1] !== e.y ? (v.instance.uniform2f(t.location, n[0] = e.x, n[1] = e.y), 
            1) : 0;
        }, n._uniform_vec2v = function(t, e) {
            if (e.length < 2) {
                var n = t.uploadedValue;
                return n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] ? (v.instance.uniform2fv(t.location, e), 
                n[0] = e[0], n[1] = e[1], n[2] = e[2], n[3] = e[3], 1) : 0;
            }
            return v.instance.uniform2fv(t.location, e), 1;
        }, n._uniform_vec3 = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e.x || n[1] !== e.y || n[2] !== e.z ? (v.instance.uniform3f(t.location, n[0] = e.x, n[1] = e.y, n[2] = e.z), 
            1) : 0;
        }, n._uniform_vec3v = function(t, e) {
            return v.instance.uniform3fv(t.location, e), 1;
        }, n._uniform_vec4 = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e.x || n[1] !== e.y || n[2] !== e.z || n[3] !== e.w ? (v.instance.uniform4f(t.location, n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w), 
            1) : 0;
        }, n._uniform_vec4v = function(t, e) {
            return v.instance.uniform4fv(t.location, e), 1;
        }, n._uniformMatrix2fv = function(t, e) {
            return v.instance.uniformMatrix2fv(t.location, !1, e), 1;
        }, n._uniformMatrix3fv = function(t, e) {
            return v.instance.uniformMatrix3fv(t.location, !1, e), 1;
        }, n._uniformMatrix4f = function(t, e) {
            var n = e.elements;
            return v.instance.uniformMatrix4fv(t.location, !1, n), 1;
        }, n._uniformMatrix4fv = function(t, e) {
            return v.instance.uniformMatrix4fv(t.location, !1, e), 1;
        }, n._uniform1i = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e ? (v.instance.uniform1i(t.location, n[0] = e), 1) : 0;
        }, n._uniform1iv = function(t, e) {
            return v.instance.uniform1iv(t.location, e), 1;
        }, n._uniform_ivec2 = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e[0] || n[1] !== e[1] ? (v.instance.uniform2i(t.location, n[0] = e[0], n[1] = e[1]), 
            1) : 0;
        }, n._uniform_ivec2v = function(t, e) {
            return v.instance.uniform2iv(t.location, e), 1;
        }, n._uniform_vec3i = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] ? (v.instance.uniform3i(t.location, n[0] = e[0], n[1] = e[1], n[2] = e[2]), 
            1) : 0;
        }, n._uniform_vec3vi = function(t, e) {
            return v.instance.uniform3iv(t.location, e), 1;
        }, n._uniform_vec4i = function(t, e) {
            var n = t.uploadedValue;
            return n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] ? (v.instance.uniform4i(t.location, n[0] = e[0], n[1] = e[1], n[2] = e[2], n[3] = e[3]), 
            1) : 0;
        }, n._uniform_vec4vi = function(t, e) {
            return v.instance.uniform4iv(t.location, e), 1;
        }, n._uniform_sampler2D = function(t, e) {
            var n = e._getSource() || e.defaulteTexture._getSource(), i = v.instance;
            return B.activeTexture(i, t.textureID), B.bindTexture(i, 3553, n), 0;
        }, n._uniform_sampler3D = function(t, e) {
            var n = e._getSource() || e.defaulteTexture._getSource(), i = v.instance;
            return B.activeTexture(i, t.textureID), B.bindTexture(i, 32879, n), 0;
        }, n._uniform_samplerCube = function(t, e) {
            var n = e._getSource() || e.defaulteTexture._getSource(), i = v.instance;
            return B.activeTexture(i, t.textureID), B.bindTexture(i, 34067, n), 0;
        }, n.bind = function() {
            return B.useProgram(v.instance, this._program);
        }, n.uploadUniforms = function(t, e, n) {
            N.shaderCall += g.uploadShaderUniforms(v.instance, t, e, n);
        }, n.uploadRenderStateBlendDepth = function(t) {
            var e = v.instance, n = this._shaderPass.renderState, i = t.getData(), r = this._getRenderState(i, 13), a = this._getRenderState(i, 12), o = this._getRenderState(i, 1);
            switch (null == r && (r = n.depthWrite), null == a && (a = n.depthTest), null == o && (o = n.blend), 
            B.setDepthMask(e, r), 0 === a ? B.setDepthTest(e, !1) : (B.setDepthTest(e, !0), 
            B.setDepthFunc(e, a)), o) {
              case 0:
                B.setBlend(e, !1);
                break;

              case 1:
                B.setBlend(e, !0);
                var s = this._getRenderState(i, 2);
                null == s && (s = n.srcBlend);
                var l = this._getRenderState(i, 3);
                null == l && (l = n.dstBlend), B.setBlendFunc(e, s, l);
                break;

              case 2:
                B.setBlend(e, !0);
                var h = this._getRenderState(i, 4);
                null == h && (h = n.srcBlendRGB);
                var u = this._getRenderState(i, 5);
                null == u && (u = n.dstBlendRGB);
                var c = this._getRenderState(i, 6);
                null == c && (c = n.srcBlendAlpha);
                var _ = this._getRenderState(i, 7);
                null == _ && (_ = n.dstBlendAlpha), B.setBlendFuncSeperate(e, h, u, c, _);
            }
        }, n.uploadRenderStateFrontFace = function(t, e, n) {
            var i = v.instance, r = this._shaderPass.renderState, a = t.getData(), o = this._getRenderState(a, 0);
            null == o && (o = r.cull);
            var s = 0;
            switch (o) {
              case 0:
                B.setCullFace(i, !1);
                break;

              case 1:
                B.setCullFace(i, !0), s = e ? n && n._isFrontFaceInvert ? 2305 : 2304 : n && n._isFrontFaceInvert ? 2304 : 2305, 
                B.setFrontFace(i, s);
                break;

              case 2:
                B.setCullFace(i, !0), s = e ? n && n._isFrontFaceInvert ? 2304 : 2305 : n && n._isFrontFaceInvert ? 2305 : 2304, 
                B.setFrontFace(i, s);
            }
        }, n.uploadCustomUniform = function(t, e) {
            N.shaderCall += g.uploadCustomUniform(v.instance, this._customUniformParamsMap, t, e);
        }, n._uniformMatrix2fvForNative = function(t, e) {
            return v.instance.uniformMatrix2fvEx(t.location, !1, e), 1;
        }, n._uniformMatrix3fvForNative = function(t, e) {
            return v.instance.uniformMatrix3fvEx(t.location, !1, e), 1;
        }, n._uniformMatrix4fvForNative = function(t, e) {
            return v.instance.uniformMatrix4fvEx(t.location, !1, e), 1;
        }, e;
    }(), Wn = (function(t) {
        function e() {
            this._version = NaN, this._cameraCoordinateInverse = !1, this._gridSize = NaN, this._chunkNumX = 0, 
            this._chunkNumZ = 0, this._heightDataX = 0, this._heightDataZ = 0, this._heightDataBitType = 0, 
            this._heightDataValue = NaN, this._heightDataUrl = null, this._detailTextureInfos = null, 
            this._chunkInfos = null, this._heightData = null, this._materialInfo = null, this._alphaMaps = null, 
            this._normalMaps = null, e.__super.call(this);
        }
        r(e, "laya.d3.terrain.TerrainRes", M);
        var i = e.prototype;
        i.parseData = function(t) {
            var e = t[0], n = t[1];
            if (this._version = e.version, 1 == this._version) {
                this._cameraCoordinateInverse = e.cameraCoordinateInverse, this._gridSize = e.gridSize, 
                this._chunkNumX = e.chunkNumX, this._chunkNumZ = e.chunkNumZ;
                var i = e.heightData;
                if (this._heightDataX = i.numX, this._heightDataZ = i.numZ, this._heightDataBitType = i.bitType, 
                this._heightDataValue = i.value, this._heightDataUrl = n[i.url], this._materialInfo = new st(), 
                e.material) {
                    var r = e.material.ambient, a = e.material.diffuse, s = e.material.specular;
                    this._materialInfo.ambientColor = new Tt(r[0], r[1], r[2]), this._materialInfo.diffuseColor = new Tt(a[0], a[1], a[2]), 
                    this._materialInfo.specularColor = new mt(s[0], s[1], s[2], s[3]);
                }
                var l = e.detailTexture;
                this._detailTextureInfos = o(l.length);
                for (var h = 0; h < l.length; h++) {
                    var u = l[h], c = new Ae();
                    c.diffuseTexture = n[u.diffuse], c.normalTexture = u.normal ? n[u.normal] : null, 
                    u.scale ? c.scale = new Et(u.scale[0], u.scale[1]) : c.scale = new Et(1, 1), u.offset ? c.offset = new Et(u.offset[0], u.offset[1]) : c.offset = new Et(0, 0), 
                    this._detailTextureInfos[h] = c;
                }
                var _ = e.alphaMap;
                for (this._alphaMaps = o(_.length), h = 0; h < this._alphaMaps.length; h++) this._alphaMaps[h] = e.alphaMap[h];
                var d = e.normalMap;
                for (this._normalMaps = o(d.length), h = 0; h < this._normalMaps.length; h++) this._normalMaps[h] = e.normalMap[h];
                var f = e.chunkInfo;
                if (this._chunkNumX * this._chunkNumZ != f.length) return alert("terrain data error"), 
                !1;
                for (this._chunkInfos = o(f.length), h = 0; h < f.length; h++) {
                    var m = f[h], p = new ve(), T = m.alphaMap.length, E = m.detailID.length;
                    if (T != E) return alert("terrain chunk data error"), !1;
                    p.alphaMap = o(T), p.detailID = o(E), p.normalMap = n[this._normalMaps[m.normalMap]];
                    for (var v = 0; v < T; v++) {
                        p.alphaMap[v] = n[this._alphaMaps[m.alphaMap[v]]];
                        var g = m.detailID[v], y = g.length;
                        p.detailID[v] = new Uint8Array(y);
                        for (var x = 0; x < y; x++) p.detailID[v][x] = g[x];
                    }
                    this._chunkInfos[h] = p;
                }
                this._heightData = S.getRes(this._heightDataUrl), this.onLoadTerrainComplete(this._heightData);
            }
            return !0;
        }, i.onLoadTerrainComplete = function(t) {}, e._parse = function(t, n, i) {
            var r = new e();
            return r.parseData(t), r;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "TERRAIN", null, null, 1, !1);
        };
    }(), function(t) {
        function e(t) {
            this._finalGravity = new Tt(), this._tempRotationMatrix = new He(), e.__super.call(this, t), 
            this._defaultBoundBox = new ze(new Tt(), new Tt()), this._renderMode = -1, this.stretchedBillboardCameraSpeedScale = 0, 
            this.stretchedBillboardSpeedScale = 0, this.stretchedBillboardLengthScale = 1;
        }
        r(e, "laya.d3.core.particleShuriKen.ShurikenParticleRenderer", t);
        var n = e.prototype;
        return n._calculateBoundingBox = function() {
            var t = this._bounds.getMin();
            t.x = -Number.MAX_VALUE, t.y = -Number.MAX_VALUE, t.z = -Number.MAX_VALUE, this._bounds.setMin(t);
            var e = this._bounds.getMax();
            if (e.x = Number.MAX_VALUE, e.y = Number.MAX_VALUE, e.z = Number.MAX_VALUE, this._bounds.setMax(e), 
            R.supportWebGLPlusCulling) {
                t = this._bounds.getMin(), e = this._bounds.getMax();
                var n = Pe._cullingBuffer;
                n[this._cullingBufferIndex + 1] = t.x, n[this._cullingBufferIndex + 2] = t.y, n[this._cullingBufferIndex + 3] = t.z, 
                n[this._cullingBufferIndex + 4] = e.x, n[this._cullingBufferIndex + 5] = e.y, n[this._cullingBufferIndex + 6] = e.z;
            }
        }, n._needRender = function(t) {
            return !t || 0 !== t.containsBoundBox(this.bounds._getBoundBox()) && !!this._owner.particleSystem.isAlive;
        }, n._renderUpdate = function(t, e) {
            var n = this._owner.particleSystem, i = this._shaderValues, r = this._owner.transform;
            switch (n.simulationSpace) {
              case 0:
                break;

              case 1:
                i.setVector3(yi.WORLDPOSITION, r.position), i.setQuaternion(yi.WORLDROTATION, r.rotation);
                break;

              default:
                throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.");
            }
            switch (n.scaleMode) {
              case 0:
                var a = r.scale;
                i.setVector3(yi.POSITIONSCALE, a), i.setVector3(yi.SIZESCALE, a);
                break;

              case 1:
                var o = r.localScale;
                i.setVector3(yi.POSITIONSCALE, o), i.setVector3(yi.SIZESCALE, o);
                break;

              case 2:
                i.setVector3(yi.POSITIONSCALE, r.scale), i.setVector3(yi.SIZESCALE, Tt._ONE);
            }
            Tt.scale(Ue.gravity, n.gravityModifier, this._finalGravity), i.setVector3(yi.GRAVITY, this._finalGravity), 
            i.setInt(yi.SIMULATIONSPACE, n.simulationSpace), i.setBool(yi.THREEDSTARTROTATION, n.threeDStartRotation), 
            i.setInt(yi.SCALINGMODE, n.scaleMode), i.setNumber(yi.STRETCHEDBILLBOARDLENGTHSCALE, this.stretchedBillboardLengthScale), 
            i.setNumber(yi.STRETCHEDBILLBOARDSPEEDSCALE, this.stretchedBillboardSpeedScale), 
            i.setNumber(yi.CURRENTTIME, n._currentTime);
        }, n._destroy = function() {
            t.prototype._destroy.call(this), this._mesh && (this._mesh._removeReference(), this._mesh = null);
        }, a(0, n, "renderMode", function() {
            return this._renderMode;
        }, function(t) {
            if (this._renderMode !== t) {
                var e = this._defineDatas;
                switch (this._renderMode) {
                  case 0:
                    e.remove(yi.SHADERDEFINE_RENDERMODE_BILLBOARD);
                    break;

                  case 1:
                    e.remove(yi.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                    break;

                  case 2:
                    e.remove(yi.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                    break;

                  case 3:
                    e.remove(yi.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                    break;

                  case 4:
                    e.remove(yi.SHADERDEFINE_RENDERMODE_MESH);
                }
                switch (this._renderMode = t, t) {
                  case 0:
                    e.add(yi.SHADERDEFINE_RENDERMODE_BILLBOARD);
                    break;

                  case 1:
                    e.add(yi.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);
                    break;

                  case 2:
                    e.add(yi.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);
                    break;

                  case 3:
                    e.add(yi.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);
                    break;

                  case 4:
                    e.add(yi.SHADERDEFINE_RENDERMODE_MESH);
                    break;

                  default:
                    throw new Error("ShurikenParticleRender: unknown renderMode Value.");
                }
                this._owner.particleSystem._initBufferDatas();
            }
        }), a(0, n, "mesh", function() {
            return this._mesh;
        }, function(t) {
            this._mesh !== t && (this._mesh && this._mesh._removeReference(), this._mesh = t, 
            t && t._addReference(), this._owner.particleSystem._initBufferDatas());
        }), a(0, n, "bounds", function() {
            return this._boundsChange && (this._calculateBoundingBox(), this._boundsChange = !1), 
            this._bounds;
        }), e;
    }(We)), Yn = function(t) {
        function e(t, n) {
            this._isTrigger = !1, e.__super.call(this, t, n);
        }
        r(e, "laya.d3.physics.PhysicsTriggerComponent", t);
        var n = e.prototype;
        return n._onAdded = function() {
            t.prototype._onAdded.call(this), this.isTrigger = this._isTrigger;
        }, n._cloneTo = function(e) {
            t.prototype._cloneTo.call(this, e), e.isTrigger = this._isTrigger;
        }, a(0, n, "isTrigger", function() {
            return this._isTrigger;
        }, function(t) {
            if (this._isTrigger = t, this._nativeColliderObject) {
                var e = this._nativeColliderObject.getCollisionFlags();
                t ? 0 == (4 & e) && this._nativeColliderObject.setCollisionFlags(4 | e) : 0 != (4 & e) && this._nativeColliderObject.setCollisionFlags(4 ^ e);
            }
        }), e;
    }(Xe), Zn = (function(t) {
        function e(t, n, i, r) {
            this._maxSlope = 45, this._jumpSpeed = 10, this._fallSpeed = 55, this._upAxis = new Tt(0, 1, 0), 
            this._gravity = new Tt(0, 3 * -9.8, 0), void 0 === t && (t = .1), void 0 === i && (i = 1), 
            void 0 === r && (r = Ue.COLLISIONFILTERGROUP_ALLFILTER), this._stepHeight = t, n && (this._upAxis = n), 
            e.__super.call(this, i, r);
        }
        r(e, "laya.d3.physics.CharacterController", t);
        var n = e.prototype;
        n._constructCharacter = function() {
            var t = W._physics3D;
            this._nativeKinematicCharacter && t.destroy(this._nativeKinematicCharacter);
            var n = e._nativeTempVector30;
            n.setValue(this._upAxis.x, this._upAxis.y, this._upAxis.z), this._nativeKinematicCharacter = new t.btKinematicCharacterController(this._nativeColliderObject, this._colliderShape._nativeShape, this._stepHeight, n), 
            this.fallSpeed = this._fallSpeed, this.maxSlope = this._maxSlope, this.jumpSpeed = this._jumpSpeed, 
            this.gravity = this._gravity;
        }, n._onShapeChange = function(e) {
            t.prototype._onShapeChange.call(this, e), this._constructCharacter();
        }, n._onAdded = function() {
            var e = new W._physics3D.btPairCachingGhostObject();
            e.setUserIndex(this.id), e.setCollisionFlags(16), this._nativeColliderObject = e, 
            this._colliderShape && this._constructCharacter(), t.prototype._onAdded.call(this);
        }, n._addToSimulation = function() {
            this._simulation._characters.push(this), this._simulation._addCharacter(this, this._collisionGroup, this._canCollideWith);
        }, n._removeFromSimulation = function() {
            this._simulation._removeCharacter(this);
            var t = this._simulation._characters;
            t.splice(t.indexOf(this), 1);
        }, n._cloneTo = function(e) {
            t.prototype._cloneTo.call(this, e);
            var n = e;
            n.stepHeight = this._stepHeight, n.upAxis = this._upAxis, n.maxSlope = this._maxSlope, 
            n.jumpSpeed = this._jumpSpeed, n.fallSpeed = this._fallSpeed, n.gravity = this._gravity;
        }, n._onDestroy = function() {
            W._physics3D.destroy(this._nativeKinematicCharacter), t.prototype._onDestroy.call(this), 
            this._nativeKinematicCharacter = null;
        }, n.move = function(t) {
            var e = Xe._nativeVector30;
            e.setValue(-t.x, t.y, t.z), this._nativeKinematicCharacter.setWalkDirection(e);
        }, n.jump = function(t) {
            if (t) {
                var e = Xe._nativeVector30;
                kt._convertToBulletVec3(t, e, !0), this._nativeKinematicCharacter.jump(e);
            } else this._nativeKinematicCharacter.jump();
        }, a(0, n, "fallSpeed", function() {
            return this._fallSpeed;
        }, function(t) {
            this._fallSpeed = t, this._nativeKinematicCharacter.setFallSpeed(t);
        }), a(0, n, "stepHeight", function() {
            return this._stepHeight;
        }, function(t) {
            this._stepHeight = t, this._constructCharacter();
        }), a(0, n, "jumpSpeed", function() {
            return this._jumpSpeed;
        }, function(t) {
            this._jumpSpeed = t, this._nativeKinematicCharacter.setJumpSpeed(t);
        }), a(0, n, "gravity", function() {
            return this._gravity;
        }, function(t) {
            this._gravity = t;
            var n = e._nativeTempVector30;
            n.setValue(-t.x, t.y, t.z), this._nativeKinematicCharacter.setGravity(n);
        }), a(0, n, "maxSlope", function() {
            return this._maxSlope;
        }, function(t) {
            this._maxSlope = t, this._nativeKinematicCharacter.setMaxSlope(t / 180 * Math.PI);
        }), a(0, n, "isGrounded", function() {
            return this._nativeKinematicCharacter.onGround();
        }), a(0, n, "upAxis", function() {
            return this._upAxis;
        }, function(t) {
            this._upAxis = t, this._constructCharacter();
        }), e.UPAXIS_X = 0, e.UPAXIS_Y = 1, e.UPAXIS_Z = 2, i(e, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
        } ]);
    }(Xe), function(t) {
        function e(t) {
            this._terrainSprite3DOwner = null, this._projectionViewWorldMatrix = null, e.__super.call(this, t), 
            this._terrainSprite3DOwner = t, this._projectionViewWorldMatrix = new He();
        }
        r(e, "laya.d3.terrain.TerrainRender", t);
        var n = e.prototype;
        return n._needRender = function(t) {
            return !t || 0 !== t.containsBoundBox(this._bounds._getBoundBox());
        }, n._calculateBoundingBox = function() {}, n._renderUpdate = function(t, e) {
            this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, e.worldMatrix);
        }, n._renderUpdateWithCamera = function(t, e) {
            var n = t.projectionViewMatrix;
            He.multiply(n, e.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix);
        }, n._destroy = function() {
            t.prototype._destroy.call(this), this._terrainSprite3DOwner = null;
        }, e;
    }(We)), jn = function(t) {
        function e(t) {
            e.__super.call(this, t), this._projectionViewWorldMatrix = new He();
        }
        r(e, "laya.d3.core.MeshRenderer", t);
        var n = e.prototype;
        return n._onMeshChange = function(t) {
            this._boundsChange = !0;
        }, n._calculateBoundingBox = function() {
            var t = this._owner.meshFilter.sharedMesh;
            if (t) {
                var e = this._owner.transform.worldMatrix;
                t.bounds._tranform(e, this._bounds);
            }
            if (R.supportWebGLPlusCulling) {
                var n = this._bounds.getMin(), i = this._bounds.getMax(), r = Pe._cullingBuffer;
                r[this._cullingBufferIndex + 1] = n.x, r[this._cullingBufferIndex + 2] = n.y, r[this._cullingBufferIndex + 3] = n.z, 
                r[this._cullingBufferIndex + 4] = i.x, r[this._cullingBufferIndex + 5] = i.y, r[this._cullingBufferIndex + 6] = i.z;
            }
        }, n._changeRenderObjectsByMesh = function(t) {
            var e = t.subMeshCount;
            this._renderElements.length = e;
            for (var n = 0; n < e; n++) {
                var i = this._renderElements[n];
                if (!i) {
                    var r = this.sharedMaterials[n];
                    (i = this._renderElements[n] = new Pn()).setTransform(this._owner._transform), i.render = this, 
                    i.material = r || ci.defaultMaterial;
                }
                i.setGeometry(t._getSubMesh(n));
            }
        }, n._needRender = function(t) {
            return !t || 0 !== t.containsBoundBox(this.bounds._getBoundBox());
        }, n._renderUpdate = function(t, e) {
            var n = t.renderElement;
            switch (n.renderType) {
              case 0:
                this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, e.worldMatrix);
                break;

              case 1:
                this._oriDefineValue = this._defineDatas.value, e ? this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, e.worldMatrix) : this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, He.DEFAULT), 
                this._defineDatas.add(Ei.SHADERDEFINE_UV1), this._defineDatas.remove(Jn.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV);
                break;

              case 3:
                this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, He.DEFAULT);
                break;

              case 2:
                for (var i = En.instance.instanceWorldMatrixData, r = n.instanceBatchElementList, a = r.length, o = 0; o < a; o++) i.set(r[o]._transform.worldMatrix.elements, 16 * o);
                En.instance.instanceWorldMatrixBuffer.setData(i, 0, 0, 16 * a), this._defineDatas.add(Ei.SHADERDEFINE_GPU_INSTANCE);
            }
        }, n._renderUpdateWithCamera = function(t, e) {
            var n = t.projectionViewMatrix, i = t.renderElement;
            switch (i.renderType) {
              case 0:
              case 1:
              case 3:
                e ? (He.multiply(n, e.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
                break;

              case 2:
                for (var r = En.instance.instanceMVPMatrixData, a = i.instanceBatchElementList, o = a.length, s = 0; s < o; s++) {
                    var l = a[s]._transform.worldMatrix;
                    kt.mulMatrixByArray(n.elements, 0, l.elements, 0, r, 16 * s);
                }
                En.instance.instanceMVPMatrixBuffer.setData(r, 0, 0, 16 * o);
            }
        }, n._renderUpdateWithCameraForNative = function(t, e) {
            var n = t.projectionViewMatrix, i = t.renderElement;
            switch (i.renderType) {
              case 0:
                e ? (He.multiply(n, e.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
                break;

              case 1:
              case 3:
                var r = ut._SET_RUNTIME_VALUE_MODE_REFERENCE_;
                ut.setRuntimeValueMode(!1), e ? (He.multiply(n, e.worldMatrix, this._projectionViewWorldMatrix), 
                this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n), 
                ut.setRuntimeValueMode(r);
                break;

              case 2:
                for (var a = En.instance.instanceMVPMatrixData, o = i.instanceBatchElementList, s = o.length, l = 0; l < s; l++) {
                    var h = o[l]._transform.worldMatrix;
                    kt.mulMatrixByArray(n.elements, 0, h.elements, 0, a, 16 * l);
                }
                En.instance.instanceMVPMatrixBuffer.setData(a, 0, 0, 16 * s);
            }
        }, n._revertBatchRenderUpdate = function(t) {
            switch (t.renderElement.renderType) {
              case 1:
                this._defineDatas.value = this._oriDefineValue;
                break;

              case 2:
                this._defineDatas.remove(Ei.SHADERDEFINE_GPU_INSTANCE);
            }
        }, n._destroy = function() {
            this._isPartOfStaticBatch && Sn.instance._destroyRenderSprite(this._owner), t.prototype._destroy.call(this);
        }, i(e, [ "_tempVector30", function() {
            return this._tempVector30 = new Tt();
        }, "_tempVector31", function() {
            return this._tempVector31 = new Tt();
        } ]), e;
    }(We), Kn = function(t) {
        function e(t) {
            this._projectionViewWorldMatrix = new He(), e.__super.call(this, t);
        }
        r(e, "laya.d3.core.trail.TrailRenderer", t);
        var n = e.prototype;
        return n._calculateBoundingBox = function() {
            var t = this._bounds.getMin();
            t.x = -Number.MAX_VALUE, t.y = -Number.MAX_VALUE, t.z = -Number.MAX_VALUE, this._bounds.setMin(t);
            var e = this._bounds.getMax();
            if (e.x = Number.MAX_VALUE, e.y = Number.MAX_VALUE, e.z = Number.MAX_VALUE, this._bounds.setMax(e), 
            R.supportWebGLPlusCulling) {
                t = this._bounds.getMin(), e = this._bounds.getMax();
                var n = Pe._cullingBuffer;
                n[this._cullingBufferIndex + 1] = t.x, n[this._cullingBufferIndex + 2] = t.y, n[this._cullingBufferIndex + 3] = t.z, 
                n[this._cullingBufferIndex + 4] = e.x, n[this._cullingBufferIndex + 5] = e.y, n[this._cullingBufferIndex + 6] = e.z;
            }
        }, n._needRender = function(t) {
            return !0;
        }, n._renderUpdate = function(e, n) {
            t.prototype._renderUpdate.call(this, e, n), this._owner.trailFilter._update(e);
        }, n._renderUpdateWithCamera = function(t, e) {
            var n = t.projectionViewMatrix;
            e ? (He.multiply(n, e.worldMatrix, this._projectionViewWorldMatrix), this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix)) : this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n);
        }, e;
    }(We), qn = function(t) {
        function e(t) {
            this._projectionViewWorldMatrix = null, e.__super.call(this, t), this._projectionViewWorldMatrix = new He();
        }
        r(e, "laya.d3.core.pixelLine.PixelLineRenderer", We);
        var n = e.prototype;
        return n._calculateBoundingBox = function() {
            var t = this._bounds.getMin();
            t.x = -Number.MAX_VALUE, t.y = -Number.MAX_VALUE, t.z = -Number.MAX_VALUE, this._bounds.setMin(t);
            var e = this._bounds.getMax();
            if (e.x = Number.MAX_VALUE, e.y = Number.MAX_VALUE, e.z = Number.MAX_VALUE, this._bounds.setMax(e), 
            R.supportWebGLPlusCulling) {
                t = this._bounds.getMin(), e = this._bounds.getMax();
                var n = Pe._cullingBuffer;
                n[this._cullingBufferIndex + 1] = t.x, n[this._cullingBufferIndex + 2] = t.y, n[this._cullingBufferIndex + 3] = t.z, 
                n[this._cullingBufferIndex + 4] = e.x, n[this._cullingBufferIndex + 5] = e.y, n[this._cullingBufferIndex + 6] = e.z;
            }
        }, n._renderUpdateWithCamera = function(t, e) {
            var n = t.projectionViewMatrix, i = this._shaderValues;
            if (e) {
                var r = e.worldMatrix;
                i.setMatrix4x4(Fn.WORLDMATRIX, r), He.multiply(n, r, this._projectionViewWorldMatrix), 
                i.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix);
            } else i.setMatrix4x4(Fn.WORLDMATRIX, He.DEFAULT), i.setMatrix4x4(Fn.MVPMATRIX, n);
        }, e;
    }(), Qn = function(t) {
        function e() {
            this._reflectionMode = 1, this._enableLightCount = 3, this.enableLight = !0, this._time = 0, 
            e.__super.call(this), this._lights = [], this._lightmaps = [], this._skyRenderer = new me(), 
            this._input = new Zt(), this._timer = n.timer, this._collsionTestList = [], this._renders = new un(), 
            this._opaqueQueue = new Ce(!1), this._transparentQueue = new Ce(!0), this._cameraPool = [], 
            this._animatorPool = new un(), this._scriptPool = new un(), this._castShadowRenders = new rn(), 
            this.currentCreationLayer = Math.pow(2, 0), this._key = new w(), this._pickIdToSprite = new Object(), 
            W._enbalePhysics && (this._physicsSimulation = new ke(W.physicsSettings)), this._defineDatas = new Ut(), 
            this._shaderValues = new ut(null), this.parallelSplitShadowMaps = [], this.enableFog = !1, 
            this.fogStart = 300, this.fogRange = 1e3, this.fogColor = new Tt(.7, .7, .7), this.ambientColor = new Tt(.212, .227, .259), 
            this.reflectionIntensity = 1, F.shaderHighPrecision && this._defineDatas.add(Vt.SHADERDEFINE_HIGHPRECISION), 
            R.supportWebGLPlusCulling && (this._cullingBufferIndices = new Int32Array(1024), 
            this._cullingBufferResult = new Int32Array(1024)), this._shaderValues.setTexture(laya.d3.core.scene.Scene3D.RANGEATTENUATIONTEXTURE, Ht._rangeAttenTex), 
            this._scene = this, W._enbalePhysics && !ke.disableSimulation && this._input.__init__(R.canvas, this);
            var t = W._config;
            if (t.octreeCulling && (this._octree = new Jt(t.octreeInitialSize, t.octreeInitialCenter, t.octreeMinNodeSize, t.octreeLooseness)), 
            W._config.debugFrustumCulling) {
                this._debugTool = new xi();
                var i = new ri();
                i.renderQueue = 3e3, i.alphaTest = !1, i.depthWrite = !1, i.cull = 2, i.blend = 1, 
                i.blendSrc = 770, i.blendDst = 771, i.depthTest = 513, this._debugTool.pixelLineRenderer.sharedMaterial = i;
            }
        }
        r(e, "laya.d3.core.scene.Scene3D", t);
        var s = e.prototype;
        return n.imps(s, {
            "laya.webgl.submit.ISubmit": !0,
            "laya.resource.ICreateResource": !0
        }), s._allotPickColorByID = function(t, e) {
            var n = Math.floor(t / 65025);
            t -= 255 * n * 255;
            var i = Math.floor(t / 255), r = t -= 255 * i;
            e.x = n / 255, e.y = i / 255, e.z = r / 255, e.w = 1;
        }, s._searchIDByPickColor = function(t) {
            return 255 * t.x * 255 + 255 * t.y + t.z;
        }, s._setLightmapToChildNode = function(t) {
            t instanceof laya.d3.core.RenderableSprite3D && t._render._applyLightMapParams();
            for (var e = t._children, n = 0, i = e.length; n < i; n++) this._setLightmapToChildNode(e[n]);
        }, s._update = function() {
            var t = this.timer._delta / 1e3;
            this._time += t, this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.TIME, this._time);
            var e = this._physicsSimulation;
            W._enbalePhysics && !ke.disableSimulation && (e._updatePhysicsTransformFromRender(), 
            Xe._addUpdateList = !1, e._simulate(t), e._updateCharacters(), Xe._addUpdateList = !0, 
            e._updateCollisions(), e._eventScripts(), this._input._update()), this._updateScript(), 
            Ze._update(this), this._lateUpdateScript();
        }, s._binarySearchIndexInCameraPool = function(t) {
            for (var e = 0, n = this._cameraPool.length - 1, i = 0; e <= n; ) {
                i = Math.floor((e + n) / 2);
                var r = this._cameraPool[i]._renderingOrder;
                if (r == t._renderingOrder) return i;
                r > t._renderingOrder ? n = i - 1 : e = i + 1;
            }
            return e;
        }, s._setCreateURL = function(t) {
            this._url = b.formatURL(t);
        }, s._getGroup = function() {
            return this._group;
        }, s._setGroup = function(t) {
            this._group = t;
        }, s._updateScript = function() {
            for (var t = this._scriptPool, e = t.elements, n = 0, i = t.length; n < i; n++) {
                var r = e[n];
                r && r.enabled && r.onUpdate();
            }
        }, s._lateUpdateScript = function() {
            for (var t = this._scriptPool, e = t.elements, n = 0, i = t.length; n < i; n++) {
                var r = e[n];
                r && r.enabled && r.onLateUpdate();
            }
        }, s._preRenderScript = function() {
            for (var t = this._scriptPool, e = t.elements, n = 0, i = t.length; n < i; n++) {
                var r = e[n];
                r && r.enabled && r.onPreRender();
            }
        }, s._postRenderScript = function() {
            for (var t = this._scriptPool, e = t.elements, n = 0, i = t.length; n < i; n++) {
                var r = e[n];
                r && r.enabled && r.onPostRender();
            }
        }, s._prepareSceneToRender = function() {
            var t = this._lights.length;
            if (t > 0) for (var e = 0, n = 0; n < t && !(this._lights[n]._prepareToScene() && ++e >= this._enableLightCount); n++) ;
        }, s._addCamera = function(t) {
            for (var e = this._binarySearchIndexInCameraPool(t), n = t._renderingOrder, i = this._cameraPool.length; e < i && this._cameraPool[e]._renderingOrder <= n; ) e++;
            this._cameraPool.splice(e, 0, t);
        }, s._removeCamera = function(t) {
            this._cameraPool.splice(this._cameraPool.indexOf(t), 1);
        }, s._preCulling = function(t, e) {
            Pe.renderObjectCulling(e, this, t, this._renders);
        }, s._clear = function(t, e) {
            var n = e.viewport, i = e.camera, r = i.getRenderTexture(), a = n.width, o = n.height, s = n.x, l = i._getCanvasHeight() - n.y - o;
            t.viewport(s, l, a, o);
            var h = 0, u = i.clearFlag;
            switch (1 !== u || i.skyRenderer._isAvailable() || this._skyRenderer._isAvailable() || (u = 0), 
            u) {
              case 0:
                var c = i.clearColor;
                if (t.enable(3089), t.scissor(s, l, a, o), c ? t.clearColor(c.x, c.y, c.z, c.w) : t.clearColor(0, 0, 0, 0), 
                r) switch (h = 16384, r.depthStencilFormat) {
                  case 0:
                    h |= 256;
                    break;

                  case 1:
                    h |= 1024;
                    break;

                  case 2:
                    h |= 256, h |= 1024;
                } else h = 16640;
                B.setDepthMask(t, !0), t.clear(h), t.disable(3089);
                break;

              case 1:
              case 2:
                if (t.enable(3089), t.scissor(s, l, a, o), r) switch (r.depthStencilFormat) {
                  case 0:
                    h = 256;
                    break;

                  case 1:
                    h = 1024;
                    break;

                  case 2:
                    h = 1280;
                } else h = 256;
                B.setDepthMask(t, !0), t.clear(h), t.disable(3089);
                break;

              case 3:
                break;

              default:
                throw new Error("BaseScene:camera clearFlag invalid.");
            }
        }, s._renderScene = function(t, e, n, i) {
            var r = e.camera;
            if (r.transform.position, r.getRenderTexture() ? this._opaqueQueue._render(e, !0, n, i) : this._opaqueQueue._render(e, !1, n, i), 
            1 === r.clearFlag && (r.skyRenderer._isAvailable() ? r.skyRenderer._render(e) : this._skyRenderer._isAvailable() && this._skyRenderer._render(e)), 
            r.getRenderTexture() ? this._transparentQueue._render(e, !0, n, i) : this._transparentQueue._render(e, !1, n, i), 
            r._applyPostProcessCommandBuffers(), W._config.debugFrustumCulling) for (var a = this._debugTool._render._renderElements, o = 0, s = a.length; o < s; o++) a[o]._render(e, !1, n, i);
        }, s._parse = function(t, e) {
            var n = t.lightmaps;
            if (n) {
                for (var i = n.length, r = o(i), a = 0; a < i; a++) r[a] = S.getRes(n[a].path);
                this.setlightmaps(r);
            }
            var s = t.ambientColor;
            if (s) {
                var l = this.ambientColor;
                l.fromArray(s), this.ambientColor = l;
            }
            var h = t.sky;
            if (h) switch (this._skyRenderer.material = S.getRes(h.material.path), h.mesh) {
              case "SkyBox":
                this._skyRenderer.mesh = xn.instance;
                break;

              case "SkyDome":
                this._skyRenderer.mesh = Ln.instance;
                break;

              default:
                this.skyRenderer.mesh = xn.instance;
            }
            var u = t.reflectionTexture;
            u && (this.customReflection = S.getRes(u)), this.enableFog = t.enableFog, this.fogStart = t.fogStart, 
            this.fogRange = t.fogRange;
            var c = t.fogColor;
            if (c) {
                var _ = this.fogColor;
                _.fromArray(c), this.fogColor = _;
            }
        }, s._onActive = function() {
            laya.display.Node.prototype._onActive.call(this), n.stage._scene3Ds.push(this);
        }, s._onInActive = function() {
            laya.display.Node.prototype._onInActive.call(this);
            var t = n.stage._scene3Ds;
            t.splice(t.indexOf(this), 1);
        }, s._addLight = function(t) {
            this._lights.indexOf(t) < 0 && this._lights.push(t);
        }, s._removeLight = function(t) {
            var e = this._lights.indexOf(t);
            e >= 0 && this._lights.splice(e, 1);
        }, s._addRenderObject = function(t) {
            if (this._octree) this._octree.add(t); else if (this._renders.add(t), R.supportWebGLPlusCulling) {
                var e = t._getIndexInList(), n = this._cullingBufferIndices.length;
                if (e >= n) {
                    var i = this._cullingBufferIndices, r = this._cullingBufferResult;
                    this._cullingBufferIndices = new Int32Array(n + 1024), this._cullingBufferResult = new Int32Array(n + 1024), 
                    this._cullingBufferIndices.set(i, 0), this._cullingBufferResult.set(r, 0);
                }
                this._cullingBufferIndices[e] = t._cullingBufferIndex;
            }
        }, s._removeRenderObject = function(t) {
            if (this._octree) this._octree.remove(t); else {
                var e;
                R.supportWebGLPlusCulling && (e = this._renders.elements[this._renders.length - 1]), 
                this._renders.remove(t), R.supportWebGLPlusCulling && (this._cullingBufferIndices[e._getIndexInList()] = e._cullingBufferIndex);
            }
        }, s._addShadowCastRenderObject = function(t) {
            this._octree || this._castShadowRenders.add(t);
        }, s._removeShadowCastRenderObject = function(t) {
            this._octree || this._castShadowRenders.remove(t);
        }, s._getRenderQueue = function(t) {
            return t <= 2500 ? this._opaqueQueue : this._transparentQueue;
        }, s.setlightmaps = function(t) {
            for (var e = this._lightmaps, n = 0, i = e.length; n < i; n++) e[n]._removeReference();
            if (!t) throw new Error("Scene3D: value value can't be null.");
            var r = t.length;
            for (e.length = r, n = 0; n < r; n++) {
                var a = t[n];
                a._addReference(), e[n] = a;
            }
            for (n = 0, i = this._children.length; n < i; n++) this._setLightmapToChildNode(this._children[n]);
        }, s.getlightmaps = function() {
            return this._lightmaps.slice();
        }, s.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._skyRenderer.destroy(), this._skyRenderer = null, this._lights = null, this._lightmaps = null, 
            this._renderTargetTexture = null, this._shaderValues = null, this._renders = null, 
            this._castShadowRenders = null, this._cameraPool = null, this._octree = null, this.parallelSplitShadowMaps = null, 
            this._physicsSimulation && this._physicsSimulation._destroy(), S.clearRes(this.url));
        }, s.render = function(t, e, n) {
            t._curSubmit = V.RENDERBASE, this._children.length > 0 && t.addRenderObject(this);
        }, s.renderSubmit = function() {
            v.instance, this._prepareSceneToRender();
            var t = 0, e = 0, n = 0;
            for (t = 0, n = (e = this._cameraPool.length) - 1; t < e; t++) {
                R.supportWebGLPlusRendering && ut.setRuntimeValueMode(t == n);
                var i = this._cameraPool[t];
                i.enableRender && i.render();
            }
            return p.set2DRenderConfig(), 1;
        }, s.getRenderType = function() {
            return 0;
        }, s.releaseRender = function() {}, s.reUse = function(t, e) {
            return 0;
        }, a(0, s, "fogColor", function() {
            return this._shaderValues.getVector(laya.d3.core.scene.Scene3D.FOGCOLOR);
        }, function(t) {
            this._shaderValues.setVector3(laya.d3.core.scene.Scene3D.FOGCOLOR, t);
        }), a(0, s, "enableFog", function() {
            return this._enableFog;
        }, function(t) {
            this._enableFog !== t && (this._enableFog = t, t ? this._defineDatas.add(laya.d3.core.scene.Scene3D.SHADERDEFINE_FOG) : this._defineDatas.remove(laya.d3.core.scene.Scene3D.SHADERDEFINE_FOG));
        }), a(0, s, "url", function() {
            return this._url;
        }), a(0, s, "fogStart", function() {
            return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.FOGSTART);
        }, function(t) {
            this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.FOGSTART, t);
        }), a(0, s, "reflectionIntensity", function() {
            return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.REFLETIONINTENSITY);
        }, function(t) {
            t = Math.max(Math.min(t, 1), 0), this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.REFLETIONINTENSITY, t);
        }), a(0, s, "skyRenderer", function() {
            return this._skyRenderer;
        }), a(0, s, "fogRange", function() {
            return this._shaderValues.getNumber(laya.d3.core.scene.Scene3D.FOGRANGE);
        }, function(t) {
            this._shaderValues.setNumber(laya.d3.core.scene.Scene3D.FOGRANGE, t);
        }), a(0, s, "ambientColor", function() {
            return this._shaderValues.getVector(laya.d3.core.scene.Scene3D.AMBIENTCOLOR);
        }, function(t) {
            this._shaderValues.setVector3(laya.d3.core.scene.Scene3D.AMBIENTCOLOR, t);
        }), a(0, s, "customReflection", function() {
            return this._shaderValues.getTexture(laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE);
        }, function(t) {
            this._shaderValues.setTexture(laya.d3.core.scene.Scene3D.REFLECTIONTEXTURE, t), 
            t ? this._defineDatas.add(laya.d3.core.scene.Scene3D.SHADERDEFINE_REFLECTMAP) : this._defineDatas.remove(laya.d3.core.scene.Scene3D.SHADERDEFINE_REFLECTMAP);
        }), a(0, s, "physicsSimulation", function() {
            return this._physicsSimulation;
        }), a(0, s, "reflectionMode", function() {
            return this._reflectionMode;
        }, function(t) {
            this._reflectionMode = t;
        }), a(0, s, "timer", function() {
            return this._timer;
        }, function(t) {
            this._timer = t;
        }), a(0, s, "input", function() {
            return this._input;
        }), e._parse = function(t, e, n) {
            var i, r = t.data, a = [];
            switch (t.version) {
              case "LAYAHIERARCHY:02":
                i = kt._createNodeByJson02(r, a);
                break;

              default:
                i = kt._createNodeByJson(r, a);
            }
            return q.combine(null, a), i;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "HIERARCHY");
        }, e.REFLECTIONMODE_SKYBOX = 0, e.REFLECTIONMODE_CUSTOM = 1, e.SHADERDEFINE_FOG = 0, 
        e.SHADERDEFINE_DIRECTIONLIGHT = 0, e.SHADERDEFINE_POINTLIGHT = 0, e.SHADERDEFINE_SPOTLIGHT = 0, 
        e.SHADERDEFINE_CAST_SHADOW = 0, e.SHADERDEFINE_SHADOW_PSSM1 = 0, e.SHADERDEFINE_SHADOW_PSSM2 = 0, 
        e.SHADERDEFINE_SHADOW_PSSM3 = 0, e.SHADERDEFINE_SHADOW_PCF_NO = 0, e.SHADERDEFINE_SHADOW_PCF1 = 0, 
        e.SHADERDEFINE_SHADOW_PCF2 = 0, e.SHADERDEFINE_SHADOW_PCF3 = 0, e.SHADERDEFINE_REFLECTMAP = 0, 
        i(e, [ "FOGCOLOR", function() {
            return this.FOGCOLOR = Vt.propertyNameToID("u_FogColor");
        }, "FOGSTART", function() {
            return this.FOGSTART = Vt.propertyNameToID("u_FogStart");
        }, "FOGRANGE", function() {
            return this.FOGRANGE = Vt.propertyNameToID("u_FogRange");
        }, "LIGHTDIRECTION", function() {
            return this.LIGHTDIRECTION = Vt.propertyNameToID("u_DirectionLight.Direction");
        }, "LIGHTDIRCOLOR", function() {
            return this.LIGHTDIRCOLOR = Vt.propertyNameToID("u_DirectionLight.Color");
        }, "POINTLIGHTPOS", function() {
            return this.POINTLIGHTPOS = Vt.propertyNameToID("u_PointLight.Position");
        }, "POINTLIGHTRANGE", function() {
            return this.POINTLIGHTRANGE = Vt.propertyNameToID("u_PointLight.Range");
        }, "POINTLIGHTATTENUATION", function() {
            return this.POINTLIGHTATTENUATION = Vt.propertyNameToID("u_PointLight.Attenuation");
        }, "POINTLIGHTCOLOR", function() {
            return this.POINTLIGHTCOLOR = Vt.propertyNameToID("u_PointLight.Color");
        }, "SPOTLIGHTPOS", function() {
            return this.SPOTLIGHTPOS = Vt.propertyNameToID("u_SpotLight.Position");
        }, "SPOTLIGHTDIRECTION", function() {
            return this.SPOTLIGHTDIRECTION = Vt.propertyNameToID("u_SpotLight.Direction");
        }, "SPOTLIGHTSPOTANGLE", function() {
            return this.SPOTLIGHTSPOTANGLE = Vt.propertyNameToID("u_SpotLight.Spot");
        }, "SPOTLIGHTRANGE", function() {
            return this.SPOTLIGHTRANGE = Vt.propertyNameToID("u_SpotLight.Range");
        }, "SPOTLIGHTCOLOR", function() {
            return this.SPOTLIGHTCOLOR = Vt.propertyNameToID("u_SpotLight.Color");
        }, "SHADOWDISTANCE", function() {
            return this.SHADOWDISTANCE = Vt.propertyNameToID("u_shadowPSSMDistance");
        }, "SHADOWLIGHTVIEWPROJECT", function() {
            return this.SHADOWLIGHTVIEWPROJECT = Vt.propertyNameToID("u_lightShadowVP");
        }, "SHADOWMAPPCFOFFSET", function() {
            return this.SHADOWMAPPCFOFFSET = Vt.propertyNameToID("u_shadowPCFoffset");
        }, "SHADOWMAPTEXTURE1", function() {
            return this.SHADOWMAPTEXTURE1 = Vt.propertyNameToID("u_shadowMap1");
        }, "SHADOWMAPTEXTURE2", function() {
            return this.SHADOWMAPTEXTURE2 = Vt.propertyNameToID("u_shadowMap2");
        }, "SHADOWMAPTEXTURE3", function() {
            return this.SHADOWMAPTEXTURE3 = Vt.propertyNameToID("u_shadowMap3");
        }, "AMBIENTCOLOR", function() {
            return this.AMBIENTCOLOR = Vt.propertyNameToID("u_AmbientColor");
        }, "REFLECTIONTEXTURE", function() {
            return this.REFLECTIONTEXTURE = Vt.propertyNameToID("u_ReflectTexture");
        }, "REFLETIONINTENSITY", function() {
            return this.REFLETIONINTENSITY = Vt.propertyNameToID("u_ReflectIntensity");
        }, "TIME", function() {
            return this.TIME = Vt.propertyNameToID("u_Time");
        }, "ANGLEATTENUATIONTEXTURE", function() {
            return this.ANGLEATTENUATIONTEXTURE = Vt.propertyNameToID("u_AngleTexture");
        }, "RANGEATTENUATIONTEXTURE", function() {
            return this.RANGEATTENUATIONTEXTURE = Vt.propertyNameToID("u_RangeTexture");
        }, "POINTLIGHTMATRIX", function() {
            return this.POINTLIGHTMATRIX = Vt.propertyNameToID("u_PointLightMatrix");
        }, "SPOTLIGHTMATRIX", function() {
            return this.SPOTLIGHTMATRIX = Vt.propertyNameToID("u_SpotLightMatrix");
        } ]), e;
    }(O), Jn = function(t) {
        function e(t) {
            this.pickColor = null, this._render = null, e.__super.call(this, t);
        }
        r(e, "laya.d3.core.RenderableSprite3D", t);
        var n = e.prototype;
        return n._onInActive = function() {
            laya.display.Node.prototype._onInActive.call(this);
            var t = this._scene;
            t._removeRenderObject(this._render), this._render.castShadow && t._removeShadowCastRenderObject(this._render);
        }, n._onActive = function() {
            laya.display.Node.prototype._onActive.call(this);
            var t = this._scene;
            t._addRenderObject(this._render), this._render.castShadow && t._addShadowCastRenderObject(this._render);
        }, n._onActiveInScene = function() {
            if (laya.display.Node.prototype._onActiveInScene.call(this), W._editerEnvironment) {
                var t = this._scene, e = new mt();
                t._allotPickColorByID(this.id, e), t._pickIdToSprite[this.id] = this, this._render._shaderValues.setVector(laya.d3.core.RenderableSprite3D.PICKCOLOR, e);
            }
        }, n._addToInitStaticBatchManager = function() {}, n._setBelongScene = function(t) {
            laya.display.Node.prototype._setBelongScene.call(this, t), this._render._setBelongScene(t);
        }, n._setUnBelongScene = function() {
            this._render._defineDatas.remove(laya.d3.core.RenderableSprite3D.SAHDERDEFINE_LIGHTMAP), 
            laya.display.Node.prototype._setUnBelongScene.call(this);
        }, n._changeHierarchyAnimator = function(e) {
            if (this._hierarchyAnimator) {
                var n = this._hierarchyAnimator._renderableSprites;
                n.splice(n.indexOf(this), 1);
            }
            e && e._renderableSprites.push(this), t.prototype._changeHierarchyAnimator.call(this, e);
        }, n.destroy = function(e) {
            void 0 === e && (e = !0), t.prototype.destroy.call(this, e), this._render._destroy(), 
            this._render = null;
        }, e.__init__ = function() {
            e.SHADERDEFINE_RECEIVE_SHADOW = e.shaderDefines.registerDefine("RECEIVESHADOW"), 
            e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = e.shaderDefines.registerDefine("SCALEOFFSETLIGHTINGMAPUV"), 
            e.SAHDERDEFINE_LIGHTMAP = e.shaderDefines.registerDefine("LIGHTMAP");
        }, e.SHADERDEFINE_RECEIVE_SHADOW = 0, e.SHADERDEFINE_SCALEOFFSETLIGHTINGMAPUV = 0, 
        e.SAHDERDEFINE_LIGHTMAP = 0, i(e, [ "LIGHTMAPSCALEOFFSET", function() {
            return this.LIGHTMAPSCALEOFFSET = Vt.propertyNameToID("u_LightmapScaleOffset");
        }, "LIGHTMAP", function() {
            return this.LIGHTMAP = Vt.propertyNameToID("u_LightMap");
        }, "PICKCOLOR", function() {
            return this.PICKCOLOR = Vt.propertyNameToID("u_PickColor");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt();
        } ]), e;
    }(Fn), $n = function(t) {
        function e() {
            this._albedoIntensity = 1, this._enableVertexColor = !1, this._albedoColor = new mt(1, 1, 1, 1), 
            e.__super.call(this), this.setShaderName("Unlit"), this._shaderValues.setVector(e.ALBEDOCOLOR, new mt(1, 1, 1, 1)), 
            this.renderMode = 0;
        }
        r(e, "laya.d3.core.material.UnlitMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "_ColorB", function() {
            return this._albedoColor.z;
        }, function(t) {
            this._albedoColor.z = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.x;
        }, function(t) {
            this._albedoColor.x = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(t) {
            this._ColorA = t;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.y;
        }, function(t) {
            this._albedoColor.y = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.w;
        }, function(t) {
            this._albedoColor.w = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_AlbedoIntensity", function() {
            return this._albedoIntensity;
        }, function(t) {
            if (this._albedoIntensity !== t) {
                var n = this._shaderValues.getVector(e.ALBEDOCOLOR);
                mt.scale(this._albedoColor, t, n), this._albedoIntensity = t, this._shaderValues.setVector(e.ALBEDOCOLOR, n);
            }
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(t) {
            this.alphaTestValue = t;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(t) {
            this._ColorR = t;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(t) {
            this._ColorG = t;
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(t) {
            this._ColorB = t;
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(t) {
            var n = this._shaderValues.getVector(e.ALBEDOCOLOR);
            mt.scale(t, this._albedoIntensity, n), this._albedoColor = t, this._shaderValues.setVector(e.ALBEDOCOLOR, n);
        }), a(0, n, "albedoIntensity", function() {
            return this._albedoIntensity;
        }, function(t) {
            this._AlbedoIntensity = t;
        }), a(0, n, "enableVertexColor", function() {
            return this._enableVertexColor;
        }, function(t) {
            this._enableVertexColor = t, t ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(e.ALBEDOTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(e.ALBEDOTEXTURE, t);
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.material.UnlitMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513;
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513;
                break;

              default:
                throw new Error("UnlitMaterial : renderMode value error.");
            }
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_ALBEDOTEXTURE = e.shaderDefines.registerDefine("ALBEDOTEXTURE"), 
            e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET"), e.SHADERDEFINE_ENABLEVERTEXCOLOR = e.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
        }, e.RENDERMODE_OPAQUE = 0, e.RENDERMODE_CUTOUT = 1, e.RENDERMODE_TRANSPARENT = 2, 
        e.RENDERMODE_ADDTIVE = 3, e.SHADERDEFINE_ALBEDOTEXTURE = 0, e.SHADERDEFINE_TILINGOFFSET = 0, 
        e.SHADERDEFINE_ENABLEVERTEXCOLOR = 0, i(e, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = Vt.propertyNameToID("u_AlbedoTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = Vt.propertyNameToID("u_AlbedoColor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), ti = function(t) {
        function e() {
            this._intensityColor = null, this._intensity = NaN, this._shadow = !1, this._shadowFarPlane = 0, 
            this._shadowMapSize = 0, this._shadowMapCount = 0, this._shadowMapPCFType = 0, this._parallelSplitShadowMap = null, 
            this._lightmapBakedType = 0, this.color = null, e.__super.call(this), this._intensity = 1, 
            this._intensityColor = new Tt(), this.color = new Tt(1, 1, 1), this._shadow = !1, 
            this._shadowFarPlane = 8, this._shadowMapSize = 512, this._shadowMapCount = 1, this._shadowMapPCFType = 0, 
            this._lightmapBakedType = e.LIGHTMAPBAKEDTYPE_REALTIME;
        }
        r(e, "laya.d3.core.light.LightSprite", t);
        var n = e.prototype;
        return n._parse = function(e, n) {
            t.prototype._parse.call(this, e, n);
            var i = e.color;
            this.color.fromArray(i), this.intensity = e.intensity, this.lightmapBakedType = e.lightmapBakedType;
        }, n._onActive = function() {
            laya.display.Node.prototype._onActive.call(this), this.lightmapBakedType !== e.LIGHTMAPBAKEDTYPE_BAKED && this._scene._addLight(this);
        }, n._onInActive = function() {
            laya.display.Node.prototype._onInActive.call(this), this.lightmapBakedType !== e.LIGHTMAPBAKEDTYPE_BAKED && this._scene._removeLight(this);
        }, n._prepareToScene = function() {
            return !1;
        }, a(0, n, "lightmapBakedType", function() {
            return this._lightmapBakedType;
        }, function(t) {
            this._lightmapBakedType !== t && (this._lightmapBakedType = t, this.activeInHierarchy && (t !== e.LIGHTMAPBAKEDTYPE_BAKED ? this._scene._addLight(this) : this._scene._removeLight(this)));
        }), a(0, n, "shadowPCFType", function() {
            return this._shadowMapPCFType;
        }, function(t) {
            this._shadowMapPCFType = t, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setPCFType(t);
        }), a(0, n, "intensity", function() {
            return this._intensity;
        }, function(t) {
            this._intensity = t;
        }), a(0, n, "shadow", function() {
            return this._shadow;
        }, function(t) {
            throw new Error("LightSprite: must override it.");
        }), a(0, n, "shadowDistance", function() {
            return this._shadowFarPlane;
        }, function(t) {
            this._shadowFarPlane = t, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setFarDistance(t);
        }), a(0, n, "shadowPSSMCount", function() {
            return this._shadowMapCount;
        }, function(t) {
            this._shadowMapCount = t, this._parallelSplitShadowMap && (this._parallelSplitShadowMap.shadowMapCount = t);
        }), a(0, n, "shadowResolution", function() {
            return this._shadowMapSize;
        }, function(t) {
            this._shadowMapSize = t, this._parallelSplitShadowMap && this._parallelSplitShadowMap.setShadowMapTextureSize(t);
        }), a(0, n, "diffuseColor", function() {
            return console.log("LightSprite: discard property,please use color property instead."), 
            this.color;
        }, function(t) {
            console.log("LightSprite: discard property,please use color property instead."), 
            this.color = t;
        }), e.LIGHTMAPBAKEDTYPE_REALTIME = 0, e.LIGHTMAPBAKEDTYPE_MIXED = 1, e.LIGHTMAPBAKEDTYPE_BAKED = 2, 
        e;
    }(Fn), ei = function(t) {
        function e(t) {
            this._terrainRes = null, this._lightmapScaleOffset = null, e.__super.call(this), 
            this._lightmapScaleOffset = new mt(1, 1, 0, 0), t && (this._terrainRes = t, this.buildTerrain(t));
        }
        r(e, "laya.d3.terrain.Terrain", t);
        var i = e.prototype;
        return i._parse = function(e, n) {
            t.prototype._parse.call(this, e, n), this.terrainRes = S.getRes(e.dataPath);
            var i = e.lightmapIndex;
            null != i && this.setLightmapIndex(i);
            var r = e.lightmapScaleOffset;
            r && this.setLightmapScaleOffset(new mt(r[0], r[1], r[2], r[3]));
        }, i.setLightmapIndex = function(t) {
            for (var e = 0; e < this._children.length; e++) this._children[e].terrainRender.lightmapIndex = t;
        }, i.setLightmapScaleOffset = function(t) {
            if (t) {
                t.cloneTo(this._lightmapScaleOffset);
                for (var e = 0; e < this._children.length; e++) this._children[e].terrainRender.lightmapScaleOffset = this._lightmapScaleOffset;
            }
        }, i.disableLight = function() {
            for (var t = 0, e = this._children.length; t < e; t++) for (var n = this._children[t], i = 0, r = n._render.sharedMaterials.length; i < r; i++) n._render.sharedMaterials[i].disableLight();
        }, i.buildTerrain = function(t) {
            for (var e = t._chunkNumX, n = t._chunkNumZ, i = t._heightData, r = 0, a = 0; a < n; a++) for (var o = 0; o < e; o++) {
                for (var s = new Ri(o, a, t._gridSize, i._terrainHeightData, i._width, i._height, t._cameraCoordinateInverse), l = t._chunkInfos[r++], h = 0; h < l.alphaMap.length; h++) {
                    var u = l.detailID[h].length, c = u > 0 ? t._detailTextureInfos[l.detailID[h][0]].diffuseTexture : null, _ = u > 1 ? t._detailTextureInfos[l.detailID[h][1]].diffuseTexture : null, d = u > 2 ? t._detailTextureInfos[l.detailID[h][2]].diffuseTexture : null, f = u > 3 ? t._detailTextureInfos[l.detailID[h][3]].diffuseTexture : null, m = u > 0 ? t._detailTextureInfos[l.detailID[h][0]].scale : null, p = u > 1 ? t._detailTextureInfos[l.detailID[h][1]].scale : null, T = u > 2 ? t._detailTextureInfos[l.detailID[h][2]].scale : null, E = u > 3 ? t._detailTextureInfos[l.detailID[h][3]].scale : null;
                    s.buildRenderElementAndMaterial(u, l.normalMap, l.alphaMap[h], c, _, d, f, t._materialInfo.ambientColor, t._materialInfo.diffuseColor, t._materialInfo.specularColor, m ? m.x : 1, m ? m.y : 1, p ? p.x : 1, p ? p.y : 1, T ? T.x : 1, T ? T.y : 1, E ? E.x : 1, E ? E.y : 1);
                }
                s.terrainRender.receiveShadow = !0, s.terrainRender.lightmapScaleOffset = this._lightmapScaleOffset, 
                this.addChild(s);
            }
        }, i.width = function() {
            return this._terrainRes._chunkNumX * ct.CHUNK_GRID_NUM * this._terrainRes._gridSize;
        }, i.depth = function() {
            return this._terrainRes._chunkNumZ * ct.CHUNK_GRID_NUM * this._terrainRes._gridSize;
        }, i.getHeightXZ = function(t, n) {
            if (!this._terrainRes) return NaN;
            if (t -= this.transform.position.x, n -= this.transform.position.z, e.__VECTOR3__ || (e.__VECTOR3__ = new Tt()), 
            e.__VECTOR3__.x = t, e.__VECTOR3__.y = 0, e.__VECTOR3__.z = n, Tt.transformV3ToV3(e.__VECTOR3__, ct.__ADAPT_MATRIX_INV__, e.__VECTOR3__), 
            t = e.__VECTOR3__.x, n = e.__VECTOR3__.z, t < 0 || t > this.width() || n < 0 || n > this.depth()) return NaN;
            var i = this._terrainRes._gridSize, r = parseInt("" + t / i), a = parseInt("" + n / i), o = t - r * i, s = n - a * i, l = NaN, h = NaN, u = NaN, c = NaN, _ = NaN, d = this._terrainRes._heightData;
            return o + s > i ? (l = d._terrainHeightData[(a + 1 - 1) * d._width + r + 1], h = d._terrainHeightData[(a + 1 - 1) * d._width + r], 
            u = d._terrainHeightData[(a - 1) * d._width + r + 1], c = (i - o) / i, _ = (i - s) / i, 
            l + (h - l) * c + (u - l) * _) : (l = d._terrainHeightData[Math.max(0, a - 1) * d._width + r], 
            h = d._terrainHeightData[Math.min(d._width * d._height - 1, (a + 1 - 1) * d._width + r)], 
            u = d._terrainHeightData[Math.min(d._width * d._height - 1, Math.max(0, a - 1) * d._width + r + 1)], 
            c = o / i, _ = s / i, l + (h - l) * _ + (u - l) * c);
        }, a(0, i, "terrainRes", null, function(t) {
            t && (this._terrainRes = t, this.buildTerrain(t));
        }), e.load = function(t) {
            n.loader.create(t, null, null, "TERRAIN", null, null, 1, !1);
        }, e.RENDER_LINE_MODEL = !1, e.LOD_TOLERANCE_VALUE = 4, e.LOD_DISTANCE_FACTOR = 2, 
        e.__VECTOR3__ = null, e;
    }(Fn), ni = function(t) {
        function e() {
            this._color = null, e.__super.call(this), this.setShaderName("Trail"), this._color = new mt(1, 1, 1, 1), 
            this._shaderValues.setVector(e.TINTCOLOR, new mt(1, 1, 1, 1)), this.renderMode = 0;
        }
        r(e, "laya.d3.core.trail.TrailMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "_TintColorB", function() {
            return this._color.z;
        }, function(t) {
            this._color.z = t, this.color = this._color;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "texture", function() {
            return this._shaderValues.getTexture(e.MAINTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(e.MAINTEXTURE, t);
        }), a(0, n, "_TintColorR", function() {
            return this._color.x;
        }, function(t) {
            this._color.x = t, this.color = this._color;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "_TintColorG", function() {
            return this._color.y;
        }, function(t) {
            this._color.y = t, this.color = this._color;
        }), a(0, n, "_TintColorA", function() {
            return this._color.w;
        }, function(t) {
            this._color.w = t, this.color = this._color;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 1:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 1, this.depthTest = 513, this._defineDatas.add(e.SHADERDEFINE_ADDTIVEFOG);
                break;

              case 0:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513, 
                this._defineDatas.remove(e.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("TrailMaterial : renderMode value error.");
            }
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "colorR", function() {
            return this._TintColorR;
        }, function(t) {
            this._TintColorR = t;
        }), a(0, n, "colorG", function() {
            return this._TintColorG;
        }, function(t) {
            this._TintColorG = t;
        }), a(0, n, "colorB", function() {
            return this._TintColorB;
        }, function(t) {
            this._TintColorB = t;
        }), a(0, n, "colorA", function() {
            return this._TintColorA;
        }, function(t) {
            this._TintColorA = t;
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(e.TINTCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.TINTCOLOR, t);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.trail.TrailMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_MAINTEXTURE = e.shaderDefines.registerDefine("MAINTEXTURE"), e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET"), 
            e.SHADERDEFINE_ADDTIVEFOG = e.shaderDefines.registerDefine("ADDTIVEFOG");
        }, e.RENDERMODE_ALPHABLENDED = 0, e.RENDERMODE_ADDTIVE = 1, e.SHADERDEFINE_MAINTEXTURE = 0, 
        e.SHADERDEFINE_TILINGOFFSET = 0, e.SHADERDEFINE_ADDTIVEFOG = 0, i(e, [ "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "MAINTEXTURE", function() {
            return this.MAINTEXTURE = Vt.propertyNameToID("u_MainTexture");
        }, "TINTCOLOR", function() {
            return this.TINTCOLOR = Vt.propertyNameToID("u_MainColor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), ii = function(t) {
        function e() {
            this._sunDisk = 0, e.__super.call(this), this.setShaderName("SkyBoxProcedural"), 
            this.sunDisk = 1, this.sunSize = .04, this.sunSizeConvergence = 5, this.atmosphereThickness = 1, 
            this.skyTint = new mt(.5, .5, .5, 1), this.groundTint = new mt(.369, .349, .341, 1), 
            this.exposure = 1.3;
        }
        r(e, "laya.d3.core.material.SkyProceduralMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "exposure", function() {
            return this._shaderValues.getNumber(e.EXPOSURE);
        }, function(t) {
            t = Math.min(Math.max(0, t), 8), this._shaderValues.setNumber(e.EXPOSURE, t);
        }), a(0, n, "sunSize", function() {
            return this._shaderValues.getNumber(e.SUNSIZE);
        }, function(t) {
            t = Math.min(Math.max(0, t), 1), this._shaderValues.setNumber(e.SUNSIZE, t);
        }), a(0, n, "sunDisk", function() {
            return this._sunDisk;
        }, function(t) {
            switch (t) {
              case 1:
                this._defineDatas.remove(e.SHADERDEFINE_SUN_SIMPLE), this._defineDatas.add(e.SHADERDEFINE_SUN_HIGH_QUALITY);
                break;

              case 2:
                this._defineDatas.remove(e.SHADERDEFINE_SUN_HIGH_QUALITY), this._defineDatas.add(e.SHADERDEFINE_SUN_SIMPLE);
                break;

              case 0:
                this._defineDatas.remove(e.SHADERDEFINE_SUN_HIGH_QUALITY), this._defineDatas.remove(e.SHADERDEFINE_SUN_SIMPLE);
                break;

              default:
                throw "SkyBoxProceduralMaterial: unknown sun value.";
            }
            this._sunDisk = t;
        }), a(0, n, "sunSizeConvergence", function() {
            return this._shaderValues.getNumber(e.SUNSIZECONVERGENCE);
        }, function(t) {
            t = Math.min(Math.max(0, t), 20), this._shaderValues.setNumber(e.SUNSIZECONVERGENCE, t);
        }), a(0, n, "atmosphereThickness", function() {
            return this._shaderValues.getNumber(e.ATMOSPHERETHICKNESS);
        }, function(t) {
            t = Math.min(Math.max(0, t), 5), this._shaderValues.setNumber(e.ATMOSPHERETHICKNESS, t);
        }), a(0, n, "groundTint", function() {
            return this._shaderValues.getVector(e.GROUNDTINT);
        }, function(t) {
            this._shaderValues.setVector(e.GROUNDTINT, t);
        }), a(0, n, "skyTint", function() {
            return this._shaderValues.getVector(e.SKYTINT);
        }, function(t) {
            this._shaderValues.setVector(e.SKYTINT, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_SUN_HIGH_QUALITY = e.shaderDefines.registerDefine("SUN_HIGH_QUALITY"), 
            e.SHADERDEFINE_SUN_SIMPLE = e.shaderDefines.registerDefine("SUN_SIMPLE");
        }, e.SUN_NODE = 0, e.SUN_HIGH_QUALITY = 1, e.SUN_SIMPLE = 2, e.SHADERDEFINE_SUN_HIGH_QUALITY = 0, 
        e.SHADERDEFINE_SUN_SIMPLE = 0, i(e, [ "SUNSIZE", function() {
            return this.SUNSIZE = Vt.propertyNameToID("u_SunSize");
        }, "SUNSIZECONVERGENCE", function() {
            return this.SUNSIZECONVERGENCE = Vt.propertyNameToID("u_SunSizeConvergence");
        }, "ATMOSPHERETHICKNESS", function() {
            return this.ATMOSPHERETHICKNESS = Vt.propertyNameToID("u_AtmosphereThickness");
        }, "SKYTINT", function() {
            return this.SKYTINT = Vt.propertyNameToID("u_SkyTint");
        }, "GROUNDTINT", function() {
            return this.GROUNDTINT = Vt.propertyNameToID("u_GroundTint");
        }, "EXPOSURE", function() {
            return this.EXPOSURE = Vt.propertyNameToID("u_Exposure");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), ri = function(t) {
        function e() {
            e.__super.call(this), this.setShaderName("LineShader"), this._shaderValues.setVector(e.COLOR, new mt(1, 1, 1, 1));
        }
        r(e, "laya.d3.core.pixelLine.PixelLineMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(e.COLOR);
        }, function(t) {
            this._shaderValues.setVector(e.COLOR, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), i(e, [ "COLOR", function() {
            return this.COLOR = Vt.propertyNameToID("u_Color");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        } ]), e;
    }(), ai = function(t) {
        function e(t, i) {
            e.__super.call(this), this._skyRenderer = new me(), this._forward = new Tt(), this._up = new Tt(), 
            this.clearColor = new mt(100 / 255, 149 / 255, 237 / 255, 1), void 0 === t && (t = .3), 
            void 0 === i && (i = 1e3), this._shaderValues = new ut(null), this._fieldOfView = 60, 
            this._useUserProjectionMatrix = !1, this._orthographic = !1, this._orthographicVerticalSize = 10, 
            this.renderingOrder = 0, this._nearPlane = t, this._farPlane = i, this.cullingMask = 2147483647, 
            this.clearFlag = 0, this.useOcclusionCulling = !0, this._calculateProjectionMatrix(), 
            n.stage.on("resize", this, this._onScreenSizeChanged);
        }
        r(e, "laya.d3.core.BaseCamera", t);
        var o = e.prototype;
        return o._sortCamerasByRenderingOrder = function() {
            if (this.displayedInStage) for (var t = this.scene._cameraPool, e = t.length - 1, n = 0; n < e; n++) if (t[n].renderingOrder > t[e].renderingOrder) {
                var i = t[n];
                t[n] = t[e], t[e] = i;
            }
        }, o._calculateProjectionMatrix = function() {}, o._onScreenSizeChanged = function() {
            this._calculateProjectionMatrix();
        }, o._prepareCameraToRender = function() {
            this.transform.getForward(this._forward), this.transform.getUp(this._up);
            var t = this._shaderValues;
            t.setVector3(laya.d3.core.BaseCamera.CAMERAPOS, this.transform.position), t.setVector3(laya.d3.core.BaseCamera.CAMERADIRECTION, this._forward), 
            t.setVector3(laya.d3.core.BaseCamera.CAMERAUP, this._up);
        }, o._prepareCameraViewProject = function(t, n, i, r) {
            var a = this._shaderValues;
            a.setMatrix4x4(laya.d3.core.BaseCamera.VIEWMATRIX, t), a.setMatrix4x4(laya.d3.core.BaseCamera.PROJECTMATRIX, n), 
            a.setMatrix4x4(laya.d3.core.BaseCamera.VIEWPROJECTMATRIX, i), this.transform.worldMatrix.cloneTo(e._tempMatrix4x40), 
            e._tempMatrix4x40.transpose(), He.multiply(n, e._tempMatrix4x40, r), a.setMatrix4x4(laya.d3.core.BaseCamera.VPMATRIX_NO_TRANSLATE, r);
        }, o.render = function(t, e) {}, o.addLayer = function(t) {
            this.cullingMask |= Math.pow(2, t);
        }, o.removeLayer = function(t) {
            this.cullingMask &= ~Math.pow(2, t);
        }, o.addAllLayers = function() {
            this.cullingMask = 2147483647;
        }, o.removeAllLayers = function() {
            this.cullingMask = 0;
        }, o.resetProjectionMatrix = function() {
            this._useUserProjectionMatrix = !1, this._calculateProjectionMatrix();
        }, o._onActive = function() {
            this._scene._addCamera(this), laya.display.Node.prototype._onActive.call(this);
        }, o._onInActive = function() {
            this._scene._removeCamera(this), laya.display.Node.prototype._onInActive.call(this);
        }, o._parse = function(e, n) {
            t.prototype._parse.call(this, e, n);
            var i = e.clearFlag;
            void 0 !== i && (this.clearFlag = i), this.orthographic = e.orthographic, this.fieldOfView = e.fieldOfView, 
            this.nearPlane = e.nearPlane, this.farPlane = e.farPlane;
            var r = e.clearColor;
            this.clearColor = new mt(r[0], r[1], r[2], r[3]);
            var a = e.skyboxMaterial;
            a && (this._skyRenderer.material = S.getRes(a.path));
        }, o.destroy = function(e) {
            void 0 === e && (e = !0), this._skyRenderer.destroy(), this._skyRenderer = null, 
            n.stage.off("resize", this, this._onScreenSizeChanged), t.prototype.destroy.call(this, e);
        }, a(0, o, "renderingOrder", function() {
            return this._renderingOrder;
        }, function(t) {
            this._renderingOrder = t, this._sortCamerasByRenderingOrder();
        }), a(0, o, "skyRenderer", function() {
            return this._skyRenderer;
        }), a(0, o, "orthographic", function() {
            return this._orthographic;
        }, function(t) {
            this._orthographic = t, this._calculateProjectionMatrix();
        }), a(0, o, "fieldOfView", function() {
            return this._fieldOfView;
        }, function(t) {
            this._fieldOfView = t, this._calculateProjectionMatrix();
        }), a(0, o, "nearPlane", function() {
            return this._nearPlane;
        }, function(t) {
            this._nearPlane = t, this._calculateProjectionMatrix();
        }), a(0, o, "farPlane", function() {
            return this._farPlane;
        }, function(t) {
            this._farPlane = t, this._calculateProjectionMatrix();
        }), a(0, o, "orthographicVerticalSize", function() {
            return this._orthographicVerticalSize;
        }, function(t) {
            this._orthographicVerticalSize = t, this._calculateProjectionMatrix();
        }), e.RENDERINGTYPE_DEFERREDLIGHTING = "DEFERREDLIGHTING", e.RENDERINGTYPE_FORWARDRENDERING = "FORWARDRENDERING", 
        e.CLEARFLAG_SOLIDCOLOR = 0, e.CLEARFLAG_SKY = 1, e.CLEARFLAG_DEPTHONLY = 2, e.CLEARFLAG_NONE = 3, 
        i(e, [ "_tempMatrix4x40", function() {
            return this._tempMatrix4x40 = new He();
        }, "CAMERAPOS", function() {
            return this.CAMERAPOS = Vt.propertyNameToID("u_CameraPos");
        }, "VIEWMATRIX", function() {
            return this.VIEWMATRIX = Vt.propertyNameToID("u_View");
        }, "PROJECTMATRIX", function() {
            return this.PROJECTMATRIX = Vt.propertyNameToID("u_Projection");
        }, "VIEWPROJECTMATRIX", function() {
            return this.VIEWPROJECTMATRIX = Vt.propertyNameToID("u_ViewProjection");
        }, "VPMATRIX_NO_TRANSLATE", function() {
            return this.VPMATRIX_NO_TRANSLATE = Vt.propertyNameToID("u_MvpMatrix");
        }, "CAMERADIRECTION", function() {
            return this.CAMERADIRECTION = Vt.propertyNameToID("u_CameraDirection");
        }, "CAMERAUP", function() {
            return this.CAMERAUP = Vt.propertyNameToID("u_CameraUp");
        }, "_invertYScaleMatrix", function() {
            return this._invertYScaleMatrix = new He(1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
        }, "_invertYProjectionMatrix", function() {
            return this._invertYProjectionMatrix = new He();
        }, "_invertYProjectionViewMatrix", function() {
            return this._invertYProjectionViewMatrix = new He();
        } ]), e;
    }(Fn), oi = function(t) {
        function e() {
            this._albedoColor = null, this._emissionColor = null, e.__super.call(this), this.setShaderName("PBRStandard"), 
            this._albedoColor = new mt(1, 1, 1, 1), this._shaderValues.setVector(e.ALBEDOCOLOR, new mt(1, 1, 1, 1)), 
            this._emissionColor = new mt(0, 0, 0, 0), this._shaderValues.setVector(e.EMISSIONCOLOR, new mt(0, 0, 0, 0)), 
            this._shaderValues.setNumber(e.METALLIC, 0), this._shaderValues.setNumber(e.SMOOTHNESS, .5), 
            this._shaderValues.setNumber(e.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber(e.SMOOTHNESSSOURCE, 0), 
            this._shaderValues.setNumber(e.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber(e.NORMALSCALE, 1), 
            this._shaderValues.setNumber(e.PARALLAXSCALE, .001), this._shaderValues.setBool(e.ENABLEEMISSION, !1), 
            this._shaderValues.setBool(e.ENABLEREFLECT, !0), this._shaderValues.setNumber(Bn.ALPHATESTVALUE, .5), 
            this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_REFLECTMAP), this.renderMode = 0;
        }
        r(e, "laya.d3.core.material.PBRStandardMaterial", t);
        var n = e.prototype;
        return n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            this._albedoColor.cloneTo(n._albedoColor), this._emissionColor.cloneTo(n._emissionColor);
        }, a(0, n, "_Parallax", function() {
            return this._shaderValues.getNumber(e.PARALLAXSCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.PARALLAXSCALE, t);
        }), a(0, n, "_ColorB", function() {
            return this._albedoColor.z;
        }, function(t) {
            this._albedoColor.z = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.x;
        }, function(t) {
            this._albedoColor.x = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.y;
        }, function(t) {
            this._albedoColor.y = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "metallic", function() {
            return this._Metallic;
        }, function(t) {
            this._Metallic = Math.max(0, Math.min(1, t));
        }), a(0, n, "_GlossMapScale", function() {
            return this._shaderValues.getNumber(e.SMOOTHNESSSCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.SMOOTHNESSSCALE, t);
        }), a(0, n, "_Glossiness", function() {
            return this._shaderValues.getNumber(e.SMOOTHNESS);
        }, function(t) {
            this._shaderValues.setNumber(e.SMOOTHNESS, t);
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.w;
        }, function(t) {
            this._albedoColor.w = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "enableReflection", function() {
            return this._shaderValues.getBool(e.ENABLEREFLECT);
        }, function(t) {
            this._shaderValues.setBool(e.ENABLEREFLECT, !0), t ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_REFLECTMAP);
        }), a(0, n, "_Metallic", function() {
            return this._shaderValues.getNumber(e.METALLIC);
        }, function(t) {
            this._shaderValues.setNumber(e.METALLIC, t);
        }), a(0, n, "_BumpScale", function() {
            return this._shaderValues.getNumber(e.NORMALSCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.NORMALSCALE, t);
        }), a(0, n, "_OcclusionStrength", function() {
            return this._shaderValues.getNumber(e.OCCLUSIONSTRENGTH);
        }, function(t) {
            this._shaderValues.setNumber(e.OCCLUSIONSTRENGTH, t);
        }), a(0, n, "_EmissionColorR", function() {
            return this._emissionColor.x;
        }, function(t) {
            this._emissionColor.x = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "_EmissionColorG", function() {
            return this._emissionColor.y;
        }, function(t) {
            this._emissionColor.y = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "_EmissionColorB", function() {
            return this._emissionColor.z;
        }, function(t) {
            this._emissionColor.z = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "_EmissionColorA", function() {
            return this._emissionColor.w;
        }, function(t) {
            this._emissionColor.w = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(t) {
            this._ColorA = t;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(t) {
            this.alphaTestValue = t;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(t) {
            this._ColorR = t;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(t) {
            this._ColorG = t;
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(t) {
            this._ColorB = t;
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(t) {
            this._albedoColor = t, this._shaderValues.setVector(e.ALBEDOCOLOR, t);
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(e.ALBEDOTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(e.ALBEDOTEXTURE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "parallaxTexture", function() {
            return this._shaderValues.getTexture(e.PARALLAXTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_PARALLAXTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_PARALLAXTEXTURE), 
            this._shaderValues.setTexture(e.PARALLAXTEXTURE, t);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(e.NORMALTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(e.NORMALTEXTURE, t);
        }), a(0, n, "emissionColor", function() {
            return this._shaderValues.getVector(e.EMISSIONCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.EMISSIONCOLOR, t);
        }), a(0, n, "parallaxTextureScale", function() {
            return this._Parallax;
        }, function(t) {
            this._Parallax = Math.max(.005, Math.min(.08, t));
        }), a(0, n, "normalTextureScale", function() {
            return this._BumpScale;
        }, function(t) {
            this._BumpScale = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "occlusionTexture", function() {
            return this._shaderValues.getTexture(e.OCCLUSIONTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_OCCLUSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_OCCLUSIONTEXTURE), 
            this._shaderValues.setTexture(e.OCCLUSIONTEXTURE, t);
        }), a(0, n, "occlusionTextureStrength", function() {
            return this._OcclusionStrength;
        }, function(t) {
            this._OcclusionStrength = Math.max(0, Math.min(1, t));
        }), a(0, n, "enableEmission", function() {
            return this._shaderValues.getBool(e.ENABLEEMISSION);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSION) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSION), 
            this._shaderValues.setBool(e.ENABLEEMISSION, t);
        }), a(0, n, "metallicGlossTexture", function() {
            return this._shaderValues.getTexture(e.METALLICGLOSSTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE), 
            this._shaderValues.setTexture(e.METALLICGLOSSTEXTURE, t);
        }), a(0, n, "emissionColorA", function() {
            return this._EmissionColorA;
        }, function(t) {
            this._EmissionColorA = t;
        }), a(0, n, "smoothness", function() {
            return this._Glossiness;
        }, function(t) {
            this._Glossiness = Math.max(0, Math.min(1, t));
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "smoothnessTextureScale", function() {
            return this._GlossMapScale;
        }, function(t) {
            this._GlossMapScale = Math.max(0, Math.min(1, t));
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "smoothnessSource", function() {
            return this._shaderValues.getInt(e.SMOOTHNESSSOURCE);
        }, function(t) {
            t ? (this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(e.SMOOTHNESSSOURCE, 1)) : (this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(e.SMOOTHNESSSOURCE, 0));
        }), a(0, n, "emissionColorR", function() {
            return this._EmissionColorR;
        }, function(t) {
            this._EmissionColorR = t;
        }), a(0, n, "emissionColorG", function() {
            return this._EmissionColorG;
        }, function(t) {
            this._EmissionColorG = t;
        }), a(0, n, "emissionColorB", function() {
            return this._EmissionColorB;
        }, function(t) {
            this._EmissionColorB = t;
        }), a(0, n, "emissionTexture", function() {
            return this._shaderValues.getTexture(e.EMISSIONTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRStandardMaterial.SHADERDEFINE_EMISSIONTEXTURE), 
            this._shaderValues.setTexture(e.EMISSIONTEXTURE, t);
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513, 
                this._defineDatas.remove(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 3:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2, 
                this.blend = 1, this.blendSrc = 1, this.blendDst = 771, this.depthTest = 513, this._defineDatas.add(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              default:
                throw new Error("PBRSpecularMaterial : renderMode value error.");
            }
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_ALBEDOTEXTURE = e.shaderDefines.registerDefine("ALBEDOTEXTURE"), 
            e.SHADERDEFINE_METALLICGLOSSTEXTURE = e.shaderDefines.registerDefine("METALLICGLOSSTEXTURE"), 
            e.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = e.shaderDefines.registerDefine("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"), 
            e.SHADERDEFINE_NORMALTEXTURE = e.shaderDefines.registerDefine("NORMALTEXTURE"), 
            e.SHADERDEFINE_PARALLAXTEXTURE = e.shaderDefines.registerDefine("PARALLAXTEXTURE"), 
            e.SHADERDEFINE_OCCLUSIONTEXTURE = e.shaderDefines.registerDefine("OCCLUSIONTEXTURE"), 
            e.SHADERDEFINE_EMISSION = e.shaderDefines.registerDefine("EMISSION"), e.SHADERDEFINE_EMISSIONTEXTURE = e.shaderDefines.registerDefine("EMISSIONTEXTURE"), 
            e.SHADERDEFINE_REFLECTMAP = e.shaderDefines.registerDefine("REFLECTMAP"), e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET"), 
            e.SHADERDEFINE_ALPHAPREMULTIPLY = e.shaderDefines.registerDefine("ALPHAPREMULTIPLY");
        }, e.SmoothnessSource_MetallicGlossTexture_Alpha = 0, e.SmoothnessSource_AlbedoTexture_Alpha = 1, 
        e.RENDERMODE_OPAQUE = 0, e.RENDERMODE_CUTOUT = 1, e.RENDERMODE_FADE = 2, e.RENDERMODE_TRANSPARENT = 3, 
        e.SHADERDEFINE_ALBEDOTEXTURE = 0, e.SHADERDEFINE_NORMALTEXTURE = 0, e.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = 0, 
        e.SHADERDEFINE_METALLICGLOSSTEXTURE = 0, e.SHADERDEFINE_OCCLUSIONTEXTURE = 0, e.SHADERDEFINE_PARALLAXTEXTURE = 0, 
        e.SHADERDEFINE_EMISSION = 0, e.SHADERDEFINE_EMISSIONTEXTURE = 0, e.SHADERDEFINE_REFLECTMAP = 0, 
        e.SHADERDEFINE_TILINGOFFSET = 0, e.SHADERDEFINE_ALPHAPREMULTIPLY = 0, e.SMOOTHNESSSOURCE = -1, 
        e.ENABLEEMISSION = -1, e.ENABLEREFLECT = -1, i(e, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = Vt.propertyNameToID("u_AlbedoTexture");
        }, "METALLICGLOSSTEXTURE", function() {
            return this.METALLICGLOSSTEXTURE = Vt.propertyNameToID("u_MetallicGlossTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = Vt.propertyNameToID("u_NormalTexture");
        }, "PARALLAXTEXTURE", function() {
            return this.PARALLAXTEXTURE = Vt.propertyNameToID("u_ParallaxTexture");
        }, "OCCLUSIONTEXTURE", function() {
            return this.OCCLUSIONTEXTURE = Vt.propertyNameToID("u_OcclusionTexture");
        }, "EMISSIONTEXTURE", function() {
            return this.EMISSIONTEXTURE = Vt.propertyNameToID("u_EmissionTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = Vt.propertyNameToID("u_AlbedoColor");
        }, "EMISSIONCOLOR", function() {
            return this.EMISSIONCOLOR = Vt.propertyNameToID("u_EmissionColor");
        }, "METALLIC", function() {
            return this.METALLIC = Vt.propertyNameToID("u_metallic");
        }, "SMOOTHNESS", function() {
            return this.SMOOTHNESS = Vt.propertyNameToID("u_smoothness");
        }, "SMOOTHNESSSCALE", function() {
            return this.SMOOTHNESSSCALE = Vt.propertyNameToID("u_smoothnessScale");
        }, "OCCLUSIONSTRENGTH", function() {
            return this.OCCLUSIONSTRENGTH = Vt.propertyNameToID("u_occlusionStrength");
        }, "NORMALSCALE", function() {
            return this.NORMALSCALE = Vt.propertyNameToID("u_normalScale");
        }, "PARALLAXSCALE", function() {
            return this.PARALLAXSCALE = Vt.propertyNameToID("u_parallaxScale");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(Bn), si = function(t) {
        function e() {
            e.__super.call(this), this.setShaderName("PARTICLESHURIKEN"), this._color = new mt(1, 1, 1, 1), 
            this.renderMode = 0;
        }
        r(e, "laya.d3.core.particleShuriKen.ShurikenParticleMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "_TintColorB", function() {
            return this._color.z;
        }, function(t) {
            this._color.z = t, this.color = this._color;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "texture", function() {
            return this._shaderValues.getTexture(e.DIFFUSETEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP), 
            this._shaderValues.setTexture(e.DIFFUSETEXTURE, t);
        }), a(0, n, "_TintColorR", function() {
            return this._color.x;
        }, function(t) {
            this._color.x = t, this.color = this._color;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "_TintColorG", function() {
            return this._color.y;
        }, function(t) {
            this._color.y = t, this.color = this._color;
        }), a(0, n, "_TintColorA", function() {
            return this._color.w;
        }, function(t) {
            this._color.w = t, this.color = this._color;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 1:
                this.renderQueue = 3e3, this.depthWrite = !1, this.cull = 0, this.blend = 1, this.blendSrc = 770, 
                this.blendDst = 1, this.alphaTest = !1, this._defineDatas.add(e.SHADERDEFINE_ADDTIVEFOG);
                break;

              case 0:
                this.renderQueue = 3e3, this.depthWrite = !1, this.cull = 0, this.blend = 1, this.blendSrc = 770, 
                this.blendDst = 771, this.alphaTest = !1, this._defineDatas.remove(e.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("ShurikenParticleMaterial : renderMode value error.");
            }
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "colorR", function() {
            return this._TintColorR;
        }, function(t) {
            this._TintColorR = t;
        }), a(0, n, "colorG", function() {
            return this._TintColorG;
        }, function(t) {
            this._TintColorG = t;
        }), a(0, n, "colorB", function() {
            return this._TintColorB;
        }, function(t) {
            this._TintColorB = t;
        }), a(0, n, "colorA", function() {
            return this._TintColorA;
        }, function(t) {
            this._TintColorA = t;
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(e.TINTCOLOR);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR) : this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR), 
            this._shaderValues.setVector(e.TINTCOLOR, t);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.particleShuriKen.ShurikenParticleMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_DIFFUSEMAP = e.shaderDefines.registerDefine("DIFFUSEMAP"), e.SHADERDEFINE_TINTCOLOR = e.shaderDefines.registerDefine("TINTCOLOR"), 
            e.SHADERDEFINE_ADDTIVEFOG = e.shaderDefines.registerDefine("ADDTIVEFOG"), e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET");
        }, e.RENDERMODE_ALPHABLENDED = 0, e.RENDERMODE_ADDTIVE = 1, e.SHADERDEFINE_DIFFUSEMAP = 0, 
        e.SHADERDEFINE_TINTCOLOR = 0, e.SHADERDEFINE_TILINGOFFSET = 0, e.SHADERDEFINE_ADDTIVEFOG = 0, 
        i(e, [ "DIFFUSETEXTURE", function() {
            return this.DIFFUSETEXTURE = Vt.propertyNameToID("u_texture");
        }, "TINTCOLOR", function() {
            return this.TINTCOLOR = Vt.propertyNameToID("u_Tintcolor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), li = function(t) {
        function e() {
            this._color = null, e.__super.call(this), this.setShaderName("Effect"), this._color = new mt(1, 1, 1, 1), 
            this._shaderValues.setVector(e.TINTCOLOR, new mt(1, 1, 1, 1)), this.renderMode = 0;
        }
        r(e, "laya.d3.core.material.EffectMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "_TintColorB", function() {
            return this._color.z;
        }, function(t) {
            this._color.z = t, this.color = this._color;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "texture", function() {
            return this._shaderValues.getTexture(e.MAINTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.EffectMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(e.MAINTEXTURE, t);
        }), a(0, n, "_TintColorR", function() {
            return this._color.x;
        }, function(t) {
            this._color.x = t, this.color = this._color;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "_TintColorG", function() {
            return this._color.y;
        }, function(t) {
            this._color.y = t, this.color = this._color;
        }), a(0, n, "_TintColorA", function() {
            return this._color.w;
        }, function(t) {
            this._color.w = t, this.color = this._color;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 0:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 1, this.depthTest = 513, this._defineDatas.add(e.SHADERDEFINE_ADDTIVEFOG);
                break;

              case 1:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 0, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513, 
                this._defineDatas.remove(e.SHADERDEFINE_ADDTIVEFOG);
                break;

              default:
                throw new Error("MeshEffectMaterial : renderMode value error.");
            }
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "colorR", function() {
            return this._TintColorR;
        }, function(t) {
            this._TintColorR = t;
        }), a(0, n, "colorG", function() {
            return this._TintColorG;
        }, function(t) {
            this._TintColorG = t;
        }), a(0, n, "colorB", function() {
            return this._TintColorB;
        }, function(t) {
            this._TintColorB = t;
        }), a(0, n, "colorA", function() {
            return this._TintColorA;
        }, function(t) {
            this._TintColorA = t;
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "color", function() {
            return this._shaderValues.getVector(e.TINTCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.TINTCOLOR, t);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.material.EffectMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_MAINTEXTURE = e.shaderDefines.registerDefine("MAINTEXTURE"), e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET"), 
            e.SHADERDEFINE_ADDTIVEFOG = e.shaderDefines.registerDefine("ADDTIVEFOG");
        }, e.RENDERMODE_ADDTIVE = 0, e.RENDERMODE_ALPHABLENDED = 1, e.SHADERDEFINE_MAINTEXTURE = 0, 
        e.SHADERDEFINE_TILINGOFFSET = 0, e.SHADERDEFINE_ADDTIVEFOG = 0, i(e, [ "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "MAINTEXTURE", function() {
            return this.MAINTEXTURE = Vt.propertyNameToID("u_AlbedoTexture");
        }, "TINTCOLOR", function() {
            return this.TINTCOLOR = Vt.propertyNameToID("u_AlbedoColor");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), hi = function(t) {
        function e() {
            e.__super.call(this), this.setShaderName("WaterPrimary"), this._shaderValues.setVector(e.HORIZONCOLOR, new mt(.172, .463, .435, 0)), 
            this._shaderValues.setNumber(e.WAVESCALE, .15), this._shaderValues.setVector(e.WAVESPEED, new mt(19, 9, -16, -7));
        }
        r(e, "laya.d3.core.material.WaterPrimaryMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "waveSpeed", function() {
            return this._shaderValues.getVector(e.WAVESPEED);
        }, function(t) {
            this._shaderValues.setVector(e.WAVESPEED, t);
        }), a(0, n, "horizonColor", function() {
            return this._shaderValues.getVector(e.HORIZONCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.HORIZONCOLOR, t);
        }), a(0, n, "mainTexture", function() {
            return this._shaderValues.getTexture(e.MAINTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE) : this._defineDatas.remove(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_MAINTEXTURE), 
            this._shaderValues.setTexture(e.MAINTEXTURE, t);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(e.NORMALTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.WaterPrimaryMaterial.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(e.NORMALTEXTURE, t);
        }), a(0, n, "waveScale", function() {
            return this._shaderValues.getNumber(e.WAVESCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.WAVESCALE, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_MAINTEXTURE = e.shaderDefines.registerDefine("MAINTEXTURE"), e.SHADERDEFINE_NORMALTEXTURE = e.shaderDefines.registerDefine("NORMALTEXTURE");
        }, e.SHADERDEFINE_MAINTEXTURE = 0, e.SHADERDEFINE_NORMALTEXTURE = 0, i(e, [ "HORIZONCOLOR", function() {
            return this.HORIZONCOLOR = Vt.propertyNameToID("u_HorizonColor");
        }, "MAINTEXTURE", function() {
            return this.MAINTEXTURE = Vt.propertyNameToID("u_MainTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = Vt.propertyNameToID("u_NormalTexture");
        }, "WAVESCALE", function() {
            return this.WAVESCALE = Vt.propertyNameToID("u_WaveScale");
        }, "WAVESPEED", function() {
            return this.WAVESPEED = Vt.propertyNameToID("u_WaveSpeed");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), ui = function(t) {
        function e() {
            this._enableLighting = !0, e.__super.call(this), this.setShaderName("ExtendTerrain"), 
            this.renderMode = 1;
        }
        r(e, "laya.d3.core.material.ExtendTerrainMaterial", Bn);
        var n = e.prototype;
        return n._setDetailNum = function(t) {
            switch (t) {
              case 1:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 2:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 3:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 4:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);
                break;

              case 5:
                this._defineDatas.add(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
            }
        }, a(0, n, "diffuseScaleOffset2", null, function(t) {
            this._shaderValues.setVector(e.DIFFUSESCALEOFFSET2, t);
        }), a(0, n, "splatAlphaTexture", function() {
            return this._shaderValues.getTexture(e.SPLATALPHATEXTURE);
        }, function(t) {
            this._shaderValues.setTexture(e.SPLATALPHATEXTURE, t);
        }), a(0, n, "diffuseScaleOffset3", null, function(t) {
            this._shaderValues.setVector(e.DIFFUSESCALEOFFSET3, t);
        }), a(0, n, "diffuseTexture1", null, function(t) {
            this._shaderValues.setTexture(e.DIFFUSETEXTURE1, t), this._setDetailNum(1);
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 1:
                this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, this.blend = 0, this.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 2e3, this.depthWrite = !1, this.cull = 2, this.blend = 1, this.blendSrc = 770, 
                this.blendDst = 771, this.depthTest = 515;
                break;

              default:
                throw new Error("ExtendTerrainMaterial:renderMode value error.");
            }
        }), a(0, n, "diffuseTexture2", function() {
            return this._shaderValues.getTexture(e.DIFFUSETEXTURE2);
        }, function(t) {
            this._shaderValues.setTexture(e.DIFFUSETEXTURE2, t), this._setDetailNum(2);
        }), a(0, n, "diffuseScaleOffset1", null, function(t) {
            this._shaderValues.setVector(e.DIFFUSESCALEOFFSET1, t);
        }), a(0, n, "diffuseTexture3", function() {
            return this._shaderValues.getTexture(e.DIFFUSETEXTURE3);
        }, function(t) {
            this._shaderValues.setTexture(e.DIFFUSETEXTURE3, t), this._setDetailNum(3);
        }), a(0, n, "diffuseTexture4", function() {
            return this._shaderValues.getTexture(e.DIFFUSETEXTURE4);
        }, function(t) {
            this._shaderValues.setTexture(e.DIFFUSETEXTURE4, t), this._setDetailNum(4);
        }), a(0, n, "diffuseTexture5", function() {
            return this._shaderValues.getTexture(e.DIFFUSETEXTURE5);
        }, function(t) {
            this._shaderValues.setTexture(e.DIFFUSETEXTURE5, t), this._setDetailNum(5);
        }), a(0, n, "diffuseScaleOffset4", null, function(t) {
            this._shaderValues.setVector(e.DIFFUSESCALEOFFSET4, t);
        }), a(0, n, "diffuseScaleOffset5", null, function(t) {
            this._shaderValues.setVector(e.DIFFUSESCALEOFFSET5, t);
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "enableLighting", function() {
            return this._enableLighting;
        }, function(t) {
            this._enableLighting !== t && (t ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT), 
            this._enableLighting = t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_DETAIL_NUM1 = e.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM1"), 
            e.SHADERDEFINE_DETAIL_NUM2 = e.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM2"), 
            e.SHADERDEFINE_DETAIL_NUM3 = e.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM3"), 
            e.SHADERDEFINE_DETAIL_NUM4 = e.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM4"), 
            e.SHADERDEFINE_DETAIL_NUM5 = e.shaderDefines.registerDefine("ExtendTerrain_DETAIL_NUM5");
        }, e.RENDERMODE_OPAQUE = 1, e.RENDERMODE_TRANSPARENT = 2, e.SHADERDEFINE_DETAIL_NUM1 = 0, 
        e.SHADERDEFINE_DETAIL_NUM2 = 0, e.SHADERDEFINE_DETAIL_NUM3 = 0, e.SHADERDEFINE_DETAIL_NUM4 = 0, 
        e.SHADERDEFINE_DETAIL_NUM5 = 0, i(e, [ "SPLATALPHATEXTURE", function() {
            return this.SPLATALPHATEXTURE = Vt.propertyNameToID("u_SplatAlphaTexture");
        }, "DIFFUSETEXTURE1", function() {
            return this.DIFFUSETEXTURE1 = Vt.propertyNameToID("u_DiffuseTexture1");
        }, "DIFFUSETEXTURE2", function() {
            return this.DIFFUSETEXTURE2 = Vt.propertyNameToID("u_DiffuseTexture2");
        }, "DIFFUSETEXTURE3", function() {
            return this.DIFFUSETEXTURE3 = Vt.propertyNameToID("u_DiffuseTexture3");
        }, "DIFFUSETEXTURE4", function() {
            return this.DIFFUSETEXTURE4 = Vt.propertyNameToID("u_DiffuseTexture4");
        }, "DIFFUSETEXTURE5", function() {
            return this.DIFFUSETEXTURE5 = Vt.propertyNameToID("u_DiffuseTexture5");
        }, "DIFFUSESCALEOFFSET1", function() {
            return this.DIFFUSESCALEOFFSET1 = Vt.propertyNameToID("u_DiffuseScaleOffset1");
        }, "DIFFUSESCALEOFFSET2", function() {
            return this.DIFFUSESCALEOFFSET2 = Vt.propertyNameToID("u_DiffuseScaleOffset2");
        }, "DIFFUSESCALEOFFSET3", function() {
            return this.DIFFUSESCALEOFFSET3 = Vt.propertyNameToID("u_DiffuseScaleOffset3");
        }, "DIFFUSESCALEOFFSET4", function() {
            return this.DIFFUSESCALEOFFSET4 = Vt.propertyNameToID("u_DiffuseScaleOffset4");
        }, "DIFFUSESCALEOFFSET5", function() {
            return this.DIFFUSESCALEOFFSET5 = Vt.propertyNameToID("u_DiffuseScaleOffset5");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(), ci = function(t) {
        function e() {
            this._enableVertexColor = !1, e.__super.call(this), this.setShaderName("BLINNPHONG"), 
            this._albedoIntensity = 1, this._albedoColor = new mt(1, 1, 1, 1);
            var t = this._shaderValues;
            t.setVector(e.ALBEDOCOLOR, new mt(1, 1, 1, 1)), t.setVector(e.MATERIALSPECULAR, new mt(1, 1, 1, 1)), 
            t.setNumber(e.SHININESS, .078125), t.setNumber(Bn.ALPHATESTVALUE, .5), t.setVector(e.TILINGOFFSET, new mt(1, 1, 0, 0)), 
            this._enableLighting = !0, this.renderMode = 0;
        }
        r(e, "laya.d3.core.material.BlinnPhongMaterial", t);
        var n = e.prototype;
        return n.disableFog = function() {
            this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_FOG);
        }, n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            n._enableLighting = this._enableLighting, n._albedoIntensity = this._albedoIntensity, 
            n._enableVertexColor = this._enableVertexColor, this._albedoColor.cloneTo(n._albedoColor);
        }, a(0, n, "_SpecColorG", function() {
            return this._shaderValues.getVector(e.MATERIALSPECULAR).y;
        }, function(t) {
            this._shaderValues.getVector(e.MATERIALSPECULAR).y = t;
        }), a(0, n, "_ColorB", function() {
            return this._albedoColor.z;
        }, function(t) {
            this._albedoColor.z = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.x;
        }, function(t) {
            this._albedoColor.x = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(t) {
            this._ColorA = t;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "_SpecColorB", function() {
            return this._shaderValues.getVector(e.MATERIALSPECULAR).z;
        }, function(t) {
            this._shaderValues.getVector(e.MATERIALSPECULAR).z = t;
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513;
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513;
                break;

              default:
                throw new Error("Material:renderMode value error.");
            }
        }), a(0, n, "_SpecColorR", function() {
            return this._shaderValues.getVector(e.MATERIALSPECULAR).x;
        }, function(t) {
            this._shaderValues.getVector(e.MATERIALSPECULAR).x = t;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.y;
        }, function(t) {
            this._albedoColor.y = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.w;
        }, function(t) {
            this._albedoColor.w = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "specularColor", function() {
            return this._shaderValues.getVector(e.MATERIALSPECULAR);
        }, function(t) {
            this._shaderValues.setVector(e.MATERIALSPECULAR, t);
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(t) {
            this._ColorB = t;
        }), a(0, n, "_SpecColorA", function() {
            return this._shaderValues.getVector(e.MATERIALSPECULAR).w;
        }, function(t) {
            this._shaderValues.getVector(e.MATERIALSPECULAR).w = t;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "_AlbedoIntensity", function() {
            return this._albedoIntensity;
        }, function(t) {
            if (this._albedoIntensity !== t) {
                var n = this._shaderValues.getVector(e.ALBEDOCOLOR);
                mt.scale(this._albedoColor, t, n), this._albedoIntensity = t, this._shaderValues.setVector(e.ALBEDOCOLOR, n);
            }
        }), a(0, n, "specularColorA", function() {
            return this._SpecColorA;
        }, function(t) {
            this._SpecColorA = t;
        }), a(0, n, "_Shininess", function() {
            return this._shaderValues.getNumber(e.SHININESS);
        }, function(t) {
            t = Math.max(0, Math.min(1, t)), this._shaderValues.setNumber(e.SHININESS, t);
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(t) {
            this.alphaTestValue = t;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(e.ALBEDOTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP), 
            this._shaderValues.setTexture(e.ALBEDOTEXTURE, t);
        }), a(0, n, "enableVertexColor", function() {
            return this._enableVertexColor;
        }, function(t) {
            this._enableVertexColor = t, t ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR);
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(t) {
            var n = this._shaderValues.getVector(e.ALBEDOCOLOR);
            mt.scale(t, this._albedoIntensity, n), this._albedoColor = t, this._shaderValues.setVector(e.ALBEDOCOLOR, n);
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "enableLighting", function() {
            return this._enableLighting;
        }, function(t) {
            this._enableLighting !== t && (t ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT), 
            this._enableLighting = t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(t) {
            this._ColorR = t;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(t) {
            this._ColorG = t;
        }), a(0, n, "albedoIntensity", function() {
            return this._albedoIntensity;
        }, function(t) {
            this._AlbedoIntensity = t;
        }), a(0, n, "specularColorR", function() {
            return this._SpecColorR;
        }, function(t) {
            this._SpecColorR = t;
        }), a(0, n, "specularColorG", function() {
            return this._SpecColorG;
        }, function(t) {
            this._SpecColorG = t;
        }), a(0, n, "specularColorB", function() {
            return this._SpecColorB;
        }, function(t) {
            this._SpecColorB = t;
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "shininess", function() {
            return this._Shininess;
        }, function(t) {
            this._Shininess = t;
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(e.NORMALTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_NORMALMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_NORMALMAP), 
            this._shaderValues.setTexture(e.NORMALTEXTURE, t);
        }), a(0, n, "specularTexture", function() {
            return this._shaderValues.getTexture(e.SPECULARTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP) : this._defineDatas.remove(laya.d3.core.material.BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP), 
            this._shaderValues.setTexture(e.SPECULARTEXTURE, t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_DIFFUSEMAP = e.shaderDefines.registerDefine("DIFFUSEMAP"), e.SHADERDEFINE_NORMALMAP = e.shaderDefines.registerDefine("NORMALMAP"), 
            e.SHADERDEFINE_SPECULARMAP = e.shaderDefines.registerDefine("SPECULARMAP"), e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET"), 
            e.SHADERDEFINE_ENABLEVERTEXCOLOR = e.shaderDefines.registerDefine("ENABLEVERTEXCOLOR");
        }, e.SPECULARSOURCE_DIFFUSEMAPALPHA = 0, e.SPECULARSOURCE_SPECULARMAP = 0, e.RENDERMODE_OPAQUE = 0, 
        e.RENDERMODE_CUTOUT = 1, e.RENDERMODE_TRANSPARENT = 2, e.SHADERDEFINE_DIFFUSEMAP = 0, 
        e.SHADERDEFINE_NORMALMAP = 0, e.SHADERDEFINE_SPECULARMAP = 0, e.SHADERDEFINE_TILINGOFFSET = 0, 
        e.SHADERDEFINE_ENABLEVERTEXCOLOR = 0, i(e, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = Vt.propertyNameToID("u_DiffuseTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = Vt.propertyNameToID("u_NormalTexture");
        }, "SPECULARTEXTURE", function() {
            return this.SPECULARTEXTURE = Vt.propertyNameToID("u_SpecularTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = Vt.propertyNameToID("u_DiffuseColor");
        }, "MATERIALSPECULAR", function() {
            return this.MATERIALSPECULAR = Vt.propertyNameToID("u_MaterialSpecular");
        }, "SHININESS", function() {
            return this.SHININESS = Vt.propertyNameToID("u_Shininess");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(Bn), _i = function(t) {
        function e() {
            this._diffuseScale1 = null, this._diffuseScale2 = null, this._diffuseScale3 = null, 
            this._diffuseScale4 = null, e.__super.call(this), this.setShaderName("Terrain"), 
            this.renderMode = 1, this._diffuseScale1 = new Et(), this._diffuseScale2 = new Et(), 
            this._diffuseScale3 = new Et(), this._diffuseScale4 = new Et(), this.ambientColor = new Tt(.6, .6, .6), 
            this.diffuseColor = new Tt(1, 1, 1), this.specularColor = new mt(.2, .2, .2, 32);
        }
        r(e, "laya.d3.core.material.TerrainMaterial", t);
        var n = e.prototype;
        return n.setDiffuseScale1 = function(t, e) {
            this._diffuseScale1.x = t, this._diffuseScale1.y = e, this._shaderValues.setVector2(6, this._diffuseScale1);
        }, n.setDiffuseScale2 = function(t, e) {
            this._diffuseScale2.x = t, this._diffuseScale2.y = e, this._shaderValues.setVector2(7, this._diffuseScale2);
        }, n.setDiffuseScale3 = function(t, e) {
            this._diffuseScale3.x = t, this._diffuseScale3.y = e, this._shaderValues.setVector2(8, this._diffuseScale3);
        }, n.setDiffuseScale4 = function(t, e) {
            this._diffuseScale4.x = t, this._diffuseScale4.y = e, this._shaderValues.setVector2(9, this._diffuseScale4);
        }, n.setDetailNum = function(t) {
            switch (t) {
              case 1:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                break;

              case 2:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                break;

              case 3:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4);
                break;

              case 4:
                this._defineDatas.add(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM4), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM1), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM2), 
                this._defineDatas.remove(laya.d3.core.material.TerrainMaterial.SHADERDEFINE_DETAIL_NUM3);
            }
        }, n.disableLight = function() {
            this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_POINTLIGHT | Qn.SHADERDEFINE_SPOTLIGHT | Qn.SHADERDEFINE_DIRECTIONLIGHT);
        }, n.setShaderName = function(e) {
            t.prototype.setShaderName.call(this, e);
        }, a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 1:
                this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, this.blend = 0, this.depthTest = 513;
                break;

              case 2:
                this.renderQueue = 2e3, this.depthWrite = !1, this.cull = 2, this.blend = 1, this.blendSrc = 770, 
                this.blendDst = 771, this.depthTest = 515;
                break;

              default:
                throw new Error("TerrainMaterial:renderMode value error.");
            }
        }), a(0, n, "diffuseTexture2", function() {
            return this._shaderValues.getTexture(3);
        }, function(t) {
            this._shaderValues.setTexture(3, t);
        }), a(0, n, "ambientColor", function() {
            return this._shaderValues.getVector(10);
        }, function(t) {
            this._shaderValues.setVector3(10, t);
        }), a(0, n, "diffuseTexture4", function() {
            return this._shaderValues.getTexture(5);
        }, function(t) {
            this._shaderValues.setTexture(5, t);
        }), a(0, n, "diffuseColor", function() {
            return this._shaderValues.getVector(11);
        }, function(t) {
            this._shaderValues.setVector3(11, t);
        }), a(0, n, "diffuseTexture1", function() {
            return this._shaderValues.getTexture(2);
        }, function(t) {
            this._shaderValues.setTexture(2, t);
        }), a(0, n, "specularColor", function() {
            return this._shaderValues.getVector(12);
        }, function(t) {
            this._shaderValues.setVector(12, t);
        }), a(0, n, "diffuseTexture3", function() {
            return this._shaderValues.getTexture(4);
        }, function(t) {
            this._shaderValues.setTexture(4, t);
        }), a(0, n, "splatAlphaTexture", function() {
            return this._shaderValues.getTexture(0);
        }, function(t) {
            this._shaderValues.setTexture(0, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(1);
        }, function(t) {
            this._shaderValues.setTexture(1, t);
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_DETAIL_NUM1 = e.shaderDefines.registerDefine("DETAIL_NUM1"), e.SHADERDEFINE_DETAIL_NUM2 = e.shaderDefines.registerDefine("DETAIL_NUM2"), 
            e.SHADERDEFINE_DETAIL_NUM4 = e.shaderDefines.registerDefine("DETAIL_NUM4"), e.SHADERDEFINE_DETAIL_NUM3 = e.shaderDefines.registerDefine("DETAIL_NUM3");
        }, e.RENDERMODE_OPAQUE = 1, e.RENDERMODE_TRANSPARENT = 2, e.SPLATALPHATEXTURE = 0, 
        e.NORMALTEXTURE = 1, e.DIFFUSETEXTURE1 = 2, e.DIFFUSETEXTURE2 = 3, e.DIFFUSETEXTURE3 = 4, 
        e.DIFFUSETEXTURE4 = 5, e.DIFFUSESCALE1 = 6, e.DIFFUSESCALE2 = 7, e.DIFFUSESCALE3 = 8, 
        e.DIFFUSESCALE4 = 9, e.MATERIALAMBIENT = 10, e.MATERIALDIFFUSE = 11, e.MATERIALSPECULAR = 12, 
        e.SHADERDEFINE_DETAIL_NUM1 = 0, e.SHADERDEFINE_DETAIL_NUM2 = 0, e.SHADERDEFINE_DETAIL_NUM3 = 0, 
        e.SHADERDEFINE_DETAIL_NUM4 = 0, i(e, [ "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(Bn), di = function(t) {
        function e() {
            e.__super.call(this), this.setShaderName("SkyBox");
        }
        r(e, "laya.d3.core.material.SkyBoxMaterial", Bn);
        var n = e.prototype;
        return a(0, n, "tintColor", function() {
            return this._shaderValues.getVector(e.TINTCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.TINTCOLOR, t);
        }), a(0, n, "exposure", function() {
            return this._shaderValues.getNumber(e.EXPOSURE);
        }, function(t) {
            this._shaderValues.setNumber(e.EXPOSURE, t);
        }), a(0, n, "rotation", function() {
            return this._shaderValues.getNumber(e.ROTATION);
        }, function(t) {
            this._shaderValues.setNumber(e.ROTATION, t);
        }), a(0, n, "textureCube", function() {
            return this._shaderValues.getTexture(e.TEXTURECUBE);
        }, function(t) {
            this._shaderValues.setTexture(e.TEXTURECUBE, t);
        }), i(e, [ "TINTCOLOR", function() {
            return this.TINTCOLOR = Vt.propertyNameToID("u_TintColor");
        }, "EXPOSURE", function() {
            return this.EXPOSURE = Vt.propertyNameToID("u_Exposure");
        }, "ROTATION", function() {
            return this.ROTATION = Vt.propertyNameToID("u_Rotation");
        }, "TEXTURECUBE", function() {
            return this.TEXTURECUBE = Vt.propertyNameToID("u_CubeTexture");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        } ]), e;
    }(), fi = function(t) {
        function e() {
            this._albedoColor = null, this._specularColor = null, this._emissionColor = null, 
            e.__super.call(this), this.setShaderName("PBRSpecular"), this._albedoColor = new mt(1, 1, 1, 1), 
            this._shaderValues.setVector(e.ALBEDOCOLOR, new mt(1, 1, 1, 1)), this._emissionColor = new mt(0, 0, 0, 0), 
            this._shaderValues.setVector(e.EMISSIONCOLOR, new mt(0, 0, 0, 0)), this._specularColor = new mt(.2, .2, .2, .2), 
            this._shaderValues.setVector(e.SPECULARCOLOR, new mt(.2, .2, .2, .2)), this._shaderValues.setNumber(e.SMOOTHNESS, .5), 
            this._shaderValues.setNumber(e.SMOOTHNESSSCALE, 1), this._shaderValues.setNumber(e.SMOOTHNESSSOURCE, 0), 
            this._shaderValues.setNumber(e.OCCLUSIONSTRENGTH, 1), this._shaderValues.setNumber(e.NORMALSCALE, 1), 
            this._shaderValues.setNumber(e.PARALLAXSCALE, .001), this._shaderValues.setBool(e.ENABLEEMISSION, !1), 
            this._shaderValues.setNumber(Bn.ALPHATESTVALUE, .5), this.renderMode = 0;
        }
        r(e, "laya.d3.core.material.PBRSpecularMaterial", t);
        var n = e.prototype;
        return n.cloneTo = function(e) {
            t.prototype.cloneTo.call(this, e);
            var n = e;
            this._albedoColor.cloneTo(n._albedoColor), this._specularColor.cloneTo(n._specularColor), 
            this._emissionColor.cloneTo(n._emissionColor);
        }, a(0, n, "emissionTexture", function() {
            return this._shaderValues.getTexture(e.EMISSIONTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSIONTEXTURE), 
            this._shaderValues.setTexture(e.EMISSIONTEXTURE, t);
        }), a(0, n, "_SpecColorG", function() {
            return this._specularColor.y;
        }, function(t) {
            this._specularColor.y = t, this.specularColor = this._specularColor;
        }), a(0, n, "_ColorB", function() {
            return this._albedoColor.z;
        }, function(t) {
            this._albedoColor.z = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_ColorR", function() {
            return this._albedoColor.x;
        }, function(t) {
            this._albedoColor.x = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "albedoColorA", function() {
            return this._ColorA;
        }, function(t) {
            this._ColorA = t;
        }), a(0, n, "_MainTex_STX", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).x;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.x = t, this.tilingOffset = n;
        }), a(0, n, "_SpecColorB", function() {
            return this._specularColor.z;
        }, function(t) {
            this._specularColor.z = t, this.specularColor = this._specularColor;
        }), a(0, n, "renderMode", null, function(t) {
            switch (t) {
              case 0:
                this.alphaTest = !1, this.renderQueue = 2e3, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 1:
                this.renderQueue = 2450, this.alphaTest = !0, this.depthWrite = !0, this.cull = 2, 
                this.blend = 0, this.depthTest = 513, this._defineDatas.remove(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 2:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2, 
                this.blend = 1, this.blendSrc = 770, this.blendDst = 771, this.depthTest = 513, 
                this._defineDatas.remove(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              case 3:
                this.renderQueue = 3e3, this.alphaTest = !1, this.depthWrite = !1, this.cull = 2, 
                this.blend = 1, this.blendSrc = 1, this.blendDst = 771, this.depthTest = 513, this._defineDatas.add(e.SHADERDEFINE_ALPHAPREMULTIPLY);
                break;

              default:
                throw new Error("PBRSpecularMaterial : renderMode value error.");
            }
        }), a(0, n, "_SpecColorR", function() {
            return this._specularColor.x;
        }, function(t) {
            this._specularColor.x = t, this.specularColor = this._specularColor;
        }), a(0, n, "_ColorG", function() {
            return this._albedoColor.y;
        }, function(t) {
            this._albedoColor.y = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "_Glossiness", function() {
            return this._shaderValues.getNumber(e.SMOOTHNESS);
        }, function(t) {
            this._shaderValues.setNumber(e.SMOOTHNESS, t);
        }), a(0, n, "_ColorA", function() {
            return this._albedoColor.w;
        }, function(t) {
            this._albedoColor.w = t, this.albedoColor = this._albedoColor;
        }), a(0, n, "specularColor", function() {
            return this._shaderValues.getVector(e.SPECULARCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.SPECULARCOLOR, t);
        }), a(0, n, "albedoColorB", function() {
            return this._ColorB;
        }, function(t) {
            this._ColorB = t;
        }), a(0, n, "_SpecColorA", function() {
            return this._specularColor.w;
        }, function(t) {
            this._specularColor.w = t, this.specularColor = this._specularColor;
        }), a(0, n, "_GlossMapScale", function() {
            return this._shaderValues.getNumber(e.SMOOTHNESSSCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.SMOOTHNESSSCALE, t);
        }), a(0, n, "_BumpScale", function() {
            return this._shaderValues.getNumber(e.NORMALSCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.NORMALSCALE, t);
        }), a(0, n, "_Parallax", function() {
            return this._shaderValues.getNumber(e.PARALLAXSCALE);
        }, function(t) {
            this._shaderValues.setNumber(e.PARALLAXSCALE, t);
        }), a(0, n, "_OcclusionStrength", function() {
            return this._shaderValues.getNumber(e.OCCLUSIONSTRENGTH);
        }, function(t) {
            this._shaderValues.setNumber(e.OCCLUSIONSTRENGTH, t);
        }), a(0, n, "_EmissionColorR", function() {
            return this._emissionColor.x;
        }, function(t) {
            this._emissionColor.x = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "tilingOffset", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET);
        }, function(t) {
            !t || 1 == t.x && 1 == t.y && 0 == t.z && 0 == t.w ? this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET) : this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_TILINGOFFSET), 
            this._shaderValues.setVector(e.TILINGOFFSET, t);
        }), a(0, n, "_EmissionColorG", function() {
            return this._emissionColor.y;
        }, function(t) {
            this._emissionColor.y = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "blendSrc", function() {
            return this._shaderValues.getInt(e.BLEND_SRC);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_SRC, t);
        }), a(0, n, "tilingOffsetW", function() {
            return this._MainTex_STW;
        }, function(t) {
            this._MainTex_STW = t;
        }), a(0, n, "_EmissionColorB", function() {
            return this._emissionColor.z;
        }, function(t) {
            this._emissionColor.z = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "_EmissionColorA", function() {
            return this._emissionColor.w;
        }, function(t) {
            this._emissionColor.w = t, this.emissionColor = this._emissionColor;
        }), a(0, n, "_MainTex_STY", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).y;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.y = t, this.tilingOffset = n;
        }), a(0, n, "_MainTex_STZ", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).z;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.z = t, this.tilingOffset = n;
        }), a(0, n, "_Cutoff", function() {
            return this.alphaTestValue;
        }, function(t) {
            this.alphaTestValue = t;
        }), a(0, n, "_MainTex_STW", function() {
            return this._shaderValues.getVector(e.TILINGOFFSET).w;
        }, function(t) {
            var n = this._shaderValues.getVector(e.TILINGOFFSET);
            n.w = t, this.tilingOffset = n;
        }), a(0, n, "albedoColorR", function() {
            return this._ColorR;
        }, function(t) {
            this._ColorR = t;
        }), a(0, n, "albedoColorG", function() {
            return this._ColorG;
        }, function(t) {
            this._ColorG = t;
        }), a(0, n, "tilingOffsetX", function() {
            return this._MainTex_STX;
        }, function(t) {
            this._MainTex_STX = t;
        }), a(0, n, "albedoColor", function() {
            return this._albedoColor;
        }, function(t) {
            this._albedoColor = t, this._shaderValues.setVector(e.ALBEDOCOLOR, t);
        }), a(0, n, "albedoTexture", function() {
            return this._shaderValues.getTexture(e.ALBEDOTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_ALBEDOTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_ALBEDOTEXTURE), 
            this._shaderValues.setTexture(e.ALBEDOTEXTURE, t);
        }), a(0, n, "cull", function() {
            return this._shaderValues.getInt(e.CULL);
        }, function(t) {
            this._shaderValues.setInt(e.CULL, t);
        }), a(0, n, "parallaxTexture", function() {
            return this._shaderValues.getTexture(e.PARALLAXTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_PARALLAXTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_PARALLAXTEXTURE), 
            this._shaderValues.setTexture(e.PARALLAXTEXTURE, t);
        }), a(0, n, "normalTexture", function() {
            return this._shaderValues.getTexture(e.NORMALTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_NORMALTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_NORMALTEXTURE), 
            this._shaderValues.setTexture(e.NORMALTEXTURE, t);
        }), a(0, n, "emissionColor", function() {
            return this._shaderValues.getVector(e.EMISSIONCOLOR);
        }, function(t) {
            this._shaderValues.setVector(e.EMISSIONCOLOR, t);
        }), a(0, n, "parallaxTextureScale", function() {
            return this._Parallax;
        }, function(t) {
            this._Parallax = Math.max(.005, Math.min(.08, t));
        }), a(0, n, "normalTextureScale", function() {
            return this._BumpScale;
        }, function(t) {
            this._BumpScale = t;
        }), a(0, n, "tilingOffsetZ", function() {
            return this._MainTex_STZ;
        }, function(t) {
            this._MainTex_STZ = t;
        }), a(0, n, "occlusionTexture", function() {
            return this._shaderValues.getTexture(e.OCCLUSIONTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_OCCLUSIONTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_OCCLUSIONTEXTURE), 
            this._shaderValues.setTexture(e.OCCLUSIONTEXTURE, t);
        }), a(0, n, "occlusionTextureStrength", function() {
            return this._OcclusionStrength;
        }, function(t) {
            this._OcclusionStrength = Math.max(0, Math.min(1, t));
        }), a(0, n, "specularTexture", function() {
            return this._shaderValues.getTexture(e.SPECULARTEXTURE);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SPECULARTEXTURE) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SPECULARTEXTURE), 
            this._shaderValues.setTexture(e.SPECULARTEXTURE, t);
        }), a(0, n, "specularColorR", function() {
            return this._SpecColorR;
        }, function(t) {
            this._SpecColorR = t;
        }), a(0, n, "smoothness", function() {
            return this._Glossiness;
        }, function(t) {
            this._Glossiness = Math.max(0, Math.min(1, t));
        }), a(0, n, "specularColorG", function() {
            return this._SpecColorG;
        }, function(t) {
            this._SpecColorG = t;
        }), a(0, n, "specularColorB", function() {
            return this._SpecColorB;
        }, function(t) {
            this._SpecColorB = t;
        }), a(0, n, "specularColorA", function() {
            return this._SpecColorA;
        }, function(t) {
            this._SpecColorA = t;
        }), a(0, n, "blendDst", function() {
            return this._shaderValues.getInt(e.BLEND_DST);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND_DST, t);
        }), a(0, n, "smoothnessTextureScale", function() {
            return this._GlossMapScale;
        }, function(t) {
            this._GlossMapScale = Math.max(0, Math.min(1, t));
        }), a(0, n, "depthWrite", function() {
            return this._shaderValues.getBool(e.DEPTH_WRITE);
        }, function(t) {
            this._shaderValues.setBool(e.DEPTH_WRITE, t);
        }), a(0, n, "smoothnessSource", function() {
            return this._shaderValues.getInt(e.SMOOTHNESSSOURCE);
        }, function(t) {
            t ? (this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(e.SMOOTHNESSSOURCE, 1)) : (this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA), 
            this._shaderValues.setInt(e.SMOOTHNESSSOURCE, 0));
        }), a(0, n, "enableEmission", function() {
            return this._shaderValues.getBool(e.ENABLEEMISSION);
        }, function(t) {
            t ? this._defineDatas.add(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSION) : this._defineDatas.remove(laya.d3.core.material.PBRSpecularMaterial.SHADERDEFINE_EMISSION), 
            this._shaderValues.setBool(e.ENABLEEMISSION, t);
        }), a(0, n, "enableReflection", function() {
            return this._shaderValues.getBool(e.ENABLEREFLECT);
        }, function(t) {
            this._shaderValues.setBool(e.ENABLEREFLECT, !0), t ? this._disablePublicDefineDatas.remove(Qn.SHADERDEFINE_REFLECTMAP) : this._disablePublicDefineDatas.add(Qn.SHADERDEFINE_REFLECTMAP);
        }), a(0, n, "tilingOffsetY", function() {
            return this._MainTex_STY;
        }, function(t) {
            this._MainTex_STY = t;
        }), a(0, n, "blend", function() {
            return this._shaderValues.getInt(e.BLEND);
        }, function(t) {
            this._shaderValues.setInt(e.BLEND, t);
        }), a(0, n, "depthTest", function() {
            return this._shaderValues.getInt(e.DEPTH_TEST);
        }, function(t) {
            this._shaderValues.setInt(e.DEPTH_TEST, t);
        }), e.__init__ = function() {
            e.SHADERDEFINE_ALBEDOTEXTURE = e.shaderDefines.registerDefine("ALBEDOTEXTURE"), 
            e.SHADERDEFINE_SPECULARTEXTURE = e.shaderDefines.registerDefine("SPECULARTEXTURE"), 
            e.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = e.shaderDefines.registerDefine("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"), 
            e.SHADERDEFINE_NORMALTEXTURE = e.shaderDefines.registerDefine("NORMALTEXTURE"), 
            e.SHADERDEFINE_PARALLAXTEXTURE = e.shaderDefines.registerDefine("PARALLAXTEXTURE"), 
            e.SHADERDEFINE_OCCLUSIONTEXTURE = e.shaderDefines.registerDefine("OCCLUSIONTEXTURE"), 
            e.SHADERDEFINE_EMISSION = e.shaderDefines.registerDefine("EMISSION"), e.SHADERDEFINE_EMISSIONTEXTURE = e.shaderDefines.registerDefine("EMISSIONTEXTURE"), 
            e.SHADERDEFINE_TILINGOFFSET = e.shaderDefines.registerDefine("TILINGOFFSET"), e.SHADERDEFINE_ALPHAPREMULTIPLY = e.shaderDefines.registerDefine("ALPHAPREMULTIPLY");
        }, e.SmoothnessSource_SpecularTexture_Alpha = 0, e.SmoothnessSource_AlbedoTexture_Alpha = 1, 
        e.RENDERMODE_OPAQUE = 0, e.RENDERMODE_CUTOUT = 1, e.RENDERMODE_FADE = 2, e.RENDERMODE_TRANSPARENT = 3, 
        e.SHADERDEFINE_ALBEDOTEXTURE = 0, e.SHADERDEFINE_NORMALTEXTURE = 0, e.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA = 0, 
        e.SHADERDEFINE_SPECULARTEXTURE = 0, e.SHADERDEFINE_OCCLUSIONTEXTURE = 0, e.SHADERDEFINE_PARALLAXTEXTURE = 0, 
        e.SHADERDEFINE_EMISSION = 0, e.SHADERDEFINE_EMISSIONTEXTURE = 0, e.SHADERDEFINE_TILINGOFFSET = 0, 
        e.SHADERDEFINE_ALPHAPREMULTIPLY = 0, e.SMOOTHNESSSOURCE = -1, e.ENABLEEMISSION = -1, 
        e.ENABLEREFLECT = -1, i(e, [ "ALBEDOTEXTURE", function() {
            return this.ALBEDOTEXTURE = Vt.propertyNameToID("u_AlbedoTexture");
        }, "SPECULARTEXTURE", function() {
            return this.SPECULARTEXTURE = Vt.propertyNameToID("u_SpecularTexture");
        }, "NORMALTEXTURE", function() {
            return this.NORMALTEXTURE = Vt.propertyNameToID("u_NormalTexture");
        }, "PARALLAXTEXTURE", function() {
            return this.PARALLAXTEXTURE = Vt.propertyNameToID("u_ParallaxTexture");
        }, "OCCLUSIONTEXTURE", function() {
            return this.OCCLUSIONTEXTURE = Vt.propertyNameToID("u_OcclusionTexture");
        }, "EMISSIONTEXTURE", function() {
            return this.EMISSIONTEXTURE = Vt.propertyNameToID("u_EmissionTexture");
        }, "ALBEDOCOLOR", function() {
            return this.ALBEDOCOLOR = Vt.propertyNameToID("u_AlbedoColor");
        }, "SPECULARCOLOR", function() {
            return this.SPECULARCOLOR = Vt.propertyNameToID("u_SpecularColor");
        }, "EMISSIONCOLOR", function() {
            return this.EMISSIONCOLOR = Vt.propertyNameToID("u_EmissionColor");
        }, "SMOOTHNESS", function() {
            return this.SMOOTHNESS = Vt.propertyNameToID("u_smoothness");
        }, "SMOOTHNESSSCALE", function() {
            return this.SMOOTHNESSSCALE = Vt.propertyNameToID("u_smoothnessScale");
        }, "OCCLUSIONSTRENGTH", function() {
            return this.OCCLUSIONSTRENGTH = Vt.propertyNameToID("u_occlusionStrength");
        }, "NORMALSCALE", function() {
            return this.NORMALSCALE = Vt.propertyNameToID("u_normalScale");
        }, "PARALLAXSCALE", function() {
            return this.PARALLAXSCALE = Vt.propertyNameToID("u_parallaxScale");
        }, "TILINGOFFSET", function() {
            return this.TILINGOFFSET = Vt.propertyNameToID("u_TilingOffset");
        }, "CULL", function() {
            return this.CULL = Vt.propertyNameToID("s_Cull");
        }, "BLEND", function() {
            return this.BLEND = Vt.propertyNameToID("s_Blend");
        }, "BLEND_SRC", function() {
            return this.BLEND_SRC = Vt.propertyNameToID("s_BlendSrc");
        }, "BLEND_DST", function() {
            return this.BLEND_DST = Vt.propertyNameToID("s_BlendDst");
        }, "DEPTH_TEST", function() {
            return this.DEPTH_TEST = Vt.propertyNameToID("s_DepthTest");
        }, "DEPTH_WRITE", function() {
            return this.DEPTH_WRITE = Vt.propertyNameToID("s_DepthWrite");
        }, "defaultMaterial", function() {
            return this.defaultMaterial = new e();
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Bn.shaderDefines);
        } ]), e;
    }(Bn), mi = (function(e) {
        function n(t, e) {
            this._isKinematic = !1, this._mass = 1, this._angularDamping = 0, this._linearDamping = 0, 
            this._overrideGravity = !1, this._detectCollisions = !0, this._gravity = new Tt(0, -10, 0), 
            this._totalTorque = new Tt(0, 0, 0), this._linearVelocity = new Tt(), this._angularVelocity = new Tt(), 
            this._linearFactor = new Tt(1, 1, 1), this._angularFactor = new Tt(1, 1, 1), void 0 === t && (t = 1), 
            void 0 === e && (e = Ue.COLLISIONFILTERGROUP_ALLFILTER), n.__super.call(this, t, e);
        }
        r(n, "laya.d3.physics.Rigidbody3D", e);
        var o = n.prototype;
        o._updateMass = function(t) {
            this._nativeColliderObject && this._colliderShape && (this._colliderShape._nativeShape.calculateLocalInertia(t, n._nativeInertia), 
            this._nativeColliderObject.setMassProps(t, n._nativeInertia), this._nativeColliderObject.updateInertiaTensor());
        }, o._delegateMotionStateGetWorldTransform = function(t) {}, o._delegateMotionStateSetWorldTransform = function(t) {
            var e = this._rigidbody;
            e._simulation._updatedRigidbodies++;
            var n = W._physics3D, i = n.wrapPointer(t, n.btTransform);
            e._updateTransformComponent(i);
        }, o._delegateMotionStateGetWorldTransformNative = function(t, e) {}, o._delegateMotionStateSetWorldTransformNative = function(t, e) {
            var n = t;
            n._simulation._updatedRigidbodies++;
            var i = W._physics3D, r = i.wrapPointer(e, i.btTransform);
            n._updateTransformComponent(r);
        }, o._onScaleChange = function(t) {
            laya.d3.physics.PhysicsComponent.prototype._onScaleChange.call(this, t), this._updateMass(this._isKinematic ? 0 : this._mass);
        }, o._delegateMotionStateClear = function() {
            this._rigidbody = null;
        }, o._onAdded = function() {
            var i = W._physics3D, r = new i.LayaMotionState();
            null != t.conch && i.LayaMotionState.prototype.setRigidbody ? (r.setRigidbody(this), 
            r.setNativeGetWorldTransform(this._delegateMotionStateGetWorldTransformNative), 
            r.setNativeSetWorldTransform(this._delegateMotionStateSetWorldTransformNative)) : (r.getWorldTransform = this._delegateMotionStateGetWorldTransform, 
            r.setWorldTransform = this._delegateMotionStateSetWorldTransform), r.clear = this._delegateMotionStateClear, 
            r._rigidbody = this, this._nativeMotionState = r;
            var a = new i.btRigidBodyConstructionInfo(0, r, null, n._nativeVector3Zero), o = new i.btRigidBody(a);
            o.setUserIndex(this.id), this._nativeColliderObject = o, e.prototype._onAdded.call(this), 
            this.mass = this._mass, this.linearFactor = this._linearFactor, this.angularFactor = this._angularFactor, 
            this.linearDamping = this._linearDamping, this.angularDamping = this._angularDamping, 
            this.overrideGravity = this._overrideGravity, this.gravity = this._gravity, this.isKinematic = this._isKinematic, 
            i.destroy(a);
        }, o._onShapeChange = function(t) {
            laya.d3.physics.PhysicsComponent.prototype._onShapeChange.call(this, t), this._isKinematic ? this._updateMass(0) : (this._nativeColliderObject.setCenterOfMassTransform(this._nativeColliderObject.getWorldTransform()), 
            this._updateMass(this._mass));
        }, o._parse = function(t) {
            null != t.friction && (this.friction = t.friction), null != t.rollingFriction && (this.rollingFriction = t.rollingFriction), 
            null != t.restitution && (this.restitution = t.restitution), null != t.isTrigger && (this.isTrigger = t.isTrigger), 
            null != t.mass && (this.mass = t.mass), null != t.isKinematic && (this.isKinematic = t.isKinematic), 
            null != t.linearDamping && (this.linearDamping = t.linearDamping), null != t.angularDamping && (this.angularDamping = t.angularDamping), 
            null != t.overrideGravity && (this.overrideGravity = t.overrideGravity), t.gravity && (this.gravity.fromArray(t.gravity), 
            this.gravity = this.gravity), laya.d3.physics.PhysicsComponent.prototype._parse.call(this, t), 
            this._parseShape(t.shapes);
        }, o._onDestroy = function() {
            var t = W._physics3D;
            this._nativeMotionState.clear(), t.destroy(this._nativeMotionState), laya.d3.physics.PhysicsComponent.prototype._onDestroy.call(this), 
            this._nativeMotionState = null, this._gravity = null, this._totalTorque = null, 
            this._linearVelocity = null, this._angularVelocity = null, this._linearFactor = null, 
            this._angularFactor = null;
        }, o._addToSimulation = function() {
            this._simulation._addRigidBody(this, this._collisionGroup, this._detectCollisions ? this._canCollideWith : 0);
        }, o._removeFromSimulation = function() {
            this._simulation._removeRigidBody(this);
        }, o._cloneTo = function(t) {
            e.prototype._cloneTo.call(this, t);
            var n = t;
            n.isKinematic = this._isKinematic, n.mass = this._mass, n.gravity = this._gravity, 
            n.angularDamping = this._angularDamping, n.linearDamping = this._linearDamping, 
            n.overrideGravity = this._overrideGravity, n.linearVelocity = this._linearVelocity, 
            n.angularVelocity = this._angularVelocity, n.linearFactor = this._linearFactor, 
            n.angularFactor = this._angularFactor, n.detectCollisions = this._detectCollisions;
        }, o.applyForce = function(t, e) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var i = n._nativeTempVector30;
            if (i.setValue(-t.x, t.y, t.z), e) {
                var r = n._nativeTempVector31;
                r.setValue(-e.x, e.y, e.z), this._nativeColliderObject.applyForce(i, r);
            } else this._nativeColliderObject.applyCentralForce(i);
        }, o.applyTorque = function(t) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var e = n._nativeTempVector30;
            e.setValue(-t.x, t.y, t.z), this._nativeColliderObject.applyTorque(e);
        }, o.applyImpulse = function(t, e) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            n._nativeImpulse.setValue(-t.x, t.y, t.z), e ? (n._nativeImpulseOffset.setValue(-e.x, e.y, e.z), 
            this._nativeColliderObject.applyImpulse(n._nativeImpulse, n._nativeImpulseOffset)) : this._nativeColliderObject.applyCentralImpulse(n._nativeImpulse);
        }, o.applyTorqueImpulse = function(t) {
            if (null == this._nativeColliderObject) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            var e = n._nativeTempVector30;
            e.setValue(-t.x, t.y, t.z), this._nativeColliderObject.applyTorqueImpulse(e);
        }, o.wakeUp = function() {
            this._nativeColliderObject && this._nativeColliderObject.activate(!1);
        }, o.clearForces = function() {
            var t = this._nativeColliderObject;
            if (null == t) throw "Attempted to call a Physics function that is avaliable only when the Entity has been already added to the Scene.";
            t.clearForces();
            var e = n._nativeVector3Zero;
            t.setInterpolationAngularVelocity(e), t.setLinearVelocity(e), t.setInterpolationAngularVelocity(e), 
            t.setAngularVelocity(e);
        }, a(0, o, "angularDamping", function() {
            return this._angularDamping;
        }, function(t) {
            this._angularDamping = t, this._nativeColliderObject && this._nativeColliderObject.setDamping(this._linearDamping, t);
        }), a(0, o, "mass", function() {
            return this._mass;
        }, function(t) {
            t = Math.max(t, 1e-7), this._mass = t, this._isKinematic || this._updateMass(t);
        }), a(0, o, "linearDamping", function() {
            return this._linearDamping;
        }, function(t) {
            this._linearDamping = t, this._nativeColliderObject && this._nativeColliderObject.setDamping(t, this._angularDamping);
        }), a(0, o, "isKinematic", function() {
            return this._isKinematic;
        }, function(t) {
            this._isKinematic = t;
            var e = !!(this._simulation && this._enabled && this._colliderShape);
            e && this._removeFromSimulation();
            var i = this._nativeColliderObject, r = i.getCollisionFlags();
            t ? (r |= 2, i.setCollisionFlags(r), this._nativeColliderObject.forceActivationState(4), 
            this._enableProcessCollisions = !1, this._updateMass(0)) : ((2 & r) > 0 && (r ^= 2), 
            i.setCollisionFlags(r), this._nativeColliderObject.setActivationState(1), this._enableProcessCollisions = !0, 
            this._updateMass(this._mass));
            var a = n._nativeVector3Zero;
            i.setInterpolationLinearVelocity(a), i.setLinearVelocity(a), i.setInterpolationAngularVelocity(a), 
            i.setAngularVelocity(a), e && this._addToSimulation();
        }), a(0, o, "gravity", function() {
            return this._gravity;
        }, function(t) {
            this._gravity = t, n._nativeGravity.setValue(-t.x, t.y, t.z), this._nativeColliderObject.setGravity(n._nativeGravity);
        }), a(0, o, "overrideGravity", function() {
            return this._overrideGravity;
        }, function(t) {
            if (this._overrideGravity = t, this._nativeColliderObject) {
                var e = this._nativeColliderObject.getFlags();
                t ? 0 == (1 & e) && this._nativeColliderObject.setFlags(1 | e) : (1 & e) > 0 && this._nativeColliderObject.setFlags(1 ^ e);
            }
        }), a(0, o, "totalForce", function() {
            return this._nativeColliderObject ? this._nativeColliderObject.getTotalForce() : null;
        }), a(0, o, "linearVelocity", function() {
            return this._nativeColliderObject && kt._convertToLayaVec3(this._nativeColliderObject.getLinearVelocity(), this._linearVelocity, !0), 
            this._linearVelocity;
        }, function(t) {
            if (this._linearVelocity = t, this._nativeColliderObject) {
                var e = n._nativeTempVector30;
                kt._convertToBulletVec3(t, e, !0), this.isSleeping && this.wakeUp(), this._nativeColliderObject.setLinearVelocity(e);
            }
        }), a(0, o, "detectCollisions", function() {
            return this._detectCollisions;
        }, function(t) {
            this._detectCollisions !== t && (this._detectCollisions = t, this._colliderShape && this._enabled && this._simulation && (this._simulation._removeRigidBody(this), 
            this._simulation._addRigidBody(this, this._collisionGroup, t ? this._canCollideWith : 0)));
        }), a(0, o, "linearFactor", function() {
            return this._nativeColliderObject ? this._linearFactor : null;
        }, function(t) {
            if (this._linearFactor = t, this._nativeColliderObject) {
                var e = n._nativeTempVector30;
                kt._convertToBulletVec3(t, e, !1), this._nativeColliderObject.setLinearFactor(e);
            }
        }), a(0, o, "angularFactor", function() {
            return this._nativeColliderObject ? this._angularFactor : null;
        }, function(t) {
            if (this._angularFactor = t, this._nativeColliderObject) {
                var e = n._nativeTempVector30;
                kt._convertToBulletVec3(t, e, !1), this._nativeColliderObject.setAngularFactor(e);
            }
        }), a(0, o, "angularVelocity", function() {
            return this._nativeColliderObject && kt._convertToLayaVec3(this._nativeColliderObject.getAngularVelocity(), this._angularVelocity, !0), 
            this._angularVelocity;
        }, function(t) {
            if (this._angularVelocity = t, this._nativeColliderObject) {
                var e = n._nativeTempVector30;
                kt._convertToBulletVec3(t, e, !0), this.isSleeping && this.wakeUp(), this._nativeColliderObject.setAngularVelocity(e);
            }
        }), a(0, o, "totalTorque", function() {
            if (this._nativeColliderObject) {
                var t = this._nativeColliderObject.getTotalTorque(), e = this._totalTorque;
                e.x = -t.x, e.y = t.y, e.z = t.z;
            }
            return null;
        }), a(0, o, "isSleeping", function() {
            return !!this._nativeColliderObject && 2 === this._nativeColliderObject.getActivationState();
        }), a(0, o, "sleepLinearVelocity", function() {
            return this._nativeColliderObject.getLinearSleepingThreshold();
        }, function(t) {
            this._nativeColliderObject.setSleepingThresholds(t, this._nativeColliderObject.getAngularSleepingThreshold());
        }), a(0, o, "sleepAngularVelocity", function() {
            return this._nativeColliderObject.getAngularSleepingThreshold();
        }, function(t) {
            this._nativeColliderObject.setSleepingThresholds(this._nativeColliderObject.getLinearSleepingThreshold(), t);
        }), n.TYPE_STATIC = 0, n.TYPE_DYNAMIC = 1, n.TYPE_KINEMATIC = 2, n._BT_DISABLE_WORLD_GRAVITY = 1, 
        n._BT_ENABLE_GYROPSCOPIC_FORCE = 2, i(n, [ "_nativeTempVector30", function() {
            return this._nativeTempVector30 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeTempVector31", function() {
            return this._nativeTempVector31 = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeVector3Zero", function() {
            return this._nativeVector3Zero = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeInertia", function() {
            return this._nativeInertia = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeImpulse", function() {
            return this._nativeImpulse = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeImpulseOffset", function() {
            return this._nativeImpulseOffset = new W._physics3D.btVector3(0, 0, 0);
        }, "_nativeGravity", function() {
            return this._nativeGravity = new W._physics3D.btVector3(0, 0, 0);
        } ]);
    }(Yn), function(t) {
        function e(t, n) {
            void 0 === t && (t = 1), void 0 === n && (n = Ue.COLLISIONFILTERGROUP_ALLFILTER), 
            e.__super.call(this, t, n);
        }
        r(e, "laya.d3.physics.PhysicsCollider", t);
        var n = e.prototype;
        n._addToSimulation = function() {
            this._simulation._addPhysicsCollider(this, this._collisionGroup, this._canCollideWith);
        }, n._removeFromSimulation = function() {
            this._simulation._removePhysicsCollider(this);
        }, n._onTransformChanged = function(t) {
            (t &= 56) && (this._transformFlag |= t, this._isValid() && -1 === this._inPhysicUpdateListIndex && this._simulation._physicsUpdateList.add(this));
        }, n._parse = function(t) {
            null != t.friction && (this.friction = t.friction), null != t.rollingFriction && (this.rollingFriction = t.rollingFriction), 
            null != t.restitution && (this.restitution = t.restitution), null != t.isTrigger && (this.isTrigger = t.isTrigger), 
            laya.d3.physics.PhysicsComponent.prototype._parse.call(this, t), this._parseShape(t.shapes);
        }, n._onAdded = function() {
            var e = new W._physics3D.btCollisionObject();
            e.setUserIndex(this.id), e.forceActivationState(5);
            var n = e.getCollisionFlags();
            this.owner.isStatic ? ((2 & n) > 0 && (n ^= 2), n |= 1) : ((1 & n) > 0 && (n ^= 1), 
            n |= 2), e.setCollisionFlags(n), this._nativeColliderObject = e, t.prototype._onAdded.call(this);
        };
    }(Yn), function(t) {
        function e(t) {
            this._bones = [], this._skinnedDataLoopMarks = [], this._localBounds = new xe(Tt._ZERO, Tt._ZERO), 
            this._cacheAnimationNode = [], e.__super.call(this, t);
        }
        r(e, "laya.d3.core.SkinnedMeshRenderer", t);
        var n = e.prototype;
        return n._computeSkinnedData = function() {
            if (this._cacheMesh && this._cacheAvatar || this._cacheMesh && this._cacheRootBone) for (var t = this._cacheMesh._inverseBindPoses, e = this._cacheMesh._bindPoseIndices, n = this._cacheMesh._skinDataPathMarks, i = 0, r = this._cacheMesh.subMeshCount; i < r; i++) for (var a = this._cacheMesh._getSubMesh(i)._boneIndicesList, o = this._skinnedData[i], s = 0, l = a.length; s < l; s++) {
                var h = a[s];
                R.supportWebGLPlusAnimation ? this._computeSubSkinnedDataNative(this._cacheAnimator._animationNodeWorldMatrixs, this._cacheAnimationNodeIndices, this._cacheMesh._inverseBindPosesBuffer, h, e, o[s]) : this._computeSubSkinnedData(t, h, e, o[s], n);
            }
        }, n._computeSubSkinnedData = function(t, e, n, i, r) {
            for (var a = 0, o = e.length; a < o; a++) {
                var s = e[a];
                if (this._skinnedDataLoopMarks[s] === N.loopCount) for (var l = r[s], h = this._skinnedData[l[0]][l[1]], u = 16 * l[2], c = 16 * a, _ = 0; _ < 16; _++) i[c + _] = h[u + _]; else {
                    if (this._cacheRootBone) {
                        var d = n[s];
                        kt._mulMatrixArray(this._bones[d].transform.worldMatrix.elements, t[d], i, 16 * a);
                    } else kt._mulMatrixArray(this._cacheAnimationNode[s].transform.getWorldMatrix(), t[n[s]], i, 16 * a);
                    this._skinnedDataLoopMarks[s] = N.loopCount;
                }
            }
        }, n._boundChange = function() {
            this._boundsChange = !0;
        }, n._onMeshChange = function(e) {
            t.prototype._onMeshChange.call(this, e), this._cacheMesh = e;
            var n = e.subMeshCount;
            this._skinnedData = o(n), this._skinnedDataLoopMarks.length = e._bindPoseIndices.length;
            for (var i = 0; i < n; i++) for (var r = e._getSubMesh(i)._boneIndicesList, a = r.length, s = this._skinnedData[i] = o(a), l = 0; l < a; l++) s[l] = new Float32Array(16 * r[l].length);
            this._bones || this._cacheAvatar && e && this._getCacheAnimationNodes();
        }, n._setCacheAnimator = function(t) {
            this._cacheAnimator = t, this._defineDatas.add(Di.SHADERDEFINE_BONE), this._setRootNode();
        }, n._calculateBoundingBox = function() {
            if (this._cacheRootBone) this._localBounds._tranform(this._cacheRootBone.transform.worldMatrix, this._bounds); else if (this._cacheAnimator && this._rootBone) {
                var n = e._tempMatrix4x4;
                kt.matrix4x4MultiplyMFM(this._cacheAnimator.owner.transform.worldMatrix, this._cacheRootAnimationNode.transform.getWorldMatrix(), n), 
                this._localBounds._tranform(n, this._bounds);
            } else t.prototype._calculateBoundingBox.call(this);
            if (R.supportWebGLPlusCulling) {
                var i = this._bounds.getMin(), r = this._bounds.getMax(), a = Pe._cullingBuffer;
                a[this._cullingBufferIndex + 1] = i.x, a[this._cullingBufferIndex + 2] = i.y, a[this._cullingBufferIndex + 3] = i.z, 
                a[this._cullingBufferIndex + 4] = r.x, a[this._cullingBufferIndex + 5] = r.y, a[this._cullingBufferIndex + 6] = r.z;
            }
        }, n._changeRenderObjectsByMesh = function(t) {
            var e = t.subMeshCount;
            this._renderElements.length = e;
            for (var n = 0; n < e; n++) {
                var i = this._renderElements[n];
                if (!i) {
                    var r = this.sharedMaterials[n];
                    (i = this._renderElements[n] = new At()).setTransform(this._owner._transform), i.render = this, 
                    i.material = r || ci.defaultMaterial;
                }
                i.setGeometry(t._getSubMesh(n));
            }
        }, n._renderUpdate = function(t, e) {
            if (this._cacheAnimator) if (this._computeSkinnedData(), this._cacheRootBone) this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, He.DEFAULT); else {
                var n = this._cacheAnimator.owner._transform;
                this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, n.worldMatrix);
            } else this._shaderValues.setMatrix4x4(Fn.WORLDMATRIX, e.worldMatrix);
        }, n._renderUpdateWithCamera = function(t, e) {
            var n = t.projectionViewMatrix;
            if (this._cacheRootBone) this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, n); else {
                if (this._cacheAnimator) {
                    var i = this._cacheAnimator.owner._transform;
                    He.multiply(n, i.worldMatrix, this._projectionViewWorldMatrix);
                } else He.multiply(n, e.worldMatrix, this._projectionViewWorldMatrix);
                this._shaderValues.setMatrix4x4(Fn.MVPMATRIX, this._projectionViewWorldMatrix);
            }
        }, n._destroy = function() {
            t.prototype._destroy.call(this), this._cacheRootBone ? this._cacheRootBone.transform.off("transformchanged", this, this._boundChange) : this._cacheRootAnimationNode && this._cacheRootAnimationNode.transform.off("transformchanged", this, this._boundChange);
        }, n._setRootBone = function(t) {
            this._rootBone = t, this._setRootNode();
        }, n._setRootNode = function() {
            var t;
            t = this._cacheAnimator && this._rootBone && this._cacheAvatar ? this._cacheAnimator._avatarNodeMap[this._rootBone] : null, 
            this._cacheRootAnimationNode != t && (this._boundChange(), this._cacheRootAnimationNode && this._cacheRootAnimationNode.transform.off("transformchanged", this, this._boundChange), 
            t && t.transform.on("transformchanged", this, this._boundChange), this._cacheRootAnimationNode = t);
        }, n._getCacheAnimationNodes = function() {
            var t = this._cacheMesh._boneNames, e = this._cacheMesh._bindPoseIndices, n = e.length;
            if (R.supportWebGLPlusAnimation) {
                this._cacheAnimationNodeIndices = new Uint16Array(n);
                var i = this._cacheAnimator._avatarNodeMap;
                for (o = 0; o < n; o++) {
                    var r = i[t[e[o]]];
                    this._cacheAnimationNodeIndices[o] = r._worldMatrixIndex;
                }
            } else {
                this._cacheAnimationNode.length = n;
                for (var a = this._cacheAnimator._avatarNodeMap, o = 0; o < n; o++) {
                    var s = a[t[e[o]]];
                    this._cacheAnimationNode[o] = s;
                }
            }
        }, n._setCacheAvatar = function(t) {
            this._cacheAvatar !== t && (this._cacheMesh ? (this._cacheAvatar = t, t && (this._defineDatas.add(Di.SHADERDEFINE_BONE), 
            this._getCacheAnimationNodes())) : this._cacheAvatar = t, this._setRootNode());
        }, n._computeSubSkinnedDataNative = function(t, e, n, i, r, a) {
            v.instance.computeSubSkinnedData(t, e, n, i, r, a);
        }, a(0, n, "localBounds", function() {
            return this._localBounds;
        }, function(t) {
            this._localBounds = t;
        }), a(0, n, "rootBone", function() {
            return this._cacheRootBone;
        }, function(t) {
            this._cacheRootBone != t && (this._cacheRootBone && this._cacheRootBone.transform.off("transformchanged", this, this._boundChange), 
            t.transform.on("transformchanged", this, this._boundChange), this._cacheRootBone = t, 
            this._boundChange());
        }), a(0, n, "bones", function() {
            return this._bones;
        }), i(e, [ "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new He();
        } ]), e;
    }(jn)), pi = function(t) {
        function e(t, n, i, r) {
            void 0 === i && (i = 0), void 0 === r && (r = 0), e.__super.call(this, i, !1), this._glTextureType = 3553, 
            this._width = t, this._height = n, this._depthStencilFormat = r, this._create(t, n);
        }
        r(e, "laya.d3.resource.RenderTexture", s);
        var n = e.prototype;
        return n._create = function(t, e) {
            var n = v.instance;
            this._frameBuffer = n.createFramebuffer(), B.bindTexture(n, this._glTextureType, this._glTexture);
            var i = this._getGLFormat();
            if (n.texImage2D(this._glTextureType, 0, i, t, e, 0, i, 5121, null), this._setGPUMemory(t * e * 4), 
            n.bindFramebuffer(36160, this._frameBuffer), n.framebufferTexture2D(36160, 36064, 3553, this._glTexture, 0), 
            3 !== this._depthStencilFormat) switch (this._depthStencilBuffer = n.createRenderbuffer(), 
            n.bindRenderbuffer(36161, this._depthStencilBuffer), this._depthStencilFormat) {
              case 0:
                n.renderbufferStorage(36161, 33189, t, e), n.framebufferRenderbuffer(36160, 36096, 36161, this._depthStencilBuffer);
                break;

              case 1:
                n.renderbufferStorage(36161, 36168, t, e), n.framebufferRenderbuffer(36160, 36128, 36161, this._depthStencilBuffer);
                break;

              case 2:
                n.renderbufferStorage(36161, 34041, t, e), n.framebufferRenderbuffer(36160, 33306, 36161, this._depthStencilBuffer);
                break;

              default:
                throw "RenderTexture: unkonw depth format.";
            }
            n.bindFramebuffer(36160, null), n.bindRenderbuffer(36161, null), this._setWarpMode(10242, this._wrapModeU), 
            this._setWarpMode(10243, this._wrapModeV), this._setFilterMode(this._filterMode), 
            this._setAnisotropy(this._anisoLevel), this._readyed = !0, this._activeResource();
        }, n._start = function() {
            v.instance.bindFramebuffer(36160, this._frameBuffer), e._currentActive = this, this._readyed = !1;
        }, n._end = function() {
            v.instance.bindFramebuffer(36160, null), e._currentActive = null, this._readyed = !0;
        }, n.getData = function(t, e, n, i, r) {
            if (R.isConchApp && 2 == conchConfig.threadMode) throw "native 2 thread mode use getDataAsync";
            var a = v.instance;
            return a.bindFramebuffer(36160, this._frameBuffer), 36053 === a.checkFramebufferStatus(36160) ? (a.readPixels(t, e, n, i, 6408, 5121, r), 
            a.bindFramebuffer(36160, null), r) : (a.bindFramebuffer(36160, null), null);
        }, n.getDataAsync = function(t, e, n, i, r) {
            var a = v.instance;
            a.bindFramebuffer(36160, this._frameBuffer), a.readPixelsAsync(t, e, n, i, 6408, 5121, function(t) {
                r(new Uint8Array(t));
            }), a.bindFramebuffer(36160, null);
        }, n._disposeResource = function() {
            if (this._frameBuffer) {
                var t = v.instance;
                t.deleteTexture(this._glTexture), t.deleteFramebuffer(this._frameBuffer), t.deleteRenderbuffer(this._depthStencilBuffer), 
                this._glTexture = null, this._frameBuffer = null, this._depthStencilBuffer = null, 
                this._setGPUMemory(0);
            }
        }, a(0, n, "depthStencilFormat", function() {
            return this._depthStencilFormat;
        }), a(0, n, "defaulteTexture", function() {
            return P.grayTexture;
        }), a(1, e, "currentActive", function() {
            return e._currentActive;
        }, laya.resource.BaseTexture._$SET_currentActive), e.getTemporary = function(t, n, i, r, a) {
            void 0 === i && (i = 0), void 0 === r && (r = 0), void 0 === a && (a = 1);
            var o = e._temporaryMap[1e7 * a + 1e6 * r + 1e5 * i + 1e4 * n + t];
            if (!o || o && 0 === o.length) {
                var s = new e(t, n, i, r);
                return s.filterMode = a, s;
            }
            return o.pop();
        }, e.setReleaseTemporary = function(t) {
            var n = 1e7 * t.filterMode + 1e6 * t.depthStencilFormat + 1e5 * t.format + 1e4 * t.height + t.width, i = e._temporaryMap[n];
            i || (e._temporaryMap[n] = i = []), i.push(t);
        }, e._temporaryMap = {}, e._currentActive = null, e;
    }(), Ti = function(t) {
        function e(t, n) {
            void 0 === t && (t = 0), void 0 === n && (n = !1), e.__super.call(this, t, n), this._glTextureType = 34067;
        }
        r(e, "laya.d3.resource.TextureCube", s);
        var i = e.prototype;
        return i.setSixSideImageSources = function(t, e) {
            void 0 === e && (e = !1);
            for (var n = 0, i = 0, r = 0; r < 6; r++) {
                var a = t[r];
                if (!a) return void console.log("TextureCube: image Source can't be null.");
                var o = a.width, s = a.height;
                if (r > 0 && n !== o) return void console.log("TextureCube: each side image's width and height must same.");
                if (n = o, i = s, n !== i) return void console.log("TextureCube: each side image's width and height must same.");
            }
            this._width = n, this._height = i;
            var l = v.instance;
            B.bindTexture(l, this._glTextureType, this._glTexture);
            var h = this._getGLFormat();
            if (R.isConchApp) {
                if (1 == e) for (var u = 0; u < 6; u++) t[u].setPremultiplyAlpha(e);
                l.texImage2D(34073, 0, 6408, 6408, 5121, t[0]), l.texImage2D(34074, 0, 6408, 6408, 5121, t[1]), 
                l.texImage2D(34069, 0, 6408, 6408, 5121, t[2]), l.texImage2D(34070, 0, 6408, 6408, 5121, t[3]), 
                l.texImage2D(34071, 0, 6408, 6408, 5121, t[4]), l.texImage2D(34072, 0, 6408, 6408, 5121, t[5]);
            } else e && l.pixelStorei(37441, !0), l.texImage2D(34073, 0, h, h, 5121, t[0]), 
            l.texImage2D(34074, 0, h, h, 5121, t[1]), l.texImage2D(34069, 0, h, h, 5121, t[2]), 
            l.texImage2D(34070, 0, h, h, 5121, t[3]), l.texImage2D(34071, 0, h, h, 5121, t[4]), 
            l.texImage2D(34072, 0, h, h, 5121, t[5]), e && l.pixelStorei(37441, !1);
            this._mipmap && this._isPot(n) && this._isPot(i) ? (l.generateMipmap(this._glTextureType), 
            this._setGPUMemory(n * i * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(n * i * 4 * 6), 
            this._setWarpMode(10242, this._wrapModeU), this._setWarpMode(10243, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
        }, i.setSixSidePixels = function(t, e, n) {
            if (t <= 0 || e <= 0) throw new Error("TextureCube:width or height must large than 0.");
            if (!n) throw new Error("TextureCube:pixels can't be null.");
            this._width = t, this._height = e;
            var i = v.instance;
            B.bindTexture(i, this._glTextureType, this._glTexture);
            var r = this._getGLFormat();
            i.texImage2D(34073, 0, r, t, e, 0, r, 5121, n[0]), i.texImage2D(34074, 0, r, t, e, 0, r, 5121, n[1]), 
            i.texImage2D(34069, 0, r, t, e, 0, r, 5121, n[2]), i.texImage2D(34070, 0, r, t, e, 0, r, 5121, n[3]), 
            i.texImage2D(34071, 0, r, t, e, 0, r, 5121, n[4]), i.texImage2D(34072, 0, r, t, e, 0, r, 5121, n[5]), 
            this._mipmap && this._isPot(t) && this._isPot(e) ? (i.generateMipmap(this._glTextureType), 
            this._setGPUMemory(t * e * 4 * (1 + 1 / 3) * 6)) : this._setGPUMemory(t * e * 4 * 6), 
            this._setWarpMode(10242, this._wrapModeU), this._setWarpMode(10243, this._wrapModeV), 
            this._setFilterMode(this._filterMode), this._readyed = !0, this._activeResource();
        }, i._recoverResource = function() {}, a(0, i, "defaulteTexture", function() {
            return e.grayTexture;
        }), e.__init__ = function() {
            var t = new Uint8Array(3);
            t[0] = 128, t[1] = 128, t[2] = 128, (e.grayTexture = new e(0, !1)).setSixSidePixels(1, 1, [ t, t, t, t, t, t ]), 
            e.grayTexture.lock = !0;
        }, e._parse = function(t, n, i) {
            var r = i ? new e(i[0], i[1]) : new e();
            return r.setSixSideImageSources(t), r;
        }, e.load = function(t, e) {
            n.loader.create(t, e, null, "TEXTURECUBE");
        }, e.grayTexture = null, e;
    }(), Ei = function(t) {
        function e(t, n) {
            e.__super.call(this, n), this._meshFilter = new $t(this), this._render = new jn(this), 
            t && (this._meshFilter.sharedMesh = t);
        }
        r(e, "laya.d3.core.MeshSprite3D", t);
        var n = e.prototype;
        return n._parse = function(t, e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, t, e);
            var n = this.meshRenderer, i = t.lightmapIndex;
            null != i && (n.lightmapIndex = i);
            var r = t.lightmapScaleOffset;
            r && (n.lightmapScaleOffset = new mt(r[0], r[1], r[2], r[3])), void 0 != t.meshPath && (this.meshFilter.sharedMesh = S.getRes(t.meshPath)), 
            void 0 != t.enableRender && (this.meshRenderer.enable = t.enableRender);
            var a = t.materials;
            if (a) {
                var o = n.sharedMaterials, s = a.length;
                o.length = s;
                for (var l = 0; l < s; l++) o[l] = S.getRes(a[l].path);
                n.sharedMaterials = o;
            }
        }, n._addToInitStaticBatchManager = function() {
            Sn.instance._addBatchSprite(this);
        }, n._cloneTo = function(t, e, n) {
            var i = t;
            i._meshFilter.sharedMesh = this._meshFilter.sharedMesh;
            var r = this._render, a = i._render;
            a.enable = r.enable, a.sharedMaterials = r.sharedMaterials, a.castShadow = r.castShadow;
            var o = r.lightmapScaleOffset;
            o && (a.lightmapScaleOffset = o.clone()), a.lightmapIndex = r.lightmapIndex, a.receiveShadow = r.receiveShadow, 
            a.sortingFudge = r.sortingFudge, laya.d3.core.Sprite3D.prototype._cloneTo.call(this, t, e, n);
        }, n.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._meshFilter.destroy());
        }, a(0, n, "meshFilter", function() {
            return this._meshFilter;
        }), a(0, n, "meshRenderer", function() {
            return this._render;
        }), e.__init__ = function() {
            e.SHADERDEFINE_UV0 = e.shaderDefines.registerDefine("UV"), e.SHADERDEFINE_COLOR = e.shaderDefines.registerDefine("COLOR"), 
            e.SHADERDEFINE_UV1 = e.shaderDefines.registerDefine("UV1"), e.SHADERDEFINE_GPU_INSTANCE = e.shaderDefines.registerDefine("GPU_INSTANCE"), 
            q._registerManager(Sn.instance), tt._registerManager(ln.instance);
        }, e.SHADERDEFINE_UV0 = 0, e.SHADERDEFINE_COLOR = 0, e.SHADERDEFINE_UV1 = 0, e.SHADERDEFINE_GPU_INSTANCE = 0, 
        i(e, [ "shaderDefines", function() {
            return this.shaderDefines = new pt(Jn.shaderDefines);
        } ]), e;
    }(Jn), vi = function(t) {
        function e() {
            this._direction = null, this._spotAngle = NaN, this._range = NaN, e.__super.call(this), 
            this._spotAngle = 30, this._range = 10, this._direction = new Tt();
        }
        r(e, "laya.d3.core.light.SpotLight", t);
        var n = e.prototype;
        return n._onActive = function() {
            t.prototype._onActive.call(this), this._lightmapBakedType !== ti.LIGHTMAPBAKEDTYPE_BAKED && this.scene._defineDatas.add(Qn.SHADERDEFINE_SPOTLIGHT);
        }, n._onInActive = function() {
            t.prototype._onInActive.call(this), this._lightmapBakedType !== ti.LIGHTMAPBAKEDTYPE_BAKED && this.scene._defineDatas.remove(Qn.SHADERDEFINE_SPOTLIGHT);
        }, n._prepareToScene = function() {
            var t = this._scene;
            if (t.enableLight && this.activeInHierarchy) {
                t._defineDatas;
                var e = t._shaderValues;
                return Tt.scale(this.color, this._intensity, this._intensityColor), e.setVector3(Qn.SPOTLIGHTCOLOR, this._intensityColor), 
                e.setVector3(Qn.SPOTLIGHTPOS, this.transform.position), this.transform.worldMatrix.getForward(this._direction), 
                Tt.normalize(this._direction, this._direction), e.setVector3(Qn.SPOTLIGHTDIRECTION, this._direction), 
                e.setNumber(Qn.SPOTLIGHTRANGE, this.range), e.setNumber(Qn.SPOTLIGHTSPOTANGLE, this.spotAngle * Math.PI / 180), 
                !0;
            }
            return !1;
        }, n._parse = function(e, n) {
            t.prototype._parse.call(this, e, n), this.range = e.range, this.spotAngle = e.spotAngle;
        }, a(0, n, "spotAngle", function() {
            return this._spotAngle;
        }, function(t) {
            this._spotAngle = Math.max(Math.min(t, 180), 0);
        }), a(0, n, "range", function() {
            return this._range;
        }, function(t) {
            this._range = t;
        }), i(e, [ "_tempMatrix0", function() {
            return this._tempMatrix0 = new He();
        }, "_tempMatrix1", function() {
            return this._tempMatrix1 = new He();
        } ]), e;
    }(ti), gi = function(t) {
        function e() {
            this._direction = null, e.__super.call(this), this._direction = new Tt();
        }
        r(e, "laya.d3.core.light.DirectionLight", t);
        var n = e.prototype;
        return n._initShadow = function() {
            if (this._shadow) this._parallelSplitShadowMap = new Pt(), this.scene.parallelSplitShadowMaps.push(this._parallelSplitShadowMap), 
            this.transform.worldMatrix.getForward(this._direction), Tt.normalize(this._direction, this._direction), 
            this._parallelSplitShadowMap.setInfo(this.scene, this._shadowFarPlane, this._direction, this._shadowMapSize, this._shadowMapCount, this._shadowMapPCFType); else {
                var t = this._scene._defineDatas, e = this.scene.parallelSplitShadowMaps;
                e.splice(e.indexOf(this._parallelSplitShadowMap), 1), this._parallelSplitShadowMap.disposeAllRenderTarget(), 
                this._parallelSplitShadowMap = null, t.remove(Qn.SHADERDEFINE_SHADOW_PSSM1), t.remove(Qn.SHADERDEFINE_SHADOW_PSSM2), 
                t.remove(Qn.SHADERDEFINE_SHADOW_PSSM3);
            }
        }, n._onActive = function() {
            t.prototype._onActive.call(this), this._shadow && this._initShadow(), this._lightmapBakedType !== ti.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.add(Qn.SHADERDEFINE_DIRECTIONLIGHT);
        }, n._onInActive = function() {
            t.prototype._onInActive.call(this), this._lightmapBakedType !== ti.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.remove(Qn.SHADERDEFINE_DIRECTIONLIGHT);
        }, n._prepareToScene = function() {
            var t = this._scene;
            if (t.enableLight && this.activeInHierarchy) {
                t._defineDatas;
                var e = t._shaderValues;
                return Tt.scale(this.color, this._intensity, this._intensityColor), e.setVector3(Qn.LIGHTDIRCOLOR, this._intensityColor), 
                this.transform.worldMatrix.getForward(this._direction), Tt.normalize(this._direction, this._direction), 
                e.setVector3(Qn.LIGHTDIRECTION, this._direction), !0;
            }
            return !1;
        }, a(0, n, "shadow", t.prototype._$get_shadow, function(t) {
            this._shadow !== t && (this._shadow = t, this.scene && this._initShadow());
        }), e;
    }(ti), Si = function(t) {
        function e() {
            e.__super.call(this, this.name), this._render = new Kn(this), this._geometryFilter = new te(this);
        }
        r(e, "laya.d3.core.trail.TrailSprite3D", t);
        var n = e.prototype;
        return n._parse = function(t, e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, t, e);
            var n = this._render, i = this._geometryFilter, r = 0, a = 0, o = t.materials;
            if (o) {
                var s = n.sharedMaterials, l = o.length;
                for (s.length = l, r = 0; r < l; r++) s[r] = S.getRes(o[r].path);
                n.sharedMaterials = s;
            }
            i.time = t.time, i.minVertexDistance = t.minVertexDistance, i.widthMultiplier = t.widthMultiplier, 
            i.textureMode = t.textureMode, null != t.alignment && (i.alignment = t.alignment);
            var h = [], u = t.widthCurve;
            for (r = 0, a = u.length; r < a; r++) {
                var c = new Tn();
                c.time = u[r].time, c.inTangent = u[r].inTangent, c.outTangent = u[r].outTangent, 
                c.value = u[r].value, h.push(c);
            }
            i.widthCurve = h;
            var _ = t.colorGradient, d = _.colorKeys, f = _.alphaKeys, m = new lt(d.length, f.length);
            for (m.mode = _.mode, r = 0, a = d.length; r < a; r++) {
                var p = d[r];
                m.addColorRGB(p.time, new xt(p.value[0], p.value[1], p.value[2], 1));
            }
            for (r = 0, a = f.length; r < a; r++) {
                var T = f[r];
                m.addColorAlpha(T.time, T.value);
            }
            i.colorGradient = m;
        }, n._onActive = function() {
            t.prototype._onActive.call(this), this._transform.position.cloneTo(this._geometryFilter._lastPosition);
        }, n._cloneTo = function(t, e, n) {
            laya.d3.core.Sprite3D.prototype._cloneTo.call(this, t, e, n);
            var i = 0, r = 0, a = t, o = a.trailFilter;
            o.time = this.trailFilter.time, o.minVertexDistance = this.trailFilter.minVertexDistance, 
            o.widthMultiplier = this.trailFilter.widthMultiplier, o.textureMode = this.trailFilter.textureMode;
            var s = this.trailFilter.widthCurve, l = [];
            for (i = 0, r = s.length; i < r; i++) {
                var h = new Tn();
                s[i].cloneTo(h), l.push(h);
            }
            o.widthCurve = l;
            var u = new lt(this.trailFilter.colorGradient.maxColorRGBKeysCount, this.trailFilter.colorGradient.maxColorAlphaKeysCount);
            this.trailFilter.colorGradient.cloneTo(u), o.colorGradient = u, a.trailRenderer.sharedMaterial = this.trailRenderer.sharedMaterial;
        }, n.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._geometryFilter.destroy(), this._geometryFilter = null);
        }, a(0, n, "trailFilter", function() {
            return this._geometryFilter;
        }), a(0, n, "trailRenderer", function() {
            return this._render;
        }), e.__init__ = function() {
            e.SHADERDEFINE_GRADIENTMODE_BLEND = e.shaderDefines.registerDefine("GRADIENTMODE_BLEND");
        }, e.SHADERDEFINE_GRADIENTMODE_BLEND = 0, i(e, [ "CURTIME", function() {
            return this.CURTIME = Vt.propertyNameToID("u_CurTime");
        }, "LIFETIME", function() {
            return this.LIFETIME = Vt.propertyNameToID("u_LifeTime");
        }, "WIDTHCURVE", function() {
            return this.WIDTHCURVE = Vt.propertyNameToID("u_WidthCurve");
        }, "WIDTHCURVEKEYLENGTH", function() {
            return this.WIDTHCURVEKEYLENGTH = Vt.propertyNameToID("u_WidthCurveKeyLength");
        }, "GRADIENTCOLORKEY", function() {
            return this.GRADIENTCOLORKEY = Vt.propertyNameToID("u_GradientColorkey");
        }, "GRADIENTALPHAKEY", function() {
            return this.GRADIENTALPHAKEY = Vt.propertyNameToID("u_GradientAlphakey");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Jn.shaderDefines);
        } ]), e;
    }(Jn), yi = function(t) {
        function e() {
            e.__super.call(this, null), this._render = new Wn(this), this._particleSystem = new sn(this);
            var t = this._render._renderElements[0] = new At();
            t.setTransform(this._transform), t.render = this._render, t.setGeometry(this._particleSystem), 
            t.material = si.defaultMaterial;
        }
        r(e, "laya.d3.core.particleShuriKen.ShuriKenParticle3D", t);
        var n = e.prototype;
        return n._initParticleVelocity = function(t) {
            for (var e = new Xt(), n = t.velocitys, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                e.add(a.key, a.value);
            }
            return e;
        }, n._initParticleColor = function(t) {
            var e = new lt(4, 4), n = t.alphas, i = 0, r = 0;
            for (i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                3 === i && 1 !== a.key && (a.key = 1, console.log("GradientDataColor warning:the forth key is  be force set to 1.")), 
                e.addColorAlpha(a.key, a.value);
            }
            var o = t.rgbs;
            for (i = 0, r = o.length; i < r; i++) {
                var s = o[i], l = s.value;
                3 === i && 1 !== s.key && (s.key = 1, console.log("GradientDataColor warning:the forth key is  be force set to 1.")), 
                e.addColorRGB(s.key, new xt(l[0], l[1], l[2], 1));
            }
            return e;
        }, n._initParticleSize = function(t) {
            for (var e = new Xt(), n = t.sizes, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                e.add(a.key, a.value);
            }
            return e;
        }, n._initParticleRotation = function(t) {
            for (var e = new Xt(), n = t.angularVelocitys, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                e.add(a.key, a.value / 180 * Math.PI);
            }
            return e;
        }, n._initParticleFrame = function(t) {
            for (var e = new ae(), n = t.frames, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                e.add(a.key, a.value);
            }
            return e;
        }, n._parse = function(t, n) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, t, n);
            var i, r = Math.PI / 180, a = 0, o = 0, s = this.particleRenderer, l = t.material;
            l && (i = S.getRes(l.path)), s.sharedMaterial = i;
            var h = t.meshPath;
            h && (s.mesh = S.getRes(h)), s.renderMode = t.renderMode, s.stretchedBillboardCameraSpeedScale = t.stretchedBillboardCameraSpeedScale, 
            s.stretchedBillboardSpeedScale = t.stretchedBillboardSpeedScale, s.stretchedBillboardLengthScale = t.stretchedBillboardLengthScale, 
            s.sortingFudge = t.sortingFudge ? t.sortingFudge : 0;
            var u = this.particleSystem;
            u.isPerformanceMode = t.isPerformanceMode, u.duration = t.duration, u.looping = t.looping, 
            u.prewarm = t.prewarm, u.startDelayType = t.startDelayType, u.startDelay = t.startDelay, 
            u.startDelayMin = t.startDelayMin, u.startDelayMax = t.startDelayMax, u.startLifetimeType = t.startLifetimeType, 
            u.startLifetimeConstant = t.startLifetimeConstant, u.startLifeTimeGradient = e._initStartLife(t.startLifetimeGradient), 
            u.startLifetimeConstantMin = t.startLifetimeConstantMin, u.startLifetimeConstantMax = t.startLifetimeConstantMax, 
            u.startLifeTimeGradientMin = e._initStartLife(t.startLifetimeGradientMin), u.startLifeTimeGradientMax = e._initStartLife(t.startLifetimeGradientMax), 
            u.startSpeedType = t.startSpeedType, u.startSpeedConstant = t.startSpeedConstant, 
            u.startSpeedConstantMin = t.startSpeedConstantMin, u.startSpeedConstantMax = t.startSpeedConstantMax, 
            u.threeDStartSize = t.threeDStartSize, u.startSizeType = t.startSizeType, u.startSizeConstant = t.startSizeConstant;
            var c = t.startSizeConstantSeparate, _ = u.startSizeConstantSeparate;
            _.x = c[0], _.y = c[1], _.z = c[2], u.startSizeConstantMin = t.startSizeConstantMin, 
            u.startSizeConstantMax = t.startSizeConstantMax;
            var d = t.startSizeConstantMinSeparate, f = u.startSizeConstantMinSeparate;
            f.x = d[0], f.y = d[1], f.z = d[2];
            var m = t.startSizeConstantMaxSeparate, p = u.startSizeConstantMaxSeparate;
            p.x = m[0], p.y = m[1], p.z = m[2], u.threeDStartRotation = t.threeDStartRotation, 
            u.startRotationType = t.startRotationType, u.startRotationConstant = t.startRotationConstant * r;
            var T = t.startRotationConstantSeparate, E = u.startRotationConstantSeparate;
            E.x = T[0] * r, E.y = T[1] * r, E.z = T[2] * r, u.startRotationConstantMin = t.startRotationConstantMin * r, 
            u.startRotationConstantMax = t.startRotationConstantMax * r;
            var v = t.startRotationConstantMinSeparate, g = u.startRotationConstantMinSeparate;
            g.x = v[0] * r, g.y = v[1] * r, g.z = v[2] * r;
            var y = t.startRotationConstantMaxSeparate, x = u.startRotationConstantMaxSeparate;
            x.x = y[0] * r, x.y = y[1] * r, x.z = y[2] * r, u.randomizeRotationDirection = t.randomizeRotationDirection, 
            u.startColorType = t.startColorType;
            var D = t.startColorConstant, I = u.startColorConstant;
            I.x = D[0], I.y = D[1], I.z = D[2], I.w = D[3];
            var R = t.startColorConstantMin, M = u.startColorConstantMin;
            M.x = R[0], M.y = R[1], M.z = R[2], M.w = R[3];
            var A = t.startColorConstantMax, C = u.startColorConstantMax;
            C.x = A[0], C.y = A[1], C.z = A[2], C.w = A[3], u.gravityModifier = t.gravityModifier, 
            u.simulationSpace = t.simulationSpace, u.scaleMode = t.scaleMode, u.playOnAwake = t.playOnAwake, 
            u.maxParticles = t.maxParticles;
            var L = t.autoRandomSeed;
            null != L && (u.autoRandomSeed = L);
            var O = t.randomSeed;
            null != O && (u.randomSeed[0] = O);
            var N = t.emission, V = u.emission;
            if (N) {
                V.emissionRate = N.emissionRate;
                var w = N.bursts;
                if (w) for (a = 0, o = w.length; a < o; a++) {
                    var P = w[a];
                    V.addBurst(new ne(P.time, P.min, P.max));
                }
                V.enbale = N.enable;
            } else V.enbale = !1;
            var b = t.shape;
            if (b) {
                var F;
                switch (b.shapeType) {
                  case 0:
                    var B;
                    F = B = new An(), B.radius = b.sphereRadius, B.emitFromShell = b.sphereEmitFromShell, 
                    B.randomDirection = b.sphereRandomDirection;
                    break;

                  case 1:
                    var U;
                    F = U = new In(), U.radius = b.hemiSphereRadius, U.emitFromShell = b.hemiSphereEmitFromShell, 
                    U.randomDirection = b.hemiSphereRandomDirection;
                    break;

                  case 2:
                    var z;
                    F = z = new $e(), z.angle = b.coneAngle * r, z.radius = b.coneRadius, z.length = b.coneLength, 
                    z.emitType = b.coneEmitType, z.randomDirection = b.coneRandomDirection;
                    break;

                  case 3:
                    var G;
                    F = G = new Nn(), G.x = b.boxX, G.y = b.boxY, G.z = b.boxZ, G.randomDirection = b.boxRandomDirection;
                    break;

                  case 7:
                    var k;
                    F = k = new en(), k.radius = b.circleRadius, k.arc = b.circleArc * r, k.emitFromEdge = b.circleEmitFromEdge, 
                    k.randomDirection = b.circleRandomDirection;
                    break;

                  default:
                    var X;
                    F = X = new en(), X.radius = b.circleRadius, X.arc = b.circleArc * r, X.emitFromEdge = b.circleEmitFromEdge, 
                    X.randomDirection = b.circleRandomDirection;
                }
                F.enable = b.enable, u.shape = F;
            }
            var W = t.velocityOverLifetime;
            if (W) {
                var Z, j = W.velocity;
                switch (j.type) {
                  case 0:
                    var K = j.constant;
                    Z = ye.createByConstant(new Tt(K[0], K[1], K[2]));
                    break;

                  case 1:
                    Z = ye.createByGradient(this._initParticleVelocity(j.gradientX), this._initParticleVelocity(j.gradientY), this._initParticleVelocity(j.gradientZ));
                    break;

                  case 2:
                    var q = j.constantMin, Q = j.constantMax;
                    Z = ye.createByRandomTwoConstant(new Tt(q[0], q[1], q[2]), new Tt(Q[0], Q[1], Q[2]));
                    break;

                  case 3:
                    Z = ye.createByRandomTwoGradient(this._initParticleVelocity(j.gradientXMin), this._initParticleVelocity(j.gradientXMax), this._initParticleVelocity(j.gradientYMin), this._initParticleVelocity(j.gradientYMax), this._initParticleVelocity(j.gradientZMin), this._initParticleVelocity(j.gradientZMax));
                }
                var J = new gt(Z);
                J.space = W.space, J.enbale = W.enable, u.velocityOverLifetime = J;
            }
            var $ = t.colorOverLifetime;
            if ($) {
                var tt, et = $.color;
                switch (et.type) {
                  case 0:
                    var nt = et.constant;
                    tt = rt.createByConstant(new mt(nt[0], nt[1], nt[2], nt[3]));
                    break;

                  case 1:
                    tt = rt.createByGradient(this._initParticleColor(et.gradient));
                    break;

                  case 2:
                    var it = et.constantMin, at = et.constantMax;
                    tt = rt.createByRandomTwoConstant(new mt(it[0], it[1], it[2], it[3]), new mt(at[0], at[1], at[2], at[3]));
                    break;

                  case 3:
                    tt = rt.createByRandomTwoGradient(this._initParticleColor(et.gradientMin), this._initParticleColor(et.gradientMax));
                }
                var ot = new H(tt);
                ot.enbale = $.enable, u.colorOverLifetime = ot;
            }
            var st = t.sizeOverLifetime;
            if (st) {
                var lt, ht = st.size;
                switch (ht.type) {
                  case 0:
                    lt = ht.separateAxes ? Ee.createByGradientSeparate(this._initParticleSize(ht.gradientX), this._initParticleSize(ht.gradientY), this._initParticleSize(ht.gradientZ)) : Ee.createByGradient(this._initParticleSize(ht.gradient));
                    break;

                  case 1:
                    if (ht.separateAxes) {
                        var ut = ht.constantMinSeparate, ct = ht.constantMaxSeparate;
                        lt = Ee.createByRandomTwoConstantSeparate(new Tt(ut[0], ut[1], ut[2]), new Tt(ct[0], ct[1], ct[2]));
                    } else lt = Ee.createByRandomTwoConstant(ht.constantMin, ht.constantMax);
                    break;

                  case 2:
                    lt = ht.separateAxes ? Ee.createByRandomTwoGradientSeparate(this._initParticleSize(ht.gradientXMin), this._initParticleSize(ht.gradientYMin), this._initParticleSize(ht.gradientZMin), this._initParticleSize(ht.gradientXMax), this._initParticleSize(ht.gradientYMax), this._initParticleSize(ht.gradientZMax)) : Ee.createByRandomTwoGradient(this._initParticleSize(ht.gradientMin), this._initParticleSize(ht.gradientMax));
                }
                var _t = new dt(lt);
                _t.enbale = st.enable, u.sizeOverLifetime = _t;
            }
            var ft = t.rotationOverLifetime;
            if (ft) {
                var pt, vt = ft.angularVelocity;
                switch (vt.type) {
                  case 0:
                    if (vt.separateAxes) {
                        var St = vt.constantSeparate;
                        pt = he.createByConstantSeparate(new Tt(St[0] * r, St[1] * r, St[2] * r));
                    } else pt = he.createByConstant(vt.constant * r);
                    break;

                  case 1:
                    pt = vt.separateAxes ? he.createByGradientSeparate(this._initParticleRotation(vt.gradientX), this._initParticleRotation(vt.gradientY), this._initParticleRotation(vt.gradientZ)) : he.createByGradient(this._initParticleRotation(vt.gradient));
                    break;

                  case 2:
                    if (vt.separateAxes) {
                        var yt = vt.constantMinSeparate, xt = vt.constantMaxSeparate;
                        pt = he.createByRandomTwoConstantSeparate(new Tt(yt[0] * r, yt[1] * r, yt[2] * r), new Tt(xt[0] * r, xt[1] * r, xt[2] * r));
                    } else pt = he.createByRandomTwoConstant(vt.constantMin * r, vt.constantMax * r);
                    break;

                  case 3:
                    vt.separateAxes || (pt = he.createByRandomTwoGradient(this._initParticleRotation(vt.gradientMin), this._initParticleRotation(vt.gradientMax)));
                }
                var Dt = new Ne(pt);
                Dt.enbale = ft.enable, u.rotationOverLifetime = Dt;
            }
            var It = t.textureSheetAnimation;
            if (It) {
                var Rt, Mt = It.frame;
                switch (Mt.type) {
                  case 0:
                    Rt = Y.createByConstant(Mt.constant);
                    break;

                  case 1:
                    Rt = Y.createByOverTime(this._initParticleFrame(Mt.overTime));
                    break;

                  case 2:
                    Rt = Y.createByRandomTwoConstant(Mt.constantMin, Mt.constantMax);
                    break;

                  case 3:
                    Rt = Y.createByRandomTwoOverTime(this._initParticleFrame(Mt.overTimeMin), this._initParticleFrame(Mt.overTimeMax));
                }
                var At, Ct = It.startFrame;
                switch (Ct.type) {
                  case 0:
                    At = De.createByConstant(Ct.constant);
                    break;

                  case 1:
                    At = De.createByRandomTwoConstant(Ct.constantMin, Ct.constantMax);
                }
                var Lt = new Ot(Rt, At);
                Lt.enable = It.enable;
                var Nt = It.tiles;
                Lt.tiles = new Et(Nt[0], Nt[1]), Lt.type = It.type, Lt.randomRow = It.randomRow;
                var Vt = It.rowIndex;
                void 0 !== Vt && (Lt.rowIndex = Vt), Lt.cycles = It.cycles, u.textureSheetAnimation = Lt;
            }
        }, n._activeHierarchy = function(t) {
            laya.display.Node.prototype._activeHierarchy.call(this, t), this.particleSystem.playOnAwake && this.particleSystem.play();
        }, n._inActiveHierarchy = function(t) {
            laya.display.Node.prototype._inActiveHierarchy.call(this, t), this.particleSystem.isAlive && this.particleSystem.simulate(0, !0);
        }, n._cloneTo = function(t, e, n) {
            var i = t, r = i._particleSystem;
            this._particleSystem.cloneTo(r);
            var a = i._render, o = this._render;
            a.sharedMaterials = o.sharedMaterials, a.enable = o.enable, a.renderMode = o.renderMode, 
            a.mesh = o.mesh, a.stretchedBillboardCameraSpeedScale = o.stretchedBillboardCameraSpeedScale, 
            a.stretchedBillboardSpeedScale = o.stretchedBillboardSpeedScale, a.stretchedBillboardLengthScale = o.stretchedBillboardLengthScale, 
            a.sortingFudge = o.sortingFudge, laya.d3.core.Sprite3D.prototype._cloneTo.call(this, t, e, n);
        }, n.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._particleSystem.destroy(), this._particleSystem = null);
        }, a(0, n, "particleSystem", function() {
            return this._particleSystem;
        }), a(0, n, "particleRenderer", function() {
            return this._render;
        }), e.__init__ = function() {
            e.SHADERDEFINE_RENDERMODE_BILLBOARD = e.shaderDefines.registerDefine("SPHERHBILLBOARD"), 
            e.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = e.shaderDefines.registerDefine("STRETCHEDBILLBOARD"), 
            e.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = e.shaderDefines.registerDefine("HORIZONTALBILLBOARD"), 
            e.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = e.shaderDefines.registerDefine("VERTICALBILLBOARD"), 
            e.SHADERDEFINE_COLOROVERLIFETIME = e.shaderDefines.registerDefine("COLOROVERLIFETIME"), 
            e.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = e.shaderDefines.registerDefine("RANDOMCOLOROVERLIFETIME"), 
            e.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = e.shaderDefines.registerDefine("VELOCITYOVERLIFETIMECONSTANT"), 
            e.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = e.shaderDefines.registerDefine("VELOCITYOVERLIFETIMECURVE"), 
            e.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = e.shaderDefines.registerDefine("VELOCITYOVERLIFETIMERANDOMCONSTANT"), 
            e.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = e.shaderDefines.registerDefine("VELOCITYOVERLIFETIMERANDOMCURVE"), 
            e.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = e.shaderDefines.registerDefine("TEXTURESHEETANIMATIONCURVE"), 
            e.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = e.shaderDefines.registerDefine("TEXTURESHEETANIMATIONRANDOMCURVE"), 
            e.SHADERDEFINE_ROTATIONOVERLIFETIME = e.shaderDefines.registerDefine("ROTATIONOVERLIFETIME"), 
            e.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = e.shaderDefines.registerDefine("ROTATIONOVERLIFETIMESEPERATE"), 
            e.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = e.shaderDefines.registerDefine("ROTATIONOVERLIFETIMECONSTANT"), 
            e.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = e.shaderDefines.registerDefine("ROTATIONOVERLIFETIMECURVE"), 
            e.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = e.shaderDefines.registerDefine("ROTATIONOVERLIFETIMERANDOMCONSTANTS"), 
            e.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = e.shaderDefines.registerDefine("ROTATIONOVERLIFETIMERANDOMCURVES"), 
            e.SHADERDEFINE_SIZEOVERLIFETIMECURVE = e.shaderDefines.registerDefine("SIZEOVERLIFETIMECURVE"), 
            e.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = e.shaderDefines.registerDefine("SIZEOVERLIFETIMECURVESEPERATE"), 
            e.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = e.shaderDefines.registerDefine("SIZEOVERLIFETIMERANDOMCURVES"), 
            e.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = e.shaderDefines.registerDefine("SIZEOVERLIFETIMERANDOMCURVESSEPERATE"), 
            e.SHADERDEFINE_RENDERMODE_MESH = e.shaderDefines.registerDefine("RENDERMODE_MESH"), 
            e.SHADERDEFINE_SHAPE = e.shaderDefines.registerDefine("SHAPE");
        }, e._initStartLife = function(t) {
            for (var e = new Xt(), n = t.startLifetimes, i = 0, r = n.length; i < r; i++) {
                var a = n[i];
                e.add(a.key, a.value);
            }
            return e;
        }, e.SHADERDEFINE_RENDERMODE_BILLBOARD = 0, e.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD = 0, 
        e.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD = 0, e.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD = 0, 
        e.SHADERDEFINE_COLOROVERLIFETIME = 0, e.SHADERDEFINE_RANDOMCOLOROVERLIFETIME = 0, 
        e.SHADERDEFINE_VELOCITYOVERLIFETIMECONSTANT = 0, e.SHADERDEFINE_VELOCITYOVERLIFETIMECURVE = 0, 
        e.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCONSTANT = 0, e.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE = 0, 
        e.SHADERDEFINE_TEXTURESHEETANIMATIONCURVE = 0, e.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE = 0, 
        e.SHADERDEFINE_ROTATIONOVERLIFETIME = 0, e.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE = 0, 
        e.SHADERDEFINE_ROTATIONOVERLIFETIMECONSTANT = 0, e.SHADERDEFINE_ROTATIONOVERLIFETIMECURVE = 0, 
        e.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCONSTANTS = 0, e.SHADERDEFINE_ROTATIONOVERLIFETIMERANDOMCURVES = 0, 
        e.SHADERDEFINE_SIZEOVERLIFETIMECURVE = 0, e.SHADERDEFINE_SIZEOVERLIFETIMECURVESEPERATE = 0, 
        e.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES = 0, e.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE = 0, 
        e.SHADERDEFINE_RENDERMODE_MESH = 0, e.SHADERDEFINE_SHAPE = 0, i(e, [ "WORLDPOSITION", function() {
            return this.WORLDPOSITION = Vt.propertyNameToID("u_WorldPosition");
        }, "WORLDROTATION", function() {
            return this.WORLDROTATION = Vt.propertyNameToID("u_WorldRotation");
        }, "POSITIONSCALE", function() {
            return this.POSITIONSCALE = Vt.propertyNameToID("u_PositionScale");
        }, "SIZESCALE", function() {
            return this.SIZESCALE = Vt.propertyNameToID("u_SizeScale");
        }, "SCALINGMODE", function() {
            return this.SCALINGMODE = Vt.propertyNameToID("u_ScalingMode");
        }, "GRAVITY", function() {
            return this.GRAVITY = Vt.propertyNameToID("u_Gravity");
        }, "THREEDSTARTROTATION", function() {
            return this.THREEDSTARTROTATION = Vt.propertyNameToID("u_ThreeDStartRotation");
        }, "STRETCHEDBILLBOARDLENGTHSCALE", function() {
            return this.STRETCHEDBILLBOARDLENGTHSCALE = Vt.propertyNameToID("u_StretchedBillboardLengthScale");
        }, "STRETCHEDBILLBOARDSPEEDSCALE", function() {
            return this.STRETCHEDBILLBOARDSPEEDSCALE = Vt.propertyNameToID("u_StretchedBillboardSpeedScale");
        }, "SIMULATIONSPACE", function() {
            return this.SIMULATIONSPACE = Vt.propertyNameToID("u_SimulationSpace");
        }, "CURRENTTIME", function() {
            return this.CURRENTTIME = Vt.propertyNameToID("u_CurrentTime");
        }, "VOLVELOCITYCONST", function() {
            return this.VOLVELOCITYCONST = Vt.propertyNameToID("u_VOLVelocityConst");
        }, "VOLVELOCITYGRADIENTX", function() {
            return this.VOLVELOCITYGRADIENTX = Vt.propertyNameToID("u_VOLVelocityGradientX");
        }, "VOLVELOCITYGRADIENTY", function() {
            return this.VOLVELOCITYGRADIENTY = Vt.propertyNameToID("u_VOLVelocityGradientY");
        }, "VOLVELOCITYGRADIENTZ", function() {
            return this.VOLVELOCITYGRADIENTZ = Vt.propertyNameToID("u_VOLVelocityGradientZ");
        }, "VOLVELOCITYCONSTMAX", function() {
            return this.VOLVELOCITYCONSTMAX = Vt.propertyNameToID("u_VOLVelocityConstMax");
        }, "VOLVELOCITYGRADIENTXMAX", function() {
            return this.VOLVELOCITYGRADIENTXMAX = Vt.propertyNameToID("u_VOLVelocityGradientMaxX");
        }, "VOLVELOCITYGRADIENTYMAX", function() {
            return this.VOLVELOCITYGRADIENTYMAX = Vt.propertyNameToID("u_VOLVelocityGradientMaxY");
        }, "VOLVELOCITYGRADIENTZMAX", function() {
            return this.VOLVELOCITYGRADIENTZMAX = Vt.propertyNameToID("u_VOLVelocityGradientMaxZ");
        }, "VOLSPACETYPE", function() {
            return this.VOLSPACETYPE = Vt.propertyNameToID("u_VOLSpaceType");
        }, "COLOROVERLIFEGRADIENTALPHAS", function() {
            return this.COLOROVERLIFEGRADIENTALPHAS = Vt.propertyNameToID("u_ColorOverLifeGradientAlphas");
        }, "COLOROVERLIFEGRADIENTCOLORS", function() {
            return this.COLOROVERLIFEGRADIENTCOLORS = Vt.propertyNameToID("u_ColorOverLifeGradientColors");
        }, "MAXCOLOROVERLIFEGRADIENTALPHAS", function() {
            return this.MAXCOLOROVERLIFEGRADIENTALPHAS = Vt.propertyNameToID("u_MaxColorOverLifeGradientAlphas");
        }, "MAXCOLOROVERLIFEGRADIENTCOLORS", function() {
            return this.MAXCOLOROVERLIFEGRADIENTCOLORS = Vt.propertyNameToID("u_MaxColorOverLifeGradientColors");
        }, "SOLSIZEGRADIENT", function() {
            return this.SOLSIZEGRADIENT = Vt.propertyNameToID("u_SOLSizeGradient");
        }, "SOLSIZEGRADIENTX", function() {
            return this.SOLSIZEGRADIENTX = Vt.propertyNameToID("u_SOLSizeGradientX");
        }, "SOLSIZEGRADIENTY", function() {
            return this.SOLSIZEGRADIENTY = Vt.propertyNameToID("u_SOLSizeGradientY");
        }, "SOLSizeGradientZ", function() {
            return this.SOLSizeGradientZ = Vt.propertyNameToID("u_SOLSizeGradientZ");
        }, "SOLSizeGradientMax", function() {
            return this.SOLSizeGradientMax = Vt.propertyNameToID("u_SOLSizeGradientMax");
        }, "SOLSIZEGRADIENTXMAX", function() {
            return this.SOLSIZEGRADIENTXMAX = Vt.propertyNameToID("u_SOLSizeGradientMaxX");
        }, "SOLSIZEGRADIENTYMAX", function() {
            return this.SOLSIZEGRADIENTYMAX = Vt.propertyNameToID("u_SOLSizeGradientMaxY");
        }, "SOLSizeGradientZMAX", function() {
            return this.SOLSizeGradientZMAX = Vt.propertyNameToID("u_SOLSizeGradientMaxZ");
        }, "ROLANGULARVELOCITYCONST", function() {
            return this.ROLANGULARVELOCITYCONST = Vt.propertyNameToID("u_ROLAngularVelocityConst");
        }, "ROLANGULARVELOCITYCONSTSEPRARATE", function() {
            return this.ROLANGULARVELOCITYCONSTSEPRARATE = Vt.propertyNameToID("u_ROLAngularVelocityConstSeprarate");
        }, "ROLANGULARVELOCITYGRADIENT", function() {
            return this.ROLANGULARVELOCITYGRADIENT = Vt.propertyNameToID("u_ROLAngularVelocityGradient");
        }, "ROLANGULARVELOCITYGRADIENTX", function() {
            return this.ROLANGULARVELOCITYGRADIENTX = Vt.propertyNameToID("u_ROLAngularVelocityGradientX");
        }, "ROLANGULARVELOCITYGRADIENTY", function() {
            return this.ROLANGULARVELOCITYGRADIENTY = Vt.propertyNameToID("u_ROLAngularVelocityGradientY");
        }, "ROLANGULARVELOCITYGRADIENTZ", function() {
            return this.ROLANGULARVELOCITYGRADIENTZ = Vt.propertyNameToID("u_ROLAngularVelocityGradientZ");
        }, "ROLANGULARVELOCITYCONSTMAX", function() {
            return this.ROLANGULARVELOCITYCONSTMAX = Vt.propertyNameToID("u_ROLAngularVelocityConstMax");
        }, "ROLANGULARVELOCITYCONSTMAXSEPRARATE", function() {
            return this.ROLANGULARVELOCITYCONSTMAXSEPRARATE = Vt.propertyNameToID("u_ROLAngularVelocityConstMaxSeprarate");
        }, "ROLANGULARVELOCITYGRADIENTMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTMAX = Vt.propertyNameToID("u_ROLAngularVelocityGradientMax");
        }, "ROLANGULARVELOCITYGRADIENTXMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTXMAX = Vt.propertyNameToID("u_ROLAngularVelocityGradientMaxX");
        }, "ROLANGULARVELOCITYGRADIENTYMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTYMAX = Vt.propertyNameToID("u_ROLAngularVelocityGradientMaxY");
        }, "ROLANGULARVELOCITYGRADIENTZMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTZMAX = Vt.propertyNameToID("u_ROLAngularVelocityGradientMaxZ");
        }, "ROLANGULARVELOCITYGRADIENTWMAX", function() {
            return this.ROLANGULARVELOCITYGRADIENTWMAX = Vt.propertyNameToID("u_ROLAngularVelocityGradientMaxW");
        }, "TEXTURESHEETANIMATIONCYCLES", function() {
            return this.TEXTURESHEETANIMATIONCYCLES = Vt.propertyNameToID("u_TSACycles");
        }, "TEXTURESHEETANIMATIONSUBUVLENGTH", function() {
            return this.TEXTURESHEETANIMATIONSUBUVLENGTH = Vt.propertyNameToID("u_TSASubUVLength");
        }, "TEXTURESHEETANIMATIONGRADIENTUVS", function() {
            return this.TEXTURESHEETANIMATIONGRADIENTUVS = Vt.propertyNameToID("u_TSAGradientUVs");
        }, "TEXTURESHEETANIMATIONGRADIENTMAXUVS", function() {
            return this.TEXTURESHEETANIMATIONGRADIENTMAXUVS = Vt.propertyNameToID("u_TSAMaxGradientUVs");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Jn.shaderDefines);
        } ]), e;
    }(Jn), xi = function(t) {
        function e(t, n) {
            this._geometryFilter = null, void 0 === t && (t = 2), e.__super.call(this, n), this._geometryFilter = new mn(this, t), 
            this._render = new qn(this), this._changeRenderObjects(this._render, 0, ri.defaultMaterial);
        }
        r(e, "laya.d3.core.pixelLine.PixelLineSprite3D", Jn);
        var n = e.prototype;
        return n._changeRenderObjects = function(t, e, n) {
            var i = this._render._renderElements;
            n || (n = ri.defaultMaterial);
            var r = i[e];
            r || (r = i[e] = new At()), r.setTransform(this._transform), r.setGeometry(this._geometryFilter), 
            r.render = this._render, r.material = n;
        }, n.addLine = function(t, e, n, i) {
            if (this._geometryFilter._lineCount === this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount has equal with maxLineCount.";
            this._geometryFilter._updateLineData(this._geometryFilter._lineCount++, t, e, n, i);
        }, n.addLines = function(t) {
            var e = this._geometryFilter._lineCount, n = t.length;
            if (e + n > this._geometryFilter._maxLineCount) throw "PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.";
            this._geometryFilter._updateLineDatas(e, t), this._geometryFilter._lineCount += n;
        }, n.removeLine = function(t) {
            if (!(t < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._removeLineData(t);
        }, n.setLine = function(t, e, n, i, r) {
            if (!(t < this._geometryFilter._lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._updateLineData(t, e, n, i, r);
        }, n.getLine = function(t, e) {
            if (!(t < this.lineCount)) throw "PixelLineSprite3D: index must less than lineCount.";
            this._geometryFilter._getLineData(t, e);
        }, n.clear = function() {
            this._geometryFilter._lineCount = 0;
        }, a(0, n, "maxLineCount", function() {
            return this._geometryFilter._maxLineCount;
        }, function(t) {
            this._geometryFilter._resizeLineData(t), this._geometryFilter._lineCount = Math.min(this._geometryFilter._lineCount, t);
        }), a(0, n, "pixelLineRenderer", function() {
            return this._render;
        }), a(0, n, "lineCount", function() {
            return this._geometryFilter._lineCount;
        }, function(t) {
            if (t > this.maxLineCount) throw "PixelLineSprite3D: lineCount can't large than maxLineCount";
            this._geometryFilter._lineCount = t;
        }), e;
    }(), Di = function(t) {
        function e(t, n) {
            e.__super.call(this, n), this._meshFilter = new $t(this), this._render = new mi(this), 
            t && (this._meshFilter.sharedMesh = t);
        }
        r(e, "laya.d3.core.SkinnedMeshSprite3D", t);
        var n = e.prototype;
        return n._parse = function(t, e) {
            laya.d3.core.Sprite3D.prototype._parse.call(this, t, e);
            var n = this.skinnedMeshRenderer, i = t.lightmapIndex;
            null != i && (n.lightmapIndex = i);
            var r = t.lightmapScaleOffset;
            r && (n.lightmapScaleOffset = new mt(r[0], r[1], r[2], r[3]));
            var a;
            if (a = t.meshPath) {
                var o = S.getRes(a);
                o && (this.meshFilter.sharedMesh = o);
            }
            var s = t.materials;
            if (s) {
                var l = n.sharedMaterials, h = s.length;
                l.length = h;
                for (var u = 0; u < h; u++) l[u] = S.getRes(s[u].path);
                n.sharedMaterials = l;
            }
            var c = t.boundBox, _ = c.min, d = c.max;
            if (n.localBounds.setMin(new Tt(_[0], _[1], _[2])), n.localBounds.setMax(new Tt(d[0], d[1], d[2])), 
            e) {
                var f = t.rootBone;
                n.rootBone = e[f];
                var m = t.bones, p = 0;
                for (u = 0, p = m.length; u < p; u++) n.bones.push(e[m[u]]);
            } else t.rootBone && n._setRootBone(t.rootBone);
        }, n._changeHierarchyAnimator = function(e) {
            t.prototype._changeHierarchyAnimator.call(this, e), this.skinnedMeshRenderer._setCacheAnimator(e);
        }, n._changeAnimatorAvatar = function(t) {
            this.skinnedMeshRenderer._setCacheAvatar(t);
        }, n._cloneTo = function(t, n, i) {
            var r = t;
            r.meshFilter.sharedMesh = this.meshFilter.sharedMesh;
            var a = this._render, o = r._render;
            o.enable = a.enable, o.sharedMaterials = a.sharedMaterials, o.castShadow = a.castShadow;
            var s = a.lightmapScaleOffset;
            s && (o.lightmapScaleOffset = s.clone()), o.receiveShadow = a.receiveShadow, o.sortingFudge = a.sortingFudge, 
            o._rootBone = a._rootBone;
            var l = a.bones, h = o.bones, u = l.length;
            h.length = u;
            var c = a.rootBone;
            if (c) {
                var _ = kt._getHierarchyPath(n, c, e._tempArray0);
                o.rootBone = _ ? kt._getNodeByHierarchyPath(i, _) : c;
            }
            for (var d = 0; d < l.length; d++) _ = kt._getHierarchyPath(n, l[d], e._tempArray0), 
            h[d] = _ ? kt._getNodeByHierarchyPath(i, _) : l[d];
            var f = a.localBounds;
            f && f.cloneTo(o.localBounds), laya.d3.core.Sprite3D.prototype._cloneTo.call(this, t, n, i);
        }, n.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._meshFilter.destroy());
        }, a(0, n, "meshFilter", function() {
            return this._meshFilter;
        }), a(0, n, "skinnedMeshRenderer", function() {
            return this._render;
        }), e.__init__ = function() {
            e.SHADERDEFINE_BONE = e.shaderDefines.registerDefine("BONE");
        }, e._tempArray0 = [], e.SHADERDEFINE_BONE = 0, i(e, [ "BONES", function() {
            return this.BONES = Vt.propertyNameToID("u_Bones");
        }, "shaderDefines", function() {
            return this.shaderDefines = new pt(Ei.shaderDefines);
        } ]), e;
    }(Jn), Ii = function(t) {
        function e() {
            this._range = NaN, this._lightMatrix = new He(), e.__super.call(this), this._range = 6;
        }
        r(e, "laya.d3.core.light.PointLight", t);
        var n = e.prototype;
        return n._onActive = function() {
            t.prototype._onActive.call(this), this._lightmapBakedType !== ti.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.add(Qn.SHADERDEFINE_POINTLIGHT);
        }, n._onInActive = function() {
            t.prototype._onInActive.call(this), this._lightmapBakedType !== ti.LIGHTMAPBAKEDTYPE_BAKED && this._scene._defineDatas.remove(Qn.SHADERDEFINE_POINTLIGHT);
        }, n._prepareToScene = function() {
            var t = this._scene;
            if (t.enableLight && this.activeInHierarchy) {
                t._defineDatas;
                var n = t._shaderValues;
                Tt.scale(this.color, this._intensity, this._intensityColor), n.setVector3(Qn.POINTLIGHTCOLOR, this._intensityColor), 
                n.setVector3(Qn.POINTLIGHTPOS, this.transform.position), n.setNumber(Qn.POINTLIGHTRANGE, this.range);
                var i = this._lightMatrix, r = i.elements;
                i.identity(), r[0] = r[5] = r[10] = 1 / this._range;
                var a = e._tempMatrix0;
                return this.transform.worldMatrix.invert(a), He.multiply(i, a, i), n.setMatrix4x4(Qn.POINTLIGHTMATRIX, i), 
                !0;
            }
            return !1;
        }, n._parse = function(e, n) {
            t.prototype._parse.call(this, e, n), this.range = e.range;
        }, a(0, n, "range", function() {
            return this._range;
        }, function(t) {
            this._range = t;
        }), i(e, [ "_tempMatrix0", function() {
            return this._tempMatrix0 = new He();
        } ]), e;
    }(ti), Ri = function(t) {
        function e(t, n, i, r, a, o, s, l) {
            this._terrainFilter = null, e.__super.call(this, l), this._terrainFilter = new Rn(this, t, n, i, r, a, o, s), 
            this._render = new Zn(this);
        }
        r(e, "laya.d3.terrain.TerrainChunk", t);
        var n = e.prototype;
        return n.buildRenderElementAndMaterial = function(t, e, n, i, r, a, o, s, l, h, u, c, _, d, f, m, p, T) {
            void 0 === u && (u = 1), void 0 === c && (c = 1), void 0 === _ && (_ = 1), void 0 === d && (d = 1), 
            void 0 === f && (f = 1), void 0 === m && (m = 1), void 0 === p && (p = 1), void 0 === T && (T = 1);
            var E = new _i();
            l && (E.diffuseColor = l), s && (E.ambientColor = s), h && (E.specularColor = h), 
            E.splatAlphaTexture = S.getRes(n), E.normalTexture = e ? S.getRes(e) : null, E.diffuseTexture1 = i ? S.getRes(i) : null, 
            E.diffuseTexture2 = r ? S.getRes(r) : null, E.diffuseTexture3 = a ? S.getRes(a) : null, 
            E.diffuseTexture4 = o ? S.getRes(o) : null, E.setDiffuseScale1(u, c), E.setDiffuseScale2(_, d), 
            E.setDiffuseScale3(f, m), E.setDiffuseScale4(p, T), E.setDetailNum(t), 0 != this._render._renderElements.length && (E.renderMode = 2);
            var v = new At();
            v.setTransform(this._transform), v.render = this._render, v.setGeometry(this._terrainFilter), 
            this._render._renderElements.push(v), this._render.sharedMaterial = E;
        }, n._cloneTo = function(t, e, n) {
            console.log("Terrain Chunk can't clone");
        }, n.destroy = function(e) {
            void 0 === e && (e = !0), this.destroyed || (t.prototype.destroy.call(this, e), 
            this._terrainFilter.destroy(), this._terrainFilter = null);
        }, a(0, n, "terrainFilter", function() {
            return this._terrainFilter;
        }), a(0, n, "terrainRender", function() {
            return this._render;
        }), e;
    }(Jn), Mi = function(t) {
        function e(t, n, i) {
            this._updateViewMatrix = !0, this._offScreenRenderTexture = null, this._alwaysUseRenderTexture = !1, 
            this._renderTexture = null, this._postProcess = null, this.enableRender = !0, this._screenShaderData = new ut(), 
            this._postProcessCommandBuffers = [], void 0 === t && (t = 0), void 0 === n && (n = .3), 
            void 0 === i && (i = 1e3), this._viewMatrix = new He(), this._projectionMatrix = new He(), 
            this._projectionViewMatrix = new He(), this._projectionViewMatrixNoTranslateScale = new He(), 
            this._viewport = new Me(0, 0, 0, 0), this._normalizedViewport = new Me(0, 0, 1, 1), 
            this._aspectRatio = t, this._boundFrustum = new Ve(He.DEFAULT), R.supportWebGLPlusCulling && (this._boundFrustumBuffer = new Float32Array(24)), 
            e.__super.call(this, n, i), this.transform.on("transformchanged", this, this._onTransformChanged);
        }
        r(e, "laya.d3.core.Camera", t);
        var o = e.prototype;
        return o._isLayerVisible = function(t) {
            return 0 != (Math.pow(2, t) & this.cullingMask);
        }, o._onTransformChanged = function(t) {
            (t &= 64) && (this._updateViewMatrix = !0);
        }, o._calculationViewport = function(t, e, n) {
            var i = t.x * e, r = t.y * n, a = i + Math.max(t.width * e, 0), o = r + Math.max(t.height * n, 0), s = Math.ceil(i), l = Math.ceil(r), h = Math.floor(a), u = Math.floor(o), c = s - i >= .5 ? Math.floor(i) : s, _ = l - r >= .5 ? Math.floor(r) : l, d = a - h >= .5 ? Math.ceil(a) : h, f = o - u >= .5 ? Math.ceil(o) : u;
            this._viewport.x = c, this._viewport.y = _, this._viewport.width = d - c, this._viewport.height = f - _;
        }, o._parse = function(e, n) {
            t.prototype._parse.call(this, e, n);
            var i = e.viewport;
            this.normalizedViewport = new Me(i[0], i[1], i[2], i[3]);
        }, o._calculateProjectionMatrix = function() {
            if (!this._useUserProjectionMatrix) if (this._orthographic) {
                var t = this.orthographicVerticalSize * this.aspectRatio * .5, e = .5 * this.orthographicVerticalSize;
                He.createOrthoOffCenter(-t, t, -e, e, this.nearPlane, this.farPlane, this._projectionMatrix);
            } else He.createPerspective(3.1416 * this.fieldOfView / 180, this.aspectRatio, this.nearPlane, this.farPlane, this._projectionMatrix);
        }, o._getCanvasHeight = function() {
            return this._offScreenRenderTexture ? this._offScreenRenderTexture.height : J.clientHeight;
        }, o._applyPostProcessCommandBuffers = function() {
            for (var t = 0, e = this._postProcessCommandBuffers.length; t < e; t++) this._postProcessCommandBuffers[t]._apply();
        }, o._needForceSetRenderTexture = function() {
            return this._alwaysUseRenderTexture && !this._offScreenRenderTexture;
        }, o.render = function(t, e) {
            if (this._scene) {
                var n = this._needForceSetRenderTexture();
                n && (this._renderTexture = pi.getTemporary(J.clientWidth, J.clientHeight, 0, 0, 1));
                var i = v.instance, r = J._instance, a = r.scene = this._scene;
                if (a.parallelSplitShadowMaps[0]) {
                    ut.setRuntimeValueMode(!1);
                    var o = a.parallelSplitShadowMaps[0];
                    o._calcAllLightCameraInfo(this), a._defineDatas.add(Qn.SHADERDEFINE_CAST_SHADOW);
                    for (var s = 0, l = o.shadowMapCount; s < l; s++) {
                        var h = o.cameras[s];
                        r.camera = h, r.projectionViewMatrix = h.projectionViewMatrix, Pe.renderObjectCulling(h, a, r, a._castShadowRenders);
                        var u = o.cameras[s + 1].renderTarget;
                        u._start(), r.camera = h, r.viewport = h.viewport, h._prepareCameraToRender(), h._prepareCameraViewProject(h.viewMatrix, h.projectionMatrix, r.projectionViewMatrix, h._projectionViewMatrixNoTranslateScale), 
                        a._clear(i, r), a._opaqueQueue._render(r, !1), u._end();
                    }
                    a._defineDatas.remove(Qn.SHADERDEFINE_CAST_SHADOW), ut.setRuntimeValueMode(!0);
                }
                r.camera = this, a._preRenderScript();
                var c, _;
                c = r.viewMatrix = this.viewMatrix;
                var d = this._renderTexture;
                if (d ? (d._start(), He.multiply(ai._invertYScaleMatrix, this._projectionMatrix, ai._invertYProjectionMatrix), 
                He.multiply(ai._invertYScaleMatrix, this.projectionViewMatrix, ai._invertYProjectionViewMatrix), 
                _ = r.projectionMatrix = ai._invertYProjectionMatrix, r.projectionViewMatrix = ai._invertYProjectionViewMatrix) : (_ = r.projectionMatrix = this._projectionMatrix, 
                r.projectionViewMatrix = this.projectionViewMatrix), r.viewport = this.viewport, 
                this._prepareCameraToRender(), this._prepareCameraViewProject(c, _, r.projectionViewMatrix, this._projectionViewMatrixNoTranslateScale), 
                a._preCulling(r, this), a._clear(i, r), a._renderScene(i, r, t, e), a._postRenderScript(), 
                d && d._end(), this._postProcess && this._postProcess._render(), n) {
                    var f = nn.create(this._renderTexture, null, le.screenShader, this._screenShaderData);
                    f.run(), f.recover(), pi.setReleaseTemporary(this._renderTexture);
                }
            }
        }, o.viewportPointToRay = function(t, e) {
            ce.calculateCursorRay(t, this.viewport, this._projectionMatrix, this.viewMatrix, null, e);
        }, o.normalizedViewportPointToRay = function(t, n) {
            var i = e._tempVector20, r = this.viewport;
            i.x = t.x * r.width, i.y = t.y * r.height, ce.calculateCursorRay(i, this.viewport, this._projectionMatrix, this.viewMatrix, null, n);
        }, o.worldToViewportPoint = function(t, e) {
            He.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix), 
            this.viewport.project(t, this._projectionViewMatrix, e), e.x = e.x / n.stage.clientScaleX, 
            e.y = e.y / n.stage.clientScaleY;
        }, o.worldToNormalizedViewportPoint = function(t, e) {
            He.multiply(this._projectionMatrix, this._viewMatrix, this._projectionViewMatrix), 
            this.normalizedViewport.project(t, this._projectionViewMatrix, e), e.x = e.x / n.stage.clientScaleX, 
            e.y = e.y / n.stage.clientScaleY;
        }, o.convertScreenCoordToOrthographicCoord = function(t, e) {
            if (this._orthographic) {
                var n = J.clientWidth, i = J.clientHeight, r = this.orthographicVerticalSize * this.aspectRatio / n, a = this.orthographicVerticalSize / i;
                return e.x = (-n / 2 + t.x) * r, e.y = (i / 2 - t.y) * a, e.z = (this.nearPlane - this.farPlane) * (t.z + 1) / 2 - this.nearPlane, 
                Tt.transformCoordinate(e, this.transform.worldMatrix, e), !0;
            }
            return !1;
        }, o.destroy = function(e) {
            void 0 === e && (e = !0), this._offScreenRenderTexture = null, this.transform.off("transformchanged", this, this._onTransformChanged), 
            t.prototype.destroy.call(this, e);
        }, o.addCommandBuffer = function(t, e) {
            switch (t) {
              case 0:
                this._postProcessCommandBuffers.push(e);
                break;

              default:
                throw "Camera:unknown event.";
            }
        }, o.removeCommandBuffer = function(t, e) {
            switch (t) {
              case 0:
                var n = this._postProcessCommandBuffers.indexOf(e);
                -1 !== n && this._postProcessCommandBuffers.splice(n, 1);
                break;

              default:
                throw "Camera:unknown event.";
            }
        }, o.removeCommandBuffers = function(t) {
            switch (t) {
              case 0:
                this._postProcessCommandBuffers.length = 0;
                break;

              default:
                throw "Camera:unknown event.";
            }
        }, o.getRenderTexture = function() {
            return this._renderTexture;
        }, a(0, o, "renderTarget", function() {
            return this._offScreenRenderTexture;
        }, function(t) {
            this._offScreenRenderTexture !== t && (this._offScreenRenderTexture = t, this._renderTexture = t, 
            this._calculateProjectionMatrix());
        }), a(0, o, "projectionViewMatrix", function() {
            return He.multiply(this.projectionMatrix, this.viewMatrix, this._projectionViewMatrix), 
            this._projectionViewMatrix;
        }), a(0, o, "aspectRatio", function() {
            if (0 === this._aspectRatio) {
                var t = this.viewport;
                return t.width / t.height;
            }
            return this._aspectRatio;
        }, function(t) {
            if (t < 0) throw new Error("Camera: the aspect ratio has to be a positive real number.");
            this._aspectRatio = t, this._calculateProjectionMatrix();
        }), a(0, o, "boundFrustum", function() {
            if (this._boundFrustum.matrix = this.projectionViewMatrix, R.supportWebGLPlusCulling) {
                var t = this._boundFrustum.near, e = this._boundFrustum.far, n = this._boundFrustum.left, i = this._boundFrustum.right, r = this._boundFrustum.top, a = this._boundFrustum.bottom, o = t.normal, s = e.normal, l = n.normal, h = i.normal, u = r.normal, c = a.normal, _ = this._boundFrustumBuffer;
                _[0] = o.x, _[1] = o.y, _[2] = o.z, _[3] = t.distance, _[4] = s.x, _[5] = s.y, _[6] = s.z, 
                _[7] = e.distance, _[8] = l.x, _[9] = l.y, _[10] = l.z, _[11] = n.distance, _[12] = h.x, 
                _[13] = h.y, _[14] = h.z, _[15] = i.distance, _[16] = u.x, _[17] = u.y, _[18] = u.z, 
                _[19] = r.distance, _[20] = c.x, _[21] = c.y, _[22] = c.z, _[23] = a.distance;
            }
            return this._boundFrustum;
        }), a(0, o, "viewport", function() {
            return this._offScreenRenderTexture ? this._calculationViewport(this._normalizedViewport, this._offScreenRenderTexture.width, this._offScreenRenderTexture.height) : this._calculationViewport(this._normalizedViewport, J.clientWidth, J.clientHeight), 
            this._viewport;
        }, function(t) {
            var e = 0, n = 0;
            this._offScreenRenderTexture ? (e = this._offScreenRenderTexture.width, n = this._offScreenRenderTexture.height) : (e = J.clientWidth, 
            n = J.clientHeight), this._normalizedViewport.x = t.x / e, this._normalizedViewport.y = t.y / n, 
            this._normalizedViewport.width = t.width / e, this._normalizedViewport.height = t.height / n, 
            this._calculationViewport(this._normalizedViewport, e, n), this._calculateProjectionMatrix();
        }), a(0, o, "alwaysUseRenderTexture", function() {
            return this._alwaysUseRenderTexture;
        }, function(t) {
            this._alwaysUseRenderTexture = t;
        }), a(0, o, "normalizedViewport", function() {
            return this._normalizedViewport;
        }, function(t) {
            var e = 0, n = 0;
            this._offScreenRenderTexture ? (e = this._offScreenRenderTexture.width, n = this._offScreenRenderTexture.height) : (e = J.clientWidth, 
            n = J.clientHeight), this._normalizedViewport !== t && t.cloneTo(this._normalizedViewport), 
            this._calculationViewport(t, e, n), this._calculateProjectionMatrix();
        }), a(0, o, "projectionMatrix", function() {
            return this._projectionMatrix;
        }, function(t) {
            this._projectionMatrix = t, this._useUserProjectionMatrix = !0;
        }), a(0, o, "viewMatrix", function() {
            if (this._updateViewMatrix) {
                var t = this.transform.scale, e = t.x, n = t.y, i = t.z, r = this._viewMatrix.elements;
                this.transform.worldMatrix.cloneTo(this._viewMatrix), r[0] /= e, r[1] /= e, r[2] /= e, 
                r[4] /= n, r[5] /= n, r[6] /= n, r[8] /= i, r[9] /= i, r[10] /= i, this._viewMatrix.invert(this._viewMatrix), 
                this._updateViewMatrix = !1;
            }
            return this._viewMatrix;
        }), a(0, o, "postProcess", function() {
            return this._postProcess;
        }, function(t) {
            this._postProcess = t, this.alwaysUseRenderTexture = !0;
            var e = new le();
            this.addCommandBuffer(0, e), t._init(this, e);
        }), e.CAMERAEVENT_POSTPROCESS = 0, e._updateMark = 0, i(e, [ "_tempVector20", function() {
            return this._tempVector20 = new Et();
        } ]), e;
    }(ai);
    !function(t) {
        function e(t, n, i) {
            this._minX = NaN, this._minZ = NaN, this._cellSize = null, this._heightMap = null, 
            e.__super.call(this, t, i), this._heightMap = n, this._cellSize = new Et();
        }
        r(e, "laya.d3.core.MeshTerrainSprite3D", Ei);
        var n = e.prototype;
        n._disableRotation = function() {
            var t = this.transform.rotation;
            t.x = 0, t.y = 0, t.z = 0, t.w = 1, this.transform.rotation = t;
        }, n._getScaleX = function() {
            var t = this.transform.worldMatrix.elements, e = t[0], n = t[1], i = t[2];
            return Math.sqrt(e * e + n * n + i * i);
        }, n._getScaleZ = function() {
            var t = this.transform.worldMatrix.elements, e = t[8], n = t[9], i = t[10];
            return Math.sqrt(e * e + n * n + i * i);
        }, n._initCreateFromMesh = function(t, e) {
            this._heightMap = Gt.creatFromMesh(this.meshFilter.sharedMesh, t, e, this._cellSize);
            var n = this.meshFilter.sharedMesh.bounds, i = n.getMin();
            n.getMax(), this._minX = i.x, this._minZ = i.z;
        }, n._initCreateFromMeshHeightMap = function(t, e, n) {
            var i = this.meshFilter.sharedMesh.bounds;
            this._heightMap = Gt.createFromImage(t, e, n), this._computeCellSize(i);
            var r = i.getMin();
            i.getMax(), this._minX = r.x, this._minZ = r.z;
        }, n._computeCellSize = function(t) {
            var e = t.getMin(), n = t.getMax(), i = e.x, r = e.z, a = n.x - i, o = n.z - r;
            this._cellSize.x = a / (this._heightMap.width - 1), this._cellSize.y = o / (this._heightMap.height - 1);
        }, n._update = function(t) {
            this._disableRotation();
        }, n.getHeight = function(t, n) {
            e._tempVector3.x = t, e._tempVector3.y = 0, e._tempVector3.z = n, this._disableRotation();
            var i = this.transform.worldMatrix;
            i.invert(e._tempMatrix4x4), Tt.transformCoordinate(e._tempVector3, e._tempMatrix4x4, e._tempVector3), 
            t = e._tempVector3.x, n = e._tempVector3.z;
            var r = (t - this._minX) / this._cellSize.x, a = (n - this._minZ) / this._cellSize.y, o = Math.floor(a), s = Math.floor(r), l = r - s, h = a - o, u = NaN, c = NaN, _ = i.elements, d = _[4], f = _[5], m = _[6], p = Math.sqrt(d * d + f * f + m * m), T = _[13], E = this._heightMap.getHeight(o, s + 1), v = this._heightMap.getHeight(o + 1, s);
            if (isNaN(E) || isNaN(v)) return NaN;
            if (l + h <= 1) {
                var g = this._heightMap.getHeight(o, s);
                return isNaN(g) ? NaN : (u = E - g, c = v - g, (g + l * u + h * c) * p + T);
            }
            var S = this._heightMap.getHeight(o + 1, s + 1);
            return isNaN(S) ? NaN : (u = v - S, c = E - S, (S + (1 - l) * u + (1 - h) * c) * p + T);
        }, a(0, n, "minX", function() {
            var t = this.transform.worldMatrix.elements;
            return this._minX * this._getScaleX() + t[12];
        }), a(0, n, "width", function() {
            return (this._heightMap.width - 1) * this._cellSize.x * this._getScaleX();
        }), a(0, n, "minZ", function() {
            var t = this.transform.worldMatrix.elements;
            return this._minZ * this._getScaleZ() + t[14];
        }), a(0, n, "depth", function() {
            return (this._heightMap.height - 1) * this._cellSize.y * this._getScaleZ();
        }), e.createFromMesh = function(t, n, i, r) {
            var a = new e(t, null, r);
            return a._initCreateFromMesh(n, i), a;
        }, e.createFromMeshAndHeightMap = function(t, n, i, r, a) {
            var o = new e(t, null, a);
            return o._initCreateFromMeshHeightMap(n, i, r), o;
        }, i(e, [ "_tempVector3", function() {
            return this._tempVector3 = new Tt();
        }, "_tempMatrix4x4", function() {
            return this._tempMatrix4x4 = new He();
        } ]);
    }();
}(window, document, Laya);